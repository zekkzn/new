#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayUtilities

#include "Basic.hpp"

#include "GameplayUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GameplayUtilities.CharacterPusherComponent.Construct
// 0x0018 (0x0018 - 0x0000)
struct CharacterPusherComponent_Construct final
{
public:
	class UCapsuleComponent*                      CharacterDetector;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCapsuleComponent*                      CharacterCollision;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBasePushStrategyComponent*             PushStrategy;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterPusherComponent_Construct) == 0x000008, "Wrong alignment on CharacterPusherComponent_Construct");
static_assert(sizeof(CharacterPusherComponent_Construct) == 0x000018, "Wrong size on CharacterPusherComponent_Construct");
static_assert(offsetof(CharacterPusherComponent_Construct, CharacterDetector) == 0x000000, "Member 'CharacterPusherComponent_Construct::CharacterDetector' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_Construct, CharacterCollision) == 0x000008, "Member 'CharacterPusherComponent_Construct::CharacterCollision' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_Construct, PushStrategy) == 0x000010, "Member 'CharacterPusherComponent_Construct::PushStrategy' has a wrong offset!");

// Function GameplayUtilities.CharacterPusherComponent.OnCharacterDetectorOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct CharacterPusherComponent_OnCharacterDetectorOverlapExit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterPusherComponent_OnCharacterDetectorOverlapExit) == 0x000008, "Wrong alignment on CharacterPusherComponent_OnCharacterDetectorOverlapExit");
static_assert(sizeof(CharacterPusherComponent_OnCharacterDetectorOverlapExit) == 0x000020, "Wrong size on CharacterPusherComponent_OnCharacterDetectorOverlapExit");
static_assert(offsetof(CharacterPusherComponent_OnCharacterDetectorOverlapExit, HitComponent) == 0x000000, "Member 'CharacterPusherComponent_OnCharacterDetectorOverlapExit::HitComponent' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_OnCharacterDetectorOverlapExit, OtherActor) == 0x000008, "Member 'CharacterPusherComponent_OnCharacterDetectorOverlapExit::OtherActor' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_OnCharacterDetectorOverlapExit, OtherComp) == 0x000010, "Member 'CharacterPusherComponent_OnCharacterDetectorOverlapExit::OtherComp' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_OnCharacterDetectorOverlapExit, OtherBodyIndex) == 0x000018, "Member 'CharacterPusherComponent_OnCharacterDetectorOverlapExit::OtherBodyIndex' has a wrong offset!");

// Function GameplayUtilities.CharacterPusherComponent.SetIgnoredCharacter
// 0x0010 (0x0010 - 0x0000)
struct CharacterPusherComponent_SetIgnoredCharacter final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ignore;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterPusherComponent_SetIgnoredCharacter) == 0x000008, "Wrong alignment on CharacterPusherComponent_SetIgnoredCharacter");
static_assert(sizeof(CharacterPusherComponent_SetIgnoredCharacter) == 0x000010, "Wrong size on CharacterPusherComponent_SetIgnoredCharacter");
static_assert(offsetof(CharacterPusherComponent_SetIgnoredCharacter, Character) == 0x000000, "Member 'CharacterPusherComponent_SetIgnoredCharacter::Character' has a wrong offset!");
static_assert(offsetof(CharacterPusherComponent_SetIgnoredCharacter, Ignore) == 0x000008, "Member 'CharacterPusherComponent_SetIgnoredCharacter::Ignore' has a wrong offset!");

// Function GameplayUtilities.ActorPoolComponent.OnActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct ActorPoolComponent_OnActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorPoolComponent_OnActorDestroyed) == 0x000008, "Wrong alignment on ActorPoolComponent_OnActorDestroyed");
static_assert(sizeof(ActorPoolComponent_OnActorDestroyed) == 0x000008, "Wrong size on ActorPoolComponent_OnActorDestroyed");
static_assert(offsetof(ActorPoolComponent_OnActorDestroyed, DestroyedActor) == 0x000000, "Member 'ActorPoolComponent_OnActorDestroyed::DestroyedActor' has a wrong offset!");

// Function GameplayUtilities.ActorPoolComponent.OnActorsInPoolAcquiredChanged
// 0x0001 (0x0001 - 0x0000)
struct ActorPoolComponent_OnActorsInPoolAcquiredChanged final
{
public:
	bool                                          Acquired;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorPoolComponent_OnActorsInPoolAcquiredChanged) == 0x000001, "Wrong alignment on ActorPoolComponent_OnActorsInPoolAcquiredChanged");
static_assert(sizeof(ActorPoolComponent_OnActorsInPoolAcquiredChanged) == 0x000001, "Wrong size on ActorPoolComponent_OnActorsInPoolAcquiredChanged");
static_assert(offsetof(ActorPoolComponent_OnActorsInPoolAcquiredChanged, Acquired) == 0x000000, "Member 'ActorPoolComponent_OnActorsInPoolAcquiredChanged::Acquired' has a wrong offset!");

// Function GameplayUtilities.BasePoolableActorComponent.SetAcquired
// 0x0001 (0x0001 - 0x0000)
struct BasePoolableActorComponent_SetAcquired final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePoolableActorComponent_SetAcquired) == 0x000001, "Wrong alignment on BasePoolableActorComponent_SetAcquired");
static_assert(sizeof(BasePoolableActorComponent_SetAcquired) == 0x000001, "Wrong size on BasePoolableActorComponent_SetAcquired");
static_assert(offsetof(BasePoolableActorComponent_SetAcquired, Active) == 0x000000, "Member 'BasePoolableActorComponent_SetAcquired::Active' has a wrong offset!");

// Function GameplayUtilities.BasePoolableActorComponent.IsAcquired
// 0x0001 (0x0001 - 0x0000)
struct BasePoolableActorComponent_IsAcquired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePoolableActorComponent_IsAcquired) == 0x000001, "Wrong alignment on BasePoolableActorComponent_IsAcquired");
static_assert(sizeof(BasePoolableActorComponent_IsAcquired) == 0x000001, "Wrong size on BasePoolableActorComponent_IsAcquired");
static_assert(offsetof(BasePoolableActorComponent_IsAcquired, ReturnValue) == 0x000000, "Member 'BasePoolableActorComponent_IsAcquired::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.BoxOcclusionQueryComponent.GetEstimatedRenderedPixelCount
// 0x0004 (0x0004 - 0x0000)
struct BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount) == 0x000004, "Wrong alignment on BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount");
static_assert(sizeof(BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount) == 0x000004, "Wrong size on BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount");
static_assert(offsetof(BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount, ReturnValue) == 0x000000, "Member 'BoxOcclusionQueryComponent_GetEstimatedRenderedPixelCount::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.BoxOcclusionQueryComponent.GetNumberOfVisiblePixels
// 0x0004 (0x0004 - 0x0000)
struct BoxOcclusionQueryComponent_GetNumberOfVisiblePixels final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoxOcclusionQueryComponent_GetNumberOfVisiblePixels) == 0x000004, "Wrong alignment on BoxOcclusionQueryComponent_GetNumberOfVisiblePixels");
static_assert(sizeof(BoxOcclusionQueryComponent_GetNumberOfVisiblePixels) == 0x000004, "Wrong size on BoxOcclusionQueryComponent_GetNumberOfVisiblePixels");
static_assert(offsetof(BoxOcclusionQueryComponent_GetNumberOfVisiblePixels, ReturnValue) == 0x000000, "Member 'BoxOcclusionQueryComponent_GetNumberOfVisiblePixels::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.BoxOcclusionQueryComponent.GetVisiblePercentOfScreen
// 0x0004 (0x0004 - 0x0000)
struct BoxOcclusionQueryComponent_GetVisiblePercentOfScreen final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoxOcclusionQueryComponent_GetVisiblePercentOfScreen) == 0x000004, "Wrong alignment on BoxOcclusionQueryComponent_GetVisiblePercentOfScreen");
static_assert(sizeof(BoxOcclusionQueryComponent_GetVisiblePercentOfScreen) == 0x000004, "Wrong size on BoxOcclusionQueryComponent_GetVisiblePercentOfScreen");
static_assert(offsetof(BoxOcclusionQueryComponent_GetVisiblePercentOfScreen, ReturnValue) == 0x000000, "Member 'BoxOcclusionQueryComponent_GetVisiblePercentOfScreen::ReturnValue' has a wrong offset!");

// DelegateFunction GameplayUtilities.CharacterSightableComponent.OnHighestSightStatusChangedBP__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct CharacterSightableComponent_OnHighestSightStatusChangedBP__DelegateSignature final
{
public:
	ESightStatus                                  Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightableComponent_OnHighestSightStatusChangedBP__DelegateSignature) == 0x000001, "Wrong alignment on CharacterSightableComponent_OnHighestSightStatusChangedBP__DelegateSignature");
static_assert(sizeof(CharacterSightableComponent_OnHighestSightStatusChangedBP__DelegateSignature) == 0x000001, "Wrong size on CharacterSightableComponent_OnHighestSightStatusChangedBP__DelegateSignature");
static_assert(offsetof(CharacterSightableComponent_OnHighestSightStatusChangedBP__DelegateSignature, Status) == 0x000000, "Member 'CharacterSightableComponent_OnHighestSightStatusChangedBP__DelegateSignature::Status' has a wrong offset!");

// Function GameplayUtilities.CharacterSightableComponent.GetHighestSightStatus
// 0x0001 (0x0001 - 0x0000)
struct CharacterSightableComponent_GetHighestSightStatus final
{
public:
	ESightStatus                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightableComponent_GetHighestSightStatus) == 0x000001, "Wrong alignment on CharacterSightableComponent_GetHighestSightStatus");
static_assert(sizeof(CharacterSightableComponent_GetHighestSightStatus) == 0x000001, "Wrong size on CharacterSightableComponent_GetHighestSightStatus");
static_assert(offsetof(CharacterSightableComponent_GetHighestSightStatus, ReturnValue) == 0x000000, "Member 'CharacterSightableComponent_GetHighestSightStatus::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.Server_UpdateDiscernedCharacters
// 0x0010 (0x0010 - 0x0000)
struct CharacterSightComponent_Server_UpdateDiscernedCharacters final
{
public:
	TArray<class ACharacter*>                     Characters;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_Server_UpdateDiscernedCharacters) == 0x000008, "Wrong alignment on CharacterSightComponent_Server_UpdateDiscernedCharacters");
static_assert(sizeof(CharacterSightComponent_Server_UpdateDiscernedCharacters) == 0x000010, "Wrong size on CharacterSightComponent_Server_UpdateDiscernedCharacters");
static_assert(offsetof(CharacterSightComponent_Server_UpdateDiscernedCharacters, Characters) == 0x000000, "Member 'CharacterSightComponent_Server_UpdateDiscernedCharacters::Characters' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetMaximumSightDistance
// 0x0004 (0x0004 - 0x0000)
struct CharacterSightComponent_SetMaximumSightDistance final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetMaximumSightDistance) == 0x000004, "Wrong alignment on CharacterSightComponent_SetMaximumSightDistance");
static_assert(sizeof(CharacterSightComponent_SetMaximumSightDistance) == 0x000004, "Wrong size on CharacterSightComponent_SetMaximumSightDistance");
static_assert(offsetof(CharacterSightComponent_SetMaximumSightDistance, Value) == 0x000000, "Member 'CharacterSightComponent_SetMaximumSightDistance::Value' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetMinimumCharacterScreenPercentInZone
// 0x0008 (0x0008 - 0x0000)
struct CharacterSightComponent_SetMinimumCharacterScreenPercentInZone final
{
public:
	float                                         Trigger;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Untrigger;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetMinimumCharacterScreenPercentInZone) == 0x000004, "Wrong alignment on CharacterSightComponent_SetMinimumCharacterScreenPercentInZone");
static_assert(sizeof(CharacterSightComponent_SetMinimumCharacterScreenPercentInZone) == 0x000008, "Wrong size on CharacterSightComponent_SetMinimumCharacterScreenPercentInZone");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterScreenPercentInZone, Trigger) == 0x000000, "Member 'CharacterSightComponent_SetMinimumCharacterScreenPercentInZone::Trigger' has a wrong offset!");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterScreenPercentInZone, Untrigger) == 0x000004, "Member 'CharacterSightComponent_SetMinimumCharacterScreenPercentInZone::Untrigger' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetMinimumCharacterScreenPercentNotInZone
// 0x0008 (0x0008 - 0x0000)
struct CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone final
{
public:
	float                                         Trigger;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Untrigger;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone) == 0x000004, "Wrong alignment on CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone");
static_assert(sizeof(CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone) == 0x000008, "Wrong size on CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone, Trigger) == 0x000000, "Member 'CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone::Trigger' has a wrong offset!");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone, Untrigger) == 0x000004, "Member 'CharacterSightComponent_SetMinimumCharacterScreenPercentNotInZone::Untrigger' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetMinimumCharacterVisiblePixelsPercent
// 0x0008 (0x0008 - 0x0000)
struct CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent final
{
public:
	float                                         Trigger;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Untrigger;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent) == 0x000004, "Wrong alignment on CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent");
static_assert(sizeof(CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent) == 0x000008, "Wrong size on CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent, Trigger) == 0x000000, "Member 'CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent::Trigger' has a wrong offset!");
static_assert(offsetof(CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent, Untrigger) == 0x000004, "Member 'CharacterSightComponent_SetMinimumCharacterVisiblePixelsPercent::Untrigger' has a wrong offset!");

// Function GameplayUtilities.CharacterSightComponent.SetScreenVisibilityZoneRadiusPercent
// 0x0008 (0x0008 - 0x0000)
struct CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent final
{
public:
	float                                         ValueX;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueY;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent) == 0x000004, "Wrong alignment on CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent");
static_assert(sizeof(CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent) == 0x000008, "Wrong size on CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent");
static_assert(offsetof(CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent, ValueX) == 0x000000, "Member 'CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent::ValueX' has a wrong offset!");
static_assert(offsetof(CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent, ValueY) == 0x000004, "Member 'CharacterSightComponent_SetScreenVisibilityZoneRadiusPercent::ValueY' has a wrong offset!");

// Function GameplayUtilities.ChargeableUtilities.ConvertSecondsToAddToRateMultiplier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableUtilities_ConvertSecondsToAddToRateMultiplier final
{
public:
	float                                         SecondsToAdd;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseMaxSeconds;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         baseRate;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier) == 0x000004, "Wrong alignment on ChargeableUtilities_ConvertSecondsToAddToRateMultiplier");
static_assert(sizeof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier) == 0x000010, "Wrong size on ChargeableUtilities_ConvertSecondsToAddToRateMultiplier");
static_assert(offsetof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier, SecondsToAdd) == 0x000000, "Member 'ChargeableUtilities_ConvertSecondsToAddToRateMultiplier::SecondsToAdd' has a wrong offset!");
static_assert(offsetof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier, baseMaxSeconds) == 0x000004, "Member 'ChargeableUtilities_ConvertSecondsToAddToRateMultiplier::baseMaxSeconds' has a wrong offset!");
static_assert(offsetof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier, baseRate) == 0x000008, "Member 'ChargeableUtilities_ConvertSecondsToAddToRateMultiplier::baseRate' has a wrong offset!");
static_assert(offsetof(ChargeableUtilities_ConvertSecondsToAddToRateMultiplier, ReturnValue) == 0x00000C, "Member 'ChargeableUtilities_ConvertSecondsToAddToRateMultiplier::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.MovementUtilities.Local_MoveActorTo
// 0x0040 (0x0040 - 0x0000)
struct MovementUtilities_Local_MoveActorTo final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0038(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MovementUtilities_Local_MoveActorTo) == 0x000008, "Wrong alignment on MovementUtilities_Local_MoveActorTo");
static_assert(sizeof(MovementUtilities_Local_MoveActorTo) == 0x000040, "Wrong size on MovementUtilities_Local_MoveActorTo");
static_assert(offsetof(MovementUtilities_Local_MoveActorTo, Actor) == 0x000000, "Member 'MovementUtilities_Local_MoveActorTo::Actor' has a wrong offset!");
static_assert(offsetof(MovementUtilities_Local_MoveActorTo, Location) == 0x000008, "Member 'MovementUtilities_Local_MoveActorTo::Location' has a wrong offset!");
static_assert(offsetof(MovementUtilities_Local_MoveActorTo, Rotation) == 0x000020, "Member 'MovementUtilities_Local_MoveActorTo::Rotation' has a wrong offset!");
static_assert(offsetof(MovementUtilities_Local_MoveActorTo, Duration) == 0x000038, "Member 'MovementUtilities_Local_MoveActorTo::Duration' has a wrong offset!");

// Function GameplayUtilities.PawnUtilities.GetLocallyObservedPawn
// 0x0010 (0x0010 - 0x0000)
struct PawnUtilities_GetLocallyObservedPawn final
{
public:
	const class UObject*                          WorldContext;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnUtilities_GetLocallyObservedPawn) == 0x000008, "Wrong alignment on PawnUtilities_GetLocallyObservedPawn");
static_assert(sizeof(PawnUtilities_GetLocallyObservedPawn) == 0x000010, "Wrong size on PawnUtilities_GetLocallyObservedPawn");
static_assert(offsetof(PawnUtilities_GetLocallyObservedPawn, WorldContext) == 0x000000, "Member 'PawnUtilities_GetLocallyObservedPawn::WorldContext' has a wrong offset!");
static_assert(offsetof(PawnUtilities_GetLocallyObservedPawn, ReturnValue) == 0x000008, "Member 'PawnUtilities_GetLocallyObservedPawn::ReturnValue' has a wrong offset!");

// Function GameplayUtilities.PawnUtilities.GetOwningPawn
// 0x0010 (0x0010 - 0x0000)
struct PawnUtilities_GetOwningPawn final
{
public:
	const class AActor*                           Origin;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnUtilities_GetOwningPawn) == 0x000008, "Wrong alignment on PawnUtilities_GetOwningPawn");
static_assert(sizeof(PawnUtilities_GetOwningPawn) == 0x000010, "Wrong size on PawnUtilities_GetOwningPawn");
static_assert(offsetof(PawnUtilities_GetOwningPawn, Origin) == 0x000000, "Member 'PawnUtilities_GetOwningPawn::Origin' has a wrong offset!");
static_assert(offsetof(PawnUtilities_GetOwningPawn, ReturnValue) == 0x000008, "Member 'PawnUtilities_GetOwningPawn::ReturnValue' has a wrong offset!");

// DelegateFunction GameplayUtilities.StateController.OnStateChangedBlueprintEvent__DelegateSignature
// 0x0018 (0x0018 - 0x0000)
struct StateController_OnStateChangedBlueprintEvent__DelegateSignature final
{
public:
	struct FGameplayTag                           OldState;                                          // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NewState;                                          // 0x000C(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateController_OnStateChangedBlueprintEvent__DelegateSignature) == 0x000004, "Wrong alignment on StateController_OnStateChangedBlueprintEvent__DelegateSignature");
static_assert(sizeof(StateController_OnStateChangedBlueprintEvent__DelegateSignature) == 0x000018, "Wrong size on StateController_OnStateChangedBlueprintEvent__DelegateSignature");
static_assert(offsetof(StateController_OnStateChangedBlueprintEvent__DelegateSignature, OldState) == 0x000000, "Member 'StateController_OnStateChangedBlueprintEvent__DelegateSignature::OldState' has a wrong offset!");
static_assert(offsetof(StateController_OnStateChangedBlueprintEvent__DelegateSignature, NewState) == 0x00000C, "Member 'StateController_OnStateChangedBlueprintEvent__DelegateSignature::NewState' has a wrong offset!");

// Function GameplayUtilities.StateController.GetCurrentStateID
// 0x000C (0x000C - 0x0000)
struct StateController_GetCurrentStateID final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateController_GetCurrentStateID) == 0x000004, "Wrong alignment on StateController_GetCurrentStateID");
static_assert(sizeof(StateController_GetCurrentStateID) == 0x00000C, "Wrong size on StateController_GetCurrentStateID");
static_assert(offsetof(StateController_GetCurrentStateID, ReturnValue) == 0x000000, "Member 'StateController_GetCurrentStateID::ReturnValue' has a wrong offset!");

}

