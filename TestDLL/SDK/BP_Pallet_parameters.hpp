#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Pallet

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Pallet.BP_Pallet_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct BP_Pallet_C_UserConstructionScript final
{
public:
	class UAttachInteractionComponent*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Pallet_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_Pallet_C_UserConstructionScript");
static_assert(sizeof(BP_Pallet_C_UserConstructionScript) == 0x000018, "Wrong size on BP_Pallet_C_UserConstructionScript");
static_assert(offsetof(BP_Pallet_C_UserConstructionScript, CallFunc_GetComponentByClass_ReturnValue) == 0x000000, "Member 'BP_Pallet_C_UserConstructionScript::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_UserConstructionScript, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_Pallet_C_UserConstructionScript::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.UpdatePalletMeshVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_Pallet_C_UpdatePalletMeshVisibility final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_UpdatePalletMeshVisibility) == 0x000001, "Wrong alignment on BP_Pallet_C_UpdatePalletMeshVisibility");
static_assert(sizeof(BP_Pallet_C_UpdatePalletMeshVisibility) == 0x000001, "Wrong size on BP_Pallet_C_UpdatePalletMeshVisibility");
static_assert(offsetof(BP_Pallet_C_UpdatePalletMeshVisibility, Visibility) == 0x000000, "Member 'BP_Pallet_C_UpdatePalletMeshVisibility::Visibility' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.PostAkEventPullDownBlocker
// 0x0020 (0x0020 - 0x0000)
struct BP_Pallet_C_PostAkEventPullDownBlocker final
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0008(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_PostAkEventPullDownBlocker) == 0x000008, "Wrong alignment on BP_Pallet_C_PostAkEventPullDownBlocker");
static_assert(sizeof(BP_Pallet_C_PostAkEventPullDownBlocker) == 0x000020, "Wrong size on BP_Pallet_C_PostAkEventPullDownBlocker");
static_assert(offsetof(BP_Pallet_C_PostAkEventPullDownBlocker, AkAudioEvent) == 0x000000, "Member 'BP_Pallet_C_PostAkEventPullDownBlocker::AkAudioEvent' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_PostAkEventPullDownBlocker, Temp_delegate_Variable) == 0x000008, "Member 'BP_Pallet_C_PostAkEventPullDownBlocker::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_PostAkEventPullDownBlocker, CallFunc_PostAkEvent_ReturnValue) == 0x00001C, "Member 'BP_Pallet_C_PostAkEventPullDownBlocker::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.OnPulldownDestroyed
// 0x0030 (0x0030 - 0x0000)
struct BP_Pallet_C_OnPulldownDestroyed final
{
public:
	class ADBDPlayer*                             DestroyingPlayer;                                  // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASlasherPlayer*                         NewLocalVar_1;                                     // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ASlasherPlayer*                         NewLocalVar_0;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	class ASlasherPlayer*                         CallFunc_GetAssociatedKiller_SlasherPlayer;        // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASlasherPlayer*                         K2Node_DynamicCast_AsSlasher_Player;               // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_OnPulldownDestroyed) == 0x000008, "Wrong alignment on BP_Pallet_C_OnPulldownDestroyed");
static_assert(sizeof(BP_Pallet_C_OnPulldownDestroyed) == 0x000030, "Wrong size on BP_Pallet_C_OnPulldownDestroyed");
static_assert(offsetof(BP_Pallet_C_OnPulldownDestroyed, DestroyingPlayer) == 0x000000, "Member 'BP_Pallet_C_OnPulldownDestroyed::DestroyingPlayer' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_OnPulldownDestroyed, NewLocalVar_1) == 0x000008, "Member 'BP_Pallet_C_OnPulldownDestroyed::NewLocalVar_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_OnPulldownDestroyed, NewLocalVar_0) == 0x000010, "Member 'BP_Pallet_C_OnPulldownDestroyed::NewLocalVar_0' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_OnPulldownDestroyed, CallFunc_GetAssociatedKiller_SlasherPlayer) == 0x000018, "Member 'BP_Pallet_C_OnPulldownDestroyed::CallFunc_GetAssociatedKiller_SlasherPlayer' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_OnPulldownDestroyed, K2Node_DynamicCast_AsSlasher_Player) == 0x000020, "Member 'BP_Pallet_C_OnPulldownDestroyed::K2Node_DynamicCast_AsSlasher_Player' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_OnPulldownDestroyed, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Pallet_C_OnPulldownDestroyed::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_OnPulldownDestroyed, CallFunc_IsValid_ReturnValue) == 0x000029, "Member 'BP_Pallet_C_OnPulldownDestroyed::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_OnPulldownDestroyed, CallFunc_IsValid_ReturnValue_1) == 0x00002A, "Member 'BP_Pallet_C_OnPulldownDestroyed::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.Local_OnFallen
// 0x0020 (0x0020 - 0x0000)
struct BP_Pallet_C_Local_OnFallen final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             CallFunc_GetPlayerDoingPulldown_ReturnValue;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACamperPlayer*                          K2Node_DynamicCast_AsCamper_Player;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_Local_OnFallen) == 0x000008, "Wrong alignment on BP_Pallet_C_Local_OnFallen");
static_assert(sizeof(BP_Pallet_C_Local_OnFallen) == 0x000020, "Wrong size on BP_Pallet_C_Local_OnFallen");
static_assert(offsetof(BP_Pallet_C_Local_OnFallen, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'BP_Pallet_C_Local_OnFallen::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_Local_OnFallen, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000001, "Member 'BP_Pallet_C_Local_OnFallen::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_Local_OnFallen, CallFunc_GetPlayerDoingPulldown_ReturnValue) == 0x000008, "Member 'BP_Pallet_C_Local_OnFallen::CallFunc_GetPlayerDoingPulldown_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_Local_OnFallen, K2Node_DynamicCast_AsCamper_Player) == 0x000010, "Member 'BP_Pallet_C_Local_OnFallen::K2Node_DynamicCast_AsCamper_Player' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_Local_OnFallen, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Pallet_C_Local_OnFallen::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.GetZoneForRestrictedPlacement
// 0x0008 (0x0008 - 0x0000)
struct BP_Pallet_C_GetZoneForRestrictedPlacement final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_GetZoneForRestrictedPlacement) == 0x000008, "Wrong alignment on BP_Pallet_C_GetZoneForRestrictedPlacement");
static_assert(sizeof(BP_Pallet_C_GetZoneForRestrictedPlacement) == 0x000008, "Wrong size on BP_Pallet_C_GetZoneForRestrictedPlacement");
static_assert(offsetof(BP_Pallet_C_GetZoneForRestrictedPlacement, ReturnValue) == 0x000000, "Member 'BP_Pallet_C_GetZoneForRestrictedPlacement::ReturnValue' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.GetAssociatedKiller
// 0x0048 (0x0048 - 0x0000)
struct BP_Pallet_C_GetAssociatedKiller final
{
public:
	class ADBDPlayer*                             DBDPlayer;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASlasherPlayer*                         SlasherPlayer;                                     // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADBDPlayerState*                        CallFunc_GetDBDPlayerState_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AController*                            K2Node_DynamicCast_AsController;                   // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  CallFunc_K2_GetPawn_ReturnValue;                   // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ASlasherPlayer*                         K2Node_DynamicCast_AsSlasher_Player;               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_GetAssociatedKiller) == 0x000008, "Wrong alignment on BP_Pallet_C_GetAssociatedKiller");
static_assert(sizeof(BP_Pallet_C_GetAssociatedKiller) == 0x000048, "Wrong size on BP_Pallet_C_GetAssociatedKiller");
static_assert(offsetof(BP_Pallet_C_GetAssociatedKiller, DBDPlayer) == 0x000000, "Member 'BP_Pallet_C_GetAssociatedKiller::DBDPlayer' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetAssociatedKiller, SlasherPlayer) == 0x000008, "Member 'BP_Pallet_C_GetAssociatedKiller::SlasherPlayer' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetAssociatedKiller, CallFunc_GetDBDPlayerState_ReturnValue) == 0x000010, "Member 'BP_Pallet_C_GetAssociatedKiller::CallFunc_GetDBDPlayerState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetAssociatedKiller, CallFunc_GetOwner_ReturnValue) == 0x000018, "Member 'BP_Pallet_C_GetAssociatedKiller::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetAssociatedKiller, K2Node_DynamicCast_AsController) == 0x000020, "Member 'BP_Pallet_C_GetAssociatedKiller::K2Node_DynamicCast_AsController' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetAssociatedKiller, K2Node_DynamicCast_bSuccess) == 0x000028, "Member 'BP_Pallet_C_GetAssociatedKiller::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetAssociatedKiller, CallFunc_K2_GetPawn_ReturnValue) == 0x000030, "Member 'BP_Pallet_C_GetAssociatedKiller::CallFunc_K2_GetPawn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetAssociatedKiller, K2Node_DynamicCast_AsSlasher_Player) == 0x000038, "Member 'BP_Pallet_C_GetAssociatedKiller::K2Node_DynamicCast_AsSlasher_Player' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetAssociatedKiller, K2Node_DynamicCast_bSuccess_1) == 0x000040, "Member 'BP_Pallet_C_GetAssociatedKiller::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.ExplodeStunPallet
// 0x0008 (0x0008 - 0x0000)
struct BP_Pallet_C_ExplodeStunPallet final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_ExplodeStunPallet) == 0x000008, "Wrong alignment on BP_Pallet_C_ExplodeStunPallet");
static_assert(sizeof(BP_Pallet_C_ExplodeStunPallet) == 0x000008, "Wrong size on BP_Pallet_C_ExplodeStunPallet");
static_assert(offsetof(BP_Pallet_C_ExplodeStunPallet, Player) == 0x000000, "Member 'BP_Pallet_C_ExplodeStunPallet::Player' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.ExplodeByEntity
// 0x0040 (0x0040 - 0x0000)
struct BP_Pallet_C_ExplodeByEntity final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x000C(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0024(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_ExplodeByEntity) == 0x000008, "Wrong alignment on BP_Pallet_C_ExplodeByEntity");
static_assert(sizeof(BP_Pallet_C_ExplodeByEntity) == 0x000040, "Wrong size on BP_Pallet_C_ExplodeByEntity");
static_assert(offsetof(BP_Pallet_C_ExplodeByEntity, Player) == 0x000000, "Member 'BP_Pallet_C_ExplodeByEntity::Player' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExplodeByEntity, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000008, "Member 'BP_Pallet_C_ExplodeByEntity::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExplodeByEntity, Temp_delegate_Variable) == 0x00000C, "Member 'BP_Pallet_C_ExplodeByEntity::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExplodeByEntity, CallFunc_PostAkEvent_ReturnValue) == 0x000020, "Member 'BP_Pallet_C_ExplodeByEntity::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExplodeByEntity, Temp_delegate_Variable_1) == 0x000024, "Member 'BP_Pallet_C_ExplodeByEntity::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExplodeByEntity, CallFunc_PostAkEvent_ReturnValue_1) == 0x000038, "Member 'BP_Pallet_C_ExplodeByEntity::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.Explode Vfx Sfx
// 0x0018 (0x0018 - 0x0000)
struct BP_Pallet_C_Explode_Vfx_Sfx final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_Explode_Vfx_Sfx) == 0x000004, "Wrong alignment on BP_Pallet_C_Explode_Vfx_Sfx");
static_assert(sizeof(BP_Pallet_C_Explode_Vfx_Sfx) == 0x000018, "Wrong size on BP_Pallet_C_Explode_Vfx_Sfx");
static_assert(offsetof(BP_Pallet_C_Explode_Vfx_Sfx, Temp_delegate_Variable) == 0x000000, "Member 'BP_Pallet_C_Explode_Vfx_Sfx::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_Explode_Vfx_Sfx, CallFunc_PostAkEvent_ReturnValue) == 0x000014, "Member 'BP_Pallet_C_Explode_Vfx_Sfx::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.Explode
// 0x0008 (0x0008 - 0x0000)
struct BP_Pallet_C_Explode final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_Explode) == 0x000008, "Wrong alignment on BP_Pallet_C_Explode");
static_assert(sizeof(BP_Pallet_C_Explode) == 0x000008, "Wrong size on BP_Pallet_C_Explode");
static_assert(offsetof(BP_Pallet_C_Explode, Player) == 0x000000, "Member 'BP_Pallet_C_Explode::Player' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.ExecuteUbergraph_BP_Pallet
// 0x0328 (0x0328 - 0x0000)
struct BP_Pallet_C_ExecuteUbergraph_BP_Pallet final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkResult Result)>             K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x001C(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0030(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x0044(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_3;                          // 0x0058(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_4;                          // 0x006C(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_5;                          // 0x0080(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OverlappedComponent;    // 0x00A0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_ComponentBoundEvent_OtherActor;             // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    K2Node_ComponentBoundEvent_OtherComp;              // 0x00B0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_ComponentBoundEvent_OtherBodyIndex;         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_bFromSweep;             // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             K2Node_ComponentBoundEvent_SweepResult;            // 0x00C0(0x00F0)(ConstParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
	class ASlasherPlayer*                         K2Node_DynamicCast_AsSlasher_Player;               // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x01C0(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAkResult                                     K2Node_CustomEvent_Result;                         // 0x01D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D5[0x3];                                      // 0x01D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Array_Index_Variable;                     // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ACamperPlayer*                          K2Node_DynamicCast_AsCamper_Player;                // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x01F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryInteractionType_ReturnValue;           // 0x01F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyControlled_ReturnValue;          // 0x01F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F3[0x5];                                      // 0x01F3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               CallFunc_K2_GetComponentRotation_ReturnValue;      // 0x01F8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0210(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Roll;                        // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Pitch;                       // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_BreakRotator_Yaw;                         // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_GetRightVector_ReturnValue;               // 0x0238(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_254[0x4];                                      // 0x0254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_Multiply_VectorFloat_ReturnValue;         // 0x0258(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue;                  // 0x0270(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FVector                                CallFunc_Add_VectorVector_ReturnValue;             // 0x0288(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FRotator                               CallFunc_MakeRotator_ReturnValue_1;                // 0x02A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x02B8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue_1;     // 0x02C0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class ADBDPlayer*                             K2Node_Event_player_2;                             // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_2;                // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x02D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2D9[0x3];                                      // 0x02D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue_3;                // 0x02DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADBDPlayer*                             K2Node_Event_player_1;                             // 0x02E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x02E8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UNiagaraComponent*                      CallFunc_SpawnSystemAttached_ReturnValue;          // 0x02F0(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_4;                // 0x02F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             K2Node_Event_player;                               // 0x0300(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_RepairTime;                     // 0x0308(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0310(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0314(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0318(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x3];                                      // 0x0319(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x031C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_5;                // 0x0320(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_B_ImplicitCast;         // 0x0324(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet) == 0x000008, "Wrong alignment on BP_Pallet_C_ExecuteUbergraph_BP_Pallet");
static_assert(sizeof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet) == 0x000328, "Wrong size on BP_Pallet_C_ExecuteUbergraph_BP_Pallet");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, EntryPoint) == 0x000000, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_SwitchEnum_CmpSuccess_1) == 0x000005, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, Temp_delegate_Variable) == 0x00001C, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, Temp_delegate_Variable_1) == 0x000030, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, Temp_delegate_Variable_2) == 0x000044, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, Temp_delegate_Variable_3) == 0x000058, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::Temp_delegate_Variable_3' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, Temp_delegate_Variable_4) == 0x00006C, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::Temp_delegate_Variable_4' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, Temp_delegate_Variable_5) == 0x000080, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::Temp_delegate_Variable_5' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_PostAkEvent_ReturnValue) == 0x000094, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_HasAuthority_ReturnValue) == 0x000098, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_ComponentBoundEvent_OverlappedComponent) == 0x0000A0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_ComponentBoundEvent_OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_ComponentBoundEvent_OtherActor) == 0x0000A8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_ComponentBoundEvent_OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_ComponentBoundEvent_OtherComp) == 0x0000B0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_ComponentBoundEvent_OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_ComponentBoundEvent_OtherBodyIndex) == 0x0000B8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_ComponentBoundEvent_OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_ComponentBoundEvent_bFromSweep) == 0x0000BC, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_ComponentBoundEvent_bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_ComponentBoundEvent_SweepResult) == 0x0000C0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_ComponentBoundEvent_SweepResult' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_DynamicCast_AsSlasher_Player) == 0x0001B0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_DynamicCast_AsSlasher_Player' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_DynamicCast_bSuccess) == 0x0001B8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_GetOverlappingActors_OverlappingActors) == 0x0001C0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_Array_Length_ReturnValue) == 0x0001D0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_CustomEvent_Result) == 0x0001D4, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_CustomEvent_Result' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, Temp_int_Array_Index_Variable) == 0x0001D8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_Array_Get_Item) == 0x0001E0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_DynamicCast_AsCamper_Player) == 0x0001E8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_DynamicCast_AsCamper_Player' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_DynamicCast_bSuccess_1) == 0x0001F0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_TryInteractionType_ReturnValue) == 0x0001F1, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_TryInteractionType_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_IsLocallyControlled_ReturnValue) == 0x0001F2, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_IsLocallyControlled_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_K2_GetComponentRotation_ReturnValue) == 0x0001F8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_K2_GetComponentRotation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000210, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_BreakRotator_Roll) == 0x000228, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_BreakRotator_Roll' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_BreakRotator_Pitch) == 0x00022C, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_BreakRotator_Pitch' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_BreakRotator_Yaw) == 0x000230, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_BreakRotator_Yaw' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_GetRightVector_ReturnValue) == 0x000238, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_GetRightVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_Add_FloatFloat_ReturnValue) == 0x000250, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_Multiply_VectorFloat_ReturnValue) == 0x000258, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_Multiply_VectorFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_MakeRotator_ReturnValue) == 0x000270, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_MakeRotator_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_Add_VectorVector_ReturnValue) == 0x000288, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_Add_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_MakeRotator_ReturnValue_1) == 0x0002A0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_MakeRotator_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0002B8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_SpawnEmitterAtLocation_ReturnValue_1) == 0x0002C0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_SpawnEmitterAtLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_Event_player_2) == 0x0002C8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_PostAkEvent_ReturnValue_1) == 0x0002D0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_PostAkEvent_ReturnValue_2) == 0x0002D4, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_PostAkEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x0002D8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_PostAkEvent_ReturnValue_3) == 0x0002DC, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_PostAkEvent_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_Event_player_1) == 0x0002E0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x0002E8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_SpawnSystemAttached_ReturnValue) == 0x0002F0, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_SpawnSystemAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_PostAkEvent_ReturnValue_4) == 0x0002F8, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_PostAkEvent_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_Event_player) == 0x000300, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, K2Node_CustomEvent_RepairTime) == 0x000308, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::K2Node_CustomEvent_RepairTime' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000310, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, Temp_int_Loop_Counter_Variable) == 0x000314, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_Less_IntInt_ReturnValue) == 0x000318, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_Add_IntInt_ReturnValue) == 0x00031C, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_PostAkEvent_ReturnValue_5) == 0x000320, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_PostAkEvent_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ExecuteUbergraph_BP_Pallet, CallFunc_Divide_FloatFloat_B_ImplicitCast) == 0x000324, "Member 'BP_Pallet_C_ExecuteUbergraph_BP_Pallet::CallFunc_Divide_FloatFloat_B_ImplicitCast' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.Event Repair Pallet
// 0x0008 (0x0008 - 0x0000)
struct BP_Pallet_C_Event_Repair_Pallet final
{
public:
	double                                        RepairTime;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_Event_Repair_Pallet) == 0x000008, "Wrong alignment on BP_Pallet_C_Event_Repair_Pallet");
static_assert(sizeof(BP_Pallet_C_Event_Repair_Pallet) == 0x000008, "Wrong size on BP_Pallet_C_Event_Repair_Pallet");
static_assert(offsetof(BP_Pallet_C_Event_Repair_Pallet, RepairTime) == 0x000000, "Member 'BP_Pallet_C_Event_Repair_Pallet::RepairTime' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.EntityExplodePallet
// 0x0008 (0x0008 - 0x0000)
struct BP_Pallet_C_EntityExplodePallet final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_EntityExplodePallet) == 0x000008, "Wrong alignment on BP_Pallet_C_EntityExplodePallet");
static_assert(sizeof(BP_Pallet_C_EntityExplodePallet) == 0x000008, "Wrong size on BP_Pallet_C_EntityExplodePallet");
static_assert(offsetof(BP_Pallet_C_EntityExplodePallet, Player) == 0x000000, "Member 'BP_Pallet_C_EntityExplodePallet::Player' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.CustomEvent_1
// 0x0001 (0x0001 - 0x0000)
struct BP_Pallet_C_CustomEvent_1 final
{
public:
	EAkResult                                     Result;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_CustomEvent_1) == 0x000001, "Wrong alignment on BP_Pallet_C_CustomEvent_1");
static_assert(sizeof(BP_Pallet_C_CustomEvent_1) == 0x000001, "Wrong size on BP_Pallet_C_CustomEvent_1");
static_assert(offsetof(BP_Pallet_C_CustomEvent_1, Result) == 0x000000, "Member 'BP_Pallet_C_CustomEvent_1::Result' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.BP_ExplodePallet
// 0x0008 (0x0008 - 0x0000)
struct BP_Pallet_C_BP_ExplodePallet final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_BP_ExplodePallet) == 0x000008, "Wrong alignment on BP_Pallet_C_BP_ExplodePallet");
static_assert(sizeof(BP_Pallet_C_BP_ExplodePallet) == 0x000008, "Wrong size on BP_Pallet_C_BP_ExplodePallet");
static_assert(offsetof(BP_Pallet_C_BP_ExplodePallet, Player) == 0x000000, "Member 'BP_Pallet_C_BP_ExplodePallet::Player' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature
// 0x0110 (0x0110 - 0x0000)
struct BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference)
};
static_assert(alignof(BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000008, "Wrong alignment on BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(sizeof(BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature) == 0x000110, "Wrong size on BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature");
static_assert(offsetof(BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OverlappedComponent) == 0x000000, "Member 'BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherActor) == 0x000008, "Member 'BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherActor' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherComp) == 0x000010, "Member 'BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherComp' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, OtherBodyIndex) == 0x000018, "Member 'BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, bFromSweep) == 0x00001C, "Member 'BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::bFromSweep' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature, SweepResult) == 0x000020, "Member 'BP_Pallet_C_BndEvt__TestTriggerBox_K2Node_ComponentBoundEvent_0_ComponentBeginOverlapSignature__DelegateSignature::SweepResult' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.ActivateNavLinks
// 0x0020 (0x0020 - 0x0000)
struct BP_Pallet_C_ActivateNavLinks final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          ForceActivation;                                   // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_K2_GetChildActor_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ANavLinkProxy*                          K2Node_DynamicCast_AsNav_Link_Proxy;               // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_ActivateNavLinks) == 0x000008, "Wrong alignment on BP_Pallet_C_ActivateNavLinks");
static_assert(sizeof(BP_Pallet_C_ActivateNavLinks) == 0x000020, "Wrong size on BP_Pallet_C_ActivateNavLinks");
static_assert(offsetof(BP_Pallet_C_ActivateNavLinks, Activate) == 0x000000, "Member 'BP_Pallet_C_ActivateNavLinks::Activate' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ActivateNavLinks, ForceActivation) == 0x000001, "Member 'BP_Pallet_C_ActivateNavLinks::ForceActivation' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ActivateNavLinks, CallFunc_K2_GetChildActor_ReturnValue) == 0x000008, "Member 'BP_Pallet_C_ActivateNavLinks::CallFunc_K2_GetChildActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ActivateNavLinks, K2Node_DynamicCast_AsNav_Link_Proxy) == 0x000010, "Member 'BP_Pallet_C_ActivateNavLinks::K2Node_DynamicCast_AsNav_Link_Proxy' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_ActivateNavLinks, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Pallet_C_ActivateNavLinks::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.IsInterruptionPossible
// 0x00C8 (0x00C8 - 0x0000)
struct BP_Pallet_C_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UInteractor*                      Interactor;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	const class UInteractionDefinition*           Definition;                                        // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	const class UInterruptionDefinition*          Interruption;                                      // 0x0020(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          InterruptionPossible;                              // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0030(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_GetForwardVector_ReturnValue;             // 0x0048(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchName_CmpSuccess;                      // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          K2Node_DynamicCast_AsCamper_Player;                // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_StriStri_ReturnValue;          // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_72[0x6];                                       // 0x0072(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCamperHealthComponent*                 CallFunc_GetHealthComponent_ReturnValue;           // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsInjured_ReturnValue;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue_1;        // 0x0088(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Subtract_VectorVector_ReturnValue;        // 0x00A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Dot_VectorVector_ReturnValue;             // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C2[0x2];                                       // 0x00C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Greater_FloatFloat_A_ImplicitCast;        // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_IsInterruptionPossible) == 0x000008, "Wrong alignment on BP_Pallet_C_IsInterruptionPossible");
static_assert(sizeof(BP_Pallet_C_IsInterruptionPossible) == 0x0000C8, "Wrong size on BP_Pallet_C_IsInterruptionPossible");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, Interruptor) == 0x000000, "Member 'BP_Pallet_C_IsInterruptionPossible::Interruptor' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, Interruptee) == 0x000008, "Member 'BP_Pallet_C_IsInterruptionPossible::Interruptee' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, Interactor) == 0x000010, "Member 'BP_Pallet_C_IsInterruptionPossible::Interactor' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, Definition) == 0x000018, "Member 'BP_Pallet_C_IsInterruptionPossible::Definition' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, Interruption) == 0x000020, "Member 'BP_Pallet_C_IsInterruptionPossible::Interruption' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, ReturnValue) == 0x000028, "Member 'BP_Pallet_C_IsInterruptionPossible::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, InterruptionPossible) == 0x000029, "Member 'BP_Pallet_C_IsInterruptionPossible::InterruptionPossible' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000030, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_GetForwardVector_ReturnValue) == 0x000048, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_GetForwardVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, K2Node_SwitchName_CmpSuccess) == 0x000060, "Member 'BP_Pallet_C_IsInterruptionPossible::K2Node_SwitchName_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, K2Node_DynamicCast_AsCamper_Player) == 0x000068, "Member 'BP_Pallet_C_IsInterruptionPossible::K2Node_DynamicCast_AsCamper_Player' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, K2Node_DynamicCast_bSuccess) == 0x000070, "Member 'BP_Pallet_C_IsInterruptionPossible::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_EqualEqual_StriStri_ReturnValue) == 0x000071, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_EqualEqual_StriStri_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_GetHealthComponent_ReturnValue) == 0x000078, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_GetHealthComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_IsInjured_ReturnValue) == 0x000080, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_IsInjured_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_K2_GetActorLocation_ReturnValue_1) == 0x000088, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_K2_GetActorLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_Subtract_VectorVector_ReturnValue) == 0x0000A0, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_Subtract_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_Dot_VectorVector_ReturnValue) == 0x0000B8, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_Dot_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_Greater_FloatFloat_ReturnValue) == 0x0000C0, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_Not_PreBool_ReturnValue) == 0x0000C1, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_IsInterruptionPossible, CallFunc_Greater_FloatFloat_A_ImplicitCast) == 0x0000C4, "Member 'BP_Pallet_C_IsInterruptionPossible::CallFunc_Greater_FloatFloat_A_ImplicitCast' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.GetPalletSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_Pallet_C_GetPalletSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_GetPalletSkeletalMeshComponent) == 0x000008, "Wrong alignment on BP_Pallet_C_GetPalletSkeletalMeshComponent");
static_assert(sizeof(BP_Pallet_C_GetPalletSkeletalMeshComponent) == 0x000008, "Wrong size on BP_Pallet_C_GetPalletSkeletalMeshComponent");
static_assert(offsetof(BP_Pallet_C_GetPalletSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'BP_Pallet_C_GetPalletSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.GetInfectedParticles
// 0x0020 (0x0020 - 0x0000)
struct BP_Pallet_C_GetInfectedParticles final
{
public:
	TArray<class UParticleSystemComponent*>       InfectedParticleArray;                             // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UParticleSystemComponent*>       K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Pallet_C_GetInfectedParticles) == 0x000008, "Wrong alignment on BP_Pallet_C_GetInfectedParticles");
static_assert(sizeof(BP_Pallet_C_GetInfectedParticles) == 0x000020, "Wrong size on BP_Pallet_C_GetInfectedParticles");
static_assert(offsetof(BP_Pallet_C_GetInfectedParticles, InfectedParticleArray) == 0x000000, "Member 'BP_Pallet_C_GetInfectedParticles::InfectedParticleArray' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetInfectedParticles, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_Pallet_C_GetInfectedParticles::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.GetInfectedDecals
// 0x0010 (0x0010 - 0x0000)
struct BP_Pallet_C_GetInfectedDecals final
{
public:
	TArray<class UDecalComponent*>                InfectedDecals;                                    // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Pallet_C_GetInfectedDecals) == 0x000008, "Wrong alignment on BP_Pallet_C_GetInfectedDecals");
static_assert(sizeof(BP_Pallet_C_GetInfectedDecals) == 0x000010, "Wrong size on BP_Pallet_C_GetInfectedDecals");
static_assert(offsetof(BP_Pallet_C_GetInfectedDecals, InfectedDecals) == 0x000000, "Member 'BP_Pallet_C_GetInfectedDecals::InfectedDecals' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.GetFocalPointPosition
// 0x0040 (0x0040 - 0x0000)
struct BP_Pallet_C_GetFocalPointPosition final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UInteractionDefinition*           Definition;                                        // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Pallet_C_GetFocalPointPosition) == 0x000008, "Wrong alignment on BP_Pallet_C_GetFocalPointPosition");
static_assert(sizeof(BP_Pallet_C_GetFocalPointPosition) == 0x000040, "Wrong size on BP_Pallet_C_GetFocalPointPosition");
static_assert(offsetof(BP_Pallet_C_GetFocalPointPosition, Player) == 0x000000, "Member 'BP_Pallet_C_GetFocalPointPosition::Player' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetFocalPointPosition, Definition) == 0x000008, "Member 'BP_Pallet_C_GetFocalPointPosition::Definition' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetFocalPointPosition, ReturnValue) == 0x000010, "Member 'BP_Pallet_C_GetFocalPointPosition::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetFocalPointPosition, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000028, "Member 'BP_Pallet_C_GetFocalPointPosition::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");

// Function BP_Pallet.BP_Pallet_C.GetDestructibleAreaPrimitiveComponents
// 0x0020 (0x0020 - 0x0000)
struct BP_Pallet_C_GetDestructibleAreaPrimitiveComponents final
{
public:
	TArray<class UPrimitiveComponent*>            Prims;                                             // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UPrimitiveComponent*>            K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Pallet_C_GetDestructibleAreaPrimitiveComponents) == 0x000008, "Wrong alignment on BP_Pallet_C_GetDestructibleAreaPrimitiveComponents");
static_assert(sizeof(BP_Pallet_C_GetDestructibleAreaPrimitiveComponents) == 0x000020, "Wrong size on BP_Pallet_C_GetDestructibleAreaPrimitiveComponents");
static_assert(offsetof(BP_Pallet_C_GetDestructibleAreaPrimitiveComponents, Prims) == 0x000000, "Member 'BP_Pallet_C_GetDestructibleAreaPrimitiveComponents::Prims' has a wrong offset!");
static_assert(offsetof(BP_Pallet_C_GetDestructibleAreaPrimitiveComponents, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_Pallet_C_GetDestructibleAreaPrimitiveComponents::K2Node_MakeArray_Array' has a wrong offset!");

}

