#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BaseEscapeTile

#include "Basic.hpp"

#include "DeadByDaylight_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BaseEscapeTile.BP_BaseEscapeTile_C
// 0x00F8 (0x0560 - 0x0468)
class ABP_BaseEscapeTile_C : public AEscapeTile
{
public:
	class UChildActorComponent*                   BP_Effect_Mist;                                    // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_Effect_Mist3;                                   // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_Effect_Mist2;                                   // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   BP_Effect_Mist1;                                   // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        GeneratorDrivenObjects;                            // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Mist;                                              // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Lights;                                            // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        FX;                                                // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Audio;                                             // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HideGrass;                                         // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Crows;                                             // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        EdgeObjects;                                       // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Pallets;                                           // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Vaults;                                            // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Lockers;                                           // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Blockers;                                          // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        ChestSpawn;                                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HookSpawn;                                         // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        HatchSpawn;                                        // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        InteractableSpawn;                                 // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SurvivorItemSpawn;                                 // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        KillerItemSpawn;                                   // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        KillerSpawn;                                       // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SurvivorSpawn04;                                   // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SurvivorSpawn03;                                   // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SurvivorSpawn02;                                   // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SurvivorSpawn01;                                   // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Deco;                                              // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Gameplay;                                          // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        SpawnPoints;                                       // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Root;                                              // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BaseEscapeTile_C">();
	}
	static class ABP_BaseEscapeTile_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BaseEscapeTile_C>();
	}
};
static_assert(alignof(ABP_BaseEscapeTile_C) == 0x000008, "Wrong alignment on ABP_BaseEscapeTile_C");
static_assert(sizeof(ABP_BaseEscapeTile_C) == 0x000560, "Wrong size on ABP_BaseEscapeTile_C");
static_assert(offsetof(ABP_BaseEscapeTile_C, BP_Effect_Mist) == 0x000468, "Member 'ABP_BaseEscapeTile_C::BP_Effect_Mist' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, BP_Effect_Mist3) == 0x000470, "Member 'ABP_BaseEscapeTile_C::BP_Effect_Mist3' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, BP_Effect_Mist2) == 0x000478, "Member 'ABP_BaseEscapeTile_C::BP_Effect_Mist2' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, BP_Effect_Mist1) == 0x000480, "Member 'ABP_BaseEscapeTile_C::BP_Effect_Mist1' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, GeneratorDrivenObjects) == 0x000488, "Member 'ABP_BaseEscapeTile_C::GeneratorDrivenObjects' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Mist) == 0x000490, "Member 'ABP_BaseEscapeTile_C::Mist' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Lights) == 0x000498, "Member 'ABP_BaseEscapeTile_C::Lights' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, FX) == 0x0004A0, "Member 'ABP_BaseEscapeTile_C::FX' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Audio) == 0x0004A8, "Member 'ABP_BaseEscapeTile_C::Audio' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, HideGrass) == 0x0004B0, "Member 'ABP_BaseEscapeTile_C::HideGrass' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Crows) == 0x0004B8, "Member 'ABP_BaseEscapeTile_C::Crows' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, EdgeObjects) == 0x0004C0, "Member 'ABP_BaseEscapeTile_C::EdgeObjects' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Pallets) == 0x0004C8, "Member 'ABP_BaseEscapeTile_C::Pallets' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Vaults) == 0x0004D0, "Member 'ABP_BaseEscapeTile_C::Vaults' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Lockers) == 0x0004D8, "Member 'ABP_BaseEscapeTile_C::Lockers' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Blockers) == 0x0004E0, "Member 'ABP_BaseEscapeTile_C::Blockers' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, ChestSpawn) == 0x0004E8, "Member 'ABP_BaseEscapeTile_C::ChestSpawn' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, HookSpawn) == 0x0004F0, "Member 'ABP_BaseEscapeTile_C::HookSpawn' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, HatchSpawn) == 0x0004F8, "Member 'ABP_BaseEscapeTile_C::HatchSpawn' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, InteractableSpawn) == 0x000500, "Member 'ABP_BaseEscapeTile_C::InteractableSpawn' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, SurvivorItemSpawn) == 0x000508, "Member 'ABP_BaseEscapeTile_C::SurvivorItemSpawn' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, KillerItemSpawn) == 0x000510, "Member 'ABP_BaseEscapeTile_C::KillerItemSpawn' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, KillerSpawn) == 0x000518, "Member 'ABP_BaseEscapeTile_C::KillerSpawn' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, SurvivorSpawn04) == 0x000520, "Member 'ABP_BaseEscapeTile_C::SurvivorSpawn04' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, SurvivorSpawn03) == 0x000528, "Member 'ABP_BaseEscapeTile_C::SurvivorSpawn03' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, SurvivorSpawn02) == 0x000530, "Member 'ABP_BaseEscapeTile_C::SurvivorSpawn02' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, SurvivorSpawn01) == 0x000538, "Member 'ABP_BaseEscapeTile_C::SurvivorSpawn01' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Deco) == 0x000540, "Member 'ABP_BaseEscapeTile_C::Deco' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Gameplay) == 0x000548, "Member 'ABP_BaseEscapeTile_C::Gameplay' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, SpawnPoints) == 0x000550, "Member 'ABP_BaseEscapeTile_C::SpawnPoints' has a wrong offset!");
static_assert(offsetof(ABP_BaseEscapeTile_C, Root) == 0x000558, "Member 'ABP_BaseEscapeTile_C::Root' has a wrong offset!");

}

