#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDAnalytics

#include "Basic.hpp"


namespace SDK::Params
{

// Function DBDAnalytics.PerkAnalyticsLibrary.SendFranklinsConsumeItemAnalytics
// 0x0008 (0x0008 - 0x0000)
struct PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics final
{
public:
	class ADBDPlayer*                             PreviousOwner;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics) == 0x000008, "Wrong size on PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics, PreviousOwner) == 0x000000, "Member 'PerkAnalyticsLibrary_SendFranklinsConsumeItemAnalytics::PreviousOwner' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendFranklinsHitSurvivorNearDroppedItemAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics final
{
public:
	class ADBDPlayer*                             HitSurvivor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Slasher;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics, HitSurvivor) == 0x000000, "Member 'PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics::HitSurvivor' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics, Slasher) == 0x000008, "Member 'PerkAnalyticsLibrary_SendFranklinsHitSurvivorNearDroppedItemAnalytics::Slasher' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendKnockoutSurvivorFoundAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics final
{
public:
	class ADBDPlayer*                             FindingSurvivor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             FoundSurvivor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics, FindingSurvivor) == 0x000000, "Member 'PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics::FindingSurvivor' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics, FoundSurvivor) == 0x000008, "Member 'PerkAnalyticsLibrary_SendKnockoutSurvivorFoundAnalytics::FoundSurvivor' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendLightbornAuraRevealedAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics final
{
public:
	class ADBDPlayer*                             RevealedPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Slasher;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics, RevealedPlayer) == 0x000000, "Member 'PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics::RevealedPlayer' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics, Slasher) == 0x000008, "Member 'PerkAnalyticsLibrary_SendLightbornAuraRevealedAnalytics::Slasher' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendTinkererUndetectableHitNearGeneratorAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics final
{
public:
	class ADBDPlayer*                             HitPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Slasher;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics, HitPlayer) == 0x000000, "Member 'PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics::HitPlayer' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics, Slasher) == 0x000008, "Member 'PerkAnalyticsLibrary_SendTinkererUndetectableHitNearGeneratorAnalytics::Slasher' has a wrong offset!");

// Function DBDAnalytics.PerkAnalyticsLibrary.SendTinkererUndetectableInterruptAnalytics
// 0x0010 (0x0010 - 0x0000)
struct PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics final
{
public:
	class ADBDPlayer*                             InterruptedPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Slasher;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics) == 0x000008, "Wrong alignment on PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics");
static_assert(sizeof(PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics) == 0x000010, "Wrong size on PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics");
static_assert(offsetof(PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics, InterruptedPlayer) == 0x000000, "Member 'PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics::InterruptedPlayer' has a wrong offset!");
static_assert(offsetof(PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics, Slasher) == 0x000008, "Member 'PerkAnalyticsLibrary_SendTinkererUndetectableInterruptAnalytics::Slasher' has a wrong offset!");

// Function DBDAnalytics.PigAnalytics.IncrementRBTKilledCount
// 0x0010 (0x0010 - 0x0000)
struct PigAnalytics_IncrementRBTKilledCount final
{
public:
	class ACamperPlayer*                          PlayerKilled;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KilledByExecutionZone;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PigAnalytics_IncrementRBTKilledCount) == 0x000008, "Wrong alignment on PigAnalytics_IncrementRBTKilledCount");
static_assert(sizeof(PigAnalytics_IncrementRBTKilledCount) == 0x000010, "Wrong size on PigAnalytics_IncrementRBTKilledCount");
static_assert(offsetof(PigAnalytics_IncrementRBTKilledCount, PlayerKilled) == 0x000000, "Member 'PigAnalytics_IncrementRBTKilledCount::PlayerKilled' has a wrong offset!");
static_assert(offsetof(PigAnalytics_IncrementRBTKilledCount, KilledByExecutionZone) == 0x000008, "Member 'PigAnalytics_IncrementRBTKilledCount::KilledByExecutionZone' has a wrong offset!");

// Function DBDAnalytics.PigAnalytics.IncrementRBTTimerActived
// 0x0008 (0x0008 - 0x0000)
struct PigAnalytics_IncrementRBTTimerActived final
{
public:
	class ACamperPlayer*                          AttachedPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PigAnalytics_IncrementRBTTimerActived) == 0x000008, "Wrong alignment on PigAnalytics_IncrementRBTTimerActived");
static_assert(sizeof(PigAnalytics_IncrementRBTTimerActived) == 0x000008, "Wrong size on PigAnalytics_IncrementRBTTimerActived");
static_assert(offsetof(PigAnalytics_IncrementRBTTimerActived, AttachedPlayer) == 0x000000, "Member 'PigAnalytics_IncrementRBTTimerActived::AttachedPlayer' has a wrong offset!");

// Function DBDAnalytics.PigAnalytics.OnRBTAttached_Analytics
// 0x0010 (0x0010 - 0x0000)
struct PigAnalytics_OnRBTAttached_Analytics final
{
public:
	class ASlasherPlayer*                         Attacher;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          Attachee;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PigAnalytics_OnRBTAttached_Analytics) == 0x000008, "Wrong alignment on PigAnalytics_OnRBTAttached_Analytics");
static_assert(sizeof(PigAnalytics_OnRBTAttached_Analytics) == 0x000010, "Wrong size on PigAnalytics_OnRBTAttached_Analytics");
static_assert(offsetof(PigAnalytics_OnRBTAttached_Analytics, Attacher) == 0x000000, "Member 'PigAnalytics_OnRBTAttached_Analytics::Attacher' has a wrong offset!");
static_assert(offsetof(PigAnalytics_OnRBTAttached_Analytics, Attachee) == 0x000008, "Member 'PigAnalytics_OnRBTAttached_Analytics::Attachee' has a wrong offset!");

// Function DBDAnalytics.PigAnalytics.RecordRBTSearch
// 0x0010 (0x0010 - 0x0000)
struct PigAnalytics_RecordRBTSearch final
{
public:
	class ACamperPlayer*                          SearchingPlayer;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PigAnalytics_RecordRBTSearch) == 0x000008, "Wrong alignment on PigAnalytics_RecordRBTSearch");
static_assert(sizeof(PigAnalytics_RecordRBTSearch) == 0x000010, "Wrong size on PigAnalytics_RecordRBTSearch");
static_assert(offsetof(PigAnalytics_RecordRBTSearch, SearchingPlayer) == 0x000000, "Member 'PigAnalytics_RecordRBTSearch::SearchingPlayer' has a wrong offset!");
static_assert(offsetof(PigAnalytics_RecordRBTSearch, Success) == 0x000008, "Member 'PigAnalytics_RecordRBTSearch::Success' has a wrong offset!");

// Function DBDAnalytics.PlayerMovementAnalyticsComponent.OnControllerPossessionChanged
// 0x0010 (0x0010 - 0x0000)
struct PlayerMovementAnalyticsComponent_OnControllerPossessionChanged final
{
public:
	class APawn*                                  OldPawn;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  NewPawn;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerMovementAnalyticsComponent_OnControllerPossessionChanged) == 0x000008, "Wrong alignment on PlayerMovementAnalyticsComponent_OnControllerPossessionChanged");
static_assert(sizeof(PlayerMovementAnalyticsComponent_OnControllerPossessionChanged) == 0x000010, "Wrong size on PlayerMovementAnalyticsComponent_OnControllerPossessionChanged");
static_assert(offsetof(PlayerMovementAnalyticsComponent_OnControllerPossessionChanged, OldPawn) == 0x000000, "Member 'PlayerMovementAnalyticsComponent_OnControllerPossessionChanged::OldPawn' has a wrong offset!");
static_assert(offsetof(PlayerMovementAnalyticsComponent_OnControllerPossessionChanged, NewPawn) == 0x000008, "Member 'PlayerMovementAnalyticsComponent_OnControllerPossessionChanged::NewPawn' has a wrong offset!");

// Function DBDAnalytics.PulldownAnalytics.IncrementPalletDestroy
// 0x0008 (0x0008 - 0x0000)
struct PulldownAnalytics_IncrementPalletDestroy final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PulldownAnalytics_IncrementPalletDestroy) == 0x000008, "Wrong alignment on PulldownAnalytics_IncrementPalletDestroy");
static_assert(sizeof(PulldownAnalytics_IncrementPalletDestroy) == 0x000008, "Wrong size on PulldownAnalytics_IncrementPalletDestroy");
static_assert(offsetof(PulldownAnalytics_IncrementPalletDestroy, Killer) == 0x000000, "Member 'PulldownAnalytics_IncrementPalletDestroy::Killer' has a wrong offset!");

// Function DBDAnalytics.PulldownAnalytics.IncrementPalletDrop
// 0x0008 (0x0008 - 0x0000)
struct PulldownAnalytics_IncrementPalletDrop final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PulldownAnalytics_IncrementPalletDrop) == 0x000008, "Wrong alignment on PulldownAnalytics_IncrementPalletDrop");
static_assert(sizeof(PulldownAnalytics_IncrementPalletDrop) == 0x000008, "Wrong size on PulldownAnalytics_IncrementPalletDrop");
static_assert(offsetof(PulldownAnalytics_IncrementPalletDrop, Survivor) == 0x000000, "Member 'PulldownAnalytics_IncrementPalletDrop::Survivor' has a wrong offset!");

// Function DBDAnalytics.PulldownAnalytics.IncrementPalletSpawned
// 0x0008 (0x0008 - 0x0000)
struct PulldownAnalytics_IncrementPalletSpawned final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PulldownAnalytics_IncrementPalletSpawned) == 0x000008, "Wrong alignment on PulldownAnalytics_IncrementPalletSpawned");
static_assert(sizeof(PulldownAnalytics_IncrementPalletSpawned) == 0x000008, "Wrong size on PulldownAnalytics_IncrementPalletSpawned");
static_assert(offsetof(PulldownAnalytics_IncrementPalletSpawned, Actor) == 0x000000, "Member 'PulldownAnalytics_IncrementPalletSpawned::Actor' has a wrong offset!");

// Function DBDAnalytics.PulldownAnalytics.IncrementPalletStun
// 0x0008 (0x0008 - 0x0000)
struct PulldownAnalytics_IncrementPalletStun final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PulldownAnalytics_IncrementPalletStun) == 0x000008, "Wrong alignment on PulldownAnalytics_IncrementPalletStun");
static_assert(sizeof(PulldownAnalytics_IncrementPalletStun) == 0x000008, "Wrong size on PulldownAnalytics_IncrementPalletStun");
static_assert(offsetof(PulldownAnalytics_IncrementPalletStun, Survivor) == 0x000000, "Member 'PulldownAnalytics_IncrementPalletStun::Survivor' has a wrong offset!");

// Function DBDAnalytics.SurvivorInteractionAnalytics.IncrementHealCount
// 0x0008 (0x0008 - 0x0000)
struct SurvivorInteractionAnalytics_IncrementHealCount final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorInteractionAnalytics_IncrementHealCount) == 0x000008, "Wrong alignment on SurvivorInteractionAnalytics_IncrementHealCount");
static_assert(sizeof(SurvivorInteractionAnalytics_IncrementHealCount) == 0x000008, "Wrong size on SurvivorInteractionAnalytics_IncrementHealCount");
static_assert(offsetof(SurvivorInteractionAnalytics_IncrementHealCount, Survivor) == 0x000000, "Member 'SurvivorInteractionAnalytics_IncrementHealCount::Survivor' has a wrong offset!");

// Function DBDAnalytics.SurvivorInteractionAnalytics.RecordHatchEscape
// 0x0008 (0x0008 - 0x0000)
struct SurvivorInteractionAnalytics_RecordHatchEscape final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorInteractionAnalytics_RecordHatchEscape) == 0x000008, "Wrong alignment on SurvivorInteractionAnalytics_RecordHatchEscape");
static_assert(sizeof(SurvivorInteractionAnalytics_RecordHatchEscape) == 0x000008, "Wrong size on SurvivorInteractionAnalytics_RecordHatchEscape");
static_assert(offsetof(SurvivorInteractionAnalytics_RecordHatchEscape, Survivor) == 0x000000, "Member 'SurvivorInteractionAnalytics_RecordHatchEscape::Survivor' has a wrong offset!");

// Function DBDAnalytics.SurvivorInteractionAnalytics.RecordHealSuccess
// 0x0008 (0x0008 - 0x0000)
struct SurvivorInteractionAnalytics_RecordHealSuccess final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorInteractionAnalytics_RecordHealSuccess) == 0x000008, "Wrong alignment on SurvivorInteractionAnalytics_RecordHealSuccess");
static_assert(sizeof(SurvivorInteractionAnalytics_RecordHealSuccess) == 0x000008, "Wrong size on SurvivorInteractionAnalytics_RecordHealSuccess");
static_assert(offsetof(SurvivorInteractionAnalytics_RecordHealSuccess, Survivor) == 0x000000, "Member 'SurvivorInteractionAnalytics_RecordHealSuccess::Survivor' has a wrong offset!");

}

