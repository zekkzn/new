#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BhvrAssetViewer

#include "Basic.hpp"


namespace SDK
{

// Enum BhvrAssetViewer.EBhvrAssetViewRotation
// NumValues: 0x0003
enum class EBhvrAssetViewRotation : uint8
{
	Clockwise                                = 0,
	CounterClockwise                         = 1,
	EBhvrAssetViewRotation_MAX               = 2,
};

// Enum BhvrAssetViewer.EWatermarkLocationPreset
// NumValues: 0x0005
enum class EWatermarkLocationPreset : uint8
{
	TopRight                                 = 0,
	TopLeft                                  = 1,
	BottomRight                              = 2,
	BottomLeft                               = 3,
	EWatermarkLocationPreset_MAX             = 4,
};

// ScriptStruct BhvrAssetViewer.BhvrAssetViewCameraSequence
// 0x0020 (0x0020 - 0x0000)
struct FBhvrAssetViewCameraSequence final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelSequence*                         Sequence;                                          // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ALevelSequenceActor*                    SequenceActor;                                     // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBhvrAssetViewCameraSequence) == 0x000008, "Wrong alignment on FBhvrAssetViewCameraSequence");
static_assert(sizeof(FBhvrAssetViewCameraSequence) == 0x000020, "Wrong size on FBhvrAssetViewCameraSequence");
static_assert(offsetof(FBhvrAssetViewCameraSequence, DisplayName) == 0x000000, "Member 'FBhvrAssetViewCameraSequence::DisplayName' has a wrong offset!");
static_assert(offsetof(FBhvrAssetViewCameraSequence, Sequence) == 0x000010, "Member 'FBhvrAssetViewCameraSequence::Sequence' has a wrong offset!");
static_assert(offsetof(FBhvrAssetViewCameraSequence, SequenceActor) == 0x000018, "Member 'FBhvrAssetViewCameraSequence::SequenceActor' has a wrong offset!");

// ScriptStruct BhvrAssetViewer.BhvrAssetViewOption
// 0x0028 (0x0028 - 0x0000)
struct FBhvrAssetViewOption final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Thumbnail;                                         // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBhvrAssetViewOption) == 0x000008, "Wrong alignment on FBhvrAssetViewOption");
static_assert(sizeof(FBhvrAssetViewOption) == 0x000028, "Wrong size on FBhvrAssetViewOption");
static_assert(offsetof(FBhvrAssetViewOption, ID) == 0x000000, "Member 'FBhvrAssetViewOption::ID' has a wrong offset!");
static_assert(offsetof(FBhvrAssetViewOption, DisplayName) == 0x000010, "Member 'FBhvrAssetViewOption::DisplayName' has a wrong offset!");
static_assert(offsetof(FBhvrAssetViewOption, Thumbnail) == 0x000020, "Member 'FBhvrAssetViewOption::Thumbnail' has a wrong offset!");

// ScriptStruct BhvrAssetViewer.BhvrBufferVisualizationMaterials
// 0x0010 (0x0010 - 0x0000)
struct FBhvrBufferVisualizationMaterials final
{
public:
	TArray<class FString>                         OutputMaterialNames;                               // 0x0000(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBhvrBufferVisualizationMaterials) == 0x000008, "Wrong alignment on FBhvrBufferVisualizationMaterials");
static_assert(sizeof(FBhvrBufferVisualizationMaterials) == 0x000010, "Wrong size on FBhvrBufferVisualizationMaterials");
static_assert(offsetof(FBhvrBufferVisualizationMaterials, OutputMaterialNames) == 0x000000, "Member 'FBhvrBufferVisualizationMaterials::OutputMaterialNames' has a wrong offset!");

// ScriptStruct BhvrAssetViewer.BhvrScreenshotCaptureRegion
// 0x0010 (0x0010 - 0x0000)
struct FBhvrScreenshotCaptureRegion final
{
public:
	int32                                         MinX;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinY;                                              // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxX;                                              // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxY;                                              // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBhvrScreenshotCaptureRegion) == 0x000004, "Wrong alignment on FBhvrScreenshotCaptureRegion");
static_assert(sizeof(FBhvrScreenshotCaptureRegion) == 0x000010, "Wrong size on FBhvrScreenshotCaptureRegion");
static_assert(offsetof(FBhvrScreenshotCaptureRegion, MinX) == 0x000000, "Member 'FBhvrScreenshotCaptureRegion::MinX' has a wrong offset!");
static_assert(offsetof(FBhvrScreenshotCaptureRegion, MinY) == 0x000004, "Member 'FBhvrScreenshotCaptureRegion::MinY' has a wrong offset!");
static_assert(offsetof(FBhvrScreenshotCaptureRegion, MaxX) == 0x000008, "Member 'FBhvrScreenshotCaptureRegion::MaxX' has a wrong offset!");
static_assert(offsetof(FBhvrScreenshotCaptureRegion, MaxY) == 0x00000C, "Member 'FBhvrScreenshotCaptureRegion::MaxY' has a wrong offset!");

}

