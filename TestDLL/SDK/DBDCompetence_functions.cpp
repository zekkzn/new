#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDCompetence

#include "Basic.hpp"

#include "DBDCompetence_classes.hpp"
#include "DBDCompetence_parameters.hpp"


namespace SDK
{

// Function DBDCompetence.HighestLevelAndClosestEffectCondition.InitEffectArrays
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             EffectIDLevel1                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EffectIDLevel2                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             EffectIDLevel3                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHighestLevelAndClosestEffectCondition::InitEffectArrays(class FName EffectIDLevel1, class FName EffectIDLevel2, class FName EffectIDLevel3)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HighestLevelAndClosestEffectCondition", "InitEffectArrays");

	Params::HighestLevelAndClosestEffectCondition_InitEffectArrays Parms{};

	Parms.EffectIDLevel1 = EffectIDLevel1;
	Parms.EffectIDLevel2 = EffectIDLevel2;
	Parms.EffectIDLevel3 = EffectIDLevel3;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HighestLevelAndClosestEffectCondition.SetCurrentEffectLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHighestLevelAndClosestEffectCondition::SetCurrentEffectLevel(int32 Level)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HighestLevelAndClosestEffectCondition", "SetCurrentEffectLevel");

	Params::HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel Parms{};

	Parms.Level = Level;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsHighestLevelAndClosestOriginatingEffect.OnStatusEffectAddedOrRemoved
// (Final, Native, Private)
// Parameters:
// class UStatusEffect*                    Effect                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Valid                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsHighestLevelAndClosestOriginatingEffect::OnStatusEffectAddedOrRemoved(class UStatusEffect* Effect, bool Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsHighestLevelAndClosestOriginatingEffect", "OnStatusEffectAddedOrRemoved");

	Params::IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved Parms{};

	Parms.Effect = Effect;
	Parms.Valid = Valid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.GameplayModifierContainerWrapperSkill.OnRep_SpawnedGameplayModifierContainer
// (Final, Native, Private)

void UGameplayModifierContainerWrapperSkill::OnRep_SpawnedGameplayModifierContainer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameplayModifierContainerWrapperSkill", "OnRep_SpawnedGameplayModifierContainer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.Authority_RevealCurseToAllSurvivors
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Revealed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHexPerk::Authority_RevealCurseToAllSurvivors(bool Revealed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "Authority_RevealCurseToAllSurvivors");

	Params::HexPerk_Authority_RevealCurseToAllSurvivors Parms{};

	Parms.Revealed = Revealed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.Authority_SetCurseRevealedToPlayer
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Revealed                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHexPerk::Authority_SetCurseRevealedToPlayer(class ADBDPlayer* Player, const bool Revealed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "Authority_SetCurseRevealedToPlayer");

	Params::HexPerk_Authority_SetCurseRevealedToPlayer Parms{};

	Parms.Player = Player;
	Parms.Revealed = Revealed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.OnRep_PlayersWhoKnowCurse
// (Final, Native, Private)

void UHexPerk::OnRep_PlayersWhoKnowCurse()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "OnRep_PlayersWhoKnowCurse");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.UpdateCursedStatusViewOnLocalPlayer
// (Final, Native, Protected, BlueprintCallable)

void UHexPerk::UpdateCursedStatusViewOnLocalPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "UpdateCursedStatusViewOnLocalPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexPerk.IsCurseRevealedToPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADBDPlayer*                       Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHexPerk::IsCurseRevealedToPlayer(const class ADBDPlayer* Player) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexPerk", "IsCurseRevealedToPlayer");

	Params::HexPerk_IsCurseRevealedToPlayer Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DyingLight.OnObsessionChanged
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    NewObsession                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACamperPlayer*                    PreviousObsession                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDyingLight::OnObsessionChanged(class ACamperPlayer* NewObsession, class ACamperPlayer* PreviousObsession)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DyingLight", "OnObsessionChanged");

	Params::DyingLight_OnObsessionChanged Parms{};

	Parms.NewObsession = NewObsession;
	Parms.PreviousObsession = PreviousObsession;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DyingLight.GetActionSpeedPenaltyPerTokenAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDyingLight::GetActionSpeedPenaltyPerTokenAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DyingLight", "GetActionSpeedPenaltyPerTokenAtLevel");

	Params::DyingLight_GetActionSpeedPenaltyPerTokenAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DyingLight.GetObsessionActionSpeedBonus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDyingLight::GetObsessionActionSpeedBonus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DyingLight", "GetObsessionActionSpeedBonus");

	Params::DyingLight_GetObsessionActionSpeedBonus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.OnEventBaseAddon.OnEventFired
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UOnEventBaseAddon::OnEventFired(const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnEventBaseAddon", "OnEventFired");

	Params::OnEventBaseAddon_OnEventFired Parms{};

	Parms.GameEventData = std::move(GameEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.BaseLingeringStatusEffect.Authority_ActivateEffect
// (Final, Native, Public, BlueprintCallable)

void UBaseLingeringStatusEffect::Authority_ActivateEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseLingeringStatusEffect", "Authority_ActivateEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BaseLingeringStatusEffect.Authority_DeactivateEffect
// (Final, Native, Public, BlueprintCallable)

void UBaseLingeringStatusEffect::Authority_DeactivateEffect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseLingeringStatusEffect", "Authority_DeactivateEffect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BaseLingeringStatusEffect.SetLingerDuration
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   LingerDuration                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseLingeringStatusEffect::SetLingerDuration(float LingerDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseLingeringStatusEffect", "SetLingerDuration");

	Params::BaseLingeringStatusEffect_SetLingerDuration Parms{};

	Parms.LingerDuration = LingerDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.KindredPerk.GetKillerAuraRevealRangeAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKindredPerk::GetKillerAuraRevealRangeAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KindredPerk", "GetKillerAuraRevealRangeAtLevel");

	Params::KindredPerk_GetKillerAuraRevealRangeAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Adrenaline.Multicast_DispatchAdrenalineEvents
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// bool                                    IsHealthy                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   HealAmount                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAdrenaline::Multicast_DispatchAdrenalineEvents(const bool IsHealthy, const float HealAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Adrenaline", "Multicast_DispatchAdrenalineEvents");

	Params::Adrenaline_Multicast_DispatchAdrenalineEvents Parms{};

	Parms.IsHealthy = IsHealthy;
	Parms.HealAmount = HealAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Adrenaline.GetExhaustionDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UAdrenaline::GetExhaustionDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Adrenaline", "GetExhaustionDuration");

	Params::Adrenaline_GetExhaustionDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HideSurvivorVFXForKillerEffect.HideVFX
// (Final, Native, Private, BlueprintCallable)
// Parameters:
// bool                                    Hide                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHideSurvivorVFXForKillerEffect::HideVFX(bool Hide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideSurvivorVFXForKillerEffect", "HideVFX");

	Params::HideSurvivorVFXForKillerEffect_HideVFX Parms{};

	Parms.Hide = Hide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AnyActorPairQueryRangeIsTrue.OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnyActorPairQueryRangeIsTrue::OnInRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnyActorPairQueryRangeIsTrue", "OnInRangeChanged");

	Params::AnyActorPairQueryRangeIsTrue_OnInRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BlessedStatusEffect.Authority_OnSurvivorRemovedFromGame
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBlessedStatusEffect::Authority_OnSurvivorRemovedFromGame(class ACamperPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "Authority_OnSurvivorRemovedFromGame");

	Params::BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame Parms{};

	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BlessedStatusEffect.OnEnterBoonRange
// (BlueprintCosmetic, Event, Protected, BlueprintCallable, BlueprintEvent)

void UBlessedStatusEffect::OnEnterBoonRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "OnEnterBoonRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.BlessedStatusEffect.OnExitBoonRange
// (BlueprintCosmetic, Event, Protected, BlueprintCallable, BlueprintEvent)

void UBlessedStatusEffect::OnExitBoonRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "OnExitBoonRange");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.BlessedStatusEffect.GetBoonTotemBlessingRange
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBlessedStatusEffect::GetBoonTotemBlessingRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "GetBoonTotemBlessingRange");

	Params::BlessedStatusEffect_GetBoonTotemBlessingRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BlessedStatusEffect.GetBoundTotem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ATotem*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ATotem* UBlessedStatusEffect::GetBoundTotem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BlessedStatusEffect", "GetBoundTotem");

	Params::BlessedStatusEffect_GetBoundTotem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ThrillingTremors.OnRep_BlockedGenerators
// (Final, Native, Private)

void UThrillingTremors::OnRep_BlockedGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrillingTremors", "OnRep_BlockedGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ThrillingTremors.GetCooldownAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UThrillingTremors::GetCooldownAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrillingTremors", "GetCooldownAtLevel");

	Params::ThrillingTremors_GetCooldownAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ThrillingTremors.GetDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UThrillingTremors::GetDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ThrillingTremors", "GetDurationAtLevel");

	Params::ThrillingTremors_GetDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.IsPlayerPerformingInteraction.SetInteractionSemantics
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            InteractionSemantics                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UIsPlayerPerformingInteraction::SetInteractionSemantics(const struct FGameplayTagContainer& InteractionSemantics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingInteraction", "SetInteractionSemantics");

	Params::IsPlayerPerformingInteraction_SetInteractionSemantics Parms{};

	Parms.InteractionSemantics = std::move(InteractionSemantics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerformingInteraction.UpdateIsTrue
// (Final, Native, Private)
// Parameters:
// class UInteractionDefinition*           InteractionDefinition                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerPerformingInteraction::UpdateIsTrue(class UInteractionDefinition* InteractionDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingInteraction", "UpdateIsTrue");

	Params::IsPlayerPerformingInteraction_UpdateIsTrue Parms{};

	Parms.InteractionDefinition = InteractionDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Tinkerer.Authority_OnGeneratorChargePercentChanged
// (Final, Native, Private)
// Parameters:
// class UChargeableComponent*             ChargeableComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PercentCompletionChange                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalPercentComplete                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTinkerer::Authority_OnGeneratorChargePercentChanged(class UChargeableComponent* ChargeableComponent, float PercentCompletionChange, float TotalPercentComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnGeneratorChargePercentChanged");

	Params::Tinkerer_Authority_OnGeneratorChargePercentChanged Parms{};

	Parms.ChargeableComponent = ChargeableComponent;
	Parms.PercentCompletionChange = PercentCompletionChange;
	Parms.TotalPercentComplete = TotalPercentComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Tinkerer.Authority_OnGeneratorReachedThreshold
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGenerator*                       Generator                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTinkerer::Authority_OnGeneratorReachedThreshold(class AGenerator* Generator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnGeneratorReachedThreshold");

	Params::Tinkerer_Authority_OnGeneratorReachedThreshold Parms{};

	Parms.Generator = Generator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.Tinkerer.Authority_OnLevelReadyToPlay
// (Final, Native, Private)

void UTinkerer::Authority_OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Tinkerer.Authority_OnUndetectableAttackSuccessNearActiveGenerator
// (Event, Public, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTinkerer::Authority_OnUndetectableAttackSuccessNearActiveGenerator(class ADBDPlayer* Instigator, class ADBDPlayer* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnUndetectableAttackSuccessNearActiveGenerator");

	Params::Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator Parms{};

	Parms.Instigator = Instigator;
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.Tinkerer.Authority_OnUndetectableGeneratorInterrupt
// (Event, Public, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTinkerer::Authority_OnUndetectableGeneratorInterrupt(class ADBDPlayer* Instigator, class ADBDPlayer* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "Authority_OnUndetectableGeneratorInterrupt");

	Params::Tinkerer_Authority_OnUndetectableGeneratorInterrupt Parms{};

	Parms.Instigator = Instigator;
	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.Tinkerer.GetActivationTimeAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTinkerer::GetActivationTimeAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "GetActivationTimeAtLevel");

	Params::Tinkerer_GetActivationTimeAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Tinkerer.GetTriggerThreshold
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTinkerer::GetTriggerThreshold() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Tinkerer", "GetTriggerThreshold");

	Params::Tinkerer_GetTriggerThreshold Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DejaVu.Authority_SetNewGeneratorsToReveal
// (Final, Native, Private)

void UDejaVu::Authority_SetNewGeneratorsToReveal()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DejaVu", "Authority_SetNewGeneratorsToReveal");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DejaVu.OnRep_RevealedGenerators
// (Final, Native, Private)

void UDejaVu::OnRep_RevealedGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DejaVu", "OnRep_RevealedGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DejaVu.GetActionSpeedsAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDejaVu::GetActionSpeedsAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DejaVu", "GetActionSpeedsAtLevel");

	Params::DejaVu_GetActionSpeedsAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.GateBlockerEffect.RemoveCantEscapeFlag
// (Final, Native, Protected)

void UGateBlockerEffect::RemoveCantEscapeFlag()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GateBlockerEffect", "RemoveCantEscapeFlag");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.TheMettleOfMan.OnRep_CurrentPhase
// (Final, Native, Private)

void UTheMettleOfMan::OnRep_CurrentPhase()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheMettleOfMan", "OnRep_CurrentPhase");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.TheMettleOfMan.OnRep_NumTokenSoFar
// (Final, Native, Private)

void UTheMettleOfMan::OnRep_NumTokenSoFar()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheMettleOfMan", "OnRep_NumTokenSoFar");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.TheMettleOfMan.GetRevealOutsideRangeAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UTheMettleOfMan::GetRevealOutsideRangeAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheMettleOfMan", "GetRevealOutsideRangeAtLevel");

	Params::TheMettleOfMan_GetRevealOutsideRangeAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DecisiveStrike.Multicast_SetTriggerOnNextPickup
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// bool                                    TriggerOnNextPickup                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDecisiveStrike::Multicast_SetTriggerOnNextPickup(bool TriggerOnNextPickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "Multicast_SetTriggerOnNextPickup");

	Params::DecisiveStrike_Multicast_SetTriggerOnNextPickup Parms{};

	Parms.TriggerOnNextPickup = TriggerOnNextPickup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.OnOwnerPickedUp
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Picker                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDecisiveStrike::OnOwnerPickedUp(class ADBDPlayer* Picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "OnOwnerPickedUp");

	Params::DecisiveStrike_OnOwnerPickedUp Parms{};

	Parms.Picker = Picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.OnPickUpEnded
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Picker                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDecisiveStrike::OnPickUpEnded(class ADBDPlayer* Picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "OnPickUpEnded");

	Params::DecisiveStrike_OnPickUpEnded Parms{};

	Parms.Picker = Picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.OnRep_HasBeenAttempted
// (Final, Native, Private)

void UDecisiveStrike::OnRep_HasBeenAttempted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "OnRep_HasBeenAttempted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.OnSkillCheck
// (Final, Native, Private)
// Parameters:
// bool                                    HadInput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Bonus                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESkillCheckCustomType                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDecisiveStrike::OnSkillCheck(bool HadInput, bool Success, bool Bonus, ESkillCheckCustomType Type, class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "OnSkillCheck");

	Params::DecisiveStrike_OnSkillCheck Parms{};

	Parms.HadInput = HadInput;
	Parms.Success = Success;
	Parms.Bonus = Bonus;
	Parms.Type = Type;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.Server_SetTriggerOnNextPickup
// (Final, Net, NetReliable, Native, Event, Private, NetServer, NetValidate)
// Parameters:
// bool                                    TriggerOnNextPickup                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDecisiveStrike::Server_SetTriggerOnNextPickup(bool TriggerOnNextPickup)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "Server_SetTriggerOnNextPickup");

	Params::DecisiveStrike_Server_SetTriggerOnNextPickup Parms{};

	Parms.TriggerOnNextPickup = TriggerOnNextPickup;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DecisiveStrike.GetDurationAfterUnhook
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDecisiveStrike::GetDurationAfterUnhook() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DecisiveStrike", "GetDurationAfterUnhook");

	Params::DecisiveStrike_GetDurationAfterUnhook Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BoonPerk.Authority_OnSurvivorRemoved
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBoonPerk::Authority_OnSurvivorRemoved(class ACamperPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BoonPerk", "Authority_OnSurvivorRemoved");

	Params::BoonPerk_Authority_OnSurvivorRemoved Parms{};

	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DarkSense.Authority_OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDarkSense::Authority_OnInRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DarkSense", "Authority_OnInRangeChanged");

	Params::DarkSense_Authority_OnInRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DarkSense.GetDarkSenseRevealRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDarkSense::GetDarkSenseRevealRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DarkSense", "GetDarkSenseRevealRange");

	Params::DarkSense_GetDarkSenseRevealRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DarkSense.GetKillerRevealDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDarkSense::GetKillerRevealDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DarkSense", "GetKillerRevealDurationAtLevel");

	Params::DarkSense_GetKillerRevealDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.PlayersInRangePerk.GetPerkRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPlayersInRangePerk::GetPerkRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayersInRangePerk", "GetPerkRange");

	Params::PlayersInRangePerk_GetPerkRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HemorrhageStatusEffect.Authority_OnSurvivorHealed
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FCamperHealResult                HealResult                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UHemorrhageStatusEffect::Authority_OnSurvivorHealed(const struct FCamperHealResult& HealResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HemorrhageStatusEffect", "Authority_OnSurvivorHealed");

	Params::HemorrhageStatusEffect_Authority_OnSurvivorHealed Parms{};

	Parms.HealResult = std::move(HealResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HemorrhageStatusEffect.OnStoppedHealing
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Instigator                                             (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       Target                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHemorrhageStatusEffect::OnStoppedHealing(const class ADBDPlayer* Instigator, const class ADBDPlayer* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HemorrhageStatusEffect", "OnStoppedHealing");

	Params::HemorrhageStatusEffect_OnStoppedHealing Parms{};

	Parms.Instigator = Instigator;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsBestProveThyselfEffectInRange.OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UProveThyselfEffect*              ProveThyselfEffect                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsBestProveThyselfEffectInRange::OnInRangeChanged(const bool InRange, class UProveThyselfEffect* ProveThyselfEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsBestProveThyselfEffectInRange", "OnInRangeChanged");

	Params::IsBestProveThyselfEffectInRange_OnInRangeChanged Parms{};

	Parms.InRange = InRange;
	Parms.ProveThyselfEffect = ProveThyselfEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.InfectiousFright.OnRep_PerkActivationCount
// (Final, Native, Private)

void UInfectiousFright::OnRep_PerkActivationCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InfectiousFright", "OnRep_PerkActivationCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.InfectiousFright.RevealSurvivorLocation
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ACamperPlayer*                    Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInfectiousFright::RevealSurvivorLocation(class ACamperPlayer* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InfectiousFright", "RevealSurvivorLocation");

	Params::InfectiousFright_RevealSurvivorLocation Parms{};

	Parms.Target = Target;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.CruelConfinement.GetBlockDurationAtLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCruelConfinement::GetBlockDurationAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CruelConfinement", "GetBlockDurationAtLevel");

	Params::CruelConfinement_GetBlockDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.IsInRangeOfOriginatingPlayer.OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsInRangeOfOriginatingPlayer::OnInRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsInRangeOfOriginatingPlayer", "OnInRangeChanged");

	Params::IsInRangeOfOriginatingPlayer_OnInRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerLookingAtKillerCondition.OnPawnControllerChanged
// (Final, Native, Private)
// Parameters:
// class APawn*                            Pawn                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AController*                      Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerLookingAtKillerCondition::OnPawnControllerChanged(class APawn* Pawn, class AController* Controller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerLookingAtKillerCondition", "OnPawnControllerChanged");

	Params::IsPlayerLookingAtKillerCondition_OnPawnControllerChanged Parms{};

	Parms.Pawn = Pawn;
	Parms.Controller = Controller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerLookingAtKillerCondition.OnRep_IsLookingTowards
// (Final, Native, Private)
// Parameters:
// bool                                    IsLookingTowards                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerLookingAtKillerCondition::OnRep_IsLookingTowards(const bool IsLookingTowards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerLookingAtKillerCondition", "OnRep_IsLookingTowards");

	Params::IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards Parms{};

	Parms.IsLookingTowards = IsLookingTowards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsOwningPlayerInRangeFromHook.OnLevelReadyToPlay
// (Final, Native, Protected)

void UIsOwningPlayerInRangeFromHook::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsOwningPlayerInRangeFromHook", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AddStatusEffectAction.Multicast_ExecuteSubActions
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAddStatusEffectAction::Multicast_ExecuteSubActions(const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AddStatusEffectAction", "Multicast_ExecuteSubActions");

	Params::AddStatusEffectAction_Multicast_ExecuteSubActions Parms{};

	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BaseIsPlayerPerformingInteraction.SetInteractionSemantics
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTagContainer            InteractionSemantics                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UBaseIsPlayerPerformingInteraction::SetInteractionSemantics(const struct FGameplayTagContainer& InteractionSemantics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseIsPlayerPerformingInteraction", "SetInteractionSemantics");

	Params::BaseIsPlayerPerformingInteraction_SetInteractionSemantics Parms{};

	Parms.InteractionSemantics = std::move(InteractionSemantics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BaseIsPlayerPerformingInteraction.UpdateIsTrue
// (Final, Native, Protected)
// Parameters:
// class UInteractionDefinition*           InteractionDefinition                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBaseIsPlayerPerformingInteraction::UpdateIsTrue(class UInteractionDefinition* InteractionDefinition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BaseIsPlayerPerformingInteraction", "UpdateIsTrue");

	Params::BaseIsPlayerPerformingInteraction_UpdateIsTrue Parms{};

	Parms.InteractionDefinition = InteractionDefinition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectableChargeStateChange
// (Final, Native, Private)
// Parameters:
// bool                                    Empty                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerPerformingItemInteraction::OnCollectableChargeStateChange(bool Empty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingItemInteraction", "OnCollectableChargeStateChange");

	Params::IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange Parms{};

	Parms.Empty = Empty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectableDropped
// (Final, Native, Private)
// Parameters:
// EItemDropType                           DropType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerPerformingItemInteraction::OnCollectableDropped(EItemDropType DropType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingItemInteraction", "OnCollectableDropped");

	Params::IsPlayerPerformingItemInteraction_OnCollectableDropped Parms{};

	Parms.DropType = DropType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectablePickedUp
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerPerformingItemInteraction::OnCollectablePickedUp(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerformingItemInteraction", "OnCollectablePickedUp");

	Params::IsPlayerPerformingItemInteraction_OnCollectablePickedUp Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AllowSelfRecoverAction.Authority_OnHealProgress
// (Final, Native, Private)
// Parameters:
// float                                   IndividualChargeAmount                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalChargeAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ChargeInstigator                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WasCoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAllowSelfRecoverAction::Authority_OnHealProgress(float IndividualChargeAmount, float TotalChargeAmount, class AActor* ChargeInstigator, bool WasCoop, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AllowSelfRecoverAction", "Authority_OnHealProgress");

	Params::AllowSelfRecoverAction_Authority_OnHealProgress Parms{};

	Parms.IndividualChargeAmount = IndividualChargeAmount;
	Parms.TotalChargeAmount = TotalChargeAmount;
	Parms.ChargeInstigator = ChargeInstigator;
	Parms.WasCoop = WasCoop;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ImposedStatusEffectCondition.OnRep_IsApplicable
// (Final, Native, Private)

void UImposedStatusEffectCondition::OnRep_IsApplicable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImposedStatusEffectCondition", "OnRep_IsApplicable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AnyMeansNecessary.Authority_OnPalletPulledUp
// (Final, Native, Private, HasOutParams, Const)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAnyMeansNecessary::Authority_OnPalletPulledUp(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnyMeansNecessary", "Authority_OnPalletPulledUp");

	Params::AnyMeansNecessary_Authority_OnPalletPulledUp Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AnySurvivorHasObjectState.OnSurvivorAdded
// (Final, Native, Protected)
// Parameters:
// class ACamperPlayer*                    Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnySurvivorHasObjectState::OnSurvivorAdded(class ACamperPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnySurvivorHasObjectState", "OnSurvivorAdded");

	Params::AnySurvivorHasObjectState_OnSurvivorAdded Parms{};

	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AnySurvivorHasObjectState.OnSurvivorRemoved
// (Final, Native, Protected)
// Parameters:
// class ACamperPlayer*                    Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAnySurvivorHasObjectState::OnSurvivorRemoved(class ACamperPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AnySurvivorHasObjectState", "OnSurvivorRemoved");

	Params::AnySurvivorHasObjectState_OnSurvivorRemoved Parms{};

	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.AreExitGatesPowered.OnExitGatesActivated
// (Final, Native, Private)

void UAreExitGatesPowered::OnExitGatesActivated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AreExitGatesPowered", "OnExitGatesActivated");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Babysitter.GetCooldownTimeAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBabysitter::GetCooldownTimeAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Babysitter", "GetCooldownTimeAtLevel");

	Params::Babysitter_GetCooldownTimeAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Babysitter.GetHasteEffectAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBabysitter::GetHasteEffectAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Babysitter", "GetHasteEffectAtLevel");

	Params::Babysitter_GetHasteEffectAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Babysitter.GetScratchMarkHidingTimeAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBabysitter::GetScratchMarkHidingTimeAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Babysitter", "GetScratchMarkHidingTimeAtLevel");

	Params::Babysitter_GetScratchMarkHidingTimeAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Babysitter.GetShowAuraTimeAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBabysitter::GetShowAuraTimeAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Babysitter", "GetShowAuraTimeAtLevel");

	Params::Babysitter_GetShowAuraTimeAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BetterTogether.GetRevealDistance
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBetterTogether::GetRevealDistance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BetterTogether", "GetRevealDistance");

	Params::BetterTogether_GetRevealDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BetterTogether.OnStartedGeneratorRepair
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBetterTogether::OnStartedGeneratorRepair(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BetterTogether", "OnStartedGeneratorRepair");

	Params::BetterTogether_OnStartedGeneratorRepair Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.BloodEcho.GetStatusEffectDurationAtLevel
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBloodEcho::GetStatusEffectDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BloodEcho", "GetStatusEffectDurationAtLevel");

	Params::BloodEcho_GetStatusEffectDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Breakout.Authority_ImposeWiggleStatusEffect
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBreakout::Authority_ImposeWiggleStatusEffect(class ACamperPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "Authority_ImposeWiggleStatusEffect");

	Params::Breakout_Authority_ImposeWiggleStatusEffect Parms{};

	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Breakout.Authority_OnRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBreakout::Authority_OnRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "Authority_OnRangeChanged");

	Params::Breakout_Authority_OnRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Breakout.OnRep_IsPerkActive
// (Final, Native, Private)

void UBreakout::OnRep_IsPerkActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "OnRep_IsPerkActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Breakout.OnSlasherSet
// (Final, Native, Private)
// Parameters:
// class ASlasherPlayer*                   Slasher                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBreakout::OnSlasherSet(class ASlasherPlayer* Slasher)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "OnSlasherSet");

	Params::Breakout_OnSlasherSet Parms{};

	Parms.Slasher = Slasher;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Breakout.GetHasteEffectAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBreakout::GetHasteEffectAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "GetHasteEffectAtLevel");

	Params::Breakout_GetHasteEffectAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Breakout.GetSurvivorDistanceMax
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBreakout::GetSurvivorDistanceMax() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "GetSurvivorDistanceMax");

	Params::Breakout_GetSurvivorDistanceMax Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Breakout.GetWiggleEffect
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBreakout::GetWiggleEffect() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Breakout", "GetWiggleEffect");

	Params::Breakout_GetWiggleEffect Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BuckleUp.GetHasteValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuckleUp::GetHasteValue() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuckleUp", "GetHasteValue");

	Params::BuckleUp_GetHasteValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.BuckleUp.GetPerkDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBuckleUp::GetPerkDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BuckleUp", "GetPerkDurationAtLevel");

	Params::BuckleUp_GetPerkDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.CorruptIntervention.Authority_OnLevelReadyToPlay
// (Final, Native, Private)

void UCorruptIntervention::Authority_OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "Authority_OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.Authority_TryActivatePerk
// (Final, Native, Private)

void UCorruptIntervention::Authority_TryActivatePerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "Authority_TryActivatePerk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.LevelReadyToBlockedGenerators
// (Final, Native, Private)

void UCorruptIntervention::LevelReadyToBlockedGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "LevelReadyToBlockedGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.Multicast_DispatchBlockedEvent
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UCorruptIntervention::Multicast_DispatchBlockedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "Multicast_DispatchBlockedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.OnRep_BlockedGenerators
// (Final, Native, Private)

void UCorruptIntervention::OnRep_BlockedGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "OnRep_BlockedGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.CorruptIntervention.GetGeneratorBlockDuration
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCorruptIntervention::GetGeneratorBlockDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CorruptIntervention", "GetGeneratorBlockDuration");

	Params::CorruptIntervention_GetGeneratorBlockDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Coulrophobia.GetHealPenaltyAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UCoulrophobia::GetHealPenaltyAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Coulrophobia", "GetHealPenaltyAtLevel");

	Params::Coulrophobia_GetHealPenaltyAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DBDConditionFactory.CreateImposedStatusEffectCondition
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IConditionReceiver>ConditionReceiver                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UImposedStatusEffectCondition>ConditionType                                          (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UStatusEffect>        ClassType                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UImposedStatusEffectCondition*    ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UImposedStatusEffectCondition* UDBDConditionFactory::CreateImposedStatusEffectCondition(TScriptInterface<class IConditionReceiver> ConditionReceiver, TSubclassOf<class UImposedStatusEffectCondition> ConditionType, TSubclassOf<class UStatusEffect> ClassType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDConditionFactory", "CreateImposedStatusEffectCondition");

	Params::DBDConditionFactory_CreateImposedStatusEffectCondition Parms{};

	Parms.ConditionReceiver = ConditionReceiver;
	Parms.ConditionType = ConditionType;
	Parms.ClassType = ClassType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DBDConditionFactory.DoesPerkHaveToken
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IConditionReceiver>ConditionReceiver                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPerk*                            Perk                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UDoesPerkHaveToken*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDoesPerkHaveToken* UDBDConditionFactory::DoesPerkHaveToken(TScriptInterface<class IConditionReceiver> ConditionReceiver, class UPerk* Perk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDConditionFactory", "DoesPerkHaveToken");

	Params::DBDConditionFactory_DoesPerkHaveToken Parms{};

	Parms.ConditionReceiver = ConditionReceiver;
	Parms.Perk = Perk;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DBDConditionFactory.HasTimerElapsedWhileConditionWasTrue
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TScriptInterface<class IConditionReceiver>ConditionReceiver                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTimerObject*                     Timer                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTimerElapsedCondition*           ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTimerElapsedCondition* UDBDConditionFactory::HasTimerElapsedWhileConditionWasTrue(TScriptInterface<class IConditionReceiver> ConditionReceiver, class UTimerObject* Timer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDConditionFactory", "HasTimerElapsedWhileConditionWasTrue");

	Params::DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue Parms{};

	Parms.ConditionReceiver = ConditionReceiver;
	Parms.Timer = Timer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DBDConditionFactory.IsPlayerPerformingInteraction
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TScriptInterface<class IConditionReceiver>ConditionReceiver                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameplayTagContainer            InteractionSemantics                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UIsPlayerPerformingInteraction*   ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UIsPlayerPerformingInteraction* UDBDConditionFactory::IsPlayerPerformingInteraction(TScriptInterface<class IConditionReceiver> ConditionReceiver, const struct FGameplayTagContainer& InteractionSemantics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("DBDConditionFactory", "IsPlayerPerformingInteraction");

	Params::DBDConditionFactory_IsPlayerPerformingInteraction Parms{};

	Parms.ConditionReceiver = ConditionReceiver;
	Parms.InteractionSemantics = std::move(InteractionSemantics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DelayedHealEffect.Authority_OnActivationTimerComplete
// (Final, Native, Private)

void UDelayedHealEffect::Authority_OnActivationTimerComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelayedHealEffect", "Authority_OnActivationTimerComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DelayedHealEffect.Authority_OnOwningCamperHealthChanged
// (Final, Native, Private)
// Parameters:
// ECamperDamageState                      before                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECamperDamageState                      After                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelayedHealEffect::Authority_OnOwningCamperHealthChanged(ECamperDamageState before, ECamperDamageState After)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelayedHealEffect", "Authority_OnOwningCamperHealthChanged");

	Params::DelayedHealEffect_Authority_OnOwningCamperHealthChanged Parms{};

	Parms.before = before;
	Parms.After = After;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DelayedHealEffect.Authority_OnOwningCamperPickedUp
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Picker                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDelayedHealEffect::Authority_OnOwningCamperPickedUp(class ADBDPlayer* Picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DelayedHealEffect", "Authority_OnOwningCamperPickedUp");

	Params::DelayedHealEffect_Authority_OnOwningCamperPickedUp Parms{};

	Parms.Picker = Picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DiminishingReturnBaseEffect.Authority_OnOriginatingEffectApplicableChanged
// (Final, Native, Private)
// Parameters:
// class UGameplayModifierContainer*       GameplayModifierContainer                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Param_IsApplicable                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDiminishingReturnBaseEffect::Authority_OnOriginatingEffectApplicableChanged(class UGameplayModifierContainer* GameplayModifierContainer, bool Param_IsApplicable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiminishingReturnBaseEffect", "Authority_OnOriginatingEffectApplicableChanged");

	Params::DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged Parms{};

	Parms.GameplayModifierContainer = GameplayModifierContainer;
	Parms.Param_IsApplicable = Param_IsApplicable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DiminishingReturnBaseEffect.Cosmetic_OnInRangeChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsInRange                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDiminishingReturnBaseEffect::Cosmetic_OnInRangeChanged(bool IsInRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiminishingReturnBaseEffect", "Cosmetic_OnInRangeChanged");

	Params::DiminishingReturnBaseEffect_Cosmetic_OnInRangeChanged Parms{};

	Parms.IsInRange = IsInRange;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.DiminishingReturnBaseEffect.OnRep_OriginatingPlayersApplyingEffect
// (Final, Native, Private)
// Parameters:
// TArray<class ADBDPlayer*>               PreviousOriginatingPlayersApplyingEffect               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)

void UDiminishingReturnBaseEffect::OnRep_OriginatingPlayersApplyingEffect(const TArray<class ADBDPlayer*>& PreviousOriginatingPlayersApplyingEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiminishingReturnBaseEffect", "OnRep_OriginatingPlayersApplyingEffect");

	Params::DiminishingReturnBaseEffect_OnRep_OriginatingPlayersApplyingEffect Parms{};

	Parms.PreviousOriginatingPlayersApplyingEffect = std::move(PreviousOriginatingPlayersApplyingEffect);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DiminishingReturnEffectHasAnyEffect.OnOriginatingPlayersApplyingEffectChanged
// (Final, Native, Private)

void UDiminishingReturnEffectHasAnyEffect::OnOriginatingPlayersApplyingEffectChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DiminishingReturnEffectHasAnyEffect", "OnOriginatingPlayersApplyingEffectChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Distortion.OnAuraBlockedCosmetic
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UDistortion::OnAuraBlockedCosmetic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Distortion", "OnAuraBlockedCosmetic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.Distortion.OnRep_AuraBlockIsActive
// (Final, Native, Private)

void UDistortion::OnRep_AuraBlockIsActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Distortion", "OnRep_AuraBlockIsActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Distortion.AuraBlockCanBeActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UDistortion::AuraBlockCanBeActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Distortion", "AuraBlockCanBeActive");

	Params::Distortion_AuraBlockCanBeActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Distortion.GetActivationDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDistortion::GetActivationDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Distortion", "GetActivationDurationAtLevel");

	Params::Distortion_GetActivationDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Distortion.GetRegainTokenDurationTimer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDistortion::GetRegainTokenDurationTimer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Distortion", "GetRegainTokenDurationTimer");

	Params::Distortion_GetRegainTokenDurationTimer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.DoesPerkHaveToken.OnRep_Perk
// (Final, Native, Private)

void UDoesPerkHaveToken::OnRep_Perk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoesPerkHaveToken", "OnRep_Perk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DoesPerkHaveToken.SetPerk
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPerk*                            Perk                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDoesPerkHaveToken::SetPerk(class UPerk* Perk)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoesPerkHaveToken", "SetPerk");

	Params::DoesPerkHaveToken_SetPerk Parms{};

	Parms.Perk = Perk;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.DownedByBasicAttack.OnRep_ReplicatedIsTrue
// (Final, Native, Private)

void UDownedByBasicAttack::OnRep_ReplicatedIsTrue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DownedByBasicAttack", "OnRep_ReplicatedIsTrue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.FlipFlop.Authority_OnPickedUp
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Picker                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFlipFlop::Authority_OnPickedUp(class ADBDPlayer* Picker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipFlop", "Authority_OnPickedUp");

	Params::FlipFlop_Authority_OnPickedUp Parms{};

	Parms.Picker = Picker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.FlipFlop.GetMaxWiggleProgressionAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFlipFlop::GetMaxWiggleProgressionAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipFlop", "GetMaxWiggleProgressionAtLevel");

	Params::FlipFlop_GetMaxWiggleProgressionAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.FlipFlop.GetRecoveryProgressionAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFlipFlop::GetRecoveryProgressionAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FlipFlop", "GetRecoveryProgressionAtLevel");

	Params::FlipFlop_GetRecoveryProgressionAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.FurtiveChase.GetHasteStatusEffectPercent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFurtiveChase::GetHasteStatusEffectPercent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FurtiveChase", "GetHasteStatusEffectPercent");

	Params::FurtiveChase_GetHasteStatusEffectPercent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.FurtiveChase.GetUndetectableAndHasteStatusEffectDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UFurtiveChase::GetUndetectableAndHasteStatusEffectDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FurtiveChase", "GetUndetectableAndHasteStatusEffectDurationAtLevel");

	Params::FurtiveChase_GetUndetectableAndHasteStatusEffectDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HasItemOfTypeEquippedNoCharge.OnItemChargeStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    IsEmpty                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHasItemOfTypeEquippedNoCharge::OnItemChargeStateChanged(bool IsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HasItemOfTypeEquippedNoCharge", "OnItemChargeStateChanged");

	Params::HasItemOfTypeEquippedNoCharge_OnItemChargeStateChanged Parms{};

	Parms.IsEmpty = IsEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HasItemOfTypeInInventoryNoCharge.OnItemChargeStateChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    IsEmpty                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHasItemOfTypeInInventoryNoCharge::OnItemChargeStateChanged(bool IsEmpty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HasItemOfTypeInInventoryNoCharge", "OnItemChargeStateChanged");

	Params::HasItemOfTypeInInventoryNoCharge_OnItemChargeStateChanged Parms{};

	Parms.IsEmpty = IsEmpty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HasPlayerReachedWiggleFillPercentCondition.Authority_OnOwnerWiggleChargePercentChanged
// (Final, Native, Private)
// Parameters:
// class UChargeableComponent*             ChargeableComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PercentCompletionChange                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalPercentComplete                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHasPlayerReachedWiggleFillPercentCondition::Authority_OnOwnerWiggleChargePercentChanged(class UChargeableComponent* ChargeableComponent, float PercentCompletionChange, float TotalPercentComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HasPlayerReachedWiggleFillPercentCondition", "Authority_OnOwnerWiggleChargePercentChanged");

	Params::HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged Parms{};

	Parms.ChargeableComponent = ChargeableComponent;
	Parms.PercentCompletionChange = PercentCompletionChange;
	Parms.TotalPercentComplete = TotalPercentComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HasPlayerReachedWiggleFillPercentCondition.OnRep_IsWigglePercentReached
// (Final, Native, Private)

void UHasPlayerReachedWiggleFillPercentCondition::OnRep_IsWigglePercentReached()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HasPlayerReachedWiggleFillPercentCondition", "OnRep_IsWigglePercentReached");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.Authority_ActivatePerk
// (Final, BlueprintAuthorityOnly, Native, Public, BlueprintCallable)

void UHeadOn::Authority_ActivatePerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "Authority_ActivatePerk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.Multicast_TriggerStunOnActor
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class UObject*                          StunnableInterfaceUObject                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       Stunner                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHeadOn::Multicast_TriggerStunOnActor(class UObject* StunnableInterfaceUObject, class ADBDPlayer* Stunner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "Multicast_TriggerStunOnActor");

	Params::HeadOn_Multicast_TriggerStunOnActor Parms{};

	Parms.StunnableInterfaceUObject = StunnableInterfaceUObject;
	Parms.Stunner = Stunner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.OnHeadOnAnimationComplete
// (Final, Native, Public, BlueprintCallable)

void UHeadOn::OnHeadOnAnimationComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "OnHeadOnAnimationComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.OnPawnOverlapEnter
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UHeadOn::OnPawnOverlapEnter(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "OnPawnOverlapEnter");

	Params::HeadOn_OnPawnOverlapEnter Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.OnPawnOverlapExit
// (Final, Native, Private)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHeadOn::OnPawnOverlapExit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "OnPawnOverlapExit");

	Params::HeadOn_OnPawnOverlapExit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HeadOn.CanApplyHeadOnInteraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UHeadOn::CanApplyHeadOnInteraction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "CanApplyHeadOnInteraction");

	Params::HeadOn_CanApplyHeadOnInteraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HeadOn.GetHideDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHeadOn::GetHideDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HeadOn", "GetHideDuration");

	Params::HeadOn_GetHideDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HexDevourHope.GetMoveSpeedIncrement
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PerkLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHexDevourHope::GetMoveSpeedIncrement(int32 PerkLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexDevourHope", "GetMoveSpeedIncrement");

	Params::HexDevourHope_GetMoveSpeedIncrement Parms{};

	Parms.PerkLevel = PerkLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HexDevourHope.GetRangeFromUnhookedSurvivorNeeded
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PerkLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHexDevourHope::GetRangeFromUnhookedSurvivorNeeded(int32 PerkLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexDevourHope", "GetRangeFromUnhookedSurvivorNeeded");

	Params::HexDevourHope_GetRangeFromUnhookedSurvivorNeeded Parms{};

	Parms.PerkLevel = PerkLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HexHauntedGround.GetExposedDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHexHauntedGround::GetExposedDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexHauntedGround", "GetExposedDurationAtLevel");

	Params::HexHauntedGround_GetExposedDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HexNoOneEscapesDeath.GetHasteAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UHexNoOneEscapesDeath::GetHasteAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexNoOneEscapesDeath", "GetHasteAtLevel");

	Params::HexNoOneEscapesDeath_GetHasteAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HexNoOneEscapesDeath.OnRep_SetShouldActivateTotemOutline
// (Final, Native, Private)

void UHexNoOneEscapesDeath::OnRep_SetShouldActivateTotemOutline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexNoOneEscapesDeath", "OnRep_SetShouldActivateTotemOutline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexRuin.Authority_SetupCurseOnAllGenerators
// (Final, Native, Private)

void UHexRuin::Authority_SetupCurseOnAllGenerators()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexRuin", "Authority_SetupCurseOnAllGenerators");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.HexRuin.GetRegressionModifierByLevel
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PerkLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float UHexRuin::GetRegressionModifierByLevel(int32 PerkLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexRuin", "GetRegressionModifierByLevel");

	Params::HexRuin_GetRegressionModifierByLevel Parms{};

	Parms.PerkLevel = PerkLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HexThrillOfTheHuntStatusEffect.GetSpeedPenaltyPercents
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   TierLevel                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHexThrillOfTheHuntStatusEffect::GetSpeedPenaltyPercents(int32 TierLevel) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HexThrillOfTheHuntStatusEffect", "GetSpeedPenaltyPercents");

	Params::HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents Parms{};

	Parms.TierLevel = TierLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.HopePerk.GetHasteEffectAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHopePerk::GetHasteEffectAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HopePerk", "GetHasteEffectAtLevel");

	Params::HopePerk_GetHasteEffectAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ImAllEars.GetCooldownAtLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UImAllEars::GetCooldownAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImAllEars", "GetCooldownAtLevel");

	Params::ImAllEars_GetCooldownAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ImAllEars.GetDurationAtLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UImAllEars::GetDurationAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImAllEars", "GetDurationAtLevel");

	Params::ImAllEars_GetDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ImAllEars.Server_OnCamperLoudNoise
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UImAllEars::Server_OnCamperLoudNoise(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImAllEars", "Server_OnCamperLoudNoise");

	Params::ImAllEars_Server_OnCamperLoudNoise Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ImposeStatusEffectOnMultiEventAddon.Authority_OnEventFired
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventTag                                           (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UImposeStatusEffectOnMultiEventAddon::Authority_OnEventFired(const struct FGameplayTag& GameEventTag, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ImposeStatusEffectOnMultiEventAddon", "Authority_OnEventFired");

	Params::ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired Parms{};

	Parms.GameEventTag = std::move(GameEventTag);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.InnerStrength.Authority_OnPlayerImmobilizeStateChanged
// (Final, Native, Private)
// Parameters:
// EImmobilizedState                       OldImmobilizeState                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EImmobilizedState                       NewImmobilizeState                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInnerStrength::Authority_OnPlayerImmobilizeStateChanged(const EImmobilizedState OldImmobilizeState, const EImmobilizedState NewImmobilizeState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InnerStrength", "Authority_OnPlayerImmobilizeStateChanged");

	Params::InnerStrength_Authority_OnPlayerImmobilizeStateChanged Parms{};

	Parms.OldImmobilizeState = OldImmobilizeState;
	Parms.NewImmobilizeState = NewImmobilizeState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.InnerStrength.GetHideDuration
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInnerStrength::GetHideDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InnerStrength", "GetHideDuration");

	Params::InnerStrength_GetHideDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Insidious.GetStillnessRequiredAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInsidious::GetStillnessRequiredAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Insidious", "GetStillnessRequiredAtLevel");

	Params::Insidious_GetStillnessRequiredAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.IsChasingInjuredSurvivor.OnChasedSurvivorDamageStateChanged
// (Final, Native, Private)
// Parameters:
// ECamperDamageState                      OldState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECamperDamageState                      NewState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsChasingInjuredSurvivor::OnChasedSurvivorDamageStateChanged(const ECamperDamageState OldState, const ECamperDamageState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsChasingInjuredSurvivor", "OnChasedSurvivorDamageStateChanged");

	Params::IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsChasingInjuredSurvivor.OnChaseEnd
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       ChasedSurvivor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChaseTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsChasingInjuredSurvivor::OnChaseEnd(class ADBDPlayer* ChasedSurvivor, float ChaseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsChasingInjuredSurvivor", "OnChaseEnd");

	Params::IsChasingInjuredSurvivor_OnChaseEnd Parms{};

	Parms.ChasedSurvivor = ChasedSurvivor;
	Parms.ChaseTime = ChaseTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsChasingInjuredSurvivor.OnChaseStart
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       ChasedSurvivor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsChasingInjuredSurvivor::OnChaseStart(class ADBDPlayer* ChasedSurvivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsChasingInjuredSurvivor", "OnChaseStart");

	Params::IsChasingInjuredSurvivor_OnChaseStart Parms{};

	Parms.ChasedSurvivor = ChasedSurvivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsHighestTierOriginatingPerk.OnGameplayModifierContainerInitialized
// (Final, Native, Private)

void UIsHighestTierOriginatingPerk::OnGameplayModifierContainerInitialized()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsHighestTierOriginatingPerk", "OnGameplayModifierContainerInitialized");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsHighestTierOriginatingPerk.OnStatusEffectAddedOrRemoved
// (Final, Native, Private)
// Parameters:
// class UStatusEffect*                    Effect                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Valid                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsHighestTierOriginatingPerk::OnStatusEffectAddedOrRemoved(class UStatusEffect* Effect, bool Valid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsHighestTierOriginatingPerk", "OnStatusEffectAddedOrRemoved");

	Params::IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved Parms{};

	Parms.Effect = Effect;
	Parms.Valid = Valid;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsHighestTierOriginatingPerk.OnStatusEffectApplicableChanged
// (Final, Native, Private)
// Parameters:
// class UGameplayModifierContainer*       GameplayModifierContainer                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsApplicable                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsHighestTierOriginatingPerk::OnStatusEffectApplicableChanged(class UGameplayModifierContainer* GameplayModifierContainer, bool IsApplicable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsHighestTierOriginatingPerk", "OnStatusEffectApplicableChanged");

	Params::IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged Parms{};

	Parms.GameplayModifierContainer = GameplayModifierContainer;
	Parms.IsApplicable = IsApplicable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsOriginatingPerkBoundToTotems.Init
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EComparisonOperation                    ComparisonOperator                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   TotemCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsOriginatingPerkBoundToTotems::Init(EComparisonOperation ComparisonOperator, int32 TotemCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsOriginatingPerkBoundToTotems", "Init");

	Params::IsOriginatingPerkBoundToTotems_Init Parms{};

	Parms.ComparisonOperator = ComparisonOperator;
	Parms.TotemCount = TotemCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsOriginatingPerkBoundToTotems.OnRep_TotemCount
// (Final, Native, Private)

void UIsOriginatingPerkBoundToTotems::OnRep_TotemCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsOriginatingPerkBoundToTotems", "OnRep_TotemCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerPerfInteractionWithNoItem.OnCollectableChargeStateChange
// (Final, Native, Private)
// Parameters:
// bool                                    Empty                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerPerfInteractionWithNoItem::OnCollectableChargeStateChange(bool Empty)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerPerfInteractionWithNoItem", "OnCollectableChargeStateChange");

	Params::IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange Parms{};

	Parms.Empty = Empty;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.IsPlayerRunningAndMoving.OnRunningAndMovingChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsRunningAndMoving                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UIsPlayerRunningAndMoving::OnRunningAndMovingChanged(bool IsRunningAndMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsPlayerRunningAndMoving", "OnRunningAndMovingChanged");

	Params::IsPlayerRunningAndMoving_OnRunningAndMovingChanged Parms{};

	Parms.IsRunningAndMoving = IsRunningAndMoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.KillerSubjectProvider.RegisterWhenKillerSet
// (Final, Native, Private)
// Parameters:
// class ASlasherPlayer*                   Killer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKillerSubjectProvider::RegisterWhenKillerSet(class ASlasherPlayer* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerSubjectProvider", "RegisterWhenKillerSet");

	Params::KillerSubjectProvider_RegisterWhenKillerSet Parms{};

	Parms.Killer = Killer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LingeringBlessedStatusEffect.Authority_OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULingeringBlessedStatusEffect::Authority_OnInRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LingeringBlessedStatusEffect", "Authority_OnInRangeChanged");

	Params::LingeringBlessedStatusEffect_Authority_OnInRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LingeringBlessedStatusEffect.SetLingerDuration
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   LingerDuration                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULingeringBlessedStatusEffect::SetLingerDuration(const float LingerDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LingeringBlessedStatusEffect", "SetLingerDuration");

	Params::LingeringBlessedStatusEffect_SetLingerDuration Parms{};

	Parms.LingerDuration = LingerDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LuckyBreak.ActivationTimerEnded
// (Final, Native, Private)

void ULuckyBreak::ActivationTimerEnded()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuckyBreak", "ActivationTimerEnded");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LuckyBreak.Authority_OnDamageStateChanged
// (Final, Native, Private)
// Parameters:
// ECamperDamageState                      OldDamageState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECamperDamageState                      CurrentDamageState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULuckyBreak::Authority_OnDamageStateChanged(ECamperDamageState OldDamageState, ECamperDamageState CurrentDamageState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuckyBreak", "Authority_OnDamageStateChanged");

	Params::LuckyBreak_Authority_OnDamageStateChanged Parms{};

	Parms.OldDamageState = OldDamageState;
	Parms.CurrentDamageState = CurrentDamageState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LuckyBreak.Authority_TryActivatePerk
// (Final, Native, Private)

void ULuckyBreak::Authority_TryActivatePerk()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuckyBreak", "Authority_TryActivatePerk");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.LuckyBreak.GetHealingTimeToActivationTimeRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULuckyBreak::GetHealingTimeToActivationTimeRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuckyBreak", "GetHealingTimeToActivationTimeRatio");

	Params::LuckyBreak_GetHealingTimeToActivationTimeRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.LuckyBreak.GetMaxActivationTimeAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULuckyBreak::GetMaxActivationTimeAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuckyBreak", "GetMaxActivationTimeAtLevel");

	Params::LuckyBreak_GetMaxActivationTimeAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.LuckyBreak.GetMinActivationTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ULuckyBreak::GetMinActivationTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LuckyBreak", "GetMinActivationTime");

	Params::LuckyBreak_GetMinActivationTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.MakeYourChoice.Cosmetic_OnTriggerEffectVFX
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ACamperPlayer*                    Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMakeYourChoice::Cosmetic_OnTriggerEffectVFX(const class ACamperPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MakeYourChoice", "Cosmetic_OnTriggerEffectVFX");

	Params::MakeYourChoice_Cosmetic_OnTriggerEffectVFX Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.MakeYourChoice.Multicast_TriggerEffectAppliedVFX
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ACamperPlayer*                    Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMakeYourChoice::Multicast_TriggerEffectAppliedVFX(const class ACamperPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MakeYourChoice", "Multicast_TriggerEffectAppliedVFX");

	Params::MakeYourChoice_Multicast_TriggerEffectAppliedVFX Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.MakeYourChoice.GetMinimumHookedSurvivorDistance
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMakeYourChoice::GetMinimumHookedSurvivorDistance() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MakeYourChoice", "GetMinimumHookedSurvivorDistance");

	Params::MakeYourChoice_GetMinimumHookedSurvivorDistance Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.MindBreaker.GetEffectDurationAfterRepairAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMindBreaker::GetEffectDurationAfterRepairAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MindBreaker", "GetEffectDurationAfterRepairAtLevel");

	Params::MindBreaker_GetEffectDurationAfterRepairAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.MonstrousShrine.Authority_OnSurvivorHookedOnScourgeHook
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMonstrousShrine::Authority_OnSurvivorHookedOnScourgeHook(const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonstrousShrine", "Authority_OnSurvivorHookedOnScourgeHook");

	Params::MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook Parms{};

	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.MonstrousShrine.Authority_OnSurvivorUnhookedOnScourgeHook
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMonstrousShrine::Authority_OnSurvivorUnhookedOnScourgeHook(const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonstrousShrine", "Authority_OnSurvivorUnhookedOnScourgeHook");

	Params::MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook Parms{};

	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.MonstrousShrine.GetFasterDrainPercentageAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UMonstrousShrine::GetFasterDrainPercentageAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MonstrousShrine", "GetFasterDrainPercentageAtLevel");

	Params::MonstrousShrine_GetFasterDrainPercentageAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.NoOneLeftBehind.Authority_OnExitGatePoweredApplicableChanged
// (Final, Native, Private)
// Parameters:
// class UGameplayModifierContainer*       Container                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Active                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNoOneLeftBehind::Authority_OnExitGatePoweredApplicableChanged(class UGameplayModifierContainer* Container, bool Active)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NoOneLeftBehind", "Authority_OnExitGatePoweredApplicableChanged");

	Params::NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged Parms{};

	Parms.Container = Container;
	Parms.Active = Active;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.NoOneLeftBehind.GetActionSpeedModifierValueAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNoOneLeftBehind::GetActionSpeedModifierValueAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NoOneLeftBehind", "GetActionSpeedModifierValueAtLevel");

	Params::NoOneLeftBehind_GetActionSpeedModifierValueAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.NoOneLeftBehind.GetMovementSpeedDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNoOneLeftBehind::GetMovementSpeedDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NoOneLeftBehind", "GetMovementSpeedDuration");

	Params::NoOneLeftBehind_GetMovementSpeedDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.NoOneLeftBehind.GetMovementSpeedPercentage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UNoOneLeftBehind::GetMovementSpeedPercentage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NoOneLeftBehind", "GetMovementSpeedPercentage");

	Params::NoOneLeftBehind_GetMovementSpeedPercentage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.OriginatingPlayerHasLineOfSight.OnRep_InLineOfSight
// (Final, Native, Private)

void UOriginatingPlayerHasLineOfSight::OnRep_InLineOfSight()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OriginatingPlayerHasLineOfSight", "OnRep_InLineOfSight");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.OwningPlayerHasStatusEffectOfClass.OnRep_IsConditionMet
// (Final, Native, Private)

void UOwningPlayerHasStatusEffectOfClass::OnRep_IsConditionMet()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OwningPlayerHasStatusEffectOfClass", "OnRep_IsConditionMet");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.OwningPlayerHasStatusEffectOfClass.SetClassTypeToMatch
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UStatusEffect>        ClassType                                              (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOwningPlayerHasStatusEffectOfClass::SetClassTypeToMatch(TSubclassOf<class UStatusEffect> ClassType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OwningPlayerHasStatusEffectOfClass", "SetClassTypeToMatch");

	Params::OwningPlayerHasStatusEffectOfClass_SetClassTypeToMatch Parms{};

	Parms.ClassType = ClassType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.OwningPlayerInTotemRange.OnLevelReadyToPlay
// (Final, Native, Protected)

void UOwningPlayerInTotemRange::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OwningPlayerInTotemRange", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.PharmacyPerk.GetSearchSpeedAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPharmacyPerk::GetSearchSpeedAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PharmacyPerk", "GetSearchSpeedAtLevel");

	Params::PharmacyPerk_GetSearchSpeedAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.PlayerIsInExitArea.PlayerEnterExitArea
// (Final, Native, Private)

void UPlayerIsInExitArea::PlayerEnterExitArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerIsInExitArea", "PlayerEnterExitArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.PlayerIsInExitArea.PlayerExitExitArea
// (Final, Native, Private)

void UPlayerIsInExitArea::PlayerExitExitArea()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerIsInExitArea", "PlayerExitExitArea");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.PlayWithYourFood.Authority_OnChaseEnded
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChaseTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayWithYourFood::Authority_OnChaseEnded(class ADBDPlayer* Player, float ChaseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayWithYourFood", "Authority_OnChaseEnded");

	Params::PlayWithYourFood_Authority_OnChaseEnded Parms{};

	Parms.Player = Player;
	Parms.ChaseTime = ChaseTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.PlayWithYourFood.GetChargeGainedCooldown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPlayWithYourFood::GetChargeGainedCooldown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayWithYourFood", "GetChargeGainedCooldown");

	Params::PlayWithYourFood_GetChargeGainedCooldown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.PlayWithYourFood.GetMovementSpeedPercentBuffAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPlayWithYourFood::GetMovementSpeedPercentBuffAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayWithYourFood", "GetMovementSpeedPercentBuffAtLevel");

	Params::PlayWithYourFood_GetMovementSpeedPercentBuffAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Poised.GetRevealKillerAuraDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPoised::GetRevealKillerAuraDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Poised", "GetRevealKillerAuraDuration");

	Params::Poised_GetRevealKillerAuraDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Poised.GetSuppressFootstepsDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPoised::GetSuppressFootstepsDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Poised", "GetSuppressFootstepsDuration");

	Params::Poised_GetSuppressFootstepsDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Premonition.Cosmetic_OnPerkActivate
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UPremonition::Cosmetic_OnPerkActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Premonition", "Cosmetic_OnPerkActivate");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.Premonition.Multicast_OnPerkActivate
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UPremonition::Multicast_OnPerkActivate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Premonition", "Multicast_OnPerkActivate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Premonition.GetPerkEffectRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPremonition::GetPerkEffectRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Premonition", "GetPerkEffectRange");

	Params::Premonition_GetPerkEffectRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Premonition.GetPerkFrequencyAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UPremonition::GetPerkFrequencyAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Premonition", "GetPerkFrequencyAtLevel");

	Params::Premonition_GetPerkFrequencyAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.ProveThyself.OnSurvivorInOwnerRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProveThyself::OnSurvivorInOwnerRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProveThyself", "OnSurvivorInOwnerRangeChanged");

	Params::ProveThyself_OnSurvivorInOwnerRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.RemoveOnOriginatingSurvivorGoneStatusEffect.Authority_OnSurvivorRemoved
// (Final, Native, Protected)
// Parameters:
// class ACamperPlayer*                    Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URemoveOnOriginatingSurvivorGoneStatusEffect::Authority_OnSurvivorRemoved(class ACamperPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RemoveOnOriginatingSurvivorGoneStatusEffect", "Authority_OnSurvivorRemoved");

	Params::RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved Parms{};

	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.ProveThyselfEffect.OnInRangeOfOriginatorChanged
// (Native, Protected)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACamperPlayer*                    Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UProveThyselfEffect::OnInRangeOfOriginatorChanged(const bool InRange, class ACamperPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProveThyselfEffect", "OnInRangeOfOriginatorChanged");

	Params::ProveThyselfEffect_OnInRangeOfOriginatorChanged Parms{};

	Parms.InRange = InRange;
	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.QuickAndQuiet.Authority_OnPlayerRushedActionFinished
// (Final, Native, Private)

void UQuickAndQuiet::Authority_OnPlayerRushedActionFinished()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuickAndQuiet", "Authority_OnPlayerRushedActionFinished");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.QuickAndQuiet.GetCooldownDurationSecondsAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UQuickAndQuiet::GetCooldownDurationSecondsAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuickAndQuiet", "GetCooldownDurationSecondsAtLevel");

	Params::QuickAndQuiet_GetCooldownDurationSecondsAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Saboteur.GetCooldownDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USaboteur::GetCooldownDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Saboteur", "GetCooldownDurationAtLevel");

	Params::Saboteur_GetCooldownDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Saboteur.GetRevealHookDistanceAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USaboteur::GetRevealHookDistanceAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Saboteur", "GetRevealHookDistanceAtLevel");

	Params::Saboteur_GetRevealHookDistanceAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Saboteur.GetScourgeHooksAuraColour
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor USaboteur::GetScourgeHooksAuraColour() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Saboteur", "GetScourgeHooksAuraColour");

	Params::Saboteur_GetScourgeHooksAuraColour Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SecondWind.Authority_OnHealProgress
// (Final, Native, Private)
// Parameters:
// float                                   IndividualChargeAmount                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalChargeAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ChargeInstigator                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WasCoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USecondWind::Authority_OnHealProgress(float IndividualChargeAmount, float TotalChargeAmount, class AActor* ChargeInstigator, bool WasCoop, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecondWind", "Authority_OnHealProgress");

	Params::SecondWind_Authority_OnHealProgress Parms{};

	Parms.IndividualChargeAmount = IndividualChargeAmount;
	Parms.TotalChargeAmount = TotalChargeAmount;
	Parms.ChargeInstigator = ChargeInstigator;
	Parms.WasCoop = WasCoop;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SecondWind.GetDurationOfHealAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USecondWind::GetDurationOfHealAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecondWind", "GetDurationOfHealAtLevel");

	Params::SecondWind_GetDurationOfHealAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SecondWind.GetNumberOfHealStateToHealToActivateAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USecondWind::GetNumberOfHealStateToHealToActivateAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SecondWind", "GetNumberOfHealStateToHealToActivateAtLevel");

	Params::SecondWind_GetNumberOfHealStateToHealToActivateAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SelfRecoverSkill.Authority_OnHealProgress
// (Final, Native, Private)
// Parameters:
// float                                   IndividualChargeAmount                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalChargeAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ChargeInstigator                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WasCoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USelfRecoverSkill::Authority_OnHealProgress(float IndividualChargeAmount, float TotalChargeAmount, class AActor* ChargeInstigator, bool WasCoop, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SelfRecoverSkill", "Authority_OnHealProgress");

	Params::SelfRecoverSkill_Authority_OnHealProgress Parms{};

	Parms.IndividualChargeAmount = IndividualChargeAmount;
	Parms.TotalChargeAmount = TotalChargeAmount;
	Parms.ChargeInstigator = ChargeInstigator;
	Parms.WasCoop = WasCoop;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SmallGame.Authority_SetTotemDetected
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USmallGame::Authority_SetTotemDetected(bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "Authority_SetTotemDetected");

	Params::SmallGame_Authority_SetTotemDetected Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SmallGame.Multicast_TotemFound
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void USmallGame::Multicast_TotemFound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "Multicast_TotemFound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SmallGame.SearchForTotems
// (Event, Protected, BlueprintEvent)

void USmallGame::SearchForTotems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "SearchForTotems");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.SmallGame.VFXTotemFound
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void USmallGame::VFXTotemFound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "VFXTotemFound");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.SmallGame.GetDetectionConeAngle
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USmallGame::GetDetectionConeAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SmallGame", "GetDetectionConeAngle");

	Params::SmallGame_GetDetectionConeAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SoleSurvivor.Authority_OnSurvivorAdded
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    Survivor                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USoleSurvivor::Authority_OnSurvivorAdded(const class ACamperPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SoleSurvivor", "Authority_OnSurvivorAdded");

	Params::SoleSurvivor_Authority_OnSurvivorAdded Parms{};

	Parms.Survivor = Survivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Solidarity.Authority_OnHealthChargeApplied
// (Final, Native, Private)
// Parameters:
// float                                   IndividualChargeAmount                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalChargeAmount                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ChargeInstigator                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    WasCoop                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolidarity::Authority_OnHealthChargeApplied(float IndividualChargeAmount, float TotalChargeAmount, class AActor* ChargeInstigator, bool WasCoop, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Solidarity", "Authority_OnHealthChargeApplied");

	Params::Solidarity_Authority_OnHealthChargeApplied Parms{};

	Parms.IndividualChargeAmount = IndividualChargeAmount;
	Parms.TotalChargeAmount = TotalChargeAmount;
	Parms.ChargeInstigator = ChargeInstigator;
	Parms.WasCoop = WasCoop;
	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Solidarity.Authority_OnSkillCheckResponse
// (Final, Native, Private)
// Parameters:
// bool                                    Success                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Bonus                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TriggerLoudNoise                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HadInput                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESkillCheckCustomType                   Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChargeChange                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USolidarity::Authority_OnSkillCheckResponse(bool Success, bool Bonus, class ADBDPlayer* Player, bool TriggerLoudNoise, bool HadInput, ESkillCheckCustomType Type, float ChargeChange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Solidarity", "Authority_OnSkillCheckResponse");

	Params::Solidarity_Authority_OnSkillCheckResponse Parms{};

	Parms.Success = Success;
	Parms.Bonus = Bonus;
	Parms.Player = Player;
	Parms.TriggerLoudNoise = TriggerLoudNoise;
	Parms.HadInput = HadInput;
	Parms.Type = Type;
	Parms.ChargeChange = ChargeChange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SpawningEffectOnGameEventPerk.GetCustomParameterOfStatusEffectAtLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpawningEffectOnGameEventPerk::GetCustomParameterOfStatusEffectAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpawningEffectOnGameEventPerk", "GetCustomParameterOfStatusEffectAtLevel");

	Params::SpawningEffectOnGameEventPerk_GetCustomParameterOfStatusEffectAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpawningEffectOnGameEventPerk.GetLifetimeOfStatusEffectAtLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpawningEffectOnGameEventPerk::GetLifetimeOfStatusEffectAtLevel()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpawningEffectOnGameEventPerk", "GetLifetimeOfStatusEffectAtLevel");

	Params::SpawningEffectOnGameEventPerk_GetLifetimeOfStatusEffectAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpiesFromTheShadows.GetCooldownDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpiesFromTheShadows::GetCooldownDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpiesFromTheShadows", "GetCooldownDuration");

	Params::SpiesFromTheShadows_GetCooldownDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.Authority_OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineChillPerk::Authority_OnInRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "Authority_OnInRangeChanged");

	Params::SpineChillPerk_Authority_OnInRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SpineChillPerk.Authority_OnIsInLineOfSightChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsInLineOfSight                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineChillPerk::Authority_OnIsInLineOfSightChanged(const bool IsInLineOfSight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "Authority_OnIsInLineOfSightChanged");

	Params::SpineChillPerk_Authority_OnIsInLineOfSightChanged Parms{};

	Parms.IsInLineOfSight = IsInLineOfSight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SpineChillPerk.Authority_OnIsLookingTowardsChanged
// (Final, Native, Private)
// Parameters:
// bool                                    Param_IsLookingTowards                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpineChillPerk::Authority_OnIsLookingTowardsChanged(const bool Param_IsLookingTowards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "Authority_OnIsLookingTowardsChanged");

	Params::SpineChillPerk_Authority_OnIsLookingTowardsChanged Parms{};

	Parms.Param_IsLookingTowards = Param_IsLookingTowards;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SpineChillPerk.GetLingerDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineChillPerk::GetLingerDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "GetLingerDuration");

	Params::SpineChillPerk_GetLingerDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.GetRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USpineChillPerk::GetRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "GetRange");

	Params::SpineChillPerk_GetRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.HasLineOfSight
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineChillPerk::HasLineOfSight() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "HasLineOfSight");

	Params::SpineChillPerk_HasLineOfSight Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.IsInRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineChillPerk::IsInRange() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "IsInRange");

	Params::SpineChillPerk_IsInRange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SpineChillPerk.IsLookingTowards
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USpineChillPerk::IsLookingTowards() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpineChillPerk", "IsLookingTowards");

	Params::SpineChillPerk_IsLookingTowards Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SprintBurst.Authority_OnIsRunningAndMovingChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsRunningAndMoving                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USprintBurst::Authority_OnIsRunningAndMovingChanged(const bool IsRunningAndMoving)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SprintBurst", "Authority_OnIsRunningAndMovingChanged");

	Params::SprintBurst_Authority_OnIsRunningAndMovingChanged Parms{};

	Parms.IsRunningAndMoving = IsRunningAndMoving;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SprintBurst.Authority_OnPerkFlagsChanged
// (Final, Native, Private)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsAdded                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USprintBurst::Authority_OnPerkFlagsChanged(const struct FGameplayTag& GameplayTag, bool IsAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SprintBurst", "Authority_OnPerkFlagsChanged");

	Params::SprintBurst_Authority_OnPerkFlagsChanged Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.IsAdded = IsAdded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.SprintBurst.GetExhaustedDuration
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USprintBurst::GetExhaustedDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SprintBurst", "GetExhaustedDuration");

	Params::SprintBurst_GetExhaustedDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.SprintBurst.GetSprintDuration
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USprintBurst::GetSprintDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SprintBurst", "GetSprintDuration");

	Params::SprintBurst_GetSprintDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.StakeOutPerk.Local_BroadcastConsumeToken
// (Final, Native, Public, BlueprintCallable)

void UStakeOutPerk::Local_BroadcastConsumeToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StakeOutPerk", "Local_BroadcastConsumeToken");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.StakeOutPerk.Server_ConsumeToken
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UStakeOutPerk::Server_ConsumeToken()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StakeOutPerk", "Server_ConsumeToken");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.StakeOutPerk.GetMaxTokensAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UStakeOutPerk::GetMaxTokensAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StakeOutPerk", "GetMaxTokensAtLevel");

	Params::StakeOutPerk_GetMaxTokensAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.StakeOutPerk.GetTokenChargeTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UStakeOutPerk::GetTokenChargeTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StakeOutPerk", "GetTokenChargeTime");

	Params::StakeOutPerk_GetTokenChargeTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.StatsSystemUtilities.GetStatValueBP
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FTunableStat                     TheStat                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UStatsSystemUtilities::GetStatValueBP(const struct FTunableStat& TheStat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StatsSystemUtilities", "GetStatValueBP");

	Params::StatsSystemUtilities_GetStatValueBP Parms{};

	Parms.TheStat = std::move(TheStat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.StatsSystemUtilities.InitStatBP
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FTunableStat                     TheStat                                                (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TScriptInterface<class IModifierProvider>ModifierProvider                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UStatsSystemUtilities::InitStatBP(struct FTunableStat& TheStat, TScriptInterface<class IModifierProvider> ModifierProvider)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("StatsSystemUtilities", "InitStatBP");

	Params::StatsSystemUtilities_InitStatBP Parms{};

	Parms.TheStat = std::move(TheStat);
	Parms.ModifierProvider = ModifierProvider;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TheStat = std::move(Parms.TheStat);
}


// Function DBDCompetence.Surge.GetCooldownDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float USurge::GetCooldownDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Surge", "GetCooldownDurationAtLevel");

	Params::Surge_GetCooldownDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Surge.GetHasCooldown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const bool                              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const bool USurge::GetHasCooldown() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Surge", "GetHasCooldown");

	Params::Surge_GetHasCooldown Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Surge.GetInstantRegressionAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const float                             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const float USurge::GetInstantRegressionAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Surge", "GetInstantRegressionAtLevel");

	Params::Surge_GetInstantRegressionAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Surge.GetZoneRadius
// (Final, Native, Private, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USurge::GetZoneRadius() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Surge", "GetZoneRadius");

	Params::Surge_GetZoneRadius Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.WellMakeIt.Authority_OnUnHook
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UWellMakeIt::Authority_OnUnHook(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WellMakeIt", "Authority_OnUnHook");

	Params::WellMakeIt_Authority_OnUnHook Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.WellMakeIt.GetHealingSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UWellMakeIt::GetHealingSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WellMakeIt", "GetHealingSpeed");

	Params::WellMakeIt_GetHealingSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.WellMakeIt.GetPerkDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UWellMakeIt::GetPerkDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WellMakeIt", "GetPerkDurationAtLevel");

	Params::WellMakeIt_GetPerkDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDCompetence.Whispers.Multicast_FireAudioEvent
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// int32                                   SurvivorsInRange                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWhispers::Multicast_FireAudioEvent(const int32 SurvivorsInRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Whispers", "Multicast_FireAudioEvent");

	Params::Whispers_Multicast_FireAudioEvent Parms{};

	Parms.SurvivorsInRange = SurvivorsInRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Whispers.OnRep_SurvivorsInRange
// (Final, Native, Private)

void UWhispers::OnRep_SurvivorsInRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Whispers", "OnRep_SurvivorsInRange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.Whispers.OnWhispersAudio
// (Event, Protected, BlueprintEvent)

void UWhispers::OnWhispersAudio()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Whispers", "OnWhispersAudio");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDCompetence.YamaokaFamilyCrest.OnRep_AddonActivationCount
// (Final, Native, Private)

void UYamaokaFamilyCrest::OnRep_AddonActivationCount()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YamaokaFamilyCrest", "OnRep_AddonActivationCount");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDCompetence.YamaokaFamilyCrest.RevealSurvivor
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ACamperPlayer*                    SurvivorToReveal                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYamaokaFamilyCrest::RevealSurvivor(class ACamperPlayer* SurvivorToReveal)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YamaokaFamilyCrest", "RevealSurvivor");

	Params::YamaokaFamilyCrest_RevealSurvivor Parms{};

	Parms.SurvivorToReveal = SurvivorToReveal;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDCompetence.ZanshinTactics.GetSurvivorAuraRevealDuration
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UZanshinTactics::GetSurvivorAuraRevealDuration() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ZanshinTactics", "GetSurvivorAuraRevealDuration");

	Params::ZanshinTactics_GetSurvivorAuraRevealDuration Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

