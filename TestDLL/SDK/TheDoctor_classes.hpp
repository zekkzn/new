#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheDoctor

#include "Basic.hpp"

#include "DBDGameplay_classes.hpp"
#include "DBDCompetence_classes.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "DBDAnimation_classes.hpp"
#include "Engine_classes.hpp"
#include "DBDCosmetic_classes.hpp"
#include "StatSystem_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TheDoctor_structs.hpp"
#include "SystemUtilities_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Class TheDoctor.CalmBaseAddon
// 0x0008 (0x0310 - 0x0308)
class UCalmBaseAddon final : public USimpleSpawnEffectsOnAllSurvivorsAddon
{
public:
	float                                         _terrorRadiusModification;                         // 0x0308(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CalmBaseAddon">();
	}
	static class UCalmBaseAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCalmBaseAddon>();
	}
};
static_assert(alignof(UCalmBaseAddon) == 0x000008, "Wrong alignment on UCalmBaseAddon");
static_assert(sizeof(UCalmBaseAddon) == 0x000310, "Wrong size on UCalmBaseAddon");
static_assert(offsetof(UCalmBaseAddon, _terrorRadiusModification) == 0x000308, "Member 'UCalmBaseAddon::_terrorRadiusModification' has a wrong offset!");

// Class TheDoctor.CalmIntermittentFakeTerrorRadiusEffect
// 0x0048 (0x03C8 - 0x0380)
class UCalmIntermittentFakeTerrorRadiusEffect final : public UStatusEffect
{
public:
	float                                         _fakeTerrorRadiusDuration;                         // 0x0380(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _fakeTerrorRadiusIntermittenceMin;                 // 0x0384(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _fakeTerrorRadiusIntermittenceMax;                 // 0x0388(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38C[0x3C];                                     // 0x038C(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CalmIntermittentFakeTerrorRadiusEffect">();
	}
	static class UCalmIntermittentFakeTerrorRadiusEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCalmIntermittentFakeTerrorRadiusEffect>();
	}
};
static_assert(alignof(UCalmIntermittentFakeTerrorRadiusEffect) == 0x000008, "Wrong alignment on UCalmIntermittentFakeTerrorRadiusEffect");
static_assert(sizeof(UCalmIntermittentFakeTerrorRadiusEffect) == 0x0003C8, "Wrong size on UCalmIntermittentFakeTerrorRadiusEffect");
static_assert(offsetof(UCalmIntermittentFakeTerrorRadiusEffect, _fakeTerrorRadiusDuration) == 0x000380, "Member 'UCalmIntermittentFakeTerrorRadiusEffect::_fakeTerrorRadiusDuration' has a wrong offset!");
static_assert(offsetof(UCalmIntermittentFakeTerrorRadiusEffect, _fakeTerrorRadiusIntermittenceMin) == 0x000384, "Member 'UCalmIntermittentFakeTerrorRadiusEffect::_fakeTerrorRadiusIntermittenceMin' has a wrong offset!");
static_assert(offsetof(UCalmIntermittentFakeTerrorRadiusEffect, _fakeTerrorRadiusIntermittenceMax) == 0x000388, "Member 'UCalmIntermittentFakeTerrorRadiusEffect::_fakeTerrorRadiusIntermittenceMax' has a wrong offset!");

// Class TheDoctor.CartersSpark
// 0x00D8 (0x0628 - 0x0550)
class ACartersSpark final : public ACollectable
{
public:
	uint8                                         Pad_550[0x18];                                     // 0x0550(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _shockAttackComboTimerDuration;                    // 0x0568(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class USurvivorCartersSparkComponent> _survivorCartersSparkComponentClass;               // 0x0590(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_598[0x68];                                     // 0x0598(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _doctorBlockInterruptEffect;                       // 0x0600(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _madnessStatusEffect;                              // 0x0608(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _illusionaryDoctorEffect;                          // 0x0610(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCartersSparkComponent*                 _cartersSparkComponent;                            // 0x0618(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractionAttacherComponent*          _interactionAttacherComponent;                     // 0x0620(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_StartShockAttackComboTimer(class ACamperPlayer* ShockedSurvivor);
	void CancelSurvivorInteraction(class ACamperPlayer* Survivor);
	void Cosmetic_OnShockTherapyZoneDetonated(class ADBDPlayer* Killer, const int32 SurvivorsHitCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CartersSpark">();
	}
	static class ACartersSpark* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACartersSpark>();
	}
};
static_assert(alignof(ACartersSpark) == 0x000008, "Wrong alignment on ACartersSpark");
static_assert(sizeof(ACartersSpark) == 0x000628, "Wrong size on ACartersSpark");
static_assert(offsetof(ACartersSpark, _shockAttackComboTimerDuration) == 0x000568, "Member 'ACartersSpark::_shockAttackComboTimerDuration' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _survivorCartersSparkComponentClass) == 0x000590, "Member 'ACartersSpark::_survivorCartersSparkComponentClass' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _doctorBlockInterruptEffect) == 0x000600, "Member 'ACartersSpark::_doctorBlockInterruptEffect' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _madnessStatusEffect) == 0x000608, "Member 'ACartersSpark::_madnessStatusEffect' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _illusionaryDoctorEffect) == 0x000610, "Member 'ACartersSpark::_illusionaryDoctorEffect' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _cartersSparkComponent) == 0x000618, "Member 'ACartersSpark::_cartersSparkComponent' has a wrong offset!");
static_assert(offsetof(ACartersSpark, _interactionAttacherComponent) == 0x000620, "Member 'ACartersSpark::_interactionAttacherComponent' has a wrong offset!");

// Class TheDoctor.DisciplineEffect
// 0x00C8 (0x0448 - 0x0380)
class UDisciplineEffect final : public UStatusEffect
{
public:
	float                                         _deactivationDelay;                                // 0x0380(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _redStainInterpolating;                            // 0x0388(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_389[0xBF];                                     // 0x0389(0x00BF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_ActivateKillerRedStain(bool Param_Activate);
	void Cosmetic_ActivateSurvivorRedStain(bool Param_Activate);
	void Cosmetic_SpawnRedStains();
	void Cosmetic_UpdateKillerRedStain(bool Visible, float DeltaTime);
	void Cosmetic_UpdateSurvivorRedStain(bool Visible, float DeltaTime);
	void SetRedStainInterpolating(bool IsInterpolating);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DisciplineEffect">();
	}
	static class UDisciplineEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDisciplineEffect>();
	}
};
static_assert(alignof(UDisciplineEffect) == 0x000008, "Wrong alignment on UDisciplineEffect");
static_assert(sizeof(UDisciplineEffect) == 0x000448, "Wrong size on UDisciplineEffect");
static_assert(offsetof(UDisciplineEffect, _deactivationDelay) == 0x000380, "Member 'UDisciplineEffect::_deactivationDelay' has a wrong offset!");
static_assert(offsetof(UDisciplineEffect, _redStainInterpolating) == 0x000388, "Member 'UDisciplineEffect::_redStainInterpolating' has a wrong offset!");

// Class TheDoctor.DoctorAnimInstance
// 0x0000 (0x0720 - 0x0720)
class UDoctorAnimInstance final : public UKillerAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoctorAnimInstance">();
	}
	static class UDoctorAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoctorAnimInstance>();
	}
};
static_assert(alignof(UDoctorAnimInstance) == 0x000010, "Wrong alignment on UDoctorAnimInstance");
static_assert(sizeof(UDoctorAnimInstance) == 0x000720, "Wrong size on UDoctorAnimInstance");

// Class TheDoctor.DoctorCheatComponent
// 0x0000 (0x00A8 - 0x00A8)
class UDoctorCheatComponent final : public UActorComponent
{
public:
	void DBD_AddMadness(float MadnessToAdd, const class FString& LocalPlayerId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoctorCheatComponent">();
	}
	static class UDoctorCheatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoctorCheatComponent>();
	}
};
static_assert(alignof(UDoctorCheatComponent) == 0x000008, "Wrong alignment on UDoctorCheatComponent");
static_assert(sizeof(UDoctorCheatComponent) == 0x0000A8, "Wrong size on UDoctorCheatComponent");

// Class TheDoctor.DoctorPowerSubAnimInstance
// 0x0010 (0x0360 - 0x0350)
class UDoctorPowerSubAnimInstance final : public UAnimInstance
{
public:
	EDoctorAbilityType                            _abilityType;                                      // 0x0350(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EDoctorAbilityPhase                           _abilityPhase;                                     // 0x0351(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isShockTherapyInCooldown;                         // 0x0352(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_353[0x1];                                      // 0x0353(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UDoctorPowerAnimStateComponent> _powerStateComponent;                              // 0x0354(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35C[0x4];                                      // 0x035C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnShockTherapyAnimationAttackStart();
	void OnShockTherapyAnimationAttackStop();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoctorPowerSubAnimInstance">();
	}
	static class UDoctorPowerSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDoctorPowerSubAnimInstance>();
	}
};
static_assert(alignof(UDoctorPowerSubAnimInstance) == 0x000010, "Wrong alignment on UDoctorPowerSubAnimInstance");
static_assert(sizeof(UDoctorPowerSubAnimInstance) == 0x000360, "Wrong size on UDoctorPowerSubAnimInstance");
static_assert(offsetof(UDoctorPowerSubAnimInstance, _abilityType) == 0x000350, "Member 'UDoctorPowerSubAnimInstance::_abilityType' has a wrong offset!");
static_assert(offsetof(UDoctorPowerSubAnimInstance, _abilityPhase) == 0x000351, "Member 'UDoctorPowerSubAnimInstance::_abilityPhase' has a wrong offset!");
static_assert(offsetof(UDoctorPowerSubAnimInstance, _isShockTherapyInCooldown) == 0x000352, "Member 'UDoctorPowerSubAnimInstance::_isShockTherapyInCooldown' has a wrong offset!");
static_assert(offsetof(UDoctorPowerSubAnimInstance, _powerStateComponent) == 0x000354, "Member 'UDoctorPowerSubAnimInstance::_powerStateComponent' has a wrong offset!");

// Class TheDoctor.DoctorSurvivorCosmeticHelperActor
// 0x0080 (0x0388 - 0x0308)
class ADoctorSurvivorCosmeticHelperActor final : public ASurvivorCosmeticHelperActor
{
public:
	uint8                                         Pad_308[0x80];                                     // 0x0308(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateMadnessBubbleIndicator();
	void Cosmetic_OnIllusionaryDoctorApparitionSequenceStart(const struct FTransform& IllusionaryDoctorTransform, const float ApparitionDuration);
	void Cosmetic_OnIllusionaryPalletActivated(const class APallet* Pallet);
	void Cosmetic_OnIllusionaryPalletDeactivated(const class APallet* Pallet);
	void Cosmetic_OnInsaneSkillCheck();
	void Cosmetic_OnMadnessChanged(int32 NewTier, bool Increased);
	void Cosmetic_OnMadnessIntermittentScream();
	void Cosmetic_OnOwningSurvivorShocked();
	void SpawnMadnessBubbleIndicator();

	bool CanPlayerSeeIllusionaryPalletGlitch(class APallet* Pallet) const;
	bool CanPlayOverwhelmingMadnessAnimation() const;
	bool CanPlayOverwhelmingMadnessAudio() const;
	bool CanPlayShockedAnimation() const;
	class AIllusionaryDoctor* GetIllusionaryDoctor() const;
	class USurvivorMadnessEffect* GetSurvivorMadnessEffect() const;
	bool IsSurvivorOperatingLocker() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DoctorSurvivorCosmeticHelperActor">();
	}
	static class ADoctorSurvivorCosmeticHelperActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADoctorSurvivorCosmeticHelperActor>();
	}
};
static_assert(alignof(ADoctorSurvivorCosmeticHelperActor) == 0x000008, "Wrong alignment on ADoctorSurvivorCosmeticHelperActor");
static_assert(sizeof(ADoctorSurvivorCosmeticHelperActor) == 0x000388, "Wrong size on ADoctorSurvivorCosmeticHelperActor");

// Class TheDoctor.IllusionaryDoctor
// 0x0010 (0x02F8 - 0x02E8)
class AIllusionaryDoctor final : public ABaseHusk
{
public:
	class UDBDOutlineComponent*                   _dbdOutline;                                       // 0x02E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateIllusion(const struct FTransform& Transform);
	void DeactivateIllusion();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IllusionaryDoctor">();
	}
	static class AIllusionaryDoctor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AIllusionaryDoctor>();
	}
};
static_assert(alignof(AIllusionaryDoctor) == 0x000008, "Wrong alignment on AIllusionaryDoctor");
static_assert(sizeof(AIllusionaryDoctor) == 0x0002F8, "Wrong size on AIllusionaryDoctor");
static_assert(offsetof(AIllusionaryDoctor, _dbdOutline) == 0x0002E8, "Member 'AIllusionaryDoctor::_dbdOutline' has a wrong offset!");

// Class TheDoctor.IllusionaryDoctorEffect
// 0x02A0 (0x0620 - 0x0380)
class UIllusionaryDoctorEffect final : public UStatusEffect
{
public:
	uint8                                         Pad_380[0x18];                                     // 0x0380(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AIllusionaryDoctor>         _illusionaryDoctorClass;                           // 0x0398(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AIllusionaryDoctor*                     _illusionaryDoctor;                                // 0x03A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0x38];                                     // 0x03A8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _madness2IllusionaryDoctorIntervalMinimum;         // 0x03E0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _madness2IllusionaryDoctorIntervalMaximum;         // 0x0408(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _madness3IllusionaryDoctorIntervalMinimum;         // 0x0430(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _madness3IllusionaryDoctorIntervalMaximum;         // 0x0458(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _illusionaryDoctorMaximumDistance;                 // 0x0480(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _illusionaryDoctorMinimumDistance;                 // 0x04A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _dotProductMinimumAcceptanceValue;                 // 0x04D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _illusionaryDoctorApparitionDuration;              // 0x04F8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	int32                                         _numberOfAttempsToFindIllusionaryDoctorTargetLocationPerTick; // 0x0578(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _illusionaryDoctorTransform;                       // 0x0580(0x0060)(Net, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5E0[0x40];                                     // 0x05E0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_DebugDisplayInfo(const float TimeRemainingBeforeActivation, const struct FColor& MessageColor);
	void OnRep_IllusionaryDoctorTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IllusionaryDoctorEffect">();
	}
	static class UIllusionaryDoctorEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIllusionaryDoctorEffect>();
	}
};
static_assert(alignof(UIllusionaryDoctorEffect) == 0x000010, "Wrong alignment on UIllusionaryDoctorEffect");
static_assert(sizeof(UIllusionaryDoctorEffect) == 0x000620, "Wrong size on UIllusionaryDoctorEffect");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctorClass) == 0x000398, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctorClass' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctor) == 0x0003A0, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctor' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _madness2IllusionaryDoctorIntervalMinimum) == 0x0003E0, "Member 'UIllusionaryDoctorEffect::_madness2IllusionaryDoctorIntervalMinimum' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _madness2IllusionaryDoctorIntervalMaximum) == 0x000408, "Member 'UIllusionaryDoctorEffect::_madness2IllusionaryDoctorIntervalMaximum' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _madness3IllusionaryDoctorIntervalMinimum) == 0x000430, "Member 'UIllusionaryDoctorEffect::_madness3IllusionaryDoctorIntervalMinimum' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _madness3IllusionaryDoctorIntervalMaximum) == 0x000458, "Member 'UIllusionaryDoctorEffect::_madness3IllusionaryDoctorIntervalMaximum' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctorMaximumDistance) == 0x000480, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctorMaximumDistance' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctorMinimumDistance) == 0x0004A8, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctorMinimumDistance' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _dotProductMinimumAcceptanceValue) == 0x0004D0, "Member 'UIllusionaryDoctorEffect::_dotProductMinimumAcceptanceValue' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctorApparitionDuration) == 0x0004F8, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctorApparitionDuration' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _numberOfAttempsToFindIllusionaryDoctorTargetLocationPerTick) == 0x000578, "Member 'UIllusionaryDoctorEffect::_numberOfAttempsToFindIllusionaryDoctorTargetLocationPerTick' has a wrong offset!");
static_assert(offsetof(UIllusionaryDoctorEffect, _illusionaryDoctorTransform) == 0x000580, "Member 'UIllusionaryDoctorEffect::_illusionaryDoctorTransform' has a wrong offset!");

// Class TheDoctor.IllusionaryDoctorOutlineStrategy
// 0x0000 (0x0148 - 0x0148)
class UIllusionaryDoctorOutlineStrategy final : public USourceBasedOutlineUpdateStrategy
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IllusionaryDoctorOutlineStrategy">();
	}
	static class UIllusionaryDoctorOutlineStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIllusionaryDoctorOutlineStrategy>();
	}
};
static_assert(alignof(UIllusionaryDoctorOutlineStrategy) == 0x000008, "Wrong alignment on UIllusionaryDoctorOutlineStrategy");
static_assert(sizeof(UIllusionaryDoctorOutlineStrategy) == 0x000148, "Wrong size on UIllusionaryDoctorOutlineStrategy");

// Class TheDoctor.IllusionaryPalletBaseAddon
// 0x0070 (0x0378 - 0x0308)
class UIllusionaryPalletBaseAddon final : public USimpleSpawnEffectsOnAllSurvivorsAddon
{
public:
	uint8                                         Pad_308[0x60];                                     // 0x0308(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _illusionaryPalletInterval;                        // 0x0368(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UIllusionaryPalletComponent> _palletComponentClass;                             // 0x0370(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_OnIllusionaryPalletActorOverlapped(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Multicast_ActivateIllusionaryPallet(class APallet* Pallet, bool IsPalletDown);
	void Multicast_DeactivateIllusionaryPallet(class APallet* Pallet, class ADBDPlayer* TriggeringPlayer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IllusionaryPalletBaseAddon">();
	}
	static class UIllusionaryPalletBaseAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIllusionaryPalletBaseAddon>();
	}
};
static_assert(alignof(UIllusionaryPalletBaseAddon) == 0x000008, "Wrong alignment on UIllusionaryPalletBaseAddon");
static_assert(sizeof(UIllusionaryPalletBaseAddon) == 0x000378, "Wrong size on UIllusionaryPalletBaseAddon");
static_assert(offsetof(UIllusionaryPalletBaseAddon, _illusionaryPalletInterval) == 0x000368, "Member 'UIllusionaryPalletBaseAddon::_illusionaryPalletInterval' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletBaseAddon, _palletComponentClass) == 0x000370, "Member 'UIllusionaryPalletBaseAddon::_palletComponentClass' has a wrong offset!");

// Class TheDoctor.IllusionaryPalletComponent
// 0x0188 (0x0230 - 0x00A8)
class UIllusionaryPalletComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _illusionaryPalletDownTransform;                   // 0x00B0(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBoxComponent*                          _illusionaryPalletTriggerZone;                     // 0x0110(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                _illusionaryPalletTriggerZoneBoxExtent;            // 0x0118(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                _illusionaryPalletTriggerZoneLocation;             // 0x0130(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _glitchEffectRange;                                // 0x0148(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   _illusionaryPalletStaticMeshComponent;             // 0x0150(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_158[0xD8];                                     // 0x0158(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateIllusionaryPallet(const bool IsPalletDown);
	void DeactivateIllusionaryPallet();
	void OnStartIllusionaryPalletActivation(const bool IsPalletDown);
	void OnStartIllusionaryPalletDeactivation(class ADBDPlayer* TriggeringPlayer);

	bool CanLocallyObservedPlayerSeeIllusionaryPallet() const;
	float GetGlitchEffectRange() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IllusionaryPalletComponent">();
	}
	static class UIllusionaryPalletComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIllusionaryPalletComponent>();
	}
};
static_assert(alignof(UIllusionaryPalletComponent) == 0x000010, "Wrong alignment on UIllusionaryPalletComponent");
static_assert(sizeof(UIllusionaryPalletComponent) == 0x000230, "Wrong size on UIllusionaryPalletComponent");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletDownTransform) == 0x0000B0, "Member 'UIllusionaryPalletComponent::_illusionaryPalletDownTransform' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletTriggerZone) == 0x000110, "Member 'UIllusionaryPalletComponent::_illusionaryPalletTriggerZone' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletTriggerZoneBoxExtent) == 0x000118, "Member 'UIllusionaryPalletComponent::_illusionaryPalletTriggerZoneBoxExtent' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletTriggerZoneLocation) == 0x000130, "Member 'UIllusionaryPalletComponent::_illusionaryPalletTriggerZoneLocation' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _glitchEffectRange) == 0x000148, "Member 'UIllusionaryPalletComponent::_glitchEffectRange' has a wrong offset!");
static_assert(offsetof(UIllusionaryPalletComponent, _illusionaryPalletStaticMeshComponent) == 0x000150, "Member 'UIllusionaryPalletComponent::_illusionaryPalletStaticMeshComponent' has a wrong offset!");

// Class TheDoctor.IridescentQueenEffect
// 0x0050 (0x03D0 - 0x0380)
class UIridescentQueenEffect final : public UStatusEffect
{
public:
	class UCapsuleComponent*                      _authority_iridescentQueenDischargeDetectionZone;  // 0x0380(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _dischargeDetectionZoneHalfHeight;                 // 0x0388(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _dischargeDetectionZoneRadius;                     // 0x038C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _madnessToAddOnDischarge;                          // 0x0390(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _chargeActive;                                     // 0x03C0(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _charged;                                          // 0x03C1(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C2[0xE];                                      // 0x03C2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnSurvivorOverlappedDischargeZone(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Cosmetic_OnDischargeOnSurvivor(class ADBDPlayer* SurvivorToShock);
	void Cosmetic_OnDischargeZoneActivated();
	void Cosmetic_OnDischargeZoneDeactivated();
	void Cosmetic_SpawnStaticFieldFX();
	void Cosmetic_UpdateStaticFieldFX();
	void Multicast_DischargeOnSurvivor(class ACamperPlayer* Survivor);
	void OnRep_ChargeActive();

	EStaticFieldMovementSpeed GetStaticFieldMovementSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IridescentQueenEffect">();
	}
	static class UIridescentQueenEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIridescentQueenEffect>();
	}
};
static_assert(alignof(UIridescentQueenEffect) == 0x000008, "Wrong alignment on UIridescentQueenEffect");
static_assert(sizeof(UIridescentQueenEffect) == 0x0003D0, "Wrong size on UIridescentQueenEffect");
static_assert(offsetof(UIridescentQueenEffect, _authority_iridescentQueenDischargeDetectionZone) == 0x000380, "Member 'UIridescentQueenEffect::_authority_iridescentQueenDischargeDetectionZone' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _dischargeDetectionZoneHalfHeight) == 0x000388, "Member 'UIridescentQueenEffect::_dischargeDetectionZoneHalfHeight' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _dischargeDetectionZoneRadius) == 0x00038C, "Member 'UIridescentQueenEffect::_dischargeDetectionZoneRadius' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _madnessToAddOnDischarge) == 0x000390, "Member 'UIridescentQueenEffect::_madnessToAddOnDischarge' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _chargeActive) == 0x0003C0, "Member 'UIridescentQueenEffect::_chargeActive' has a wrong offset!");
static_assert(offsetof(UIridescentQueenEffect, _charged) == 0x0003C1, "Member 'UIridescentQueenEffect::_charged' has a wrong offset!");

// Class TheDoctor.MadnessSurvivorSubAnimInstance
// 0x0020 (0x0600 - 0x05E0)
class UMadnessSurvivorSubAnimInstance final : public UBaseSurvivorAnimInstance
{
public:
	uint8                                         Pad_5E0[0x8];                                      // 0x05E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isTotallyInsane;                                  // 0x05E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInjured;                                        // 0x05E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrawling;                                       // 0x05EA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isIdle;                                           // 0x05EB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrouched;                                       // 0x05EC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5ED[0x3];                                      // 0x05ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _walkAnimSpeed;                                    // 0x05F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCarried;                                        // 0x05F4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInAir;                                          // 0x05F5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isDead;                                           // 0x05F6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F7[0x9];                                      // 0x05F7(0x0009)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MadnessSurvivorSubAnimInstance">();
	}
	static class UMadnessSurvivorSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMadnessSurvivorSubAnimInstance>();
	}
};
static_assert(alignof(UMadnessSurvivorSubAnimInstance) == 0x000010, "Wrong alignment on UMadnessSurvivorSubAnimInstance");
static_assert(sizeof(UMadnessSurvivorSubAnimInstance) == 0x000600, "Wrong size on UMadnessSurvivorSubAnimInstance");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isTotallyInsane) == 0x0005E8, "Member 'UMadnessSurvivorSubAnimInstance::_isTotallyInsane' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isInjured) == 0x0005E9, "Member 'UMadnessSurvivorSubAnimInstance::_isInjured' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isCrawling) == 0x0005EA, "Member 'UMadnessSurvivorSubAnimInstance::_isCrawling' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isIdle) == 0x0005EB, "Member 'UMadnessSurvivorSubAnimInstance::_isIdle' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isCrouched) == 0x0005EC, "Member 'UMadnessSurvivorSubAnimInstance::_isCrouched' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _walkAnimSpeed) == 0x0005F0, "Member 'UMadnessSurvivorSubAnimInstance::_walkAnimSpeed' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isCarried) == 0x0005F4, "Member 'UMadnessSurvivorSubAnimInstance::_isCarried' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isInAir) == 0x0005F5, "Member 'UMadnessSurvivorSubAnimInstance::_isInAir' has a wrong offset!");
static_assert(offsetof(UMadnessSurvivorSubAnimInstance, _isDead) == 0x0005F6, "Member 'UMadnessSurvivorSubAnimInstance::_isDead' has a wrong offset!");

// Class TheDoctor.Overcharge
// 0x00E0 (0x0500 - 0x0420)
class UOvercharge final : public UPerk
{
public:
	float                                         _skillCheckFailurePenalty[0x3];                    // 0x0420(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _regressionRateMultiplierCurve;                    // 0x0430(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class AGenerator*, struct FFastTimer>    _overchargedGeneratorTimers;                       // 0x0438(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_488[0x28];                                     // 0x0488(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AGenerator*, uint64>               _gameplayModifierHandles;                          // 0x04B0(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	const class UCurveFloat* GetRegressionRateMultiplierCurve() const;
	float GetSkillCheckFailurePenaltyAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Overcharge">();
	}
	static class UOvercharge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOvercharge>();
	}
};
static_assert(alignof(UOvercharge) == 0x000008, "Wrong alignment on UOvercharge");
static_assert(sizeof(UOvercharge) == 0x000500, "Wrong size on UOvercharge");
static_assert(offsetof(UOvercharge, _skillCheckFailurePenalty) == 0x000420, "Member 'UOvercharge::_skillCheckFailurePenalty' has a wrong offset!");
static_assert(offsetof(UOvercharge, _regressionRateMultiplierCurve) == 0x000430, "Member 'UOvercharge::_regressionRateMultiplierCurve' has a wrong offset!");
static_assert(offsetof(UOvercharge, _overchargedGeneratorTimers) == 0x000438, "Member 'UOvercharge::_overchargedGeneratorTimers' has a wrong offset!");
static_assert(offsetof(UOvercharge, _gameplayModifierHandles) == 0x0004B0, "Member 'UOvercharge::_gameplayModifierHandles' has a wrong offset!");

// Class TheDoctor.RestraintRevealToKillerEffect
// 0x0000 (0x03B0 - 0x03B0)
class URestraintRevealToKillerEffect final : public UActivateOnEventTimedStatusEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RestraintRevealToKillerEffect">();
	}
	static class URestraintRevealToKillerEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<URestraintRevealToKillerEffect>();
	}
};
static_assert(alignof(URestraintRevealToKillerEffect) == 0x000008, "Wrong alignment on URestraintRevealToKillerEffect");
static_assert(sizeof(URestraintRevealToKillerEffect) == 0x0003B0, "Wrong size on URestraintRevealToKillerEffect");

// Class TheDoctor.ShockTherapy
// 0x01B0 (0x0A70 - 0x08C0)
class UShockTherapy final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_8C0[0x40];                                     // 0x08C0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AShockTherapyAOE>           _shockTherapyConeAOEClass;                         // 0x0900(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AShockTherapyAOE>           _shockTherapyLineAOEClass;                         // 0x0908(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AShockTherapyAOE>           _shockTherapyCircleAOEClass;                       // 0x0910(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class AShockTherapyAOE*>               _shockTherapyZones;                                // 0x0918(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_928[0x30];                                     // 0x0928(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _shockTherapyDetonationDelay;                      // 0x0958(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _shockTherapyBlockActionDuration;                  // 0x09D8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _shockTherapySecondsToCharge;                      // 0x0A00(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _shockTherapyBlockAllInteractionsEffectClass;      // 0x0A28(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A30[0x10];                                     // 0x0A30(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _shockTherapyMadnessGain;                          // 0x0A40(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A68[0x8];                                      // 0x0A68(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnShockTherapyChargeEnd(class ADBDPlayer* Player, bool Charged);
	void Multicast_ActivateShockTherapyAOE(const struct FTransform& ShockTherapyZoneTransform);
	void Multicast_DetonateShockTherapy(const TArray<class ACamperPlayer*>& ShockedSurvivors, float MadnessToAdd);
	void OnLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockTherapy">();
	}
	static class UShockTherapy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShockTherapy>();
	}
};
static_assert(alignof(UShockTherapy) == 0x000010, "Wrong alignment on UShockTherapy");
static_assert(sizeof(UShockTherapy) == 0x000A70, "Wrong size on UShockTherapy");
static_assert(offsetof(UShockTherapy, _shockTherapyConeAOEClass) == 0x000900, "Member 'UShockTherapy::_shockTherapyConeAOEClass' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyLineAOEClass) == 0x000908, "Member 'UShockTherapy::_shockTherapyLineAOEClass' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyCircleAOEClass) == 0x000910, "Member 'UShockTherapy::_shockTherapyCircleAOEClass' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyZones) == 0x000918, "Member 'UShockTherapy::_shockTherapyZones' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyDetonationDelay) == 0x000958, "Member 'UShockTherapy::_shockTherapyDetonationDelay' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyBlockActionDuration) == 0x0009D8, "Member 'UShockTherapy::_shockTherapyBlockActionDuration' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapySecondsToCharge) == 0x000A00, "Member 'UShockTherapy::_shockTherapySecondsToCharge' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyBlockAllInteractionsEffectClass) == 0x000A28, "Member 'UShockTherapy::_shockTherapyBlockAllInteractionsEffectClass' has a wrong offset!");
static_assert(offsetof(UShockTherapy, _shockTherapyMadnessGain) == 0x000A40, "Member 'UShockTherapy::_shockTherapyMadnessGain' has a wrong offset!");

// Class TheDoctor.ShockTherapyAOE
// 0x0120 (0x03C0 - 0x02A0)
class AShockTherapyAOE final : public AActor
{
public:
	class UStaticMeshComponent*                   _attackZone;                                       // 0x02A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USceneComponent*                        _rootComponent;                                    // 0x02A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTunableStat                           _shockTherapyRange;                                // 0x02B0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _killerOffset;                                     // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _baseZoneSize;                                     // 0x0334(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AShockTherapyAOEPreview>    _shockTherapyPreviewClass;                         // 0x0338(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AShockTherapyAOEPreview*                _shockTherapyPreview;                              // 0x0340(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             _previewTransform;                                 // 0x0350(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3B0[0x10];                                     // 0x03B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_ActivateShockTherapyAOE();
	void OnScaleInitialized();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockTherapyAOE">();
	}
	static class AShockTherapyAOE* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShockTherapyAOE>();
	}
};
static_assert(alignof(AShockTherapyAOE) == 0x000010, "Wrong alignment on AShockTherapyAOE");
static_assert(sizeof(AShockTherapyAOE) == 0x0003C0, "Wrong size on AShockTherapyAOE");
static_assert(offsetof(AShockTherapyAOE, _attackZone) == 0x0002A0, "Member 'AShockTherapyAOE::_attackZone' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _rootComponent) == 0x0002A8, "Member 'AShockTherapyAOE::_rootComponent' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _shockTherapyRange) == 0x0002B0, "Member 'AShockTherapyAOE::_shockTherapyRange' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _killerOffset) == 0x000330, "Member 'AShockTherapyAOE::_killerOffset' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _baseZoneSize) == 0x000334, "Member 'AShockTherapyAOE::_baseZoneSize' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _shockTherapyPreviewClass) == 0x000338, "Member 'AShockTherapyAOE::_shockTherapyPreviewClass' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _shockTherapyPreview) == 0x000340, "Member 'AShockTherapyAOE::_shockTherapyPreview' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOE, _previewTransform) == 0x000350, "Member 'AShockTherapyAOE::_previewTransform' has a wrong offset!");

// Class TheDoctor.ShockTherapyAOEPreview
// 0x00A0 (0x0340 - 0x02A0)
class AShockTherapyAOEPreview final : public AActor
{
public:
	struct FVector                                _baseWorldScale;                                   // 0x02A0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _shockTherapyRange;                                // 0x02B8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAttackZonePreviewScale(const struct FVector& Scale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShockTherapyAOEPreview">();
	}
	static class AShockTherapyAOEPreview* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShockTherapyAOEPreview>();
	}
};
static_assert(alignof(AShockTherapyAOEPreview) == 0x000008, "Wrong alignment on AShockTherapyAOEPreview");
static_assert(sizeof(AShockTherapyAOEPreview) == 0x000340, "Wrong size on AShockTherapyAOEPreview");
static_assert(offsetof(AShockTherapyAOEPreview, _baseWorldScale) == 0x0002A0, "Member 'AShockTherapyAOEPreview::_baseWorldScale' has a wrong offset!");
static_assert(offsetof(AShockTherapyAOEPreview, _shockTherapyRange) == 0x0002B8, "Member 'AShockTherapyAOEPreview::_shockTherapyRange' has a wrong offset!");

// Class TheDoctor.SnapOutOfIt
// 0x0090 (0x0950 - 0x08C0)
class USnapOutOfIt : public UChargeableInteractionDefinition
{
public:
	struct FDBDTunableRowHandle                   _postSnapOutOfItMadnessTier;                       // 0x08C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _snapOutOfItSkillCheckFailTimePenalty;             // 0x08E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_910[0x30];                                     // 0x0910(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isSkillCheckFailureTimerActive;                   // 0x0940(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_941[0xF];                                      // 0x0941(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnSkillCheckResponseAuthority(bool Success, bool Bonus, class ADBDPlayer* Player, bool TriggerLoudNoise, ESkillCheckCustomType Type);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapOutOfIt">();
	}
	static class USnapOutOfIt* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapOutOfIt>();
	}
};
static_assert(alignof(USnapOutOfIt) == 0x000010, "Wrong alignment on USnapOutOfIt");
static_assert(sizeof(USnapOutOfIt) == 0x000950, "Wrong size on USnapOutOfIt");
static_assert(offsetof(USnapOutOfIt, _postSnapOutOfItMadnessTier) == 0x0008C0, "Member 'USnapOutOfIt::_postSnapOutOfItMadnessTier' has a wrong offset!");
static_assert(offsetof(USnapOutOfIt, _snapOutOfItSkillCheckFailTimePenalty) == 0x0008E8, "Member 'USnapOutOfIt::_snapOutOfItSkillCheckFailTimePenalty' has a wrong offset!");
static_assert(offsetof(USnapOutOfIt, _isSkillCheckFailureTimerActive) == 0x000940, "Member 'USnapOutOfIt::_isSkillCheckFailureTimerActive' has a wrong offset!");

// Class TheDoctor.StaticBlast
// 0x0110 (0x09D0 - 0x08C0)
class UStaticBlast final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_8C0[0x98];                                     // 0x08C0(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _staticBlastActivationDelay;                       // 0x0958(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_95C[0x4];                                      // 0x095C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _staticBlastMadnessGain;                           // 0x0960(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _staticBlastSecondsToCharge;                       // 0x0988(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9B0[0x20];                                     // 0x09B0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnStaticBlastChargeEnd(class ADBDPlayer* Player, bool Charged);
	void Multicast_StaticBlastShockSurvivors(const TArray<class ACamperPlayer*>& SurvivorsToShock);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StaticBlast">();
	}
	static class UStaticBlast* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStaticBlast>();
	}
};
static_assert(alignof(UStaticBlast) == 0x000010, "Wrong alignment on UStaticBlast");
static_assert(sizeof(UStaticBlast) == 0x0009D0, "Wrong size on UStaticBlast");
static_assert(offsetof(UStaticBlast, _staticBlastActivationDelay) == 0x000958, "Member 'UStaticBlast::_staticBlastActivationDelay' has a wrong offset!");
static_assert(offsetof(UStaticBlast, _staticBlastMadnessGain) == 0x000960, "Member 'UStaticBlast::_staticBlastMadnessGain' has a wrong offset!");
static_assert(offsetof(UStaticBlast, _staticBlastSecondsToCharge) == 0x000988, "Member 'UStaticBlast::_staticBlastSecondsToCharge' has a wrong offset!");

// Class TheDoctor.SurvivorCartersSparkComponent
// 0x0018 (0x00C0 - 0x00A8)
class USurvivorCartersSparkComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorCartersSparkComponent">();
	}
	static class USurvivorCartersSparkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorCartersSparkComponent>();
	}
};
static_assert(alignof(USurvivorCartersSparkComponent) == 0x000008, "Wrong alignment on USurvivorCartersSparkComponent");
static_assert(sizeof(USurvivorCartersSparkComponent) == 0x0000C0, "Wrong size on USurvivorCartersSparkComponent");

// Class TheDoctor.SurvivorMadnessEffect
// 0x0150 (0x04D0 - 0x0380)
class USurvivorMadnessEffect final : public UStatusEffect
{
public:
	uint8                                         Pad_380[0x20];                                     // 0x0380(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _madnessAmount;                                    // 0x03A0(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A4[0x4];                                      // 0x03A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxMadnessTier;                                   // 0x03A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FDBDTunableRowHandle>           _madnessThresholds;                                // 0x03D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TArray<struct FDBDTunableRowHandle>           _insaneSkillCheckChances;                          // 0x03E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _screamDelayMin;                                   // 0x03F0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _screamDelayMax;                                   // 0x0418(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class FName                                   MadnessStatusViewId;                               // 0x0440(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_44C[0x4C];                                     // 0x044C(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _survivorOperatingLockerSemanticTags;              // 0x0498(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B8[0x18];                                     // 0x04B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_AddMadness(float AmountToAdd);
	void Multicast_MadnessIntermittentScream();
	void Multicast_OnMadnessTierChanged(const int32 NewMadnessTier, const int32 OldMadnessTier);
	void OnRep_MadnessAmount();

	int32 GetMadnessTier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorMadnessEffect">();
	}
	static class USurvivorMadnessEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorMadnessEffect>();
	}
};
static_assert(alignof(USurvivorMadnessEffect) == 0x000008, "Wrong alignment on USurvivorMadnessEffect");
static_assert(sizeof(USurvivorMadnessEffect) == 0x0004D0, "Wrong size on USurvivorMadnessEffect");
static_assert(offsetof(USurvivorMadnessEffect, _madnessAmount) == 0x0003A0, "Member 'USurvivorMadnessEffect::_madnessAmount' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _maxMadnessTier) == 0x0003A8, "Member 'USurvivorMadnessEffect::_maxMadnessTier' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _madnessThresholds) == 0x0003D0, "Member 'USurvivorMadnessEffect::_madnessThresholds' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _insaneSkillCheckChances) == 0x0003E0, "Member 'USurvivorMadnessEffect::_insaneSkillCheckChances' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _screamDelayMin) == 0x0003F0, "Member 'USurvivorMadnessEffect::_screamDelayMin' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _screamDelayMax) == 0x000418, "Member 'USurvivorMadnessEffect::_screamDelayMax' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, MadnessStatusViewId) == 0x000440, "Member 'USurvivorMadnessEffect::MadnessStatusViewId' has a wrong offset!");
static_assert(offsetof(USurvivorMadnessEffect, _survivorOperatingLockerSemanticTags) == 0x000498, "Member 'USurvivorMadnessEffect::_survivorOperatingLockerSemanticTags' has a wrong offset!");

// Class TheDoctor.TheDoctorUtilities
// 0x0000 (0x0030 - 0x0030)
class UTheDoctorUtilities final : public UBlueprintFunctionLibrary
{
public:
	static bool CanGainInsanity(const class ADBDPlayer* Player);
	static int32 GetMadnessTier(const class ADBDPlayer* Player);
	static class USurvivorMadnessEffect* GetSurvivorMadnessEffect(const class ADBDPlayer* Player);
	static bool IsTotallyInsane(const class ADBDPlayer* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TheDoctorUtilities">();
	}
	static class UTheDoctorUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTheDoctorUtilities>();
	}
};
static_assert(alignof(UTheDoctorUtilities) == 0x000008, "Wrong alignment on UTheDoctorUtilities");
static_assert(sizeof(UTheDoctorUtilities) == 0x000030, "Wrong size on UTheDoctorUtilities");

}

