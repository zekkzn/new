#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheNightmare

#include "Basic.hpp"

#include "DeadByDaylight_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "Engine_classes.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDAnimation_classes.hpp"


namespace SDK
{

// Class TheNightmare.NightmareCheatComponent
// 0x0008 (0x00B0 - 0x00A8)
class UNightmareCheatComponent final : public UActorComponent
{
public:
	bool                                          _allowWakeUpAnyClock;                              // 0x00A8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DBD_AllowWakeUpAtAnyClock(bool Allow);
	void OnRep_AllowWakeUpAnyClock();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NightmareCheatComponent">();
	}
	static class UNightmareCheatComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNightmareCheatComponent>();
	}
};
static_assert(alignof(UNightmareCheatComponent) == 0x000008, "Wrong alignment on UNightmareCheatComponent");
static_assert(sizeof(UNightmareCheatComponent) == 0x0000B0, "Wrong size on UNightmareCheatComponent");
static_assert(offsetof(UNightmareCheatComponent, _allowWakeUpAnyClock) == 0x0000A8, "Member 'UNightmareCheatComponent::_allowWakeUpAnyClock' has a wrong offset!");

// Class TheNightmare.Addon_DreamInducer_BaseKillerInstinctAfterTeleport
// 0x0010 (0x02F8 - 0x02E8)
class UAddon_DreamInducer_BaseKillerInstinctAfterTeleport final : public UItemAddon
{
public:
	float                                         _killerInstinctDuration;                           // 0x02E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _survivorDistanceFromGeneratorTriggerRange;        // 0x02EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UStatusEffect>              _killerInstinctStatusClass;                        // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_DreamInducer_BaseKillerInstinctAfterTeleport">();
	}
	static class UAddon_DreamInducer_BaseKillerInstinctAfterTeleport* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_DreamInducer_BaseKillerInstinctAfterTeleport>();
	}
};
static_assert(alignof(UAddon_DreamInducer_BaseKillerInstinctAfterTeleport) == 0x000008, "Wrong alignment on UAddon_DreamInducer_BaseKillerInstinctAfterTeleport");
static_assert(sizeof(UAddon_DreamInducer_BaseKillerInstinctAfterTeleport) == 0x0002F8, "Wrong size on UAddon_DreamInducer_BaseKillerInstinctAfterTeleport");
static_assert(offsetof(UAddon_DreamInducer_BaseKillerInstinctAfterTeleport, _killerInstinctDuration) == 0x0002E8, "Member 'UAddon_DreamInducer_BaseKillerInstinctAfterTeleport::_killerInstinctDuration' has a wrong offset!");
static_assert(offsetof(UAddon_DreamInducer_BaseKillerInstinctAfterTeleport, _survivorDistanceFromGeneratorTriggerRange) == 0x0002EC, "Member 'UAddon_DreamInducer_BaseKillerInstinctAfterTeleport::_survivorDistanceFromGeneratorTriggerRange' has a wrong offset!");
static_assert(offsetof(UAddon_DreamInducer_BaseKillerInstinctAfterTeleport, _killerInstinctStatusClass) == 0x0002F0, "Member 'UAddon_DreamInducer_BaseKillerInstinctAfterTeleport::_killerInstinctStatusClass' has a wrong offset!");

// Class TheNightmare.BlackBox
// 0x0040 (0x0328 - 0x02E8)
class UBlackBox final : public UItemAddon
{
public:
	struct FDBDTunableRowHandle                   _blockDuration;                                    // 0x02E8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UStatusEffect>              _dreamworldSingleGateBlockerStatusEffectClass;     // 0x0310(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_318[0x10];                                     // 0x0318(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlackBox">();
	}
	static class UBlackBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlackBox>();
	}
};
static_assert(alignof(UBlackBox) == 0x000008, "Wrong alignment on UBlackBox");
static_assert(sizeof(UBlackBox) == 0x000328, "Wrong size on UBlackBox");
static_assert(offsetof(UBlackBox, _blockDuration) == 0x0002E8, "Member 'UBlackBox::_blockDuration' has a wrong offset!");
static_assert(offsetof(UBlackBox, _dreamworldSingleGateBlockerStatusEffectClass) == 0x000310, "Member 'UBlackBox::_dreamworldSingleGateBlockerStatusEffectClass' has a wrong offset!");

// Class TheNightmare.BloodWarden
// 0x0070 (0x0490 - 0x0420)
class UBloodWarden final : public UPerk
{
public:
	uint8                                         Pad_420[0x50];                                     // 0x0420(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _bloodWardenBlockerStatusEffectClass;              // 0x0470(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _revealPlayerStatusEffectClass;                    // 0x0478(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _perkLevelSpikeDurations[0x3];                     // 0x0480(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetPerkLevelSpikeDurationsAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BloodWarden">();
	}
	static class UBloodWarden* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBloodWarden>();
	}
};
static_assert(alignof(UBloodWarden) == 0x000008, "Wrong alignment on UBloodWarden");
static_assert(sizeof(UBloodWarden) == 0x000490, "Wrong size on UBloodWarden");
static_assert(offsetof(UBloodWarden, _bloodWardenBlockerStatusEffectClass) == 0x000470, "Member 'UBloodWarden::_bloodWardenBlockerStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UBloodWarden, _revealPlayerStatusEffectClass) == 0x000478, "Member 'UBloodWarden::_revealPlayerStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UBloodWarden, _perkLevelSpikeDurations) == 0x000480, "Member 'UBloodWarden::_perkLevelSpikeDurations' has a wrong offset!");

// Class TheNightmare.DreamInducerComponent
// 0x0008 (0x00B0 - 0x00A8)
class UDreamInducerComponent final : public UActorComponent
{
public:
	TSubclassOf<class UActorComponent>            _generatorDreamworldClass;                         // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_OnLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DreamInducerComponent">();
	}
	static class UDreamInducerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDreamInducerComponent>();
	}
};
static_assert(alignof(UDreamInducerComponent) == 0x000008, "Wrong alignment on UDreamInducerComponent");
static_assert(sizeof(UDreamInducerComponent) == 0x0000B0, "Wrong size on UDreamInducerComponent");
static_assert(offsetof(UDreamInducerComponent, _generatorDreamworldClass) == 0x0000A8, "Member 'UDreamInducerComponent::_generatorDreamworldClass' has a wrong offset!");

// Class TheNightmare.GeneratorDreamworldComponent
// 0x0018 (0x00C0 - 0x00A8)
class UGeneratorDreamworldComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           _beamSocketsForBloodEffect;                        // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void Cosmetic_OnPlayerFailSkillCheck(class ADBDPlayer* Player);
	void OnRepairSkillCheckFailed(bool Success, bool Bonus, class ADBDPlayer* Player, bool TriggerLoudNoise, bool HadInput, ESkillCheckCustomType Type, float ChargeChange);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeneratorDreamworldComponent">();
	}
	static class UGeneratorDreamworldComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneratorDreamworldComponent>();
	}
};
static_assert(alignof(UGeneratorDreamworldComponent) == 0x000008, "Wrong alignment on UGeneratorDreamworldComponent");
static_assert(sizeof(UGeneratorDreamworldComponent) == 0x0000C0, "Wrong size on UGeneratorDreamworldComponent");
static_assert(offsetof(UGeneratorDreamworldComponent, _beamSocketsForBloodEffect) == 0x0000B0, "Member 'UGeneratorDreamworldComponent::_beamSocketsForBloodEffect' has a wrong offset!");

// Class TheNightmare.DreamSnare
// 0x0008 (0x02A8 - 0x02A0)
class ADreamSnare final : public AActor
{
public:
	bool                                          _isActive;                                         // 0x02A0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A1[0x7];                                      // 0x02A1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DreamSnare">();
	}
	static class ADreamSnare* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADreamSnare>();
	}
};
static_assert(alignof(ADreamSnare) == 0x000008, "Wrong alignment on ADreamSnare");
static_assert(sizeof(ADreamSnare) == 0x0002A8, "Wrong size on ADreamSnare");
static_assert(offsetof(ADreamSnare, _isActive) == 0x0002A0, "Member 'ADreamSnare::_isActive' has a wrong offset!");

// Class TheNightmare.DreamSnareEffect
// 0x0000 (0x0380 - 0x0380)
class UDreamSnareEffect final : public UStatusEffect
{
public:
	void OnActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnActorEndOverlap(class AActor* OverlappedActor, class AActor* OtherActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DreamSnareEffect">();
	}
	static class UDreamSnareEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDreamSnareEffect>();
	}
};
static_assert(alignof(UDreamSnareEffect) == 0x000008, "Wrong alignment on UDreamSnareEffect");
static_assert(sizeof(UDreamSnareEffect) == 0x000380, "Wrong size on UDreamSnareEffect");

// Class TheNightmare.FireUp
// 0x0028 (0x0448 - 0x0420)
class UFireUp final : public UPerk
{
public:
	uint8                                         Pad_420[0x10];                                     // 0x0420(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _speedBonuses[0x3];                                // 0x0430(0x0004)(Edit, EditFixedSize, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_43C[0xC];                                      // 0x043C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetSpeedBonusAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FireUp">();
	}
	static class UFireUp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFireUp>();
	}
};
static_assert(alignof(UFireUp) == 0x000008, "Wrong alignment on UFireUp");
static_assert(sizeof(UFireUp) == 0x000448, "Wrong size on UFireUp");
static_assert(offsetof(UFireUp, _speedBonuses) == 0x000430, "Member 'UFireUp::_speedBonuses' has a wrong offset!");

// Class TheNightmare.GeneratorTeleportInteraction
// 0x0100 (0x09C0 - 0x08C0)
class UGeneratorTeleportInteraction final : public UChargeableInteractionDefinition
{
public:
	float                                         OnBloodSpurtsAINoiseEventRange;                    // 0x08C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C4[0x4];                                      // 0x08C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _teleportCooldownTimer;                            // 0x08C8(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8D0[0x40];                                     // 0x08D0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class AGenerator*                             _selectedGenerator;                                // 0x0910(0x0008)(BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AGenerator*                             _locallySelectedGenerator;                         // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTransform                             _selectedTeleportLocation;                         // 0x0920(0x0060)(BlueprintVisible, Net, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isInteractionOngoing;                             // 0x0980(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _teleportFailed;                                   // 0x0981(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _noTeleportableGenerators;                         // 0x0982(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_983[0x1];                                      // 0x0983(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _bloodSpurtInterval;                               // 0x0984(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _collisionCheckCapsuleHalfHeight;                  // 0x0988(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _collisionCheckCapsuleRadius;                      // 0x098C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                _collisionCheckLocationOffset;                     // 0x0990(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _capsuleTraceAngleIncrement;                       // 0x09A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _generatorTeleportMaxAngle;                        // 0x09AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _downRaycastLength;                                // 0x09B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9B4[0xC];                                      // 0x09B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_StartTeleportCooldown(bool Teleported);
	bool Authority_TeleportPlayerToGenerator(class ADBDPlayer* PlayerToTeleport, class AGenerator* Generator);
	void InitializeTunableValues(class ASlasherPlayer* Killer);
	void Multicast_OnTeleportLocationChosen(class AGenerator* Generator, const struct FTransform& Location);
	void Multicast_TeleportPlayer(const struct FVector& Location, const struct FRotator& Rotation);
	void OnBloodSpurts();
	void OnIntroCompleted();
	void OnLocallySelectedGeneratorSet(class AGenerator* SelectedGenerator);
	void OnRep_SelectedGenerator();
	void OnRep_TeleportCooldownTimer();
	void OnSelectedGeneratorSet(class AGenerator* SelectedGenerator);
	void OnTeleported(const struct FTransform& TransformBeforeTeleport);
	void OnTeleportLocationChosen(class AGenerator* Generator, const struct FTransform& Location);
	void OnTeleportReady();
	void Server_SetSelectedGenerator(class AGenerator* Generator);
	void ShowBloodSpurtsVFX();
	void StartBloodSpurts();
	void StopBloodSpurts();

	bool CanTeleportAtGenerator(class AGenerator* Generator) const;
	class AGenerator* GetInlineGenerator(const class ADBDPlayer* Player) const;
	class ADBDPlayer* GetOwningPlayer() const;
	bool HasTeleportFailed() const;
	bool IsTeleportAvailable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GeneratorTeleportInteraction">();
	}
	static class UGeneratorTeleportInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGeneratorTeleportInteraction>();
	}
};
static_assert(alignof(UGeneratorTeleportInteraction) == 0x000010, "Wrong alignment on UGeneratorTeleportInteraction");
static_assert(sizeof(UGeneratorTeleportInteraction) == 0x0009C0, "Wrong size on UGeneratorTeleportInteraction");
static_assert(offsetof(UGeneratorTeleportInteraction, OnBloodSpurtsAINoiseEventRange) == 0x0008C0, "Member 'UGeneratorTeleportInteraction::OnBloodSpurtsAINoiseEventRange' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _teleportCooldownTimer) == 0x0008C8, "Member 'UGeneratorTeleportInteraction::_teleportCooldownTimer' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _selectedGenerator) == 0x000910, "Member 'UGeneratorTeleportInteraction::_selectedGenerator' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _locallySelectedGenerator) == 0x000918, "Member 'UGeneratorTeleportInteraction::_locallySelectedGenerator' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _selectedTeleportLocation) == 0x000920, "Member 'UGeneratorTeleportInteraction::_selectedTeleportLocation' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _isInteractionOngoing) == 0x000980, "Member 'UGeneratorTeleportInteraction::_isInteractionOngoing' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _teleportFailed) == 0x000981, "Member 'UGeneratorTeleportInteraction::_teleportFailed' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _noTeleportableGenerators) == 0x000982, "Member 'UGeneratorTeleportInteraction::_noTeleportableGenerators' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _bloodSpurtInterval) == 0x000984, "Member 'UGeneratorTeleportInteraction::_bloodSpurtInterval' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _collisionCheckCapsuleHalfHeight) == 0x000988, "Member 'UGeneratorTeleportInteraction::_collisionCheckCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _collisionCheckCapsuleRadius) == 0x00098C, "Member 'UGeneratorTeleportInteraction::_collisionCheckCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _collisionCheckLocationOffset) == 0x000990, "Member 'UGeneratorTeleportInteraction::_collisionCheckLocationOffset' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _capsuleTraceAngleIncrement) == 0x0009A8, "Member 'UGeneratorTeleportInteraction::_capsuleTraceAngleIncrement' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _generatorTeleportMaxAngle) == 0x0009AC, "Member 'UGeneratorTeleportInteraction::_generatorTeleportMaxAngle' has a wrong offset!");
static_assert(offsetof(UGeneratorTeleportInteraction, _downRaycastLength) == 0x0009B0, "Member 'UGeneratorTeleportInteraction::_downRaycastLength' has a wrong offset!");

// Class TheNightmare.InDreamSurvivorSubAnimInstance
// 0x0030 (0x0610 - 0x05E0)
class UInDreamSurvivorSubAnimInstance final : public UBaseSurvivorAnimInstance
{
public:
	uint8                                         Pad_5E0[0x8];                                      // 0x05E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _shouldLookSleepy;                                 // 0x05E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrawling;                                       // 0x05E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingCarried;                                   // 0x05EA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isDead;                                           // 0x05EB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isHooked;                                         // 0x05EC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrouched;                                       // 0x05ED(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isIdle;                                           // 0x05EE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5EF[0x1];                                      // 0x05EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _walkAnimSpeed;                                    // 0x05F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F4[0x1C];                                     // 0x05F4(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InDreamSurvivorSubAnimInstance">();
	}
	static class UInDreamSurvivorSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInDreamSurvivorSubAnimInstance>();
	}
};
static_assert(alignof(UInDreamSurvivorSubAnimInstance) == 0x000010, "Wrong alignment on UInDreamSurvivorSubAnimInstance");
static_assert(sizeof(UInDreamSurvivorSubAnimInstance) == 0x000610, "Wrong size on UInDreamSurvivorSubAnimInstance");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _shouldLookSleepy) == 0x0005E8, "Member 'UInDreamSurvivorSubAnimInstance::_shouldLookSleepy' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isCrawling) == 0x0005E9, "Member 'UInDreamSurvivorSubAnimInstance::_isCrawling' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isBeingCarried) == 0x0005EA, "Member 'UInDreamSurvivorSubAnimInstance::_isBeingCarried' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isDead) == 0x0005EB, "Member 'UInDreamSurvivorSubAnimInstance::_isDead' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isHooked) == 0x0005EC, "Member 'UInDreamSurvivorSubAnimInstance::_isHooked' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isCrouched) == 0x0005ED, "Member 'UInDreamSurvivorSubAnimInstance::_isCrouched' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _isIdle) == 0x0005EE, "Member 'UInDreamSurvivorSubAnimInstance::_isIdle' has a wrong offset!");
static_assert(offsetof(UInDreamSurvivorSubAnimInstance, _walkAnimSpeed) == 0x0005F0, "Member 'UInDreamSurvivorSubAnimInstance::_walkAnimSpeed' has a wrong offset!");

// Class TheNightmare.NightmareAnimInstance
// 0x0000 (0x0720 - 0x0720)
class UNightmareAnimInstance final : public UKillerAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NightmareAnimInstance">();
	}
	static class UNightmareAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNightmareAnimInstance>();
	}
};
static_assert(alignof(UNightmareAnimInstance) == 0x000010, "Wrong alignment on UNightmareAnimInstance");
static_assert(sizeof(UNightmareAnimInstance) == 0x000720, "Wrong size on UNightmareAnimInstance");

// Class TheNightmare.PlaceDreamPalletInteraction
// 0x0040 (0x07C0 - 0x0780)
class UPlaceDreamPalletInteraction final : public UInteractionDefinition
{
public:
	TArray<class APalletTracker*>                 _palletTrackers;                                   // 0x0778(0x0010)(BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_788[0x8];                                      // 0x0788(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UPalletTrackerVisibilityComponent> _visibilityComponentClass;                         // 0x0790(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APalletTracker*                         _closestTracker;                                   // 0x0798(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7A0[0x20];                                     // 0x07A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeTunableValues(class ASlasherPlayer* Killer);
	void OnRep_PalletTrackers();
	void SpawnDreamPallet(class APalletTracker* TrackerAtLocation);

	bool CanSpawnDreamPalletAtTracker(class APalletTracker* Tracker) const;
	class APalletTracker* GetTargetedPallet() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlaceDreamPalletInteraction">();
	}
	static class UPlaceDreamPalletInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlaceDreamPalletInteraction>();
	}
};
static_assert(alignof(UPlaceDreamPalletInteraction) == 0x000010, "Wrong alignment on UPlaceDreamPalletInteraction");
static_assert(sizeof(UPlaceDreamPalletInteraction) == 0x0007C0, "Wrong size on UPlaceDreamPalletInteraction");
static_assert(offsetof(UPlaceDreamPalletInteraction, _palletTrackers) == 0x000778, "Member 'UPlaceDreamPalletInteraction::_palletTrackers' has a wrong offset!");
static_assert(offsetof(UPlaceDreamPalletInteraction, _visibilityComponentClass) == 0x000790, "Member 'UPlaceDreamPalletInteraction::_visibilityComponentClass' has a wrong offset!");
static_assert(offsetof(UPlaceDreamPalletInteraction, _closestTracker) == 0x000798, "Member 'UPlaceDreamPalletInteraction::_closestTracker' has a wrong offset!");

// Class TheNightmare.PresentationGeneratorTeleportProgressComponent
// 0x0018 (0x00C8 - 0x00B0)
class UPresentationGeneratorTeleportProgressComponent final : public UPresentationItemProgressComponent
{
public:
	uint8                                         Pad_B0[0x18];                                      // 0x00B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresentationGeneratorTeleportProgressComponent">();
	}
	static class UPresentationGeneratorTeleportProgressComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresentationGeneratorTeleportProgressComponent>();
	}
};
static_assert(alignof(UPresentationGeneratorTeleportProgressComponent) == 0x000008, "Wrong alignment on UPresentationGeneratorTeleportProgressComponent");
static_assert(sizeof(UPresentationGeneratorTeleportProgressComponent) == 0x0000C8, "Wrong size on UPresentationGeneratorTeleportProgressComponent");

// Class TheNightmare.RememberMe
// 0x0000 (0x0420 - 0x0420)
class URememberMe final : public UPerk
{
public:
	bool DidLoseHealthState(const class AActor* DamagedActor, int32 OldHealthStateCount) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RememberMe">();
	}
	static class URememberMe* GetDefaultObj()
	{
		return GetDefaultObjImpl<URememberMe>();
	}
};
static_assert(alignof(URememberMe) == 0x000008, "Wrong alignment on URememberMe");
static_assert(sizeof(URememberMe) == 0x000420, "Wrong size on URememberMe");

// Class TheNightmare.SetDreamSnareInteraction
// 0x0010 (0x08D0 - 0x08C0)
class USetDreamSnareInteraction final : public UChargeableInteractionDefinition
{
public:
	float                                         MinPitch;                                          // 0x08C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MinPlacementDistance;                              // 0x08C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxPlacementDistance;                              // 0x08C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8CC[0x4];                                      // 0x08CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetTrapDistanceFromControlRotation() const;
	bool HasCancelledDreamSnare() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SetDreamSnareInteraction">();
	}
	static class USetDreamSnareInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USetDreamSnareInteraction>();
	}
};
static_assert(alignof(USetDreamSnareInteraction) == 0x000010, "Wrong alignment on USetDreamSnareInteraction");
static_assert(sizeof(USetDreamSnareInteraction) == 0x0008D0, "Wrong size on USetDreamSnareInteraction");
static_assert(offsetof(USetDreamSnareInteraction, MinPitch) == 0x0008C0, "Member 'USetDreamSnareInteraction::MinPitch' has a wrong offset!");
static_assert(offsetof(USetDreamSnareInteraction, MinPlacementDistance) == 0x0008C4, "Member 'USetDreamSnareInteraction::MinPlacementDistance' has a wrong offset!");
static_assert(offsetof(USetDreamSnareInteraction, MaxPlacementDistance) == 0x0008C8, "Member 'USetDreamSnareInteraction::MaxPlacementDistance' has a wrong offset!");

// Class TheNightmare.TheNightmareUtilities
// 0x0000 (0x0030 - 0x0030)
class UTheNightmareUtilities final : public UBlueprintFunctionLibrary
{
public:
	static class UDreamSnareEffect* GetDreamSnareStatusEffect(const class ADBDPlayer* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TheNightmareUtilities">();
	}
	static class UTheNightmareUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTheNightmareUtilities>();
	}
};
static_assert(alignof(UTheNightmareUtilities) == 0x000008, "Wrong alignment on UTheNightmareUtilities");
static_assert(sizeof(UTheNightmareUtilities) == 0x000030, "Wrong size on UTheNightmareUtilities");

// Class TheNightmare.WakerObjectOutlineStrategy
// 0x0000 (0x0148 - 0x0148)
class UWakerObjectOutlineStrategy final : public USourceBasedOutlineUpdateStrategy
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WakerObjectOutlineStrategy">();
	}
	static class UWakerObjectOutlineStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWakerObjectOutlineStrategy>();
	}
};
static_assert(alignof(UWakerObjectOutlineStrategy) == 0x000008, "Wrong alignment on UWakerObjectOutlineStrategy");
static_assert(sizeof(UWakerObjectOutlineStrategy) == 0x000148, "Wrong size on UWakerObjectOutlineStrategy");

}

