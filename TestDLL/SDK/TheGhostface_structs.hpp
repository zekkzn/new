#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheGhostface

#include "Basic.hpp"

#include "DBDAnalytics_structs.hpp"


namespace SDK
{

// Enum TheGhostface.EGhostStealthState
// NumValues: 0x0004
enum class EGhostStealthState : uint8
{
	AWAITING_ACTIVATION                      = 0,
	ACTIVATED                                = 1,
	COOLDOWN                                 = 2,
	EGhostStealthState_MAX                   = 3,
};

// ScriptStruct TheGhostface.GhostKillerAnalytics
// 0x0048 (0x0100 - 0x00B8)
struct FGhostKillerAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stalk;                                             // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StalkStealth;                                      // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stalk25;                                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stalk50;                                           // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stalk75;                                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Stalk100;                                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StalkLean25;                                       // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StalkLean50;                                       // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StalkLean75;                                       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StalkLean100;                                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Lean;                                              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DownExposedSurvivor;                               // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInStealthMode;                                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGhostKillerAnalytics) == 0x000008, "Wrong alignment on FGhostKillerAnalytics");
static_assert(sizeof(FGhostKillerAnalytics) == 0x000100, "Wrong size on FGhostKillerAnalytics");
static_assert(offsetof(FGhostKillerAnalytics, MatchID) == 0x0000B8, "Member 'FGhostKillerAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, Stalk) == 0x0000C8, "Member 'FGhostKillerAnalytics::Stalk' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, StalkStealth) == 0x0000CC, "Member 'FGhostKillerAnalytics::StalkStealth' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, Stalk25) == 0x0000D0, "Member 'FGhostKillerAnalytics::Stalk25' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, Stalk50) == 0x0000D4, "Member 'FGhostKillerAnalytics::Stalk50' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, Stalk75) == 0x0000D8, "Member 'FGhostKillerAnalytics::Stalk75' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, Stalk100) == 0x0000DC, "Member 'FGhostKillerAnalytics::Stalk100' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, StalkLean25) == 0x0000E0, "Member 'FGhostKillerAnalytics::StalkLean25' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, StalkLean50) == 0x0000E4, "Member 'FGhostKillerAnalytics::StalkLean50' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, StalkLean75) == 0x0000E8, "Member 'FGhostKillerAnalytics::StalkLean75' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, StalkLean100) == 0x0000EC, "Member 'FGhostKillerAnalytics::StalkLean100' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, Lean) == 0x0000F0, "Member 'FGhostKillerAnalytics::Lean' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, DownExposedSurvivor) == 0x0000F4, "Member 'FGhostKillerAnalytics::DownExposedSurvivor' has a wrong offset!");
static_assert(offsetof(FGhostKillerAnalytics, TimeInStealthMode) == 0x0000F8, "Member 'FGhostKillerAnalytics::TimeInStealthMode' has a wrong offset!");

}

