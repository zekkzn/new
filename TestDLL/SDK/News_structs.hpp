#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: News

#include "Basic.hpp"

#include "NewsAndMessagesCommon_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// ScriptStruct News.NewsS3MetaData
// 0x0002 (0x0002 - 0x0000)
struct FNewsS3MetaData final
{
public:
	bool                                          IsPopup;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSticky;                                          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewsS3MetaData) == 0x000001, "Wrong alignment on FNewsS3MetaData");
static_assert(sizeof(FNewsS3MetaData) == 0x000002, "Wrong size on FNewsS3MetaData");
static_assert(offsetof(FNewsS3MetaData, IsPopup) == 0x000000, "Member 'FNewsS3MetaData::IsPopup' has a wrong offset!");
static_assert(offsetof(FNewsS3MetaData, IsSticky) == 0x000001, "Member 'FNewsS3MetaData::IsSticky' has a wrong offset!");

// ScriptStruct News.NewsEditorData
// 0x0050 (0x0068 - 0x0018)
struct FNewsEditorData final : public FDBDTableRowBaseWithId
{
public:
	class FText                                   Title;                                             // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FNewsAndMessagesSection>        Sections;                                          // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FDateTime                              StartDate;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InclusionVersion;                                  // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSticky;                                          // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPopup;                                           // 0x0061(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENewsAndMessagesBodyType                      BodyType;                                          // 0x0062(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsEditorData) == 0x000008, "Wrong alignment on FNewsEditorData");
static_assert(sizeof(FNewsEditorData) == 0x000068, "Wrong size on FNewsEditorData");
static_assert(offsetof(FNewsEditorData, Title) == 0x000018, "Member 'FNewsEditorData::Title' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, Sections) == 0x000030, "Member 'FNewsEditorData::Sections' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, StartDate) == 0x000040, "Member 'FNewsEditorData::StartDate' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, EndDate) == 0x000048, "Member 'FNewsEditorData::EndDate' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, InclusionVersion) == 0x000050, "Member 'FNewsEditorData::InclusionVersion' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, IsSticky) == 0x000060, "Member 'FNewsEditorData::IsSticky' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, IsPopup) == 0x000061, "Member 'FNewsEditorData::IsPopup' has a wrong offset!");
static_assert(offsetof(FNewsEditorData, BodyType) == 0x000062, "Member 'FNewsEditorData::BodyType' has a wrong offset!");

// ScriptStruct News.NewsS3Image
// 0x0048 (0x0048 - 0x0000)
struct FNewsS3Image final
{
public:
	class FString                                 Uri;                                               // 0x0000(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Uri_IsSet;                                         // 0x0010(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PackagedPath;                                      // 0x0018(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PackagedPath_IsSet;                                // 0x0028(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentVersion;                                    // 0x0030(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContentVersion_IsSet;                              // 0x0040(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsS3Image) == 0x000008, "Wrong alignment on FNewsS3Image");
static_assert(sizeof(FNewsS3Image) == 0x000048, "Wrong size on FNewsS3Image");
static_assert(offsetof(FNewsS3Image, Uri) == 0x000000, "Member 'FNewsS3Image::Uri' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, Uri_IsSet) == 0x000010, "Member 'FNewsS3Image::Uri_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, PackagedPath) == 0x000018, "Member 'FNewsS3Image::PackagedPath' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, PackagedPath_IsSet) == 0x000028, "Member 'FNewsS3Image::PackagedPath_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, ContentVersion) == 0x000030, "Member 'FNewsS3Image::ContentVersion' has a wrong offset!");
static_assert(offsetof(FNewsS3Image, ContentVersion_IsSet) == 0x000040, "Member 'FNewsS3Image::ContentVersion_IsSet' has a wrong offset!");

// ScriptStruct News.NewsS3Content
// 0x0088 (0x0088 - 0x0000)
struct FNewsS3Content final
{
public:
	ENewsAndMessagesSectionType                   Type;                                              // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENewsAndMessagesAlignmentType                 Alignment;                                         // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Alignment_IsSet;                                   // 0x0002(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Text;                                              // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Text_IsSet;                                        // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNewsS3Image                           Image;                                             // 0x0020(0x0048)(Transient, NativeAccessSpecifierPublic)
	bool                                          Image_IsSet;                                       // 0x0068(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNewsAndMessagesRuntimeShowcasedItem> ShowcasedItem;                                     // 0x0070(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          ShowcasedItem_IsSet;                               // 0x0080(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsS3Content) == 0x000008, "Wrong alignment on FNewsS3Content");
static_assert(sizeof(FNewsS3Content) == 0x000088, "Wrong size on FNewsS3Content");
static_assert(offsetof(FNewsS3Content, Type) == 0x000000, "Member 'FNewsS3Content::Type' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Alignment) == 0x000001, "Member 'FNewsS3Content::Alignment' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Alignment_IsSet) == 0x000002, "Member 'FNewsS3Content::Alignment_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Text) == 0x000008, "Member 'FNewsS3Content::Text' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Text_IsSet) == 0x000018, "Member 'FNewsS3Content::Text_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Image) == 0x000020, "Member 'FNewsS3Content::Image' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, Image_IsSet) == 0x000068, "Member 'FNewsS3Content::Image_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, ShowcasedItem) == 0x000070, "Member 'FNewsS3Content::ShowcasedItem' has a wrong offset!");
static_assert(offsetof(FNewsS3Content, ShowcasedItem_IsSet) == 0x000080, "Member 'FNewsS3Content::ShowcasedItem_IsSet' has a wrong offset!");

// ScriptStruct News.NewsS3Data
// 0x0038 (0x0038 - 0x0000)
struct FNewsS3Data final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNewsS3Content>                 Content;                                           // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	ENewsAndMessagesBodyType                      BodyType;                                          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BodyType_IsSet;                                    // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNewsS3MetaData                        MetaData;                                          // 0x0032(0x0002)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsS3Data) == 0x000008, "Wrong alignment on FNewsS3Data");
static_assert(sizeof(FNewsS3Data) == 0x000038, "Wrong size on FNewsS3Data");
static_assert(offsetof(FNewsS3Data, ID) == 0x000000, "Member 'FNewsS3Data::ID' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, Title) == 0x000010, "Member 'FNewsS3Data::Title' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, Content) == 0x000020, "Member 'FNewsS3Data::Content' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, BodyType) == 0x000030, "Member 'FNewsS3Data::BodyType' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, BodyType_IsSet) == 0x000031, "Member 'FNewsS3Data::BodyType_IsSet' has a wrong offset!");
static_assert(offsetof(FNewsS3Data, MetaData) == 0x000032, "Member 'FNewsS3Data::MetaData' has a wrong offset!");

// ScriptStruct News.NewsRuntimeData
// 0x0068 (0x0068 - 0x0000)
struct FNewsRuntimeData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0010(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x0020(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNewsAndMessagesBodyRuntimeData        Body;                                              // 0x0030(0x0018)(Transient, NativeAccessSpecifierPublic)
	bool                                          IsSticky;                                          // 0x0048(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPopup;                                           // 0x0049(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x004A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              StartDate;                                         // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNewsRuntimeData) == 0x000008, "Wrong alignment on FNewsRuntimeData");
static_assert(sizeof(FNewsRuntimeData) == 0x000068, "Wrong size on FNewsRuntimeData");
static_assert(offsetof(FNewsRuntimeData, ID) == 0x000000, "Member 'FNewsRuntimeData::ID' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, Title) == 0x000010, "Member 'FNewsRuntimeData::Title' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, URL) == 0x000020, "Member 'FNewsRuntimeData::URL' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, Body) == 0x000030, "Member 'FNewsRuntimeData::Body' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, IsSticky) == 0x000048, "Member 'FNewsRuntimeData::IsSticky' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, IsPopup) == 0x000049, "Member 'FNewsRuntimeData::IsPopup' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, IsNew) == 0x00004A, "Member 'FNewsRuntimeData::IsNew' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, StartDate) == 0x000050, "Member 'FNewsRuntimeData::StartDate' has a wrong offset!");
static_assert(offsetof(FNewsRuntimeData, EndDate) == 0x000058, "Member 'FNewsRuntimeData::EndDate' has a wrong offset!");

}

