#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ThePlague

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDAnimation_classes.hpp"
#include "Engine_classes.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK
{

// Class ThePlague.CleanseSickness
// 0x0000 (0x08C0 - 0x08C0)
class UCleanseSickness final : public UChargeableInteractionDefinition
{
public:
	void OnCleanseComplete(class ADBDPlayer* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CleanseSickness">();
	}
	static class UCleanseSickness* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCleanseSickness>();
	}
};
static_assert(alignof(UCleanseSickness) == 0x000010, "Wrong alignment on UCleanseSickness");
static_assert(sizeof(UCleanseSickness) == 0x0008C0, "Wrong size on UCleanseSickness");

// Class ThePlague.K15AnimInstance
// 0x0010 (0x0730 - 0x0720)
class UK15AnimInstance final : public UKillerAnimInstance
{
public:
	bool                                          _isChargingVomit;                                  // 0x0720(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isSpewingVomit;                                   // 0x0721(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isVomitCoolDownEnd;                               // 0x0722(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_723[0x1];                                      // 0x0723(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _pukeCharge;                                       // 0x0724(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _carryFPV;                                         // 0x0728(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void VomitCoolDownEnd();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K15AnimInstance">();
	}
	static class UK15AnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK15AnimInstance>();
	}
};
static_assert(alignof(UK15AnimInstance) == 0x000010, "Wrong alignment on UK15AnimInstance");
static_assert(sizeof(UK15AnimInstance) == 0x000730, "Wrong size on UK15AnimInstance");
static_assert(offsetof(UK15AnimInstance, _isChargingVomit) == 0x000720, "Member 'UK15AnimInstance::_isChargingVomit' has a wrong offset!");
static_assert(offsetof(UK15AnimInstance, _isSpewingVomit) == 0x000721, "Member 'UK15AnimInstance::_isSpewingVomit' has a wrong offset!");
static_assert(offsetof(UK15AnimInstance, _isVomitCoolDownEnd) == 0x000722, "Member 'UK15AnimInstance::_isVomitCoolDownEnd' has a wrong offset!");
static_assert(offsetof(UK15AnimInstance, _pukeCharge) == 0x000724, "Member 'UK15AnimInstance::_pukeCharge' has a wrong offset!");
static_assert(offsetof(UK15AnimInstance, _carryFPV) == 0x000728, "Member 'UK15AnimInstance::_carryFPV' has a wrong offset!");

// Class ThePlague.PlagueSurvivorAnalyticsComponent
// 0x0098 (0x0140 - 0x00A8)
class UPlagueSurvivorAnalyticsComponent final : public UActorComponent
{
public:
	uint32                                        _replicatedRegularVomitHits;                       // 0x00A8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_AC[0x94];                                      // 0x00AC(0x0094)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlagueSurvivorAnalyticsComponent">();
	}
	static class UPlagueSurvivorAnalyticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlagueSurvivorAnalyticsComponent>();
	}
};
static_assert(alignof(UPlagueSurvivorAnalyticsComponent) == 0x000008, "Wrong alignment on UPlagueSurvivorAnalyticsComponent");
static_assert(sizeof(UPlagueSurvivorAnalyticsComponent) == 0x000140, "Wrong size on UPlagueSurvivorAnalyticsComponent");
static_assert(offsetof(UPlagueSurvivorAnalyticsComponent, _replicatedRegularVomitHits) == 0x0000A8, "Member 'UPlagueSurvivorAnalyticsComponent::_replicatedRegularVomitHits' has a wrong offset!");

// Class ThePlague.SicknessSurvivorSubAnimInstance
// 0x0080 (0x0660 - 0x05E0)
class USicknessSurvivorSubAnimInstance final : public UBaseSurvivorAnimInstance
{
public:
	uint8                                         Pad_5E0[0x8];                                      // 0x05E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _vomitingEnteredStatEvent;                         // 0x05E8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _hitByVomitTime;                                   // 0x05F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isSick;                                           // 0x05FC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isVomiting;                                       // 0x05FD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _hasRecentlyBeenHitByVomit;                        // 0x05FE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isOpeningExitGate;                                // 0x05FF(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isHooked;                                         // 0x0600(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrawling;                                       // 0x0601(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isDead;                                           // 0x0602(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isFrightScreaming;                                // 0x0603(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGuidedState                                  _guidedAction;                                     // 0x0604(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EInteractionAnimation                         _interactionType;                                  // 0x0605(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInsideCloset;                                   // 0x0606(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInteracting;                                    // 0x0607(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrouched;                                       // 0x0608(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isHoldingAimItem;                                 // 0x0609(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isIdle;                                           // 0x060A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isHoldingHandleItem;                              // 0x060B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isHoldingFlashbang;                               // 0x060C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isHoldingFirecracker;                             // 0x060D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isHoldingSmallItem;                               // 0x060E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_60F[0x51];                                     // 0x060F(0x0051)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SicknessSurvivorSubAnimInstance">();
	}
	static class USicknessSurvivorSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USicknessSurvivorSubAnimInstance>();
	}
};
static_assert(alignof(USicknessSurvivorSubAnimInstance) == 0x000010, "Wrong alignment on USicknessSurvivorSubAnimInstance");
static_assert(sizeof(USicknessSurvivorSubAnimInstance) == 0x000660, "Wrong size on USicknessSurvivorSubAnimInstance");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _vomitingEnteredStatEvent) == 0x0005E8, "Member 'USicknessSurvivorSubAnimInstance::_vomitingEnteredStatEvent' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _hitByVomitTime) == 0x0005F8, "Member 'USicknessSurvivorSubAnimInstance::_hitByVomitTime' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isSick) == 0x0005FC, "Member 'USicknessSurvivorSubAnimInstance::_isSick' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isVomiting) == 0x0005FD, "Member 'USicknessSurvivorSubAnimInstance::_isVomiting' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _hasRecentlyBeenHitByVomit) == 0x0005FE, "Member 'USicknessSurvivorSubAnimInstance::_hasRecentlyBeenHitByVomit' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isOpeningExitGate) == 0x0005FF, "Member 'USicknessSurvivorSubAnimInstance::_isOpeningExitGate' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isHooked) == 0x000600, "Member 'USicknessSurvivorSubAnimInstance::_isHooked' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isCrawling) == 0x000601, "Member 'USicknessSurvivorSubAnimInstance::_isCrawling' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isDead) == 0x000602, "Member 'USicknessSurvivorSubAnimInstance::_isDead' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isFrightScreaming) == 0x000603, "Member 'USicknessSurvivorSubAnimInstance::_isFrightScreaming' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _guidedAction) == 0x000604, "Member 'USicknessSurvivorSubAnimInstance::_guidedAction' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _interactionType) == 0x000605, "Member 'USicknessSurvivorSubAnimInstance::_interactionType' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isInsideCloset) == 0x000606, "Member 'USicknessSurvivorSubAnimInstance::_isInsideCloset' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isInteracting) == 0x000607, "Member 'USicknessSurvivorSubAnimInstance::_isInteracting' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isCrouched) == 0x000608, "Member 'USicknessSurvivorSubAnimInstance::_isCrouched' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isHoldingAimItem) == 0x000609, "Member 'USicknessSurvivorSubAnimInstance::_isHoldingAimItem' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isIdle) == 0x00060A, "Member 'USicknessSurvivorSubAnimInstance::_isIdle' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isHoldingHandleItem) == 0x00060B, "Member 'USicknessSurvivorSubAnimInstance::_isHoldingHandleItem' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isHoldingFlashbang) == 0x00060C, "Member 'USicknessSurvivorSubAnimInstance::_isHoldingFlashbang' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isHoldingFirecracker) == 0x00060D, "Member 'USicknessSurvivorSubAnimInstance::_isHoldingFirecracker' has a wrong offset!");
static_assert(offsetof(USicknessSurvivorSubAnimInstance, _isHoldingSmallItem) == 0x00060E, "Member 'USicknessSurvivorSubAnimInstance::_isHoldingSmallItem' has a wrong offset!");

}

