#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnowmanWinterEvent

#include "Basic.hpp"

#include "DBDBots_classes.hpp"
#include "SnowmanWinterEvent_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "Engine_classes.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "Projectile_classes.hpp"
#include "DBDGameplay_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class SnowmanWinterEvent.AISkill_InsideSnowman
// 0x0000 (0x0118 - 0x0118)
class UAISkill_InsideSnowman final : public UAISkill
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_InsideSnowman">();
	}
	static class UAISkill_InsideSnowman* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_InsideSnowman>();
	}
};
static_assert(alignof(UAISkill_InsideSnowman) == 0x000008, "Wrong alignment on UAISkill_InsideSnowman");
static_assert(sizeof(UAISkill_InsideSnowman) == 0x000118, "Wrong size on UAISkill_InsideSnowman");

// Class SnowmanWinterEvent.BaseSnowmanEventComponent
// 0x00A8 (0x0150 - 0x00A8)
class UBaseSnowmanEventComponent : public UActorComponent
{
public:
	struct FDBDTunableRowHandle                   _numSnowmenToSpawnAtStart;                         // 0x00A8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class USnowmanSpawnPlacementStrategy> _snowmanSpawnPlacementStrategyClass;               // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USnowmanSpawnPlacementStrategy*         _snowmanSpawnPlacementStrategy;                    // 0x00D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E0[0x40];                                      // 0x00E0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UStatusEffect>>      _survivorInSnowmanEffectClasses;                   // 0x0120(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UStatusEffect>>      _killerInSnowmanEffectClasses;                     // 0x0130(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseSnowmanEventComponent">();
	}
	static class UBaseSnowmanEventComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseSnowmanEventComponent>();
	}
};
static_assert(alignof(UBaseSnowmanEventComponent) == 0x000008, "Wrong alignment on UBaseSnowmanEventComponent");
static_assert(sizeof(UBaseSnowmanEventComponent) == 0x000150, "Wrong size on UBaseSnowmanEventComponent");
static_assert(offsetof(UBaseSnowmanEventComponent, _numSnowmenToSpawnAtStart) == 0x0000A8, "Member 'UBaseSnowmanEventComponent::_numSnowmenToSpawnAtStart' has a wrong offset!");
static_assert(offsetof(UBaseSnowmanEventComponent, _snowmanSpawnPlacementStrategyClass) == 0x0000D0, "Member 'UBaseSnowmanEventComponent::_snowmanSpawnPlacementStrategyClass' has a wrong offset!");
static_assert(offsetof(UBaseSnowmanEventComponent, _snowmanSpawnPlacementStrategy) == 0x0000D8, "Member 'UBaseSnowmanEventComponent::_snowmanSpawnPlacementStrategy' has a wrong offset!");
static_assert(offsetof(UBaseSnowmanEventComponent, _survivorInSnowmanEffectClasses) == 0x000120, "Member 'UBaseSnowmanEventComponent::_survivorInSnowmanEffectClasses' has a wrong offset!");
static_assert(offsetof(UBaseSnowmanEventComponent, _killerInSnowmanEffectClasses) == 0x000130, "Member 'UBaseSnowmanEventComponent::_killerInSnowmanEffectClasses' has a wrong offset!");

// Class SnowmanWinterEvent.HideInSnowmanInteraction
// 0x00F0 (0x0870 - 0x0780)
#pragma pack(push, 0x1)
class alignas(0x10) UHideInSnowmanInteraction : public UInteractionDefinition
{
public:
	struct FDBDTunableRowHandle                   _timeToEnterSnowman;                               // 0x0778(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _attachToPlayerDelay;                              // 0x07A0(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   _nonDamagingSnowmanDestroyingEvents;               // 0x07C8(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D8[0x80];                                     // 0x07D8(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             _authority_attacker;                               // 0x0858(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isSnowmanShieldDamaged;                           // 0x0860(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_861[0x7];                                      // 0x0861(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_StartControllingSnowman(class ADBDPlayer* Player);
	void Multicast_StopControllingSnowman(class ADBDPlayer* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HideInSnowmanInteraction">();
	}
	static class UHideInSnowmanInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHideInSnowmanInteraction>();
	}
};
#pragma pack(pop)
static_assert(alignof(UHideInSnowmanInteraction) == 0x000010, "Wrong alignment on UHideInSnowmanInteraction");
static_assert(sizeof(UHideInSnowmanInteraction) == 0x000870, "Wrong size on UHideInSnowmanInteraction");
static_assert(offsetof(UHideInSnowmanInteraction, _timeToEnterSnowman) == 0x000778, "Member 'UHideInSnowmanInteraction::_timeToEnterSnowman' has a wrong offset!");
static_assert(offsetof(UHideInSnowmanInteraction, _attachToPlayerDelay) == 0x0007A0, "Member 'UHideInSnowmanInteraction::_attachToPlayerDelay' has a wrong offset!");
static_assert(offsetof(UHideInSnowmanInteraction, _nonDamagingSnowmanDestroyingEvents) == 0x0007C8, "Member 'UHideInSnowmanInteraction::_nonDamagingSnowmanDestroyingEvents' has a wrong offset!");
static_assert(offsetof(UHideInSnowmanInteraction, _authority_attacker) == 0x000858, "Member 'UHideInSnowmanInteraction::_authority_attacker' has a wrong offset!");
static_assert(offsetof(UHideInSnowmanInteraction, _isSnowmanShieldDamaged) == 0x000860, "Member 'UHideInSnowmanInteraction::_isSnowmanShieldDamaged' has a wrong offset!");

// Class SnowmanWinterEvent.KillerHideInSnowmanInteraction
// 0x0140 (0x09B0 - 0x0870)
class UKillerHideInSnowmanInteraction final : public UHideInSnowmanInteraction
{
public:
	bool                                          _shouldAttackOutOfSnowman;                         // 0x0868(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_869[0x7];                                      // 0x0869(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _minimumTimeToAttackAndExit;                       // 0x0870(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _mousePitchScaleMultiplier;                        // 0x0898(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _mouseYawScaleMultiplier;                          // 0x08C0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _gamepadPitchScaleMultiplier;                      // 0x08E8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _gamepadYawScaleMultiplier;                        // 0x0910(0x0028)(Edit, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _gamepadPitchCurve;                                // 0x0938(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _gamepadYawCurve;                                  // 0x0940(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _rotationScaleAdjustmentTime;                      // 0x0948(0x0028)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_970[0x40];                                     // 0x0970(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillerHideInSnowmanInteraction">();
	}
	static class UKillerHideInSnowmanInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillerHideInSnowmanInteraction>();
	}
};
static_assert(alignof(UKillerHideInSnowmanInteraction) == 0x000010, "Wrong alignment on UKillerHideInSnowmanInteraction");
static_assert(sizeof(UKillerHideInSnowmanInteraction) == 0x0009B0, "Wrong size on UKillerHideInSnowmanInteraction");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _shouldAttackOutOfSnowman) == 0x000868, "Member 'UKillerHideInSnowmanInteraction::_shouldAttackOutOfSnowman' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _minimumTimeToAttackAndExit) == 0x000870, "Member 'UKillerHideInSnowmanInteraction::_minimumTimeToAttackAndExit' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _mousePitchScaleMultiplier) == 0x000898, "Member 'UKillerHideInSnowmanInteraction::_mousePitchScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _mouseYawScaleMultiplier) == 0x0008C0, "Member 'UKillerHideInSnowmanInteraction::_mouseYawScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _gamepadPitchScaleMultiplier) == 0x0008E8, "Member 'UKillerHideInSnowmanInteraction::_gamepadPitchScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _gamepadYawScaleMultiplier) == 0x000910, "Member 'UKillerHideInSnowmanInteraction::_gamepadYawScaleMultiplier' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _gamepadPitchCurve) == 0x000938, "Member 'UKillerHideInSnowmanInteraction::_gamepadPitchCurve' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _gamepadYawCurve) == 0x000940, "Member 'UKillerHideInSnowmanInteraction::_gamepadYawCurve' has a wrong offset!");
static_assert(offsetof(UKillerHideInSnowmanInteraction, _rotationScaleAdjustmentTime) == 0x000948, "Member 'UKillerHideInSnowmanInteraction::_rotationScaleAdjustmentTime' has a wrong offset!");

// Class SnowmanWinterEvent.SnowballProjectile
// 0x0100 (0x0428 - 0x0328)
class ASnowballProjectile final : public APhysicsBasedProjectile
{
public:
	uint8                                         Pad_328[0x30];                                     // 0x0328(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   _staticMesh;                                       // 0x0358(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       _worldCollision;                                   // 0x0360(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USphereComponent*                       _playerDetector;                                   // 0x0368(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _tagsPreventingPlayerHit;                          // 0x0370(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UPoolableProjectileComponent*           _poolableProjectileComponent;                      // 0x0390(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class ABaseProjectile*>                  _cachedProjectilesInGame;                          // 0x0398(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3E8[0xC];                                      // 0x03E8(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _poolDelayTime;                                    // 0x03F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F8[0x30];                                     // 0x03F8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnCollisionHit(class AActor* HitActor, const struct FImpactInfo& ImpactInfo);
	void Cosmetic_OnPlayerHit(class ADBDPlayer* HitPlayer, const struct FImpactInfo& ImpactInfo);
	void Cosmetic_OnSnowballThrown(const struct FVector& LaunchDirection, float LaunchSpeed);
	void OnCollisionComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& HitResult);
	void OnPlayerDetectorHit(class UPrimitiveComponent* PrimitiveComponent, const struct FHitResult& HitResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowballProjectile">();
	}
	static class ASnowballProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnowballProjectile>();
	}
};
static_assert(alignof(ASnowballProjectile) == 0x000008, "Wrong alignment on ASnowballProjectile");
static_assert(sizeof(ASnowballProjectile) == 0x000428, "Wrong size on ASnowballProjectile");
static_assert(offsetof(ASnowballProjectile, _staticMesh) == 0x000358, "Member 'ASnowballProjectile::_staticMesh' has a wrong offset!");
static_assert(offsetof(ASnowballProjectile, _worldCollision) == 0x000360, "Member 'ASnowballProjectile::_worldCollision' has a wrong offset!");
static_assert(offsetof(ASnowballProjectile, _playerDetector) == 0x000368, "Member 'ASnowballProjectile::_playerDetector' has a wrong offset!");
static_assert(offsetof(ASnowballProjectile, _tagsPreventingPlayerHit) == 0x000370, "Member 'ASnowballProjectile::_tagsPreventingPlayerHit' has a wrong offset!");
static_assert(offsetof(ASnowballProjectile, _poolableProjectileComponent) == 0x000390, "Member 'ASnowballProjectile::_poolableProjectileComponent' has a wrong offset!");
static_assert(offsetof(ASnowballProjectile, _cachedProjectilesInGame) == 0x000398, "Member 'ASnowballProjectile::_cachedProjectilesInGame' has a wrong offset!");
static_assert(offsetof(ASnowballProjectile, _poolDelayTime) == 0x0003F4, "Member 'ASnowballProjectile::_poolDelayTime' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanBase
// 0x01A0 (0x0548 - 0x03A8)
class ASnowmanBase : public AInteractable
{
public:
	uint8                                         Pad_3A8[0x30];                                     // 0x03A8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _timeToRespawn;                                    // 0x03D8(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _timeToBeDestroyed;                                // 0x0400(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)
	class USnowmanAttackableComponent*            _snowmanAttackable;                                // 0x0428(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  _concealSnowmanForPlayerTags;                      // 0x0430(0x0020)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSnowmanSpawnData                      _spawnData;                                        // 0x0450(0x0030)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_480[0x68];                                     // 0x0480(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _isAcquiredFromPool;                               // 0x04E8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isHidden;                                         // 0x04E9(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4EA[0x2];                                      // 0x04EA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _materialVariantIndex;                             // 0x04EC(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F0[0x58];                                     // 0x04F0(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_SetSnowmanMaterialVariant(const int32 MaterialVariantIndex);
	void OnRep_IsAcquiredFromPool();
	void OnRep_IsHidden();
	void OnRep_MaterialVariantIndex();
	void OnRep_SpawnData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanBase">();
	}
	static class ASnowmanBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnowmanBase>();
	}
};
static_assert(alignof(ASnowmanBase) == 0x000008, "Wrong alignment on ASnowmanBase");
static_assert(sizeof(ASnowmanBase) == 0x000548, "Wrong size on ASnowmanBase");
static_assert(offsetof(ASnowmanBase, _timeToRespawn) == 0x0003D8, "Member 'ASnowmanBase::_timeToRespawn' has a wrong offset!");
static_assert(offsetof(ASnowmanBase, _timeToBeDestroyed) == 0x000400, "Member 'ASnowmanBase::_timeToBeDestroyed' has a wrong offset!");
static_assert(offsetof(ASnowmanBase, _snowmanAttackable) == 0x000428, "Member 'ASnowmanBase::_snowmanAttackable' has a wrong offset!");
static_assert(offsetof(ASnowmanBase, _concealSnowmanForPlayerTags) == 0x000430, "Member 'ASnowmanBase::_concealSnowmanForPlayerTags' has a wrong offset!");
static_assert(offsetof(ASnowmanBase, _spawnData) == 0x000450, "Member 'ASnowmanBase::_spawnData' has a wrong offset!");
static_assert(offsetof(ASnowmanBase, _isAcquiredFromPool) == 0x0004E8, "Member 'ASnowmanBase::_isAcquiredFromPool' has a wrong offset!");
static_assert(offsetof(ASnowmanBase, _isHidden) == 0x0004E9, "Member 'ASnowmanBase::_isHidden' has a wrong offset!");
static_assert(offsetof(ASnowmanBase, _materialVariantIndex) == 0x0004EC, "Member 'ASnowmanBase::_materialVariantIndex' has a wrong offset!");

// Class SnowmanWinterEvent.Snowman
// 0x0210 (0x0758 - 0x0548)
class ASnowman final : public ASnowmanBase
{
public:
	uint8                                         Pad_548[0x78];                                     // 0x0548(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxRespawnsAfterKillerAttackWhileOccupied;        // 0x05C0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _highFiveCooldown;                                 // 0x05E8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _attachToPlayerDelay;                              // 0x0610(0x0028)(Edit, NativeAccessSpecifierPrivate)
	ESnowmanState                                 _snowmanState;                                     // 0x0638(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESnowmanDestructionType                       _snowmanDestructionType;                           // 0x0639(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_63A[0x6];                                      // 0x063A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             _playerUsingThisSnowman;                           // 0x0640(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_648[0x78];                                     // 0x0648(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDSkeletalMeshComponentBudgeted*      _snowmanSkeletalMesh;                              // 0x06C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDBDOutlineComponent*                   _snowmanOutlineComponent;                          // 0x06C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                      _snowmanCapsule;                                   // 0x06D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCapsuleComponent*                      _snowmanHandCapsule;                               // 0x06D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractor*                            _snowmanInteractor;                                // 0x06E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _snowmanInteractionZone;                           // 0x06E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _thirdPersonPerspectiveTransitionTime;             // 0x06F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _playerMeshRotationOffset;                         // 0x06F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isMoving;                                         // 0x06F8(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6F9[0x7];                                      // 0x06F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASnowman*                               _highFiveFollower;                                 // 0x0700(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_708[0x30];                                     // 0x0708(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  _hideAdditonalActorEvents;                         // 0x0738(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	void Authority_OnSnowmanHandOverlapBegin(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void Authority_OnSnowmanHandOverlapEnd(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void Cosmetic_OnAdditionalActorHidden(class AActor* ActorToHide);
	void Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForKiller(class ASlasherPlayer* KillerAttackingSnowman);
	void Cosmetic_OnCosmeticUnlockRequirementsSatisfiedForSurvivor(class ACamperPlayer* SurvivorUsingSnowman);
	void Cosmetic_OnKillerFinishTransitionOutOfSnowman(const class ASlasherPlayer* Killer);
	void Cosmetic_OnSnowmanDestroyedByAttackWhileControlled(class ACamperPlayer* SurvivorUsingSnowman, class ASlasherPlayer* KillerAttackingSnowman);
	void Cosmetic_OnSnowmanDestroyedByAttackWhileEmpty(class ASlasherPlayer* KillerAttackingSnowman);
	void Cosmetic_OnSnowmanDestroyedByKillerAttackExit(class ASlasherPlayer* KillerUsingSnowman);
	void Cosmetic_OnSnowmanDestroyedByKillerCancelExit();
	void Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileControlled(class ADBDPlayer* PlayerUsingThisSnowman);
	void Cosmetic_OnSnowmanDestroyedByNonDamagingAttackWhileEmpty();
	void Cosmetic_OnSnowmanDestroyedBySurvivorRunExit(class ACamperPlayer* SurvivorUsingSnowman);
	void Cosmetic_OnSnowmanHighFive(class ASnowman* OtherSnowman);
	void Cosmetic_OnSnowmanSpawned();
	void Cosmetic_OnSnowmanStartBeingControlledByKiller(class ASlasherPlayer* KillerUsingSnowman);
	void Cosmetic_OnSnowmanStartBeingControlledBySurvivor(class ACamperPlayer* SurvivorUsingSnowman);
	void Cosmetic_OnSnowmanStartBeingUsedByKiller(class ASlasherPlayer* KillerUsingSnowman);
	void Cosmetic_OnSnowmanStartBeingUsedBySurvivor(class ACamperPlayer* SurvivorUsingSnowman);
	void Multicast_OnSnowmanStartBeingControlledByKiller(class ASlasherPlayer* KillerUsingSnowman);
	void Multicast_OnSnowmanStartBeingControlledBySurvivor(class ACamperPlayer* SurvivorUsingSnowman);
	void Multicast_OnSnowmanStartBeingUsedByKiller(class ASlasherPlayer* KillerUsingSnowman);
	void Multicast_OnSnowmanStartBeingUsedBySurvivor(class ACamperPlayer* SurvivorUsingSnowman);
	void Multicast_StartSnowmanDestruction(ESnowmanDestructionType SnowmanDestructionType, bool UnlockRequirementsSatisfiedForSurvivor, bool UnlockRequirementsSatisfiedForKiller, class ADBDPlayer* PlayerInSnowman);
	void OnFinishedPlaying(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData);
	void OnRep_HighFiveFollower();
	void OnRep_IsMoving();
	void OnRep_PlayerUsingSnowman();
	void OnRep_SnowmanDestructionType();
	void OnRep_SnowmanState();
	void OnTransitionBackToKillerFinished(const class ASlasherPlayer* Killer);

	void Multicast_DrawDebugCollisionCheck(const struct FVector& BoxExtent, float DebugLifetime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Snowman">();
	}
	static class ASnowman* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnowman>();
	}
};
static_assert(alignof(ASnowman) == 0x000008, "Wrong alignment on ASnowman");
static_assert(sizeof(ASnowman) == 0x000758, "Wrong size on ASnowman");
static_assert(offsetof(ASnowman, _maxRespawnsAfterKillerAttackWhileOccupied) == 0x0005C0, "Member 'ASnowman::_maxRespawnsAfterKillerAttackWhileOccupied' has a wrong offset!");
static_assert(offsetof(ASnowman, _highFiveCooldown) == 0x0005E8, "Member 'ASnowman::_highFiveCooldown' has a wrong offset!");
static_assert(offsetof(ASnowman, _attachToPlayerDelay) == 0x000610, "Member 'ASnowman::_attachToPlayerDelay' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanState) == 0x000638, "Member 'ASnowman::_snowmanState' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanDestructionType) == 0x000639, "Member 'ASnowman::_snowmanDestructionType' has a wrong offset!");
static_assert(offsetof(ASnowman, _playerUsingThisSnowman) == 0x000640, "Member 'ASnowman::_playerUsingThisSnowman' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanSkeletalMesh) == 0x0006C0, "Member 'ASnowman::_snowmanSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanOutlineComponent) == 0x0006C8, "Member 'ASnowman::_snowmanOutlineComponent' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanCapsule) == 0x0006D0, "Member 'ASnowman::_snowmanCapsule' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanHandCapsule) == 0x0006D8, "Member 'ASnowman::_snowmanHandCapsule' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanInteractor) == 0x0006E0, "Member 'ASnowman::_snowmanInteractor' has a wrong offset!");
static_assert(offsetof(ASnowman, _snowmanInteractionZone) == 0x0006E8, "Member 'ASnowman::_snowmanInteractionZone' has a wrong offset!");
static_assert(offsetof(ASnowman, _thirdPersonPerspectiveTransitionTime) == 0x0006F0, "Member 'ASnowman::_thirdPersonPerspectiveTransitionTime' has a wrong offset!");
static_assert(offsetof(ASnowman, _playerMeshRotationOffset) == 0x0006F4, "Member 'ASnowman::_playerMeshRotationOffset' has a wrong offset!");
static_assert(offsetof(ASnowman, _isMoving) == 0x0006F8, "Member 'ASnowman::_isMoving' has a wrong offset!");
static_assert(offsetof(ASnowman, _highFiveFollower) == 0x000700, "Member 'ASnowman::_highFiveFollower' has a wrong offset!");
static_assert(offsetof(ASnowman, _hideAdditonalActorEvents) == 0x000738, "Member 'ASnowman::_hideAdditonalActorEvents' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanAnimInstance
// 0x0020 (0x0370 - 0x0350)
class USnowmanAnimInstance final : public UAnimInstance
{
public:
	bool                                          _isIdle;                                           // 0x0350(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingEntered;                                   // 0x0351(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isControlled;                                     // 0x0352(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isDestroyed;                                      // 0x0353(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingDestroyedDueToSurvivorRunExit;             // 0x0354(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingDestroyedDueToKillerAttackExit;            // 0x0355(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingDestroyedDueToKillerAttackWhileControlled; // 0x0356(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBeingDestroyedDueToKillerAttackWhileEmpty;      // 0x0357(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isSurvivorUsingSnowmanMoving;                     // 0x0358(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ASnowman>                _snowman;                                          // 0x035C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ADBDPlayer>              _playerUsingSnowman;                               // 0x0364(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_36C[0x4];                                      // 0x036C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Cosmetic_OnSnowmanDestroyedEvent(ESnowmanDestructionType SnowmanDestructionType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanAnimInstance">();
	}
	static class USnowmanAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanAnimInstance>();
	}
};
static_assert(alignof(USnowmanAnimInstance) == 0x000010, "Wrong alignment on USnowmanAnimInstance");
static_assert(sizeof(USnowmanAnimInstance) == 0x000370, "Wrong size on USnowmanAnimInstance");
static_assert(offsetof(USnowmanAnimInstance, _isIdle) == 0x000350, "Member 'USnowmanAnimInstance::_isIdle' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingEntered) == 0x000351, "Member 'USnowmanAnimInstance::_isBeingEntered' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isControlled) == 0x000352, "Member 'USnowmanAnimInstance::_isControlled' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isDestroyed) == 0x000353, "Member 'USnowmanAnimInstance::_isDestroyed' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingDestroyedDueToSurvivorRunExit) == 0x000354, "Member 'USnowmanAnimInstance::_isBeingDestroyedDueToSurvivorRunExit' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingDestroyedDueToKillerAttackExit) == 0x000355, "Member 'USnowmanAnimInstance::_isBeingDestroyedDueToKillerAttackExit' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingDestroyedDueToKillerAttackWhileControlled) == 0x000356, "Member 'USnowmanAnimInstance::_isBeingDestroyedDueToKillerAttackWhileControlled' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isBeingDestroyedDueToKillerAttackWhileEmpty) == 0x000357, "Member 'USnowmanAnimInstance::_isBeingDestroyedDueToKillerAttackWhileEmpty' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _isSurvivorUsingSnowmanMoving) == 0x000358, "Member 'USnowmanAnimInstance::_isSurvivorUsingSnowmanMoving' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _snowman) == 0x00035C, "Member 'USnowmanAnimInstance::_snowman' has a wrong offset!");
static_assert(offsetof(USnowmanAnimInstance, _playerUsingSnowman) == 0x000364, "Member 'USnowmanAnimInstance::_playerUsingSnowman' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanAttackableComponent
// 0x0018 (0x00F8 - 0x00E0)
class USnowmanAttackableComponent final : public UBaseActorAttackableComponent
{
public:
	uint8                                         Pad_E0[0x18];                                      // 0x00E0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanAttackableComponent">();
	}
	static class USnowmanAttackableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanAttackableComponent>();
	}
};
static_assert(alignof(USnowmanAttackableComponent) == 0x000008, "Wrong alignment on USnowmanAttackableComponent");
static_assert(sizeof(USnowmanAttackableComponent) == 0x0000F8, "Wrong size on USnowmanAttackableComponent");

// Class SnowmanWinterEvent.SnowmanKillerPerspectiveChangeComponent
// 0x0078 (0x0198 - 0x0120)
class USnowmanKillerPerspectiveChangeComponent final : public UPlayerPerspectiveChangeComponent
{
public:
	uint8                                         Pad_120[0x18];                                     // 0x0120(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerPerspectiveChangeTargetData     _killerViewPerspectiveChangeTargetData;            // 0x0138(0x0020)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FPlayerPerspectiveChangeTargetData     _thirdPersonSnowmanKillerPerspectiveChangeTargetData; // 0x0158(0x0020)(Edit, DisableEditOnInstance, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TSubclassOf<class UDBDSpringArmComponent>     _springArmClass;                                   // 0x0178(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _pitchLimitLower;                                  // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _pitchLimitUpper;                                  // 0x0184(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDBDSpringArmComponent*                 _snowmanSpringArm;                                 // 0x0188(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_190[0x8];                                      // 0x0190(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFirstPersonTargetData(const class ASlasherPlayer* Killer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanKillerPerspectiveChangeComponent">();
	}
	static class USnowmanKillerPerspectiveChangeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanKillerPerspectiveChangeComponent>();
	}
};
static_assert(alignof(USnowmanKillerPerspectiveChangeComponent) == 0x000008, "Wrong alignment on USnowmanKillerPerspectiveChangeComponent");
static_assert(sizeof(USnowmanKillerPerspectiveChangeComponent) == 0x000198, "Wrong size on USnowmanKillerPerspectiveChangeComponent");
static_assert(offsetof(USnowmanKillerPerspectiveChangeComponent, _killerViewPerspectiveChangeTargetData) == 0x000138, "Member 'USnowmanKillerPerspectiveChangeComponent::_killerViewPerspectiveChangeTargetData' has a wrong offset!");
static_assert(offsetof(USnowmanKillerPerspectiveChangeComponent, _thirdPersonSnowmanKillerPerspectiveChangeTargetData) == 0x000158, "Member 'USnowmanKillerPerspectiveChangeComponent::_thirdPersonSnowmanKillerPerspectiveChangeTargetData' has a wrong offset!");
static_assert(offsetof(USnowmanKillerPerspectiveChangeComponent, _springArmClass) == 0x000178, "Member 'USnowmanKillerPerspectiveChangeComponent::_springArmClass' has a wrong offset!");
static_assert(offsetof(USnowmanKillerPerspectiveChangeComponent, _pitchLimitLower) == 0x000180, "Member 'USnowmanKillerPerspectiveChangeComponent::_pitchLimitLower' has a wrong offset!");
static_assert(offsetof(USnowmanKillerPerspectiveChangeComponent, _pitchLimitUpper) == 0x000184, "Member 'USnowmanKillerPerspectiveChangeComponent::_pitchLimitUpper' has a wrong offset!");
static_assert(offsetof(USnowmanKillerPerspectiveChangeComponent, _snowmanSpringArm) == 0x000188, "Member 'USnowmanKillerPerspectiveChangeComponent::_snowmanSpringArm' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanSpawnPlacementStrategy
// 0x0258 (0x0300 - 0x00A8)
class USnowmanSpawnPlacementStrategy final : public UActorComponent
{
public:
	struct FDBDTunableRowHandle                   _minDistanceFromOtherActiveSnowmen;                // 0x00A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minDistanceFromOtherPlayers;                      // 0x00D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minHatchDistance;                                 // 0x00F8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minPalletDistance;                                // 0x0120(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _navmesh_radiusArea;                               // 0x0148(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _navmesh_minimumDistanceFromOriginSpawnPoint;      // 0x0170(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _navmesh_minimumNumberOfNavmeshPointsToBeReady;    // 0x0198(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _boxExtentXSize;                                   // 0x01C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _boxExtentYSize;                                   // 0x01E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _boxExtentZSize;                                   // 0x0210(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FVector                                _collisionBoxHalfExtent;                           // 0x0238(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _collisionCapsuleHalfHeight;                       // 0x0250(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _collisionCapsuleRadius;                           // 0x0254(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minDistanceFromOtherActiveSnowmenSquared;         // 0x0258(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minDistanceFromOtherPlayersSquared;               // 0x025C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minPalletDistanceSquared;                         // 0x0260(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _minHatchSquaredDistance;                          // 0x0264(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<ETileSpawnPointType>                   _spawnPointsTileTypes;                             // 0x0268(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<EGameplayElementType>                  _spawnPointsGameplayElementTypes;                  // 0x0278(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSnowmanSpawnLocationData>      _spawnLocationData;                                // 0x0288(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class AHatch*>                         _hatches;                                          // 0x0298(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class APallet*>                        _pallets;                                          // 0x02A8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B8[0x20];                                     // 0x02B8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _collisionCheckBoxExtents;                         // 0x02D8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _downRaycastLength;                                // 0x02F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _rayCastZOffet;                                    // 0x02F4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _distanceToGroundToleranceSquared;                 // 0x02F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnIntroCompletedOrLevelReadyToPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanSpawnPlacementStrategy">();
	}
	static class USnowmanSpawnPlacementStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanSpawnPlacementStrategy>();
	}
};
static_assert(alignof(USnowmanSpawnPlacementStrategy) == 0x000008, "Wrong alignment on USnowmanSpawnPlacementStrategy");
static_assert(sizeof(USnowmanSpawnPlacementStrategy) == 0x000300, "Wrong size on USnowmanSpawnPlacementStrategy");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minDistanceFromOtherActiveSnowmen) == 0x0000A8, "Member 'USnowmanSpawnPlacementStrategy::_minDistanceFromOtherActiveSnowmen' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minDistanceFromOtherPlayers) == 0x0000D0, "Member 'USnowmanSpawnPlacementStrategy::_minDistanceFromOtherPlayers' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minHatchDistance) == 0x0000F8, "Member 'USnowmanSpawnPlacementStrategy::_minHatchDistance' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minPalletDistance) == 0x000120, "Member 'USnowmanSpawnPlacementStrategy::_minPalletDistance' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _navmesh_radiusArea) == 0x000148, "Member 'USnowmanSpawnPlacementStrategy::_navmesh_radiusArea' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _navmesh_minimumDistanceFromOriginSpawnPoint) == 0x000170, "Member 'USnowmanSpawnPlacementStrategy::_navmesh_minimumDistanceFromOriginSpawnPoint' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _navmesh_minimumNumberOfNavmeshPointsToBeReady) == 0x000198, "Member 'USnowmanSpawnPlacementStrategy::_navmesh_minimumNumberOfNavmeshPointsToBeReady' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _boxExtentXSize) == 0x0001C0, "Member 'USnowmanSpawnPlacementStrategy::_boxExtentXSize' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _boxExtentYSize) == 0x0001E8, "Member 'USnowmanSpawnPlacementStrategy::_boxExtentYSize' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _boxExtentZSize) == 0x000210, "Member 'USnowmanSpawnPlacementStrategy::_boxExtentZSize' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _collisionBoxHalfExtent) == 0x000238, "Member 'USnowmanSpawnPlacementStrategy::_collisionBoxHalfExtent' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _collisionCapsuleHalfHeight) == 0x000250, "Member 'USnowmanSpawnPlacementStrategy::_collisionCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _collisionCapsuleRadius) == 0x000254, "Member 'USnowmanSpawnPlacementStrategy::_collisionCapsuleRadius' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minDistanceFromOtherActiveSnowmenSquared) == 0x000258, "Member 'USnowmanSpawnPlacementStrategy::_minDistanceFromOtherActiveSnowmenSquared' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minDistanceFromOtherPlayersSquared) == 0x00025C, "Member 'USnowmanSpawnPlacementStrategy::_minDistanceFromOtherPlayersSquared' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minPalletDistanceSquared) == 0x000260, "Member 'USnowmanSpawnPlacementStrategy::_minPalletDistanceSquared' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _minHatchSquaredDistance) == 0x000264, "Member 'USnowmanSpawnPlacementStrategy::_minHatchSquaredDistance' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _spawnPointsTileTypes) == 0x000268, "Member 'USnowmanSpawnPlacementStrategy::_spawnPointsTileTypes' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _spawnPointsGameplayElementTypes) == 0x000278, "Member 'USnowmanSpawnPlacementStrategy::_spawnPointsGameplayElementTypes' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _spawnLocationData) == 0x000288, "Member 'USnowmanSpawnPlacementStrategy::_spawnLocationData' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _hatches) == 0x000298, "Member 'USnowmanSpawnPlacementStrategy::_hatches' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _pallets) == 0x0002A8, "Member 'USnowmanSpawnPlacementStrategy::_pallets' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _collisionCheckBoxExtents) == 0x0002D8, "Member 'USnowmanSpawnPlacementStrategy::_collisionCheckBoxExtents' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _downRaycastLength) == 0x0002F0, "Member 'USnowmanSpawnPlacementStrategy::_downRaycastLength' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _rayCastZOffet) == 0x0002F4, "Member 'USnowmanSpawnPlacementStrategy::_rayCastZOffet' has a wrong offset!");
static_assert(offsetof(USnowmanSpawnPlacementStrategy, _distanceToGroundToleranceSquared) == 0x0002F8, "Member 'USnowmanSpawnPlacementStrategy::_distanceToGroundToleranceSquared' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanWinterEventComponent
// 0x0018 (0x0168 - 0x0150)
class USnowmanWinterEventComponent final : public UBaseSnowmanEventComponent
{
public:
	TSubclassOf<class ASnowman>                   _snowmanClass;                                     // 0x0150(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class ASnowman*>                       _snowmen;                                          // 0x0158(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	void DBD_Winter2021ForceRespawnAllSnowmen();
	void DBD_Winter2021RecalculateSpawnPoints();
	void DBD_Winter2021ShowSnowmenSpawnCollisionChecks(float NumberOfSeconds);
	void DBD_Winter2021VisualizeCalculatedSpawnData(float NumberOfSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanWinterEventComponent">();
	}
	static class USnowmanWinterEventComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanWinterEventComponent>();
	}
};
static_assert(alignof(USnowmanWinterEventComponent) == 0x000008, "Wrong alignment on USnowmanWinterEventComponent");
static_assert(sizeof(USnowmanWinterEventComponent) == 0x000168, "Wrong size on USnowmanWinterEventComponent");
static_assert(offsetof(USnowmanWinterEventComponent, _snowmanClass) == 0x000150, "Member 'USnowmanWinterEventComponent::_snowmanClass' has a wrong offset!");
static_assert(offsetof(USnowmanWinterEventComponent, _snowmen) == 0x000158, "Member 'USnowmanWinterEventComponent::_snowmen' has a wrong offset!");

// Class SnowmanWinterEvent.SnowmanWinterEventPlayerComponent
// 0x00C0 (0x0168 - 0x00A8)
class USnowmanWinterEventPlayerComponent final : public UActorComponent
{
public:
	struct FDBDTunableRowHandle                   _maxTrackedTimeSinceSnowmanExit;                   // 0x00A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class ADBDPlayer>>        _previouslyHighFivedPlayers;                       // 0x00D0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x48];                                     // 0x0120(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnowmanWinterEventPlayerComponent">();
	}
	static class USnowmanWinterEventPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnowmanWinterEventPlayerComponent>();
	}
};
static_assert(alignof(USnowmanWinterEventPlayerComponent) == 0x000008, "Wrong alignment on USnowmanWinterEventPlayerComponent");
static_assert(sizeof(USnowmanWinterEventPlayerComponent) == 0x000168, "Wrong size on USnowmanWinterEventPlayerComponent");
static_assert(offsetof(USnowmanWinterEventPlayerComponent, _maxTrackedTimeSinceSnowmanExit) == 0x0000A8, "Member 'USnowmanWinterEventPlayerComponent::_maxTrackedTimeSinceSnowmanExit' has a wrong offset!");
static_assert(offsetof(USnowmanWinterEventPlayerComponent, _previouslyHighFivedPlayers) == 0x0000D0, "Member 'USnowmanWinterEventPlayerComponent::_previouslyHighFivedPlayers' has a wrong offset!");

// Class SnowmanWinterEvent.SurvivorHideInSnowmanInteraction
// 0x0120 (0x0990 - 0x0870)
class USurvivorHideInSnowmanInteraction final : public UHideInSnowmanInteraction
{
public:
	bool                                          _shouldRunOutOfSnowman;                            // 0x0868(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_869[0x7];                                      // 0x0869(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _minimumTimeToRunAndExit;                          // 0x0870(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _cameraZoomBack;                                   // 0x0898(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToZoomEnter;                                  // 0x08C0(0x0028)(Edit, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _timeToZoomExit;                                   // 0x08E8(0x0028)(Edit, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayTag>                   _nonDamagingKillerSnowmanDestroyingEvents;         // 0x0910(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayTag>                   _gameEventsToCauseScream;                          // 0x0920(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class FString>                         _overridingKillerInteractionIds;                   // 0x0930(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	bool                                          _shouldScreamOnExit;                               // 0x0940(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_941[0x4F];                                     // 0x0941(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnDamageStateChanged(ECamperDamageState OldDamageState, ECamperDamageState CurrentDamageState);
	void Cosmetic_OnSurvivorScreamFromExit(class ADBDPlayer* PlayerExiting);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SurvivorHideInSnowmanInteraction">();
	}
	static class USurvivorHideInSnowmanInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USurvivorHideInSnowmanInteraction>();
	}
};
static_assert(alignof(USurvivorHideInSnowmanInteraction) == 0x000010, "Wrong alignment on USurvivorHideInSnowmanInteraction");
static_assert(sizeof(USurvivorHideInSnowmanInteraction) == 0x000990, "Wrong size on USurvivorHideInSnowmanInteraction");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _shouldRunOutOfSnowman) == 0x000868, "Member 'USurvivorHideInSnowmanInteraction::_shouldRunOutOfSnowman' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _minimumTimeToRunAndExit) == 0x000870, "Member 'USurvivorHideInSnowmanInteraction::_minimumTimeToRunAndExit' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _cameraZoomBack) == 0x000898, "Member 'USurvivorHideInSnowmanInteraction::_cameraZoomBack' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _timeToZoomEnter) == 0x0008C0, "Member 'USurvivorHideInSnowmanInteraction::_timeToZoomEnter' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _timeToZoomExit) == 0x0008E8, "Member 'USurvivorHideInSnowmanInteraction::_timeToZoomExit' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _nonDamagingKillerSnowmanDestroyingEvents) == 0x000910, "Member 'USurvivorHideInSnowmanInteraction::_nonDamagingKillerSnowmanDestroyingEvents' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _gameEventsToCauseScream) == 0x000920, "Member 'USurvivorHideInSnowmanInteraction::_gameEventsToCauseScream' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _overridingKillerInteractionIds) == 0x000930, "Member 'USurvivorHideInSnowmanInteraction::_overridingKillerInteractionIds' has a wrong offset!");
static_assert(offsetof(USurvivorHideInSnowmanInteraction, _shouldScreamOnExit) == 0x000940, "Member 'USurvivorHideInSnowmanInteraction::_shouldScreamOnExit' has a wrong offset!");

}

