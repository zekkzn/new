#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_Hatch

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function AB_Hatch.AB_Hatch_C.GetHatch
// 0x0028 (0x0028 - 0x0000)
struct AB_Hatch_C_GetHatch final
{
public:
	class AHatch*                                 AsHatch;                                           // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwningActor_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AHatch*                                 K2Node_DynamicCast_AsHatch;                        // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_Hatch_C_GetHatch) == 0x000008, "Wrong alignment on AB_Hatch_C_GetHatch");
static_assert(sizeof(AB_Hatch_C_GetHatch) == 0x000028, "Wrong size on AB_Hatch_C_GetHatch");
static_assert(offsetof(AB_Hatch_C_GetHatch, AsHatch) == 0x000000, "Member 'AB_Hatch_C_GetHatch::AsHatch' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_GetHatch, CallFunc_GetOwningActor_ReturnValue) == 0x000008, "Member 'AB_Hatch_C_GetHatch::CallFunc_GetOwningActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_GetHatch, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'AB_Hatch_C_GetHatch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_GetHatch, K2Node_DynamicCast_AsHatch) == 0x000018, "Member 'AB_Hatch_C_GetHatch::K2Node_DynamicCast_AsHatch' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_GetHatch, K2Node_DynamicCast_bSuccess) == 0x000020, "Member 'AB_Hatch_C_GetHatch::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function AB_Hatch.AB_Hatch_C.ExecuteUbergraph_AB_Hatch
// 0x0030 (0x0030 - 0x0000)
struct AB_Hatch_C_ExecuteUbergraph_AB_Hatch final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AHatch*                                 CallFunc_GetHatch_AsHatch;                         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AHatch*                                 CallFunc_GetHatch_AsHatch_1;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AHatch*                                 CallFunc_GetHatch_AsHatch_2;                       // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(AB_Hatch_C_ExecuteUbergraph_AB_Hatch) == 0x000008, "Wrong alignment on AB_Hatch_C_ExecuteUbergraph_AB_Hatch");
static_assert(sizeof(AB_Hatch_C_ExecuteUbergraph_AB_Hatch) == 0x000030, "Wrong size on AB_Hatch_C_ExecuteUbergraph_AB_Hatch");
static_assert(offsetof(AB_Hatch_C_ExecuteUbergraph_AB_Hatch, EntryPoint) == 0x000000, "Member 'AB_Hatch_C_ExecuteUbergraph_AB_Hatch::EntryPoint' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_ExecuteUbergraph_AB_Hatch, CallFunc_GetHatch_AsHatch) == 0x000008, "Member 'AB_Hatch_C_ExecuteUbergraph_AB_Hatch::CallFunc_GetHatch_AsHatch' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_ExecuteUbergraph_AB_Hatch, CallFunc_GetHatch_AsHatch_1) == 0x000010, "Member 'AB_Hatch_C_ExecuteUbergraph_AB_Hatch::CallFunc_GetHatch_AsHatch_1' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_ExecuteUbergraph_AB_Hatch, CallFunc_IsValid_ReturnValue) == 0x000018, "Member 'AB_Hatch_C_ExecuteUbergraph_AB_Hatch::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_ExecuteUbergraph_AB_Hatch, CallFunc_IsValid_ReturnValue_1) == 0x000019, "Member 'AB_Hatch_C_ExecuteUbergraph_AB_Hatch::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_ExecuteUbergraph_AB_Hatch, CallFunc_GetHatch_AsHatch_2) == 0x000020, "Member 'AB_Hatch_C_ExecuteUbergraph_AB_Hatch::CallFunc_GetHatch_AsHatch_2' has a wrong offset!");
static_assert(offsetof(AB_Hatch_C_ExecuteUbergraph_AB_Hatch, CallFunc_IsValid_ReturnValue_2) == 0x000028, "Member 'AB_Hatch_C_ExecuteUbergraph_AB_Hatch::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");

// Function AB_Hatch.AB_Hatch_C.AnimGraph
// 0x0010 (0x0010 - 0x0000)
struct AB_Hatch_C_AnimGraph final
{
public:
	struct FPoseLink                              Param_AnimGraph;                                   // 0x0000(0x0010)(Parm, OutParm, NoDestructor)
};
static_assert(alignof(AB_Hatch_C_AnimGraph) == 0x000008, "Wrong alignment on AB_Hatch_C_AnimGraph");
static_assert(sizeof(AB_Hatch_C_AnimGraph) == 0x000010, "Wrong size on AB_Hatch_C_AnimGraph");
static_assert(offsetof(AB_Hatch_C_AnimGraph, Param_AnimGraph) == 0x000000, "Member 'AB_Hatch_C_AnimGraph::Param_AnimGraph' has a wrong offset!");

}

