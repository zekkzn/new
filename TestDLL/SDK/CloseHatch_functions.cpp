#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CloseHatch

#include "Basic.hpp"

#include "CloseHatch_classes.hpp"
#include "CloseHatch_parameters.hpp"


namespace SDK
{

// Function CloseHatch.CloseHatch_C.OnInteractionUpdateStart
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UCloseHatch_C::OnInteractionUpdateStart(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CloseHatch_C", "OnInteractionUpdateStart");

	Params::CloseHatch_C_OnInteractionUpdateStart Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CloseHatch.CloseHatch_C.OnInteractionUpdateMontageReachedMiddle
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UCloseHatch_C::OnInteractionUpdateMontageReachedMiddle(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CloseHatch_C", "OnInteractionUpdateMontageReachedMiddle");

	Params::CloseHatch_C_OnInteractionUpdateMontageReachedMiddle Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CloseHatch.CloseHatch_C.OnInteractionUpdateEnd
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UCloseHatch_C::OnInteractionUpdateEnd(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CloseHatch_C", "OnInteractionUpdateEnd");

	Params::CloseHatch_C_OnInteractionUpdateEnd Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CloseHatch.CloseHatch_C.ExecuteUbergraph_CloseHatch
// (Final, UbergraphFunction, HasDefaults)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCloseHatch_C::ExecuteUbergraph_CloseHatch(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CloseHatch_C", "ExecuteUbergraph_CloseHatch");

	Params::CloseHatch_C_ExecuteUbergraph_CloseHatch Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function CloseHatch.CloseHatch_C.IsInteractionPossibleBP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ADBDPlayer*                       Player                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EInputInteractionType                   InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UCloseHatch_C::IsInteractionPossibleBP(const class ADBDPlayer* Player, EInputInteractionType InteractionType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CloseHatch_C", "IsInteractionPossibleBP");

	Params::CloseHatch_C_IsInteractionPossibleBP Parms{};

	Parms.Player = Player;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function CloseHatch.CloseHatch_C.GetHatchAnimationMontageSlave
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UAnimationMontageSlave*           Anim_Montage_Slave                                     (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void UCloseHatch_C::GetHatchAnimationMontageSlave(class UAnimationMontageSlave** Anim_Montage_Slave) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CloseHatch_C", "GetHatchAnimationMontageSlave");

	Params::CloseHatch_C_GetHatchAnimationMontageSlave Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Anim_Montage_Slave != nullptr)
		*Anim_Montage_Slave = Parms.Anim_Montage_Slave;
}


// Function CloseHatch.CloseHatch_C.GetHatch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class AHatch*                           Hatch                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UCloseHatch_C::GetHatch(class AHatch** Hatch) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CloseHatch_C", "GetHatch");

	Params::CloseHatch_C_GetHatch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (Hatch != nullptr)
		*Hatch = Parms.Hatch;
}


// Function CloseHatch.CloseHatch_C.CanSlasherCloseHatch
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    CanClose                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UCloseHatch_C::CanSlasherCloseHatch(bool* CanClose) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CloseHatch_C", "CanSlasherCloseHatch");

	Params::CloseHatch_C_CanSlasherCloseHatch Parms{};

	UObject::ProcessEvent(Func, &Parms);

	if (CanClose != nullptr)
		*CanClose = Parms.CanClose;
}

}

