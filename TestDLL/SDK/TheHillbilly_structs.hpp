#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheHillbilly

#include "Basic.hpp"

#include "DBDAnalytics_structs.hpp"


namespace SDK
{

// Enum TheHillbilly.EAISkillHillbillyChainsawState
// NumValues: 0x0007
enum class EAISkillHillbillyChainsawState : uint8
{
	Ready                                    = 0,
	Charging                                 = 1,
	Decharging                               = 2,
	PreDash                                  = 3,
	Dashing                                  = 4,
	Cooldown                                 = 5,
	EAISkillHillbillyChainsawState_MAX       = 6,
};

// Enum TheHillbilly.EAISkillHillbillyChainsawPathResult
// NumValues: 0x0006
enum class EAISkillHillbillyChainsawPathResult : uint8
{
	Direct                                   = 0,
	LeftCurve                                = 1,
	RightCurve                               = 2,
	Traversal                                = 3,
	Unavailable                              = 4,
	EAISkillHillbillyChainsawPathResult_MAX  = 5,
};

// ScriptStruct TheHillbilly.ChainsawEvent
// 0x0004 (0x0004 - 0x0000)
struct FChainsawEvent
{
public:
	float                                         ElapsedMatchTime;                                  // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChainsawEvent) == 0x000004, "Wrong alignment on FChainsawEvent");
static_assert(sizeof(FChainsawEvent) == 0x000004, "Wrong size on FChainsawEvent");
static_assert(offsetof(FChainsawEvent, ElapsedMatchTime) == 0x000000, "Member 'FChainsawEvent::ElapsedMatchTime' has a wrong offset!");

// ScriptStruct TheHillbilly.ChainsawEventWhileCamping
// 0x0004 (0x0008 - 0x0004)
struct FChainsawEventWhileCamping final : public FChainsawEvent
{
public:
	float                                         DistanceFromClosestHook;                           // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChainsawEventWhileCamping) == 0x000004, "Wrong alignment on FChainsawEventWhileCamping");
static_assert(sizeof(FChainsawEventWhileCamping) == 0x000008, "Wrong size on FChainsawEventWhileCamping");
static_assert(offsetof(FChainsawEventWhileCamping, DistanceFromClosestHook) == 0x000004, "Member 'FChainsawEventWhileCamping::DistanceFromClosestHook' has a wrong offset!");

// ScriptStruct TheHillbilly.ChainsawAnalytics
// 0x0020 (0x00D8 - 0x00B8)
struct FChainsawAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChainsawEventWhileCamping>     DownSurvivorsWithChainsawWhileCampingEvents;       // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChainsawAnalytics) == 0x000008, "Wrong alignment on FChainsawAnalytics");
static_assert(sizeof(FChainsawAnalytics) == 0x0000D8, "Wrong size on FChainsawAnalytics");
static_assert(offsetof(FChainsawAnalytics, MatchID) == 0x0000B8, "Member 'FChainsawAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FChainsawAnalytics, DownSurvivorsWithChainsawWhileCampingEvents) == 0x0000C8, "Member 'FChainsawAnalytics::DownSurvivorsWithChainsawWhileCampingEvents' has a wrong offset!");

// ScriptStruct TheHillbilly.HillbillyAnalytics
// 0x0040 (0x0118 - 0x00D8)
struct FHillbillyAnalytics final : public FChainsawAnalytics
{
public:
	TArray<struct FChainsawEvent>                 OverheatEvents;                                    // 0x00D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FChainsawEvent>                 OverheatWhileSprintingEvents;                      // 0x00E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FChainsawEventWhileCamping>     OverheatWhileCampingEvents;                        // 0x00F8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FChainsawEvent>                 RevFromZeroHeatEvents;                             // 0x0108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHillbillyAnalytics) == 0x000008, "Wrong alignment on FHillbillyAnalytics");
static_assert(sizeof(FHillbillyAnalytics) == 0x000118, "Wrong size on FHillbillyAnalytics");
static_assert(offsetof(FHillbillyAnalytics, OverheatEvents) == 0x0000D8, "Member 'FHillbillyAnalytics::OverheatEvents' has a wrong offset!");
static_assert(offsetof(FHillbillyAnalytics, OverheatWhileSprintingEvents) == 0x0000E8, "Member 'FHillbillyAnalytics::OverheatWhileSprintingEvents' has a wrong offset!");
static_assert(offsetof(FHillbillyAnalytics, OverheatWhileCampingEvents) == 0x0000F8, "Member 'FHillbillyAnalytics::OverheatWhileCampingEvents' has a wrong offset!");
static_assert(offsetof(FHillbillyAnalytics, RevFromZeroHeatEvents) == 0x000108, "Member 'FHillbillyAnalytics::RevFromZeroHeatEvents' has a wrong offset!");

}

