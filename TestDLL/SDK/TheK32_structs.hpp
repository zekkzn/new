#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK32

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum TheK32.EAssimilationFromDifferentPodsStageType
// NumValues: 0x0005
enum class EAssimilationFromDifferentPodsStageType : uint8
{
	None                                     = 0,
	StartedLockingOnSurvivor                 = 1,
	ChangedPod                               = 2,
	StartedLockingOnSurvivorAgain            = 3,
	EAssimilationFromDifferentPodsStageType_MAX = 4,
};

// Enum TheK32.EK32ItemBoxState
// NumValues: 0x0005
enum class EK32ItemBoxState : uint8
{
	Available                                = 0,
	InProgress                               = 1,
	Paused                                   = 2,
	Inactive                                 = 3,
	EK32ItemBoxState_MAX                     = 4,
};

// Enum TheK32.EK32KillerInstinctType
// NumValues: 0x0004
enum class EK32KillerInstinctType : uint8
{
	None                                     = 0,
	AssimilationKillerInstinct               = 1,
	TeleportKillerInstinct                   = 2,
	EK32KillerInstinctType_MAX               = 3,
};

// Enum TheK32.EK32KillerPodSpawningResult
// NumValues: 0x0007
enum class EK32KillerPodSpawningResult : uint8
{
	NoResult                                 = 0,
	NoSurface                                = 1,
	InvalidSurface                           = 2,
	SpawnKillerPod                           = 3,
	DestroyKillerPod                         = 4,
	TeleportToSurvivor                       = 5,
	EK32KillerPodSpawningResult_MAX          = 6,
};

// Enum TheK32.ELockOnState
// NumValues: 0x0007
enum class ELockOnState : uint8
{
	NoTarget                                 = 0,
	TargetFound                              = 1,
	Lingering                                = 2,
	Cooldown                                 = 3,
	LockedOut                                = 4,
	LeavingAndDestroyingPod                  = 5,
	ELockOnState_MAX                         = 6,
};

// Enum TheK32.EPodVisionTransferDestination
// NumValues: 0x0003
enum class EPodVisionTransferDestination : uint8
{
	Previous                                 = 0,
	Target                                   = 1,
	EPodVisionTransferDestination_MAX        = 2,
};

// Enum TheK32.ESurvivorLockedOnProgressState
// NumValues: 0x0005
enum class ESurvivorLockedOnProgressState : uint8
{
	Invalid                                  = 0,
	NoProgress                               = 1,
	Progressing                              = 2,
	Regressing                               = 3,
	ESurvivorLockedOnProgressState_MAX       = 4,
};

// ScriptStruct TheK32.AssimilationFromDifferentPodsStageData
// 0x0020 (0x0020 - 0x0000)
struct FAssimilationFromDifferentPodsStageData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          TargetSurvivor;                                    // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK32KillerPod*                          FirstPodUsed;                                      // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK32KillerPod*                          AnotherPodUsed;                                    // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssimilationFromDifferentPodsStageData) == 0x000008, "Wrong alignment on FAssimilationFromDifferentPodsStageData");
static_assert(sizeof(FAssimilationFromDifferentPodsStageData) == 0x000020, "Wrong size on FAssimilationFromDifferentPodsStageData");
static_assert(offsetof(FAssimilationFromDifferentPodsStageData, TargetSurvivor) == 0x000008, "Member 'FAssimilationFromDifferentPodsStageData::TargetSurvivor' has a wrong offset!");
static_assert(offsetof(FAssimilationFromDifferentPodsStageData, FirstPodUsed) == 0x000010, "Member 'FAssimilationFromDifferentPodsStageData::FirstPodUsed' has a wrong offset!");
static_assert(offsetof(FAssimilationFromDifferentPodsStageData, AnotherPodUsed) == 0x000018, "Member 'FAssimilationFromDifferentPodsStageData::AnotherPodUsed' has a wrong offset!");

// ScriptStruct TheK32.K32BaseProjectilePayload
// 0x0090 (0x0090 - 0x0000)
struct alignas(0x10) FK32BaseProjectilePayload final
{
public:
	struct FVector                                StartLocationWorldSpace;                           // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMovingToActor;                                   // 0x0018(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldPositionTarget;                               // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetSocket;                                      // 0x0040(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x44];                                      // 0x004C(0x0044)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK32BaseProjectilePayload) == 0x000010, "Wrong alignment on FK32BaseProjectilePayload");
static_assert(sizeof(FK32BaseProjectilePayload) == 0x000090, "Wrong size on FK32BaseProjectilePayload");
static_assert(offsetof(FK32BaseProjectilePayload, StartLocationWorldSpace) == 0x000000, "Member 'FK32BaseProjectilePayload::StartLocationWorldSpace' has a wrong offset!");
static_assert(offsetof(FK32BaseProjectilePayload, IsMovingToActor) == 0x000018, "Member 'FK32BaseProjectilePayload::IsMovingToActor' has a wrong offset!");
static_assert(offsetof(FK32BaseProjectilePayload, WorldPositionTarget) == 0x000020, "Member 'FK32BaseProjectilePayload::WorldPositionTarget' has a wrong offset!");
static_assert(offsetof(FK32BaseProjectilePayload, TargetActor) == 0x000038, "Member 'FK32BaseProjectilePayload::TargetActor' has a wrong offset!");
static_assert(offsetof(FK32BaseProjectilePayload, TargetSocket) == 0x000040, "Member 'FK32BaseProjectilePayload::TargetSocket' has a wrong offset!");

// ScriptStruct TheK32.K32KillerPodSettings
// 0x0098 (0x0098 - 0x0000)
struct FK32KillerPodSettings final
{
public:
	struct FVector                                CollisionPoint;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnForwardRotation;                              // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               LastForwardRotation;                               // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisabled;                                        // 0x0061(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRebootingFromDisabled;                           // 0x0062(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63[0x5];                                       // 0x0063(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsControlledByKiller;                              // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLastControlledKillerPod;                         // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SurfaceNormal;                                     // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        AttachmentPoints;                                  // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK32KillerPodSettings) == 0x000008, "Wrong alignment on FK32KillerPodSettings");
static_assert(sizeof(FK32KillerPodSettings) == 0x000098, "Wrong size on FK32KillerPodSettings");
static_assert(offsetof(FK32KillerPodSettings, CollisionPoint) == 0x000000, "Member 'FK32KillerPodSettings::CollisionPoint' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, SpawnLocation) == 0x000018, "Member 'FK32KillerPodSettings::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, SpawnForwardRotation) == 0x000030, "Member 'FK32KillerPodSettings::SpawnForwardRotation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, LastForwardRotation) == 0x000048, "Member 'FK32KillerPodSettings::LastForwardRotation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, IsVisible) == 0x000060, "Member 'FK32KillerPodSettings::IsVisible' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, IsDisabled) == 0x000061, "Member 'FK32KillerPodSettings::IsDisabled' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, IsRebootingFromDisabled) == 0x000062, "Member 'FK32KillerPodSettings::IsRebootingFromDisabled' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, IsControlledByKiller) == 0x000068, "Member 'FK32KillerPodSettings::IsControlledByKiller' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, IsLastControlledKillerPod) == 0x000069, "Member 'FK32KillerPodSettings::IsLastControlledKillerPod' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, SurfaceNormal) == 0x000070, "Member 'FK32KillerPodSettings::SurfaceNormal' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSettings, AttachmentPoints) == 0x000088, "Member 'FK32KillerPodSettings::AttachmentPoints' has a wrong offset!");

// ScriptStruct TheK32.K32KillerPodSpawningInputData
// 0x0048 (0x0048 - 0x0000)
struct FK32KillerPodSpawningInputData final
{
public:
	struct FVector                                KillerLocation;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                IndicatorLocation;                                 // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CameraDirection;                                   // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK32KillerPodSpawningInputData) == 0x000008, "Wrong alignment on FK32KillerPodSpawningInputData");
static_assert(sizeof(FK32KillerPodSpawningInputData) == 0x000048, "Wrong size on FK32KillerPodSpawningInputData");
static_assert(offsetof(FK32KillerPodSpawningInputData, KillerLocation) == 0x000000, "Member 'FK32KillerPodSpawningInputData::KillerLocation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningInputData, IndicatorLocation) == 0x000018, "Member 'FK32KillerPodSpawningInputData::IndicatorLocation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningInputData, CameraDirection) == 0x000030, "Member 'FK32KillerPodSpawningInputData::CameraDirection' has a wrong offset!");

// ScriptStruct TheK32.K32KillerPodSpawnData
// 0x00A8 (0x00A8 - 0x0000)
struct FK32KillerPodSpawnData final
{
public:
	struct FK32KillerPodSpawningInputData         InputData;                                         // 0x0000(0x0048)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                CollisionPoint;                                    // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0060(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnForwardRotation;                              // 0x0078(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SurfaceNormal;                                     // 0x0090(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK32KillerPodSpawnData) == 0x000008, "Wrong alignment on FK32KillerPodSpawnData");
static_assert(sizeof(FK32KillerPodSpawnData) == 0x0000A8, "Wrong size on FK32KillerPodSpawnData");
static_assert(offsetof(FK32KillerPodSpawnData, InputData) == 0x000000, "Member 'FK32KillerPodSpawnData::InputData' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawnData, CollisionPoint) == 0x000048, "Member 'FK32KillerPodSpawnData::CollisionPoint' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawnData, SpawnLocation) == 0x000060, "Member 'FK32KillerPodSpawnData::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawnData, SpawnForwardRotation) == 0x000078, "Member 'FK32KillerPodSpawnData::SpawnForwardRotation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawnData, SurfaceNormal) == 0x000090, "Member 'FK32KillerPodSpawnData::SurfaceNormal' has a wrong offset!");

// ScriptStruct TheK32.K32KillerPodSpawningData
// 0x0070 (0x0070 - 0x0000)
struct FK32KillerPodSpawningData final
{
public:
	struct FVector                                CollisionPoint;                                    // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SpawnLocation;                                     // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnForwardRotation;                              // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                SurfaceNormal;                                     // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK32KillerPod*                          PodToDestroy;                                      // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          TargetSurvivor;                                    // 0x0068(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK32KillerPodSpawningData) == 0x000008, "Wrong alignment on FK32KillerPodSpawningData");
static_assert(sizeof(FK32KillerPodSpawningData) == 0x000070, "Wrong size on FK32KillerPodSpawningData");
static_assert(offsetof(FK32KillerPodSpawningData, CollisionPoint) == 0x000000, "Member 'FK32KillerPodSpawningData::CollisionPoint' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningData, SpawnLocation) == 0x000018, "Member 'FK32KillerPodSpawningData::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningData, SpawnForwardRotation) == 0x000030, "Member 'FK32KillerPodSpawningData::SpawnForwardRotation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningData, SurfaceNormal) == 0x000048, "Member 'FK32KillerPodSpawningData::SurfaceNormal' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningData, PodToDestroy) == 0x000060, "Member 'FK32KillerPodSpawningData::PodToDestroy' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningData, TargetSurvivor) == 0x000068, "Member 'FK32KillerPodSpawningData::TargetSurvivor' has a wrong offset!");

// ScriptStruct TheK32.K32KillerPodSpawningIndicatorSettings
// 0x0038 (0x0038 - 0x0000)
struct FK32KillerPodSpawningIndicatorSettings final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnForwardRotation;                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInValidLocationForKillerPod;                     // 0x0031(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDestroyingPod;                                   // 0x0032(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTeleportingToSurvivor;                           // 0x0033(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK32KillerPodSpawningIndicatorSettings) == 0x000008, "Wrong alignment on FK32KillerPodSpawningIndicatorSettings");
static_assert(sizeof(FK32KillerPodSpawningIndicatorSettings) == 0x000038, "Wrong size on FK32KillerPodSpawningIndicatorSettings");
static_assert(offsetof(FK32KillerPodSpawningIndicatorSettings, SpawnLocation) == 0x000000, "Member 'FK32KillerPodSpawningIndicatorSettings::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningIndicatorSettings, SpawnForwardRotation) == 0x000018, "Member 'FK32KillerPodSpawningIndicatorSettings::SpawnForwardRotation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningIndicatorSettings, IsVisible) == 0x000030, "Member 'FK32KillerPodSpawningIndicatorSettings::IsVisible' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningIndicatorSettings, IsInValidLocationForKillerPod) == 0x000031, "Member 'FK32KillerPodSpawningIndicatorSettings::IsInValidLocationForKillerPod' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningIndicatorSettings, IsDestroyingPod) == 0x000032, "Member 'FK32KillerPodSpawningIndicatorSettings::IsDestroyingPod' has a wrong offset!");
static_assert(offsetof(FK32KillerPodSpawningIndicatorSettings, IsTeleportingToSurvivor) == 0x000033, "Member 'FK32KillerPodSpawningIndicatorSettings::IsTeleportingToSurvivor' has a wrong offset!");

// ScriptStruct TheK32.K32KillerPodTargetIndicatorSettings
// 0x0038 (0x0038 - 0x0000)
struct FK32KillerPodTargetIndicatorSettings final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               SpawnForwardRotation;                              // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK32KillerPodTargetIndicatorSettings) == 0x000008, "Wrong alignment on FK32KillerPodTargetIndicatorSettings");
static_assert(sizeof(FK32KillerPodTargetIndicatorSettings) == 0x000038, "Wrong size on FK32KillerPodTargetIndicatorSettings");
static_assert(offsetof(FK32KillerPodTargetIndicatorSettings, SpawnLocation) == 0x000000, "Member 'FK32KillerPodTargetIndicatorSettings::SpawnLocation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodTargetIndicatorSettings, SpawnForwardRotation) == 0x000018, "Member 'FK32KillerPodTargetIndicatorSettings::SpawnForwardRotation' has a wrong offset!");
static_assert(offsetof(FK32KillerPodTargetIndicatorSettings, IsVisible) == 0x000030, "Member 'FK32KillerPodTargetIndicatorSettings::IsVisible' has a wrong offset!");

// ScriptStruct TheK32.K32SurvivorStatus
// 0x0078 (0x0078 - 0x0000)
struct FK32SurvivorStatus final
{
public:
	class ACamperPlayer*                          OwningSurvivor;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAssimilated;                                     // 0x0008(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        RecentLocations;                                   // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<class ACamperPlayer*, float>             Authority_CrossAssimilationStartedTime;            // 0x0020(0x0050)(Transient, RepSkip, NativeAccessSpecifierPublic)
	bool                                          Authority_IsBeingCrossAssimilated;                 // 0x0070(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Authority_CanBeAffectedByPower;                    // 0x0071(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Authority_LastTimeCanBeAffectedByPowerEnabled;     // 0x0074(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK32SurvivorStatus) == 0x000008, "Wrong alignment on FK32SurvivorStatus");
static_assert(sizeof(FK32SurvivorStatus) == 0x000078, "Wrong size on FK32SurvivorStatus");
static_assert(offsetof(FK32SurvivorStatus, OwningSurvivor) == 0x000000, "Member 'FK32SurvivorStatus::OwningSurvivor' has a wrong offset!");
static_assert(offsetof(FK32SurvivorStatus, IsAssimilated) == 0x000008, "Member 'FK32SurvivorStatus::IsAssimilated' has a wrong offset!");
static_assert(offsetof(FK32SurvivorStatus, RecentLocations) == 0x000010, "Member 'FK32SurvivorStatus::RecentLocations' has a wrong offset!");
static_assert(offsetof(FK32SurvivorStatus, Authority_CrossAssimilationStartedTime) == 0x000020, "Member 'FK32SurvivorStatus::Authority_CrossAssimilationStartedTime' has a wrong offset!");
static_assert(offsetof(FK32SurvivorStatus, Authority_IsBeingCrossAssimilated) == 0x000070, "Member 'FK32SurvivorStatus::Authority_IsBeingCrossAssimilated' has a wrong offset!");
static_assert(offsetof(FK32SurvivorStatus, Authority_CanBeAffectedByPower) == 0x000071, "Member 'FK32SurvivorStatus::Authority_CanBeAffectedByPower' has a wrong offset!");
static_assert(offsetof(FK32SurvivorStatus, Authority_LastTimeCanBeAffectedByPowerEnabled) == 0x000074, "Member 'FK32SurvivorStatus::Authority_LastTimeCanBeAffectedByPowerEnabled' has a wrong offset!");

}

