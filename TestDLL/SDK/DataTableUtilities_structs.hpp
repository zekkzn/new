#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DataTableUtilities

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct DataTableUtilities.DBDTunableRowHandleOverride
// 0x0020 (0x0020 - 0x0000)
struct FDBDTunableRowHandleOverride final
{
public:
	struct FDataTableRowHandle                    _dataTableRowHandle;                               // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         _overrideValue;                                    // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDBDTunableRowHandleOverride) == 0x000008, "Wrong alignment on FDBDTunableRowHandleOverride");
static_assert(sizeof(FDBDTunableRowHandleOverride) == 0x000020, "Wrong size on FDBDTunableRowHandleOverride");
static_assert(offsetof(FDBDTunableRowHandleOverride, _dataTableRowHandle) == 0x000000, "Member 'FDBDTunableRowHandleOverride::_dataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FDBDTunableRowHandleOverride, _overrideValue) == 0x000018, "Member 'FDBDTunableRowHandleOverride::_overrideValue' has a wrong offset!");

// ScriptStruct DataTableUtilities.DBDTableRowBase
// 0x0000 (0x0008 - 0x0008)
struct FDBDTableRowBase : public FTableRowBase
{
};
static_assert(alignof(FDBDTableRowBase) == 0x000008, "Wrong alignment on FDBDTableRowBase");
static_assert(sizeof(FDBDTableRowBase) == 0x000008, "Wrong size on FDBDTableRowBase");

// ScriptStruct DataTableUtilities.DBDTunableRowHandle
// 0x0028 (0x0028 - 0x0000)
struct FDBDTunableRowHandle final
{
public:
	struct FDataTableRowHandle                    _dataTableRowHandle;                               // 0x0000(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         _defaultValue;                                     // 0x0018(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isOptional;                                       // 0x001C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D[0xB];                                       // 0x001D(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDBDTunableRowHandle) == 0x000008, "Wrong alignment on FDBDTunableRowHandle");
static_assert(sizeof(FDBDTunableRowHandle) == 0x000028, "Wrong size on FDBDTunableRowHandle");
static_assert(offsetof(FDBDTunableRowHandle, _dataTableRowHandle) == 0x000000, "Member 'FDBDTunableRowHandle::_dataTableRowHandle' has a wrong offset!");
static_assert(offsetof(FDBDTunableRowHandle, _defaultValue) == 0x000018, "Member 'FDBDTunableRowHandle::_defaultValue' has a wrong offset!");
static_assert(offsetof(FDBDTunableRowHandle, _isOptional) == 0x00001C, "Member 'FDBDTunableRowHandle::_isOptional' has a wrong offset!");

// ScriptStruct DataTableUtilities.DBDTableRowBaseWithId
// 0x0010 (0x0018 - 0x0008)
struct FDBDTableRowBaseWithId : public FDBDTableRowBase
{
public:
	class FName                                   ID;                                                // 0x0008(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDBDTableRowBaseWithId) == 0x000008, "Wrong alignment on FDBDTableRowBaseWithId");
static_assert(sizeof(FDBDTableRowBaseWithId) == 0x000018, "Wrong size on FDBDTableRowBaseWithId");
static_assert(offsetof(FDBDTableRowBaseWithId, ID) == 0x000008, "Member 'FDBDTableRowBaseWithId::ID' has a wrong offset!");

// ScriptStruct DataTableUtilities.DataTableProxy
// 0x0040 (0x0040 - 0x0000)
struct FDataTableProxy final
{
public:
	TSoftObjectPtr<class UDataTable>              AssetPtr;                                          // 0x0000(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDataTableProxy) == 0x000008, "Wrong alignment on FDataTableProxy");
static_assert(sizeof(FDataTableProxy) == 0x000040, "Wrong size on FDataTableProxy");
static_assert(offsetof(FDataTableProxy, AssetPtr) == 0x000000, "Member 'FDataTableProxy::AssetPtr' has a wrong offset!");

// ScriptStruct DataTableUtilities.DBDTunableRowBase
// 0x0000 (0x0008 - 0x0008)
struct FDBDTunableRowBase : public FDBDTableRowBase
{
};
static_assert(alignof(FDBDTunableRowBase) == 0x000008, "Wrong alignment on FDBDTunableRowBase");
static_assert(sizeof(FDBDTunableRowBase) == 0x000008, "Wrong size on FDBDTunableRowBase");

}

