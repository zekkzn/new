#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_MapMarker

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_MapMarker.BP_MapMarker_C.InitVisibility
// 0x0001 (0x0001 - 0x0000)
struct BP_MapMarker_C_InitVisibility final
{
public:
	bool                                          CallFunc_IsInKillerTeam_ReturnValue;               // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapMarker_C_InitVisibility) == 0x000001, "Wrong alignment on BP_MapMarker_C_InitVisibility");
static_assert(sizeof(BP_MapMarker_C_InitVisibility) == 0x000001, "Wrong size on BP_MapMarker_C_InitVisibility");
static_assert(offsetof(BP_MapMarker_C_InitVisibility, CallFunc_IsInKillerTeam_ReturnValue) == 0x000000, "Member 'BP_MapMarker_C_InitVisibility::CallFunc_IsInKillerTeam_ReturnValue' has a wrong offset!");

// Function BP_MapMarker.BP_MapMarker_C.InitDestructionTimer
// 0x0010 (0x0010 - 0x0000)
struct BP_MapMarker_C_InitDestructionTimer final
{
public:
	float                                         CallFunc_GetTunableValue_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_FloatFloat_ReturnValue;      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CallFunc_K2_SetTimer_ReturnValue;                  // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapMarker_C_InitDestructionTimer) == 0x000008, "Wrong alignment on BP_MapMarker_C_InitDestructionTimer");
static_assert(sizeof(BP_MapMarker_C_InitDestructionTimer) == 0x000010, "Wrong size on BP_MapMarker_C_InitDestructionTimer");
static_assert(offsetof(BP_MapMarker_C_InitDestructionTimer, CallFunc_GetTunableValue_ReturnValue) == 0x000000, "Member 'BP_MapMarker_C_InitDestructionTimer::CallFunc_GetTunableValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapMarker_C_InitDestructionTimer, CallFunc_GreaterEqual_FloatFloat_ReturnValue) == 0x000004, "Member 'BP_MapMarker_C_InitDestructionTimer::CallFunc_GreaterEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_MapMarker_C_InitDestructionTimer, CallFunc_K2_SetTimer_ReturnValue) == 0x000008, "Member 'BP_MapMarker_C_InitDestructionTimer::CallFunc_K2_SetTimer_ReturnValue' has a wrong offset!");

// Function BP_MapMarker.BP_MapMarker_C.ExecuteUbergraph_BP_MapMarker
// 0x0038 (0x0038 - 0x0000)
struct BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkResult Result)>             K2Node_CreateDelegate_OutputDelegate;              // 0x001C(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAkResult                                     K2Node_CustomEvent_Result;                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker) == 0x000004, "Wrong alignment on BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker");
static_assert(sizeof(BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker) == 0x000038, "Wrong size on BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker");
static_assert(offsetof(BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker, EntryPoint) == 0x000000, "Member 'BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker, Temp_delegate_Variable) == 0x000004, "Member 'BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker, K2Node_CreateDelegate_OutputDelegate) == 0x00001C, "Member 'BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker, K2Node_CustomEvent_Result) == 0x000030, "Member 'BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker::K2Node_CustomEvent_Result' has a wrong offset!");
static_assert(offsetof(BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker, CallFunc_PostAkEvent_ReturnValue) == 0x000034, "Member 'BP_MapMarker_C_ExecuteUbergraph_BP_MapMarker::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function BP_MapMarker.BP_MapMarker_C.CustomEvent_1
// 0x0001 (0x0001 - 0x0000)
struct BP_MapMarker_C_CustomEvent_1 final
{
public:
	EAkResult                                     Result;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_MapMarker_C_CustomEvent_1) == 0x000001, "Wrong alignment on BP_MapMarker_C_CustomEvent_1");
static_assert(sizeof(BP_MapMarker_C_CustomEvent_1) == 0x000001, "Wrong size on BP_MapMarker_C_CustomEvent_1");
static_assert(offsetof(BP_MapMarker_C_CustomEvent_1, Result) == 0x000000, "Member 'BP_MapMarker_C_CustomEvent_1::Result' has a wrong offset!");

}

