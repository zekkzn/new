#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreDirectionalMiniGame

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDUIViewsCore_classes.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CoreDirectionalMiniGame.WBP_CoreDirectionalMiniGame_C
// 0x00E8 (0x0458 - 0x0370)
class UWBP_CoreDirectionalMiniGame_C final : public UCoreHudDirectionalMiniGameWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0370(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       Wormhole_Hide;                                     // 0x0378(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Wormhole_Final_Fail;                               // 0x0380(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Wormhole_Final_Success;                            // 0x0388(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       Wormhole_Opening;                                  // 0x0390(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SkullMerchant_Final_Fail;                          // 0x0398(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SkullMerchant_Final_Success;                       // 0x03A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       SkullMerchant_Opening;                             // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDBDImage*                              Background;                                        // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              Results;                                           // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class URetainerBox*                           RetainerBox;                                       // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsMinigameInProgressCached;                        // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        FinalSuccessAnimDuration;                          // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FinalSuccessItemDelayScaler;                       // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        FinalFailureItemDelayMax;                          // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SM_ResultsFailedColor;                             // 0x03E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SM_ResultsSuccessColor;                            // 0x03F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialParameterCollection*           SM_MPC_Background;                                 // 0x0408(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   SM_GlitchWaveName;                                 // 0x0410(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SM_CollapseWaveName;                               // 0x041C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SM_CollapseScaleName;                              // 0x0428(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SM_SpeedName;                                      // 0x0434(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   SM_GlitchValueName;                                // 0x0440(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         DebugNbItems;                                      // 0x044C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDirectionalMiniGameType                      DebugType;                                         // 0x0450(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateFinalResult(EDirectionalMinigameResult FinalResult);
	void SwapAssets();
	void ShowVisual();
	void Reset();
	void PreConstruct(bool IsDesignTime);
	void Hide();
	void Finished_B7CB9AC745403FF46FF4009DAF22A94E();
	void Finished_925EEC48405CB8CCBB06B5B191B91419();
	void Finished_45E3732642A3F05ACD075A8162942EAD();
	void Finished_438A756F49CEA495F9F237AB066013BA();
	void ExecuteUbergraph_WBP_CoreDirectionalMiniGame(int32 EntryPoint);
	void UpdateVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CoreDirectionalMiniGame_C">();
	}
	static class UWBP_CoreDirectionalMiniGame_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CoreDirectionalMiniGame_C>();
	}
};
static_assert(alignof(UWBP_CoreDirectionalMiniGame_C) == 0x000008, "Wrong alignment on UWBP_CoreDirectionalMiniGame_C");
static_assert(sizeof(UWBP_CoreDirectionalMiniGame_C) == 0x000458, "Wrong size on UWBP_CoreDirectionalMiniGame_C");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, UberGraphFrame) == 0x000370, "Member 'UWBP_CoreDirectionalMiniGame_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, Wormhole_Hide) == 0x000378, "Member 'UWBP_CoreDirectionalMiniGame_C::Wormhole_Hide' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, Wormhole_Final_Fail) == 0x000380, "Member 'UWBP_CoreDirectionalMiniGame_C::Wormhole_Final_Fail' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, Wormhole_Final_Success) == 0x000388, "Member 'UWBP_CoreDirectionalMiniGame_C::Wormhole_Final_Success' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, Wormhole_Opening) == 0x000390, "Member 'UWBP_CoreDirectionalMiniGame_C::Wormhole_Opening' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SkullMerchant_Final_Fail) == 0x000398, "Member 'UWBP_CoreDirectionalMiniGame_C::SkullMerchant_Final_Fail' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SkullMerchant_Final_Success) == 0x0003A0, "Member 'UWBP_CoreDirectionalMiniGame_C::SkullMerchant_Final_Success' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SkullMerchant_Opening) == 0x0003A8, "Member 'UWBP_CoreDirectionalMiniGame_C::SkullMerchant_Opening' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, Background) == 0x0003B0, "Member 'UWBP_CoreDirectionalMiniGame_C::Background' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, Results) == 0x0003B8, "Member 'UWBP_CoreDirectionalMiniGame_C::Results' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, RetainerBox) == 0x0003C0, "Member 'UWBP_CoreDirectionalMiniGame_C::RetainerBox' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, IsMinigameInProgressCached) == 0x0003C8, "Member 'UWBP_CoreDirectionalMiniGame_C::IsMinigameInProgressCached' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, FinalSuccessAnimDuration) == 0x0003D0, "Member 'UWBP_CoreDirectionalMiniGame_C::FinalSuccessAnimDuration' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, FinalSuccessItemDelayScaler) == 0x0003D8, "Member 'UWBP_CoreDirectionalMiniGame_C::FinalSuccessItemDelayScaler' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, FinalFailureItemDelayMax) == 0x0003E0, "Member 'UWBP_CoreDirectionalMiniGame_C::FinalFailureItemDelayMax' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SM_ResultsFailedColor) == 0x0003E8, "Member 'UWBP_CoreDirectionalMiniGame_C::SM_ResultsFailedColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SM_ResultsSuccessColor) == 0x0003F8, "Member 'UWBP_CoreDirectionalMiniGame_C::SM_ResultsSuccessColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SM_MPC_Background) == 0x000408, "Member 'UWBP_CoreDirectionalMiniGame_C::SM_MPC_Background' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SM_GlitchWaveName) == 0x000410, "Member 'UWBP_CoreDirectionalMiniGame_C::SM_GlitchWaveName' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SM_CollapseWaveName) == 0x00041C, "Member 'UWBP_CoreDirectionalMiniGame_C::SM_CollapseWaveName' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SM_CollapseScaleName) == 0x000428, "Member 'UWBP_CoreDirectionalMiniGame_C::SM_CollapseScaleName' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SM_SpeedName) == 0x000434, "Member 'UWBP_CoreDirectionalMiniGame_C::SM_SpeedName' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, SM_GlitchValueName) == 0x000440, "Member 'UWBP_CoreDirectionalMiniGame_C::SM_GlitchValueName' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, DebugNbItems) == 0x00044C, "Member 'UWBP_CoreDirectionalMiniGame_C::DebugNbItems' has a wrong offset!");
static_assert(offsetof(UWBP_CoreDirectionalMiniGame_C, DebugType) == 0x000450, "Member 'UWBP_CoreDirectionalMiniGame_C::DebugType' has a wrong offset!");

}

