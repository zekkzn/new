#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheGhostface

#include "Basic.hpp"

#include "DBDInteraction_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "TheGhostface_structs.hpp"
#include "DBDCompetence_classes.hpp"
#include "Engine_classes.hpp"
#include "DBDAttack_classes.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "GameplayTagUtilities_structs.hpp"
#include "StatSystem_structs.hpp"
#include "DBDAnimation_classes.hpp"


namespace SDK
{

// Class TheGhostface.GhostStalkedComponent
// 0x0280 (0x0328 - 0x00A8)
class UGhostStalkedComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnIsMarkedChanged;                                 // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnIsSpottingKillerChanged;                         // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class UStatusEffect>              _ghostMarkedEffectClass;                           // 0x00D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UStatusEffect>              _ghostKillerInstinctClass;                         // 0x00D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTagStateBool                          _isMarked;                                         // 0x00E0(0x0048)(Net, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          _ghostKillerInstinctEffect;                        // 0x0130(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x30];                                     // 0x0138(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _markTimer;                                        // 0x0168(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _killerInstinctDuration;                           // 0x0170(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _markDuration;                                     // 0x01F0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _stalkPointsDepleteDelay;                          // 0x0270(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class ASlasherPlayer*                         _killer;                                           // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStalkedComponent*                      _stalkedComponent;                                 // 0x02A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2A8[0x80];                                     // 0x02A8(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnStalkedChargeFull(bool COMPLETED, const TArray<class AActor*>& InstigatorsForCompletion);
	void Client_OnSpotKiller();
	void DBD_DebugGhost(bool Debug);
	void Initialize(class ASlasherPlayer* Killer);
	void Local_OnSpotKiller();
	void OnIsMarkedChanged__DelegateSignature(bool IsMarked);
	void OnIsSpottingKiller__DelegateSignature(bool IsSpotting);
	void OnKillerSpottedChanged(class ADBDPlayer* Spotter, bool Spotted);
	void OnLocallyObservedChanged(class ADBDPlayer* Player);

	float GetMeterPercentage() const;
	bool IsMarked() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostStalkedComponent">();
	}
	static class UGhostStalkedComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostStalkedComponent>();
	}
};
static_assert(alignof(UGhostStalkedComponent) == 0x000008, "Wrong alignment on UGhostStalkedComponent");
static_assert(sizeof(UGhostStalkedComponent) == 0x000328, "Wrong size on UGhostStalkedComponent");
static_assert(offsetof(UGhostStalkedComponent, OnIsMarkedChanged) == 0x0000B0, "Member 'UGhostStalkedComponent::OnIsMarkedChanged' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, OnIsSpottingKillerChanged) == 0x0000C0, "Member 'UGhostStalkedComponent::OnIsSpottingKillerChanged' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _ghostMarkedEffectClass) == 0x0000D0, "Member 'UGhostStalkedComponent::_ghostMarkedEffectClass' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _ghostKillerInstinctClass) == 0x0000D8, "Member 'UGhostStalkedComponent::_ghostKillerInstinctClass' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _isMarked) == 0x0000E0, "Member 'UGhostStalkedComponent::_isMarked' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _ghostKillerInstinctEffect) == 0x000130, "Member 'UGhostStalkedComponent::_ghostKillerInstinctEffect' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _markTimer) == 0x000168, "Member 'UGhostStalkedComponent::_markTimer' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _killerInstinctDuration) == 0x000170, "Member 'UGhostStalkedComponent::_killerInstinctDuration' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _markDuration) == 0x0001F0, "Member 'UGhostStalkedComponent::_markDuration' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _stalkPointsDepleteDelay) == 0x000270, "Member 'UGhostStalkedComponent::_stalkPointsDepleteDelay' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _killer) == 0x000298, "Member 'UGhostStalkedComponent::_killer' has a wrong offset!");
static_assert(offsetof(UGhostStalkedComponent, _stalkedComponent) == 0x0002A0, "Member 'UGhostStalkedComponent::_stalkedComponent' has a wrong offset!");

// Class TheGhostface.Addon_Ghost_DriversLicense
// 0x0060 (0x0348 - 0x02E8)
class UAddon_Ghost_DriversLicense final : public UItemAddon
{
public:
	struct FDBDTunableRowHandle                   _progressLoss;                                     // 0x02E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _blockedTime;                                      // 0x0310(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x10];                                     // 0x0338(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Ghost_DriversLicense">();
	}
	static class UAddon_Ghost_DriversLicense* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Ghost_DriversLicense>();
	}
};
static_assert(alignof(UAddon_Ghost_DriversLicense) == 0x000008, "Wrong alignment on UAddon_Ghost_DriversLicense");
static_assert(sizeof(UAddon_Ghost_DriversLicense) == 0x000348, "Wrong size on UAddon_Ghost_DriversLicense");
static_assert(offsetof(UAddon_Ghost_DriversLicense, _progressLoss) == 0x0002E8, "Member 'UAddon_Ghost_DriversLicense::_progressLoss' has a wrong offset!");
static_assert(offsetof(UAddon_Ghost_DriversLicense, _blockedTime) == 0x000310, "Member 'UAddon_Ghost_DriversLicense::_blockedTime' has a wrong offset!");

// Class TheGhostface.Addon_Ghost_OlsensAddressBook
// 0x0000 (0x0310 - 0x0310)
class UAddon_Ghost_OlsensAddressBook final : public UImposeStatusEffectOnEventAddon
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_Ghost_OlsensAddressBook">();
	}
	static class UAddon_Ghost_OlsensAddressBook* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_Ghost_OlsensAddressBook>();
	}
};
static_assert(alignof(UAddon_Ghost_OlsensAddressBook) == 0x000008, "Wrong alignment on UAddon_Ghost_OlsensAddressBook");
static_assert(sizeof(UAddon_Ghost_OlsensAddressBook) == 0x000310, "Wrong size on UAddon_Ghost_OlsensAddressBook");

// Class TheGhostface.GhostChargeStalkModeInteraction
// 0x0010 (0x0790 - 0x0780)
class UGhostChargeStalkModeInteraction final : public UBaseStalkModeInteraction
{
public:
	uint8                                         Pad_780[0x10];                                     // 0x0780(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UGhostStealthComponent* GetStealthComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostChargeStalkModeInteraction">();
	}
	static class UGhostChargeStalkModeInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostChargeStalkModeInteraction>();
	}
};
static_assert(alignof(UGhostChargeStalkModeInteraction) == 0x000010, "Wrong alignment on UGhostChargeStalkModeInteraction");
static_assert(sizeof(UGhostChargeStalkModeInteraction) == 0x000790, "Wrong size on UGhostChargeStalkModeInteraction");

// Class TheGhostface.GhostFaceAttackPicker
// 0x0000 (0x00A8 - 0x00A8)
class UGhostFaceAttackPicker final : public USlasherAttackPickerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostFaceAttackPicker">();
	}
	static class UGhostFaceAttackPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostFaceAttackPicker>();
	}
};
static_assert(alignof(UGhostFaceAttackPicker) == 0x000008, "Wrong alignment on UGhostFaceAttackPicker");
static_assert(sizeof(UGhostFaceAttackPicker) == 0x0000A8, "Wrong size on UGhostFaceAttackPicker");

// Class TheGhostface.GhostfaceCrouchAttack
// 0x0000 (0x0420 - 0x0420)
class UGhostfaceCrouchAttack final : public UPounceAttack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostfaceCrouchAttack">();
	}
	static class UGhostfaceCrouchAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostfaceCrouchAttack>();
	}
};
static_assert(alignof(UGhostfaceCrouchAttack) == 0x000010, "Wrong alignment on UGhostfaceCrouchAttack");
static_assert(sizeof(UGhostfaceCrouchAttack) == 0x000420, "Wrong size on UGhostfaceCrouchAttack");

// Class TheGhostface.GhostKillerAnalyticsComponent
// 0x0158 (0x0200 - 0x00A8)
class UGhostKillerAnalyticsComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x38];                                      // 0x00A8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGhostKillerAnalytics                  _ghostKillerAnalytics;                             // 0x00E0(0x0100)(Net, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x20];                                     // 0x01E0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnPreAttackSuccess(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData);
	void Authority_OnStalkChargePercentChanged(class UChargeableComponent* ChargeableComponent, float PercentCompletionChange, float TotalPercentComplete);
	void Local_OnIsStealthChanged(bool IsStealth);
	void Local_OnLeanStateChanged(ELeanState LeanState);
	void Local_OnStalkModeChanged(bool IsInStalkMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostKillerAnalyticsComponent">();
	}
	static class UGhostKillerAnalyticsComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostKillerAnalyticsComponent>();
	}
};
static_assert(alignof(UGhostKillerAnalyticsComponent) == 0x000008, "Wrong alignment on UGhostKillerAnalyticsComponent");
static_assert(sizeof(UGhostKillerAnalyticsComponent) == 0x000200, "Wrong size on UGhostKillerAnalyticsComponent");
static_assert(offsetof(UGhostKillerAnalyticsComponent, _ghostKillerAnalytics) == 0x0000E0, "Member 'UGhostKillerAnalyticsComponent::_ghostKillerAnalytics' has a wrong offset!");

// Class TheGhostface.GhostStalkPowerComponent
// 0x0178 (0x0220 - 0x00A8)
class UGhostStalkPowerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x48];                                      // 0x00A8(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UStalkerComponent*                      _stalkerComponent;                                 // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSoftClassPtr<class UClass>                   _ghostStalkedComponentClassPtr;                    // 0x00F8(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _crouchAttackRequiredTimeSeconds;                  // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_134[0xC];                                      // 0x0134(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _debugMode;                                        // 0x0140(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _ghostStalkSpeedStatusEffectClass;                 // 0x0148(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _maxStalkPointsPerSurvivor;                        // 0x0150(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _survivorMaximumSightDistance;                     // 0x0178(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x28];                                     // 0x01F8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnIsCrouchedChanged(bool IsCrouched);
	void Authority_OnStalkModeChanged(bool IsInStalkMode);
	void OnLeanStateChanged(ELeanState LeanState);

	void RefreshSurvivorMaximumSightDistance() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostStalkPowerComponent">();
	}
	static class UGhostStalkPowerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostStalkPowerComponent>();
	}
};
static_assert(alignof(UGhostStalkPowerComponent) == 0x000008, "Wrong alignment on UGhostStalkPowerComponent");
static_assert(sizeof(UGhostStalkPowerComponent) == 0x000220, "Wrong size on UGhostStalkPowerComponent");
static_assert(offsetof(UGhostStalkPowerComponent, _stalkerComponent) == 0x0000F0, "Member 'UGhostStalkPowerComponent::_stalkerComponent' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _ghostStalkedComponentClassPtr) == 0x0000F8, "Member 'UGhostStalkPowerComponent::_ghostStalkedComponentClassPtr' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _crouchAttackRequiredTimeSeconds) == 0x000130, "Member 'UGhostStalkPowerComponent::_crouchAttackRequiredTimeSeconds' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _debugMode) == 0x000140, "Member 'UGhostStalkPowerComponent::_debugMode' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _ghostStalkSpeedStatusEffectClass) == 0x000148, "Member 'UGhostStalkPowerComponent::_ghostStalkSpeedStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _maxStalkPointsPerSurvivor) == 0x000150, "Member 'UGhostStalkPowerComponent::_maxStalkPointsPerSurvivor' has a wrong offset!");
static_assert(offsetof(UGhostStalkPowerComponent, _survivorMaximumSightDistance) == 0x000178, "Member 'UGhostStalkPowerComponent::_survivorMaximumSightDistance' has a wrong offset!");

// Class TheGhostface.GhostStealthComponent
// 0x02F0 (0x0398 - 0x00A8)
class UGhostStealthComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnSuccessfulAttackInStealth;                       // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStealthStateChanged;                             // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnIsStealthChanged;                                // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnIsBeingSpotChanged;                              // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             Local_OnStealthCancelledByPlayer;                  // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EGhostStealthState                            _stealthState;                                     // 0x0100(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_101[0x67];                                     // 0x0101(0x0067)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _cooldownTimer;                                    // 0x0168(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class ACharacter*, TWeakObjectPtr<class UScreenIndicatorWorldMarkerComponent>> _markers;                                          // 0x0170(0x0050)(ExportObject, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _ghostStealthMovementSpeedStatusEffectClass;       // 0x01C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _cooldownDuration;                                 // 0x01C8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FNonTunableStat                        _keepStealthOnAttackMiss;                          // 0x0248(0x0060)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _markerMinVisibleDistance;                         // 0x02A8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _markerLifetime;                                   // 0x02D0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _stealthTerrorRadius;                              // 0x02F8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _markerMaxAngleOffset;                             // 0x0320(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _useKillerInstinctWhenSpotted;                     // 0x0324(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_325[0x3];                                      // 0x0325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class USightRevealableComponent*              _sightRevealableComponent;                         // 0x0328(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStalkerComponent*                      _stalkerComponent;                                 // 0x0330(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_338[0x60];                                     // 0x0338(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_ResetGhostStealth();
	void Authority_TryActivateStealth();
	void Client_SpawnMarkerOnCharacter(class ACharacter* Revealer);
	void DBD_ResetGhostStealth();
	void Multicast_BroadcastOnSuccessfulAttackInStealth(class ADBDPlayer* Target);
	void Multicast_OnIsBeingSpottedChanged(class ADBDPlayer* Spotter, bool IsBeingSpotted, bool OnlyUpdateSurvivor);
	void Multicast_OnPlayerSpottedKiller(class ADBDPlayer* Spotter);
	void OnIsBeingSpotChanged__DelegateSignature(class ADBDPlayer* Spotter, bool IsBeingSpot);
	void OnIsStealthChanged__DelegateSignature(bool IsStealth);
	void OnRep_StealthState(EGhostStealthState PreviousState);
	void OnStealthCancelledByPlayer__DelegateSignature(class ADBDPlayer* Player);
	void OnStealthStateChanged__DelegateSignature(EGhostStealthState StealthState);
	void OnSuccessfulAttackInStealth__DelegateSignature(class ADBDPlayer* Target);

	float GetStealthChargePercent() const;
	EGhostStealthState GetStealthState() const;
	bool IsStealth() const;
	bool IsStealthReadyToActivate() const;
	void SetRedStainVisibility(const bool Visible) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GhostStealthComponent">();
	}
	static class UGhostStealthComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGhostStealthComponent>();
	}
};
static_assert(alignof(UGhostStealthComponent) == 0x000008, "Wrong alignment on UGhostStealthComponent");
static_assert(sizeof(UGhostStealthComponent) == 0x000398, "Wrong size on UGhostStealthComponent");
static_assert(offsetof(UGhostStealthComponent, OnSuccessfulAttackInStealth) == 0x0000B0, "Member 'UGhostStealthComponent::OnSuccessfulAttackInStealth' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, OnStealthStateChanged) == 0x0000C0, "Member 'UGhostStealthComponent::OnStealthStateChanged' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, OnIsStealthChanged) == 0x0000D0, "Member 'UGhostStealthComponent::OnIsStealthChanged' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, OnIsBeingSpotChanged) == 0x0000E0, "Member 'UGhostStealthComponent::OnIsBeingSpotChanged' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, Local_OnStealthCancelledByPlayer) == 0x0000F0, "Member 'UGhostStealthComponent::Local_OnStealthCancelledByPlayer' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _stealthState) == 0x000100, "Member 'UGhostStealthComponent::_stealthState' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _cooldownTimer) == 0x000168, "Member 'UGhostStealthComponent::_cooldownTimer' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _markers) == 0x000170, "Member 'UGhostStealthComponent::_markers' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _ghostStealthMovementSpeedStatusEffectClass) == 0x0001C0, "Member 'UGhostStealthComponent::_ghostStealthMovementSpeedStatusEffectClass' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _cooldownDuration) == 0x0001C8, "Member 'UGhostStealthComponent::_cooldownDuration' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _keepStealthOnAttackMiss) == 0x000248, "Member 'UGhostStealthComponent::_keepStealthOnAttackMiss' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _markerMinVisibleDistance) == 0x0002A8, "Member 'UGhostStealthComponent::_markerMinVisibleDistance' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _markerLifetime) == 0x0002D0, "Member 'UGhostStealthComponent::_markerLifetime' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _stealthTerrorRadius) == 0x0002F8, "Member 'UGhostStealthComponent::_stealthTerrorRadius' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _markerMaxAngleOffset) == 0x000320, "Member 'UGhostStealthComponent::_markerMaxAngleOffset' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _useKillerInstinctWhenSpotted) == 0x000324, "Member 'UGhostStealthComponent::_useKillerInstinctWhenSpotted' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _sightRevealableComponent) == 0x000328, "Member 'UGhostStealthComponent::_sightRevealableComponent' has a wrong offset!");
static_assert(offsetof(UGhostStealthComponent, _stalkerComponent) == 0x000330, "Member 'UGhostStealthComponent::_stalkerComponent' has a wrong offset!");

// Class TheGhostface.K16AnimInstance
// 0x0010 (0x0730 - 0x0720)
class UK16AnimInstance final : public UKillerAnimInstance
{
public:
	bool                                          _isInStalkMode;                                    // 0x0720(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isGhostStealth;                                   // 0x0721(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInChase;                                        // 0x0722(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isStalking;                                       // 0x0723(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _distanceFromCamera;                               // 0x0724(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _leanOffset;                                       // 0x0728(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrouched;                                       // 0x072C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isCrouchPressed;                                  // 0x072D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_72E[0x2];                                      // 0x072E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K16AnimInstance">();
	}
	static class UK16AnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK16AnimInstance>();
	}
};
static_assert(alignof(UK16AnimInstance) == 0x000010, "Wrong alignment on UK16AnimInstance");
static_assert(sizeof(UK16AnimInstance) == 0x000730, "Wrong size on UK16AnimInstance");
static_assert(offsetof(UK16AnimInstance, _isInStalkMode) == 0x000720, "Member 'UK16AnimInstance::_isInStalkMode' has a wrong offset!");
static_assert(offsetof(UK16AnimInstance, _isGhostStealth) == 0x000721, "Member 'UK16AnimInstance::_isGhostStealth' has a wrong offset!");
static_assert(offsetof(UK16AnimInstance, _isInChase) == 0x000722, "Member 'UK16AnimInstance::_isInChase' has a wrong offset!");
static_assert(offsetof(UK16AnimInstance, _isStalking) == 0x000723, "Member 'UK16AnimInstance::_isStalking' has a wrong offset!");
static_assert(offsetof(UK16AnimInstance, _distanceFromCamera) == 0x000724, "Member 'UK16AnimInstance::_distanceFromCamera' has a wrong offset!");
static_assert(offsetof(UK16AnimInstance, _leanOffset) == 0x000728, "Member 'UK16AnimInstance::_leanOffset' has a wrong offset!");
static_assert(offsetof(UK16AnimInstance, _isCrouched) == 0x00072C, "Member 'UK16AnimInstance::_isCrouched' has a wrong offset!");
static_assert(offsetof(UK16AnimInstance, _isCrouchPressed) == 0x00072D, "Member 'UK16AnimInstance::_isCrouchPressed' has a wrong offset!");

// Class TheGhostface.TheGhostUtilities
// 0x0000 (0x0030 - 0x0030)
class UTheGhostUtilities final : public UBlueprintFunctionLibrary
{
public:
	static bool IsKillerStealth(class AActor* Killer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TheGhostUtilities">();
	}
	static class UTheGhostUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTheGhostUtilities>();
	}
};
static_assert(alignof(UTheGhostUtilities) == 0x000008, "Wrong alignment on UTheGhostUtilities");
static_assert(sizeof(UTheGhostUtilities) == 0x000030, "Wrong size on UTheGhostUtilities");

}

