#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Lunar2022

#include "Basic.hpp"

#include "DeadByDaylight_classes.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SpecialEventUtilities_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "Lunar2022_structs.hpp"


namespace SDK
{

// Class Lunar2022.Lunar2022EventComponent
// 0x00F8 (0x01B0 - 0x00B8)
class ULunar2022EventComponent : public URespawningEventComponent
{
public:
	class FName                                   _eventTag;                                         // 0x00B8(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ARedEnvelope>>    _redEnvelopes;                                     // 0x00C8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0xB4];                                      // 0x00D8(0x00B4)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           _scoreNormal;                                      // 0x018C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _scoreJackpot;                                     // 0x0198(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _scoreOwner;                                       // 0x01A4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Authority_OnPlayerFinishPlaying(const class ADBDPlayerState* PlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Lunar2022EventComponent">();
	}
	static class ULunar2022EventComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULunar2022EventComponent>();
	}
};
static_assert(alignof(ULunar2022EventComponent) == 0x000008, "Wrong alignment on ULunar2022EventComponent");
static_assert(sizeof(ULunar2022EventComponent) == 0x0001B0, "Wrong size on ULunar2022EventComponent");
static_assert(offsetof(ULunar2022EventComponent, _eventTag) == 0x0000B8, "Member 'ULunar2022EventComponent::_eventTag' has a wrong offset!");
static_assert(offsetof(ULunar2022EventComponent, _redEnvelopes) == 0x0000C8, "Member 'ULunar2022EventComponent::_redEnvelopes' has a wrong offset!");
static_assert(offsetof(ULunar2022EventComponent, _scoreNormal) == 0x00018C, "Member 'ULunar2022EventComponent::_scoreNormal' has a wrong offset!");
static_assert(offsetof(ULunar2022EventComponent, _scoreJackpot) == 0x000198, "Member 'ULunar2022EventComponent::_scoreJackpot' has a wrong offset!");
static_assert(offsetof(ULunar2022EventComponent, _scoreOwner) == 0x0001A4, "Member 'ULunar2022EventComponent::_scoreOwner' has a wrong offset!");

// Class Lunar2022.RedEnvelope
// 0x00D0 (0x0478 - 0x03A8)
class ARedEnvelope final : public AInteractable
{
public:
	class ADBDPlayerState*                        _ownerPlayerState;                                 // 0x03A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B0[0x8];                                      // 0x03B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRedEnvelopeData                       _redEnvelopeData;                                  // 0x03B8(0x0018)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3D0[0x8];                                      // 0x03D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class URedEnvelopeInteraction*                _redEnvelopeInteraction;                           // 0x03D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URedEnvelopeInteraction*                _redEnvelopeInteractionKiller;                     // 0x03E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _redEnvelopeInteractionChargeable;                 // 0x03E8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _redEnvelopeInteractionChargeableKiller;           // 0x03F0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UInteractor*                            _redEnvelopeInteractor;                            // 0x03F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    _redEnvelopeInteractionZone;                       // 0x0400(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UDBDOutlineComponent*                   _outlineComponent;                                 // 0x0408(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStaticMeshComponent*                   _redEnvelopeMesh;                                  // 0x0410(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _redEnvelopeInteractionSecondsToCharge;            // 0x0418(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _redEnvelopeInteractionSecondsToChargeKiller;      // 0x0440(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ULunar2022EventComponent> _eventComponent;                                   // 0x0468(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class URedEnvelopeOutlineUpdateStrategy*      _redEnvelopeOutlineUpdateStrategy;                 // 0x0470(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoClear, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void Cosmetic_OnAddEmberEffect(const class ADBDPlayer* OwningPlayer);
	void Cosmetic_OnInteractionStart(const class ADBDPlayer* InteractingPlayer, bool IsOwner);
	void Cosmetic_OnInteractionStopped(const class ADBDPlayer* InteractingPlayer, bool IsOwner);
	void Cosmetic_OnInteractionUpdate(const class ADBDPlayer* InteractingPlayer, const float ChargePercent, bool IsOwner);
	void Cosmetic_OnTriggerDisappearingVFX(const class ADBDPlayer* InteractingPlayer, bool IsOwner, bool IsJackpot);
	void Cosmetic_SetBackgroundVFX(bool IsOwner);
	void OnLocallyObservedChanged();
	void OnRep_OwnerPlayerState();
	void OnRep_RedEnvelopeData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RedEnvelope">();
	}
	static class ARedEnvelope* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARedEnvelope>();
	}
};
static_assert(alignof(ARedEnvelope) == 0x000008, "Wrong alignment on ARedEnvelope");
static_assert(sizeof(ARedEnvelope) == 0x000478, "Wrong size on ARedEnvelope");
static_assert(offsetof(ARedEnvelope, _ownerPlayerState) == 0x0003A8, "Member 'ARedEnvelope::_ownerPlayerState' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeData) == 0x0003B8, "Member 'ARedEnvelope::_redEnvelopeData' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeInteraction) == 0x0003D8, "Member 'ARedEnvelope::_redEnvelopeInteraction' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeInteractionKiller) == 0x0003E0, "Member 'ARedEnvelope::_redEnvelopeInteractionKiller' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeInteractionChargeable) == 0x0003E8, "Member 'ARedEnvelope::_redEnvelopeInteractionChargeable' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeInteractionChargeableKiller) == 0x0003F0, "Member 'ARedEnvelope::_redEnvelopeInteractionChargeableKiller' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeInteractor) == 0x0003F8, "Member 'ARedEnvelope::_redEnvelopeInteractor' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeInteractionZone) == 0x000400, "Member 'ARedEnvelope::_redEnvelopeInteractionZone' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _outlineComponent) == 0x000408, "Member 'ARedEnvelope::_outlineComponent' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeMesh) == 0x000410, "Member 'ARedEnvelope::_redEnvelopeMesh' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeInteractionSecondsToCharge) == 0x000418, "Member 'ARedEnvelope::_redEnvelopeInteractionSecondsToCharge' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeInteractionSecondsToChargeKiller) == 0x000440, "Member 'ARedEnvelope::_redEnvelopeInteractionSecondsToChargeKiller' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _eventComponent) == 0x000468, "Member 'ARedEnvelope::_eventComponent' has a wrong offset!");
static_assert(offsetof(ARedEnvelope, _redEnvelopeOutlineUpdateStrategy) == 0x000470, "Member 'ARedEnvelope::_redEnvelopeOutlineUpdateStrategy' has a wrong offset!");

// Class Lunar2022.RedEnvelopeInteraction
// 0x0020 (0x08E0 - 0x08C0)
class URedEnvelopeInteraction final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_8C0[0x20];                                     // 0x08C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RedEnvelopeInteraction">();
	}
	static class URedEnvelopeInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<URedEnvelopeInteraction>();
	}
};
static_assert(alignof(URedEnvelopeInteraction) == 0x000010, "Wrong alignment on URedEnvelopeInteraction");
static_assert(sizeof(URedEnvelopeInteraction) == 0x0008E0, "Wrong size on URedEnvelopeInteraction");

// Class Lunar2022.RedEnvelopeOutlineUpdateStrategy
// 0x0020 (0x00F0 - 0x00D0)
class URedEnvelopeOutlineUpdateStrategy final : public UOutlineUpdateStrategy
{
public:
	struct FLinearColor                           _auraColorOwner;                                   // 0x00D0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLinearColor                           _auraColorNonOwner;                                // 0x00E0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RedEnvelopeOutlineUpdateStrategy">();
	}
	static class URedEnvelopeOutlineUpdateStrategy* GetDefaultObj()
	{
		return GetDefaultObjImpl<URedEnvelopeOutlineUpdateStrategy>();
	}
};
static_assert(alignof(URedEnvelopeOutlineUpdateStrategy) == 0x000008, "Wrong alignment on URedEnvelopeOutlineUpdateStrategy");
static_assert(sizeof(URedEnvelopeOutlineUpdateStrategy) == 0x0000F0, "Wrong size on URedEnvelopeOutlineUpdateStrategy");
static_assert(offsetof(URedEnvelopeOutlineUpdateStrategy, _auraColorOwner) == 0x0000D0, "Member 'URedEnvelopeOutlineUpdateStrategy::_auraColorOwner' has a wrong offset!");
static_assert(offsetof(URedEnvelopeOutlineUpdateStrategy, _auraColorNonOwner) == 0x0000E0, "Member 'URedEnvelopeOutlineUpdateStrategy::_auraColorNonOwner' has a wrong offset!");

}

