#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CorePerk

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "DBDUIViewsCore_classes.hpp"
#include "DBDUIViewInterfaces_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CorePerk.WBP_CorePerk_C
// 0x0100 (0x0458 - 0x0358)
class UWBP_CorePerk_C final : public UCorePerkWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0358(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       CriticalSuccessAnim;                               // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       MediumSuccessAnim;                                 // 0x0368(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       BasicSuccessAnim;                                  // 0x0370(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CriticalFailAnim;                                  // 0x0378(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       CommonDieRoll;                                     // 0x0380(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DieRollOutro;                                      // 0x0388(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       DieRollIntro;                                      // 0x0390(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDBDImage*                              DieIMG;                                            // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDTextBlock*                          DieResultTB;                                       // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              DieSmokeIMG;                                       // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              ImageBG;                                           // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              ImagePerkLevel;                                    // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              LayoutSizeScaleLevel;                              // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UGridPanel*                             RandomSuccessPanel;                                // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CorePerkCooldown_C*                WBP_PerkCooldown;                                  // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	ESlateVisibility                              ImageIndicator2Visibility;                         // 0x03D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              ImageIndicator3Visibility;                         // 0x03D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              ImageIndicator1Visibility;                         // 0x03DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3DB[0x5];                                      // 0x03DB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        PerkPercent;                                       // 0x03E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FPerkViewData                          PerkViewData;                                      // 0x03E8(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void UpdatePerkCooldown(float CooldownValue, bool IsRechargeable, bool IsRechargeableActive);
	void TriggerRandomSuccess(const struct FPerkRandomSuccessViewData& RandomSuccessViewData);
	void SetSlotUnlockLevel(const class FString& DisplayName, int32 UnlockLevel);
	void SetPerkLevel(int32 Level);
	void SetData(const struct FPerkViewData& Param_PerkViewData);
	void PreConstruct(bool IsDesignTime);
	void PlayRandomSuccessAnim(const struct FPerkRandomSuccessViewData& ViewData);
	void Finished_CF47486D4AB251E6D0B420AA95673678();
	void Finished_C5BC621246A20A92535D69BB47381C6C();
	void Finished_A882382E46A2062E50902498492C464A();
	void Finished_A66A7C4F4ECA8C62D3BEC38B2C7C3494();
	void Finished_64965B144DFC8847420A548611B175F0();
	void ExecuteUbergraph_WBP_CorePerk(int32 EntryPoint);
	void ClearData();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CorePerk_C">();
	}
	static class UWBP_CorePerk_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CorePerk_C>();
	}
};
static_assert(alignof(UWBP_CorePerk_C) == 0x000008, "Wrong alignment on UWBP_CorePerk_C");
static_assert(sizeof(UWBP_CorePerk_C) == 0x000458, "Wrong size on UWBP_CorePerk_C");
static_assert(offsetof(UWBP_CorePerk_C, UberGraphFrame) == 0x000358, "Member 'UWBP_CorePerk_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, CriticalSuccessAnim) == 0x000360, "Member 'UWBP_CorePerk_C::CriticalSuccessAnim' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, MediumSuccessAnim) == 0x000368, "Member 'UWBP_CorePerk_C::MediumSuccessAnim' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, BasicSuccessAnim) == 0x000370, "Member 'UWBP_CorePerk_C::BasicSuccessAnim' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, CriticalFailAnim) == 0x000378, "Member 'UWBP_CorePerk_C::CriticalFailAnim' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, CommonDieRoll) == 0x000380, "Member 'UWBP_CorePerk_C::CommonDieRoll' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, DieRollOutro) == 0x000388, "Member 'UWBP_CorePerk_C::DieRollOutro' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, DieRollIntro) == 0x000390, "Member 'UWBP_CorePerk_C::DieRollIntro' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, DieIMG) == 0x000398, "Member 'UWBP_CorePerk_C::DieIMG' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, DieResultTB) == 0x0003A0, "Member 'UWBP_CorePerk_C::DieResultTB' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, DieSmokeIMG) == 0x0003A8, "Member 'UWBP_CorePerk_C::DieSmokeIMG' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, ImageBG) == 0x0003B0, "Member 'UWBP_CorePerk_C::ImageBG' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, ImagePerkLevel) == 0x0003B8, "Member 'UWBP_CorePerk_C::ImagePerkLevel' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, LayoutSizeScaleLevel) == 0x0003C0, "Member 'UWBP_CorePerk_C::LayoutSizeScaleLevel' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, RandomSuccessPanel) == 0x0003C8, "Member 'UWBP_CorePerk_C::RandomSuccessPanel' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, WBP_PerkCooldown) == 0x0003D0, "Member 'UWBP_CorePerk_C::WBP_PerkCooldown' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, ImageIndicator2Visibility) == 0x0003D8, "Member 'UWBP_CorePerk_C::ImageIndicator2Visibility' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, ImageIndicator3Visibility) == 0x0003D9, "Member 'UWBP_CorePerk_C::ImageIndicator3Visibility' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, ImageIndicator1Visibility) == 0x0003DA, "Member 'UWBP_CorePerk_C::ImageIndicator1Visibility' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, PerkPercent) == 0x0003E0, "Member 'UWBP_CorePerk_C::PerkPercent' has a wrong offset!");
static_assert(offsetof(UWBP_CorePerk_C, PerkViewData) == 0x0003E8, "Member 'UWBP_CorePerk_C::PerkViewData' has a wrong offset!");

}

