#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewsMobile

#include "Basic.hpp"

#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// Enum DBDUIViewsMobile.EActionOnFriendType
// NumValues: 0x0011
enum class EActionOnFriendType : uint8
{
	None                                     = 0,
	SendFriendRequest                        = 1,
	ConfirmFriendRequest                     = 2,
	DeclineFriendRequest                     = 3,
	RemoveFriend                             = 4,
	AddToFavorite                            = 5,
	RemoveToFavorite                         = 6,
	Mute                                     = 7,
	Unmute                                   = 8,
	InviteToParty                            = 9,
	CancelInviteToParty                      = 10,
	Select                                   = 11,
	ConfirmAction                            = 12,
	DeclineAction                            = 13,
	RemovePlayerFromParty                    = 14,
	Count                                    = 15,
	EActionOnFriendType_MAX                  = 16,
};

// Enum DBDUIViewsMobile.EAtlantaFriendUIStatus
// NumValues: 0x0009
enum class EAtlantaFriendUIStatus : uint8
{
	Undefined                                = 0,
	FriendSuggestion                         = 1,
	FriendRequestSent                        = 2,
	FriendRequestReceived                    = 3,
	Available                                = 4,
	InAMatch                                 = 5,
	Offline                                  = 6,
	AddFriendToSeeStatus                     = 7,
	EAtlantaFriendUIStatus_MAX               = 8,
};

// Enum DBDUIViewsMobile.ECustomMatchDifficulty
// NumValues: 0x0008
enum class ECustomMatchDifficulty : uint8
{
	Easy                                     = 0,
	Medium                                   = 1,
	Hard                                     = 2,
	Suggested                                = 3,
	Random                                   = 4,
	None                                     = 5,
	Max                                      = 6,
	ECustomMatchDifficulty_MAX               = 7,
};

// Enum DBDUIViewsMobile.ECustomMatchTab
// NumValues: 0x0008
enum class ECustomMatchTab : uint8
{
	Perks                                    = 0,
	ItemsAndAddons                           = 1,
	Offerings                                = 2,
	Maps                                     = 3,
	BotDifficulty                            = 4,
	BotCharacter                             = 5,
	Count                                    = 6,
	ECustomMatchTab_MAX                      = 7,
};

// Enum DBDUIViewsMobile.ECustomMatchOptions
// NumValues: 0x0007
enum class ECustomMatchOptions : uint8
{
	All                                      = 0,
	None                                     = 1,
	Owned                                    = 2,
	Random                                   = 3,
	Special                                  = 4,
	Count                                    = 5,
	ECustomMatchOptions_MAX                  = 6,
};

// Enum DBDUIViewsMobile.EFriendTypeButton
// NumValues: 0x0003
enum class EFriendTypeButton : uint8
{
	InvitePlayerToParty                      = 0,
	RemovePlayerFromParty                    = 1,
	EFriendTypeButton_MAX                    = 2,
};

// ScriptStruct DBDUIViewsMobile.AtlantaFriendUIData
// 0x0068 (0x0068 - 0x0000)
struct alignas(0x08) FAtlantaFriendUIData final
{
public:
	uint8                                         Pad_0[0x68];                                       // 0x0000(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAtlantaFriendUIData) == 0x000008, "Wrong alignment on FAtlantaFriendUIData");
static_assert(sizeof(FAtlantaFriendUIData) == 0x000068, "Wrong size on FAtlantaFriendUIData");

// ScriptStruct DBDUIViewsMobile.ActionOnFriend
// 0x0078 (0x0078 - 0x0000)
struct FActionOnFriend final
{
public:
	EActionOnFriendType                           ActionToProceed;                                   // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAtlantaFriendUIData                   AtlantaFriendDataToUpdate;                         // 0x0008(0x0068)(NativeAccessSpecifierPublic)
	class UUMGBaseFriendListElement*              ActionOwner;                                       // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActionOnFriend) == 0x000008, "Wrong alignment on FActionOnFriend");
static_assert(sizeof(FActionOnFriend) == 0x000078, "Wrong size on FActionOnFriend");
static_assert(offsetof(FActionOnFriend, ActionToProceed) == 0x000000, "Member 'FActionOnFriend::ActionToProceed' has a wrong offset!");
static_assert(offsetof(FActionOnFriend, AtlantaFriendDataToUpdate) == 0x000008, "Member 'FActionOnFriend::AtlantaFriendDataToUpdate' has a wrong offset!");
static_assert(offsetof(FActionOnFriend, ActionOwner) == 0x000070, "Member 'FActionOnFriend::ActionOwner' has a wrong offset!");

// ScriptStruct DBDUIViewsMobile.FriendStatusUIData
// 0x0058 (0x0060 - 0x0008)
struct FFriendStatusUIData final : public FDBDTableRowBase
{
public:
	EAtlantaFriendUIStatus                        FriendStatus;                                      // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              StatusIcon;                                        // 0x0010(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   StatusText;                                        // 0x0048(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFriendStatusUIData) == 0x000008, "Wrong alignment on FFriendStatusUIData");
static_assert(sizeof(FFriendStatusUIData) == 0x000060, "Wrong size on FFriendStatusUIData");
static_assert(offsetof(FFriendStatusUIData, FriendStatus) == 0x000008, "Member 'FFriendStatusUIData::FriendStatus' has a wrong offset!");
static_assert(offsetof(FFriendStatusUIData, StatusIcon) == 0x000010, "Member 'FFriendStatusUIData::StatusIcon' has a wrong offset!");
static_assert(offsetof(FFriendStatusUIData, StatusText) == 0x000048, "Member 'FFriendStatusUIData::StatusText' has a wrong offset!");

// ScriptStruct DBDUIViewsMobile.MatchConfigDifficultyData
// 0x0038 (0x0038 - 0x0000)
struct FMatchConfigDifficultyData final
{
public:
	TSoftObjectPtr<class UPaperSprite>            DifficultyIcon;                                    // 0x0000(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchConfigDifficultyData) == 0x000008, "Wrong alignment on FMatchConfigDifficultyData");
static_assert(sizeof(FMatchConfigDifficultyData) == 0x000038, "Wrong size on FMatchConfigDifficultyData");
static_assert(offsetof(FMatchConfigDifficultyData, DifficultyIcon) == 0x000000, "Member 'FMatchConfigDifficultyData::DifficultyIcon' has a wrong offset!");

// ScriptStruct DBDUIViewsMobile.MatchOptionAssetData
// 0x0050 (0x0050 - 0x0000)
struct FMatchOptionAssetData final
{
public:
	class FText                                   TextName;                                          // 0x0000(0x0018)(Edit, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPaperSprite>            Icon;                                              // 0x0018(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchOptionAssetData) == 0x000008, "Wrong alignment on FMatchOptionAssetData");
static_assert(sizeof(FMatchOptionAssetData) == 0x000050, "Wrong size on FMatchOptionAssetData");
static_assert(offsetof(FMatchOptionAssetData, TextName) == 0x000000, "Member 'FMatchOptionAssetData::TextName' has a wrong offset!");
static_assert(offsetof(FMatchOptionAssetData, Icon) == 0x000018, "Member 'FMatchOptionAssetData::Icon' has a wrong offset!");

// ScriptStruct DBDUIViewsMobile.MatchConfigOptionUIData
// 0x0070 (0x0070 - 0x0000)
struct FMatchConfigOptionUIData final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringId;                                          // 0x0008(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   OptionName;                                        // 0x0018(0x0018)(Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPaperSprite>            OptionIcon;                                        // 0x0030(0x0038)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECustomMatchOptions                           OptionType;                                        // 0x0068(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchConfigOptionUIData) == 0x000008, "Wrong alignment on FMatchConfigOptionUIData");
static_assert(sizeof(FMatchConfigOptionUIData) == 0x000070, "Wrong size on FMatchConfigOptionUIData");
static_assert(offsetof(FMatchConfigOptionUIData, ID) == 0x000000, "Member 'FMatchConfigOptionUIData::ID' has a wrong offset!");
static_assert(offsetof(FMatchConfigOptionUIData, StringId) == 0x000008, "Member 'FMatchConfigOptionUIData::StringId' has a wrong offset!");
static_assert(offsetof(FMatchConfigOptionUIData, OptionName) == 0x000018, "Member 'FMatchConfigOptionUIData::OptionName' has a wrong offset!");
static_assert(offsetof(FMatchConfigOptionUIData, OptionIcon) == 0x000030, "Member 'FMatchConfigOptionUIData::OptionIcon' has a wrong offset!");
static_assert(offsetof(FMatchConfigOptionUIData, OptionType) == 0x000068, "Member 'FMatchConfigOptionUIData::OptionType' has a wrong offset!");

// ScriptStruct DBDUIViewsMobile.MatchConfigTabData
// 0x00C0 (0x00C0 - 0x0000)
struct FMatchConfigTabData final
{
public:
	TSoftClassPtr<class UClass>                   Widget;                                            // 0x0000(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UPaperSprite>            TabIcon;                                           // 0x0038(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECustomMatchOptions, int32>              DefaultOptionsID;                                  // 0x0070(0x0050)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchConfigTabData) == 0x000008, "Wrong alignment on FMatchConfigTabData");
static_assert(sizeof(FMatchConfigTabData) == 0x0000C0, "Wrong size on FMatchConfigTabData");
static_assert(offsetof(FMatchConfigTabData, Widget) == 0x000000, "Member 'FMatchConfigTabData::Widget' has a wrong offset!");
static_assert(offsetof(FMatchConfigTabData, TabIcon) == 0x000038, "Member 'FMatchConfigTabData::TabIcon' has a wrong offset!");
static_assert(offsetof(FMatchConfigTabData, DefaultOptionsID) == 0x000070, "Member 'FMatchConfigTabData::DefaultOptionsID' has a wrong offset!");

// ScriptStruct DBDUIViewsMobile.CustomMatchTabConfig
// 0x0048 (0x0048 - 0x0000)
struct FCustomMatchTabConfig final
{
public:
	int32                                         ItemWidth;                                         // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemHeight;                                        // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Row;                                               // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Column;                                            // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   OptionButtonClass;                                 // 0x0010(0x0038)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomMatchTabConfig) == 0x000008, "Wrong alignment on FCustomMatchTabConfig");
static_assert(sizeof(FCustomMatchTabConfig) == 0x000048, "Wrong size on FCustomMatchTabConfig");
static_assert(offsetof(FCustomMatchTabConfig, ItemWidth) == 0x000000, "Member 'FCustomMatchTabConfig::ItemWidth' has a wrong offset!");
static_assert(offsetof(FCustomMatchTabConfig, ItemHeight) == 0x000004, "Member 'FCustomMatchTabConfig::ItemHeight' has a wrong offset!");
static_assert(offsetof(FCustomMatchTabConfig, Row) == 0x000008, "Member 'FCustomMatchTabConfig::Row' has a wrong offset!");
static_assert(offsetof(FCustomMatchTabConfig, Column) == 0x00000C, "Member 'FCustomMatchTabConfig::Column' has a wrong offset!");
static_assert(offsetof(FCustomMatchTabConfig, OptionButtonClass) == 0x000010, "Member 'FCustomMatchTabConfig::OptionButtonClass' has a wrong offset!");

}

