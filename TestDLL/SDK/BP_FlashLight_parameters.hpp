#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_FlashLight

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_FlashLight.BP_Flashlight_C.UpdateNoiseSettings
// 0x0018 (0x0018 - 0x0000)
struct BP_Flashlight_C_UpdateNoiseSettings final
{
public:
	double                                        CallFunc_GetEffectiveBeamInaccuracyAmplitudeMultiplier_Result; // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetEffectiveBeamInaccuracyFrequencyMultiplier_Result; // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetNoiseAmplitudeMultiplier_multiplier_ImplicitCast; // 0x0010(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetNoiseFrequencyMultiplier_multiplier_ImplicitCast; // 0x0014(0x0004)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_UpdateNoiseSettings) == 0x000008, "Wrong alignment on BP_Flashlight_C_UpdateNoiseSettings");
static_assert(sizeof(BP_Flashlight_C_UpdateNoiseSettings) == 0x000018, "Wrong size on BP_Flashlight_C_UpdateNoiseSettings");
static_assert(offsetof(BP_Flashlight_C_UpdateNoiseSettings, CallFunc_GetEffectiveBeamInaccuracyAmplitudeMultiplier_Result) == 0x000000, "Member 'BP_Flashlight_C_UpdateNoiseSettings::CallFunc_GetEffectiveBeamInaccuracyAmplitudeMultiplier_Result' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_UpdateNoiseSettings, CallFunc_GetEffectiveBeamInaccuracyFrequencyMultiplier_Result) == 0x000008, "Member 'BP_Flashlight_C_UpdateNoiseSettings::CallFunc_GetEffectiveBeamInaccuracyFrequencyMultiplier_Result' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_UpdateNoiseSettings, CallFunc_SetNoiseAmplitudeMultiplier_multiplier_ImplicitCast) == 0x000010, "Member 'BP_Flashlight_C_UpdateNoiseSettings::CallFunc_SetNoiseAmplitudeMultiplier_multiplier_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_UpdateNoiseSettings, CallFunc_SetNoiseFrequencyMultiplier_multiplier_ImplicitCast) == 0x000014, "Member 'BP_Flashlight_C_UpdateNoiseSettings::CallFunc_SetNoiseFrequencyMultiplier_multiplier_ImplicitCast' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.UpdateAimableSettings
// 0x0004 (0x0004 - 0x0000)
struct BP_Flashlight_C_UpdateAimableSettings final
{
public:
	float                                         CallFunc_GetEffectiveConeLength_ReturnValue;       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_UpdateAimableSettings) == 0x000004, "Wrong alignment on BP_Flashlight_C_UpdateAimableSettings");
static_assert(sizeof(BP_Flashlight_C_UpdateAimableSettings) == 0x000004, "Wrong size on BP_Flashlight_C_UpdateAimableSettings");
static_assert(offsetof(BP_Flashlight_C_UpdateAimableSettings, CallFunc_GetEffectiveConeLength_ReturnValue) == 0x000000, "Member 'BP_Flashlight_C_UpdateAimableSettings::CallFunc_GetEffectiveConeLength_ReturnValue' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.SetVisibilityEvent
// 0x0001 (0x0001 - 0x0000)
struct BP_Flashlight_C_SetVisibilityEvent final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_SetVisibilityEvent) == 0x000001, "Wrong alignment on BP_Flashlight_C_SetVisibilityEvent");
static_assert(sizeof(BP_Flashlight_C_SetVisibilityEvent) == 0x000001, "Wrong size on BP_Flashlight_C_SetVisibilityEvent");
static_assert(offsetof(BP_Flashlight_C_SetVisibilityEvent, Visibility) == 0x000000, "Member 'BP_Flashlight_C_SetVisibilityEvent::Visibility' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.PrintTextStat
// 0x0048 (0x0048 - 0x0000)
struct BP_Flashlight_C_PrintTextStat final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 Value;                                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_PrintTextStat) == 0x000008, "Wrong alignment on BP_Flashlight_C_PrintTextStat");
static_assert(sizeof(BP_Flashlight_C_PrintTextStat) == 0x000048, "Wrong size on BP_Flashlight_C_PrintTextStat");
static_assert(offsetof(BP_Flashlight_C_PrintTextStat, Title) == 0x000000, "Member 'BP_Flashlight_C_PrintTextStat::Title' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_PrintTextStat, Value) == 0x000010, "Member 'BP_Flashlight_C_PrintTextStat::Value' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_PrintTextStat, CallFunc_Concat_StrStr_ReturnValue) == 0x000020, "Member 'BP_Flashlight_C_PrintTextStat::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_PrintTextStat, CallFunc_Add_IntInt_ReturnValue) == 0x000030, "Member 'BP_Flashlight_C_PrintTextStat::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_PrintTextStat, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000038, "Member 'BP_Flashlight_C_PrintTextStat::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.PrintStat
// 0x0050 (0x0050 - 0x0000)
struct BP_Flashlight_C_PrintStat final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
	double                                        Value;                                             // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Conv_DoubleToString_ReturnValue;          // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CallFunc_Concat_StrStr_ReturnValue;                // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	class FString                                 CallFunc_Concat_StrStr_ReturnValue_1;              // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_PrintStat) == 0x000008, "Wrong alignment on BP_Flashlight_C_PrintStat");
static_assert(sizeof(BP_Flashlight_C_PrintStat) == 0x000050, "Wrong size on BP_Flashlight_C_PrintStat");
static_assert(offsetof(BP_Flashlight_C_PrintStat, Title) == 0x000000, "Member 'BP_Flashlight_C_PrintStat::Title' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_PrintStat, Value) == 0x000010, "Member 'BP_Flashlight_C_PrintStat::Value' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_PrintStat, CallFunc_Conv_DoubleToString_ReturnValue) == 0x000018, "Member 'BP_Flashlight_C_PrintStat::CallFunc_Conv_DoubleToString_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_PrintStat, CallFunc_Add_IntInt_ReturnValue) == 0x000028, "Member 'BP_Flashlight_C_PrintStat::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_PrintStat, CallFunc_Concat_StrStr_ReturnValue) == 0x000030, "Member 'BP_Flashlight_C_PrintStat::CallFunc_Concat_StrStr_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_PrintStat, CallFunc_Concat_StrStr_ReturnValue_1) == 0x000040, "Member 'BP_Flashlight_C_PrintStat::CallFunc_Concat_StrStr_ReturnValue_1' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.OnUseReleased
// 0x0008 (0x0008 - 0x0000)
struct BP_Flashlight_C_OnUseReleased final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_OnUseReleased) == 0x000008, "Wrong alignment on BP_Flashlight_C_OnUseReleased");
static_assert(sizeof(BP_Flashlight_C_OnUseReleased) == 0x000008, "Wrong size on BP_Flashlight_C_OnUseReleased");
static_assert(offsetof(BP_Flashlight_C_OnUseReleased, Collector) == 0x000000, "Member 'BP_Flashlight_C_OnUseReleased::Collector' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.OnDropped
// 0x0008 (0x0008 - 0x0000)
struct BP_Flashlight_C_OnDropped final
{
public:
	class ADBDPlayer*                             DroppingPlayer;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_OnDropped) == 0x000008, "Wrong alignment on BP_Flashlight_C_OnDropped");
static_assert(sizeof(BP_Flashlight_C_OnDropped) == 0x000008, "Wrong size on BP_Flashlight_C_OnDropped");
static_assert(offsetof(BP_Flashlight_C_OnDropped, DroppingPlayer) == 0x000000, "Member 'BP_Flashlight_C_OnDropped::DroppingPlayer' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.OnCollectorSet
// 0x0008 (0x0008 - 0x0000)
struct BP_Flashlight_C_OnCollectorSet final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_OnCollectorSet) == 0x000008, "Wrong alignment on BP_Flashlight_C_OnCollectorSet");
static_assert(sizeof(BP_Flashlight_C_OnCollectorSet) == 0x000008, "Wrong size on BP_Flashlight_C_OnCollectorSet");
static_assert(offsetof(BP_Flashlight_C_OnCollectorSet, Collector) == 0x000000, "Member 'BP_Flashlight_C_OnCollectorSet::Collector' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.OnAddonsRemoved
// 0x0010 (0x0010 - 0x0000)
struct BP_Flashlight_C_OnAddonsRemoved final
{
public:
	TArray<class UItemAddon*>                     Addons;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Flashlight_C_OnAddonsRemoved) == 0x000008, "Wrong alignment on BP_Flashlight_C_OnAddonsRemoved");
static_assert(sizeof(BP_Flashlight_C_OnAddonsRemoved) == 0x000010, "Wrong size on BP_Flashlight_C_OnAddonsRemoved");
static_assert(offsetof(BP_Flashlight_C_OnAddonsRemoved, Addons) == 0x000000, "Member 'BP_Flashlight_C_OnAddonsRemoved::Addons' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.OnAddonsAdded
// 0x0010 (0x0010 - 0x0000)
struct BP_Flashlight_C_OnAddonsAdded final
{
public:
	TArray<class UItemAddon*>                     Addons;                                            // 0x0000(0x0010)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Flashlight_C_OnAddonsAdded) == 0x000008, "Wrong alignment on BP_Flashlight_C_OnAddonsAdded");
static_assert(sizeof(BP_Flashlight_C_OnAddonsAdded) == 0x000010, "Wrong size on BP_Flashlight_C_OnAddonsAdded");
static_assert(offsetof(BP_Flashlight_C_OnAddonsAdded, Addons) == 0x000000, "Member 'BP_Flashlight_C_OnAddonsAdded::Addons' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.InitializeTunables
// 0x0020 (0x0020 - 0x0000)
struct BP_Flashlight_C_InitializeTunables final
{
public:
	float                                         CallFunc_GetTunableValue_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTunableValue_ReturnValue_1;            // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTunableValue_ReturnValue_2;            // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetTunableValue_ReturnValue_3;            // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FTrunc_A_ImplicitCast;                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_InitializeTunables) == 0x000008, "Wrong alignment on BP_Flashlight_C_InitializeTunables");
static_assert(sizeof(BP_Flashlight_C_InitializeTunables) == 0x000020, "Wrong size on BP_Flashlight_C_InitializeTunables");
static_assert(offsetof(BP_Flashlight_C_InitializeTunables, CallFunc_GetTunableValue_ReturnValue) == 0x000000, "Member 'BP_Flashlight_C_InitializeTunables::CallFunc_GetTunableValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_InitializeTunables, CallFunc_GetTunableValue_ReturnValue_1) == 0x000004, "Member 'BP_Flashlight_C_InitializeTunables::CallFunc_GetTunableValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_InitializeTunables, CallFunc_FTrunc_ReturnValue) == 0x000008, "Member 'BP_Flashlight_C_InitializeTunables::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_InitializeTunables, CallFunc_GetTunableValue_ReturnValue_2) == 0x00000C, "Member 'BP_Flashlight_C_InitializeTunables::CallFunc_GetTunableValue_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_InitializeTunables, CallFunc_GetTunableValue_ReturnValue_3) == 0x000010, "Member 'BP_Flashlight_C_InitializeTunables::CallFunc_GetTunableValue_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_InitializeTunables, CallFunc_FTrunc_A_ImplicitCast) == 0x000018, "Member 'BP_Flashlight_C_InitializeTunables::CallFunc_FTrunc_A_ImplicitCast' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.Flashlight bank loaded
// 0x0001 (0x0001 - 0x0000)
struct BP_Flashlight_C_Flashlight_bank_loaded final
{
public:
	EAkResult                                     Result;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_Flashlight_bank_loaded) == 0x000001, "Wrong alignment on BP_Flashlight_C_Flashlight_bank_loaded");
static_assert(sizeof(BP_Flashlight_C_Flashlight_bank_loaded) == 0x000001, "Wrong size on BP_Flashlight_C_Flashlight_bank_loaded");
static_assert(offsetof(BP_Flashlight_C_Flashlight_bank_loaded, Result) == 0x000000, "Member 'BP_Flashlight_C_Flashlight_bank_loaded::Result' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.ExecuteUbergraph_BP_Flashlight
// 0x0170 (0x0170 - 0x0000)
struct BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0020(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0080(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_AddComponent_ReturnValue;                 // 0x0098(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x00A0(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Temp_object_Variable;                              // 0x00B8(0x0010)(ConstParm, ReferenceParm)
	TDelegate<void(EAkResult Result)>             K2Node_CreateDelegate_OutputDelegate;              // 0x00C8(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x00E0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x00F8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_ComponentBoundEvent_Empty;                  // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue_2;                // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             K2Node_Event_droppingPlayer;                       // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADBDPlayer*                             K2Node_Event_collector_1;                          // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_visibility;                           // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsOn_ReturnValue;                         // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAkResult                                     K2Node_CustomEvent_Result;                         // 0x0122(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0123(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UItemAddon*>                     K2Node_Event_addons_1;                             // 0x0128(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	TArray<class UItemAddon*>                     K2Node_Event_addons;                               // 0x0138(0x0010)(ConstParm, ReferenceParm, ContainsInstancedReference)
	class ADBDPlayer*                             K2Node_Event_collector;                            // 0x0148(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<class AActor*>                         K2Node_MakeArray_Array;                            // 0x0150(0x0010)(ConstParm, ReferenceParm)
	TArray<class UAimPointProcessor*>             K2Node_MakeArray_Array_1;                          // 0x0160(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight) == 0x000010, "Wrong alignment on BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight");
static_assert(sizeof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight) == 0x000170, "Wrong size on BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, EntryPoint) == 0x000000, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, Temp_delegate_Variable) == 0x000004, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, Temp_struct_Variable) == 0x000020, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, Temp_delegate_Variable_1) == 0x000080, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, CallFunc_AddComponent_ReturnValue) == 0x000098, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, Temp_delegate_Variable_2) == 0x0000A0, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, Temp_object_Variable) == 0x0000B8, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_CreateDelegate_OutputDelegate) == 0x0000C8, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, CallFunc_PostAkEvent_ReturnValue) == 0x0000DC, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x0000E0, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x0000F8, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, CallFunc_PostAkEvent_ReturnValue_1) == 0x000100, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_ComponentBoundEvent_Empty) == 0x000104, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_ComponentBoundEvent_Empty' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, CallFunc_PostAkEvent_ReturnValue_2) == 0x000108, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::CallFunc_PostAkEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_Event_droppingPlayer) == 0x000110, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_Event_droppingPlayer' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_Event_collector_1) == 0x000118, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_Event_collector_1' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_Event_visibility) == 0x000120, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_Event_visibility' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, CallFunc_IsOn_ReturnValue) == 0x000121, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::CallFunc_IsOn_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_CustomEvent_Result) == 0x000122, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_CustomEvent_Result' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, CallFunc_BooleanAND_ReturnValue) == 0x000123, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_Event_addons_1) == 0x000128, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_Event_addons_1' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_Event_addons) == 0x000138, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_Event_addons' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_Event_collector) == 0x000148, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_Event_collector' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_MakeArray_Array) == 0x000150, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight, K2Node_MakeArray_Array_1) == 0x000160, "Member 'BP_Flashlight_C_ExecuteUbergraph_BP_Flashlight::K2Node_MakeArray_Array_1' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.DoDebugPrintStats
// 0x0040 (0x0040 - 0x0000)
struct BP_Flashlight_C_DoDebugPrintStats final
{
public:
	float                                         CallFunc_GetEffectiveConeLength_ReturnValue;       // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEffectiveConeHalfAngle_ReturnValue;    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEffectiveBlindnessDuration_ReturnValue; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetEffectiveTimeToBlindModifier_ReturnValue; // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetDisplayName_ReturnValue;               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	double                                        CallFunc_PrintStat_Value_ImplicitCast;             // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_PrintStat_Value_ImplicitCast_1;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_PrintStat_Value_ImplicitCast_2;           // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_PrintStat_Value_ImplicitCast_3;           // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_DoDebugPrintStats) == 0x000008, "Wrong alignment on BP_Flashlight_C_DoDebugPrintStats");
static_assert(sizeof(BP_Flashlight_C_DoDebugPrintStats) == 0x000040, "Wrong size on BP_Flashlight_C_DoDebugPrintStats");
static_assert(offsetof(BP_Flashlight_C_DoDebugPrintStats, CallFunc_GetEffectiveConeLength_ReturnValue) == 0x000000, "Member 'BP_Flashlight_C_DoDebugPrintStats::CallFunc_GetEffectiveConeLength_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_DoDebugPrintStats, CallFunc_GetEffectiveConeHalfAngle_ReturnValue) == 0x000004, "Member 'BP_Flashlight_C_DoDebugPrintStats::CallFunc_GetEffectiveConeHalfAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_DoDebugPrintStats, CallFunc_GetEffectiveBlindnessDuration_ReturnValue) == 0x000008, "Member 'BP_Flashlight_C_DoDebugPrintStats::CallFunc_GetEffectiveBlindnessDuration_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_DoDebugPrintStats, CallFunc_GetEffectiveTimeToBlindModifier_ReturnValue) == 0x00000C, "Member 'BP_Flashlight_C_DoDebugPrintStats::CallFunc_GetEffectiveTimeToBlindModifier_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_DoDebugPrintStats, CallFunc_GetDisplayName_ReturnValue) == 0x000010, "Member 'BP_Flashlight_C_DoDebugPrintStats::CallFunc_GetDisplayName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_DoDebugPrintStats, CallFunc_PrintStat_Value_ImplicitCast) == 0x000020, "Member 'BP_Flashlight_C_DoDebugPrintStats::CallFunc_PrintStat_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_DoDebugPrintStats, CallFunc_PrintStat_Value_ImplicitCast_1) == 0x000028, "Member 'BP_Flashlight_C_DoDebugPrintStats::CallFunc_PrintStat_Value_ImplicitCast_1' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_DoDebugPrintStats, CallFunc_PrintStat_Value_ImplicitCast_2) == 0x000030, "Member 'BP_Flashlight_C_DoDebugPrintStats::CallFunc_PrintStat_Value_ImplicitCast_2' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_DoDebugPrintStats, CallFunc_PrintStat_Value_ImplicitCast_3) == 0x000038, "Member 'BP_Flashlight_C_DoDebugPrintStats::CallFunc_PrintStat_Value_ImplicitCast_3' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.BndEvt__Charger_K2Node_ComponentBoundEvent_0_ChargeStateChangeDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_Flashlight_C_BndEvt__Charger_K2Node_ComponentBoundEvent_0_ChargeStateChangeDelegate__DelegateSignature final
{
public:
	bool                                          Empty;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_BndEvt__Charger_K2Node_ComponentBoundEvent_0_ChargeStateChangeDelegate__DelegateSignature) == 0x000001, "Wrong alignment on BP_Flashlight_C_BndEvt__Charger_K2Node_ComponentBoundEvent_0_ChargeStateChangeDelegate__DelegateSignature");
static_assert(sizeof(BP_Flashlight_C_BndEvt__Charger_K2Node_ComponentBoundEvent_0_ChargeStateChangeDelegate__DelegateSignature) == 0x000001, "Wrong size on BP_Flashlight_C_BndEvt__Charger_K2Node_ComponentBoundEvent_0_ChargeStateChangeDelegate__DelegateSignature");
static_assert(offsetof(BP_Flashlight_C_BndEvt__Charger_K2Node_ComponentBoundEvent_0_ChargeStateChangeDelegate__DelegateSignature, Empty) == 0x000000, "Member 'BP_Flashlight_C_BndEvt__Charger_K2Node_ComponentBoundEvent_0_ChargeStateChangeDelegate__DelegateSignature::Empty' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.GetEffectiveBeamInaccuracyFrequencyMultiplier
// 0x0028 (0x0028 - 0x0000)
struct BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier final
{
public:
	double                                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetEffectiveBeamAccuracy_Result;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetModifierSum_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_Result_ImplicitCast;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_B_ImplicitCast;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier) == 0x000008, "Wrong alignment on BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier");
static_assert(sizeof(BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier) == 0x000028, "Wrong size on BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier, Result) == 0x000000, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier::Result' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier, CallFunc_GetEffectiveBeamAccuracy_Result) == 0x000008, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier::CallFunc_GetEffectiveBeamAccuracy_Result' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier, CallFunc_GetModifierSum_ReturnValue) == 0x000010, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier::CallFunc_GetModifierSum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier, K2Node_FunctionResult_Result_ImplicitCast) == 0x000018, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier::K2Node_FunctionResult_Result_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier, CallFunc_Divide_FloatFloat_B_ImplicitCast) == 0x000020, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyFrequencyMultiplier::CallFunc_Divide_FloatFloat_B_ImplicitCast' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.GetEffectiveBeamInaccuracyAmplitudeMultiplier
// 0x0028 (0x0028 - 0x0000)
struct BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier final
{
public:
	double                                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_GetEffectiveBeamAccuracy_Result;          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetModifierSum_ReturnValue;               // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_FunctionResult_Result_ImplicitCast;         // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_B_ImplicitCast;         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier) == 0x000008, "Wrong alignment on BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier");
static_assert(sizeof(BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier) == 0x000028, "Wrong size on BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier, Result) == 0x000000, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier::Result' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier, CallFunc_GetEffectiveBeamAccuracy_Result) == 0x000008, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier::CallFunc_GetEffectiveBeamAccuracy_Result' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier, CallFunc_GetModifierSum_ReturnValue) == 0x000010, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier::CallFunc_GetModifierSum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000014, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier, K2Node_FunctionResult_Result_ImplicitCast) == 0x000018, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier::K2Node_FunctionResult_Result_ImplicitCast' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier, CallFunc_Divide_FloatFloat_B_ImplicitCast) == 0x000020, "Member 'BP_Flashlight_C_GetEffectiveBeamInaccuracyAmplitudeMultiplier::CallFunc_Divide_FloatFloat_B_ImplicitCast' has a wrong offset!");

// Function BP_FlashLight.BP_Flashlight_C.GetEffectiveBeamAccuracy
// 0x0020 (0x0020 - 0x0000)
struct BP_Flashlight_C_GetEffectiveBeamAccuracy final
{
public:
	double                                        Result;                                            // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetModifierSum_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_ReturnValue;                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FMax_A_ImplicitCast;                      // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Flashlight_C_GetEffectiveBeamAccuracy) == 0x000008, "Wrong alignment on BP_Flashlight_C_GetEffectiveBeamAccuracy");
static_assert(sizeof(BP_Flashlight_C_GetEffectiveBeamAccuracy) == 0x000020, "Wrong size on BP_Flashlight_C_GetEffectiveBeamAccuracy");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamAccuracy, Result) == 0x000000, "Member 'BP_Flashlight_C_GetEffectiveBeamAccuracy::Result' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamAccuracy, CallFunc_GetModifierSum_ReturnValue) == 0x000008, "Member 'BP_Flashlight_C_GetEffectiveBeamAccuracy::CallFunc_GetModifierSum_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamAccuracy, CallFunc_Add_FloatFloat_ReturnValue) == 0x00000C, "Member 'BP_Flashlight_C_GetEffectiveBeamAccuracy::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamAccuracy, CallFunc_FMax_ReturnValue) == 0x000010, "Member 'BP_Flashlight_C_GetEffectiveBeamAccuracy::CallFunc_FMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Flashlight_C_GetEffectiveBeamAccuracy, CallFunc_FMax_A_ImplicitCast) == 0x000018, "Member 'BP_Flashlight_C_GetEffectiveBeamAccuracy::CallFunc_FMax_A_ImplicitCast' has a wrong offset!");

}

