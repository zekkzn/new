#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DeadByDaylight

#include "Basic.hpp"

#include "Projectile_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "AIModule_structs.hpp"
#include "Customization_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "InputCore_structs.hpp"
#include "ReversibleActionSystem_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationUtilities_structs.hpp"
#include "Engine_structs.hpp"
#include "Competence_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "PhysicsCore_structs.hpp"
#include "NetworkUtilities_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "SlateCore_structs.hpp"
#include "AkAudio_structs.hpp"
#include "GameplayUtilities_structs.hpp"
#include "Niagara_structs.hpp"


namespace SDK::Params
{

// Function DeadByDaylight.HudStateComponent.OnRep_IsHudVisible
// 0x0001 (0x0001 - 0x0000)
struct HudStateComponent_OnRep_IsHudVisible final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudStateComponent_OnRep_IsHudVisible) == 0x000001, "Wrong alignment on HudStateComponent_OnRep_IsHudVisible");
static_assert(sizeof(HudStateComponent_OnRep_IsHudVisible) == 0x000001, "Wrong size on HudStateComponent_OnRep_IsHudVisible");
static_assert(offsetof(HudStateComponent_OnRep_IsHudVisible, OldValue) == 0x000000, "Member 'HudStateComponent_OnRep_IsHudVisible::OldValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Client final
{
public:
	class FString                                 CommandLine;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Client) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Client");
static_assert(sizeof(DBDPlayerControllerBase_Client) == 0x000010, "Wrong size on DBDPlayerControllerBase_Client");
static_assert(offsetof(DBDPlayerControllerBase_Client, CommandLine) == 0x000000, "Member 'DBDPlayerControllerBase_Client::CommandLine' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_CallConsoleCmdOnClient
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Client_CallConsoleCmdOnClient final
{
public:
	class FString                                 CommandLine;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Client_CallConsoleCmdOnClient) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Client_CallConsoleCmdOnClient");
static_assert(sizeof(DBDPlayerControllerBase_Client_CallConsoleCmdOnClient) == 0x000010, "Wrong size on DBDPlayerControllerBase_Client_CallConsoleCmdOnClient");
static_assert(offsetof(DBDPlayerControllerBase_Client_CallConsoleCmdOnClient, CommandLine) == 0x000000, "Member 'DBDPlayerControllerBase_Client_CallConsoleCmdOnClient::CommandLine' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_DisplayChatMessage
// 0x0038 (0x0038 - 0x0000)
struct DBDPlayerControllerBase_Client_DisplayChatMessage final
{
public:
	class FString                                 ChatIdentifier;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MirrorsId;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Msg;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Client_DisplayChatMessage) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Client_DisplayChatMessage");
static_assert(sizeof(DBDPlayerControllerBase_Client_DisplayChatMessage) == 0x000038, "Wrong size on DBDPlayerControllerBase_Client_DisplayChatMessage");
static_assert(offsetof(DBDPlayerControllerBase_Client_DisplayChatMessage, ChatIdentifier) == 0x000000, "Member 'DBDPlayerControllerBase_Client_DisplayChatMessage::ChatIdentifier' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Client_DisplayChatMessage, PlayerIndex) == 0x000010, "Member 'DBDPlayerControllerBase_Client_DisplayChatMessage::PlayerIndex' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Client_DisplayChatMessage, MirrorsId) == 0x000018, "Member 'DBDPlayerControllerBase_Client_DisplayChatMessage::MirrorsId' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Client_DisplayChatMessage, Msg) == 0x000028, "Member 'DBDPlayerControllerBase_Client_DisplayChatMessage::Msg' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_EACMessageFromServer
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Client_EACMessageFromServer final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Client_EACMessageFromServer) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Client_EACMessageFromServer");
static_assert(sizeof(DBDPlayerControllerBase_Client_EACMessageFromServer) == 0x000010, "Wrong size on DBDPlayerControllerBase_Client_EACMessageFromServer");
static_assert(offsetof(DBDPlayerControllerBase_Client_EACMessageFromServer, Message) == 0x000000, "Member 'DBDPlayerControllerBase_Client_EACMessageFromServer::Message' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_SendLogs
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Client_SendLogs final
{
public:
	TArray<class FString>                         Ensures;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Client_SendLogs) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Client_SendLogs");
static_assert(sizeof(DBDPlayerControllerBase_Client_SendLogs) == 0x000010, "Wrong size on DBDPlayerControllerBase_Client_SendLogs");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendLogs, Ensures) == 0x000000, "Member 'DBDPlayerControllerBase_Client_SendLogs::Ensures' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_SendServerAuthentication
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerControllerBase_Client_SendServerAuthentication final
{
public:
	class FString                                 AuthServerTicket;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        SteamId;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TicketLength;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerControllerBase_Client_SendServerAuthentication) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Client_SendServerAuthentication");
static_assert(sizeof(DBDPlayerControllerBase_Client_SendServerAuthentication) == 0x000020, "Wrong size on DBDPlayerControllerBase_Client_SendServerAuthentication");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendServerAuthentication, AuthServerTicket) == 0x000000, "Member 'DBDPlayerControllerBase_Client_SendServerAuthentication::AuthServerTicket' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendServerAuthentication, SteamId) == 0x000010, "Member 'DBDPlayerControllerBase_Client_SendServerAuthentication::SteamId' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendServerAuthentication, TicketLength) == 0x000018, "Member 'DBDPlayerControllerBase_Client_SendServerAuthentication::TicketLength' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Client_SendWarning
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerControllerBase_Client_SendWarning final
{
public:
	bool                                          PenaltyStarts;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Seconds;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Client_SendWarning) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_Client_SendWarning");
static_assert(sizeof(DBDPlayerControllerBase_Client_SendWarning) == 0x000008, "Wrong size on DBDPlayerControllerBase_Client_SendWarning");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendWarning, PenaltyStarts) == 0x000000, "Member 'DBDPlayerControllerBase_Client_SendWarning::PenaltyStarts' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Client_SendWarning, Seconds) == 0x000004, "Member 'DBDPlayerControllerBase_Client_SendWarning::Seconds' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromMap
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromMap final
{
public:
	class FString                                 Map;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromMap) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromMap");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromMap) == 0x000010, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromMap");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromMap, Map) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromMap::Map' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromPlayerCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromPlayerCount) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromPlayerCount");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromPlayerCount) == 0x000004, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromPlayerCount");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromPlayerCount, Count) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromPlayerCount::Count' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromPremadeMap
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromPremadeMap final
{
public:
	class FString                                 Map;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromPremadeMap) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromPremadeMap");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromPremadeMap) == 0x000010, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromPremadeMap");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromPremadeMap, Map) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromPremadeMap::Map' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromSeed
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromSeed final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromSeed) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromSeed");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromSeed) == 0x000004, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromSeed");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromSeed, Seed) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromSeed::Seed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_BuildFromTile
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerControllerBase_DBD_BuildFromTile final
{
public:
	int32                                         MatrixX;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatrixY;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rotation;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Param_Name;                                        // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_BuildFromTile) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_DBD_BuildFromTile");
static_assert(sizeof(DBDPlayerControllerBase_DBD_BuildFromTile) == 0x000020, "Wrong size on DBDPlayerControllerBase_DBD_BuildFromTile");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromTile, MatrixX) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_BuildFromTile::MatrixX' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromTile, MatrixY) == 0x000004, "Member 'DBDPlayerControllerBase_DBD_BuildFromTile::MatrixY' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromTile, Rotation) == 0x000008, "Member 'DBDPlayerControllerBase_DBD_BuildFromTile::Rotation' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_DBD_BuildFromTile, Param_Name) == 0x000010, "Member 'DBDPlayerControllerBase_DBD_BuildFromTile::Param_Name' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_DebugSendChatMessage
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_DBD_DebugSendChatMessage final
{
public:
	class FString                                 Msg;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_DebugSendChatMessage) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_DBD_DebugSendChatMessage");
static_assert(sizeof(DBDPlayerControllerBase_DBD_DebugSendChatMessage) == 0x000010, "Wrong size on DBDPlayerControllerBase_DBD_DebugSendChatMessage");
static_assert(offsetof(DBDPlayerControllerBase_DBD_DebugSendChatMessage, Msg) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_DebugSendChatMessage::Msg' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_FillScoreCategory
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_DBD_FillScoreCategory final
{
public:
	int32                                         Category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_FillScoreCategory) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_DBD_FillScoreCategory");
static_assert(sizeof(DBDPlayerControllerBase_DBD_FillScoreCategory) == 0x000004, "Wrong size on DBDPlayerControllerBase_DBD_FillScoreCategory");
static_assert(offsetof(DBDPlayerControllerBase_DBD_FillScoreCategory, Category) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_FillScoreCategory::Category' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.DBD_FireTestScore
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerControllerBase_DBD_FireTestScore final
{
public:
	int32                                         Category;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_DBD_FireTestScore) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_DBD_FireTestScore");
static_assert(sizeof(DBDPlayerControllerBase_DBD_FireTestScore) == 0x000008, "Wrong size on DBDPlayerControllerBase_DBD_FireTestScore");
static_assert(offsetof(DBDPlayerControllerBase_DBD_FireTestScore, Category) == 0x000000, "Member 'DBDPlayerControllerBase_DBD_FireTestScore::Category' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_DBD_FireTestScore, Value) == 0x000004, "Member 'DBDPlayerControllerBase_DBD_FireTestScore::Value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Server final
{
public:
	class FString                                 CommandLine;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server");
static_assert(sizeof(DBDPlayerControllerBase_Server) == 0x000010, "Wrong size on DBDPlayerControllerBase_Server");
static_assert(offsetof(DBDPlayerControllerBase_Server, CommandLine) == 0x000000, "Member 'DBDPlayerControllerBase_Server::CommandLine' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_CallConsoleCmdOnServer
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Server_CallConsoleCmdOnServer final
{
public:
	class FString                                 CommandLine;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_CallConsoleCmdOnServer) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_CallConsoleCmdOnServer");
static_assert(sizeof(DBDPlayerControllerBase_Server_CallConsoleCmdOnServer) == 0x000010, "Wrong size on DBDPlayerControllerBase_Server_CallConsoleCmdOnServer");
static_assert(offsetof(DBDPlayerControllerBase_Server_CallConsoleCmdOnServer, CommandLine) == 0x000000, "Member 'DBDPlayerControllerBase_Server_CallConsoleCmdOnServer::CommandLine' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_EACMessageFromClient
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Server_EACMessageFromClient final
{
public:
	TArray<uint8>                                 Message;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_EACMessageFromClient) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_EACMessageFromClient");
static_assert(sizeof(DBDPlayerControllerBase_Server_EACMessageFromClient) == 0x000010, "Wrong size on DBDPlayerControllerBase_Server_EACMessageFromClient");
static_assert(offsetof(DBDPlayerControllerBase_Server_EACMessageFromClient, Message) == 0x000000, "Member 'DBDPlayerControllerBase_Server_EACMessageFromClient::Message' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_ReceivePlayerProfile
// 0x0128 (0x0128 - 0x0000)
struct DBDPlayerControllerBase_Server_ReceivePlayerProfile final
{
public:
	struct FPlayerSavedProfileDataShared          SavedProfileData;                                  // 0x0000(0x0068)(Parm, NativeAccessSpecifierPublic)
	struct FPlayerLoadoutData                     PlayerLoadout;                                     // 0x0068(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_ReceivePlayerProfile) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_ReceivePlayerProfile");
static_assert(sizeof(DBDPlayerControllerBase_Server_ReceivePlayerProfile) == 0x000128, "Wrong size on DBDPlayerControllerBase_Server_ReceivePlayerProfile");
static_assert(offsetof(DBDPlayerControllerBase_Server_ReceivePlayerProfile, SavedProfileData) == 0x000000, "Member 'DBDPlayerControllerBase_Server_ReceivePlayerProfile::SavedProfileData' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Server_ReceivePlayerProfile, PlayerLoadout) == 0x000068, "Member 'DBDPlayerControllerBase_Server_ReceivePlayerProfile::PlayerLoadout' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_SendClientAuthentication
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerControllerBase_Server_SendClientAuthentication final
{
public:
	class FString                                 AuthClientTicket;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        SteamId;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        TicketLength;                                      // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerControllerBase_Server_SendClientAuthentication) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_SendClientAuthentication");
static_assert(sizeof(DBDPlayerControllerBase_Server_SendClientAuthentication) == 0x000020, "Wrong size on DBDPlayerControllerBase_Server_SendClientAuthentication");
static_assert(offsetof(DBDPlayerControllerBase_Server_SendClientAuthentication, AuthClientTicket) == 0x000000, "Member 'DBDPlayerControllerBase_Server_SendClientAuthentication::AuthClientTicket' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Server_SendClientAuthentication, SteamId) == 0x000010, "Member 'DBDPlayerControllerBase_Server_SendClientAuthentication::SteamId' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Server_SendClientAuthentication, TicketLength) == 0x000018, "Member 'DBDPlayerControllerBase_Server_SendClientAuthentication::TicketLength' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_SendMessage
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerControllerBase_Server_SendMessage final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_SendMessage) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_SendMessage");
static_assert(sizeof(DBDPlayerControllerBase_Server_SendMessage) == 0x000010, "Wrong size on DBDPlayerControllerBase_Server_SendMessage");
static_assert(offsetof(DBDPlayerControllerBase_Server_SendMessage, Message) == 0x000000, "Member 'DBDPlayerControllerBase_Server_SendMessage::Message' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_SetConsecutiveMatchStreak
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak final
{
public:
	int32                                         ConsecutiveMatch;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak");
static_assert(sizeof(DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak) == 0x000004, "Wrong size on DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak");
static_assert(offsetof(DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak, ConsecutiveMatch) == 0x000000, "Member 'DBDPlayerControllerBase_Server_SetConsecutiveMatchStreak::ConsecutiveMatch' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_SetPlayerCard
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerControllerBase_Server_SetPlayerCard final
{
public:
	class FString                                 badgeId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 bannerId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_SetPlayerCard) == 0x000008, "Wrong alignment on DBDPlayerControllerBase_Server_SetPlayerCard");
static_assert(sizeof(DBDPlayerControllerBase_Server_SetPlayerCard) == 0x000020, "Wrong size on DBDPlayerControllerBase_Server_SetPlayerCard");
static_assert(offsetof(DBDPlayerControllerBase_Server_SetPlayerCard, badgeId) == 0x000000, "Member 'DBDPlayerControllerBase_Server_SetPlayerCard::badgeId' has a wrong offset!");
static_assert(offsetof(DBDPlayerControllerBase_Server_SetPlayerCard, bannerId) == 0x000010, "Member 'DBDPlayerControllerBase_Server_SetPlayerCard::bannerId' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerControllerBase.Server_UpdateReplicatedPips
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerControllerBase_Server_UpdateReplicatedPips final
{
public:
	int32                                         PipsToAdd;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerControllerBase_Server_UpdateReplicatedPips) == 0x000004, "Wrong alignment on DBDPlayerControllerBase_Server_UpdateReplicatedPips");
static_assert(sizeof(DBDPlayerControllerBase_Server_UpdateReplicatedPips) == 0x000004, "Wrong size on DBDPlayerControllerBase_Server_UpdateReplicatedPips");
static_assert(offsetof(DBDPlayerControllerBase_Server_UpdateReplicatedPips, PipsToAdd) == 0x000000, "Member 'DBDPlayerControllerBase_Server_UpdateReplicatedPips::PipsToAdd' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Authority_SetPlayerReady
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Menu_Authority_SetPlayerReady final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Authority_SetPlayerReady) == 0x000001, "Wrong alignment on DBDPlayerController_Menu_Authority_SetPlayerReady");
static_assert(sizeof(DBDPlayerController_Menu_Authority_SetPlayerReady) == 0x000001, "Wrong size on DBDPlayerController_Menu_Authority_SetPlayerReady");
static_assert(offsetof(DBDPlayerController_Menu_Authority_SetPlayerReady, IsReady) == 0x000000, "Member 'DBDPlayerController_Menu_Authority_SetPlayerReady::IsReady' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_GamePresetDataFromClient
// 0x0090 (0x0090 - 0x0000)
struct DBDPlayerController_Menu_Server_GamePresetDataFromClient final
{
public:
	struct FGamePresetData                        GameState;                                         // 0x0000(0x0090)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_GamePresetDataFromClient) == 0x000008, "Wrong alignment on DBDPlayerController_Menu_Server_GamePresetDataFromClient");
static_assert(sizeof(DBDPlayerController_Menu_Server_GamePresetDataFromClient) == 0x000090, "Wrong size on DBDPlayerController_Menu_Server_GamePresetDataFromClient");
static_assert(offsetof(DBDPlayerController_Menu_Server_GamePresetDataFromClient, GameState) == 0x000000, "Member 'DBDPlayerController_Menu_Server_GamePresetDataFromClient::GameState' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetCharacterData
// 0x00C8 (0x00C8 - 0x0000)
struct DBDPlayerController_Menu_Server_SetCharacterData final
{
public:
	int32                                         CharacterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerDataSync                        PlayerDataSync;                                    // 0x0008(0x00C0)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetCharacterData) == 0x000008, "Wrong alignment on DBDPlayerController_Menu_Server_SetCharacterData");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetCharacterData) == 0x0000C8, "Wrong size on DBDPlayerController_Menu_Server_SetCharacterData");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterData, CharacterIndex) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetCharacterData::CharacterIndex' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterData, PlayerDataSync) == 0x000008, "Member 'DBDPlayerController_Menu_Server_SetCharacterData::PlayerDataSync' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetCharacterLevel
// 0x000C (0x000C - 0x0000)
struct DBDPlayerController_Menu_Server_SetCharacterLevel final
{
public:
	int32                                         CharacterLevel;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrestigeLevel;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallOnRep;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetCharacterLevel) == 0x000004, "Wrong alignment on DBDPlayerController_Menu_Server_SetCharacterLevel");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetCharacterLevel) == 0x00000C, "Wrong size on DBDPlayerController_Menu_Server_SetCharacterLevel");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterLevel, CharacterLevel) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetCharacterLevel::CharacterLevel' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterLevel, PrestigeLevel) == 0x000004, "Member 'DBDPlayerController_Menu_Server_SetCharacterLevel::PrestigeLevel' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCharacterLevel, CallOnRep) == 0x000008, "Member 'DBDPlayerController_Menu_Server_SetCharacterLevel::CallOnRep' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetCustomizationCharm
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_Menu_Server_SetCustomizationCharm final
{
public:
	class FName                                   CharmId;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int8                                          SlotIndex;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetCustomizationCharm) == 0x000004, "Wrong alignment on DBDPlayerController_Menu_Server_SetCustomizationCharm");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetCustomizationCharm) == 0x000010, "Wrong size on DBDPlayerController_Menu_Server_SetCustomizationCharm");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCustomizationCharm, CharmId) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetCustomizationCharm::CharmId' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCustomizationCharm, SlotIndex) == 0x00000C, "Member 'DBDPlayerController_Menu_Server_SetCustomizationCharm::SlotIndex' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetCustomizationMeshes
// 0x0024 (0x0024 - 0x0000)
struct DBDPlayerController_Menu_Server_SetCustomizationMeshes final
{
public:
	struct FCharacterCustomization                Customization;                                     // 0x0000(0x0024)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetCustomizationMeshes) == 0x000004, "Wrong alignment on DBDPlayerController_Menu_Server_SetCustomizationMeshes");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetCustomizationMeshes) == 0x000024, "Wrong size on DBDPlayerController_Menu_Server_SetCustomizationMeshes");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetCustomizationMeshes, Customization) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetCustomizationMeshes::Customization' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetEquipedPerks
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayerController_Menu_Server_SetEquipedPerks final
{
public:
	TArray<class FName>                           PerkIds;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<int32>                                 PerkLevels;                                        // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          CallOnRep;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AreRandomPerks;                                    // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetEquipedPerks) == 0x000008, "Wrong alignment on DBDPlayerController_Menu_Server_SetEquipedPerks");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetEquipedPerks) == 0x000028, "Wrong size on DBDPlayerController_Menu_Server_SetEquipedPerks");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetEquipedPerks, PerkIds) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetEquipedPerks::PerkIds' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetEquipedPerks, PerkLevels) == 0x000010, "Member 'DBDPlayerController_Menu_Server_SetEquipedPerks::PerkLevels' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetEquipedPerks, CallOnRep) == 0x000020, "Member 'DBDPlayerController_Menu_Server_SetEquipedPerks::CallOnRep' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetEquipedPerks, AreRandomPerks) == 0x000021, "Member 'DBDPlayerController_Menu_Server_SetEquipedPerks::AreRandomPerks' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetPlayerLoadout
// 0x00C0 (0x00C0 - 0x0000)
struct DBDPlayerController_Menu_Server_SetPlayerLoadout final
{
public:
	struct FPlayerLoadoutData                     DesiredLoadout;                                    // 0x0000(0x00C0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetPlayerLoadout) == 0x000008, "Wrong alignment on DBDPlayerController_Menu_Server_SetPlayerLoadout");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetPlayerLoadout) == 0x0000C0, "Wrong size on DBDPlayerController_Menu_Server_SetPlayerLoadout");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetPlayerLoadout, DesiredLoadout) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetPlayerLoadout::DesiredLoadout' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.Server_SetPlayerReady
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Menu_Server_SetPlayerReady final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_Server_SetPlayerReady) == 0x000001, "Wrong alignment on DBDPlayerController_Menu_Server_SetPlayerReady");
static_assert(sizeof(DBDPlayerController_Menu_Server_SetPlayerReady) == 0x000001, "Wrong size on DBDPlayerController_Menu_Server_SetPlayerReady");
static_assert(offsetof(DBDPlayerController_Menu_Server_SetPlayerReady, IsReady) == 0x000000, "Member 'DBDPlayerController_Menu_Server_SetPlayerReady::IsReady' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController_Menu.SetPlayerReady
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Menu_SetPlayerReady final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Menu_SetPlayerReady) == 0x000001, "Wrong alignment on DBDPlayerController_Menu_SetPlayerReady");
static_assert(sizeof(DBDPlayerController_Menu_SetPlayerReady) == 0x000001, "Wrong size on DBDPlayerController_Menu_SetPlayerReady");
static_assert(offsetof(DBDPlayerController_Menu_SetPlayerReady, IsReady) == 0x000000, "Member 'DBDPlayerController_Menu_SetPlayerReady::IsReady' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.Apply
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_Apply final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_Apply) == 0x000004, "Wrong alignment on GameplayModifierContainer_Apply");
static_assert(sizeof(GameplayModifierContainer_Apply) == 0x000004, "Wrong size on GameplayModifierContainer_Apply");
static_assert(offsetof(GameplayModifierContainer_Apply, DeltaTime) == 0x000000, "Member 'GameplayModifierContainer_Apply::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.Authority_SetActivationTimerPaused
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_Authority_SetActivationTimerPaused final
{
public:
	bool                                          Paused;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_Authority_SetActivationTimerPaused) == 0x000001, "Wrong alignment on GameplayModifierContainer_Authority_SetActivationTimerPaused");
static_assert(sizeof(GameplayModifierContainer_Authority_SetActivationTimerPaused) == 0x000001, "Wrong size on GameplayModifierContainer_Authority_SetActivationTimerPaused");
static_assert(offsetof(GameplayModifierContainer_Authority_SetActivationTimerPaused, Paused) == 0x000000, "Member 'GameplayModifierContainer_Authority_SetActivationTimerPaused::Paused' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.Authority_TriggerActivationTimer
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_Authority_TriggerActivationTimer final
{
public:
	float                                         ActivationTime;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_Authority_TriggerActivationTimer) == 0x000004, "Wrong alignment on GameplayModifierContainer_Authority_TriggerActivationTimer");
static_assert(sizeof(GameplayModifierContainer_Authority_TriggerActivationTimer) == 0x000004, "Wrong size on GameplayModifierContainer_Authority_TriggerActivationTimer");
static_assert(offsetof(GameplayModifierContainer_Authority_TriggerActivationTimer, ActivationTime) == 0x000000, "Member 'GameplayModifierContainer_Authority_TriggerActivationTimer::ActivationTime' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.ListenToDispatcherGameEvent
// 0x000C (0x000C - 0x0000)
struct GameplayModifierContainer_ListenToDispatcherGameEvent final
{
public:
	struct FGameplayTag                           EventType;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_ListenToDispatcherGameEvent) == 0x000004, "Wrong alignment on GameplayModifierContainer_ListenToDispatcherGameEvent");
static_assert(sizeof(GameplayModifierContainer_ListenToDispatcherGameEvent) == 0x00000C, "Wrong size on GameplayModifierContainer_ListenToDispatcherGameEvent");
static_assert(offsetof(GameplayModifierContainer_ListenToDispatcherGameEvent, EventType) == 0x000000, "Member 'GameplayModifierContainer_ListenToDispatcherGameEvent::EventType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.OnGameEventDispatched
// 0x0040 (0x0040 - 0x0000)
struct GameplayModifierContainer_OnGameEventDispatched final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_OnGameEventDispatched) == 0x000008, "Wrong alignment on GameplayModifierContainer_OnGameEventDispatched");
static_assert(sizeof(GameplayModifierContainer_OnGameEventDispatched) == 0x000040, "Wrong size on GameplayModifierContainer_OnGameEventDispatched");
static_assert(offsetof(GameplayModifierContainer_OnGameEventDispatched, GameEventType) == 0x000000, "Member 'GameplayModifierContainer_OnGameEventDispatched::GameEventType' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_OnGameEventDispatched, GameEventData) == 0x000010, "Member 'GameplayModifierContainer_OnGameEventDispatched::GameEventData' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.OnRep_OperationConditionsData
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierContainer_OnRep_OperationConditionsData final
{
public:
	struct FOperationConditionsReplicatedData     OldOperationConditionsData;                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_OnRep_OperationConditionsData) == 0x000008, "Wrong alignment on GameplayModifierContainer_OnRep_OperationConditionsData");
static_assert(sizeof(GameplayModifierContainer_OnRep_OperationConditionsData) == 0x000018, "Wrong size on GameplayModifierContainer_OnRep_OperationConditionsData");
static_assert(offsetof(GameplayModifierContainer_OnRep_OperationConditionsData, OldOperationConditionsData) == 0x000000, "Member 'GameplayModifierContainer_OnRep_OperationConditionsData::OldOperationConditionsData' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.OnRep_TickableConditionsData
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierContainer_OnRep_TickableConditionsData final
{
public:
	struct FModifierTickableConditionReplicatedData OldTickableConditionsData;                         // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_OnRep_TickableConditionsData) == 0x000008, "Wrong alignment on GameplayModifierContainer_OnRep_TickableConditionsData");
static_assert(sizeof(GameplayModifierContainer_OnRep_TickableConditionsData) == 0x000018, "Wrong size on GameplayModifierContainer_OnRep_TickableConditionsData");
static_assert(offsetof(GameplayModifierContainer_OnRep_TickableConditionsData, OldTickableConditionsData) == 0x000000, "Member 'GameplayModifierContainer_OnRep_TickableConditionsData::OldTickableConditionsData' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.RemoveModifier
// 0x000C (0x000C - 0x0000)
struct GameplayModifierContainer_RemoveModifier final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_RemoveModifier) == 0x000004, "Wrong alignment on GameplayModifierContainer_RemoveModifier");
static_assert(sizeof(GameplayModifierContainer_RemoveModifier) == 0x00000C, "Wrong size on GameplayModifierContainer_RemoveModifier");
static_assert(offsetof(GameplayModifierContainer_RemoveModifier, Type) == 0x000000, "Member 'GameplayModifierContainer_RemoveModifier::Type' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.SetFlag
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_SetFlag final
{
public:
	struct FGameplayTag                           Flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FlagValue;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierContainer_SetFlag) == 0x000004, "Wrong alignment on GameplayModifierContainer_SetFlag");
static_assert(sizeof(GameplayModifierContainer_SetFlag) == 0x000010, "Wrong size on GameplayModifierContainer_SetFlag");
static_assert(offsetof(GameplayModifierContainer_SetFlag, Flag) == 0x000000, "Member 'GameplayModifierContainer_SetFlag::Flag' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_SetFlag, FlagValue) == 0x00000C, "Member 'GameplayModifierContainer_SetFlag::FlagValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.SetModifierValue
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_SetModifierValue final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameplayModifierValue;                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_SetModifierValue) == 0x000004, "Wrong alignment on GameplayModifierContainer_SetModifierValue");
static_assert(sizeof(GameplayModifierContainer_SetModifierValue) == 0x000010, "Wrong size on GameplayModifierContainer_SetModifierValue");
static_assert(offsetof(GameplayModifierContainer_SetModifierValue, Type) == 0x000000, "Member 'GameplayModifierContainer_SetModifierValue::Type' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_SetModifierValue, GameplayModifierValue) == 0x00000C, "Member 'GameplayModifierContainer_SetModifierValue::GameplayModifierValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.UnlistenToDispatcherGameEvent
// 0x000C (0x000C - 0x0000)
struct GameplayModifierContainer_UnlistenToDispatcherGameEvent final
{
public:
	struct FGameplayTag                           EventType;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_UnlistenToDispatcherGameEvent) == 0x000004, "Wrong alignment on GameplayModifierContainer_UnlistenToDispatcherGameEvent");
static_assert(sizeof(GameplayModifierContainer_UnlistenToDispatcherGameEvent) == 0x00000C, "Wrong size on GameplayModifierContainer_UnlistenToDispatcherGameEvent");
static_assert(offsetof(GameplayModifierContainer_UnlistenToDispatcherGameEvent, EventType) == 0x000000, "Member 'GameplayModifierContainer_UnlistenToDispatcherGameEvent::EventType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.FireActiveStatusViewEvent
// 0x0044 (0x0044 - 0x0000)
struct GameplayModifierContainer_FireActiveStatusViewEvent final
{
public:
	class FName                                   Param_StatusViewID;                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueSourceID;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStatusViewSource                      StatusViewSource;                                  // 0x0018(0x002C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_FireActiveStatusViewEvent) == 0x000004, "Wrong alignment on GameplayModifierContainer_FireActiveStatusViewEvent");
static_assert(sizeof(GameplayModifierContainer_FireActiveStatusViewEvent) == 0x000044, "Wrong size on GameplayModifierContainer_FireActiveStatusViewEvent");
static_assert(offsetof(GameplayModifierContainer_FireActiveStatusViewEvent, Param_StatusViewID) == 0x000000, "Member 'GameplayModifierContainer_FireActiveStatusViewEvent::Param_StatusViewID' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_FireActiveStatusViewEvent, UniqueSourceID) == 0x00000C, "Member 'GameplayModifierContainer_FireActiveStatusViewEvent::UniqueSourceID' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_FireActiveStatusViewEvent, StatusViewSource) == 0x000018, "Member 'GameplayModifierContainer_FireActiveStatusViewEvent::StatusViewSource' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerDuration
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerDuration) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerDuration");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerDuration) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerDuration");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerDuration, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerElapsedTime) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerElapsedTime");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerElapsedTime) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerElapsedTime");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerElapsedTime, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerElapsedTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerElapsedTimePercent
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerElapsedTimePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerElapsedTimePercent) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerElapsedTimePercent");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerElapsedTimePercent) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerElapsedTimePercent");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerElapsedTimePercent, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerElapsedTimePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerPercentRemaining
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerPercentRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerPercentRemaining) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerPercentRemaining");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerPercentRemaining) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerPercentRemaining");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerPercentRemaining, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerPercentRemaining::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetActivationTimerRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetActivationTimerRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetActivationTimerRemainingTime) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetActivationTimerRemainingTime");
static_assert(sizeof(GameplayModifierContainer_GetActivationTimerRemainingTime) == 0x000004, "Wrong size on GameplayModifierContainer_GetActivationTimerRemainingTime");
static_assert(offsetof(GameplayModifierContainer_GetActivationTimerRemainingTime, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetActivationTimerRemainingTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetIconFilePathIndex
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetIconFilePathIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetIconFilePathIndex) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetIconFilePathIndex");
static_assert(sizeof(GameplayModifierContainer_GetIconFilePathIndex) == 0x000004, "Wrong size on GameplayModifierContainer_GetIconFilePathIndex");
static_assert(offsetof(GameplayModifierContainer_GetIconFilePathIndex, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetIconFilePathIndex::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetInventoryItemType
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_GetInventoryItemType final
{
public:
	EInventoryItemType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetInventoryItemType) == 0x000001, "Wrong alignment on GameplayModifierContainer_GetInventoryItemType");
static_assert(sizeof(GameplayModifierContainer_GetInventoryItemType) == 0x000001, "Wrong size on GameplayModifierContainer_GetInventoryItemType");
static_assert(offsetof(GameplayModifierContainer_GetInventoryItemType, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetInventoryItemType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetLevelToDisplay
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetLevelToDisplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetLevelToDisplay) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetLevelToDisplay");
static_assert(sizeof(GameplayModifierContainer_GetLevelToDisplay) == 0x000004, "Wrong size on GameplayModifierContainer_GetLevelToDisplay");
static_assert(offsetof(GameplayModifierContainer_GetLevelToDisplay, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetLevelToDisplay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetModifierValue
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_GetModifierValue final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetModifierValue) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetModifierValue");
static_assert(sizeof(GameplayModifierContainer_GetModifierValue) == 0x000010, "Wrong size on GameplayModifierContainer_GetModifierValue");
static_assert(offsetof(GameplayModifierContainer_GetModifierValue, Type) == 0x000000, "Member 'GameplayModifierContainer_GetModifierValue::Type' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_GetModifierValue, ReturnValue) == 0x00000C, "Member 'GameplayModifierContainer_GetModifierValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetOriginatingEffect
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierContainer_GetOriginatingEffect final
{
public:
	class UGameplayModifierContainer*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetOriginatingEffect) == 0x000008, "Wrong alignment on GameplayModifierContainer_GetOriginatingEffect");
static_assert(sizeof(GameplayModifierContainer_GetOriginatingEffect) == 0x000008, "Wrong size on GameplayModifierContainer_GetOriginatingEffect");
static_assert(offsetof(GameplayModifierContainer_GetOriginatingEffect, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetOriginatingEffect::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierContainer_GetOwningPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetOwningPlayer) == 0x000008, "Wrong alignment on GameplayModifierContainer_GetOwningPlayer");
static_assert(sizeof(GameplayModifierContainer_GetOwningPlayer) == 0x000008, "Wrong size on GameplayModifierContainer_GetOwningPlayer");
static_assert(offsetof(GameplayModifierContainer_GetOwningPlayer, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetPercentageFill
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetPercentageFill final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetPercentageFill) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetPercentageFill");
static_assert(sizeof(GameplayModifierContainer_GetPercentageFill) == 0x000004, "Wrong size on GameplayModifierContainer_GetPercentageFill");
static_assert(offsetof(GameplayModifierContainer_GetPercentageFill, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetPercentageFill::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.GetRemainingLifetime
// 0x0004 (0x0004 - 0x0000)
struct GameplayModifierContainer_GetRemainingLifetime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_GetRemainingLifetime) == 0x000004, "Wrong alignment on GameplayModifierContainer_GetRemainingLifetime");
static_assert(sizeof(GameplayModifierContainer_GetRemainingLifetime) == 0x000004, "Wrong size on GameplayModifierContainer_GetRemainingLifetime");
static_assert(offsetof(GameplayModifierContainer_GetRemainingLifetime, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_GetRemainingLifetime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.HasFlag
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_HasFlag final
{
public:
	struct FGameplayTag                           Flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierContainer_HasFlag) == 0x000004, "Wrong alignment on GameplayModifierContainer_HasFlag");
static_assert(sizeof(GameplayModifierContainer_HasFlag) == 0x000010, "Wrong size on GameplayModifierContainer_HasFlag");
static_assert(offsetof(GameplayModifierContainer_HasFlag, Flag) == 0x000000, "Member 'GameplayModifierContainer_HasFlag::Flag' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_HasFlag, ReturnValue) == 0x00000C, "Member 'GameplayModifierContainer_HasFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.HasModifierOfType
// 0x0010 (0x0010 - 0x0000)
struct GameplayModifierContainer_HasModifierOfType final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierContainer_HasModifierOfType) == 0x000004, "Wrong alignment on GameplayModifierContainer_HasModifierOfType");
static_assert(sizeof(GameplayModifierContainer_HasModifierOfType) == 0x000010, "Wrong size on GameplayModifierContainer_HasModifierOfType");
static_assert(offsetof(GameplayModifierContainer_HasModifierOfType, Type) == 0x000000, "Member 'GameplayModifierContainer_HasModifierOfType::Type' has a wrong offset!");
static_assert(offsetof(GameplayModifierContainer_HasModifierOfType, ReturnValue) == 0x00000C, "Member 'GameplayModifierContainer_HasModifierOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.IsActivationTimerActive
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_IsActivationTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_IsActivationTimerActive) == 0x000001, "Wrong alignment on GameplayModifierContainer_IsActivationTimerActive");
static_assert(sizeof(GameplayModifierContainer_IsActivationTimerActive) == 0x000001, "Wrong size on GameplayModifierContainer_IsActivationTimerActive");
static_assert(offsetof(GameplayModifierContainer_IsActivationTimerActive, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_IsActivationTimerActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.IsActivationTimerDone
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_IsActivationTimerDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_IsActivationTimerDone) == 0x000001, "Wrong alignment on GameplayModifierContainer_IsActivationTimerDone");
static_assert(sizeof(GameplayModifierContainer_IsActivationTimerDone) == 0x000001, "Wrong size on GameplayModifierContainer_IsActivationTimerDone");
static_assert(offsetof(GameplayModifierContainer_IsActivationTimerDone, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_IsActivationTimerDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierContainer.IsStatusViewActive
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierContainer_IsStatusViewActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierContainer_IsStatusViewActive) == 0x000001, "Wrong alignment on GameplayModifierContainer_IsStatusViewActive");
static_assert(sizeof(GameplayModifierContainer_IsStatusViewActive) == 0x000001, "Wrong size on GameplayModifierContainer_IsStatusViewActive");
static_assert(offsetof(GameplayModifierContainer_IsStatusViewActive, ReturnValue) == 0x000000, "Member 'GameplayModifierContainer_IsStatusViewActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Competence.Authority_SetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct Competence_Authority_SetMaxTokenCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_Authority_SetMaxTokenCount) == 0x000004, "Wrong alignment on Competence_Authority_SetMaxTokenCount");
static_assert(sizeof(Competence_Authority_SetMaxTokenCount) == 0x000004, "Wrong size on Competence_Authority_SetMaxTokenCount");
static_assert(offsetof(Competence_Authority_SetMaxTokenCount, Value) == 0x000000, "Member 'Competence_Authority_SetMaxTokenCount::Value' has a wrong offset!");

// Function DeadByDaylight.Competence.Authority_SetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct Competence_Authority_SetTokenCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_Authority_SetTokenCount) == 0x000004, "Wrong alignment on Competence_Authority_SetTokenCount");
static_assert(sizeof(Competence_Authority_SetTokenCount) == 0x000004, "Wrong size on Competence_Authority_SetTokenCount");
static_assert(offsetof(Competence_Authority_SetTokenCount, Value) == 0x000000, "Member 'Competence_Authority_SetTokenCount::Value' has a wrong offset!");

// Function DeadByDaylight.Competence.Authority_TriggerCooldownTimer
// 0x0004 (0x0004 - 0x0000)
struct Competence_Authority_TriggerCooldownTimer final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_Authority_TriggerCooldownTimer) == 0x000004, "Wrong alignment on Competence_Authority_TriggerCooldownTimer");
static_assert(sizeof(Competence_Authority_TriggerCooldownTimer) == 0x000004, "Wrong size on Competence_Authority_TriggerCooldownTimer");
static_assert(offsetof(Competence_Authority_TriggerCooldownTimer, Duration) == 0x000000, "Member 'Competence_Authority_TriggerCooldownTimer::Duration' has a wrong offset!");

// Function DeadByDaylight.Competence.Authority_TriggerHudIconTimer
// 0x0004 (0x0004 - 0x0000)
struct Competence_Authority_TriggerHudIconTimer final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_Authority_TriggerHudIconTimer) == 0x000004, "Wrong alignment on Competence_Authority_TriggerHudIconTimer");
static_assert(sizeof(Competence_Authority_TriggerHudIconTimer) == 0x000004, "Wrong size on Competence_Authority_TriggerHudIconTimer");
static_assert(offsetof(Competence_Authority_TriggerHudIconTimer, Duration) == 0x000000, "Member 'Competence_Authority_TriggerHudIconTimer::Duration' has a wrong offset!");

// Function DeadByDaylight.Competence.OnRep_TokenCount
// 0x0004 (0x0004 - 0x0000)
struct Competence_OnRep_TokenCount final
{
public:
	int32                                         OldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_OnRep_TokenCount) == 0x000004, "Wrong alignment on Competence_OnRep_TokenCount");
static_assert(sizeof(Competence_OnRep_TokenCount) == 0x000004, "Wrong size on Competence_OnRep_TokenCount");
static_assert(offsetof(Competence_OnRep_TokenCount, OldCount) == 0x000000, "Member 'Competence_OnRep_TokenCount::OldCount' has a wrong offset!");

// Function DeadByDaylight.Competence.GetCooldownTimer
// 0x0008 (0x0008 - 0x0000)
struct Competence_GetCooldownTimer final
{
public:
	class UTimerObject*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_GetCooldownTimer) == 0x000008, "Wrong alignment on Competence_GetCooldownTimer");
static_assert(sizeof(Competence_GetCooldownTimer) == 0x000008, "Wrong size on Competence_GetCooldownTimer");
static_assert(offsetof(Competence_GetCooldownTimer, ReturnValue) == 0x000000, "Member 'Competence_GetCooldownTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Competence.GetHudIconTimerElapsedTimePercent
// 0x0004 (0x0004 - 0x0000)
struct Competence_GetHudIconTimerElapsedTimePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_GetHudIconTimerElapsedTimePercent) == 0x000004, "Wrong alignment on Competence_GetHudIconTimerElapsedTimePercent");
static_assert(sizeof(Competence_GetHudIconTimerElapsedTimePercent) == 0x000004, "Wrong size on Competence_GetHudIconTimerElapsedTimePercent");
static_assert(offsetof(Competence_GetHudIconTimerElapsedTimePercent, ReturnValue) == 0x000000, "Member 'Competence_GetHudIconTimerElapsedTimePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Competence.GetHudIconTimerRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct Competence_GetHudIconTimerRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_GetHudIconTimerRemainingTime) == 0x000004, "Wrong alignment on Competence_GetHudIconTimerRemainingTime");
static_assert(sizeof(Competence_GetHudIconTimerRemainingTime) == 0x000004, "Wrong size on Competence_GetHudIconTimerRemainingTime");
static_assert(offsetof(Competence_GetHudIconTimerRemainingTime, ReturnValue) == 0x000000, "Member 'Competence_GetHudIconTimerRemainingTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Competence.GetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct Competence_GetMaxTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_GetMaxTokenCount) == 0x000004, "Wrong alignment on Competence_GetMaxTokenCount");
static_assert(sizeof(Competence_GetMaxTokenCount) == 0x000004, "Wrong size on Competence_GetMaxTokenCount");
static_assert(offsetof(Competence_GetMaxTokenCount, ReturnValue) == 0x000000, "Member 'Competence_GetMaxTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Competence.GetPerkIconStrategy
// 0x0008 (0x0008 - 0x0000)
struct Competence_GetPerkIconStrategy final
{
public:
	class UBasePerkIconStrategy*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_GetPerkIconStrategy) == 0x000008, "Wrong alignment on Competence_GetPerkIconStrategy");
static_assert(sizeof(Competence_GetPerkIconStrategy) == 0x000008, "Wrong size on Competence_GetPerkIconStrategy");
static_assert(offsetof(Competence_GetPerkIconStrategy, ReturnValue) == 0x000000, "Member 'Competence_GetPerkIconStrategy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Competence.GetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct Competence_GetTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_GetTokenCount) == 0x000004, "Wrong alignment on Competence_GetTokenCount");
static_assert(sizeof(Competence_GetTokenCount) == 0x000004, "Wrong size on Competence_GetTokenCount");
static_assert(offsetof(Competence_GetTokenCount, ReturnValue) == 0x000000, "Member 'Competence_GetTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Competence.IsCooldownTimerDone
// 0x0001 (0x0001 - 0x0000)
struct Competence_IsCooldownTimerDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_IsCooldownTimerDone) == 0x000001, "Wrong alignment on Competence_IsCooldownTimerDone");
static_assert(sizeof(Competence_IsCooldownTimerDone) == 0x000001, "Wrong size on Competence_IsCooldownTimerDone");
static_assert(offsetof(Competence_IsCooldownTimerDone, ReturnValue) == 0x000000, "Member 'Competence_IsCooldownTimerDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Competence.IsHudIconTimerActive
// 0x0001 (0x0001 - 0x0000)
struct Competence_IsHudIconTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_IsHudIconTimerActive) == 0x000001, "Wrong alignment on Competence_IsHudIconTimerActive");
static_assert(sizeof(Competence_IsHudIconTimerActive) == 0x000001, "Wrong size on Competence_IsHudIconTimerActive");
static_assert(offsetof(Competence_IsHudIconTimerActive, ReturnValue) == 0x000000, "Member 'Competence_IsHudIconTimerActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Competence.IsHudIconTimerDone
// 0x0001 (0x0001 - 0x0000)
struct Competence_IsHudIconTimerDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Competence_IsHudIconTimerDone) == 0x000001, "Wrong alignment on Competence_IsHudIconTimerDone");
static_assert(sizeof(Competence_IsHudIconTimerDone) == 0x000001, "Wrong size on Competence_IsHudIconTimerDone");
static_assert(offsetof(Competence_IsHudIconTimerDone, ReturnValue) == 0x000000, "Member 'Competence_IsHudIconTimerDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime
// 0x0030 (0x0030 - 0x0000)
struct PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime final
{
public:
	TSubclassOf<class UStatusEffect>              EffectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             OriginatingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomParam;                                       // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayModifierContainer*             OriginatingEffect;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldDisplay;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStatusEffect*                          ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime) == 0x000008, "Wrong alignment on PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime");
static_assert(sizeof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime) == 0x000030, "Wrong size on PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, EffectClass) == 0x000000, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::EffectClass' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, OriginatingPlayer) == 0x000008, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::OriginatingPlayer' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, Lifetime) == 0x000010, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::Lifetime' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, CustomParam) == 0x000014, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::CustomParam' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, OriginatingEffect) == 0x000018, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::OriginatingEffect' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, ShouldDisplay) == 0x000020, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::ShouldDisplay' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime, ReturnValue) == 0x000028, "Member 'PerkManager_Authority_ImposeNewStatusEffectOfClassOrChangeLifeTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_ImposeStatusEffectFromTemplate
// 0x0030 (0x0030 - 0x0000)
struct PerkManager_Authority_ImposeStatusEffectFromTemplate final
{
public:
	class UStatusEffect*                          EffectTemplate;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             OriginatingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomParam;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             OriginatingEffect;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldDisplay;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lifetime;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_ImposeStatusEffectFromTemplate) == 0x000008, "Wrong alignment on PerkManager_Authority_ImposeStatusEffectFromTemplate");
static_assert(sizeof(PerkManager_Authority_ImposeStatusEffectFromTemplate) == 0x000030, "Wrong size on PerkManager_Authority_ImposeStatusEffectFromTemplate");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectFromTemplate, EffectTemplate) == 0x000000, "Member 'PerkManager_Authority_ImposeStatusEffectFromTemplate::EffectTemplate' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectFromTemplate, OriginatingPlayer) == 0x000008, "Member 'PerkManager_Authority_ImposeStatusEffectFromTemplate::OriginatingPlayer' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectFromTemplate, CustomParam) == 0x000010, "Member 'PerkManager_Authority_ImposeStatusEffectFromTemplate::CustomParam' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectFromTemplate, OriginatingEffect) == 0x000018, "Member 'PerkManager_Authority_ImposeStatusEffectFromTemplate::OriginatingEffect' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectFromTemplate, ShouldDisplay) == 0x000020, "Member 'PerkManager_Authority_ImposeStatusEffectFromTemplate::ShouldDisplay' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectFromTemplate, Lifetime) == 0x000024, "Member 'PerkManager_Authority_ImposeStatusEffectFromTemplate::Lifetime' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectFromTemplate, ReturnValue) == 0x000028, "Member 'PerkManager_Authority_ImposeStatusEffectFromTemplate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_ImposeStatusEffectOfClass
// 0x0030 (0x0030 - 0x0000)
struct PerkManager_Authority_ImposeStatusEffectOfClass final
{
public:
	TSubclassOf<class UStatusEffect>              EffectClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             OriginatingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomParam;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             OriginatingEffect;                                 // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldDisplay;                                     // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Lifetime;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_ImposeStatusEffectOfClass) == 0x000008, "Wrong alignment on PerkManager_Authority_ImposeStatusEffectOfClass");
static_assert(sizeof(PerkManager_Authority_ImposeStatusEffectOfClass) == 0x000030, "Wrong size on PerkManager_Authority_ImposeStatusEffectOfClass");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, EffectClass) == 0x000000, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::EffectClass' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, OriginatingPlayer) == 0x000008, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::OriginatingPlayer' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, CustomParam) == 0x000010, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::CustomParam' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, OriginatingEffect) == 0x000018, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::OriginatingEffect' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, ShouldDisplay) == 0x000020, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::ShouldDisplay' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, Lifetime) == 0x000024, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::Lifetime' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_ImposeStatusEffectOfClass, ReturnValue) == 0x000028, "Member 'PerkManager_Authority_ImposeStatusEffectOfClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_RemoveStatusEffect
// 0x0008 (0x0008 - 0x0000)
struct PerkManager_Authority_RemoveStatusEffect final
{
public:
	class UStatusEffect*                          StatusEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_RemoveStatusEffect) == 0x000008, "Wrong alignment on PerkManager_Authority_RemoveStatusEffect");
static_assert(sizeof(PerkManager_Authority_RemoveStatusEffect) == 0x000008, "Wrong size on PerkManager_Authority_RemoveStatusEffect");
static_assert(offsetof(PerkManager_Authority_RemoveStatusEffect, StatusEffect) == 0x000000, "Member 'PerkManager_Authority_RemoveStatusEffect::StatusEffect' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_RemoveStatusEffectByClass
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_Authority_RemoveStatusEffectByClass final
{
public:
	const class UClass*                           EffectClass;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveAllOfSameClass;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_Authority_RemoveStatusEffectByClass) == 0x000008, "Wrong alignment on PerkManager_Authority_RemoveStatusEffectByClass");
static_assert(sizeof(PerkManager_Authority_RemoveStatusEffectByClass) == 0x000010, "Wrong size on PerkManager_Authority_RemoveStatusEffectByClass");
static_assert(offsetof(PerkManager_Authority_RemoveStatusEffectByClass, EffectClass) == 0x000000, "Member 'PerkManager_Authority_RemoveStatusEffectByClass::EffectClass' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_RemoveStatusEffectByClass, bRemoveAllOfSameClass) == 0x000008, "Member 'PerkManager_Authority_RemoveStatusEffectByClass::bRemoveAllOfSameClass' has a wrong offset!");

// Function DeadByDaylight.PerkManager.Authority_SpawnPerk
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_Authority_SpawnPerk final
{
public:
	class FName                                   PerkId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerkLevel;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_Authority_SpawnPerk) == 0x000004, "Wrong alignment on PerkManager_Authority_SpawnPerk");
static_assert(sizeof(PerkManager_Authority_SpawnPerk) == 0x000010, "Wrong size on PerkManager_Authority_SpawnPerk");
static_assert(offsetof(PerkManager_Authority_SpawnPerk, PerkId) == 0x000000, "Member 'PerkManager_Authority_SpawnPerk::PerkId' has a wrong offset!");
static_assert(offsetof(PerkManager_Authority_SpawnPerk, PerkLevel) == 0x00000C, "Member 'PerkManager_Authority_SpawnPerk::PerkLevel' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllSourcesWithFlag
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetAllSourcesWithFlag final
{
public:
	struct FGameplayTag                           Flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameplayModifierContainer*>     ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllSourcesWithFlag) == 0x000008, "Wrong alignment on PerkManager_GetAllSourcesWithFlag");
static_assert(sizeof(PerkManager_GetAllSourcesWithFlag) == 0x000020, "Wrong size on PerkManager_GetAllSourcesWithFlag");
static_assert(offsetof(PerkManager_GetAllSourcesWithFlag, Flag) == 0x000000, "Member 'PerkManager_GetAllSourcesWithFlag::Flag' has a wrong offset!");
static_assert(offsetof(PerkManager_GetAllSourcesWithFlag, ReturnValue) == 0x000010, "Member 'PerkManager_GetAllSourcesWithFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllSourcesWithModifier
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetAllSourcesWithModifier final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameplayModifierContainer*>     ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllSourcesWithModifier) == 0x000008, "Wrong alignment on PerkManager_GetAllSourcesWithModifier");
static_assert(sizeof(PerkManager_GetAllSourcesWithModifier) == 0x000020, "Wrong size on PerkManager_GetAllSourcesWithModifier");
static_assert(offsetof(PerkManager_GetAllSourcesWithModifier, Type) == 0x000000, "Member 'PerkManager_GetAllSourcesWithModifier::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetAllSourcesWithModifier, ReturnValue) == 0x000010, "Member 'PerkManager_GetAllSourcesWithModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllStatusEffects
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetAllStatusEffects final
{
public:
	TArray<class UStatusEffect*>                  ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllStatusEffects) == 0x000008, "Wrong alignment on PerkManager_GetAllStatusEffects");
static_assert(sizeof(PerkManager_GetAllStatusEffects) == 0x000010, "Wrong size on PerkManager_GetAllStatusEffects");
static_assert(offsetof(PerkManager_GetAllStatusEffects, ReturnValue) == 0x000000, "Member 'PerkManager_GetAllStatusEffects::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllStatusEffectsByClass
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_GetAllStatusEffectsByClass final
{
public:
	const class UClass*                           Type;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStatusEffect*>                  ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllStatusEffectsByClass) == 0x000008, "Wrong alignment on PerkManager_GetAllStatusEffectsByClass");
static_assert(sizeof(PerkManager_GetAllStatusEffectsByClass) == 0x000018, "Wrong size on PerkManager_GetAllStatusEffectsByClass");
static_assert(offsetof(PerkManager_GetAllStatusEffectsByClass, Type) == 0x000000, "Member 'PerkManager_GetAllStatusEffectsByClass::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetAllStatusEffectsByClass, ReturnValue) == 0x000008, "Member 'PerkManager_GetAllStatusEffectsByClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAllStatusEffectsByID
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetAllStatusEffectsByID final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStatusEffect*>                  ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAllStatusEffectsByID) == 0x000008, "Wrong alignment on PerkManager_GetAllStatusEffectsByID");
static_assert(sizeof(PerkManager_GetAllStatusEffectsByID) == 0x000020, "Wrong size on PerkManager_GetAllStatusEffectsByID");
static_assert(offsetof(PerkManager_GetAllStatusEffectsByID, ID) == 0x000000, "Member 'PerkManager_GetAllStatusEffectsByID::ID' has a wrong offset!");
static_assert(offsetof(PerkManager_GetAllStatusEffectsByID, ReturnValue) == 0x000010, "Member 'PerkManager_GetAllStatusEffectsByID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetAveragePerkModifierValue
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetAveragePerkModifierValue final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetAveragePerkModifierValue) == 0x000004, "Wrong alignment on PerkManager_GetAveragePerkModifierValue");
static_assert(sizeof(PerkManager_GetAveragePerkModifierValue) == 0x000010, "Wrong size on PerkManager_GetAveragePerkModifierValue");
static_assert(offsetof(PerkManager_GetAveragePerkModifierValue, Type) == 0x000000, "Member 'PerkManager_GetAveragePerkModifierValue::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetAveragePerkModifierValue, ReturnValue) == 0x00000C, "Member 'PerkManager_GetAveragePerkModifierValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetCompoundedModifierValue
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetCompoundedModifierValue final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetCompoundedModifierValue) == 0x000004, "Wrong alignment on PerkManager_GetCompoundedModifierValue");
static_assert(sizeof(PerkManager_GetCompoundedModifierValue) == 0x000010, "Wrong size on PerkManager_GetCompoundedModifierValue");
static_assert(offsetof(PerkManager_GetCompoundedModifierValue, Type) == 0x000000, "Member 'PerkManager_GetCompoundedModifierValue::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetCompoundedModifierValue, ReturnValue) == 0x00000C, "Member 'PerkManager_GetCompoundedModifierValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetMultiplicativeModifierValue
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetMultiplicativeModifierValue final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetMultiplicativeModifierValue) == 0x000004, "Wrong alignment on PerkManager_GetMultiplicativeModifierValue");
static_assert(sizeof(PerkManager_GetMultiplicativeModifierValue) == 0x000010, "Wrong size on PerkManager_GetMultiplicativeModifierValue");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValue, Type) == 0x000000, "Member 'PerkManager_GetMultiplicativeModifierValue::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValue, ReturnValue) == 0x00000C, "Member 'PerkManager_GetMultiplicativeModifierValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetMultiplicativeModifierValueOfContainerWithCompoundNegative
// 0x0028 (0x0028 - 0x0000)
struct PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative final
{
public:
	struct FGameplayTagContainer                  Container;                                         // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative) == 0x000008, "Wrong alignment on PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative");
static_assert(sizeof(PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative) == 0x000028, "Wrong size on PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative, Container) == 0x000000, "Member 'PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative::Container' has a wrong offset!");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative, ReturnValue) == 0x000020, "Member 'PerkManager_GetMultiplicativeModifierValueOfContainerWithCompoundNegative::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetMultiplicativeModifierValueWithCompoundNegative
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetMultiplicativeModifierValueWithCompoundNegative final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetMultiplicativeModifierValueWithCompoundNegative) == 0x000004, "Wrong alignment on PerkManager_GetMultiplicativeModifierValueWithCompoundNegative");
static_assert(sizeof(PerkManager_GetMultiplicativeModifierValueWithCompoundNegative) == 0x000010, "Wrong size on PerkManager_GetMultiplicativeModifierValueWithCompoundNegative");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValueWithCompoundNegative, Type) == 0x000000, "Member 'PerkManager_GetMultiplicativeModifierValueWithCompoundNegative::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetMultiplicativeModifierValueWithCompoundNegative, ReturnValue) == 0x00000C, "Member 'PerkManager_GetMultiplicativeModifierValueWithCompoundNegative::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerk
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_GetPerk final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPerk*                                  ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerk) == 0x000008, "Wrong alignment on PerkManager_GetPerk");
static_assert(sizeof(PerkManager_GetPerk) == 0x000018, "Wrong size on PerkManager_GetPerk");
static_assert(offsetof(PerkManager_GetPerk, ID) == 0x000000, "Member 'PerkManager_GetPerk::ID' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerk, ReturnValue) == 0x000010, "Member 'PerkManager_GetPerk::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifier
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetPerkModifier final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerkModifier) == 0x000004, "Wrong alignment on PerkManager_GetPerkModifier");
static_assert(sizeof(PerkManager_GetPerkModifier) == 0x000010, "Wrong size on PerkManager_GetPerkModifier");
static_assert(offsetof(PerkManager_GetPerkModifier, Type) == 0x000000, "Member 'PerkManager_GetPerkModifier::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifier, ReturnValue) == 0x00000C, "Member 'PerkManager_GetPerkModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierAdditiveValue
// 0x0014 (0x0014 - 0x0000)
struct PerkManager_GetPerkModifierAdditiveValue final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseValue;                                         // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerkModifierAdditiveValue) == 0x000004, "Wrong alignment on PerkManager_GetPerkModifierAdditiveValue");
static_assert(sizeof(PerkManager_GetPerkModifierAdditiveValue) == 0x000014, "Wrong size on PerkManager_GetPerkModifierAdditiveValue");
static_assert(offsetof(PerkManager_GetPerkModifierAdditiveValue, Type) == 0x000000, "Member 'PerkManager_GetPerkModifierAdditiveValue::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierAdditiveValue, BaseValue) == 0x00000C, "Member 'PerkManager_GetPerkModifierAdditiveValue::BaseValue' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierAdditiveValue, ReturnValue) == 0x000010, "Member 'PerkManager_GetPerkModifierAdditiveValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierMaxValue
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetPerkModifierMaxValue final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerkModifierMaxValue) == 0x000004, "Wrong alignment on PerkManager_GetPerkModifierMaxValue");
static_assert(sizeof(PerkManager_GetPerkModifierMaxValue) == 0x000010, "Wrong size on PerkManager_GetPerkModifierMaxValue");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValue, Type) == 0x000000, "Member 'PerkManager_GetPerkModifierMaxValue::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValue, ReturnValue) == 0x00000C, "Member 'PerkManager_GetPerkModifierMaxValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierMaxValueAndSource
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetPerkModifierMaxValueAndSource final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             OutSource;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_GetPerkModifierMaxValueAndSource) == 0x000008, "Wrong alignment on PerkManager_GetPerkModifierMaxValueAndSource");
static_assert(sizeof(PerkManager_GetPerkModifierMaxValueAndSource) == 0x000020, "Wrong size on PerkManager_GetPerkModifierMaxValueAndSource");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValueAndSource, Type) == 0x000000, "Member 'PerkManager_GetPerkModifierMaxValueAndSource::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValueAndSource, OutSource) == 0x000010, "Member 'PerkManager_GetPerkModifierMaxValueAndSource::OutSource' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMaxValueAndSource, ReturnValue) == 0x000018, "Member 'PerkManager_GetPerkModifierMaxValueAndSource::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierMinValue
// 0x0014 (0x0014 - 0x0000)
struct PerkManager_GetPerkModifierMinValue final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerkModifierMinValue) == 0x000004, "Wrong alignment on PerkManager_GetPerkModifierMinValue");
static_assert(sizeof(PerkManager_GetPerkModifierMinValue) == 0x000014, "Wrong size on PerkManager_GetPerkModifierMinValue");
static_assert(offsetof(PerkManager_GetPerkModifierMinValue, Type) == 0x000000, "Member 'PerkManager_GetPerkModifierMinValue::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValue, StartValue) == 0x00000C, "Member 'PerkManager_GetPerkModifierMinValue::StartValue' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValue, ReturnValue) == 0x000010, "Member 'PerkManager_GetPerkModifierMinValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerkModifierMinValueAndSource
// 0x0020 (0x0020 - 0x0000)
struct PerkManager_GetPerkModifierMinValueAndSource final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartValue;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayModifierContainer*             OutSource;                                         // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_GetPerkModifierMinValueAndSource) == 0x000008, "Wrong alignment on PerkManager_GetPerkModifierMinValueAndSource");
static_assert(sizeof(PerkManager_GetPerkModifierMinValueAndSource) == 0x000020, "Wrong size on PerkManager_GetPerkModifierMinValueAndSource");
static_assert(offsetof(PerkManager_GetPerkModifierMinValueAndSource, Type) == 0x000000, "Member 'PerkManager_GetPerkModifierMinValueAndSource::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValueAndSource, StartValue) == 0x00000C, "Member 'PerkManager_GetPerkModifierMinValueAndSource::StartValue' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValueAndSource, OutSource) == 0x000010, "Member 'PerkManager_GetPerkModifierMinValueAndSource::OutSource' has a wrong offset!");
static_assert(offsetof(PerkManager_GetPerkModifierMinValueAndSource, ReturnValue) == 0x000018, "Member 'PerkManager_GetPerkModifierMinValueAndSource::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetPerks
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetPerks final
{
public:
	TArray<class UPerk*>                          ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetPerks) == 0x000008, "Wrong alignment on PerkManager_GetPerks");
static_assert(sizeof(PerkManager_GetPerks) == 0x000010, "Wrong size on PerkManager_GetPerks");
static_assert(offsetof(PerkManager_GetPerks, ReturnValue) == 0x000000, "Member 'PerkManager_GetPerks::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetSourceWithFlag
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_GetSourceWithFlag final
{
public:
	struct FGameplayTag                           Flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetSourceWithFlag) == 0x000008, "Wrong alignment on PerkManager_GetSourceWithFlag");
static_assert(sizeof(PerkManager_GetSourceWithFlag) == 0x000018, "Wrong size on PerkManager_GetSourceWithFlag");
static_assert(offsetof(PerkManager_GetSourceWithFlag, Flag) == 0x000000, "Member 'PerkManager_GetSourceWithFlag::Flag' has a wrong offset!");
static_assert(offsetof(PerkManager_GetSourceWithFlag, ReturnValue) == 0x000010, "Member 'PerkManager_GetSourceWithFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetSourceWithModifier
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_GetSourceWithModifier final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayModifierContainer*             ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetSourceWithModifier) == 0x000008, "Wrong alignment on PerkManager_GetSourceWithModifier");
static_assert(sizeof(PerkManager_GetSourceWithModifier) == 0x000018, "Wrong size on PerkManager_GetSourceWithModifier");
static_assert(offsetof(PerkManager_GetSourceWithModifier, Type) == 0x000000, "Member 'PerkManager_GetSourceWithModifier::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetSourceWithModifier, ReturnValue) == 0x000010, "Member 'PerkManager_GetSourceWithModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.GetStatusEffectByClass
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_GetStatusEffectByClass final
{
public:
	const class UClass*                           Type;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStatusEffect*                          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_GetStatusEffectByClass) == 0x000008, "Wrong alignment on PerkManager_GetStatusEffectByClass");
static_assert(sizeof(PerkManager_GetStatusEffectByClass) == 0x000010, "Wrong size on PerkManager_GetStatusEffectByClass");
static_assert(offsetof(PerkManager_GetStatusEffectByClass, Type) == 0x000000, "Member 'PerkManager_GetStatusEffectByClass::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_GetStatusEffectByClass, ReturnValue) == 0x000008, "Member 'PerkManager_GetStatusEffectByClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasAllCharacterPerksEquipped
// 0x0001 (0x0001 - 0x0000)
struct PerkManager_HasAllCharacterPerksEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkManager_HasAllCharacterPerksEquipped) == 0x000001, "Wrong alignment on PerkManager_HasAllCharacterPerksEquipped");
static_assert(sizeof(PerkManager_HasAllCharacterPerksEquipped) == 0x000001, "Wrong size on PerkManager_HasAllCharacterPerksEquipped");
static_assert(offsetof(PerkManager_HasAllCharacterPerksEquipped, ReturnValue) == 0x000000, "Member 'PerkManager_HasAllCharacterPerksEquipped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasAnyAddonWithTag
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasAnyAddonWithTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasAnyAddonWithTag) == 0x000004, "Wrong alignment on PerkManager_HasAnyAddonWithTag");
static_assert(sizeof(PerkManager_HasAnyAddonWithTag) == 0x000010, "Wrong size on PerkManager_HasAnyAddonWithTag");
static_assert(offsetof(PerkManager_HasAnyAddonWithTag, Tag) == 0x000000, "Member 'PerkManager_HasAnyAddonWithTag::Tag' has a wrong offset!");
static_assert(offsetof(PerkManager_HasAnyAddonWithTag, ReturnValue) == 0x00000C, "Member 'PerkManager_HasAnyAddonWithTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkFlag
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasPerkFlag final
{
public:
	struct FGameplayTag                           Flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkFlag) == 0x000004, "Wrong alignment on PerkManager_HasPerkFlag");
static_assert(sizeof(PerkManager_HasPerkFlag) == 0x000010, "Wrong size on PerkManager_HasPerkFlag");
static_assert(offsetof(PerkManager_HasPerkFlag, Flag) == 0x000000, "Member 'PerkManager_HasPerkFlag::Flag' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkFlag, ReturnValue) == 0x00000C, "Member 'PerkManager_HasPerkFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkFlagFromSource
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasPerkFlagFromSource final
{
public:
	struct FGameplayTag                           Flag;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayModifierSource                       ModifierSource;                                    // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000D(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkFlagFromSource) == 0x000004, "Wrong alignment on PerkManager_HasPerkFlagFromSource");
static_assert(sizeof(PerkManager_HasPerkFlagFromSource) == 0x000010, "Wrong size on PerkManager_HasPerkFlagFromSource");
static_assert(offsetof(PerkManager_HasPerkFlagFromSource, Flag) == 0x000000, "Member 'PerkManager_HasPerkFlagFromSource::Flag' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkFlagFromSource, ModifierSource) == 0x00000C, "Member 'PerkManager_HasPerkFlagFromSource::ModifierSource' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkFlagFromSource, ReturnValue) == 0x00000D, "Member 'PerkManager_HasPerkFlagFromSource::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkFlags
// 0x0018 (0x0018 - 0x0000)
struct PerkManager_HasPerkFlags final
{
public:
	TArray<struct FGameplayTag>                   Param_Flags;                                       // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkFlags) == 0x000008, "Wrong alignment on PerkManager_HasPerkFlags");
static_assert(sizeof(PerkManager_HasPerkFlags) == 0x000018, "Wrong size on PerkManager_HasPerkFlags");
static_assert(offsetof(PerkManager_HasPerkFlags, Param_Flags) == 0x000000, "Member 'PerkManager_HasPerkFlags::Param_Flags' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkFlags, ReturnValue) == 0x000010, "Member 'PerkManager_HasPerkFlags::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkModifierOfType
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasPerkModifierOfType final
{
public:
	struct FGameplayTag                           Type;                                              // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkModifierOfType) == 0x000004, "Wrong alignment on PerkManager_HasPerkModifierOfType");
static_assert(sizeof(PerkManager_HasPerkModifierOfType) == 0x000010, "Wrong size on PerkManager_HasPerkModifierOfType");
static_assert(offsetof(PerkManager_HasPerkModifierOfType, Type) == 0x000000, "Member 'PerkManager_HasPerkModifierOfType::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkModifierOfType, ReturnValue) == 0x00000C, "Member 'PerkManager_HasPerkModifierOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasPerkSubFlag
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasPerkSubFlag final
{
public:
	struct FGameplayTag                           SubFlag;                                           // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasPerkSubFlag) == 0x000004, "Wrong alignment on PerkManager_HasPerkSubFlag");
static_assert(sizeof(PerkManager_HasPerkSubFlag) == 0x000010, "Wrong size on PerkManager_HasPerkSubFlag");
static_assert(offsetof(PerkManager_HasPerkSubFlag, SubFlag) == 0x000000, "Member 'PerkManager_HasPerkSubFlag::SubFlag' has a wrong offset!");
static_assert(offsetof(PerkManager_HasPerkSubFlag, ReturnValue) == 0x00000C, "Member 'PerkManager_HasPerkSubFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasStatusEffect final
{
public:
	class FName                                   StatusEffectId;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasStatusEffect) == 0x000004, "Wrong alignment on PerkManager_HasStatusEffect");
static_assert(sizeof(PerkManager_HasStatusEffect) == 0x000010, "Wrong size on PerkManager_HasStatusEffect");
static_assert(offsetof(PerkManager_HasStatusEffect, StatusEffectId) == 0x000000, "Member 'PerkManager_HasStatusEffect::StatusEffectId' has a wrong offset!");
static_assert(offsetof(PerkManager_HasStatusEffect, ReturnValue) == 0x00000C, "Member 'PerkManager_HasStatusEffect::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkManager.HasStatusEffectOfClass
// 0x0010 (0x0010 - 0x0000)
struct PerkManager_HasStatusEffectOfClass final
{
public:
	const class UClass*                           Type;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkManager_HasStatusEffectOfClass) == 0x000008, "Wrong alignment on PerkManager_HasStatusEffectOfClass");
static_assert(sizeof(PerkManager_HasStatusEffectOfClass) == 0x000010, "Wrong size on PerkManager_HasStatusEffectOfClass");
static_assert(offsetof(PerkManager_HasStatusEffectOfClass, Type) == 0x000000, "Member 'PerkManager_HasStatusEffectOfClass::Type' has a wrong offset!");
static_assert(offsetof(PerkManager_HasStatusEffectOfClass, ReturnValue) == 0x000008, "Member 'PerkManager_HasStatusEffectOfClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperStillnessTrackerComponent.EnterInteriorZone
// 0x0008 (0x0008 - 0x0000)
struct CamperStillnessTrackerComponent_EnterInteriorZone final
{
public:
	class UExposerInteriorZoneComponent*          Zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperStillnessTrackerComponent_EnterInteriorZone) == 0x000008, "Wrong alignment on CamperStillnessTrackerComponent_EnterInteriorZone");
static_assert(sizeof(CamperStillnessTrackerComponent_EnterInteriorZone) == 0x000008, "Wrong size on CamperStillnessTrackerComponent_EnterInteriorZone");
static_assert(offsetof(CamperStillnessTrackerComponent_EnterInteriorZone, Zone) == 0x000000, "Member 'CamperStillnessTrackerComponent_EnterInteriorZone::Zone' has a wrong offset!");

// Function DeadByDaylight.CamperStillnessTrackerComponent.ExitInteriorZone
// 0x0008 (0x0008 - 0x0000)
struct CamperStillnessTrackerComponent_ExitInteriorZone final
{
public:
	class UExposerInteriorZoneComponent*          Zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperStillnessTrackerComponent_ExitInteriorZone) == 0x000008, "Wrong alignment on CamperStillnessTrackerComponent_ExitInteriorZone");
static_assert(sizeof(CamperStillnessTrackerComponent_ExitInteriorZone) == 0x000008, "Wrong size on CamperStillnessTrackerComponent_ExitInteriorZone");
static_assert(offsetof(CamperStillnessTrackerComponent_ExitInteriorZone, Zone) == 0x000000, "Member 'CamperStillnessTrackerComponent_ExitInteriorZone::Zone' has a wrong offset!");

// Function DeadByDaylight.CamperStillnessTrackerComponent.OnOverlapEnter
// 0x0110 (0x0110 - 0x0000)
struct CamperStillnessTrackerComponent_OnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperStillnessTrackerComponent_OnOverlapEnter) == 0x000008, "Wrong alignment on CamperStillnessTrackerComponent_OnOverlapEnter");
static_assert(sizeof(CamperStillnessTrackerComponent_OnOverlapEnter) == 0x000110, "Wrong size on CamperStillnessTrackerComponent_OnOverlapEnter");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, HitComponent) == 0x000000, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, OtherActor) == 0x000008, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, OtherComp) == 0x000010, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, bFromSweep) == 0x00001C, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapEnter, SweepResult) == 0x000020, "Member 'CamperStillnessTrackerComponent_OnOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.CamperStillnessTrackerComponent.OnOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct CamperStillnessTrackerComponent_OnOverlapExit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperStillnessTrackerComponent_OnOverlapExit) == 0x000008, "Wrong alignment on CamperStillnessTrackerComponent_OnOverlapExit");
static_assert(sizeof(CamperStillnessTrackerComponent_OnOverlapExit) == 0x000020, "Wrong size on CamperStillnessTrackerComponent_OnOverlapExit");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapExit, HitComponent) == 0x000000, "Member 'CamperStillnessTrackerComponent_OnOverlapExit::HitComponent' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapExit, OtherActor) == 0x000008, "Member 'CamperStillnessTrackerComponent_OnOverlapExit::OtherActor' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapExit, OtherComp) == 0x000010, "Member 'CamperStillnessTrackerComponent_OnOverlapExit::OtherComp' has a wrong offset!");
static_assert(offsetof(CamperStillnessTrackerComponent_OnOverlapExit, OtherBodyIndex) == 0x000018, "Member 'CamperStillnessTrackerComponent_OnOverlapExit::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.InteractionProficiency.GetIsActive
// 0x0018 (0x0018 - 0x0000)
struct InteractionProficiency_GetIsActive final
{
public:
	const class UChargeableInteractionDefinition* ChargeableInteraction;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Player;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionProficiency_GetIsActive) == 0x000008, "Wrong alignment on InteractionProficiency_GetIsActive");
static_assert(sizeof(InteractionProficiency_GetIsActive) == 0x000018, "Wrong size on InteractionProficiency_GetIsActive");
static_assert(offsetof(InteractionProficiency_GetIsActive, ChargeableInteraction) == 0x000000, "Member 'InteractionProficiency_GetIsActive::ChargeableInteraction' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetIsActive, Player) == 0x000008, "Member 'InteractionProficiency_GetIsActive::Player' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetIsActive, ReturnValue) == 0x000010, "Member 'InteractionProficiency_GetIsActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionProficiency.GetLevel
// 0x0018 (0x0018 - 0x0000)
struct InteractionProficiency_GetLevel final
{
public:
	const class UChargeableInteractionDefinition* ChargeableInteraction;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Player;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionProficiency_GetLevel) == 0x000008, "Wrong alignment on InteractionProficiency_GetLevel");
static_assert(sizeof(InteractionProficiency_GetLevel) == 0x000018, "Wrong size on InteractionProficiency_GetLevel");
static_assert(offsetof(InteractionProficiency_GetLevel, ChargeableInteraction) == 0x000000, "Member 'InteractionProficiency_GetLevel::ChargeableInteraction' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetLevel, Player) == 0x000008, "Member 'InteractionProficiency_GetLevel::Player' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetLevel, ReturnValue) == 0x000010, "Member 'InteractionProficiency_GetLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionProficiency.GetType
// 0x0008 (0x0008 - 0x0000)
struct InteractionProficiency_GetType final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionProficiency_GetType) == 0x000004, "Wrong alignment on InteractionProficiency_GetType");
static_assert(sizeof(InteractionProficiency_GetType) == 0x000008, "Wrong size on InteractionProficiency_GetType");
static_assert(offsetof(InteractionProficiency_GetType, Value) == 0x000000, "Member 'InteractionProficiency_GetType::Value' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetType, ReturnValue) == 0x000004, "Member 'InteractionProficiency_GetType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionProficiency.GetValue
// 0x0018 (0x0018 - 0x0000)
struct InteractionProficiency_GetValue final
{
public:
	const class UChargeableInteractionDefinition* ChargeableInteraction;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Player;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionProficiency_GetValue) == 0x000008, "Wrong alignment on InteractionProficiency_GetValue");
static_assert(sizeof(InteractionProficiency_GetValue) == 0x000018, "Wrong size on InteractionProficiency_GetValue");
static_assert(offsetof(InteractionProficiency_GetValue, ChargeableInteraction) == 0x000000, "Member 'InteractionProficiency_GetValue::ChargeableInteraction' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetValue, Player) == 0x000008, "Member 'InteractionProficiency_GetValue::Player' has a wrong offset!");
static_assert(offsetof(InteractionProficiency_GetValue, ReturnValue) == 0x000010, "Member 'InteractionProficiency_GetValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BlindingFXComponent.SetPostProcess
// 0x0008 (0x0008 - 0x0000)
struct BlindingFXComponent_SetPostProcess final
{
public:
	class UPostProcessComponent*                  Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindingFXComponent_SetPostProcess) == 0x000008, "Wrong alignment on BlindingFXComponent_SetPostProcess");
static_assert(sizeof(BlindingFXComponent_SetPostProcess) == 0x000008, "Wrong size on BlindingFXComponent_SetPostProcess");
static_assert(offsetof(BlindingFXComponent_SetPostProcess, Value) == 0x000000, "Member 'BlindingFXComponent_SetPostProcess::Value' has a wrong offset!");

// Function DeadByDaylight.BlindingFXComponent.SetPostProcessMaterial
// 0x0008 (0x0008 - 0x0000)
struct BlindingFXComponent_SetPostProcessMaterial final
{
public:
	class UMaterialInstanceDynamic*               Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindingFXComponent_SetPostProcessMaterial) == 0x000008, "Wrong alignment on BlindingFXComponent_SetPostProcessMaterial");
static_assert(sizeof(BlindingFXComponent_SetPostProcessMaterial) == 0x000008, "Wrong size on BlindingFXComponent_SetPostProcessMaterial");
static_assert(offsetof(BlindingFXComponent_SetPostProcessMaterial, Value) == 0x000000, "Member 'BlindingFXComponent_SetPostProcessMaterial::Value' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.Authority_OnOriginatingPlayerEndPlay
// 0x0010 (0x0010 - 0x0000)
struct StatusEffect_Authority_OnOriginatingPlayerEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatusEffect_Authority_OnOriginatingPlayerEndPlay) == 0x000008, "Wrong alignment on StatusEffect_Authority_OnOriginatingPlayerEndPlay");
static_assert(sizeof(StatusEffect_Authority_OnOriginatingPlayerEndPlay) == 0x000010, "Wrong size on StatusEffect_Authority_OnOriginatingPlayerEndPlay");
static_assert(offsetof(StatusEffect_Authority_OnOriginatingPlayerEndPlay, Actor) == 0x000000, "Member 'StatusEffect_Authority_OnOriginatingPlayerEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(StatusEffect_Authority_OnOriginatingPlayerEndPlay, EndPlayReason) == 0x000008, "Member 'StatusEffect_Authority_OnOriginatingPlayerEndPlay::EndPlayReason' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.Authority_SetRemainingLifetime
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_Authority_SetRemainingLifetime final
{
public:
	float                                         Lifetime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_Authority_SetRemainingLifetime) == 0x000004, "Wrong alignment on StatusEffect_Authority_SetRemainingLifetime");
static_assert(sizeof(StatusEffect_Authority_SetRemainingLifetime) == 0x000004, "Wrong size on StatusEffect_Authority_SetRemainingLifetime");
static_assert(offsetof(StatusEffect_Authority_SetRemainingLifetime, Lifetime) == 0x000000, "Member 'StatusEffect_Authority_SetRemainingLifetime::Lifetime' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.Authority_Start
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_Authority_Start final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_Authority_Start) == 0x000004, "Wrong alignment on StatusEffect_Authority_Start");
static_assert(sizeof(StatusEffect_Authority_Start) == 0x000004, "Wrong size on StatusEffect_Authority_Start");
static_assert(offsetof(StatusEffect_Authority_Start, Duration) == 0x000000, "Member 'StatusEffect_Authority_Start::Duration' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.BroadcastGameEventNotification
// 0x0060 (0x0060 - 0x0000)
struct StatusEffect_BroadcastGameEventNotification final
{
public:
	struct FGameplayNotificationData              NotificationData;                                  // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
	bool                                          AddToHistory;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatusEffect_BroadcastGameEventNotification) == 0x000008, "Wrong alignment on StatusEffect_BroadcastGameEventNotification");
static_assert(sizeof(StatusEffect_BroadcastGameEventNotification) == 0x000060, "Wrong size on StatusEffect_BroadcastGameEventNotification");
static_assert(offsetof(StatusEffect_BroadcastGameEventNotification, NotificationData) == 0x000000, "Member 'StatusEffect_BroadcastGameEventNotification::NotificationData' has a wrong offset!");
static_assert(offsetof(StatusEffect_BroadcastGameEventNotification, AddToHistory) == 0x000058, "Member 'StatusEffect_BroadcastGameEventNotification::AddToHistory' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.InitializeLifetime
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_InitializeLifetime final
{
public:
	float                                         Lifetime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_InitializeLifetime) == 0x000004, "Wrong alignment on StatusEffect_InitializeLifetime");
static_assert(sizeof(StatusEffect_InitializeLifetime) == 0x000004, "Wrong size on StatusEffect_InitializeLifetime");
static_assert(offsetof(StatusEffect_InitializeLifetime, Lifetime) == 0x000000, "Member 'StatusEffect_InitializeLifetime::Lifetime' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.Multicast_SetRemainingLifetime
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_Multicast_SetRemainingLifetime final
{
public:
	float                                         Lifetime;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_Multicast_SetRemainingLifetime) == 0x000004, "Wrong alignment on StatusEffect_Multicast_SetRemainingLifetime");
static_assert(sizeof(StatusEffect_Multicast_SetRemainingLifetime) == 0x000004, "Wrong size on StatusEffect_Multicast_SetRemainingLifetime");
static_assert(offsetof(StatusEffect_Multicast_SetRemainingLifetime, Lifetime) == 0x000000, "Member 'StatusEffect_Multicast_SetRemainingLifetime::Lifetime' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.Multicast_SetRemainingLifetimeInitialized
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_Multicast_SetRemainingLifetimeInitialized final
{
public:
	bool                                          RemainingLifetimeInitialized;                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_Multicast_SetRemainingLifetimeInitialized) == 0x000001, "Wrong alignment on StatusEffect_Multicast_SetRemainingLifetimeInitialized");
static_assert(sizeof(StatusEffect_Multicast_SetRemainingLifetimeInitialized) == 0x000001, "Wrong size on StatusEffect_Multicast_SetRemainingLifetimeInitialized");
static_assert(offsetof(StatusEffect_Multicast_SetRemainingLifetimeInitialized, RemainingLifetimeInitialized) == 0x000000, "Member 'StatusEffect_Multicast_SetRemainingLifetimeInitialized::RemainingLifetimeInitialized' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.OnShouldDisplayChanged
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_OnShouldDisplayChanged final
{
public:
	bool                                          CurrentValue;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_OnShouldDisplayChanged) == 0x000001, "Wrong alignment on StatusEffect_OnShouldDisplayChanged");
static_assert(sizeof(StatusEffect_OnShouldDisplayChanged) == 0x000001, "Wrong size on StatusEffect_OnShouldDisplayChanged");
static_assert(offsetof(StatusEffect_OnShouldDisplayChanged, CurrentValue) == 0x000000, "Member 'StatusEffect_OnShouldDisplayChanged::CurrentValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.SetShouldDisplay
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_SetShouldDisplay final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_SetShouldDisplay) == 0x000001, "Wrong alignment on StatusEffect_SetShouldDisplay");
static_assert(sizeof(StatusEffect_SetShouldDisplay) == 0x000001, "Wrong size on StatusEffect_SetShouldDisplay");
static_assert(offsetof(StatusEffect_SetShouldDisplay, On) == 0x000000, "Member 'StatusEffect_SetShouldDisplay::On' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.SetStatusEffectIconPercentage
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_SetStatusEffectIconPercentage final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_SetStatusEffectIconPercentage) == 0x000004, "Wrong alignment on StatusEffect_SetStatusEffectIconPercentage");
static_assert(sizeof(StatusEffect_SetStatusEffectIconPercentage) == 0x000004, "Wrong size on StatusEffect_SetStatusEffectIconPercentage");
static_assert(offsetof(StatusEffect_SetStatusEffectIconPercentage, Value) == 0x000000, "Member 'StatusEffect_SetStatusEffectIconPercentage::Value' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.FireActiveStatusEffectEvent
// 0x0008 (0x0008 - 0x0000)
struct StatusEffect_FireActiveStatusEffectEvent final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelToDisplay;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_FireActiveStatusEffectEvent) == 0x000004, "Wrong alignment on StatusEffect_FireActiveStatusEffectEvent");
static_assert(sizeof(StatusEffect_FireActiveStatusEffectEvent) == 0x000008, "Wrong size on StatusEffect_FireActiveStatusEffectEvent");
static_assert(offsetof(StatusEffect_FireActiveStatusEffectEvent, Percentage) == 0x000000, "Member 'StatusEffect_FireActiveStatusEffectEvent::Percentage' has a wrong offset!");
static_assert(offsetof(StatusEffect_FireActiveStatusEffectEvent, LevelToDisplay) == 0x000004, "Member 'StatusEffect_FireActiveStatusEffectEvent::LevelToDisplay' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetCustomParam
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_GetCustomParam final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetCustomParam) == 0x000004, "Wrong alignment on StatusEffect_GetCustomParam");
static_assert(sizeof(StatusEffect_GetCustomParam) == 0x000004, "Wrong size on StatusEffect_GetCustomParam");
static_assert(offsetof(StatusEffect_GetCustomParam, ReturnValue) == 0x000000, "Member 'StatusEffect_GetCustomParam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetLifetimeDuration
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_GetLifetimeDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetLifetimeDuration) == 0x000004, "Wrong alignment on StatusEffect_GetLifetimeDuration");
static_assert(sizeof(StatusEffect_GetLifetimeDuration) == 0x000004, "Wrong size on StatusEffect_GetLifetimeDuration");
static_assert(offsetof(StatusEffect_GetLifetimeDuration, ReturnValue) == 0x000000, "Member 'StatusEffect_GetLifetimeDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetOriginatingPlayer
// 0x0008 (0x0008 - 0x0000)
struct StatusEffect_GetOriginatingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetOriginatingPlayer) == 0x000008, "Wrong alignment on StatusEffect_GetOriginatingPlayer");
static_assert(sizeof(StatusEffect_GetOriginatingPlayer) == 0x000008, "Wrong size on StatusEffect_GetOriginatingPlayer");
static_assert(offsetof(StatusEffect_GetOriginatingPlayer, ReturnValue) == 0x000000, "Member 'StatusEffect_GetOriginatingPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetShouldDisplay
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_GetShouldDisplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetShouldDisplay) == 0x000001, "Wrong alignment on StatusEffect_GetShouldDisplay");
static_assert(sizeof(StatusEffect_GetShouldDisplay) == 0x000001, "Wrong size on StatusEffect_GetShouldDisplay");
static_assert(offsetof(StatusEffect_GetShouldDisplay, ReturnValue) == 0x000000, "Member 'StatusEffect_GetShouldDisplay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetStatusEffectCooldownRate
// 0x0004 (0x0004 - 0x0000)
struct StatusEffect_GetStatusEffectCooldownRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetStatusEffectCooldownRate) == 0x000004, "Wrong alignment on StatusEffect_GetStatusEffectCooldownRate");
static_assert(sizeof(StatusEffect_GetStatusEffectCooldownRate) == 0x000004, "Wrong size on StatusEffect_GetStatusEffectCooldownRate");
static_assert(offsetof(StatusEffect_GetStatusEffectCooldownRate, ReturnValue) == 0x000000, "Member 'StatusEffect_GetStatusEffectCooldownRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.GetStatusEffectType
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_GetStatusEffectType final
{
public:
	EStatusEffectType                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_GetStatusEffectType) == 0x000001, "Wrong alignment on StatusEffect_GetStatusEffectType");
static_assert(sizeof(StatusEffect_GetStatusEffectType) == 0x000001, "Wrong size on StatusEffect_GetStatusEffectType");
static_assert(offsetof(StatusEffect_GetStatusEffectType, ReturnValue) == 0x000000, "Member 'StatusEffect_GetStatusEffectType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.IsInOriginatorRange
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_IsInOriginatorRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_IsInOriginatorRange) == 0x000001, "Wrong alignment on StatusEffect_IsInOriginatorRange");
static_assert(sizeof(StatusEffect_IsInOriginatorRange) == 0x000001, "Wrong size on StatusEffect_IsInOriginatorRange");
static_assert(offsetof(StatusEffect_IsInOriginatorRange, ReturnValue) == 0x000000, "Member 'StatusEffect_IsInOriginatorRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.IsKillerInOriginatorRange
// 0x0008 (0x0008 - 0x0000)
struct StatusEffect_IsKillerInOriginatorRange final
{
public:
	float                                         AdditiveRangeModifier;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatusEffect_IsKillerInOriginatorRange) == 0x000004, "Wrong alignment on StatusEffect_IsKillerInOriginatorRange");
static_assert(sizeof(StatusEffect_IsKillerInOriginatorRange) == 0x000008, "Wrong size on StatusEffect_IsKillerInOriginatorRange");
static_assert(offsetof(StatusEffect_IsKillerInOriginatorRange, AdditiveRangeModifier) == 0x000000, "Member 'StatusEffect_IsKillerInOriginatorRange::AdditiveRangeModifier' has a wrong offset!");
static_assert(offsetof(StatusEffect_IsKillerInOriginatorRange, ReturnValue) == 0x000004, "Member 'StatusEffect_IsKillerInOriginatorRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.IsOriginatorAlive
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_IsOriginatorAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_IsOriginatorAlive) == 0x000001, "Wrong alignment on StatusEffect_IsOriginatorAlive");
static_assert(sizeof(StatusEffect_IsOriginatorAlive) == 0x000001, "Wrong size on StatusEffect_IsOriginatorAlive");
static_assert(offsetof(StatusEffect_IsOriginatorAlive, ReturnValue) == 0x000000, "Member 'StatusEffect_IsOriginatorAlive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.IsOriginatorHooked
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_IsOriginatorHooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_IsOriginatorHooked) == 0x000001, "Wrong alignment on StatusEffect_IsOriginatorHooked");
static_assert(sizeof(StatusEffect_IsOriginatorHooked) == 0x000001, "Wrong size on StatusEffect_IsOriginatorHooked");
static_assert(offsetof(StatusEffect_IsOriginatorHooked, ReturnValue) == 0x000000, "Member 'StatusEffect_IsOriginatorHooked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.ShouldDisplayStatusEffectIcon
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_ShouldDisplayStatusEffectIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_ShouldDisplayStatusEffectIcon) == 0x000001, "Wrong alignment on StatusEffect_ShouldDisplayStatusEffectIcon");
static_assert(sizeof(StatusEffect_ShouldDisplayStatusEffectIcon) == 0x000001, "Wrong size on StatusEffect_ShouldDisplayStatusEffectIcon");
static_assert(offsetof(StatusEffect_ShouldDisplayStatusEffectIcon, ReturnValue) == 0x000000, "Member 'StatusEffect_ShouldDisplayStatusEffectIcon::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StatusEffect.ShouldHideStatusEffectIcon
// 0x0001 (0x0001 - 0x0000)
struct StatusEffect_ShouldHideStatusEffectIcon final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffect_ShouldHideStatusEffectIcon) == 0x000001, "Wrong alignment on StatusEffect_ShouldHideStatusEffectIcon");
static_assert(sizeof(StatusEffect_ShouldHideStatusEffectIcon) == 0x000001, "Wrong size on StatusEffect_ShouldHideStatusEffectIcon");
static_assert(offsetof(StatusEffect_ShouldHideStatusEffectIcon, ReturnValue) == 0x000000, "Member 'StatusEffect_ShouldHideStatusEffectIcon::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SeanceRitualOutlineUpdateStrategy.GetRevealColorToSurvivor
// 0x0010 (0x0010 - 0x0000)
struct SeanceRitualOutlineUpdateStrategy_GetRevealColorToSurvivor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeanceRitualOutlineUpdateStrategy_GetRevealColorToSurvivor) == 0x000004, "Wrong alignment on SeanceRitualOutlineUpdateStrategy_GetRevealColorToSurvivor");
static_assert(sizeof(SeanceRitualOutlineUpdateStrategy_GetRevealColorToSurvivor) == 0x000010, "Wrong size on SeanceRitualOutlineUpdateStrategy_GetRevealColorToSurvivor");
static_assert(offsetof(SeanceRitualOutlineUpdateStrategy_GetRevealColorToSurvivor, ReturnValue) == 0x000000, "Member 'SeanceRitualOutlineUpdateStrategy_GetRevealColorToSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBaseMatchGameMode.GetEndGameComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDBaseMatchGameMode_GetEndGameComponent final
{
public:
	class UEndGameComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBaseMatchGameMode_GetEndGameComponent) == 0x000008, "Wrong alignment on DBDBaseMatchGameMode_GetEndGameComponent");
static_assert(sizeof(DBDBaseMatchGameMode_GetEndGameComponent) == 0x000008, "Wrong size on DBDBaseMatchGameMode_GetEndGameComponent");
static_assert(offsetof(DBDBaseMatchGameMode_GetEndGameComponent, ReturnValue) == 0x000000, "Member 'DBDBaseMatchGameMode_GetEndGameComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.LevelLoaded
// 0x0010 (0x0010 - 0x0000)
struct DBDGameMode_LevelLoaded final
{
public:
	class FString                                 LevelName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_LevelLoaded) == 0x000008, "Wrong alignment on DBDGameMode_LevelLoaded");
static_assert(sizeof(DBDGameMode_LevelLoaded) == 0x000010, "Wrong size on DBDGameMode_LevelLoaded");
static_assert(offsetof(DBDGameMode_LevelLoaded, LevelName) == 0x000000, "Member 'DBDGameMode_LevelLoaded::LevelName' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.SetPlayerCount
// 0x0004 (0x0004 - 0x0000)
struct DBDGameMode_SetPlayerCount final
{
public:
	int32                                         PlayerAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_SetPlayerCount) == 0x000004, "Wrong alignment on DBDGameMode_SetPlayerCount");
static_assert(sizeof(DBDGameMode_SetPlayerCount) == 0x000004, "Wrong size on DBDGameMode_SetPlayerCount");
static_assert(offsetof(DBDGameMode_SetPlayerCount, PlayerAmount) == 0x000000, "Member 'DBDGameMode_SetPlayerCount::PlayerAmount' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.AreLoadoutsCreated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameMode_AreLoadoutsCreated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_AreLoadoutsCreated) == 0x000001, "Wrong alignment on DBDGameMode_AreLoadoutsCreated");
static_assert(sizeof(DBDGameMode_AreLoadoutsCreated) == 0x000001, "Wrong size on DBDGameMode_AreLoadoutsCreated");
static_assert(offsetof(DBDGameMode_AreLoadoutsCreated, ReturnValue) == 0x000000, "Member 'DBDGameMode_AreLoadoutsCreated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameMode.IsEscapeOpen
// 0x0001 (0x0001 - 0x0000)
struct DBDGameMode_IsEscapeOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameMode_IsEscapeOpen) == 0x000001, "Wrong alignment on DBDGameMode_IsEscapeOpen");
static_assert(sizeof(DBDGameMode_IsEscapeOpen) == 0x000001, "Wrong size on DBDGameMode_IsEscapeOpen");
static_assert(offsetof(DBDGameMode_IsEscapeOpen, ReturnValue) == 0x000000, "Member 'DBDGameMode_IsEscapeOpen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.AddDisablingTags
// 0x000C (0x000C - 0x0000)
struct InteractionDefinition_AddDisablingTags final
{
public:
	struct FGameplayTag                           TagToAdd;                                          // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_AddDisablingTags) == 0x000004, "Wrong alignment on InteractionDefinition_AddDisablingTags");
static_assert(sizeof(InteractionDefinition_AddDisablingTags) == 0x00000C, "Wrong size on InteractionDefinition_AddDisablingTags");
static_assert(offsetof(InteractionDefinition_AddDisablingTags, TagToAdd) == 0x000000, "Member 'InteractionDefinition_AddDisablingTags::TagToAdd' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.AddMutuallyExclusiveInteraction
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_AddMutuallyExclusiveInteraction final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_AddMutuallyExclusiveInteraction) == 0x000008, "Wrong alignment on InteractionDefinition_AddMutuallyExclusiveInteraction");
static_assert(sizeof(InteractionDefinition_AddMutuallyExclusiveInteraction) == 0x000008, "Wrong size on InteractionDefinition_AddMutuallyExclusiveInteraction");
static_assert(offsetof(InteractionDefinition_AddMutuallyExclusiveInteraction, Interaction) == 0x000000, "Member 'InteractionDefinition_AddMutuallyExclusiveInteraction::Interaction' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.AttachToInteractor
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_AttachToInteractor final
{
public:
	class UInteractor*                            Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_AttachToInteractor) == 0x000008, "Wrong alignment on InteractionDefinition_AttachToInteractor");
static_assert(sizeof(InteractionDefinition_AttachToInteractor) == 0x000008, "Wrong size on InteractionDefinition_AttachToInteractor");
static_assert(offsetof(InteractionDefinition_AttachToInteractor, Interactor) == 0x000000, "Member 'InteractionDefinition_AttachToInteractor::Interactor' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.AttachToZone
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_AttachToZone final
{
public:
	class UPrimitiveComponent*                    Zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_AttachToZone) == 0x000008, "Wrong alignment on InteractionDefinition_AttachToZone");
static_assert(sizeof(InteractionDefinition_AttachToZone) == 0x000008, "Wrong size on InteractionDefinition_AttachToZone");
static_assert(offsetof(InteractionDefinition_AttachToZone, Zone) == 0x000000, "Member 'InteractionDefinition_AttachToZone::Zone' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.Authority_CompleteCharge
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_Authority_CompleteCharge final
{
public:
	class ADBDPlayer*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_Authority_CompleteCharge) == 0x000008, "Wrong alignment on InteractionDefinition_Authority_CompleteCharge");
static_assert(sizeof(InteractionDefinition_Authority_CompleteCharge) == 0x000008, "Wrong size on InteractionDefinition_Authority_CompleteCharge");
static_assert(offsetof(InteractionDefinition_Authority_CompleteCharge, Character) == 0x000000, "Member 'InteractionDefinition_Authority_CompleteCharge::Character' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.Authority_OnInteractionAuthorized
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_Authority_OnInteractionAuthorized final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_Authority_OnInteractionAuthorized) == 0x000008, "Wrong alignment on InteractionDefinition_Authority_OnInteractionAuthorized");
static_assert(sizeof(InteractionDefinition_Authority_OnInteractionAuthorized) == 0x000008, "Wrong size on InteractionDefinition_Authority_OnInteractionAuthorized");
static_assert(offsetof(InteractionDefinition_Authority_OnInteractionAuthorized, Player) == 0x000000, "Member 'InteractionDefinition_Authority_OnInteractionAuthorized::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetPlayerDependency
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetPlayerDependency final
{
public:
	const class ADBDPlayer*                       InteractingPlayer;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetPlayerDependency) == 0x000008, "Wrong alignment on InteractionDefinition_GetPlayerDependency");
static_assert(sizeof(InteractionDefinition_GetPlayerDependency) == 0x000010, "Wrong size on InteractionDefinition_GetPlayerDependency");
static_assert(offsetof(InteractionDefinition_GetPlayerDependency, InteractingPlayer) == 0x000000, "Member 'InteractionDefinition_GetPlayerDependency::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetPlayerDependency, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetPlayerDependency::ReturnValue' has a wrong offset!");

// DelegateFunction DeadByDaylight.InteractionDefinition.InteractionEnteredDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_InteractionEnteredDelegate__DelegateSignature final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_InteractionEnteredDelegate__DelegateSignature) == 0x000008, "Wrong alignment on InteractionDefinition_InteractionEnteredDelegate__DelegateSignature");
static_assert(sizeof(InteractionDefinition_InteractionEnteredDelegate__DelegateSignature) == 0x000008, "Wrong size on InteractionDefinition_InteractionEnteredDelegate__DelegateSignature");
static_assert(offsetof(InteractionDefinition_InteractionEnteredDelegate__DelegateSignature, Player) == 0x000000, "Member 'InteractionDefinition_InteractionEnteredDelegate__DelegateSignature::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionAnimNotifyEvent
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInteractionAnimNotifyEvent final
{
public:
	class FName                                   NotifyId;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionAnimNotifyEvent) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionAnimNotifyEvent");
static_assert(sizeof(InteractionDefinition_OnInteractionAnimNotifyEvent) == 0x000018, "Wrong size on InteractionDefinition_OnInteractionAnimNotifyEvent");
static_assert(offsetof(InteractionDefinition_OnInteractionAnimNotifyEvent, NotifyId) == 0x000000, "Member 'InteractionDefinition_OnInteractionAnimNotifyEvent::NotifyId' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionAnimNotifyEvent, Player) == 0x000010, "Member 'InteractionDefinition_OnInteractionAnimNotifyEvent::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionCancelled
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionCancelled final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionCancelled) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionCancelled");
static_assert(sizeof(InteractionDefinition_OnInteractionCancelled) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionCancelled");
static_assert(offsetof(InteractionDefinition_OnInteractionCancelled, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionCancelled::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionEnterEnd
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionEnterEnd final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionEnterEnd) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionEnterEnd");
static_assert(sizeof(InteractionDefinition_OnInteractionEnterEnd) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionEnterEnd");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterEnd, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionEnterEnd::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionEnterStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionEnterStart final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActualSnapTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionEnterStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionEnterStart");
static_assert(sizeof(InteractionDefinition_OnInteractionEnterStart) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionEnterStart");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterStart, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionEnterStart::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterStart, ActualSnapTime) == 0x000008, "Member 'InteractionDefinition_OnInteractionEnterStart::ActualSnapTime' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionEnterTick
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionEnterTick final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionEnterTick) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionEnterTick");
static_assert(sizeof(InteractionDefinition_OnInteractionEnterTick) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionEnterTick");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterTick, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionEnterTick::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionEnterTick, DeltaTime) == 0x000008, "Member 'InteractionDefinition_OnInteractionEnterTick::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionExitEnd
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionExitEnd final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionExitEnd) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionExitEnd");
static_assert(sizeof(InteractionDefinition_OnInteractionExitEnd) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionExitEnd");
static_assert(offsetof(InteractionDefinition_OnInteractionExitEnd, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionExitEnd::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionExitStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionExitStart final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionExitStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionExitStart");
static_assert(sizeof(InteractionDefinition_OnInteractionExitStart) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionExitStart");
static_assert(offsetof(InteractionDefinition_OnInteractionExitStart, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionExitStart::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionExitTick
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionExitTick final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionExitTick) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionExitTick");
static_assert(sizeof(InteractionDefinition_OnInteractionExitTick) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionExitTick");
static_assert(offsetof(InteractionDefinition_OnInteractionExitTick, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionExitTick::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionExitTick, DeltaTime) == 0x000008, "Member 'InteractionDefinition_OnInteractionExitTick::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionFinished
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionFinished final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasInteractionStarted;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionFinished) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionFinished");
static_assert(sizeof(InteractionDefinition_OnInteractionFinished) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionFinished");
static_assert(offsetof(InteractionDefinition_OnInteractionFinished, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionFinished::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionFinished, HasInteractionStarted) == 0x000008, "Member 'InteractionDefinition_OnInteractionFinished::HasInteractionStarted' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionInit
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionInit final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionInit) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionInit");
static_assert(sizeof(InteractionDefinition_OnInteractionInit) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionInit");
static_assert(offsetof(InteractionDefinition_OnInteractionInit, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionInit::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionInterruptEnd
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInteractionInterruptEnd final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                CurrentInterruption;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             InterruptingPlayer;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionInterruptEnd) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionInterruptEnd");
static_assert(sizeof(InteractionDefinition_OnInteractionInterruptEnd) == 0x000018, "Wrong size on InteractionDefinition_OnInteractionInterruptEnd");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptEnd, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionInterruptEnd::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptEnd, CurrentInterruption) == 0x000008, "Member 'InteractionDefinition_OnInteractionInterruptEnd::CurrentInterruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptEnd, InterruptingPlayer) == 0x000010, "Member 'InteractionDefinition_OnInteractionInterruptEnd::InterruptingPlayer' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionInterruptStart
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInteractionInterruptStart final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                CurrentInterruption;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             InterruptingPlayer;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionInterruptStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionInterruptStart");
static_assert(sizeof(InteractionDefinition_OnInteractionInterruptStart) == 0x000018, "Wrong size on InteractionDefinition_OnInteractionInterruptStart");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStart, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionInterruptStart::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStart, CurrentInterruption) == 0x000008, "Member 'InteractionDefinition_OnInteractionInterruptStart::CurrentInterruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStart, InterruptingPlayer) == 0x000010, "Member 'InteractionDefinition_OnInteractionInterruptStart::InterruptingPlayer' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionInterruptStarted
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInteractionInterruptStarted final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                CurrentInterruption;                               // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             InterruptingPlayer;                                // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionInterruptStarted) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionInterruptStarted");
static_assert(sizeof(InteractionDefinition_OnInteractionInterruptStarted) == 0x000018, "Wrong size on InteractionDefinition_OnInteractionInterruptStarted");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStarted, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionInterruptStarted::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStarted, CurrentInterruption) == 0x000008, "Member 'InteractionDefinition_OnInteractionInterruptStarted::CurrentInterruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionInterruptStarted, InterruptingPlayer) == 0x000010, "Member 'InteractionDefinition_OnInteractionInterruptStarted::InterruptingPlayer' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionUpdateEnd
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionUpdateEnd final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionUpdateEnd) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionUpdateEnd");
static_assert(sizeof(InteractionDefinition_OnInteractionUpdateEnd) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionUpdateEnd");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateEnd, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionUpdateEnd::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionUpdateMontageReachedMiddle
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionUpdateMontageReachedMiddle final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionUpdateMontageReachedMiddle) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionUpdateMontageReachedMiddle");
static_assert(sizeof(InteractionDefinition_OnInteractionUpdateMontageReachedMiddle) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionUpdateMontageReachedMiddle");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateMontageReachedMiddle, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionUpdateMontageReachedMiddle::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionUpdateStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnInteractionUpdateStart final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInteractionUpdateStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionUpdateStart");
static_assert(sizeof(InteractionDefinition_OnInteractionUpdateStart) == 0x000008, "Wrong size on InteractionDefinition_OnInteractionUpdateStart");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateStart, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionUpdateStart::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInteractionUpdateTick
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_OnInteractionUpdateTick final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_OnInteractionUpdateTick) == 0x000008, "Wrong alignment on InteractionDefinition_OnInteractionUpdateTick");
static_assert(sizeof(InteractionDefinition_OnInteractionUpdateTick) == 0x000010, "Wrong size on InteractionDefinition_OnInteractionUpdateTick");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateTick, Player) == 0x000000, "Member 'InteractionDefinition_OnInteractionUpdateTick::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInteractionUpdateTick, DeltaTime) == 0x000008, "Member 'InteractionDefinition_OnInteractionUpdateTick::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnInterruptorUpdateStart
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_OnInterruptorUpdateStart final
{
public:
	class UInterruptionDefinition*                CurrentInterruption;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Interruptor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Interruptee;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnInterruptorUpdateStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnInterruptorUpdateStart");
static_assert(sizeof(InteractionDefinition_OnInterruptorUpdateStart) == 0x000018, "Wrong size on InteractionDefinition_OnInterruptorUpdateStart");
static_assert(offsetof(InteractionDefinition_OnInterruptorUpdateStart, CurrentInterruption) == 0x000000, "Member 'InteractionDefinition_OnInterruptorUpdateStart::CurrentInterruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInterruptorUpdateStart, Interruptor) == 0x000008, "Member 'InteractionDefinition_OnInterruptorUpdateStart::Interruptor' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_OnInterruptorUpdateStart, Interruptee) == 0x000010, "Member 'InteractionDefinition_OnInterruptorUpdateStart::Interruptee' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.OnUpdateMontageStart
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_OnUpdateMontageStart final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_OnUpdateMontageStart) == 0x000008, "Wrong alignment on InteractionDefinition_OnUpdateMontageStart");
static_assert(sizeof(InteractionDefinition_OnUpdateMontageStart) == 0x000008, "Wrong size on InteractionDefinition_OnUpdateMontageStart");
static_assert(offsetof(InteractionDefinition_OnUpdateMontageStart, Player) == 0x000000, "Member 'InteractionDefinition_OnUpdateMontageStart::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.RemoveDisablingTags
// 0x000C (0x000C - 0x0000)
struct InteractionDefinition_RemoveDisablingTags final
{
public:
	struct FGameplayTag                           TagToRemove;                                       // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_RemoveDisablingTags) == 0x000004, "Wrong alignment on InteractionDefinition_RemoveDisablingTags");
static_assert(sizeof(InteractionDefinition_RemoveDisablingTags) == 0x00000C, "Wrong size on InteractionDefinition_RemoveDisablingTags");
static_assert(offsetof(InteractionDefinition_RemoveDisablingTags, TagToRemove) == 0x000000, "Member 'InteractionDefinition_RemoveDisablingTags::TagToRemove' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.RemoveExclusiveInteraction
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_RemoveExclusiveInteraction final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_RemoveExclusiveInteraction) == 0x000008, "Wrong alignment on InteractionDefinition_RemoveExclusiveInteraction");
static_assert(sizeof(InteractionDefinition_RemoveExclusiveInteraction) == 0x000008, "Wrong size on InteractionDefinition_RemoveExclusiveInteraction");
static_assert(offsetof(InteractionDefinition_RemoveExclusiveInteraction, Interaction) == 0x000000, "Member 'InteractionDefinition_RemoveExclusiveInteraction::Interaction' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.ResetSlashableLocation
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_ResetSlashableLocation final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_ResetSlashableLocation) == 0x000008, "Wrong alignment on InteractionDefinition_ResetSlashableLocation");
static_assert(sizeof(InteractionDefinition_ResetSlashableLocation) == 0x000008, "Wrong size on InteractionDefinition_ResetSlashableLocation");
static_assert(offsetof(InteractionDefinition_ResetSlashableLocation, Player) == 0x000000, "Member 'InteractionDefinition_ResetSlashableLocation::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.SetSecondaryActionInputType
// 0x0001 (0x0001 - 0x0000)
struct InteractionDefinition_SetSecondaryActionInputType final
{
public:
	EInputInteractionType                         InputType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_SetSecondaryActionInputType) == 0x000001, "Wrong alignment on InteractionDefinition_SetSecondaryActionInputType");
static_assert(sizeof(InteractionDefinition_SetSecondaryActionInputType) == 0x000001, "Wrong size on InteractionDefinition_SetSecondaryActionInputType");
static_assert(offsetof(InteractionDefinition_SetSecondaryActionInputType, InputType) == 0x000000, "Member 'InteractionDefinition_SetSecondaryActionInputType::InputType' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.UpdateSlashableLocation
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_UpdateSlashableLocation final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_UpdateSlashableLocation) == 0x000008, "Wrong alignment on InteractionDefinition_UpdateSlashableLocation");
static_assert(sizeof(InteractionDefinition_UpdateSlashableLocation) == 0x000008, "Wrong size on InteractionDefinition_UpdateSlashableLocation");
static_assert(offsetof(InteractionDefinition_UpdateSlashableLocation, Player) == 0x000000, "Member 'InteractionDefinition_UpdateSlashableLocation::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.CalculateSnapTimeForConstantMaxNormalMovementSpeed
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpeedBoost;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed) == 0x000008, "Wrong alignment on InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed");
static_assert(sizeof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed) == 0x000010, "Wrong size on InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed, Player) == 0x000000, "Member 'InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed, SpeedBoost) == 0x000008, "Member 'InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed::SpeedBoost' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed, ReturnValue) == 0x00000C, "Member 'InteractionDefinition_CalculateSnapTimeForConstantMaxNormalMovementSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.CalculateSnapTimeForConstantSpeed
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_CalculateSnapTimeForConstantSpeed final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_CalculateSnapTimeForConstantSpeed) == 0x000008, "Wrong alignment on InteractionDefinition_CalculateSnapTimeForConstantSpeed");
static_assert(sizeof(InteractionDefinition_CalculateSnapTimeForConstantSpeed) == 0x000010, "Wrong size on InteractionDefinition_CalculateSnapTimeForConstantSpeed");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantSpeed, Player) == 0x000000, "Member 'InteractionDefinition_CalculateSnapTimeForConstantSpeed::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantSpeed, Speed) == 0x000008, "Member 'InteractionDefinition_CalculateSnapTimeForConstantSpeed::Speed' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CalculateSnapTimeForConstantSpeed, ReturnValue) == 0x00000C, "Member 'InteractionDefinition_CalculateSnapTimeForConstantSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.CanOverrideInteraction
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_CanOverrideInteraction final
{
public:
	const class UInteractionDefinition*           Interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_CanOverrideInteraction) == 0x000008, "Wrong alignment on InteractionDefinition_CanOverrideInteraction");
static_assert(sizeof(InteractionDefinition_CanOverrideInteraction) == 0x000010, "Wrong size on InteractionDefinition_CanOverrideInteraction");
static_assert(offsetof(InteractionDefinition_CanOverrideInteraction, Interaction) == 0x000000, "Member 'InteractionDefinition_CanOverrideInteraction::Interaction' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_CanOverrideInteraction, ReturnValue) == 0x000008, "Member 'InteractionDefinition_CanOverrideInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.ComparePriorityToInteraction
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_ComparePriorityToInteraction final
{
public:
	const class UInteractionDefinition*           Interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionComparisonPriority                ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_ComparePriorityToInteraction) == 0x000008, "Wrong alignment on InteractionDefinition_ComparePriorityToInteraction");
static_assert(sizeof(InteractionDefinition_ComparePriorityToInteraction) == 0x000010, "Wrong size on InteractionDefinition_ComparePriorityToInteraction");
static_assert(offsetof(InteractionDefinition_ComparePriorityToInteraction, Interaction) == 0x000000, "Member 'InteractionDefinition_ComparePriorityToInteraction::Interaction' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_ComparePriorityToInteraction, ReturnValue) == 0x000008, "Member 'InteractionDefinition_ComparePriorityToInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.DoesPlayerHaveClearPath
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_DoesPlayerHaveClearPath final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_DoesPlayerHaveClearPath) == 0x000008, "Wrong alignment on InteractionDefinition_DoesPlayerHaveClearPath");
static_assert(sizeof(InteractionDefinition_DoesPlayerHaveClearPath) == 0x000010, "Wrong size on InteractionDefinition_DoesPlayerHaveClearPath");
static_assert(offsetof(InteractionDefinition_DoesPlayerHaveClearPath, Player) == 0x000000, "Member 'InteractionDefinition_DoesPlayerHaveClearPath::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_DoesPlayerHaveClearPath, ReturnValue) == 0x000008, "Member 'InteractionDefinition_DoesPlayerHaveClearPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActionSpeedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetActionSpeedMultiplier final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetActionSpeedMultiplier) == 0x000008, "Wrong alignment on InteractionDefinition_GetActionSpeedMultiplier");
static_assert(sizeof(InteractionDefinition_GetActionSpeedMultiplier) == 0x000010, "Wrong size on InteractionDefinition_GetActionSpeedMultiplier");
static_assert(offsetof(InteractionDefinition_GetActionSpeedMultiplier, Character) == 0x000000, "Member 'InteractionDefinition_GetActionSpeedMultiplier::Character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetActionSpeedMultiplier, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetActionSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActorHeightDelta
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetActorHeightDelta final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetActorHeightDelta) == 0x000008, "Wrong alignment on InteractionDefinition_GetActorHeightDelta");
static_assert(sizeof(InteractionDefinition_GetActorHeightDelta) == 0x000010, "Wrong size on InteractionDefinition_GetActorHeightDelta");
static_assert(offsetof(InteractionDefinition_GetActorHeightDelta, Player) == 0x000000, "Member 'InteractionDefinition_GetActorHeightDelta::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetActorHeightDelta, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetActorHeightDelta::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActorsToIgnoreOverlap
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetActorsToIgnoreOverlap final
{
public:
	TArray<class AActor*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetActorsToIgnoreOverlap) == 0x000008, "Wrong alignment on InteractionDefinition_GetActorsToIgnoreOverlap");
static_assert(sizeof(InteractionDefinition_GetActorsToIgnoreOverlap) == 0x000010, "Wrong size on InteractionDefinition_GetActorsToIgnoreOverlap");
static_assert(offsetof(InteractionDefinition_GetActorsToIgnoreOverlap, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetActorsToIgnoreOverlap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActualSnapPointPosition
// 0x0020 (0x0020 - 0x0000)
struct InteractionDefinition_GetActualSnapPointPosition final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetActualSnapPointPosition) == 0x000008, "Wrong alignment on InteractionDefinition_GetActualSnapPointPosition");
static_assert(sizeof(InteractionDefinition_GetActualSnapPointPosition) == 0x000020, "Wrong size on InteractionDefinition_GetActualSnapPointPosition");
static_assert(offsetof(InteractionDefinition_GetActualSnapPointPosition, Player) == 0x000000, "Member 'InteractionDefinition_GetActualSnapPointPosition::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetActualSnapPointPosition, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetActualSnapPointPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetActualSnapPointPositionAtStart
// 0x0020 (0x0020 - 0x0000)
struct InteractionDefinition_GetActualSnapPointPositionAtStart final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetActualSnapPointPositionAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetActualSnapPointPositionAtStart");
static_assert(sizeof(InteractionDefinition_GetActualSnapPointPositionAtStart) == 0x000020, "Wrong size on InteractionDefinition_GetActualSnapPointPositionAtStart");
static_assert(offsetof(InteractionDefinition_GetActualSnapPointPositionAtStart, Player) == 0x000000, "Member 'InteractionDefinition_GetActualSnapPointPositionAtStart::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetActualSnapPointPositionAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetActualSnapPointPositionAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetAllowNavigation
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetAllowNavigation final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetAllowNavigation) == 0x000008, "Wrong alignment on InteractionDefinition_GetAllowNavigation");
static_assert(sizeof(InteractionDefinition_GetAllowNavigation) == 0x000010, "Wrong size on InteractionDefinition_GetAllowNavigation");
static_assert(offsetof(InteractionDefinition_GetAllowNavigation, Player) == 0x000000, "Member 'InteractionDefinition_GetAllowNavigation::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetAllowNavigation, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetAllowNavigation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetChargePercent
// 0x0004 (0x0004 - 0x0000)
struct InteractionDefinition_GetChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetChargePercent) == 0x000004, "Wrong alignment on InteractionDefinition_GetChargePercent");
static_assert(sizeof(InteractionDefinition_GetChargePercent) == 0x000004, "Wrong size on InteractionDefinition_GetChargePercent");
static_assert(offsetof(InteractionDefinition_GetChargePercent, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetChargePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetEnterAnimationPlayBackDefinition
// 0x0038 (0x0038 - 0x0000)
struct InteractionDefinition_GetEnterAnimationPlayBackDefinition final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Follower;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetEnterAnimationPlayBackDefinition) == 0x000008, "Wrong alignment on InteractionDefinition_GetEnterAnimationPlayBackDefinition");
static_assert(sizeof(InteractionDefinition_GetEnterAnimationPlayBackDefinition) == 0x000038, "Wrong size on InteractionDefinition_GetEnterAnimationPlayBackDefinition");
static_assert(offsetof(InteractionDefinition_GetEnterAnimationPlayBackDefinition, Player) == 0x000000, "Member 'InteractionDefinition_GetEnterAnimationPlayBackDefinition::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetEnterAnimationPlayBackDefinition, Follower) == 0x000008, "Member 'InteractionDefinition_GetEnterAnimationPlayBackDefinition::Follower' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetEnterAnimationPlayBackDefinition, ReturnValue) == 0x000010, "Member 'InteractionDefinition_GetEnterAnimationPlayBackDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetEnterMontage
// 0x0028 (0x0028 - 0x0000)
struct InteractionDefinition_GetEnterMontage final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetEnterMontage) == 0x000008, "Wrong alignment on InteractionDefinition_GetEnterMontage");
static_assert(sizeof(InteractionDefinition_GetEnterMontage) == 0x000028, "Wrong size on InteractionDefinition_GetEnterMontage");
static_assert(offsetof(InteractionDefinition_GetEnterMontage, Player) == 0x000000, "Member 'InteractionDefinition_GetEnterMontage::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetEnterMontage, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetEnterMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetExitAnimationPlayBackDefinition
// 0x0038 (0x0038 - 0x0000)
struct InteractionDefinition_GetExitAnimationPlayBackDefinition final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Follower;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetExitAnimationPlayBackDefinition) == 0x000008, "Wrong alignment on InteractionDefinition_GetExitAnimationPlayBackDefinition");
static_assert(sizeof(InteractionDefinition_GetExitAnimationPlayBackDefinition) == 0x000038, "Wrong size on InteractionDefinition_GetExitAnimationPlayBackDefinition");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayBackDefinition, Player) == 0x000000, "Member 'InteractionDefinition_GetExitAnimationPlayBackDefinition::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayBackDefinition, Follower) == 0x000008, "Member 'InteractionDefinition_GetExitAnimationPlayBackDefinition::Follower' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayBackDefinition, ReturnValue) == 0x000010, "Member 'InteractionDefinition_GetExitAnimationPlayBackDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetExitAnimationPlayRate
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetExitAnimationPlayRate final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetExitAnimationPlayRate) == 0x000008, "Wrong alignment on InteractionDefinition_GetExitAnimationPlayRate");
static_assert(sizeof(InteractionDefinition_GetExitAnimationPlayRate) == 0x000010, "Wrong size on InteractionDefinition_GetExitAnimationPlayRate");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayRate, Player) == 0x000000, "Member 'InteractionDefinition_GetExitAnimationPlayRate::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetExitAnimationPlayRate, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetExitAnimationPlayRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetExitMontage
// 0x0028 (0x0028 - 0x0000)
struct InteractionDefinition_GetExitMontage final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetExitMontage) == 0x000008, "Wrong alignment on InteractionDefinition_GetExitMontage");
static_assert(sizeof(InteractionDefinition_GetExitMontage) == 0x000028, "Wrong size on InteractionDefinition_GetExitMontage");
static_assert(offsetof(InteractionDefinition_GetExitMontage, Player) == 0x000000, "Member 'InteractionDefinition_GetExitMontage::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetExitMontage, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetExitMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetFocalPointPosition
// 0x0020 (0x0020 - 0x0000)
struct InteractionDefinition_GetFocalPointPosition final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetFocalPointPosition) == 0x000008, "Wrong alignment on InteractionDefinition_GetFocalPointPosition");
static_assert(sizeof(InteractionDefinition_GetFocalPointPosition) == 0x000020, "Wrong size on InteractionDefinition_GetFocalPointPosition");
static_assert(offsetof(InteractionDefinition_GetFocalPointPosition, Player) == 0x000000, "Member 'InteractionDefinition_GetFocalPointPosition::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetFocalPointPosition, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetFocalPointPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractable
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_GetInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInteractable) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractable");
static_assert(sizeof(InteractionDefinition_GetInteractable) == 0x000008, "Wrong size on InteractionDefinition_GetInteractable");
static_assert(offsetof(InteractionDefinition_GetInteractable, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionDescriptionText
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetInteractionDescriptionText final
{
public:
	class FText                                   ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInteractionDescriptionText) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionDescriptionText");
static_assert(sizeof(InteractionDefinition_GetInteractionDescriptionText) == 0x000018, "Wrong size on InteractionDefinition_GetInteractionDescriptionText");
static_assert(offsetof(InteractionDefinition_GetInteractionDescriptionText, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetInteractionDescriptionText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionExitTime
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetInteractionExitTime final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetInteractionExitTime) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionExitTime");
static_assert(sizeof(InteractionDefinition_GetInteractionExitTime) == 0x000010, "Wrong size on InteractionDefinition_GetInteractionExitTime");
static_assert(offsetof(InteractionDefinition_GetInteractionExitTime, Character) == 0x000000, "Member 'InteractionDefinition_GetInteractionExitTime::Character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetInteractionExitTime, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetInteractionExitTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionText
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetInteractionText final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInteractionText) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionText");
static_assert(sizeof(InteractionDefinition_GetInteractionText) == 0x000018, "Wrong size on InteractionDefinition_GetInteractionText");
static_assert(offsetof(InteractionDefinition_GetInteractionText, Player) == 0x000000, "Member 'InteractionDefinition_GetInteractionText::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetInteractionText, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetInteractionText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionTime
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetInteractionTime final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetInteractionTime) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionTime");
static_assert(sizeof(InteractionDefinition_GetInteractionTime) == 0x000010, "Wrong size on InteractionDefinition_GetInteractionTime");
static_assert(offsetof(InteractionDefinition_GetInteractionTime, Character) == 0x000000, "Member 'InteractionDefinition_GetInteractionTime::Character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetInteractionTime, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetInteractionTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractionTimeMultiplier
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetInteractionTimeMultiplier final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetInteractionTimeMultiplier) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractionTimeMultiplier");
static_assert(sizeof(InteractionDefinition_GetInteractionTimeMultiplier) == 0x000010, "Wrong size on InteractionDefinition_GetInteractionTimeMultiplier");
static_assert(offsetof(InteractionDefinition_GetInteractionTimeMultiplier, Character) == 0x000000, "Member 'InteractionDefinition_GetInteractionTimeMultiplier::Character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetInteractionTimeMultiplier, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetInteractionTimeMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInteractor
// 0x0008 (0x0008 - 0x0000)
struct InteractionDefinition_GetInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInteractor) == 0x000008, "Wrong alignment on InteractionDefinition_GetInteractor");
static_assert(sizeof(InteractionDefinition_GetInteractor) == 0x000008, "Wrong size on InteractionDefinition_GetInteractor");
static_assert(offsetof(InteractionDefinition_GetInteractor, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetInterruptionDefinitions
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetInterruptionDefinitions final
{
public:
	TArray<class UInterruptionDefinition*>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetInterruptionDefinitions) == 0x000008, "Wrong alignment on InteractionDefinition_GetInterruptionDefinitions");
static_assert(sizeof(InteractionDefinition_GetInterruptionDefinitions) == 0x000010, "Wrong size on InteractionDefinition_GetInterruptionDefinitions");
static_assert(offsetof(InteractionDefinition_GetInterruptionDefinitions, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetInterruptionDefinitions::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetRotationToSnapPoint
// 0x0020 (0x0020 - 0x0000)
struct InteractionDefinition_GetRotationToSnapPoint final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetRotationToSnapPoint) == 0x000008, "Wrong alignment on InteractionDefinition_GetRotationToSnapPoint");
static_assert(sizeof(InteractionDefinition_GetRotationToSnapPoint) == 0x000020, "Wrong size on InteractionDefinition_GetRotationToSnapPoint");
static_assert(offsetof(InteractionDefinition_GetRotationToSnapPoint, Player) == 0x000000, "Member 'InteractionDefinition_GetRotationToSnapPoint::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetRotationToSnapPoint, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetRotationToSnapPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetRotationToSnapPointAtStart
// 0x0020 (0x0020 - 0x0000)
struct InteractionDefinition_GetRotationToSnapPointAtStart final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetRotationToSnapPointAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetRotationToSnapPointAtStart");
static_assert(sizeof(InteractionDefinition_GetRotationToSnapPointAtStart) == 0x000020, "Wrong size on InteractionDefinition_GetRotationToSnapPointAtStart");
static_assert(offsetof(InteractionDefinition_GetRotationToSnapPointAtStart, Player) == 0x000000, "Member 'InteractionDefinition_GetRotationToSnapPointAtStart::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetRotationToSnapPointAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetRotationToSnapPointAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSecondaryActionInputType
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSecondaryActionInputType final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSecondaryActionInputType) == 0x000008, "Wrong alignment on InteractionDefinition_GetSecondaryActionInputType");
static_assert(sizeof(InteractionDefinition_GetSecondaryActionInputType) == 0x000010, "Wrong size on InteractionDefinition_GetSecondaryActionInputType");
static_assert(offsetof(InteractionDefinition_GetSecondaryActionInputType, WorldContextObject) == 0x000000, "Member 'InteractionDefinition_GetSecondaryActionInputType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSecondaryActionInputType, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSecondaryActionInputType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSlashableRelativeLocation
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetSlashableRelativeLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetSlashableRelativeLocation) == 0x000008, "Wrong alignment on InteractionDefinition_GetSlashableRelativeLocation");
static_assert(sizeof(InteractionDefinition_GetSlashableRelativeLocation) == 0x000018, "Wrong size on InteractionDefinition_GetSlashableRelativeLocation");
static_assert(offsetof(InteractionDefinition_GetSlashableRelativeLocation, ReturnValue) == 0x000000, "Member 'InteractionDefinition_GetSlashableRelativeLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapDistance
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSnapDistance final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapDistance) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapDistance");
static_assert(sizeof(InteractionDefinition_GetSnapDistance) == 0x000010, "Wrong size on InteractionDefinition_GetSnapDistance");
static_assert(offsetof(InteractionDefinition_GetSnapDistance, Player) == 0x000000, "Member 'InteractionDefinition_GetSnapDistance::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapDistance, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapDistance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapDistanceAtStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSnapDistanceAtStart final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapDistanceAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapDistanceAtStart");
static_assert(sizeof(InteractionDefinition_GetSnapDistanceAtStart) == 0x000010, "Wrong size on InteractionDefinition_GetSnapDistanceAtStart");
static_assert(offsetof(InteractionDefinition_GetSnapDistanceAtStart, Player) == 0x000000, "Member 'InteractionDefinition_GetSnapDistanceAtStart::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapDistanceAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapDistanceAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapPointPosition
// 0x0020 (0x0020 - 0x0000)
struct InteractionDefinition_GetSnapPointPosition final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetSnapPointPosition) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapPointPosition");
static_assert(sizeof(InteractionDefinition_GetSnapPointPosition) == 0x000020, "Wrong size on InteractionDefinition_GetSnapPointPosition");
static_assert(offsetof(InteractionDefinition_GetSnapPointPosition, Player) == 0x000000, "Member 'InteractionDefinition_GetSnapPointPosition::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapPointPosition, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapPointPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapPointPositionAtStart
// 0x0020 (0x0020 - 0x0000)
struct InteractionDefinition_GetSnapPointPositionAtStart final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetSnapPointPositionAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapPointPositionAtStart");
static_assert(sizeof(InteractionDefinition_GetSnapPointPositionAtStart) == 0x000020, "Wrong size on InteractionDefinition_GetSnapPointPositionAtStart");
static_assert(offsetof(InteractionDefinition_GetSnapPointPositionAtStart, Player) == 0x000000, "Member 'InteractionDefinition_GetSnapPointPositionAtStart::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapPointPositionAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapPointPositionAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapSocketName
// 0x0018 (0x0018 - 0x0000)
struct InteractionDefinition_GetSnapSocketName final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapSocketName) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapSocketName");
static_assert(sizeof(InteractionDefinition_GetSnapSocketName) == 0x000018, "Wrong size on InteractionDefinition_GetSnapSocketName");
static_assert(offsetof(InteractionDefinition_GetSnapSocketName, Player) == 0x000000, "Member 'InteractionDefinition_GetSnapSocketName::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapSocketName, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapSocketName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapTime
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSnapTime final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapTime) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapTime");
static_assert(sizeof(InteractionDefinition_GetSnapTime) == 0x000010, "Wrong size on InteractionDefinition_GetSnapTime");
static_assert(offsetof(InteractionDefinition_GetSnapTime, Player) == 0x000000, "Member 'InteractionDefinition_GetSnapTime::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapTime, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetSnapTimeAtStart
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetSnapTimeAtStart final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetSnapTimeAtStart) == 0x000008, "Wrong alignment on InteractionDefinition_GetSnapTimeAtStart");
static_assert(sizeof(InteractionDefinition_GetSnapTimeAtStart) == 0x000010, "Wrong size on InteractionDefinition_GetSnapTimeAtStart");
static_assert(offsetof(InteractionDefinition_GetSnapTimeAtStart, Player) == 0x000000, "Member 'InteractionDefinition_GetSnapTimeAtStart::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetSnapTimeAtStart, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetSnapTimeAtStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetUpdateAnimationPlayBackDefinition
// 0x0038 (0x0038 - 0x0000)
struct InteractionDefinition_GetUpdateAnimationPlayBackDefinition final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Follower;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             ReturnValue;                                       // 0x0010(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition) == 0x000008, "Wrong alignment on InteractionDefinition_GetUpdateAnimationPlayBackDefinition");
static_assert(sizeof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition) == 0x000038, "Wrong size on InteractionDefinition_GetUpdateAnimationPlayBackDefinition");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition, Player) == 0x000000, "Member 'InteractionDefinition_GetUpdateAnimationPlayBackDefinition::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition, Follower) == 0x000008, "Member 'InteractionDefinition_GetUpdateAnimationPlayBackDefinition::Follower' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayBackDefinition, ReturnValue) == 0x000010, "Member 'InteractionDefinition_GetUpdateAnimationPlayBackDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetUpdateAnimationPlayRate
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_GetUpdateAnimationPlayRate final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_GetUpdateAnimationPlayRate) == 0x000008, "Wrong alignment on InteractionDefinition_GetUpdateAnimationPlayRate");
static_assert(sizeof(InteractionDefinition_GetUpdateAnimationPlayRate) == 0x000010, "Wrong size on InteractionDefinition_GetUpdateAnimationPlayRate");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayRate, Player) == 0x000000, "Member 'InteractionDefinition_GetUpdateAnimationPlayRate::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetUpdateAnimationPlayRate, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetUpdateAnimationPlayRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.GetUpdateMontage
// 0x0028 (0x0028 - 0x0000)
struct InteractionDefinition_GetUpdateMontage final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDefinition_GetUpdateMontage) == 0x000008, "Wrong alignment on InteractionDefinition_GetUpdateMontage");
static_assert(sizeof(InteractionDefinition_GetUpdateMontage) == 0x000028, "Wrong size on InteractionDefinition_GetUpdateMontage");
static_assert(offsetof(InteractionDefinition_GetUpdateMontage, Player) == 0x000000, "Member 'InteractionDefinition_GetUpdateMontage::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_GetUpdateMontage, ReturnValue) == 0x000008, "Member 'InteractionDefinition_GetUpdateMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsCancelable
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsCancelable final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsCancelable) == 0x000008, "Wrong alignment on InteractionDefinition_IsCancelable");
static_assert(sizeof(InteractionDefinition_IsCancelable) == 0x000010, "Wrong size on InteractionDefinition_IsCancelable");
static_assert(offsetof(InteractionDefinition_IsCancelable, Player) == 0x000000, "Member 'InteractionDefinition_IsCancelable::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsCancelable, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsCancelable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsCharacterFacingInteractorDirection
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsCharacterFacingInteractorDirection final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsCharacterFacingInteractorDirection) == 0x000008, "Wrong alignment on InteractionDefinition_IsCharacterFacingInteractorDirection");
static_assert(sizeof(InteractionDefinition_IsCharacterFacingInteractorDirection) == 0x000010, "Wrong size on InteractionDefinition_IsCharacterFacingInteractorDirection");
static_assert(offsetof(InteractionDefinition_IsCharacterFacingInteractorDirection, Player) == 0x000000, "Member 'InteractionDefinition_IsCharacterFacingInteractorDirection::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsCharacterFacingInteractorDirection, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsCharacterFacingInteractorDirection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInputPressed
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInputPressed final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInputPressed) == 0x000008, "Wrong alignment on InteractionDefinition_IsInputPressed");
static_assert(sizeof(InteractionDefinition_IsInputPressed) == 0x000010, "Wrong size on InteractionDefinition_IsInputPressed");
static_assert(offsetof(InteractionDefinition_IsInputPressed, Player) == 0x000000, "Member 'InteractionDefinition_IsInputPressed::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInputPressed, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsInputPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractableInPlayerView
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractableInPlayerView final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractableInPlayerView) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractableInPlayerView");
static_assert(sizeof(InteractionDefinition_IsInteractableInPlayerView) == 0x000010, "Wrong size on InteractionDefinition_IsInteractableInPlayerView");
static_assert(offsetof(InteractionDefinition_IsInteractableInPlayerView, Player) == 0x000000, "Member 'InteractionDefinition_IsInteractableInPlayerView::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractableInPlayerView, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsInteractableInPlayerView::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionDone
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionDone final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InteractionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionDone) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionDone");
static_assert(sizeof(InteractionDefinition_IsInteractionDone) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionDone");
static_assert(offsetof(InteractionDefinition_IsInteractionDone, Player) == 0x000000, "Member 'InteractionDefinition_IsInteractionDone::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionDone, InteractionType) == 0x000008, "Member 'InteractionDefinition_IsInteractionDone::InteractionType' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionDone, ReturnValue) == 0x000009, "Member 'InteractionDefinition_IsInteractionDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionPossible
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionPossible final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InteractionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerformClientCheck;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerformHeightCheck;                                // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBotPredictionCheck;                              // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionPossible) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionPossible");
static_assert(sizeof(InteractionDefinition_IsInteractionPossible) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionPossible");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, Player) == 0x000000, "Member 'InteractionDefinition_IsInteractionPossible::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, InteractionType) == 0x000008, "Member 'InteractionDefinition_IsInteractionPossible::InteractionType' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, PerformClientCheck) == 0x000009, "Member 'InteractionDefinition_IsInteractionPossible::PerformClientCheck' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, PerformHeightCheck) == 0x00000A, "Member 'InteractionDefinition_IsInteractionPossible::PerformHeightCheck' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, IsBotPredictionCheck) == 0x00000B, "Member 'InteractionDefinition_IsInteractionPossible::IsBotPredictionCheck' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossible, ReturnValue) == 0x00000C, "Member 'InteractionDefinition_IsInteractionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionPossibleBP
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionPossibleBP final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InteractionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionPossibleBP) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionPossibleBP");
static_assert(sizeof(InteractionDefinition_IsInteractionPossibleBP) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionPossibleBP");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleBP, Player) == 0x000000, "Member 'InteractionDefinition_IsInteractionPossibleBP::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleBP, InteractionType) == 0x000008, "Member 'InteractionDefinition_IsInteractionPossibleBP::InteractionType' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleBP, ReturnValue) == 0x000009, "Member 'InteractionDefinition_IsInteractionPossibleBP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionPossibleClient
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionPossibleClient final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InteractionType;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionPossibleClient) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionPossibleClient");
static_assert(sizeof(InteractionDefinition_IsInteractionPossibleClient) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionPossibleClient");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleClient, Player) == 0x000000, "Member 'InteractionDefinition_IsInteractionPossibleClient::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleClient, InteractionType) == 0x000008, "Member 'InteractionDefinition_IsInteractionPossibleClient::InteractionType' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionPossibleClient, ReturnValue) == 0x000009, "Member 'InteractionDefinition_IsInteractionPossibleClient::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInteractionUsingOffering
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsInteractionUsingOffering final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInteractionUsingOffering) == 0x000008, "Wrong alignment on InteractionDefinition_IsInteractionUsingOffering");
static_assert(sizeof(InteractionDefinition_IsInteractionUsingOffering) == 0x000010, "Wrong size on InteractionDefinition_IsInteractionUsingOffering");
static_assert(offsetof(InteractionDefinition_IsInteractionUsingOffering, Player) == 0x000000, "Member 'InteractionDefinition_IsInteractionUsingOffering::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInteractionUsingOffering, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsInteractionUsingOffering::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsInterruptionPossible
// 0x0020 (0x0020 - 0x0000)
struct InteractionDefinition_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInterruptionDefinition*          Interruption;                                      // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsInterruptionPossible) == 0x000008, "Wrong alignment on InteractionDefinition_IsInterruptionPossible");
static_assert(sizeof(InteractionDefinition_IsInterruptionPossible) == 0x000020, "Wrong size on InteractionDefinition_IsInterruptionPossible");
static_assert(offsetof(InteractionDefinition_IsInterruptionPossible, Interruptor) == 0x000000, "Member 'InteractionDefinition_IsInterruptionPossible::Interruptor' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInterruptionPossible, Interruptee) == 0x000008, "Member 'InteractionDefinition_IsInterruptionPossible::Interruptee' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInterruptionPossible, Interruption) == 0x000010, "Member 'InteractionDefinition_IsInterruptionPossible::Interruption' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsInterruptionPossible, ReturnValue) == 0x000018, "Member 'InteractionDefinition_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.IsSupportedCharacterType
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_IsSupportedCharacterType final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_IsSupportedCharacterType) == 0x000008, "Wrong alignment on InteractionDefinition_IsSupportedCharacterType");
static_assert(sizeof(InteractionDefinition_IsSupportedCharacterType) == 0x000010, "Wrong size on InteractionDefinition_IsSupportedCharacterType");
static_assert(offsetof(InteractionDefinition_IsSupportedCharacterType, Player) == 0x000000, "Member 'InteractionDefinition_IsSupportedCharacterType::Player' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_IsSupportedCharacterType, ReturnValue) == 0x000008, "Member 'InteractionDefinition_IsSupportedCharacterType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDefinition.ShouldStartUpdateMontageDuringEnter
// 0x0010 (0x0010 - 0x0000)
struct InteractionDefinition_ShouldStartUpdateMontageDuringEnter final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDefinition_ShouldStartUpdateMontageDuringEnter) == 0x000008, "Wrong alignment on InteractionDefinition_ShouldStartUpdateMontageDuringEnter");
static_assert(sizeof(InteractionDefinition_ShouldStartUpdateMontageDuringEnter) == 0x000010, "Wrong size on InteractionDefinition_ShouldStartUpdateMontageDuringEnter");
static_assert(offsetof(InteractionDefinition_ShouldStartUpdateMontageDuringEnter, Character) == 0x000000, "Member 'InteractionDefinition_ShouldStartUpdateMontageDuringEnter::Character' has a wrong offset!");
static_assert(offsetof(InteractionDefinition_ShouldStartUpdateMontageDuringEnter, ReturnValue) == 0x000008, "Member 'InteractionDefinition_ShouldStartUpdateMontageDuringEnter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.AttachEveryInteractionToZone
// 0x0008 (0x0008 - 0x0000)
struct Interactable_AttachEveryInteractionToZone final
{
public:
	class UPrimitiveComponent*                    Zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_AttachEveryInteractionToZone) == 0x000008, "Wrong alignment on Interactable_AttachEveryInteractionToZone");
static_assert(sizeof(Interactable_AttachEveryInteractionToZone) == 0x000008, "Wrong size on Interactable_AttachEveryInteractionToZone");
static_assert(offsetof(Interactable_AttachEveryInteractionToZone, Zone) == 0x000000, "Member 'Interactable_AttachEveryInteractionToZone::Zone' has a wrong offset!");

// Function DeadByDaylight.Interactable.AuthorityRequestCancelOngoingInteractions
// 0x0001 (0x0001 - 0x0000)
struct Interactable_AuthorityRequestCancelOngoingInteractions final
{
public:
	bool                                          OnlyOnHitCancelableInteractions;                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_AuthorityRequestCancelOngoingInteractions) == 0x000001, "Wrong alignment on Interactable_AuthorityRequestCancelOngoingInteractions");
static_assert(sizeof(Interactable_AuthorityRequestCancelOngoingInteractions) == 0x000001, "Wrong size on Interactable_AuthorityRequestCancelOngoingInteractions");
static_assert(offsetof(Interactable_AuthorityRequestCancelOngoingInteractions, OnlyOnHitCancelableInteractions) == 0x000000, "Member 'Interactable_AuthorityRequestCancelOngoingInteractions::OnlyOnHitCancelableInteractions' has a wrong offset!");

// Function DeadByDaylight.Interactable.OnInteractorLockChanged
// 0x0010 (0x0010 - 0x0000)
struct Interactable_OnInteractorLockChanged final
{
public:
	bool                                          Locked;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_OnInteractorLockChanged) == 0x000008, "Wrong alignment on Interactable_OnInteractorLockChanged");
static_assert(sizeof(Interactable_OnInteractorLockChanged) == 0x000010, "Wrong size on Interactable_OnInteractorLockChanged");
static_assert(offsetof(Interactable_OnInteractorLockChanged, Locked) == 0x000000, "Member 'Interactable_OnInteractorLockChanged::Locked' has a wrong offset!");
static_assert(offsetof(Interactable_OnInteractorLockChanged, InteractingPlayer) == 0x000008, "Member 'Interactable_OnInteractorLockChanged::InteractingPlayer' has a wrong offset!");

// Function DeadByDaylight.Interactable.PreInterruptionEvent
// 0x0018 (0x0018 - 0x0000)
struct Interactable_PreInterruptionEvent final
{
public:
	class ADBDPlayer*                             Interruptor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Interruptee;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                Interruption;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_PreInterruptionEvent) == 0x000008, "Wrong alignment on Interactable_PreInterruptionEvent");
static_assert(sizeof(Interactable_PreInterruptionEvent) == 0x000018, "Wrong size on Interactable_PreInterruptionEvent");
static_assert(offsetof(Interactable_PreInterruptionEvent, Interruptor) == 0x000000, "Member 'Interactable_PreInterruptionEvent::Interruptor' has a wrong offset!");
static_assert(offsetof(Interactable_PreInterruptionEvent, Interruptee) == 0x000008, "Member 'Interactable_PreInterruptionEvent::Interruptee' has a wrong offset!");
static_assert(offsetof(Interactable_PreInterruptionEvent, Interruption) == 0x000010, "Member 'Interactable_PreInterruptionEvent::Interruption' has a wrong offset!");

// Function DeadByDaylight.Interactable.SetInteractorsUsable
// 0x0010 (0x0010 - 0x0000)
struct Interactable_SetInteractorsUsable final
{
public:
	bool                                          Usable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractor*                            Exception;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_SetInteractorsUsable) == 0x000008, "Wrong alignment on Interactable_SetInteractorsUsable");
static_assert(sizeof(Interactable_SetInteractorsUsable) == 0x000010, "Wrong size on Interactable_SetInteractorsUsable");
static_assert(offsetof(Interactable_SetInteractorsUsable, Usable) == 0x000000, "Member 'Interactable_SetInteractorsUsable::Usable' has a wrong offset!");
static_assert(offsetof(Interactable_SetInteractorsUsable, Exception) == 0x000008, "Member 'Interactable_SetInteractorsUsable::Exception' has a wrong offset!");

// Function DeadByDaylight.Interactable.SetSingleZone
// 0x0008 (0x0008 - 0x0000)
struct Interactable_SetSingleZone final
{
public:
	class UPrimitiveComponent*                    Zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_SetSingleZone) == 0x000008, "Wrong alignment on Interactable_SetSingleZone");
static_assert(sizeof(Interactable_SetSingleZone) == 0x000008, "Wrong size on Interactable_SetSingleZone");
static_assert(offsetof(Interactable_SetSingleZone, Zone) == 0x000000, "Member 'Interactable_SetSingleZone::Zone' has a wrong offset!");

// Function DeadByDaylight.Interactable.Authority_GetInteractingPlayers
// 0x0010 (0x0010 - 0x0000)
struct Interactable_Authority_GetInteractingPlayers final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_Authority_GetInteractingPlayers) == 0x000008, "Wrong alignment on Interactable_Authority_GetInteractingPlayers");
static_assert(sizeof(Interactable_Authority_GetInteractingPlayers) == 0x000010, "Wrong size on Interactable_Authority_GetInteractingPlayers");
static_assert(offsetof(Interactable_Authority_GetInteractingPlayers, ReturnValue) == 0x000000, "Member 'Interactable_Authority_GetInteractingPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.GetFocalPointPosition
// 0x0028 (0x0028 - 0x0000)
struct Interactable_GetFocalPointPosition final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           Definition;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetFocalPointPosition) == 0x000008, "Wrong alignment on Interactable_GetFocalPointPosition");
static_assert(sizeof(Interactable_GetFocalPointPosition) == 0x000028, "Wrong size on Interactable_GetFocalPointPosition");
static_assert(offsetof(Interactable_GetFocalPointPosition, Player) == 0x000000, "Member 'Interactable_GetFocalPointPosition::Player' has a wrong offset!");
static_assert(offsetof(Interactable_GetFocalPointPosition, Definition) == 0x000008, "Member 'Interactable_GetFocalPointPosition::Definition' has a wrong offset!");
static_assert(offsetof(Interactable_GetFocalPointPosition, ReturnValue) == 0x000010, "Member 'Interactable_GetFocalPointPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.GetInteractingPlayersRaw
// 0x0010 (0x0010 - 0x0000)
struct Interactable_GetInteractingPlayersRaw final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetInteractingPlayersRaw) == 0x000008, "Wrong alignment on Interactable_GetInteractingPlayersRaw");
static_assert(sizeof(Interactable_GetInteractingPlayersRaw) == 0x000010, "Wrong size on Interactable_GetInteractingPlayersRaw");
static_assert(offsetof(Interactable_GetInteractingPlayersRaw, ReturnValue) == 0x000000, "Member 'Interactable_GetInteractingPlayersRaw::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.GetInteractors
// 0x0010 (0x0010 - 0x0000)
struct Interactable_GetInteractors final
{
public:
	TArray<class UInteractor*>                    ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetInteractors) == 0x000008, "Wrong alignment on Interactable_GetInteractors");
static_assert(sizeof(Interactable_GetInteractors) == 0x000010, "Wrong size on Interactable_GetInteractors");
static_assert(offsetof(Interactable_GetInteractors, ReturnValue) == 0x000000, "Member 'Interactable_GetInteractors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.GetObjectState
// 0x0008 (0x0008 - 0x0000)
struct Interactable_GetObjectState final
{
public:
	class UGameplayTagContainerComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetObjectState) == 0x000008, "Wrong alignment on Interactable_GetObjectState");
static_assert(sizeof(Interactable_GetObjectState) == 0x000008, "Wrong size on Interactable_GetObjectState");
static_assert(offsetof(Interactable_GetObjectState, ReturnValue) == 0x000000, "Member 'Interactable_GetObjectState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.GetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct Interactable_GetPlayerOwner final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_GetPlayerOwner) == 0x000008, "Wrong alignment on Interactable_GetPlayerOwner");
static_assert(sizeof(Interactable_GetPlayerOwner) == 0x000008, "Wrong size on Interactable_GetPlayerOwner");
static_assert(offsetof(Interactable_GetPlayerOwner, ReturnValue) == 0x000000, "Member 'Interactable_GetPlayerOwner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.HasAnOngoingInteraction
// 0x0001 (0x0001 - 0x0000)
struct Interactable_HasAnOngoingInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactable_HasAnOngoingInteraction) == 0x000001, "Wrong alignment on Interactable_HasAnOngoingInteraction");
static_assert(sizeof(Interactable_HasAnOngoingInteraction) == 0x000001, "Wrong size on Interactable_HasAnOngoingInteraction");
static_assert(offsetof(Interactable_HasAnOngoingInteraction, ReturnValue) == 0x000000, "Member 'Interactable_HasAnOngoingInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.IsInteractingWith
// 0x0010 (0x0010 - 0x0000)
struct Interactable_IsInteractingWith final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_IsInteractingWith) == 0x000008, "Wrong alignment on Interactable_IsInteractingWith");
static_assert(sizeof(Interactable_IsInteractingWith) == 0x000010, "Wrong size on Interactable_IsInteractingWith");
static_assert(offsetof(Interactable_IsInteractingWith, Player) == 0x000000, "Member 'Interactable_IsInteractingWith::Player' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractingWith, ReturnValue) == 0x000008, "Member 'Interactable_IsInteractingWith::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.IsInteractionDone
// 0x0020 (0x0020 - 0x0000)
struct Interactable_IsInteractionDone final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractor*                      Interactor;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           Definition;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InteractionType;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_IsInteractionDone) == 0x000008, "Wrong alignment on Interactable_IsInteractionDone");
static_assert(sizeof(Interactable_IsInteractionDone) == 0x000020, "Wrong size on Interactable_IsInteractionDone");
static_assert(offsetof(Interactable_IsInteractionDone, Player) == 0x000000, "Member 'Interactable_IsInteractionDone::Player' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractionDone, Interactor) == 0x000008, "Member 'Interactable_IsInteractionDone::Interactor' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractionDone, Definition) == 0x000010, "Member 'Interactable_IsInteractionDone::Definition' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractionDone, InteractionType) == 0x000018, "Member 'Interactable_IsInteractionDone::InteractionType' has a wrong offset!");
static_assert(offsetof(Interactable_IsInteractionDone, ReturnValue) == 0x000019, "Member 'Interactable_IsInteractionDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactable.IsInterruptionPossible
// 0x0030 (0x0030 - 0x0000)
struct Interactable_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractor*                      Interactor;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           Definition;                                        // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInterruptionDefinition*          Interruption;                                      // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactable_IsInterruptionPossible) == 0x000008, "Wrong alignment on Interactable_IsInterruptionPossible");
static_assert(sizeof(Interactable_IsInterruptionPossible) == 0x000030, "Wrong size on Interactable_IsInterruptionPossible");
static_assert(offsetof(Interactable_IsInterruptionPossible, Interruptor) == 0x000000, "Member 'Interactable_IsInterruptionPossible::Interruptor' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, Interruptee) == 0x000008, "Member 'Interactable_IsInterruptionPossible::Interruptee' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, Interactor) == 0x000010, "Member 'Interactable_IsInterruptionPossible::Interactor' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, Definition) == 0x000018, "Member 'Interactable_IsInterruptionPossible::Definition' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, Interruption) == 0x000020, "Member 'Interactable_IsInterruptionPossible::Interruption' has a wrong offset!");
static_assert(offsetof(Interactable_IsInterruptionPossible, ReturnValue) == 0x000028, "Member 'Interactable_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.Authority_AddItemAddon
// 0x0010 (0x0010 - 0x0000)
struct Collectable_Authority_AddItemAddon final
{
public:
	class UItemAddon*                             Addon;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_Authority_AddItemAddon) == 0x000008, "Wrong alignment on Collectable_Authority_AddItemAddon");
static_assert(sizeof(Collectable_Authority_AddItemAddon) == 0x000010, "Wrong size on Collectable_Authority_AddItemAddon");
static_assert(offsetof(Collectable_Authority_AddItemAddon, Addon) == 0x000000, "Member 'Collectable_Authority_AddItemAddon::Addon' has a wrong offset!");
static_assert(offsetof(Collectable_Authority_AddItemAddon, ReturnValue) == 0x000008, "Member 'Collectable_Authority_AddItemAddon::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.Authority_OnCollectorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct Collectable_Authority_OnCollectorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_Authority_OnCollectorEndPlay) == 0x000008, "Wrong alignment on Collectable_Authority_OnCollectorEndPlay");
static_assert(sizeof(Collectable_Authority_OnCollectorEndPlay) == 0x000010, "Wrong size on Collectable_Authority_OnCollectorEndPlay");
static_assert(offsetof(Collectable_Authority_OnCollectorEndPlay, Actor) == 0x000000, "Member 'Collectable_Authority_OnCollectorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(Collectable_Authority_OnCollectorEndPlay, EndPlayReason) == 0x000008, "Member 'Collectable_Authority_OnCollectorEndPlay::EndPlayReason' has a wrong offset!");

// Function DeadByDaylight.Collectable.Authority_OnConsumed
// 0x0001 (0x0001 - 0x0000)
struct Collectable_Authority_OnConsumed final
{
public:
	bool                                          ForceDiscard;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Authority_OnConsumed) == 0x000001, "Wrong alignment on Collectable_Authority_OnConsumed");
static_assert(sizeof(Collectable_Authority_OnConsumed) == 0x000001, "Wrong size on Collectable_Authority_OnConsumed");
static_assert(offsetof(Collectable_Authority_OnConsumed, ForceDiscard) == 0x000000, "Member 'Collectable_Authority_OnConsumed::ForceDiscard' has a wrong offset!");

// Function DeadByDaylight.Collectable.Authority_RemoveItemAddon
// 0x0008 (0x0008 - 0x0000)
struct Collectable_Authority_RemoveItemAddon final
{
public:
	class UItemAddon*                             Addon;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Authority_RemoveItemAddon) == 0x000008, "Wrong alignment on Collectable_Authority_RemoveItemAddon");
static_assert(sizeof(Collectable_Authority_RemoveItemAddon) == 0x000008, "Wrong size on Collectable_Authority_RemoveItemAddon");
static_assert(offsetof(Collectable_Authority_RemoveItemAddon, Addon) == 0x000000, "Member 'Collectable_Authority_RemoveItemAddon::Addon' has a wrong offset!");

// Function DeadByDaylight.Collectable.BP_OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct Collectable_BP_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_BP_OnSurvivorAdded) == 0x000008, "Wrong alignment on Collectable_BP_OnSurvivorAdded");
static_assert(sizeof(Collectable_BP_OnSurvivorAdded) == 0x000008, "Wrong size on Collectable_BP_OnSurvivorAdded");
static_assert(offsetof(Collectable_BP_OnSurvivorAdded, Survivor) == 0x000000, "Member 'Collectable_BP_OnSurvivorAdded::Survivor' has a wrong offset!");

// Function DeadByDaylight.Collectable.CallOnCollectorSetBP
// 0x0014 (0x0014 - 0x0000)
struct Collectable_CallOnCollectorSetBP final
{
public:
	TDelegate<void(class ADBDPlayer* Player)>     Callback;                                          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_CallOnCollectorSetBP) == 0x000004, "Wrong alignment on Collectable_CallOnCollectorSetBP");
static_assert(sizeof(Collectable_CallOnCollectorSetBP) == 0x000014, "Wrong size on Collectable_CallOnCollectorSetBP");
static_assert(offsetof(Collectable_CallOnCollectorSetBP, Callback) == 0x000000, "Member 'Collectable_CallOnCollectorSetBP::Callback' has a wrong offset!");

// DelegateFunction DeadByDaylight.Collectable.OnCollectorSetBPDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnCollectorSetBPDelegate__DelegateSignature final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnCollectorSetBPDelegate__DelegateSignature) == 0x000008, "Wrong alignment on Collectable_OnCollectorSetBPDelegate__DelegateSignature");
static_assert(sizeof(Collectable_OnCollectorSetBPDelegate__DelegateSignature) == 0x000008, "Wrong size on Collectable_OnCollectorSetBPDelegate__DelegateSignature");
static_assert(offsetof(Collectable_OnCollectorSetBPDelegate__DelegateSignature, Player) == 0x000000, "Member 'Collectable_OnCollectorSetBPDelegate__DelegateSignature::Player' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetItemAddons
// 0x0010 (0x0010 - 0x0000)
struct Collectable_GetItemAddons final
{
public:
	TArray<class UItemAddon*>                     ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetItemAddons) == 0x000008, "Wrong alignment on Collectable_GetItemAddons");
static_assert(sizeof(Collectable_GetItemAddons) == 0x000010, "Wrong size on Collectable_GetItemAddons");
static_assert(offsetof(Collectable_GetItemAddons, ReturnValue) == 0x000000, "Member 'Collectable_GetItemAddons::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.Local_Dropped_Location
// 0x0038 (0x0038 - 0x0000)
struct Collectable_Local_Dropped_Location final
{
public:
	class ADBDPlayer*                             DroppedBy;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Local_Dropped_Location) == 0x000008, "Wrong alignment on Collectable_Local_Dropped_Location");
static_assert(sizeof(Collectable_Local_Dropped_Location) == 0x000038, "Wrong size on Collectable_Local_Dropped_Location");
static_assert(offsetof(Collectable_Local_Dropped_Location, DroppedBy) == 0x000000, "Member 'Collectable_Local_Dropped_Location::DroppedBy' has a wrong offset!");
static_assert(offsetof(Collectable_Local_Dropped_Location, Location) == 0x000008, "Member 'Collectable_Local_Dropped_Location::Location' has a wrong offset!");
static_assert(offsetof(Collectable_Local_Dropped_Location, Rotation) == 0x000020, "Member 'Collectable_Local_Dropped_Location::Rotation' has a wrong offset!");

// Function DeadByDaylight.Collectable.Multicast_Collected
// 0x0010 (0x0010 - 0x0000)
struct Collectable_Multicast_Collected final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_Multicast_Collected) == 0x000008, "Wrong alignment on Collectable_Multicast_Collected");
static_assert(sizeof(Collectable_Multicast_Collected) == 0x000010, "Wrong size on Collectable_Multicast_Collected");
static_assert(offsetof(Collectable_Multicast_Collected, Collector) == 0x000000, "Member 'Collectable_Multicast_Collected::Collector' has a wrong offset!");
static_assert(offsetof(Collectable_Multicast_Collected, InventoryType) == 0x000008, "Member 'Collectable_Multicast_Collected::InventoryType' has a wrong offset!");

// Function DeadByDaylight.Collectable.Multicast_Dropped
// 0x0040 (0x0040 - 0x0000)
struct Collectable_Multicast_Dropped final
{
public:
	class ADBDPlayer*                             DroppedBy;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	EItemDropType                                 ItemDropType;                                      // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_Multicast_Dropped) == 0x000008, "Wrong alignment on Collectable_Multicast_Dropped");
static_assert(sizeof(Collectable_Multicast_Dropped) == 0x000040, "Wrong size on Collectable_Multicast_Dropped");
static_assert(offsetof(Collectable_Multicast_Dropped, DroppedBy) == 0x000000, "Member 'Collectable_Multicast_Dropped::DroppedBy' has a wrong offset!");
static_assert(offsetof(Collectable_Multicast_Dropped, Location) == 0x000008, "Member 'Collectable_Multicast_Dropped::Location' has a wrong offset!");
static_assert(offsetof(Collectable_Multicast_Dropped, Rotation) == 0x000020, "Member 'Collectable_Multicast_Dropped::Rotation' has a wrong offset!");
static_assert(offsetof(Collectable_Multicast_Dropped, ItemDropType) == 0x000038, "Member 'Collectable_Multicast_Dropped::ItemDropType' has a wrong offset!");

// Function DeadByDaylight.Collectable.Multicast_RemoveItemAddon
// 0x0008 (0x0008 - 0x0000)
struct Collectable_Multicast_RemoveItemAddon final
{
public:
	class UItemAddon*                             Addon;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Multicast_RemoveItemAddon) == 0x000008, "Wrong alignment on Collectable_Multicast_RemoveItemAddon");
static_assert(sizeof(Collectable_Multicast_RemoveItemAddon) == 0x000008, "Wrong size on Collectable_Multicast_RemoveItemAddon");
static_assert(offsetof(Collectable_Multicast_RemoveItemAddon, Addon) == 0x000000, "Member 'Collectable_Multicast_RemoveItemAddon::Addon' has a wrong offset!");

// Function DeadByDaylight.Collectable.Multicast_UseReleased
// 0x0008 (0x0008 - 0x0000)
struct Collectable_Multicast_UseReleased final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_Multicast_UseReleased) == 0x000008, "Wrong alignment on Collectable_Multicast_UseReleased");
static_assert(sizeof(Collectable_Multicast_UseReleased) == 0x000008, "Wrong size on Collectable_Multicast_UseReleased");
static_assert(offsetof(Collectable_Multicast_UseReleased, Collector) == 0x000000, "Member 'Collectable_Multicast_UseReleased::Collector' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnAddonsAdded
// 0x0010 (0x0010 - 0x0000)
struct Collectable_OnAddonsAdded final
{
public:
	TArray<class UItemAddon*>                     Addons;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnAddonsAdded) == 0x000008, "Wrong alignment on Collectable_OnAddonsAdded");
static_assert(sizeof(Collectable_OnAddonsAdded) == 0x000010, "Wrong size on Collectable_OnAddonsAdded");
static_assert(offsetof(Collectable_OnAddonsAdded, Addons) == 0x000000, "Member 'Collectable_OnAddonsAdded::Addons' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnAddonsRemoved
// 0x0010 (0x0010 - 0x0000)
struct Collectable_OnAddonsRemoved final
{
public:
	TArray<class UItemAddon*>                     Addons;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnAddonsRemoved) == 0x000008, "Wrong alignment on Collectable_OnAddonsRemoved");
static_assert(sizeof(Collectable_OnAddonsRemoved) == 0x000010, "Wrong size on Collectable_OnAddonsRemoved");
static_assert(offsetof(Collectable_OnAddonsRemoved, Addons) == 0x000000, "Member 'Collectable_OnAddonsRemoved::Addons' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnCollectorSet
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnCollectorSet final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnCollectorSet) == 0x000008, "Wrong alignment on Collectable_OnCollectorSet");
static_assert(sizeof(Collectable_OnCollectorSet) == 0x000008, "Wrong size on Collectable_OnCollectorSet");
static_assert(offsetof(Collectable_OnCollectorSet, Collector) == 0x000000, "Member 'Collectable_OnCollectorSet::Collector' has a wrong offset!");

// DelegateFunction DeadByDaylight.Collectable.OnCollectorSetBP__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnCollectorSetBP__DelegateSignature final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnCollectorSetBP__DelegateSignature) == 0x000008, "Wrong alignment on Collectable_OnCollectorSetBP__DelegateSignature");
static_assert(sizeof(Collectable_OnCollectorSetBP__DelegateSignature) == 0x000008, "Wrong size on Collectable_OnCollectorSetBP__DelegateSignature");
static_assert(offsetof(Collectable_OnCollectorSetBP__DelegateSignature, Player) == 0x000000, "Member 'Collectable_OnCollectorSetBP__DelegateSignature::Player' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnDropped
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnDropped final
{
public:
	class ADBDPlayer*                             DroppingPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnDropped) == 0x000008, "Wrong alignment on Collectable_OnDropped");
static_assert(sizeof(Collectable_OnDropped) == 0x000008, "Wrong size on Collectable_OnDropped");
static_assert(offsetof(Collectable_OnDropped, DroppingPlayer) == 0x000000, "Member 'Collectable_OnDropped::DroppingPlayer' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnPostItemAddonsCreation
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnPostItemAddonsCreation final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnPostItemAddonsCreation) == 0x000008, "Wrong alignment on Collectable_OnPostItemAddonsCreation");
static_assert(sizeof(Collectable_OnPostItemAddonsCreation) == 0x000008, "Wrong size on Collectable_OnPostItemAddonsCreation");
static_assert(offsetof(Collectable_OnPostItemAddonsCreation, Player) == 0x000000, "Member 'Collectable_OnPostItemAddonsCreation::Player' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnRep_Collector
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnRep_Collector final
{
public:
	class ADBDPlayer*                             OldCollector;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnRep_Collector) == 0x000008, "Wrong alignment on Collectable_OnRep_Collector");
static_assert(sizeof(Collectable_OnRep_Collector) == 0x000008, "Wrong size on Collectable_OnRep_Collector");
static_assert(offsetof(Collectable_OnRep_Collector, OldCollector) == 0x000000, "Member 'Collectable_OnRep_Collector::OldCollector' has a wrong offset!");

// Function DeadByDaylight.Collectable.OnUseReleased
// 0x0008 (0x0008 - 0x0000)
struct Collectable_OnUseReleased final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_OnUseReleased) == 0x000008, "Wrong alignment on Collectable_OnUseReleased");
static_assert(sizeof(Collectable_OnUseReleased) == 0x000008, "Wrong size on Collectable_OnUseReleased");
static_assert(offsetof(Collectable_OnUseReleased, Collector) == 0x000000, "Member 'Collectable_OnUseReleased::Collector' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetCount
// 0x0004 (0x0004 - 0x0000)
struct Collectable_SetCount final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetCount) == 0x000004, "Wrong alignment on Collectable_SetCount");
static_assert(sizeof(Collectable_SetCount) == 0x000004, "Wrong size on Collectable_SetCount");
static_assert(offsetof(Collectable_SetCount, Count) == 0x000000, "Member 'Collectable_SetCount::Count' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetDisplayedInputType
// 0x0001 (0x0001 - 0x0000)
struct Collectable_SetDisplayedInputType final
{
public:
	EInputInteractionType                         DisplayedInputType;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetDisplayedInputType) == 0x000001, "Wrong alignment on Collectable_SetDisplayedInputType");
static_assert(sizeof(Collectable_SetDisplayedInputType) == 0x000001, "Wrong size on Collectable_SetDisplayedInputType");
static_assert(offsetof(Collectable_SetDisplayedInputType, DisplayedInputType) == 0x000000, "Member 'Collectable_SetDisplayedInputType::DisplayedInputType' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetIsKeyPromptForceDisabled
// 0x0001 (0x0001 - 0x0000)
struct Collectable_SetIsKeyPromptForceDisabled final
{
public:
	bool                                          IsKeyPromptForceDisabled;                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetIsKeyPromptForceDisabled) == 0x000001, "Wrong alignment on Collectable_SetIsKeyPromptForceDisabled");
static_assert(sizeof(Collectable_SetIsKeyPromptForceDisabled) == 0x000001, "Wrong size on Collectable_SetIsKeyPromptForceDisabled");
static_assert(offsetof(Collectable_SetIsKeyPromptForceDisabled, IsKeyPromptForceDisabled) == 0x000000, "Member 'Collectable_SetIsKeyPromptForceDisabled::IsKeyPromptForceDisabled' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetItemInteractor
// 0x0008 (0x0008 - 0x0000)
struct Collectable_SetItemInteractor final
{
public:
	class UInteractor*                            Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetItemInteractor) == 0x000008, "Wrong alignment on Collectable_SetItemInteractor");
static_assert(sizeof(Collectable_SetItemInteractor) == 0x000008, "Wrong size on Collectable_SetItemInteractor");
static_assert(offsetof(Collectable_SetItemInteractor, Interactor) == 0x000000, "Member 'Collectable_SetItemInteractor::Interactor' has a wrong offset!");

// Function DeadByDaylight.Collectable.SetVisibilityEvent
// 0x0001 (0x0001 - 0x0000)
struct Collectable_SetVisibilityEvent final
{
public:
	bool                                          Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_SetVisibilityEvent) == 0x000001, "Wrong alignment on Collectable_SetVisibilityEvent");
static_assert(sizeof(Collectable_SetVisibilityEvent) == 0x000001, "Wrong size on Collectable_SetVisibilityEvent");
static_assert(offsetof(Collectable_SetVisibilityEvent, Visibility) == 0x000000, "Member 'Collectable_SetVisibilityEvent::Visibility' has a wrong offset!");

// Function DeadByDaylight.Collectable.CanBeCollected
// 0x0010 (0x0010 - 0x0000)
struct Collectable_CanBeCollected final
{
public:
	const class ADBDPlayer*                       Collector;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AssumeWillDropItem;                                // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_CanBeCollected) == 0x000008, "Wrong alignment on Collectable_CanBeCollected");
static_assert(sizeof(Collectable_CanBeCollected) == 0x000010, "Wrong size on Collectable_CanBeCollected");
static_assert(offsetof(Collectable_CanBeCollected, Collector) == 0x000000, "Member 'Collectable_CanBeCollected::Collector' has a wrong offset!");
static_assert(offsetof(Collectable_CanBeCollected, AssumeWillDropItem) == 0x000008, "Member 'Collectable_CanBeCollected::AssumeWillDropItem' has a wrong offset!");
static_assert(offsetof(Collectable_CanBeCollected, ReturnValue) == 0x000009, "Member 'Collectable_CanBeCollected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.CanBeDropped
// 0x0010 (0x0010 - 0x0000)
struct Collectable_CanBeDropped final
{
public:
	const class ADBDPlayer*                       Dropper;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_CanBeDropped) == 0x000008, "Wrong alignment on Collectable_CanBeDropped");
static_assert(sizeof(Collectable_CanBeDropped) == 0x000010, "Wrong size on Collectable_CanBeDropped");
static_assert(offsetof(Collectable_CanBeDropped, Dropper) == 0x000000, "Member 'Collectable_CanBeDropped::Dropper' has a wrong offset!");
static_assert(offsetof(Collectable_CanBeDropped, ReturnValue) == 0x000008, "Member 'Collectable_CanBeDropped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.CanUse
// 0x0010 (0x0010 - 0x0000)
struct Collectable_CanUse final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_CanUse) == 0x000008, "Wrong alignment on Collectable_CanUse");
static_assert(sizeof(Collectable_CanUse) == 0x000010, "Wrong size on Collectable_CanUse");
static_assert(offsetof(Collectable_CanUse, Player) == 0x000000, "Member 'Collectable_CanUse::Player' has a wrong offset!");
static_assert(offsetof(Collectable_CanUse, ReturnValue) == 0x000008, "Member 'Collectable_CanUse::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetCollector
// 0x0008 (0x0008 - 0x0000)
struct Collectable_GetCollector final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetCollector) == 0x000008, "Wrong alignment on Collectable_GetCollector");
static_assert(sizeof(Collectable_GetCollector) == 0x000008, "Wrong size on Collectable_GetCollector");
static_assert(offsetof(Collectable_GetCollector, ReturnValue) == 0x000000, "Member 'Collectable_GetCollector::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetCount
// 0x0004 (0x0004 - 0x0000)
struct Collectable_GetCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetCount) == 0x000004, "Wrong alignment on Collectable_GetCount");
static_assert(sizeof(Collectable_GetCount) == 0x000004, "Wrong size on Collectable_GetCount");
static_assert(offsetof(Collectable_GetCount, ReturnValue) == 0x000000, "Member 'Collectable_GetCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetDisplayedInputType
// 0x0001 (0x0001 - 0x0000)
struct Collectable_GetDisplayedInputType final
{
public:
	EInputInteractionType                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetDisplayedInputType) == 0x000001, "Wrong alignment on Collectable_GetDisplayedInputType");
static_assert(sizeof(Collectable_GetDisplayedInputType) == 0x000001, "Wrong size on Collectable_GetDisplayedInputType");
static_assert(offsetof(Collectable_GetDisplayedInputType, ReturnValue) == 0x000000, "Member 'Collectable_GetDisplayedInputType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetIconFilePath
// 0x0010 (0x0010 - 0x0000)
struct Collectable_GetIconFilePath final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetIconFilePath) == 0x000008, "Wrong alignment on Collectable_GetIconFilePath");
static_assert(sizeof(Collectable_GetIconFilePath) == 0x000010, "Wrong size on Collectable_GetIconFilePath");
static_assert(offsetof(Collectable_GetIconFilePath, ReturnValue) == 0x000000, "Member 'Collectable_GetIconFilePath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetItemIconIndex
// 0x0001 (0x0001 - 0x0000)
struct Collectable_GetItemIconIndex final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetItemIconIndex) == 0x000001, "Wrong alignment on Collectable_GetItemIconIndex");
static_assert(sizeof(Collectable_GetItemIconIndex) == 0x000001, "Wrong size on Collectable_GetItemIconIndex");
static_assert(offsetof(Collectable_GetItemIconIndex, ReturnValue) == 0x000000, "Member 'Collectable_GetItemIconIndex::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetItemInteractor
// 0x0008 (0x0008 - 0x0000)
struct Collectable_GetItemInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetItemInteractor) == 0x000008, "Wrong alignment on Collectable_GetItemInteractor");
static_assert(sizeof(Collectable_GetItemInteractor) == 0x000008, "Wrong size on Collectable_GetItemInteractor");
static_assert(offsetof(Collectable_GetItemInteractor, ReturnValue) == 0x000000, "Member 'Collectable_GetItemInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetModifierMax
// 0x0014 (0x0014 - 0x0000)
struct Collectable_GetModifierMax final
{
public:
	struct FGameplayTag                           ModifierType;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetModifierMax) == 0x000004, "Wrong alignment on Collectable_GetModifierMax");
static_assert(sizeof(Collectable_GetModifierMax) == 0x000014, "Wrong size on Collectable_GetModifierMax");
static_assert(offsetof(Collectable_GetModifierMax, ModifierType) == 0x000000, "Member 'Collectable_GetModifierMax::ModifierType' has a wrong offset!");
static_assert(offsetof(Collectable_GetModifierMax, DefaultValue) == 0x00000C, "Member 'Collectable_GetModifierMax::DefaultValue' has a wrong offset!");
static_assert(offsetof(Collectable_GetModifierMax, ReturnValue) == 0x000010, "Member 'Collectable_GetModifierMax::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetModifierSum
// 0x0014 (0x0014 - 0x0000)
struct Collectable_GetModifierSum final
{
public:
	struct FGameplayTag                           ModifierType;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetModifierSum) == 0x000004, "Wrong alignment on Collectable_GetModifierSum");
static_assert(sizeof(Collectable_GetModifierSum) == 0x000014, "Wrong size on Collectable_GetModifierSum");
static_assert(offsetof(Collectable_GetModifierSum, ModifierType) == 0x000000, "Member 'Collectable_GetModifierSum::ModifierType' has a wrong offset!");
static_assert(offsetof(Collectable_GetModifierSum, DefaultValue) == 0x00000C, "Member 'Collectable_GetModifierSum::DefaultValue' has a wrong offset!");
static_assert(offsetof(Collectable_GetModifierSum, ReturnValue) == 0x000010, "Member 'Collectable_GetModifierSum::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.GetUsePercentLeft
// 0x0004 (0x0004 - 0x0000)
struct Collectable_GetUsePercentLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_GetUsePercentLeft) == 0x000004, "Wrong alignment on Collectable_GetUsePercentLeft");
static_assert(sizeof(Collectable_GetUsePercentLeft) == 0x000004, "Wrong size on Collectable_GetUsePercentLeft");
static_assert(offsetof(Collectable_GetUsePercentLeft, ReturnValue) == 0x000000, "Member 'Collectable_GetUsePercentLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.HasGameplayModifierFlag
// 0x0010 (0x0010 - 0x0000)
struct Collectable_HasGameplayModifierFlag final
{
public:
	struct FGameplayTag                           ModifierFlag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Collectable_HasGameplayModifierFlag) == 0x000004, "Wrong alignment on Collectable_HasGameplayModifierFlag");
static_assert(sizeof(Collectable_HasGameplayModifierFlag) == 0x000010, "Wrong size on Collectable_HasGameplayModifierFlag");
static_assert(offsetof(Collectable_HasGameplayModifierFlag, ModifierFlag) == 0x000000, "Member 'Collectable_HasGameplayModifierFlag::ModifierFlag' has a wrong offset!");
static_assert(offsetof(Collectable_HasGameplayModifierFlag, ReturnValue) == 0x00000C, "Member 'Collectable_HasGameplayModifierFlag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsCollected
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsCollected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsCollected) == 0x000001, "Wrong alignment on Collectable_IsCollected");
static_assert(sizeof(Collectable_IsCollected) == 0x000001, "Wrong size on Collectable_IsCollected");
static_assert(offsetof(Collectable_IsCollected, ReturnValue) == 0x000000, "Member 'Collectable_IsCollected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsCountDisplayForced
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsCountDisplayForced final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsCountDisplayForced) == 0x000001, "Wrong alignment on Collectable_IsCountDisplayForced");
static_assert(sizeof(Collectable_IsCountDisplayForced) == 0x000001, "Wrong size on Collectable_IsCountDisplayForced");
static_assert(offsetof(Collectable_IsCountDisplayForced, ReturnValue) == 0x000000, "Member 'Collectable_IsCountDisplayForced::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsCursedItem
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsCursedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsCursedItem) == 0x000001, "Wrong alignment on Collectable_IsCursedItem");
static_assert(sizeof(Collectable_IsCursedItem) == 0x000001, "Wrong size on Collectable_IsCursedItem");
static_assert(offsetof(Collectable_IsCursedItem, ReturnValue) == 0x000000, "Member 'Collectable_IsCursedItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsEquipped
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsEquipped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsEquipped) == 0x000001, "Wrong alignment on Collectable_IsEquipped");
static_assert(sizeof(Collectable_IsEquipped) == 0x000001, "Wrong size on Collectable_IsEquipped");
static_assert(offsetof(Collectable_IsEquipped, ReturnValue) == 0x000000, "Member 'Collectable_IsEquipped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsInSearchable
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsInSearchable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsInSearchable) == 0x000001, "Wrong alignment on Collectable_IsInSearchable");
static_assert(sizeof(Collectable_IsInSearchable) == 0x000001, "Wrong size on Collectable_IsInSearchable");
static_assert(offsetof(Collectable_IsInSearchable, ReturnValue) == 0x000000, "Member 'Collectable_IsInSearchable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsKeyPromptForceDisabled
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsKeyPromptForceDisabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsKeyPromptForceDisabled) == 0x000001, "Wrong alignment on Collectable_IsKeyPromptForceDisabled");
static_assert(sizeof(Collectable_IsKeyPromptForceDisabled) == 0x000001, "Wrong size on Collectable_IsKeyPromptForceDisabled");
static_assert(offsetof(Collectable_IsKeyPromptForceDisabled, ReturnValue) == 0x000000, "Member 'Collectable_IsKeyPromptForceDisabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsLocallyControlled) == 0x000001, "Wrong alignment on Collectable_IsLocallyControlled");
static_assert(sizeof(Collectable_IsLocallyControlled) == 0x000001, "Wrong size on Collectable_IsLocallyControlled");
static_assert(offsetof(Collectable_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'Collectable_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsOnGround
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsOnGround final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsOnGround) == 0x000001, "Wrong alignment on Collectable_IsOnGround");
static_assert(sizeof(Collectable_IsOnGround) == 0x000001, "Wrong size on Collectable_IsOnGround");
static_assert(offsetof(Collectable_IsOnGround, ReturnValue) == 0x000000, "Member 'Collectable_IsOnGround::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsPickable
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsPickable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsPickable) == 0x000001, "Wrong alignment on Collectable_IsPickable");
static_assert(sizeof(Collectable_IsPickable) == 0x000001, "Wrong size on Collectable_IsPickable");
static_assert(offsetof(Collectable_IsPickable, ReturnValue) == 0x000000, "Member 'Collectable_IsPickable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsRechargeable
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsRechargeable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsRechargeable) == 0x000001, "Wrong alignment on Collectable_IsRechargeable");
static_assert(sizeof(Collectable_IsRechargeable) == 0x000001, "Wrong size on Collectable_IsRechargeable");
static_assert(offsetof(Collectable_IsRechargeable, ReturnValue) == 0x000000, "Member 'Collectable_IsRechargeable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsSpecialItem
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsSpecialItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsSpecialItem) == 0x000001, "Wrong alignment on Collectable_IsSpecialItem");
static_assert(sizeof(Collectable_IsSpecialItem) == 0x000001, "Wrong size on Collectable_IsSpecialItem");
static_assert(offsetof(Collectable_IsSpecialItem, ReturnValue) == 0x000000, "Member 'Collectable_IsSpecialItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Collectable.IsStored
// 0x0001 (0x0001 - 0x0000)
struct Collectable_IsStored final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Collectable_IsStored) == 0x000001, "Wrong alignment on Collectable_IsStored");
static_assert(sizeof(Collectable_IsStored) == 0x000001, "Wrong size on Collectable_IsStored");
static_assert(offsetof(Collectable_IsStored, ReturnValue) == 0x000000, "Member 'Collectable_IsStored::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviour.SetEnable
// 0x0001 (0x0001 - 0x0000)
struct AICharacterBehaviour_SetEnable final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviour_SetEnable) == 0x000001, "Wrong alignment on AICharacterBehaviour_SetEnable");
static_assert(sizeof(AICharacterBehaviour_SetEnable) == 0x000001, "Wrong size on AICharacterBehaviour_SetEnable");
static_assert(offsetof(AICharacterBehaviour_SetEnable, Enable) == 0x000000, "Member 'AICharacterBehaviour_SetEnable::Enable' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviour.Update
// 0x0004 (0x0004 - 0x0000)
struct AICharacterBehaviour_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviour_Update) == 0x000004, "Wrong alignment on AICharacterBehaviour_Update");
static_assert(sizeof(AICharacterBehaviour_Update) == 0x000004, "Wrong size on AICharacterBehaviour_Update");
static_assert(offsetof(AICharacterBehaviour_Update, DeltaTime) == 0x000000, "Member 'AICharacterBehaviour_Update::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviour.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct AICharacterBehaviour_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviour_IsEnabled) == 0x000001, "Wrong alignment on AICharacterBehaviour_IsEnabled");
static_assert(sizeof(AICharacterBehaviour_IsEnabled) == 0x000001, "Wrong size on AICharacterBehaviour_IsEnabled");
static_assert(offsetof(AICharacterBehaviour_IsEnabled, ReturnValue) == 0x000000, "Member 'AICharacterBehaviour_IsEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BasePerkIconStrategy.GetDisplayPercent
// 0x0010 (0x0010 - 0x0000)
struct BasePerkIconStrategy_GetDisplayPercent final
{
public:
	const class UCompetence*                      Competence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePerkIconStrategy_GetDisplayPercent) == 0x000008, "Wrong alignment on BasePerkIconStrategy_GetDisplayPercent");
static_assert(sizeof(BasePerkIconStrategy_GetDisplayPercent) == 0x000010, "Wrong size on BasePerkIconStrategy_GetDisplayPercent");
static_assert(offsetof(BasePerkIconStrategy_GetDisplayPercent, Competence) == 0x000000, "Member 'BasePerkIconStrategy_GetDisplayPercent::Competence' has a wrong offset!");
static_assert(offsetof(BasePerkIconStrategy_GetDisplayPercent, ReturnValue) == 0x000008, "Member 'BasePerkIconStrategy_GetDisplayPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BasePerkIconStrategy.GetIsRechargeable
// 0x0010 (0x0010 - 0x0000)
struct BasePerkIconStrategy_GetIsRechargeable final
{
public:
	const class UCompetence*                      Competence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePerkIconStrategy_GetIsRechargeable) == 0x000008, "Wrong alignment on BasePerkIconStrategy_GetIsRechargeable");
static_assert(sizeof(BasePerkIconStrategy_GetIsRechargeable) == 0x000010, "Wrong size on BasePerkIconStrategy_GetIsRechargeable");
static_assert(offsetof(BasePerkIconStrategy_GetIsRechargeable, Competence) == 0x000000, "Member 'BasePerkIconStrategy_GetIsRechargeable::Competence' has a wrong offset!");
static_assert(offsetof(BasePerkIconStrategy_GetIsRechargeable, ReturnValue) == 0x000008, "Member 'BasePerkIconStrategy_GetIsRechargeable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BasePerkIconStrategy.GetIsRechargeableActive
// 0x0010 (0x0010 - 0x0000)
struct BasePerkIconStrategy_GetIsRechargeableActive final
{
public:
	const class UCompetence*                      Competence;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BasePerkIconStrategy_GetIsRechargeableActive) == 0x000008, "Wrong alignment on BasePerkIconStrategy_GetIsRechargeableActive");
static_assert(sizeof(BasePerkIconStrategy_GetIsRechargeableActive) == 0x000010, "Wrong size on BasePerkIconStrategy_GetIsRechargeableActive");
static_assert(offsetof(BasePerkIconStrategy_GetIsRechargeableActive, Competence) == 0x000000, "Member 'BasePerkIconStrategy_GetIsRechargeableActive::Competence' has a wrong offset!");
static_assert(offsetof(BasePerkIconStrategy_GetIsRechargeableActive, ReturnValue) == 0x000008, "Member 'BasePerkIconStrategy_GetIsRechargeableActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.Authority_AddCharge
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_Authority_AddCharge final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChargeFromItem;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_Authority_AddCharge) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_Authority_AddCharge");
static_assert(sizeof(ChargeableInteractionDefinition_Authority_AddCharge) == 0x000018, "Wrong size on ChargeableInteractionDefinition_Authority_AddCharge");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_AddCharge, DeltaSeconds) == 0x000000, "Member 'ChargeableInteractionDefinition_Authority_AddCharge::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_AddCharge, Character) == 0x000008, "Member 'ChargeableInteractionDefinition_Authority_AddCharge::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_AddCharge, IsChargeFromItem) == 0x000010, "Member 'ChargeableInteractionDefinition_Authority_AddCharge::IsChargeFromItem' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.Authority_ChargeWithItem
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_Authority_ChargeWithItem final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACollectable*                           Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Character;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_Authority_ChargeWithItem) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_Authority_ChargeWithItem");
static_assert(sizeof(ChargeableInteractionDefinition_Authority_ChargeWithItem) == 0x000018, "Wrong size on ChargeableInteractionDefinition_Authority_ChargeWithItem");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_ChargeWithItem, DeltaSeconds) == 0x000000, "Member 'ChargeableInteractionDefinition_Authority_ChargeWithItem::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_ChargeWithItem, Item) == 0x000008, "Member 'ChargeableInteractionDefinition_Authority_ChargeWithItem::Item' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_ChargeWithItem, Character) == 0x000010, "Member 'ChargeableInteractionDefinition_Authority_ChargeWithItem::Character' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.Authority_ResetCharge
// 0x0008 (0x0008 - 0x0000)
struct ChargeableInteractionDefinition_Authority_ResetCharge final
{
public:
	class ADBDPlayer*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_Authority_ResetCharge) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_Authority_ResetCharge");
static_assert(sizeof(ChargeableInteractionDefinition_Authority_ResetCharge) == 0x000008, "Wrong size on ChargeableInteractionDefinition_Authority_ResetCharge");
static_assert(offsetof(ChargeableInteractionDefinition_Authority_ResetCharge, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_Authority_ResetCharge::Character' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnInteractionCompletionStateChanged
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_OnInteractionCompletionStateChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Complete;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnInteractionCompletionStateChanged) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnInteractionCompletionStateChanged");
static_assert(sizeof(ChargeableInteractionDefinition_OnInteractionCompletionStateChanged) == 0x000010, "Wrong size on ChargeableInteractionDefinition_OnInteractionCompletionStateChanged");
static_assert(offsetof(ChargeableInteractionDefinition_OnInteractionCompletionStateChanged, Player) == 0x000000, "Member 'ChargeableInteractionDefinition_OnInteractionCompletionStateChanged::Player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnInteractionCompletionStateChanged, Complete) == 0x000008, "Member 'ChargeableInteractionDefinition_OnInteractionCompletionStateChanged::Complete' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnSkillCheckResponseAesthetic
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic");
static_assert(sizeof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic) == 0x000018, "Wrong size on ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, Success) == 0x000000, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::Success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, Bonus) == 0x000001, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::Bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, Player) == 0x000008, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::Player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, TriggerLoudNoise) == 0x000010, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::TriggerLoudNoise' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, HadInput) == 0x000011, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::HadInput' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic, Type) == 0x000012, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAesthetic::Type' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnSkillCheckResponseAestheticBP
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HadInput;                                          // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP");
static_assert(sizeof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP) == 0x000010, "Wrong size on ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, Player) == 0x000000, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::Player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, Success) == 0x000008, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::Success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, Bonus) == 0x000009, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::Bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, HadInput) == 0x00000A, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::HadInput' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP, Type) == 0x00000B, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAestheticBP::Type' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnSkillCheckResponseAuthority
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_OnSkillCheckResponseAuthority final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnSkillCheckResponseAuthority");
static_assert(sizeof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority) == 0x000018, "Wrong size on ChargeableInteractionDefinition_OnSkillCheckResponseAuthority");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, Success) == 0x000000, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::Success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, Bonus) == 0x000001, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::Bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, Player) == 0x000008, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::Player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, TriggerLoudNoise) == 0x000010, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::TriggerLoudNoise' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, HadInput) == 0x000011, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::HadInput' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthority, Type) == 0x000012, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthority::Type' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.OnSkillCheckResponseAuthorityBP
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HadInput;                                          // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP");
static_assert(sizeof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP) == 0x000010, "Wrong size on ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, Player) == 0x000000, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::Player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, Success) == 0x000008, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::Success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, Bonus) == 0x000009, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::Bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, HadInput) == 0x00000A, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::HadInput' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP, Type) == 0x00000B, "Member 'ChargeableInteractionDefinition_OnSkillCheckResponseAuthorityBP::Type' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.SetChargeableComponent
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_SetChargeableComponent final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNullAllowed;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_SetChargeableComponent) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_SetChargeableComponent");
static_assert(sizeof(ChargeableInteractionDefinition_SetChargeableComponent) == 0x000010, "Wrong size on ChargeableInteractionDefinition_SetChargeableComponent");
static_assert(offsetof(ChargeableInteractionDefinition_SetChargeableComponent, ChargeableComponent) == 0x000000, "Member 'ChargeableInteractionDefinition_SetChargeableComponent::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_SetChargeableComponent, IsNullAllowed) == 0x000008, "Member 'ChargeableInteractionDefinition_SetChargeableComponent::IsNullAllowed' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.SetSecondsToCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_SetSecondsToCharge final
{
public:
	float                                         SecondsToCharge;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_SetSecondsToCharge) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_SetSecondsToCharge");
static_assert(sizeof(ChargeableInteractionDefinition_SetSecondsToCharge) == 0x000004, "Wrong size on ChargeableInteractionDefinition_SetSecondsToCharge");
static_assert(offsetof(ChargeableInteractionDefinition_SetSecondsToCharge, SecondsToCharge) == 0x000000, "Member 'ChargeableInteractionDefinition_SetSecondsToCharge::SecondsToCharge' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.SetSpeedBase
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_SetSpeedBase final
{
public:
	float                                         SpeedBase;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_SetSpeedBase) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_SetSpeedBase");
static_assert(sizeof(ChargeableInteractionDefinition_SetSpeedBase) == 0x000004, "Wrong size on ChargeableInteractionDefinition_SetSpeedBase");
static_assert(offsetof(ChargeableInteractionDefinition_SetSpeedBase, SpeedBase) == 0x000000, "Member 'ChargeableInteractionDefinition_SetSpeedBase::SpeedBase' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.SetTutorialChargeableMultiplier
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_SetTutorialChargeableMultiplier final
{
public:
	float                                         MultiplierValue;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_SetTutorialChargeableMultiplier) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_SetTutorialChargeableMultiplier");
static_assert(sizeof(ChargeableInteractionDefinition_SetTutorialChargeableMultiplier) == 0x000004, "Wrong size on ChargeableInteractionDefinition_SetTutorialChargeableMultiplier");
static_assert(offsetof(ChargeableInteractionDefinition_SetTutorialChargeableMultiplier, MultiplierValue) == 0x000000, "Member 'ChargeableInteractionDefinition_SetTutorialChargeableMultiplier::MultiplierValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetAdditiveChargeTimeReductionAsMultiplier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier");
static_assert(sizeof(ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier");
static_assert(offsetof(ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetAdditiveChargeTimeReductionAsMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetAdditiveLuckBonus
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetAdditiveLuckBonus final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetAdditiveLuckBonus) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetAdditiveLuckBonus");
static_assert(sizeof(ChargeableInteractionDefinition_GetAdditiveLuckBonus) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetAdditiveLuckBonus");
static_assert(offsetof(ChargeableInteractionDefinition_GetAdditiveLuckBonus, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetAdditiveLuckBonus::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetAdditiveLuckBonus, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetAdditiveLuckBonus::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetBonusSkillCheckSuccessPercentReward
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward");
static_assert(sizeof(ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward");
static_assert(offsetof(ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward, Player) == 0x000000, "Member 'ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward::Player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetBonusSkillCheckSuccessPercentReward::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetBonusSkillCheckZoneSizeModifier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier");
static_assert(sizeof(ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier");
static_assert(offsetof(ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetBonusSkillCheckZoneSizeModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetChargeableComponent
// 0x0008 (0x0008 - 0x0000)
struct ChargeableInteractionDefinition_GetChargeableComponent final
{
public:
	class UChargeableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetChargeableComponent) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetChargeableComponent");
static_assert(sizeof(ChargeableInteractionDefinition_GetChargeableComponent) == 0x000008, "Wrong size on ChargeableInteractionDefinition_GetChargeableComponent");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeableComponent, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetChargeableComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetChargeAmountForTime
// 0x0018 (0x0018 - 0x0000)
struct ChargeableInteractionDefinition_GetChargeAmountForTime final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Character;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetChargeAmountForTime) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetChargeAmountForTime");
static_assert(sizeof(ChargeableInteractionDefinition_GetChargeAmountForTime) == 0x000018, "Wrong size on ChargeableInteractionDefinition_GetChargeAmountForTime");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeAmountForTime, DeltaSeconds) == 0x000000, "Member 'ChargeableInteractionDefinition_GetChargeAmountForTime::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeAmountForTime, Character) == 0x000008, "Member 'ChargeableInteractionDefinition_GetChargeAmountForTime::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeAmountForTime, ReturnValue) == 0x000010, "Member 'ChargeableInteractionDefinition_GetChargeAmountForTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetChargeSpeedModifier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetChargeSpeedModifier final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetChargeSpeedModifier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetChargeSpeedModifier");
static_assert(sizeof(ChargeableInteractionDefinition_GetChargeSpeedModifier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetChargeSpeedModifier");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeSpeedModifier, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetChargeSpeedModifier::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetChargeSpeedModifier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetChargeSpeedModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetGoodSkillCheckSuccessPercentReward
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward");
static_assert(sizeof(ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward");
static_assert(offsetof(ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward, Player) == 0x000000, "Member 'ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward::Player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetGoodSkillCheckSuccessPercentReward::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetInteractionChargeSpeedMultiplier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier");
static_assert(sizeof(ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier");
static_assert(offsetof(ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetInteractionChargeSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetItemEfficiencyModifier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetItemEfficiencyModifier final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetItemEfficiencyModifier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetItemEfficiencyModifier");
static_assert(sizeof(ChargeableInteractionDefinition_GetItemEfficiencyModifier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetItemEfficiencyModifier");
static_assert(offsetof(ChargeableInteractionDefinition_GetItemEfficiencyModifier, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetItemEfficiencyModifier::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetItemEfficiencyModifier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetItemEfficiencyModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetMaxCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_GetMaxCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetMaxCharge) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetMaxCharge");
static_assert(sizeof(ChargeableInteractionDefinition_GetMaxCharge) == 0x000004, "Wrong size on ChargeableInteractionDefinition_GetMaxCharge");
static_assert(offsetof(ChargeableInteractionDefinition_GetMaxCharge, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetMaxCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetMultiplicativeLuckBonus
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetMultiplicativeLuckBonus final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetMultiplicativeLuckBonus) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetMultiplicativeLuckBonus");
static_assert(sizeof(ChargeableInteractionDefinition_GetMultiplicativeLuckBonus) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetMultiplicativeLuckBonus");
static_assert(offsetof(ChargeableInteractionDefinition_GetMultiplicativeLuckBonus, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetMultiplicativeLuckBonus::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetMultiplicativeLuckBonus, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetMultiplicativeLuckBonus::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetPerkMultiplier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetPerkMultiplier final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetPerkMultiplier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetPerkMultiplier");
static_assert(sizeof(ChargeableInteractionDefinition_GetPerkMultiplier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetPerkMultiplier");
static_assert(offsetof(ChargeableInteractionDefinition_GetPerkMultiplier, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetPerkMultiplier::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetPerkMultiplier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetPerkMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetPipsPassed
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_GetPipsPassed final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetPipsPassed) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetPipsPassed");
static_assert(sizeof(ChargeableInteractionDefinition_GetPipsPassed) == 0x000004, "Wrong size on ChargeableInteractionDefinition_GetPipsPassed");
static_assert(offsetof(ChargeableInteractionDefinition_GetPipsPassed, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetPipsPassed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckCharge
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckCharge final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckCharge) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckCharge");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckCharge) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckCharge");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, Player) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::Player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, Success) == 0x000008, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::Success' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, Bonus) == 0x000009, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::Bonus' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, Type) == 0x00000A, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::Type' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckCharge, ReturnValue) == 0x00000C, "Member 'ChargeableInteractionDefinition_GetSkillCheckCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckDifficulityModifier
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetSkillCheckDifficulityModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckFailurePercentPenalty
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty, Player) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty::Player' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetSkillCheckFailurePercentPenalty::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckFailureTimePenalty
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty) == 0x000004, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckFailureTimePenalty::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSkillCheckProbability
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_GetSkillCheckProbability final
{
public:
	const class ADBDPlayer*                       InteractingPlayer;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_GetSkillCheckProbability) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_GetSkillCheckProbability");
static_assert(sizeof(ChargeableInteractionDefinition_GetSkillCheckProbability) == 0x000010, "Wrong size on ChargeableInteractionDefinition_GetSkillCheckProbability");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckProbability, InteractingPlayer) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSkillCheckProbability::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetSkillCheckProbability, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_GetSkillCheckProbability::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetSuccessProbability
// 0x0004 (0x0004 - 0x0000)
struct ChargeableInteractionDefinition_GetSuccessProbability final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetSuccessProbability) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetSuccessProbability");
static_assert(sizeof(ChargeableInteractionDefinition_GetSuccessProbability) == 0x000004, "Wrong size on ChargeableInteractionDefinition_GetSuccessProbability");
static_assert(offsetof(ChargeableInteractionDefinition_GetSuccessProbability, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_GetSuccessProbability::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.GetTunableValue
// 0x0014 (0x0014 - 0x0000)
struct ChargeableInteractionDefinition_GetTunableValue final
{
public:
	class FName                                   TunableValueID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_GetTunableValue) == 0x000004, "Wrong alignment on ChargeableInteractionDefinition_GetTunableValue");
static_assert(sizeof(ChargeableInteractionDefinition_GetTunableValue) == 0x000014, "Wrong size on ChargeableInteractionDefinition_GetTunableValue");
static_assert(offsetof(ChargeableInteractionDefinition_GetTunableValue, TunableValueID) == 0x000000, "Member 'ChargeableInteractionDefinition_GetTunableValue::TunableValueID' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetTunableValue, DefaultValue) == 0x00000C, "Member 'ChargeableInteractionDefinition_GetTunableValue::DefaultValue' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_GetTunableValue, ReturnValue) == 0x000010, "Member 'ChargeableInteractionDefinition_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.HasSkillCheckHappened
// 0x0010 (0x0010 - 0x0000)
struct ChargeableInteractionDefinition_HasSkillCheckHappened final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableInteractionDefinition_HasSkillCheckHappened) == 0x000008, "Wrong alignment on ChargeableInteractionDefinition_HasSkillCheckHappened");
static_assert(sizeof(ChargeableInteractionDefinition_HasSkillCheckHappened) == 0x000010, "Wrong size on ChargeableInteractionDefinition_HasSkillCheckHappened");
static_assert(offsetof(ChargeableInteractionDefinition_HasSkillCheckHappened, Character) == 0x000000, "Member 'ChargeableInteractionDefinition_HasSkillCheckHappened::Character' has a wrong offset!");
static_assert(offsetof(ChargeableInteractionDefinition_HasSkillCheckHappened, ReturnValue) == 0x000008, "Member 'ChargeableInteractionDefinition_HasSkillCheckHappened::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.IsChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct ChargeableInteractionDefinition_IsChargeComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_IsChargeComplete) == 0x000001, "Wrong alignment on ChargeableInteractionDefinition_IsChargeComplete");
static_assert(sizeof(ChargeableInteractionDefinition_IsChargeComplete) == 0x000001, "Wrong size on ChargeableInteractionDefinition_IsChargeComplete");
static_assert(offsetof(ChargeableInteractionDefinition_IsChargeComplete, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_IsChargeComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableInteractionDefinition.ShouldShowSpeedProficiencyForMultipleInteractors
// 0x0001 (0x0001 - 0x0000)
struct ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors) == 0x000001, "Wrong alignment on ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors");
static_assert(sizeof(ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors) == 0x000001, "Wrong size on ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors");
static_assert(offsetof(ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors, ReturnValue) == 0x000000, "Member 'ChargeableInteractionDefinition_ShouldShowSpeedProficiencyForMultipleInteractors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHud.RemoveStatusViewOnDestroy
// 0x0008 (0x0008 - 0x0000)
struct DBDHud_RemoveStatusViewOnDestroy final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDHud_RemoveStatusViewOnDestroy) == 0x000008, "Wrong alignment on DBDHud_RemoveStatusViewOnDestroy");
static_assert(sizeof(DBDHud_RemoveStatusViewOnDestroy) == 0x000008, "Wrong size on DBDHud_RemoveStatusViewOnDestroy");
static_assert(offsetof(DBDHud_RemoveStatusViewOnDestroy, Actor) == 0x000000, "Member 'DBDHud_RemoveStatusViewOnDestroy::Actor' has a wrong offset!");

// Function DeadByDaylight.DBDNetworkUtilities.IsOnDedicatedServerNetwork
// 0x0010 (0x0010 - 0x0000)
struct DBDNetworkUtilities_IsOnDedicatedServerNetwork final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDNetworkUtilities_IsOnDedicatedServerNetwork) == 0x000008, "Wrong alignment on DBDNetworkUtilities_IsOnDedicatedServerNetwork");
static_assert(sizeof(DBDNetworkUtilities_IsOnDedicatedServerNetwork) == 0x000010, "Wrong size on DBDNetworkUtilities_IsOnDedicatedServerNetwork");
static_assert(offsetof(DBDNetworkUtilities_IsOnDedicatedServerNetwork, WorldContextObject) == 0x000000, "Member 'DBDNetworkUtilities_IsOnDedicatedServerNetwork::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDNetworkUtilities_IsOnDedicatedServerNetwork, ReturnValue) == 0x000008, "Member 'DBDNetworkUtilities_IsOnDedicatedServerNetwork::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDNetworkUtilities.IsRunningDedicatedServerFlow
// 0x0001 (0x0001 - 0x0000)
struct DBDNetworkUtilities_IsRunningDedicatedServerFlow final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDNetworkUtilities_IsRunningDedicatedServerFlow) == 0x000001, "Wrong alignment on DBDNetworkUtilities_IsRunningDedicatedServerFlow");
static_assert(sizeof(DBDNetworkUtilities_IsRunningDedicatedServerFlow) == 0x000001, "Wrong size on DBDNetworkUtilities_IsRunningDedicatedServerFlow");
static_assert(offsetof(DBDNetworkUtilities_IsRunningDedicatedServerFlow, ReturnValue) == 0x000000, "Member 'DBDNetworkUtilities_IsRunningDedicatedServerFlow::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.AuthoritySetItemCount
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_AuthoritySetItemCount final
{
public:
	int32                                         ItemCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_AuthoritySetItemCount) == 0x000004, "Wrong alignment on ItemModifier_AuthoritySetItemCount");
static_assert(sizeof(ItemModifier_AuthoritySetItemCount) == 0x000004, "Wrong size on ItemModifier_AuthoritySetItemCount");
static_assert(offsetof(ItemModifier_AuthoritySetItemCount, ItemCount) == 0x000000, "Member 'ItemModifier_AuthoritySetItemCount::ItemCount' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.AuthoritySetItemEnergy
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_AuthoritySetItemEnergy final
{
public:
	float                                         Energy;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_AuthoritySetItemEnergy) == 0x000004, "Wrong alignment on ItemModifier_AuthoritySetItemEnergy");
static_assert(sizeof(ItemModifier_AuthoritySetItemEnergy) == 0x000004, "Wrong size on ItemModifier_AuthoritySetItemEnergy");
static_assert(offsetof(ItemModifier_AuthoritySetItemEnergy, Energy) == 0x000000, "Member 'ItemModifier_AuthoritySetItemEnergy::Energy' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.AuthoritySetItemMaxEnergy
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_AuthoritySetItemMaxEnergy final
{
public:
	float                                         Energy;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_AuthoritySetItemMaxEnergy) == 0x000004, "Wrong alignment on ItemModifier_AuthoritySetItemMaxEnergy");
static_assert(sizeof(ItemModifier_AuthoritySetItemMaxEnergy) == 0x000004, "Wrong size on ItemModifier_AuthoritySetItemMaxEnergy");
static_assert(offsetof(ItemModifier_AuthoritySetItemMaxEnergy, Energy) == 0x000000, "Member 'ItemModifier_AuthoritySetItemMaxEnergy::Energy' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.GetBaseItem
// 0x0008 (0x0008 - 0x0000)
struct ItemModifier_GetBaseItem final
{
public:
	class ACollectable*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_GetBaseItem) == 0x000008, "Wrong alignment on ItemModifier_GetBaseItem");
static_assert(sizeof(ItemModifier_GetBaseItem) == 0x000008, "Wrong size on ItemModifier_GetBaseItem");
static_assert(offsetof(ItemModifier_GetBaseItem, ReturnValue) == 0x000000, "Member 'ItemModifier_GetBaseItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.GetItemCount
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_GetItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_GetItemCount) == 0x000004, "Wrong alignment on ItemModifier_GetItemCount");
static_assert(sizeof(ItemModifier_GetItemCount) == 0x000004, "Wrong size on ItemModifier_GetItemCount");
static_assert(offsetof(ItemModifier_GetItemCount, ReturnValue) == 0x000000, "Member 'ItemModifier_GetItemCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.GetItemEnergy
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_GetItemEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_GetItemEnergy) == 0x000004, "Wrong alignment on ItemModifier_GetItemEnergy");
static_assert(sizeof(ItemModifier_GetItemEnergy) == 0x000004, "Wrong size on ItemModifier_GetItemEnergy");
static_assert(offsetof(ItemModifier_GetItemEnergy, ReturnValue) == 0x000000, "Member 'ItemModifier_GetItemEnergy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemModifier.GetItemMaxEnergy
// 0x0004 (0x0004 - 0x0000)
struct ItemModifier_GetItemMaxEnergy final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemModifier_GetItemMaxEnergy) == 0x000004, "Wrong alignment on ItemModifier_GetItemMaxEnergy");
static_assert(sizeof(ItemModifier_GetItemMaxEnergy) == 0x000004, "Wrong size on ItemModifier_GetItemMaxEnergy");
static_assert(offsetof(ItemModifier_GetItemMaxEnergy, ReturnValue) == 0x000000, "Member 'ItemModifier_GetItemMaxEnergy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTagUtilities.ActorHasReplicatedTag
// 0x0018 (0x0018 - 0x0000)
struct DBDTagUtilities_ActorHasReplicatedTag final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTagUtilities_ActorHasReplicatedTag) == 0x000008, "Wrong alignment on DBDTagUtilities_ActorHasReplicatedTag");
static_assert(sizeof(DBDTagUtilities_ActorHasReplicatedTag) == 0x000018, "Wrong size on DBDTagUtilities_ActorHasReplicatedTag");
static_assert(offsetof(DBDTagUtilities_ActorHasReplicatedTag, Actor) == 0x000000, "Member 'DBDTagUtilities_ActorHasReplicatedTag::Actor' has a wrong offset!");
static_assert(offsetof(DBDTagUtilities_ActorHasReplicatedTag, Tag) == 0x000008, "Member 'DBDTagUtilities_ActorHasReplicatedTag::Tag' has a wrong offset!");
static_assert(offsetof(DBDTagUtilities_ActorHasReplicatedTag, ReturnValue) == 0x000014, "Member 'DBDTagUtilities_ActorHasReplicatedTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTagUtilities.GetAllActorsOfClassWithReplicatedTag
// 0x0030 (0x0030 - 0x0000)
struct DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ActorClass;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         OutActors;                                         // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag) == 0x000008, "Wrong alignment on DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag");
static_assert(sizeof(DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag) == 0x000030, "Wrong size on DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag");
static_assert(offsetof(DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag, WorldContextObject) == 0x000000, "Member 'DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag, ActorClass) == 0x000008, "Member 'DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag::ActorClass' has a wrong offset!");
static_assert(offsetof(DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag, Tag) == 0x000010, "Member 'DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag::Tag' has a wrong offset!");
static_assert(offsetof(DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag, OutActors) == 0x000020, "Member 'DBDTagUtilities_GetAllActorsOfClassWithReplicatedTag::OutActors' has a wrong offset!");

// Function DeadByDaylight.DBDTagUtilities.GetAllActorsWithReplicatedTag
// 0x0028 (0x0028 - 0x0000)
struct DBDTagUtilities_GetAllActorsWithReplicatedTag final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         OutActors;                                         // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTagUtilities_GetAllActorsWithReplicatedTag) == 0x000008, "Wrong alignment on DBDTagUtilities_GetAllActorsWithReplicatedTag");
static_assert(sizeof(DBDTagUtilities_GetAllActorsWithReplicatedTag) == 0x000028, "Wrong size on DBDTagUtilities_GetAllActorsWithReplicatedTag");
static_assert(offsetof(DBDTagUtilities_GetAllActorsWithReplicatedTag, WorldContextObject) == 0x000000, "Member 'DBDTagUtilities_GetAllActorsWithReplicatedTag::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDTagUtilities_GetAllActorsWithReplicatedTag, Tag) == 0x000008, "Member 'DBDTagUtilities_GetAllActorsWithReplicatedTag::Tag' has a wrong offset!");
static_assert(offsetof(DBDTagUtilities_GetAllActorsWithReplicatedTag, OutActors) == 0x000018, "Member 'DBDTagUtilities_GetAllActorsWithReplicatedTag::OutActors' has a wrong offset!");

// Function DeadByDaylight.DBDAttackUtilities.GetCurrentAttackSubstateRemainingTime
// 0x0010 (0x0010 - 0x0000)
struct DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime final
{
public:
	const class AActor*                           Attacker;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime) == 0x000008, "Wrong alignment on DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime");
static_assert(sizeof(DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime) == 0x000010, "Wrong size on DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime");
static_assert(offsetof(DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime, Attacker) == 0x000000, "Member 'DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime::Attacker' has a wrong offset!");
static_assert(offsetof(DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime, ReturnValue) == 0x000008, "Member 'DBDAttackUtilities_GetCurrentAttackSubstateRemainingTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAttackUtilities.GetCurrentAttackType
// 0x0010 (0x0010 - 0x0000)
struct DBDAttackUtilities_GetCurrentAttackType final
{
public:
	const class AActor*                           Attacker;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttackUtilities_GetCurrentAttackType) == 0x000008, "Wrong alignment on DBDAttackUtilities_GetCurrentAttackType");
static_assert(sizeof(DBDAttackUtilities_GetCurrentAttackType) == 0x000010, "Wrong size on DBDAttackUtilities_GetCurrentAttackType");
static_assert(offsetof(DBDAttackUtilities_GetCurrentAttackType, Attacker) == 0x000000, "Member 'DBDAttackUtilities_GetCurrentAttackType::Attacker' has a wrong offset!");
static_assert(offsetof(DBDAttackUtilities_GetCurrentAttackType, ReturnValue) == 0x000008, "Member 'DBDAttackUtilities_GetCurrentAttackType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Authority_OnCollectableDropped
// 0x0008 (0x0008 - 0x0000)
struct ItemAddon_Authority_OnCollectableDropped final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Authority_OnCollectableDropped) == 0x000008, "Wrong alignment on ItemAddon_Authority_OnCollectableDropped");
static_assert(sizeof(ItemAddon_Authority_OnCollectableDropped) == 0x000008, "Wrong size on ItemAddon_Authority_OnCollectableDropped");
static_assert(offsetof(ItemAddon_Authority_OnCollectableDropped, Player) == 0x000000, "Member 'ItemAddon_Authority_OnCollectableDropped::Player' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Authority_OnCollectablePickedUp
// 0x0008 (0x0008 - 0x0000)
struct ItemAddon_Authority_OnCollectablePickedUp final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Authority_OnCollectablePickedUp) == 0x000008, "Wrong alignment on ItemAddon_Authority_OnCollectablePickedUp");
static_assert(sizeof(ItemAddon_Authority_OnCollectablePickedUp) == 0x000008, "Wrong size on ItemAddon_Authority_OnCollectablePickedUp");
static_assert(offsetof(ItemAddon_Authority_OnCollectablePickedUp, Player) == 0x000000, "Member 'ItemAddon_Authority_OnCollectablePickedUp::Player' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Authority_SetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_Authority_SetMaxTokenCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Authority_SetMaxTokenCount) == 0x000004, "Wrong alignment on ItemAddon_Authority_SetMaxTokenCount");
static_assert(sizeof(ItemAddon_Authority_SetMaxTokenCount) == 0x000004, "Wrong size on ItemAddon_Authority_SetMaxTokenCount");
static_assert(offsetof(ItemAddon_Authority_SetMaxTokenCount, Value) == 0x000000, "Member 'ItemAddon_Authority_SetMaxTokenCount::Value' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.Authority_SetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_Authority_SetTokenCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_Authority_SetTokenCount) == 0x000004, "Wrong alignment on ItemAddon_Authority_SetTokenCount");
static_assert(sizeof(ItemAddon_Authority_SetTokenCount) == 0x000004, "Wrong size on ItemAddon_Authority_SetTokenCount");
static_assert(offsetof(ItemAddon_Authority_SetTokenCount, Value) == 0x000000, "Member 'ItemAddon_Authority_SetTokenCount::Value' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.OnPostItemAddonsCreation
// 0x0010 (0x0010 - 0x0000)
struct ItemAddon_OnPostItemAddonsCreation final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACollectable*                           Item;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_OnPostItemAddonsCreation) == 0x000008, "Wrong alignment on ItemAddon_OnPostItemAddonsCreation");
static_assert(sizeof(ItemAddon_OnPostItemAddonsCreation) == 0x000010, "Wrong size on ItemAddon_OnPostItemAddonsCreation");
static_assert(offsetof(ItemAddon_OnPostItemAddonsCreation, Player) == 0x000000, "Member 'ItemAddon_OnPostItemAddonsCreation::Player' has a wrong offset!");
static_assert(offsetof(ItemAddon_OnPostItemAddonsCreation, Item) == 0x000008, "Member 'ItemAddon_OnPostItemAddonsCreation::Item' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.OnRep_TokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_OnRep_TokenCount final
{
public:
	int32                                         OldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_OnRep_TokenCount) == 0x000004, "Wrong alignment on ItemAddon_OnRep_TokenCount");
static_assert(sizeof(ItemAddon_OnRep_TokenCount) == 0x000004, "Wrong size on ItemAddon_OnRep_TokenCount");
static_assert(offsetof(ItemAddon_OnRep_TokenCount, OldCount) == 0x000000, "Member 'ItemAddon_OnRep_TokenCount::OldCount' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.GetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_GetMaxTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_GetMaxTokenCount) == 0x000004, "Wrong alignment on ItemAddon_GetMaxTokenCount");
static_assert(sizeof(ItemAddon_GetMaxTokenCount) == 0x000004, "Wrong size on ItemAddon_GetMaxTokenCount");
static_assert(offsetof(ItemAddon_GetMaxTokenCount, ReturnValue) == 0x000000, "Member 'ItemAddon_GetMaxTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.GetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct ItemAddon_GetTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_GetTokenCount) == 0x000004, "Wrong alignment on ItemAddon_GetTokenCount");
static_assert(sizeof(ItemAddon_GetTokenCount) == 0x000004, "Wrong size on ItemAddon_GetTokenCount");
static_assert(offsetof(ItemAddon_GetTokenCount, ReturnValue) == 0x000000, "Member 'ItemAddon_GetTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.IsReadyForSetUp
// 0x0001 (0x0001 - 0x0000)
struct ItemAddon_IsReadyForSetUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_IsReadyForSetUp) == 0x000001, "Wrong alignment on ItemAddon_IsReadyForSetUp");
static_assert(sizeof(ItemAddon_IsReadyForSetUp) == 0x000001, "Wrong size on ItemAddon_IsReadyForSetUp");
static_assert(offsetof(ItemAddon_IsReadyForSetUp, ReturnValue) == 0x000000, "Member 'ItemAddon_IsReadyForSetUp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemAddon.IsSecondaryAction
// 0x0001 (0x0001 - 0x0000)
struct ItemAddon_IsSecondaryAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemAddon_IsSecondaryAction) == 0x000001, "Wrong alignment on ItemAddon_IsSecondaryAction");
static_assert(sizeof(ItemAddon_IsSecondaryAction) == 0x000001, "Wrong size on ItemAddon_IsSecondaryAction");
static_assert(offsetof(ItemAddon_IsSecondaryAction, ReturnValue) == 0x000000, "Member 'ItemAddon_IsSecondaryAction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BaseTrap.SetIsTrapSet
// 0x0001 (0x0001 - 0x0000)
struct BaseTrap_SetIsTrapSet final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTrap_SetIsTrapSet) == 0x000001, "Wrong alignment on BaseTrap_SetIsTrapSet");
static_assert(sizeof(BaseTrap_SetIsTrapSet) == 0x000001, "Wrong size on BaseTrap_SetIsTrapSet");
static_assert(offsetof(BaseTrap_SetIsTrapSet, Value) == 0x000000, "Member 'BaseTrap_SetIsTrapSet::Value' has a wrong offset!");

// Function DeadByDaylight.BaseTrap.IsTrapSet
// 0x0001 (0x0001 - 0x0000)
struct BaseTrap_IsTrapSet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseTrap_IsTrapSet) == 0x000001, "Wrong alignment on BaseTrap_IsTrapSet");
static_assert(sizeof(BaseTrap_IsTrapSet) == 0x000001, "Wrong size on BaseTrap_IsTrapSet");
static_assert(offsetof(BaseTrap_IsTrapSet, ReturnValue) == 0x000000, "Member 'BaseTrap_IsTrapSet::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateMachine.Multicast_SetStateStack
// 0x0010 (0x0010 - 0x0000)
struct StateMachine_Multicast_SetStateStack final
{
public:
	TArray<uint16>                                NetStateIDStack;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachine_Multicast_SetStateStack) == 0x000008, "Wrong alignment on StateMachine_Multicast_SetStateStack");
static_assert(sizeof(StateMachine_Multicast_SetStateStack) == 0x000010, "Wrong size on StateMachine_Multicast_SetStateStack");
static_assert(offsetof(StateMachine_Multicast_SetStateStack, NetStateIDStack) == 0x000000, "Member 'StateMachine_Multicast_SetStateStack::NetStateIDStack' has a wrong offset!");

// Function DeadByDaylight.StateMachine.Server_SetStateStack
// 0x0010 (0x0010 - 0x0000)
struct StateMachine_Server_SetStateStack final
{
public:
	TArray<uint16>                                NetStateIDStack;                                   // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateMachine_Server_SetStateStack) == 0x000008, "Wrong alignment on StateMachine_Server_SetStateStack");
static_assert(sizeof(StateMachine_Server_SetStateStack) == 0x000010, "Wrong size on StateMachine_Server_SetStateStack");
static_assert(offsetof(StateMachine_Server_SetStateStack, NetStateIDStack) == 0x000000, "Member 'StateMachine_Server_SetStateStack::NetStateIDStack' has a wrong offset!");

// DelegateFunction DeadByDaylight.DBDPlayerData.OnItemUseButtonStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerData_OnItemUseButtonStateChanged__DelegateSignature final
{
public:
	bool                                          IsPressed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerData_OnItemUseButtonStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on DBDPlayerData_OnItemUseButtonStateChanged__DelegateSignature");
static_assert(sizeof(DBDPlayerData_OnItemUseButtonStateChanged__DelegateSignature) == 0x000001, "Wrong size on DBDPlayerData_OnItemUseButtonStateChanged__DelegateSignature");
static_assert(offsetof(DBDPlayerData_OnItemUseButtonStateChanged__DelegateSignature, IsPressed) == 0x000000, "Member 'DBDPlayerData_OnItemUseButtonStateChanged__DelegateSignature::IsPressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerData.GetControlRotation
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerData_GetControlRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerData_GetControlRotation) == 0x000008, "Wrong alignment on DBDPlayerData_GetControlRotation");
static_assert(sizeof(DBDPlayerData_GetControlRotation) == 0x000018, "Wrong size on DBDPlayerData_GetControlRotation");
static_assert(offsetof(DBDPlayerData_GetControlRotation, ReturnValue) == 0x000000, "Member 'DBDPlayerData_GetControlRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerData.IsInteractionInputPressed
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayerData_IsInteractionInputPressed final
{
public:
	EInputInteractionType                         InteractionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerData_IsInteractionInputPressed) == 0x000001, "Wrong alignment on DBDPlayerData_IsInteractionInputPressed");
static_assert(sizeof(DBDPlayerData_IsInteractionInputPressed) == 0x000002, "Wrong size on DBDPlayerData_IsInteractionInputPressed");
static_assert(offsetof(DBDPlayerData_IsInteractionInputPressed, InteractionType) == 0x000000, "Member 'DBDPlayerData_IsInteractionInputPressed::InteractionType' has a wrong offset!");
static_assert(offsetof(DBDPlayerData_IsInteractionInputPressed, ReturnValue) == 0x000001, "Member 'DBDPlayerData_IsInteractionInputPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.Authority_SetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Perk_Authority_SetIsUsable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_Authority_SetIsUsable) == 0x000001, "Wrong alignment on Perk_Authority_SetIsUsable");
static_assert(sizeof(Perk_Authority_SetIsUsable) == 0x000001, "Wrong size on Perk_Authority_SetIsUsable");
static_assert(offsetof(Perk_Authority_SetIsUsable, Value) == 0x000000, "Member 'Perk_Authority_SetIsUsable::Value' has a wrong offset!");

// Function DeadByDaylight.Perk.FireActivePerkEvent
// 0x0008 (0x0008 - 0x0000)
struct Perk_FireActivePerkEvent final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChargeCount;                                       // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_FireActivePerkEvent) == 0x000004, "Wrong alignment on Perk_FireActivePerkEvent");
static_assert(sizeof(Perk_FireActivePerkEvent) == 0x000008, "Wrong size on Perk_FireActivePerkEvent");
static_assert(offsetof(Perk_FireActivePerkEvent, Percentage) == 0x000000, "Member 'Perk_FireActivePerkEvent::Percentage' has a wrong offset!");
static_assert(offsetof(Perk_FireActivePerkEvent, ChargeCount) == 0x000004, "Member 'Perk_FireActivePerkEvent::ChargeCount' has a wrong offset!");

// Function DeadByDaylight.Perk.GetGameplayModifierData
// 0x0030 (0x0030 - 0x0000)
struct Perk_GetGameplayModifierData final
{
public:
	struct FGameplayModifierData                  ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetGameplayModifierData) == 0x000008, "Wrong alignment on Perk_GetGameplayModifierData");
static_assert(sizeof(Perk_GetGameplayModifierData) == 0x000030, "Wrong size on Perk_GetGameplayModifierData");
static_assert(offsetof(Perk_GetGameplayModifierData, ReturnValue) == 0x000000, "Member 'Perk_GetGameplayModifierData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.SetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Perk_SetIsUsable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_SetIsUsable) == 0x000001, "Wrong alignment on Perk_SetIsUsable");
static_assert(sizeof(Perk_SetIsUsable) == 0x000001, "Wrong size on Perk_SetIsUsable");
static_assert(offsetof(Perk_SetIsUsable, Value) == 0x000000, "Member 'Perk_SetIsUsable::Value' has a wrong offset!");

// Function DeadByDaylight.Perk.GetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Perk_GetIsUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetIsUsable) == 0x000001, "Wrong alignment on Perk_GetIsUsable");
static_assert(sizeof(Perk_GetIsUsable) == 0x000001, "Wrong size on Perk_GetIsUsable");
static_assert(offsetof(Perk_GetIsUsable, ReturnValue) == 0x000000, "Member 'Perk_GetIsUsable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Perk.GetPerkLevel
// 0x0004 (0x0004 - 0x0000)
struct Perk_GetPerkLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Perk_GetPerkLevel) == 0x000004, "Wrong alignment on Perk_GetPerkLevel");
static_assert(sizeof(Perk_GetPerkLevel) == 0x000004, "Wrong size on Perk_GetPerkLevel");
static_assert(offsetof(Perk_GetPerkLevel, ReturnValue) == 0x000000, "Member 'Perk_GetPerkLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Client_ReceiveAttackSubstateRequestResult
// 0x0003 (0x0003 - 0x0000)
struct DBDAttack_Client_ReceiveAttackSubstateRequestResult final
{
public:
	struct FAttackSubstateRequestResult           Result;                                            // 0x0000(0x0003)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Client_ReceiveAttackSubstateRequestResult) == 0x000001, "Wrong alignment on DBDAttack_Client_ReceiveAttackSubstateRequestResult");
static_assert(sizeof(DBDAttack_Client_ReceiveAttackSubstateRequestResult) == 0x000003, "Wrong size on DBDAttack_Client_ReceiveAttackSubstateRequestResult");
static_assert(offsetof(DBDAttack_Client_ReceiveAttackSubstateRequestResult, Result) == 0x000000, "Member 'DBDAttack_Client_ReceiveAttackSubstateRequestResult::Result' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Client_ReceiveHitResult
// 0x0010 (0x0010 - 0x0000)
struct DBDAttack_Client_ReceiveHitResult final
{
public:
	class ADBDPlayer*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionPredictionKey                   PredictionKey;                                     // 0x000C(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Client_ReceiveHitResult) == 0x000008, "Wrong alignment on DBDAttack_Client_ReceiveHitResult");
static_assert(sizeof(DBDAttack_Client_ReceiveHitResult) == 0x000010, "Wrong size on DBDAttack_Client_ReceiveHitResult");
static_assert(offsetof(DBDAttack_Client_ReceiveHitResult, Target) == 0x000000, "Member 'DBDAttack_Client_ReceiveHitResult::Target' has a wrong offset!");
static_assert(offsetof(DBDAttack_Client_ReceiveHitResult, IsValid) == 0x000008, "Member 'DBDAttack_Client_ReceiveHitResult::IsValid' has a wrong offset!");
static_assert(offsetof(DBDAttack_Client_ReceiveHitResult, PredictionKey) == 0x00000C, "Member 'DBDAttack_Client_ReceiveHitResult::PredictionKey' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Local_OnMovementChanged
// 0x0010 (0x0010 - 0x0000)
struct DBDAttack_Local_OnMovementChanged final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementMode                                 PrevMovementMode;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PreviousCustomMode;                                // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttack_Local_OnMovementChanged) == 0x000008, "Wrong alignment on DBDAttack_Local_OnMovementChanged");
static_assert(sizeof(DBDAttack_Local_OnMovementChanged) == 0x000010, "Wrong size on DBDAttack_Local_OnMovementChanged");
static_assert(offsetof(DBDAttack_Local_OnMovementChanged, Character) == 0x000000, "Member 'DBDAttack_Local_OnMovementChanged::Character' has a wrong offset!");
static_assert(offsetof(DBDAttack_Local_OnMovementChanged, PrevMovementMode) == 0x000008, "Member 'DBDAttack_Local_OnMovementChanged::PrevMovementMode' has a wrong offset!");
static_assert(offsetof(DBDAttack_Local_OnMovementChanged, PreviousCustomMode) == 0x000009, "Member 'DBDAttack_Local_OnMovementChanged::PreviousCustomMode' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Multicast_HitAttackableComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDAttack_Multicast_HitAttackableComponent final
{
public:
	class UAttackableComponent*                   AttackableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Multicast_HitAttackableComponent) == 0x000008, "Wrong alignment on DBDAttack_Multicast_HitAttackableComponent");
static_assert(sizeof(DBDAttack_Multicast_HitAttackableComponent) == 0x000008, "Wrong size on DBDAttack_Multicast_HitAttackableComponent");
static_assert(offsetof(DBDAttack_Multicast_HitAttackableComponent, AttackableComponent) == 0x000000, "Member 'DBDAttack_Multicast_HitAttackableComponent::AttackableComponent' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Multicast_HitTarget
// 0x0010 (0x0010 - 0x0000)
struct DBDAttack_Multicast_HitTarget final
{
public:
	class ADBDPlayer*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitCosmeticOnly;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttack_Multicast_HitTarget) == 0x000008, "Wrong alignment on DBDAttack_Multicast_HitTarget");
static_assert(sizeof(DBDAttack_Multicast_HitTarget) == 0x000010, "Wrong size on DBDAttack_Multicast_HitTarget");
static_assert(offsetof(DBDAttack_Multicast_HitTarget, Target) == 0x000000, "Member 'DBDAttack_Multicast_HitTarget::Target' has a wrong offset!");
static_assert(offsetof(DBDAttack_Multicast_HitTarget, HitCosmeticOnly) == 0x000008, "Member 'DBDAttack_Multicast_HitTarget::HitCosmeticOnly' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Multicast_RequestStateChange
// 0x0001 (0x0001 - 0x0000)
struct DBDAttack_Multicast_RequestStateChange final
{
public:
	EAttackSubstate                               State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Multicast_RequestStateChange) == 0x000001, "Wrong alignment on DBDAttack_Multicast_RequestStateChange");
static_assert(sizeof(DBDAttack_Multicast_RequestStateChange) == 0x000001, "Wrong size on DBDAttack_Multicast_RequestStateChange");
static_assert(offsetof(DBDAttack_Multicast_RequestStateChange, State) == 0x000000, "Member 'DBDAttack_Multicast_RequestStateChange::State' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Multicast_SendPostHitTargetData
// 0x0018 (0x0018 - 0x0000)
struct DBDAttack_Multicast_SendPostHitTargetData final
{
public:
	class ADBDPlayer*                             OwningKiller;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPostAttackData                        AttackData;                                        // 0x0010(0x0007)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAttack_Multicast_SendPostHitTargetData) == 0x000008, "Wrong alignment on DBDAttack_Multicast_SendPostHitTargetData");
static_assert(sizeof(DBDAttack_Multicast_SendPostHitTargetData) == 0x000018, "Wrong size on DBDAttack_Multicast_SendPostHitTargetData");
static_assert(offsetof(DBDAttack_Multicast_SendPostHitTargetData, OwningKiller) == 0x000000, "Member 'DBDAttack_Multicast_SendPostHitTargetData::OwningKiller' has a wrong offset!");
static_assert(offsetof(DBDAttack_Multicast_SendPostHitTargetData, Target) == 0x000008, "Member 'DBDAttack_Multicast_SendPostHitTargetData::Target' has a wrong offset!");
static_assert(offsetof(DBDAttack_Multicast_SendPostHitTargetData, AttackData) == 0x000010, "Member 'DBDAttack_Multicast_SendPostHitTargetData::AttackData' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Server_HitDestroyableActorAttackableComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDAttack_Server_HitDestroyableActorAttackableComponent final
{
public:
	class UAttackableComponent*                   AttackableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Server_HitDestroyableActorAttackableComponent) == 0x000008, "Wrong alignment on DBDAttack_Server_HitDestroyableActorAttackableComponent");
static_assert(sizeof(DBDAttack_Server_HitDestroyableActorAttackableComponent) == 0x000008, "Wrong size on DBDAttack_Server_HitDestroyableActorAttackableComponent");
static_assert(offsetof(DBDAttack_Server_HitDestroyableActorAttackableComponent, AttackableComponent) == 0x000000, "Member 'DBDAttack_Server_HitDestroyableActorAttackableComponent::AttackableComponent' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Server_HitTarget
// 0x0010 (0x0010 - 0x0000)
struct DBDAttack_Server_HitTarget final
{
public:
	class ADBDPlayer*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetLocationTimestamp;                           // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionPredictionKey                   PredictionKey;                                     // 0x000C(0x0004)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Server_HitTarget) == 0x000008, "Wrong alignment on DBDAttack_Server_HitTarget");
static_assert(sizeof(DBDAttack_Server_HitTarget) == 0x000010, "Wrong size on DBDAttack_Server_HitTarget");
static_assert(offsetof(DBDAttack_Server_HitTarget, Target) == 0x000000, "Member 'DBDAttack_Server_HitTarget::Target' has a wrong offset!");
static_assert(offsetof(DBDAttack_Server_HitTarget, TargetLocationTimestamp) == 0x000008, "Member 'DBDAttack_Server_HitTarget::TargetLocationTimestamp' has a wrong offset!");
static_assert(offsetof(DBDAttack_Server_HitTarget, PredictionKey) == 0x00000C, "Member 'DBDAttack_Server_HitTarget::PredictionKey' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.Server_RequestStateChange
// 0x0001 (0x0001 - 0x0000)
struct DBDAttack_Server_RequestStateChange final
{
public:
	EAttackSubstate                               State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_Server_RequestStateChange) == 0x000001, "Wrong alignment on DBDAttack_Server_RequestStateChange");
static_assert(sizeof(DBDAttack_Server_RequestStateChange) == 0x000001, "Wrong size on DBDAttack_Server_RequestStateChange");
static_assert(offsetof(DBDAttack_Server_RequestStateChange, State) == 0x000000, "Member 'DBDAttack_Server_RequestStateChange::State' has a wrong offset!");

// Function DeadByDaylight.DBDAttack.GetAttackSubstate
// 0x0010 (0x0010 - 0x0000)
struct DBDAttack_GetAttackSubstate final
{
public:
	EAttackSubstate                               State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDAttackSubstate*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttack_GetAttackSubstate) == 0x000008, "Wrong alignment on DBDAttack_GetAttackSubstate");
static_assert(sizeof(DBDAttack_GetAttackSubstate) == 0x000010, "Wrong size on DBDAttack_GetAttackSubstate");
static_assert(offsetof(DBDAttack_GetAttackSubstate, State) == 0x000000, "Member 'DBDAttack_GetAttackSubstate::State' has a wrong offset!");
static_assert(offsetof(DBDAttack_GetAttackSubstate, ReturnValue) == 0x000008, "Member 'DBDAttack_GetAttackSubstate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetFadeIntensity
// 0x0004 (0x0004 - 0x0000)
struct DBDOutlineComponent_SetFadeIntensity final
{
public:
	float                                         FadeIntensity;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetFadeIntensity) == 0x000004, "Wrong alignment on DBDOutlineComponent_SetFadeIntensity");
static_assert(sizeof(DBDOutlineComponent_SetFadeIntensity) == 0x000004, "Wrong size on DBDOutlineComponent_SetFadeIntensity");
static_assert(offsetof(DBDOutlineComponent_SetFadeIntensity, FadeIntensity) == 0x000000, "Member 'DBDOutlineComponent_SetFadeIntensity::FadeIntensity' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetFadeTexture
// 0x0008 (0x0008 - 0x0000)
struct DBDOutlineComponent_SetFadeTexture final
{
public:
	class UTexture*                               InFadeTexture;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetFadeTexture) == 0x000008, "Wrong alignment on DBDOutlineComponent_SetFadeTexture");
static_assert(sizeof(DBDOutlineComponent_SetFadeTexture) == 0x000008, "Wrong size on DBDOutlineComponent_SetFadeTexture");
static_assert(offsetof(DBDOutlineComponent_SetFadeTexture, InFadeTexture) == 0x000000, "Member 'DBDOutlineComponent_SetFadeTexture::InFadeTexture' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetIsOccludingOutlines
// 0x0001 (0x0001 - 0x0000)
struct DBDOutlineComponent_SetIsOccludingOutlines final
{
public:
	bool                                          IsOccluding;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetIsOccludingOutlines) == 0x000001, "Wrong alignment on DBDOutlineComponent_SetIsOccludingOutlines");
static_assert(sizeof(DBDOutlineComponent_SetIsOccludingOutlines) == 0x000001, "Wrong size on DBDOutlineComponent_SetIsOccludingOutlines");
static_assert(offsetof(DBDOutlineComponent_SetIsOccludingOutlines, IsOccluding) == 0x000000, "Member 'DBDOutlineComponent_SetIsOccludingOutlines::IsOccluding' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetMaterialCopyTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDOutlineComponent_SetMaterialCopyTarget final
{
public:
	class UMaterialInterface*                     InMaterialToCopy;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetMaterialCopyTarget) == 0x000008, "Wrong alignment on DBDOutlineComponent_SetMaterialCopyTarget");
static_assert(sizeof(DBDOutlineComponent_SetMaterialCopyTarget) == 0x000008, "Wrong size on DBDOutlineComponent_SetMaterialCopyTarget");
static_assert(offsetof(DBDOutlineComponent_SetMaterialCopyTarget, InMaterialToCopy) == 0x000000, "Member 'DBDOutlineComponent_SetMaterialCopyTarget::InMaterialToCopy' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetMinimumOutlineDistance
// 0x0008 (0x0008 - 0x0000)
struct DBDOutlineComponent_SetMinimumOutlineDistance final
{
public:
	float                                         DistanceWhenIsAlwaysVisible;                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetMinimumOutlineDistance) == 0x000004, "Wrong alignment on DBDOutlineComponent_SetMinimumOutlineDistance");
static_assert(sizeof(DBDOutlineComponent_SetMinimumOutlineDistance) == 0x000008, "Wrong size on DBDOutlineComponent_SetMinimumOutlineDistance");
static_assert(offsetof(DBDOutlineComponent_SetMinimumOutlineDistance, DistanceWhenIsAlwaysVisible) == 0x000000, "Member 'DBDOutlineComponent_SetMinimumOutlineDistance::DistanceWhenIsAlwaysVisible' has a wrong offset!");
static_assert(offsetof(DBDOutlineComponent_SetMinimumOutlineDistance, Distance) == 0x000004, "Member 'DBDOutlineComponent_SetMinimumOutlineDistance::Distance' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetOutlineIntensity
// 0x0004 (0x0004 - 0x0000)
struct DBDOutlineComponent_SetOutlineIntensity final
{
public:
	float                                         OutlineIntensity;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetOutlineIntensity) == 0x000004, "Wrong alignment on DBDOutlineComponent_SetOutlineIntensity");
static_assert(sizeof(DBDOutlineComponent_SetOutlineIntensity) == 0x000004, "Wrong size on DBDOutlineComponent_SetOutlineIntensity");
static_assert(offsetof(DBDOutlineComponent_SetOutlineIntensity, OutlineIntensity) == 0x000000, "Member 'DBDOutlineComponent_SetOutlineIntensity::OutlineIntensity' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetOutlineMaterialOverride
// 0x000C (0x000C - 0x0000)
struct DBDOutlineComponent_SetOutlineMaterialOverride final
{
public:
	struct FGameplayTag                           OverrideName;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetOutlineMaterialOverride) == 0x000004, "Wrong alignment on DBDOutlineComponent_SetOutlineMaterialOverride");
static_assert(sizeof(DBDOutlineComponent_SetOutlineMaterialOverride) == 0x00000C, "Wrong size on DBDOutlineComponent_SetOutlineMaterialOverride");
static_assert(offsetof(DBDOutlineComponent_SetOutlineMaterialOverride, OverrideName) == 0x000000, "Member 'DBDOutlineComponent_SetOutlineMaterialOverride::OverrideName' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.SetTargetColor
// 0x0010 (0x0010 - 0x0000)
struct DBDOutlineComponent_SetTargetColor final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_SetTargetColor) == 0x000004, "Wrong alignment on DBDOutlineComponent_SetTargetColor");
static_assert(sizeof(DBDOutlineComponent_SetTargetColor) == 0x000010, "Wrong size on DBDOutlineComponent_SetTargetColor");
static_assert(offsetof(DBDOutlineComponent_SetTargetColor, Color) == 0x000000, "Member 'DBDOutlineComponent_SetTargetColor::Color' has a wrong offset!");

// Function DeadByDaylight.DBDOutlineComponent.GetTargetColor
// 0x0010 (0x0010 - 0x0000)
struct DBDOutlineComponent_GetTargetColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDOutlineComponent_GetTargetColor) == 0x000004, "Wrong alignment on DBDOutlineComponent_GetTargetColor");
static_assert(sizeof(DBDOutlineComponent_GetTargetColor) == 0x000010, "Wrong size on DBDOutlineComponent_GetTargetColor");
static_assert(offsetof(DBDOutlineComponent_GetTargetColor, ReturnValue) == 0x000000, "Member 'DBDOutlineComponent_GetTargetColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper.ApplyOpacity
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_ApplyOpacity final
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_ApplyOpacity) == 0x000004, "Wrong alignment on CustomWidgetWrapper_ApplyOpacity");
static_assert(sizeof(CustomWidgetWrapper_ApplyOpacity) == 0x000004, "Wrong size on CustomWidgetWrapper_ApplyOpacity");
static_assert(offsetof(CustomWidgetWrapper_ApplyOpacity, Opacity) == 0x000000, "Member 'CustomWidgetWrapper_ApplyOpacity::Opacity' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper.ApplyScale
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_ApplyScale final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_ApplyScale) == 0x000004, "Wrong alignment on CustomWidgetWrapper_ApplyScale");
static_assert(sizeof(CustomWidgetWrapper_ApplyScale) == 0x000004, "Wrong size on CustomWidgetWrapper_ApplyScale");
static_assert(offsetof(CustomWidgetWrapper_ApplyScale, Scale) == 0x000000, "Member 'CustomWidgetWrapper_ApplyScale::Scale' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper.ApplyVersion
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_ApplyVersion final
{
public:
	int32                                         Version;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_ApplyVersion) == 0x000004, "Wrong alignment on CustomWidgetWrapper_ApplyVersion");
static_assert(sizeof(CustomWidgetWrapper_ApplyVersion) == 0x000004, "Wrong size on CustomWidgetWrapper_ApplyVersion");
static_assert(offsetof(CustomWidgetWrapper_ApplyVersion, Version) == 0x000000, "Member 'CustomWidgetWrapper_ApplyVersion::Version' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.AddToTranslation
// 0x0010 (0x0010 - 0x0000)
struct CustomWidgetWrapper_HudEditor_AddToTranslation final
{
public:
	struct FVector2D                              Translation;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_AddToTranslation) == 0x000008, "Wrong alignment on CustomWidgetWrapper_HudEditor_AddToTranslation");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_AddToTranslation) == 0x000010, "Wrong size on CustomWidgetWrapper_HudEditor_AddToTranslation");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_AddToTranslation, Translation) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_AddToTranslation::Translation' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.ApplyScaleWithOverlappingWrappers
// 0x0028 (0x0028 - 0x0000)
struct CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                Widget;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCustomWidgetWrapper_HudEditor*> AllEditableWrappers;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          NeedDetectOverlapping;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers) == 0x000008, "Wrong alignment on CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers) == 0x000028, "Wrong size on CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers, Scale) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers::Scale' has a wrong offset!");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers, Widget) == 0x000008, "Member 'CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers::Widget' has a wrong offset!");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers, AllEditableWrappers) == 0x000010, "Member 'CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers::AllEditableWrappers' has a wrong offset!");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers, NeedDetectOverlapping) == 0x000020, "Member 'CustomWidgetWrapper_HudEditor_ApplyScaleWithOverlappingWrappers::NeedDetectOverlapping' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.CanEditOpacity
// 0x0001 (0x0001 - 0x0000)
struct CustomWidgetWrapper_HudEditor_CanEditOpacity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_CanEditOpacity) == 0x000001, "Wrong alignment on CustomWidgetWrapper_HudEditor_CanEditOpacity");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_CanEditOpacity) == 0x000001, "Wrong size on CustomWidgetWrapper_HudEditor_CanEditOpacity");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_CanEditOpacity, ReturnValue) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_CanEditOpacity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.CanEditScale
// 0x0001 (0x0001 - 0x0000)
struct CustomWidgetWrapper_HudEditor_CanEditScale final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_CanEditScale) == 0x000001, "Wrong alignment on CustomWidgetWrapper_HudEditor_CanEditScale");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_CanEditScale) == 0x000001, "Wrong size on CustomWidgetWrapper_HudEditor_CanEditScale");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_CanEditScale, ReturnValue) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_CanEditScale::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.GetOpacity
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_HudEditor_GetOpacity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_GetOpacity) == 0x000004, "Wrong alignment on CustomWidgetWrapper_HudEditor_GetOpacity");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_GetOpacity) == 0x000004, "Wrong size on CustomWidgetWrapper_HudEditor_GetOpacity");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_GetOpacity, ReturnValue) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_GetOpacity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomWidgetWrapper_HudEditor.GetScale
// 0x0004 (0x0004 - 0x0000)
struct CustomWidgetWrapper_HudEditor_GetScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomWidgetWrapper_HudEditor_GetScale) == 0x000004, "Wrong alignment on CustomWidgetWrapper_HudEditor_GetScale");
static_assert(sizeof(CustomWidgetWrapper_HudEditor_GetScale) == 0x000004, "Wrong size on CustomWidgetWrapper_HudEditor_GetScale");
static_assert(offsetof(CustomWidgetWrapper_HudEditor_GetScale, ReturnValue) == 0x000000, "Member 'CustomWidgetWrapper_HudEditor_GetScale::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.DBD_SwapCosmetics
// 0x000C (0x000C - 0x0000)
struct DBDBasePlayer_DBD_SwapCosmetics final
{
public:
	class FName                                   CosmeticId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_DBD_SwapCosmetics) == 0x000004, "Wrong alignment on DBDBasePlayer_DBD_SwapCosmetics");
static_assert(sizeof(DBDBasePlayer_DBD_SwapCosmetics) == 0x00000C, "Wrong size on DBDBasePlayer_DBD_SwapCosmetics");
static_assert(offsetof(DBDBasePlayer_DBD_SwapCosmetics, CosmeticId) == 0x000000, "Member 'DBDBasePlayer_DBD_SwapCosmetics::CosmeticId' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.Multicast_SwapCosmetics
// 0x000C (0x000C - 0x0000)
struct DBDBasePlayer_Multicast_SwapCosmetics final
{
public:
	class FName                                   CosmeticId;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_Multicast_SwapCosmetics) == 0x000004, "Wrong alignment on DBDBasePlayer_Multicast_SwapCosmetics");
static_assert(sizeof(DBDBasePlayer_Multicast_SwapCosmetics) == 0x00000C, "Wrong size on DBDBasePlayer_Multicast_SwapCosmetics");
static_assert(offsetof(DBDBasePlayer_Multicast_SwapCosmetics, CosmeticId) == 0x000000, "Member 'DBDBasePlayer_Multicast_SwapCosmetics::CosmeticId' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.OnCurrentMontageBlendingOut
// 0x0010 (0x0010 - 0x0000)
struct DBDBasePlayer_OnCurrentMontageBlendingOut final
{
public:
	class UAnimMontage*                           MontageAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDBasePlayer_OnCurrentMontageBlendingOut) == 0x000008, "Wrong alignment on DBDBasePlayer_OnCurrentMontageBlendingOut");
static_assert(sizeof(DBDBasePlayer_OnCurrentMontageBlendingOut) == 0x000010, "Wrong size on DBDBasePlayer_OnCurrentMontageBlendingOut");
static_assert(offsetof(DBDBasePlayer_OnCurrentMontageBlendingOut, MontageAsset) == 0x000000, "Member 'DBDBasePlayer_OnCurrentMontageBlendingOut::MontageAsset' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_OnCurrentMontageBlendingOut, Interrupted) == 0x000008, "Member 'DBDBasePlayer_OnCurrentMontageBlendingOut::Interrupted' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.OnCurrentMontageComplete
// 0x0010 (0x0010 - 0x0000)
struct DBDBasePlayer_OnCurrentMontageComplete final
{
public:
	class UAnimMontage*                           MontageAsset;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDBasePlayer_OnCurrentMontageComplete) == 0x000008, "Wrong alignment on DBDBasePlayer_OnCurrentMontageComplete");
static_assert(sizeof(DBDBasePlayer_OnCurrentMontageComplete) == 0x000010, "Wrong size on DBDBasePlayer_OnCurrentMontageComplete");
static_assert(offsetof(DBDBasePlayer_OnCurrentMontageComplete, MontageAsset) == 0x000000, "Member 'DBDBasePlayer_OnCurrentMontageComplete::MontageAsset' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_OnCurrentMontageComplete, Interrupted) == 0x000008, "Member 'DBDBasePlayer_OnCurrentMontageComplete::Interrupted' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.PlayMontage
// 0x0030 (0x0030 - 0x0000)
struct DBDBasePlayer_PlayMontage final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFollower;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_PlayMontage) == 0x000008, "Wrong alignment on DBDBasePlayer_PlayMontage");
static_assert(sizeof(DBDBasePlayer_PlayMontage) == 0x000030, "Wrong size on DBDBasePlayer_PlayMontage");
static_assert(offsetof(DBDBasePlayer_PlayMontage, AnimMontageID) == 0x000000, "Member 'DBDBasePlayer_PlayMontage::AnimMontageID' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_PlayMontage, PlayRate) == 0x000020, "Member 'DBDBasePlayer_PlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_PlayMontage, IsFollower) == 0x000024, "Member 'DBDBasePlayer_PlayMontage::IsFollower' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_PlayMontage, ReturnValue) == 0x000028, "Member 'DBDBasePlayer_PlayMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.TeleportWithClothHandling
// 0x0038 (0x0038 - 0x0000)
struct DBDBasePlayer_TeleportWithClothHandling final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CheckCollisions;                                   // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0031(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDBasePlayer_TeleportWithClothHandling) == 0x000008, "Wrong alignment on DBDBasePlayer_TeleportWithClothHandling");
static_assert(sizeof(DBDBasePlayer_TeleportWithClothHandling) == 0x000038, "Wrong size on DBDBasePlayer_TeleportWithClothHandling");
static_assert(offsetof(DBDBasePlayer_TeleportWithClothHandling, Location) == 0x000000, "Member 'DBDBasePlayer_TeleportWithClothHandling::Location' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_TeleportWithClothHandling, Rotation) == 0x000018, "Member 'DBDBasePlayer_TeleportWithClothHandling::Rotation' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_TeleportWithClothHandling, CheckCollisions) == 0x000030, "Member 'DBDBasePlayer_TeleportWithClothHandling::CheckCollisions' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_TeleportWithClothHandling, ReturnValue) == 0x000031, "Member 'DBDBasePlayer_TeleportWithClothHandling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct DBDBasePlayer_GetAnimInstance final
{
public:
	class UAnimInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetAnimInstance) == 0x000008, "Wrong alignment on DBDBasePlayer_GetAnimInstance");
static_assert(sizeof(DBDBasePlayer_GetAnimInstance) == 0x000008, "Wrong size on DBDBasePlayer_GetAnimInstance");
static_assert(offsetof(DBDBasePlayer_GetAnimInstance, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetAnimTags
// 0x0010 (0x0010 - 0x0000)
struct DBDBasePlayer_GetAnimTags final
{
public:
	TArray<class FName>                           OutTags;                                           // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetAnimTags) == 0x000008, "Wrong alignment on DBDBasePlayer_GetAnimTags");
static_assert(sizeof(DBDBasePlayer_GetAnimTags) == 0x000010, "Wrong size on DBDBasePlayer_GetAnimTags");
static_assert(offsetof(DBDBasePlayer_GetAnimTags, OutTags) == 0x000000, "Member 'DBDBasePlayer_GetAnimTags::OutTags' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDBasePlayer_GetAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetAudioComponent) == 0x000008, "Wrong alignment on DBDBasePlayer_GetAudioComponent");
static_assert(sizeof(DBDBasePlayer_GetAudioComponent) == 0x000008, "Wrong size on DBDBasePlayer_GetAudioComponent");
static_assert(offsetof(DBDBasePlayer_GetAudioComponent, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetCharacterIndex
// 0x0004 (0x0004 - 0x0000)
struct DBDBasePlayer_GetCharacterIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetCharacterIndex) == 0x000004, "Wrong alignment on DBDBasePlayer_GetCharacterIndex");
static_assert(sizeof(DBDBasePlayer_GetCharacterIndex) == 0x000004, "Wrong size on DBDBasePlayer_GetCharacterIndex");
static_assert(offsetof(DBDBasePlayer_GetCharacterIndex, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetCharacterIndex::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetCharacterName
// 0x000C (0x000C - 0x0000)
struct DBDBasePlayer_GetCharacterName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetCharacterName) == 0x000004, "Wrong alignment on DBDBasePlayer_GetCharacterName");
static_assert(sizeof(DBDBasePlayer_GetCharacterName) == 0x00000C, "Wrong size on DBDBasePlayer_GetCharacterName");
static_assert(offsetof(DBDBasePlayer_GetCharacterName, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetCharacterName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetCustomizedAudio
// 0x0008 (0x0008 - 0x0000)
struct DBDBasePlayer_GetCustomizedAudio final
{
public:
	class UCustomizedAudioComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetCustomizedAudio) == 0x000008, "Wrong alignment on DBDBasePlayer_GetCustomizedAudio");
static_assert(sizeof(DBDBasePlayer_GetCustomizedAudio) == 0x000008, "Wrong size on DBDBasePlayer_GetCustomizedAudio");
static_assert(offsetof(DBDBasePlayer_GetCustomizedAudio, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetCustomizedAudio::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetCustomizedSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct DBDBasePlayer_GetCustomizedSkeletalMesh final
{
public:
	class UCustomizedSkeletalMesh*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetCustomizedSkeletalMesh) == 0x000008, "Wrong alignment on DBDBasePlayer_GetCustomizedSkeletalMesh");
static_assert(sizeof(DBDBasePlayer_GetCustomizedSkeletalMesh) == 0x000008, "Wrong size on DBDBasePlayer_GetCustomizedSkeletalMesh");
static_assert(offsetof(DBDBasePlayer_GetCustomizedSkeletalMesh, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetCustomizedSkeletalMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetLeftFootAudioSurfaceName
// 0x0010 (0x0010 - 0x0000)
struct DBDBasePlayer_GetLeftFootAudioSurfaceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetLeftFootAudioSurfaceName) == 0x000008, "Wrong alignment on DBDBasePlayer_GetLeftFootAudioSurfaceName");
static_assert(sizeof(DBDBasePlayer_GetLeftFootAudioSurfaceName) == 0x000010, "Wrong size on DBDBasePlayer_GetLeftFootAudioSurfaceName");
static_assert(offsetof(DBDBasePlayer_GetLeftFootAudioSurfaceName, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetLeftFootAudioSurfaceName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetLeftFootSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct DBDBasePlayer_GetLeftFootSurfaceType final
{
public:
	EPhysicalSurface                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetLeftFootSurfaceType) == 0x000001, "Wrong alignment on DBDBasePlayer_GetLeftFootSurfaceType");
static_assert(sizeof(DBDBasePlayer_GetLeftFootSurfaceType) == 0x000001, "Wrong size on DBDBasePlayer_GetLeftFootSurfaceType");
static_assert(offsetof(DBDBasePlayer_GetLeftFootSurfaceType, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetLeftFootSurfaceType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetLeftFrontFootAudioSurfaceName
// 0x0010 (0x0010 - 0x0000)
struct DBDBasePlayer_GetLeftFrontFootAudioSurfaceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetLeftFrontFootAudioSurfaceName) == 0x000008, "Wrong alignment on DBDBasePlayer_GetLeftFrontFootAudioSurfaceName");
static_assert(sizeof(DBDBasePlayer_GetLeftFrontFootAudioSurfaceName) == 0x000010, "Wrong size on DBDBasePlayer_GetLeftFrontFootAudioSurfaceName");
static_assert(offsetof(DBDBasePlayer_GetLeftFrontFootAudioSurfaceName, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetLeftFrontFootAudioSurfaceName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetLeftFrontFootSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct DBDBasePlayer_GetLeftFrontFootSurfaceType final
{
public:
	EPhysicalSurface                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetLeftFrontFootSurfaceType) == 0x000001, "Wrong alignment on DBDBasePlayer_GetLeftFrontFootSurfaceType");
static_assert(sizeof(DBDBasePlayer_GetLeftFrontFootSurfaceType) == 0x000001, "Wrong size on DBDBasePlayer_GetLeftFrontFootSurfaceType");
static_assert(offsetof(DBDBasePlayer_GetLeftFrontFootSurfaceType, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetLeftFrontFootSurfaceType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetMontage
// 0x0028 (0x0028 - 0x0000)
struct DBDBasePlayer_GetMontage final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	class UAnimMontage*                           ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetMontage) == 0x000008, "Wrong alignment on DBDBasePlayer_GetMontage");
static_assert(sizeof(DBDBasePlayer_GetMontage) == 0x000028, "Wrong size on DBDBasePlayer_GetMontage");
static_assert(offsetof(DBDBasePlayer_GetMontage, AnimMontageID) == 0x000000, "Member 'DBDBasePlayer_GetMontage::AnimMontageID' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_GetMontage, ReturnValue) == 0x000020, "Member 'DBDBasePlayer_GetMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetMontageLength
// 0x0028 (0x0028 - 0x0000)
struct DBDBasePlayer_GetMontageLength final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDBasePlayer_GetMontageLength) == 0x000008, "Wrong alignment on DBDBasePlayer_GetMontageLength");
static_assert(sizeof(DBDBasePlayer_GetMontageLength) == 0x000028, "Wrong size on DBDBasePlayer_GetMontageLength");
static_assert(offsetof(DBDBasePlayer_GetMontageLength, AnimMontageID) == 0x000000, "Member 'DBDBasePlayer_GetMontageLength::AnimMontageID' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_GetMontageLength, ReturnValue) == 0x000020, "Member 'DBDBasePlayer_GetMontageLength::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetMontagePlaybackDefinition
// 0x0050 (0x0050 - 0x0000)
struct DBDBasePlayer_GetMontagePlaybackDefinition final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFollower;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             ReturnValue;                                       // 0x0028(0x0028)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetMontagePlaybackDefinition) == 0x000008, "Wrong alignment on DBDBasePlayer_GetMontagePlaybackDefinition");
static_assert(sizeof(DBDBasePlayer_GetMontagePlaybackDefinition) == 0x000050, "Wrong size on DBDBasePlayer_GetMontagePlaybackDefinition");
static_assert(offsetof(DBDBasePlayer_GetMontagePlaybackDefinition, AnimMontageID) == 0x000000, "Member 'DBDBasePlayer_GetMontagePlaybackDefinition::AnimMontageID' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_GetMontagePlaybackDefinition, PlayRate) == 0x000020, "Member 'DBDBasePlayer_GetMontagePlaybackDefinition::PlayRate' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_GetMontagePlaybackDefinition, IsFollower) == 0x000024, "Member 'DBDBasePlayer_GetMontagePlaybackDefinition::IsFollower' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_GetMontagePlaybackDefinition, ReturnValue) == 0x000028, "Member 'DBDBasePlayer_GetMontagePlaybackDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetMontagePlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDBasePlayer_GetMontagePlayer final
{
public:
	class UMontagePlayer*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetMontagePlayer) == 0x000008, "Wrong alignment on DBDBasePlayer_GetMontagePlayer");
static_assert(sizeof(DBDBasePlayer_GetMontagePlayer) == 0x000008, "Wrong size on DBDBasePlayer_GetMontagePlayer");
static_assert(offsetof(DBDBasePlayer_GetMontagePlayer, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetMontagePlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetRightFootAudioSurfaceName
// 0x0010 (0x0010 - 0x0000)
struct DBDBasePlayer_GetRightFootAudioSurfaceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetRightFootAudioSurfaceName) == 0x000008, "Wrong alignment on DBDBasePlayer_GetRightFootAudioSurfaceName");
static_assert(sizeof(DBDBasePlayer_GetRightFootAudioSurfaceName) == 0x000010, "Wrong size on DBDBasePlayer_GetRightFootAudioSurfaceName");
static_assert(offsetof(DBDBasePlayer_GetRightFootAudioSurfaceName, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetRightFootAudioSurfaceName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetRightFootSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct DBDBasePlayer_GetRightFootSurfaceType final
{
public:
	EPhysicalSurface                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetRightFootSurfaceType) == 0x000001, "Wrong alignment on DBDBasePlayer_GetRightFootSurfaceType");
static_assert(sizeof(DBDBasePlayer_GetRightFootSurfaceType) == 0x000001, "Wrong size on DBDBasePlayer_GetRightFootSurfaceType");
static_assert(offsetof(DBDBasePlayer_GetRightFootSurfaceType, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetRightFootSurfaceType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetRightFrontFootAudioSurfaceName
// 0x0010 (0x0010 - 0x0000)
struct DBDBasePlayer_GetRightFrontFootAudioSurfaceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetRightFrontFootAudioSurfaceName) == 0x000008, "Wrong alignment on DBDBasePlayer_GetRightFrontFootAudioSurfaceName");
static_assert(sizeof(DBDBasePlayer_GetRightFrontFootAudioSurfaceName) == 0x000010, "Wrong size on DBDBasePlayer_GetRightFrontFootAudioSurfaceName");
static_assert(offsetof(DBDBasePlayer_GetRightFrontFootAudioSurfaceName, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetRightFrontFootAudioSurfaceName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetRightFrontFootSurfaceType
// 0x0001 (0x0001 - 0x0000)
struct DBDBasePlayer_GetRightFrontFootSurfaceType final
{
public:
	EPhysicalSurface                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetRightFrontFootSurfaceType) == 0x000001, "Wrong alignment on DBDBasePlayer_GetRightFrontFootSurfaceType");
static_assert(sizeof(DBDBasePlayer_GetRightFrontFootSurfaceType) == 0x000001, "Wrong size on DBDBasePlayer_GetRightFrontFootSurfaceType");
static_assert(offsetof(DBDBasePlayer_GetRightFrontFootSurfaceType, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetRightFrontFootSurfaceType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetSemanticTag
// 0x0020 (0x0020 - 0x0000)
struct DBDBasePlayer_GetSemanticTag final
{
public:
	struct FGameplayTagContainer                  ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetSemanticTag) == 0x000008, "Wrong alignment on DBDBasePlayer_GetSemanticTag");
static_assert(sizeof(DBDBasePlayer_GetSemanticTag) == 0x000020, "Wrong size on DBDBasePlayer_GetSemanticTag");
static_assert(offsetof(DBDBasePlayer_GetSemanticTag, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetSemanticTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.GetShowBlindDebugInfo
// 0x0001 (0x0001 - 0x0000)
struct DBDBasePlayer_GetShowBlindDebugInfo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_GetShowBlindDebugInfo) == 0x000001, "Wrong alignment on DBDBasePlayer_GetShowBlindDebugInfo");
static_assert(sizeof(DBDBasePlayer_GetShowBlindDebugInfo) == 0x000001, "Wrong size on DBDBasePlayer_GetShowBlindDebugInfo");
static_assert(offsetof(DBDBasePlayer_GetShowBlindDebugInfo, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_GetShowBlindDebugInfo::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.IsPlayingAnyMontage
// 0x0001 (0x0001 - 0x0000)
struct DBDBasePlayer_IsPlayingAnyMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBasePlayer_IsPlayingAnyMontage) == 0x000001, "Wrong alignment on DBDBasePlayer_IsPlayingAnyMontage");
static_assert(sizeof(DBDBasePlayer_IsPlayingAnyMontage) == 0x000001, "Wrong size on DBDBasePlayer_IsPlayingAnyMontage");
static_assert(offsetof(DBDBasePlayer_IsPlayingAnyMontage, ReturnValue) == 0x000000, "Member 'DBDBasePlayer_IsPlayingAnyMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDBasePlayer.IsPlayingMontage
// 0x0028 (0x0028 - 0x0000)
struct DBDBasePlayer_IsPlayingMontage final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDBasePlayer_IsPlayingMontage) == 0x000008, "Wrong alignment on DBDBasePlayer_IsPlayingMontage");
static_assert(sizeof(DBDBasePlayer_IsPlayingMontage) == 0x000028, "Wrong size on DBDBasePlayer_IsPlayingMontage");
static_assert(offsetof(DBDBasePlayer_IsPlayingMontage, AnimMontageID) == 0x000000, "Member 'DBDBasePlayer_IsPlayingMontage::AnimMontageID' has a wrong offset!");
static_assert(offsetof(DBDBasePlayer_IsPlayingMontage, ReturnValue) == 0x000020, "Member 'DBDBasePlayer_IsPlayingMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetAllDBDPlayers
// 0x0010 (0x0010 - 0x0000)
struct CharacterCollection_GetAllDBDPlayers final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetAllDBDPlayers) == 0x000008, "Wrong alignment on CharacterCollection_GetAllDBDPlayers");
static_assert(sizeof(CharacterCollection_GetAllDBDPlayers) == 0x000010, "Wrong size on CharacterCollection_GetAllDBDPlayers");
static_assert(offsetof(CharacterCollection_GetAllDBDPlayers, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetAllDBDPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetKiller
// 0x0008 (0x0008 - 0x0000)
struct CharacterCollection_GetKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetKiller) == 0x000008, "Wrong alignment on CharacterCollection_GetKiller");
static_assert(sizeof(CharacterCollection_GetKiller) == 0x000008, "Wrong size on CharacterCollection_GetKiller");
static_assert(offsetof(CharacterCollection_GetKiller, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetKillers
// 0x0050 (0x0050 - 0x0000)
struct CharacterCollection_GetKillers final
{
public:
	TSet<class ASlasherPlayer*>                   ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetKillers) == 0x000008, "Wrong alignment on CharacterCollection_GetKillers");
static_assert(sizeof(CharacterCollection_GetKillers) == 0x000050, "Wrong size on CharacterCollection_GetKillers");
static_assert(offsetof(CharacterCollection_GetKillers, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetKillers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetMainDBDPlayers
// 0x0050 (0x0050 - 0x0000)
struct CharacterCollection_GetMainDBDPlayers final
{
public:
	TSet<class ADBDPlayer*>                       ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetMainDBDPlayers) == 0x000008, "Wrong alignment on CharacterCollection_GetMainDBDPlayers");
static_assert(sizeof(CharacterCollection_GetMainDBDPlayers) == 0x000050, "Wrong size on CharacterCollection_GetMainDBDPlayers");
static_assert(offsetof(CharacterCollection_GetMainDBDPlayers, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetMainDBDPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetOtherCharacters
// 0x0050 (0x0050 - 0x0000)
struct CharacterCollection_GetOtherCharacters final
{
public:
	TSet<class ADBDPlayer*>                       ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetOtherCharacters) == 0x000008, "Wrong alignment on CharacterCollection_GetOtherCharacters");
static_assert(sizeof(CharacterCollection_GetOtherCharacters) == 0x000050, "Wrong size on CharacterCollection_GetOtherCharacters");
static_assert(offsetof(CharacterCollection_GetOtherCharacters, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetOtherCharacters::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollection.GetSurvivors
// 0x0050 (0x0050 - 0x0000)
struct CharacterCollection_GetSurvivors final
{
public:
	TSet<class ACamperPlayer*>                    ReturnValue;                                       // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollection_GetSurvivors) == 0x000008, "Wrong alignment on CharacterCollection_GetSurvivors");
static_assert(sizeof(CharacterCollection_GetSurvivors) == 0x000050, "Wrong size on CharacterCollection_GetSurvivors");
static_assert(offsetof(CharacterCollection_GetSurvivors, ReturnValue) == 0x000000, "Member 'CharacterCollection_GetSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LevelReadyToPlayPlayerComponent.Server_SetIsReadyToPlay
// 0x0068 (0x0068 - 0x0000)
struct LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay final
{
public:
	struct FFilesInformation                      HackInfo;                                          // 0x0000(0x0068)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay) == 0x000008, "Wrong alignment on LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay");
static_assert(sizeof(LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay) == 0x000068, "Wrong size on LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay");
static_assert(offsetof(LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay, HackInfo) == 0x000000, "Member 'LevelReadyToPlayPlayerComponent_Server_SetIsReadyToPlay::HackInfo' has a wrong offset!");

// Function DeadByDaylight.KillerProjectile.SetActiveSlashable
// 0x0001 (0x0001 - 0x0000)
struct KillerProjectile_SetActiveSlashable final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectile_SetActiveSlashable) == 0x000001, "Wrong alignment on KillerProjectile_SetActiveSlashable");
static_assert(sizeof(KillerProjectile_SetActiveSlashable) == 0x000001, "Wrong size on KillerProjectile_SetActiveSlashable");
static_assert(offsetof(KillerProjectile_SetActiveSlashable, Active) == 0x000000, "Member 'KillerProjectile_SetActiveSlashable::Active' has a wrong offset!");

// Function DeadByDaylight.KillerProjectile.GetLaunchingKiller
// 0x0008 (0x0008 - 0x0000)
struct KillerProjectile_GetLaunchingKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectile_GetLaunchingKiller) == 0x000008, "Wrong alignment on KillerProjectile_GetLaunchingKiller");
static_assert(sizeof(KillerProjectile_GetLaunchingKiller) == 0x000008, "Wrong size on KillerProjectile_GetLaunchingKiller");
static_assert(offsetof(KillerProjectile_GetLaunchingKiller, ReturnValue) == 0x000000, "Member 'KillerProjectile_GetLaunchingKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillerProjectile.GetPlayerPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct KillerProjectile_GetPlayerPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectile_GetPlayerPrimitiveComponent) == 0x000008, "Wrong alignment on KillerProjectile_GetPlayerPrimitiveComponent");
static_assert(sizeof(KillerProjectile_GetPlayerPrimitiveComponent) == 0x000008, "Wrong size on KillerProjectile_GetPlayerPrimitiveComponent");
static_assert(offsetof(KillerProjectile_GetPlayerPrimitiveComponent, ReturnValue) == 0x000000, "Member 'KillerProjectile_GetPlayerPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CurrencyDisplayable.FinishSpawningCurrency
// 0x0001 (0x0001 - 0x0000)
struct CurrencyDisplayable_FinishSpawningCurrency final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CurrencyDisplayable_FinishSpawningCurrency) == 0x000001, "Wrong alignment on CurrencyDisplayable_FinishSpawningCurrency");
static_assert(sizeof(CurrencyDisplayable_FinishSpawningCurrency) == 0x000001, "Wrong size on CurrencyDisplayable_FinishSpawningCurrency");
static_assert(offsetof(CurrencyDisplayable_FinishSpawningCurrency, CurrencyType) == 0x000000, "Member 'CurrencyDisplayable_FinishSpawningCurrency::CurrencyType' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractable.InitInteractable
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractable_InitInteractable final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractable_InitInteractable) == 0x000008, "Wrong alignment on PlayerInteractable_InitInteractable");
static_assert(sizeof(PlayerInteractable_InitInteractable) == 0x000008, "Wrong size on PlayerInteractable_InitInteractable");
static_assert(offsetof(PlayerInteractable_InitInteractable, Player) == 0x000000, "Member 'PlayerInteractable_InitInteractable::Player' has a wrong offset!");

// Function DeadByDaylight.CompetenceAction.GetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct CompetenceAction_GetOwningPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetenceAction_GetOwningPlayer) == 0x000008, "Wrong alignment on CompetenceAction_GetOwningPlayer");
static_assert(sizeof(CompetenceAction_GetOwningPlayer) == 0x000008, "Wrong size on CompetenceAction_GetOwningPlayer");
static_assert(offsetof(CompetenceAction_GetOwningPlayer, ReturnValue) == 0x000000, "Member 'CompetenceAction_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AIMoveToPositionData.Init
// 0x0010 (0x0010 - 0x0000)
struct AIMoveToPositionData_Init final
{
public:
	class AActor*                                 PositionActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       MovementType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePathfinding;                                    // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMoveToPositionData_Init) == 0x000008, "Wrong alignment on AIMoveToPositionData_Init");
static_assert(sizeof(AIMoveToPositionData_Init) == 0x000010, "Wrong size on AIMoveToPositionData_Init");
static_assert(offsetof(AIMoveToPositionData_Init, PositionActor) == 0x000000, "Member 'AIMoveToPositionData_Init::PositionActor' has a wrong offset!");
static_assert(offsetof(AIMoveToPositionData_Init, MovementType) == 0x000008, "Member 'AIMoveToPositionData_Init::MovementType' has a wrong offset!");
static_assert(offsetof(AIMoveToPositionData_Init, UsePathfinding) == 0x000009, "Member 'AIMoveToPositionData_Init::UsePathfinding' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.CountGuestLobbyMembersWithAudioSwitch
// 0x0020 (0x0020 - 0x0000)
struct LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch final
{
public:
	EAudioCustomizationCategory                   SwitchCategory;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         AudioSwitches;                                     // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         NumMatching;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumNotMatching;                                    // 0x001C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch) == 0x000008, "Wrong alignment on LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch");
static_assert(sizeof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch) == 0x000020, "Wrong size on LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch");
static_assert(offsetof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch, SwitchCategory) == 0x000000, "Member 'LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch::SwitchCategory' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch, AudioSwitches) == 0x000008, "Member 'LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch::AudioSwitches' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch, NumMatching) == 0x000018, "Member 'LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch::NumMatching' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch, NumNotMatching) == 0x00001C, "Member 'LobbyDialogueSubsystem_CountGuestLobbyMembersWithAudioSwitch::NumNotMatching' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.GetGuestLobbyMembers
// 0x0010 (0x0010 - 0x0000)
struct LobbyDialogueSubsystem_GetGuestLobbyMembers final
{
public:
	TArray<class ADBDMenuPlayer*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyDialogueSubsystem_GetGuestLobbyMembers) == 0x000008, "Wrong alignment on LobbyDialogueSubsystem_GetGuestLobbyMembers");
static_assert(sizeof(LobbyDialogueSubsystem_GetGuestLobbyMembers) == 0x000010, "Wrong size on LobbyDialogueSubsystem_GetGuestLobbyMembers");
static_assert(offsetof(LobbyDialogueSubsystem_GetGuestLobbyMembers, ReturnValue) == 0x000000, "Member 'LobbyDialogueSubsystem_GetGuestLobbyMembers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.HasCharacterPlayedDialogueForThisLobby
// 0x0018 (0x0018 - 0x0000)
struct LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby final
{
public:
	class FString                                 CharacterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DialogueId;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby) == 0x000008, "Wrong alignment on LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby");
static_assert(sizeof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby) == 0x000018, "Wrong size on LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby");
static_assert(offsetof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby, CharacterName) == 0x000000, "Member 'LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby::CharacterName' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby, DialogueId) == 0x000010, "Member 'LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby::DialogueId' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby, ReturnValue) == 0x000014, "Member 'LobbyDialogueSubsystem_HasCharacterPlayedDialogueForThisLobby::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.IsLobbyFullForRole
// 0x0002 (0x0002 - 0x0000)
struct LobbyDialogueSubsystem_IsLobbyFullForRole final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyDialogueSubsystem_IsLobbyFullForRole) == 0x000001, "Wrong alignment on LobbyDialogueSubsystem_IsLobbyFullForRole");
static_assert(sizeof(LobbyDialogueSubsystem_IsLobbyFullForRole) == 0x000002, "Wrong size on LobbyDialogueSubsystem_IsLobbyFullForRole");
static_assert(offsetof(LobbyDialogueSubsystem_IsLobbyFullForRole, Role) == 0x000000, "Member 'LobbyDialogueSubsystem_IsLobbyFullForRole::Role' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_IsLobbyFullForRole, ReturnValue) == 0x000001, "Member 'LobbyDialogueSubsystem_IsLobbyFullForRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LobbyDialogueSubsystem.NotifyCharacterPlayedDialogueForThisLobby
// 0x0018 (0x0018 - 0x0000)
struct LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby final
{
public:
	class FString                                 CharacterName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DialogueId;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby) == 0x000008, "Wrong alignment on LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby");
static_assert(sizeof(LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby) == 0x000018, "Wrong size on LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby");
static_assert(offsetof(LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby, CharacterName) == 0x000000, "Member 'LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby::CharacterName' has a wrong offset!");
static_assert(offsetof(LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby, DialogueId) == 0x000010, "Member 'LobbyDialogueSubsystem_NotifyCharacterPlayedDialogueForThisLobby::DialogueId' has a wrong offset!");

// Function DeadByDaylight.GameEventTracker.FireGameEvent
// 0x0018 (0x0018 - 0x0000)
struct GameEventTracker_FireGameEvent final
{
public:
	EDBDScoreTypes                                EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventTracker_FireGameEvent) == 0x000008, "Wrong alignment on GameEventTracker_FireGameEvent");
static_assert(sizeof(GameEventTracker_FireGameEvent) == 0x000018, "Wrong size on GameEventTracker_FireGameEvent");
static_assert(offsetof(GameEventTracker_FireGameEvent, EventType) == 0x000000, "Member 'GameEventTracker_FireGameEvent::EventType' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameEvent, Amount) == 0x000004, "Member 'GameEventTracker_FireGameEvent::Amount' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameEvent, Instigator) == 0x000008, "Member 'GameEventTracker_FireGameEvent::Instigator' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameEvent, Target) == 0x000010, "Member 'GameEventTracker_FireGameEvent::Target' has a wrong offset!");

// Function DeadByDaylight.GameEventTracker.FireGameflowEvent
// 0x0020 (0x0020 - 0x0000)
struct GameEventTracker_FireGameflowEvent final
{
public:
	EDBDScoreTypes                                EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayerState*                  Instigator;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Data;                                              // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameEventTracker_FireGameflowEvent) == 0x000008, "Wrong alignment on GameEventTracker_FireGameflowEvent");
static_assert(sizeof(GameEventTracker_FireGameflowEvent) == 0x000020, "Wrong size on GameEventTracker_FireGameflowEvent");
static_assert(offsetof(GameEventTracker_FireGameflowEvent, EventType) == 0x000000, "Member 'GameEventTracker_FireGameflowEvent::EventType' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameflowEvent, Amount) == 0x000004, "Member 'GameEventTracker_FireGameflowEvent::Amount' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameflowEvent, Instigator) == 0x000008, "Member 'GameEventTracker_FireGameflowEvent::Instigator' has a wrong offset!");
static_assert(offsetof(GameEventTracker_FireGameflowEvent, Data) == 0x000010, "Member 'GameEventTracker_FireGameflowEvent::Data' has a wrong offset!");

// Function DeadByDaylight.ActorNavMovementComponent.SetAcceleration
// 0x0004 (0x0004 - 0x0000)
struct ActorNavMovementComponent_SetAcceleration final
{
public:
	float                                         Acceleration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorNavMovementComponent_SetAcceleration) == 0x000004, "Wrong alignment on ActorNavMovementComponent_SetAcceleration");
static_assert(sizeof(ActorNavMovementComponent_SetAcceleration) == 0x000004, "Wrong size on ActorNavMovementComponent_SetAcceleration");
static_assert(offsetof(ActorNavMovementComponent_SetAcceleration, Acceleration) == 0x000000, "Member 'ActorNavMovementComponent_SetAcceleration::Acceleration' has a wrong offset!");

// Function DeadByDaylight.ActorNavMovementComponent.SetDeceleration
// 0x0004 (0x0004 - 0x0000)
struct ActorNavMovementComponent_SetDeceleration final
{
public:
	float                                         Deceleration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorNavMovementComponent_SetDeceleration) == 0x000004, "Wrong alignment on ActorNavMovementComponent_SetDeceleration");
static_assert(sizeof(ActorNavMovementComponent_SetDeceleration) == 0x000004, "Wrong size on ActorNavMovementComponent_SetDeceleration");
static_assert(offsetof(ActorNavMovementComponent_SetDeceleration, Deceleration) == 0x000000, "Member 'ActorNavMovementComponent_SetDeceleration::Deceleration' has a wrong offset!");

// Function DeadByDaylight.ActorNavMovementComponent.SetMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct ActorNavMovementComponent_SetMaxSpeed final
{
public:
	float                                         MaxSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorNavMovementComponent_SetMaxSpeed) == 0x000004, "Wrong alignment on ActorNavMovementComponent_SetMaxSpeed");
static_assert(sizeof(ActorNavMovementComponent_SetMaxSpeed) == 0x000004, "Wrong size on ActorNavMovementComponent_SetMaxSpeed");
static_assert(offsetof(ActorNavMovementComponent_SetMaxSpeed, MaxSpeed) == 0x000000, "Member 'ActorNavMovementComponent_SetMaxSpeed::MaxSpeed' has a wrong offset!");

// Function DeadByDaylight.ActorNavMovementComponent.GetOwningActor
// 0x0008 (0x0008 - 0x0000)
struct ActorNavMovementComponent_GetOwningActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorNavMovementComponent_GetOwningActor) == 0x000008, "Wrong alignment on ActorNavMovementComponent_GetOwningActor");
static_assert(sizeof(ActorNavMovementComponent_GetOwningActor) == 0x000008, "Wrong size on ActorNavMovementComponent_GetOwningActor");
static_assert(offsetof(ActorNavMovementComponent_GetOwningActor, ReturnValue) == 0x000000, "Member 'ActorNavMovementComponent_GetOwningActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SelectiveVisibilityComponent.Local_SetVisibility
// 0x0002 (0x0002 - 0x0000)
struct SelectiveVisibilityComponent_Local_SetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelectiveVisibilityComponent_Local_SetVisibility) == 0x000001, "Wrong alignment on SelectiveVisibilityComponent_Local_SetVisibility");
static_assert(sizeof(SelectiveVisibilityComponent_Local_SetVisibility) == 0x000002, "Wrong size on SelectiveVisibilityComponent_Local_SetVisibility");
static_assert(offsetof(SelectiveVisibilityComponent_Local_SetVisibility, bNewVisibility) == 0x000000, "Member 'SelectiveVisibilityComponent_Local_SetVisibility::bNewVisibility' has a wrong offset!");
static_assert(offsetof(SelectiveVisibilityComponent_Local_SetVisibility, bPropagateToChildren) == 0x000001, "Member 'SelectiveVisibilityComponent_Local_SetVisibility::bPropagateToChildren' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetAllEnabledCharms
// 0x0018 (0x0018 - 0x0000)
struct CharacterHelper_GetAllEnabledCharms final
{
public:
	bool                                          SortArray;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_GetAllEnabledCharms) == 0x000008, "Wrong alignment on CharacterHelper_GetAllEnabledCharms");
static_assert(sizeof(CharacterHelper_GetAllEnabledCharms) == 0x000018, "Wrong size on CharacterHelper_GetAllEnabledCharms");
static_assert(offsetof(CharacterHelper_GetAllEnabledCharms, SortArray) == 0x000000, "Member 'CharacterHelper_GetAllEnabledCharms::SortArray' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetAllEnabledCharms, ReturnValue) == 0x000008, "Member 'CharacterHelper_GetAllEnabledCharms::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetAllOutfitComponentsOfCharacter
// 0x0048 (0x0048 - 0x0000)
struct CharacterHelper_GetAllOutfitComponentsOfCharacter final
{
public:
	TArray<struct FCustomizationItemData>         ReturnHeads;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizationItemData>         ReturnTorsos;                                      // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizationItemData>         ReturnLegsWeapons;                                 // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 CharacterId;                                       // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SortArrays;                                        // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterHelper_GetAllOutfitComponentsOfCharacter) == 0x000008, "Wrong alignment on CharacterHelper_GetAllOutfitComponentsOfCharacter");
static_assert(sizeof(CharacterHelper_GetAllOutfitComponentsOfCharacter) == 0x000048, "Wrong size on CharacterHelper_GetAllOutfitComponentsOfCharacter");
static_assert(offsetof(CharacterHelper_GetAllOutfitComponentsOfCharacter, ReturnHeads) == 0x000000, "Member 'CharacterHelper_GetAllOutfitComponentsOfCharacter::ReturnHeads' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetAllOutfitComponentsOfCharacter, ReturnTorsos) == 0x000010, "Member 'CharacterHelper_GetAllOutfitComponentsOfCharacter::ReturnTorsos' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetAllOutfitComponentsOfCharacter, ReturnLegsWeapons) == 0x000020, "Member 'CharacterHelper_GetAllOutfitComponentsOfCharacter::ReturnLegsWeapons' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetAllOutfitComponentsOfCharacter, CharacterId) == 0x000030, "Member 'CharacterHelper_GetAllOutfitComponentsOfCharacter::CharacterId' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetAllOutfitComponentsOfCharacter, SortArrays) == 0x000040, "Member 'CharacterHelper_GetAllOutfitComponentsOfCharacter::SortArrays' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetCharactersByRole
// 0x0020 (0x0020 - 0x0000)
struct CharacterHelper_GetCharactersByRole final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SortArray;                                         // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCharacterDescription>          ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_GetCharactersByRole) == 0x000008, "Wrong alignment on CharacterHelper_GetCharactersByRole");
static_assert(sizeof(CharacterHelper_GetCharactersByRole) == 0x000020, "Wrong size on CharacterHelper_GetCharactersByRole");
static_assert(offsetof(CharacterHelper_GetCharactersByRole, WorldContextObject) == 0x000000, "Member 'CharacterHelper_GetCharactersByRole::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetCharactersByRole, Role) == 0x000008, "Member 'CharacterHelper_GetCharactersByRole::Role' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetCharactersByRole, SortArray) == 0x000009, "Member 'CharacterHelper_GetCharactersByRole::SortArray' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetCharactersByRole, ReturnValue) == 0x000010, "Member 'CharacterHelper_GetCharactersByRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetOutfitComposition
// 0x0CD0 (0x0CD0 - 0x0000)
struct CharacterHelper_GetOutfitComposition final
{
public:
	struct FCustomizationItemData                 ReturnHead;                                        // 0x0000(0x0440)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FCustomizationItemData                 ReturnTorso;                                       // 0x0440(0x0440)(Parm, OutParm, NativeAccessSpecifierPublic)
	struct FCustomizationItemData                 ReturnLegsWeapon;                                  // 0x0880(0x0440)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FString                                 OutfitId;                                          // 0x0CC0(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_GetOutfitComposition) == 0x000008, "Wrong alignment on CharacterHelper_GetOutfitComposition");
static_assert(sizeof(CharacterHelper_GetOutfitComposition) == 0x000CD0, "Wrong size on CharacterHelper_GetOutfitComposition");
static_assert(offsetof(CharacterHelper_GetOutfitComposition, ReturnHead) == 0x000000, "Member 'CharacterHelper_GetOutfitComposition::ReturnHead' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetOutfitComposition, ReturnTorso) == 0x000440, "Member 'CharacterHelper_GetOutfitComposition::ReturnTorso' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetOutfitComposition, ReturnLegsWeapon) == 0x000880, "Member 'CharacterHelper_GetOutfitComposition::ReturnLegsWeapon' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetOutfitComposition, OutfitId) == 0x000CC0, "Member 'CharacterHelper_GetOutfitComposition::OutfitId' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.GetOutfitsByCharacterID
// 0x0028 (0x0028 - 0x0000)
struct CharacterHelper_GetOutfitsByCharacterID final
{
public:
	class FString                                 CharacterId;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SortArray;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOutfitData>                    ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_GetOutfitsByCharacterID) == 0x000008, "Wrong alignment on CharacterHelper_GetOutfitsByCharacterID");
static_assert(sizeof(CharacterHelper_GetOutfitsByCharacterID) == 0x000028, "Wrong size on CharacterHelper_GetOutfitsByCharacterID");
static_assert(offsetof(CharacterHelper_GetOutfitsByCharacterID, CharacterId) == 0x000000, "Member 'CharacterHelper_GetOutfitsByCharacterID::CharacterId' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetOutfitsByCharacterID, SortArray) == 0x000010, "Member 'CharacterHelper_GetOutfitsByCharacterID::SortArray' has a wrong offset!");
static_assert(offsetof(CharacterHelper_GetOutfitsByCharacterID, ReturnValue) == 0x000018, "Member 'CharacterHelper_GetOutfitsByCharacterID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterHelper.SetCharmSlot
// 0x0028 (0x0028 - 0x0000)
struct CharacterHelper_SetCharmSlot final
{
public:
	class ADBDPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharmId;                                           // 0x0008(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SlotIndex;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharmIdSlot                           ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterHelper_SetCharmSlot) == 0x000008, "Wrong alignment on CharacterHelper_SetCharmSlot");
static_assert(sizeof(CharacterHelper_SetCharmSlot) == 0x000028, "Wrong size on CharacterHelper_SetCharmSlot");
static_assert(offsetof(CharacterHelper_SetCharmSlot, PlayerState) == 0x000000, "Member 'CharacterHelper_SetCharmSlot::PlayerState' has a wrong offset!");
static_assert(offsetof(CharacterHelper_SetCharmSlot, CharmId) == 0x000008, "Member 'CharacterHelper_SetCharmSlot::CharmId' has a wrong offset!");
static_assert(offsetof(CharacterHelper_SetCharmSlot, SlotIndex) == 0x000014, "Member 'CharacterHelper_SetCharmSlot::SlotIndex' has a wrong offset!");
static_assert(offsetof(CharacterHelper_SetCharmSlot, ReturnValue) == 0x000018, "Member 'CharacterHelper_SetCharmSlot::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Halloween2018EventComponent.OnFinishedPlaying
// 0x0040 (0x0040 - 0x0000)
struct Halloween2018EventComponent_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Halloween2018EventComponent_OnFinishedPlaying) == 0x000008, "Wrong alignment on Halloween2018EventComponent_OnFinishedPlaying");
static_assert(sizeof(Halloween2018EventComponent_OnFinishedPlaying) == 0x000040, "Wrong size on Halloween2018EventComponent_OnFinishedPlaying");
static_assert(offsetof(Halloween2018EventComponent_OnFinishedPlaying, GameEventType) == 0x000000, "Member 'Halloween2018EventComponent_OnFinishedPlaying::GameEventType' has a wrong offset!");
static_assert(offsetof(Halloween2018EventComponent_OnFinishedPlaying, GameEventData) == 0x000010, "Member 'Halloween2018EventComponent_OnFinishedPlaying::GameEventData' has a wrong offset!");

// Function DeadByDaylight.Halloween2018EventComponent.Server_SpawnVial
// 0x0004 (0x0004 - 0x0000)
struct Halloween2018EventComponent_Server_SpawnVial final
{
public:
	float                                         InitialCharge;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Halloween2018EventComponent_Server_SpawnVial) == 0x000004, "Wrong alignment on Halloween2018EventComponent_Server_SpawnVial");
static_assert(sizeof(Halloween2018EventComponent_Server_SpawnVial) == 0x000004, "Wrong size on Halloween2018EventComponent_Server_SpawnVial");
static_assert(offsetof(Halloween2018EventComponent_Server_SpawnVial, InitialCharge) == 0x000000, "Member 'Halloween2018EventComponent_Server_SpawnVial::InitialCharge' has a wrong offset!");

// Function DeadByDaylight.Halloween2018EventComponent.GetVial
// 0x0008 (0x0008 - 0x0000)
struct Halloween2018EventComponent_GetVial final
{
public:
	class USectionnedChargeableComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Halloween2018EventComponent_GetVial) == 0x000008, "Wrong alignment on Halloween2018EventComponent_GetVial");
static_assert(sizeof(Halloween2018EventComponent_GetVial) == 0x000008, "Wrong size on Halloween2018EventComponent_GetVial");
static_assert(offsetof(Halloween2018EventComponent_GetVial, ReturnValue) == 0x000000, "Member 'Halloween2018EventComponent_GetVial::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Halloween2018EventComponent.IsVialFull
// 0x0001 (0x0001 - 0x0000)
struct Halloween2018EventComponent_IsVialFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Halloween2018EventComponent_IsVialFull) == 0x000001, "Wrong alignment on Halloween2018EventComponent_IsVialFull");
static_assert(sizeof(Halloween2018EventComponent_IsVialFull) == 0x000001, "Wrong size on Halloween2018EventComponent_IsVialFull");
static_assert(offsetof(Halloween2018EventComponent_IsVialFull, ReturnValue) == 0x000000, "Member 'Halloween2018EventComponent_IsVialFull::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillerProjectileLauncher.GetOwningKiller
// 0x0008 (0x0008 - 0x0000)
struct KillerProjectileLauncher_GetOwningKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectileLauncher_GetOwningKiller) == 0x000008, "Wrong alignment on KillerProjectileLauncher_GetOwningKiller");
static_assert(sizeof(KillerProjectileLauncher_GetOwningKiller) == 0x000008, "Wrong size on KillerProjectileLauncher_GetOwningKiller");
static_assert(offsetof(KillerProjectileLauncher_GetOwningKiller, ReturnValue) == 0x000000, "Member 'KillerProjectileLauncher_GetOwningKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorSpawner.AuthoritySelect
// 0x0001 (0x0001 - 0x0000)
struct ActorSpawner_AuthoritySelect final
{
public:
	bool                                          Selected;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorSpawner_AuthoritySelect) == 0x000001, "Wrong alignment on ActorSpawner_AuthoritySelect");
static_assert(sizeof(ActorSpawner_AuthoritySelect) == 0x000001, "Wrong size on ActorSpawner_AuthoritySelect");
static_assert(offsetof(ActorSpawner_AuthoritySelect, Selected) == 0x000000, "Member 'ActorSpawner_AuthoritySelect::Selected' has a wrong offset!");

// Function DeadByDaylight.ActorSpawner.AuthorityGetSpawnedActor
// 0x0008 (0x0008 - 0x0000)
struct ActorSpawner_AuthorityGetSpawnedActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorSpawner_AuthorityGetSpawnedActor) == 0x000008, "Wrong alignment on ActorSpawner_AuthorityGetSpawnedActor");
static_assert(sizeof(ActorSpawner_AuthorityGetSpawnedActor) == 0x000008, "Wrong size on ActorSpawner_AuthorityGetSpawnedActor");
static_assert(offsetof(ActorSpawner_AuthorityGetSpawnedActor, ReturnValue) == 0x000000, "Member 'ActorSpawner_AuthorityGetSpawnedActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorSpawner.IsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ActorSpawner_IsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorSpawner_IsEnabled) == 0x000001, "Wrong alignment on ActorSpawner_IsEnabled");
static_assert(sizeof(ActorSpawner_IsEnabled) == 0x000001, "Wrong size on ActorSpawner_IsEnabled");
static_assert(offsetof(ActorSpawner_IsEnabled, ReturnValue) == 0x000000, "Member 'ActorSpawner_IsEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorSpawner.UseActivatedElement
// 0x0001 (0x0001 - 0x0000)
struct ActorSpawner_UseActivatedElement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorSpawner_UseActivatedElement) == 0x000001, "Wrong alignment on ActorSpawner_UseActivatedElement");
static_assert(sizeof(ActorSpawner_UseActivatedElement) == 0x000001, "Wrong size on ActorSpawner_UseActivatedElement");
static_assert(offsetof(ActorSpawner_UseActivatedElement, ReturnValue) == 0x000000, "Member 'ActorSpawner_UseActivatedElement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DecalSpawner.GetSpawnerStrategy
// 0x0008 (0x0008 - 0x0000)
struct DecalSpawner_GetSpawnerStrategy final
{
public:
	class USpawnerStrategy*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecalSpawner_GetSpawnerStrategy) == 0x000008, "Wrong alignment on DecalSpawner_GetSpawnerStrategy");
static_assert(sizeof(DecalSpawner_GetSpawnerStrategy) == 0x000008, "Wrong size on DecalSpawner_GetSpawnerStrategy");
static_assert(offsetof(DecalSpawner_GetSpawnerStrategy, ReturnValue) == 0x000000, "Member 'DecalSpawner_GetSpawnerStrategy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterClassUtilities.GetEquippedCharacterClass
// 0x0018 (0x0018 - 0x0000)
struct CharacterClassUtilities_GetEquippedCharacterClass final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterClassUtilities_GetEquippedCharacterClass) == 0x000008, "Wrong alignment on CharacterClassUtilities_GetEquippedCharacterClass");
static_assert(sizeof(CharacterClassUtilities_GetEquippedCharacterClass) == 0x000018, "Wrong size on CharacterClassUtilities_GetEquippedCharacterClass");
static_assert(offsetof(CharacterClassUtilities_GetEquippedCharacterClass, Player) == 0x000000, "Member 'CharacterClassUtilities_GetEquippedCharacterClass::Player' has a wrong offset!");
static_assert(offsetof(CharacterClassUtilities_GetEquippedCharacterClass, ReturnValue) == 0x000008, "Member 'CharacterClassUtilities_GetEquippedCharacterClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.Authority_BindToDullTotems
// 0x0002 (0x0002 - 0x0000)
struct TotemBoundPerk_Authority_BindToDullTotems final
{
public:
	bool                                          AllowAdditionalBoundTotems;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TotemBoundPerk_Authority_BindToDullTotems) == 0x000001, "Wrong alignment on TotemBoundPerk_Authority_BindToDullTotems");
static_assert(sizeof(TotemBoundPerk_Authority_BindToDullTotems) == 0x000002, "Wrong size on TotemBoundPerk_Authority_BindToDullTotems");
static_assert(offsetof(TotemBoundPerk_Authority_BindToDullTotems, AllowAdditionalBoundTotems) == 0x000000, "Member 'TotemBoundPerk_Authority_BindToDullTotems::AllowAdditionalBoundTotems' has a wrong offset!");
static_assert(offsetof(TotemBoundPerk_Authority_BindToDullTotems, ReturnValue) == 0x000001, "Member 'TotemBoundPerk_Authority_BindToDullTotems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.Authority_UnbindFromTotem
// 0x0008 (0x0008 - 0x0000)
struct TotemBoundPerk_Authority_UnbindFromTotem final
{
public:
	class ATotem*                                 ATotemActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TotemBoundPerk_Authority_UnbindFromTotem) == 0x000008, "Wrong alignment on TotemBoundPerk_Authority_UnbindFromTotem");
static_assert(sizeof(TotemBoundPerk_Authority_UnbindFromTotem) == 0x000008, "Wrong size on TotemBoundPerk_Authority_UnbindFromTotem");
static_assert(offsetof(TotemBoundPerk_Authority_UnbindFromTotem, ATotemActor) == 0x000000, "Member 'TotemBoundPerk_Authority_UnbindFromTotem::ATotemActor' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.GetBoundTotems
// 0x0010 (0x0010 - 0x0000)
struct TotemBoundPerk_GetBoundTotems final
{
public:
	TArray<class ATotem*>                         ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TotemBoundPerk_GetBoundTotems) == 0x000008, "Wrong alignment on TotemBoundPerk_GetBoundTotems");
static_assert(sizeof(TotemBoundPerk_GetBoundTotems) == 0x000010, "Wrong size on TotemBoundPerk_GetBoundTotems");
static_assert(offsetof(TotemBoundPerk_GetBoundTotems, ReturnValue) == 0x000000, "Member 'TotemBoundPerk_GetBoundTotems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.GetSquaredDistanceToOwner
// 0x0010 (0x0010 - 0x0000)
struct TotemBoundPerk_GetSquaredDistanceToOwner final
{
public:
	const class AActor*                           Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TotemBoundPerk_GetSquaredDistanceToOwner) == 0x000008, "Wrong alignment on TotemBoundPerk_GetSquaredDistanceToOwner");
static_assert(sizeof(TotemBoundPerk_GetSquaredDistanceToOwner) == 0x000010, "Wrong size on TotemBoundPerk_GetSquaredDistanceToOwner");
static_assert(offsetof(TotemBoundPerk_GetSquaredDistanceToOwner, Survivor) == 0x000000, "Member 'TotemBoundPerk_GetSquaredDistanceToOwner::Survivor' has a wrong offset!");
static_assert(offsetof(TotemBoundPerk_GetSquaredDistanceToOwner, ReturnValue) == 0x000008, "Member 'TotemBoundPerk_GetSquaredDistanceToOwner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TotemBoundPerk.GetTotems
// 0x0010 (0x0010 - 0x0000)
struct TotemBoundPerk_GetTotems final
{
public:
	TArray<class ATotem*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TotemBoundPerk_GetTotems) == 0x000008, "Wrong alignment on TotemBoundPerk_GetTotems");
static_assert(sizeof(TotemBoundPerk_GetTotems) == 0x000010, "Wrong size on TotemBoundPerk_GetTotems");
static_assert(offsetof(TotemBoundPerk_GetTotems, ReturnValue) == 0x000000, "Member 'TotemBoundPerk_GetTotems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AIMoveToInteract.Init
// 0x0010 (0x0010 - 0x0000)
struct AIMoveToInteract_Init final
{
public:
	class ADBDPlayer*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAICharacterBehaviourData*              behaviourData;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveToInteract_Init) == 0x000008, "Wrong alignment on AIMoveToInteract_Init");
static_assert(sizeof(AIMoveToInteract_Init) == 0x000010, "Wrong size on AIMoveToInteract_Init");
static_assert(offsetof(AIMoveToInteract_Init, Character) == 0x000000, "Member 'AIMoveToInteract_Init::Character' has a wrong offset!");
static_assert(offsetof(AIMoveToInteract_Init, behaviourData) == 0x000008, "Member 'AIMoveToInteract_Init::behaviourData' has a wrong offset!");

// Function DeadByDaylight.AIMoveToInteract.InteractionPointReached
// 0x0008 (0x0008 - 0x0000)
struct AIMoveToInteract_InteractionPointReached final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMoveToInteract_InteractionPointReached) == 0x000004, "Wrong alignment on AIMoveToInteract_InteractionPointReached");
static_assert(sizeof(AIMoveToInteract_InteractionPointReached) == 0x000008, "Wrong size on AIMoveToInteract_InteractionPointReached");
static_assert(offsetof(AIMoveToInteract_InteractionPointReached, RequestID) == 0x000000, "Member 'AIMoveToInteract_InteractionPointReached::RequestID' has a wrong offset!");
static_assert(offsetof(AIMoveToInteract_InteractionPointReached, Result) == 0x000004, "Member 'AIMoveToInteract_InteractionPointReached::Result' has a wrong offset!");

// Function DeadByDaylight.KillerBlindingFXComponent.Multicast_OnBlindedByPlayersCosmetic
// 0x0010 (0x0010 - 0x0000)
struct KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic final
{
public:
	TArray<class ADBDPlayer*>                     Players;                                           // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic) == 0x000008, "Wrong alignment on KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic");
static_assert(sizeof(KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic) == 0x000010, "Wrong size on KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic");
static_assert(offsetof(KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic, Players) == 0x000000, "Member 'KillerBlindingFXComponent_Multicast_OnBlindedByPlayersCosmetic::Players' has a wrong offset!");

// Function DeadByDaylight.KillerRedStainUpdateStrategy.OnHeadHiddenChanged
// 0x0001 (0x0001 - 0x0000)
struct KillerRedStainUpdateStrategy_OnHeadHiddenChanged final
{
public:
	bool                                          IsHidden;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerRedStainUpdateStrategy_OnHeadHiddenChanged) == 0x000001, "Wrong alignment on KillerRedStainUpdateStrategy_OnHeadHiddenChanged");
static_assert(sizeof(KillerRedStainUpdateStrategy_OnHeadHiddenChanged) == 0x000001, "Wrong size on KillerRedStainUpdateStrategy_OnHeadHiddenChanged");
static_assert(offsetof(KillerRedStainUpdateStrategy_OnHeadHiddenChanged, IsHidden) == 0x000000, "Member 'KillerRedStainUpdateStrategy_OnHeadHiddenChanged::IsHidden' has a wrong offset!");

// Function DeadByDaylight.DBD_SoundEventSpawner.OnLoudNoiseTriggered
// 0x0038 (0x0038 - 0x0000)
struct DBD_SoundEventSpawner_OnLoudNoiseTriggered final
{
public:
	class AActor*                                 Originator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InstigatingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldTrack;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudibleRange;                                      // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsQuickAction;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeceivingNoise;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBD_SoundEventSpawner_OnLoudNoiseTriggered) == 0x000008, "Wrong alignment on DBD_SoundEventSpawner_OnLoudNoiseTriggered");
static_assert(sizeof(DBD_SoundEventSpawner_OnLoudNoiseTriggered) == 0x000038, "Wrong size on DBD_SoundEventSpawner_OnLoudNoiseTriggered");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, Originator) == 0x000000, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::Originator' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, InstigatingActor) == 0x000008, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::InstigatingActor' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, Location) == 0x000010, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::Location' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, ShouldTrack) == 0x000028, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::ShouldTrack' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, AudibleRange) == 0x00002C, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::AudibleRange' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, IsQuickAction) == 0x000030, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::IsQuickAction' has a wrong offset!");
static_assert(offsetof(DBD_SoundEventSpawner_OnLoudNoiseTriggered, IsDeceivingNoise) == 0x000031, "Member 'DBD_SoundEventSpawner_OnLoudNoiseTriggered::IsDeceivingNoise' has a wrong offset!");

// Function DeadByDaylight.VaultDefinition.IsWindowVaultable
// 0x0001 (0x0001 - 0x0000)
struct VaultDefinition_IsWindowVaultable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VaultDefinition_IsWindowVaultable) == 0x000001, "Wrong alignment on VaultDefinition_IsWindowVaultable");
static_assert(sizeof(VaultDefinition_IsWindowVaultable) == 0x000001, "Wrong size on VaultDefinition_IsWindowVaultable");
static_assert(offsetof(VaultDefinition_IsWindowVaultable, ReturnValue) == 0x000000, "Member 'VaultDefinition_IsWindowVaultable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.VaultDefinition.IsWithinHeightDelta
// 0x0010 (0x0010 - 0x0000)
struct VaultDefinition_IsWithinHeightDelta final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VaultDefinition_IsWithinHeightDelta) == 0x000008, "Wrong alignment on VaultDefinition_IsWithinHeightDelta");
static_assert(sizeof(VaultDefinition_IsWithinHeightDelta) == 0x000010, "Wrong size on VaultDefinition_IsWithinHeightDelta");
static_assert(offsetof(VaultDefinition_IsWithinHeightDelta, Player) == 0x000000, "Member 'VaultDefinition_IsWithinHeightDelta::Player' has a wrong offset!");
static_assert(offsetof(VaultDefinition_IsWithinHeightDelta, ReturnValue) == 0x000008, "Member 'VaultDefinition_IsWithinHeightDelta::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.VaultDefinition.ShouldLaunchCharacter
// 0x0010 (0x0010 - 0x0000)
struct VaultDefinition_ShouldLaunchCharacter final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VaultDefinition_ShouldLaunchCharacter) == 0x000008, "Wrong alignment on VaultDefinition_ShouldLaunchCharacter");
static_assert(sizeof(VaultDefinition_ShouldLaunchCharacter) == 0x000010, "Wrong size on VaultDefinition_ShouldLaunchCharacter");
static_assert(offsetof(VaultDefinition_ShouldLaunchCharacter, Player) == 0x000000, "Member 'VaultDefinition_ShouldLaunchCharacter::Player' has a wrong offset!");
static_assert(offsetof(VaultDefinition_ShouldLaunchCharacter, ReturnValue) == 0x000008, "Member 'VaultDefinition_ShouldLaunchCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.JumpToSection
// 0x000C (0x000C - 0x0000)
struct MontagePlayer_JumpToSection final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_JumpToSection) == 0x000004, "Wrong alignment on MontagePlayer_JumpToSection");
static_assert(sizeof(MontagePlayer_JumpToSection) == 0x00000C, "Wrong size on MontagePlayer_JumpToSection");
static_assert(offsetof(MontagePlayer_JumpToSection, SectionName) == 0x000000, "Member 'MontagePlayer_JumpToSection::SectionName' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.JumpToSectionEnd
// 0x000C (0x000C - 0x0000)
struct MontagePlayer_JumpToSectionEnd final
{
public:
	class FName                                   SectionName;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_JumpToSectionEnd) == 0x000004, "Wrong alignment on MontagePlayer_JumpToSectionEnd");
static_assert(sizeof(MontagePlayer_JumpToSectionEnd) == 0x00000C, "Wrong size on MontagePlayer_JumpToSectionEnd");
static_assert(offsetof(MontagePlayer_JumpToSectionEnd, SectionName) == 0x000000, "Member 'MontagePlayer_JumpToSectionEnd::SectionName' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.OnMontageBlendingOutInternal
// 0x0020 (0x0020 - 0x0000)
struct MontagePlayer_OnMontageBlendingOutInternal final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MontagePlayer_OnMontageBlendingOutInternal) == 0x000008, "Wrong alignment on MontagePlayer_OnMontageBlendingOutInternal");
static_assert(sizeof(MontagePlayer_OnMontageBlendingOutInternal) == 0x000020, "Wrong size on MontagePlayer_OnMontageBlendingOutInternal");
static_assert(offsetof(MontagePlayer_OnMontageBlendingOutInternal, Guid) == 0x000000, "Member 'MontagePlayer_OnMontageBlendingOutInternal::Guid' has a wrong offset!");
static_assert(offsetof(MontagePlayer_OnMontageBlendingOutInternal, Montage) == 0x000010, "Member 'MontagePlayer_OnMontageBlendingOutInternal::Montage' has a wrong offset!");
static_assert(offsetof(MontagePlayer_OnMontageBlendingOutInternal, Interrupted) == 0x000018, "Member 'MontagePlayer_OnMontageBlendingOutInternal::Interrupted' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.OnMontageEndedInternal
// 0x0020 (0x0020 - 0x0000)
struct MontagePlayer_OnMontageEndedInternal final
{
public:
	struct FGuid                                  Guid;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MontagePlayer_OnMontageEndedInternal) == 0x000008, "Wrong alignment on MontagePlayer_OnMontageEndedInternal");
static_assert(sizeof(MontagePlayer_OnMontageEndedInternal) == 0x000020, "Wrong size on MontagePlayer_OnMontageEndedInternal");
static_assert(offsetof(MontagePlayer_OnMontageEndedInternal, Guid) == 0x000000, "Member 'MontagePlayer_OnMontageEndedInternal::Guid' has a wrong offset!");
static_assert(offsetof(MontagePlayer_OnMontageEndedInternal, Montage) == 0x000010, "Member 'MontagePlayer_OnMontageEndedInternal::Montage' has a wrong offset!");
static_assert(offsetof(MontagePlayer_OnMontageEndedInternal, Interrupted) == 0x000018, "Member 'MontagePlayer_OnMontageEndedInternal::Interrupted' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.Play
// 0x0030 (0x0030 - 0x0000)
struct MontagePlayer_Play final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFollower;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_Play) == 0x000008, "Wrong alignment on MontagePlayer_Play");
static_assert(sizeof(MontagePlayer_Play) == 0x000030, "Wrong size on MontagePlayer_Play");
static_assert(offsetof(MontagePlayer_Play, AnimMontageID) == 0x000000, "Member 'MontagePlayer_Play::AnimMontageID' has a wrong offset!");
static_assert(offsetof(MontagePlayer_Play, PlayRate) == 0x000020, "Member 'MontagePlayer_Play::PlayRate' has a wrong offset!");
static_assert(offsetof(MontagePlayer_Play, IsFollower) == 0x000024, "Member 'MontagePlayer_Play::IsFollower' has a wrong offset!");
static_assert(offsetof(MontagePlayer_Play, ReturnValue) == 0x000028, "Member 'MontagePlayer_Play::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.PlayLoopForDuration
// 0x0040 (0x0040 - 0x0000)
struct MontagePlayer_PlayLoopForDuration final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Out;                                               // 0x0028(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           ReturnValue;                                       // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_PlayLoopForDuration) == 0x000008, "Wrong alignment on MontagePlayer_PlayLoopForDuration");
static_assert(sizeof(MontagePlayer_PlayLoopForDuration) == 0x000040, "Wrong size on MontagePlayer_PlayLoopForDuration");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, AnimMontageID) == 0x000000, "Member 'MontagePlayer_PlayLoopForDuration::AnimMontageID' has a wrong offset!");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, Duration) == 0x000020, "Member 'MontagePlayer_PlayLoopForDuration::Duration' has a wrong offset!");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, PlayRate) == 0x000024, "Member 'MontagePlayer_PlayLoopForDuration::PlayRate' has a wrong offset!");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, Out) == 0x000028, "Member 'MontagePlayer_PlayLoopForDuration::Out' has a wrong offset!");
static_assert(offsetof(MontagePlayer_PlayLoopForDuration, ReturnValue) == 0x000038, "Member 'MontagePlayer_PlayLoopForDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct MontagePlayer_SetPlayRate final
{
public:
	float                                         PlayRate;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_SetPlayRate) == 0x000004, "Wrong alignment on MontagePlayer_SetPlayRate");
static_assert(sizeof(MontagePlayer_SetPlayRate) == 0x000004, "Wrong size on MontagePlayer_SetPlayRate");
static_assert(offsetof(MontagePlayer_SetPlayRate, PlayRate) == 0x000000, "Member 'MontagePlayer_SetPlayRate::PlayRate' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.SetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct MontagePlayer_SetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_SetSkeletalMesh) == 0x000008, "Wrong alignment on MontagePlayer_SetSkeletalMesh");
static_assert(sizeof(MontagePlayer_SetSkeletalMesh) == 0x000008, "Wrong size on MontagePlayer_SetSkeletalMesh");
static_assert(offsetof(MontagePlayer_SetSkeletalMesh, SkeletalMeshComponent) == 0x000000, "Member 'MontagePlayer_SetSkeletalMesh::SkeletalMeshComponent' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.Stop
// 0x0004 (0x0004 - 0x0000)
struct MontagePlayer_Stop final
{
public:
	float                                         BlendOutTime;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_Stop) == 0x000004, "Wrong alignment on MontagePlayer_Stop");
static_assert(sizeof(MontagePlayer_Stop) == 0x000004, "Wrong size on MontagePlayer_Stop");
static_assert(offsetof(MontagePlayer_Stop, BlendOutTime) == 0x000000, "Member 'MontagePlayer_Stop::BlendOutTime' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.GetAnimInstance
// 0x0008 (0x0008 - 0x0000)
struct MontagePlayer_GetAnimInstance final
{
public:
	class UAnimInstance*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_GetAnimInstance) == 0x000008, "Wrong alignment on MontagePlayer_GetAnimInstance");
static_assert(sizeof(MontagePlayer_GetAnimInstance) == 0x000008, "Wrong size on MontagePlayer_GetAnimInstance");
static_assert(offsetof(MontagePlayer_GetAnimInstance, ReturnValue) == 0x000000, "Member 'MontagePlayer_GetAnimInstance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.IsPlaying
// 0x0028 (0x0028 - 0x0000)
struct MontagePlayer_IsPlaying final
{
public:
	struct FAnimationMontageDescriptor            MontageDescriptor;                                 // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MontagePlayer_IsPlaying) == 0x000008, "Wrong alignment on MontagePlayer_IsPlaying");
static_assert(sizeof(MontagePlayer_IsPlaying) == 0x000028, "Wrong size on MontagePlayer_IsPlaying");
static_assert(offsetof(MontagePlayer_IsPlaying, MontageDescriptor) == 0x000000, "Member 'MontagePlayer_IsPlaying::MontageDescriptor' has a wrong offset!");
static_assert(offsetof(MontagePlayer_IsPlaying, ReturnValue) == 0x000020, "Member 'MontagePlayer_IsPlaying::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MontagePlayer.IsPlayingAnyMontage
// 0x0001 (0x0001 - 0x0000)
struct MontagePlayer_IsPlayingAnyMontage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MontagePlayer_IsPlayingAnyMontage) == 0x000001, "Wrong alignment on MontagePlayer_IsPlayingAnyMontage");
static_assert(sizeof(MontagePlayer_IsPlayingAnyMontage) == 0x000001, "Wrong size on MontagePlayer_IsPlayingAnyMontage");
static_assert(offsetof(MontagePlayer_IsPlayingAnyMontage, ReturnValue) == 0x000000, "Member 'MontagePlayer_IsPlayingAnyMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillInteractionDefinition.GetChargeCompleted
// 0x0001 (0x0001 - 0x0000)
struct KillInteractionDefinition_GetChargeCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillInteractionDefinition_GetChargeCompleted) == 0x000001, "Wrong alignment on KillInteractionDefinition_GetChargeCompleted");
static_assert(sizeof(KillInteractionDefinition_GetChargeCompleted) == 0x000001, "Wrong size on KillInteractionDefinition_GetChargeCompleted");
static_assert(offsetof(KillInteractionDefinition_GetChargeCompleted, ReturnValue) == 0x000000, "Member 'KillInteractionDefinition_GetChargeCompleted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillInteractionDefinition.GetExitAnimationMontage
// 0x0020 (0x0020 - 0x0000)
struct KillInteractionDefinition_GetExitAnimationMontage final
{
public:
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillInteractionDefinition_GetExitAnimationMontage) == 0x000008, "Wrong alignment on KillInteractionDefinition_GetExitAnimationMontage");
static_assert(sizeof(KillInteractionDefinition_GetExitAnimationMontage) == 0x000020, "Wrong size on KillInteractionDefinition_GetExitAnimationMontage");
static_assert(offsetof(KillInteractionDefinition_GetExitAnimationMontage, ReturnValue) == 0x000000, "Member 'KillInteractionDefinition_GetExitAnimationMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillInteractionDefinition.GetOwningSurvivor
// 0x0008 (0x0008 - 0x0000)
struct KillInteractionDefinition_GetOwningSurvivor final
{
public:
	const class ACamperPlayer*                    ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillInteractionDefinition_GetOwningSurvivor) == 0x000008, "Wrong alignment on KillInteractionDefinition_GetOwningSurvivor");
static_assert(sizeof(KillInteractionDefinition_GetOwningSurvivor) == 0x000008, "Wrong size on KillInteractionDefinition_GetOwningSurvivor");
static_assert(offsetof(KillInteractionDefinition_GetOwningSurvivor, ReturnValue) == 0x000000, "Member 'KillInteractionDefinition_GetOwningSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillInteractionDefinition.IsKillerAllowedToKillSurvivor
// 0x0018 (0x0018 - 0x0000)
struct KillInteractionDefinition_IsKillerAllowedToKillSurvivor final
{
public:
	const class ASlasherPlayer*                   Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACamperPlayer*                    Survivor;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillInteractionDefinition_IsKillerAllowedToKillSurvivor) == 0x000008, "Wrong alignment on KillInteractionDefinition_IsKillerAllowedToKillSurvivor");
static_assert(sizeof(KillInteractionDefinition_IsKillerAllowedToKillSurvivor) == 0x000018, "Wrong size on KillInteractionDefinition_IsKillerAllowedToKillSurvivor");
static_assert(offsetof(KillInteractionDefinition_IsKillerAllowedToKillSurvivor, Killer) == 0x000000, "Member 'KillInteractionDefinition_IsKillerAllowedToKillSurvivor::Killer' has a wrong offset!");
static_assert(offsetof(KillInteractionDefinition_IsKillerAllowedToKillSurvivor, Survivor) == 0x000008, "Member 'KillInteractionDefinition_IsKillerAllowedToKillSurvivor::Survivor' has a wrong offset!");
static_assert(offsetof(KillInteractionDefinition_IsKillerAllowedToKillSurvivor, ReturnValue) == 0x000010, "Member 'KillInteractionDefinition_IsKillerAllowedToKillSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChatManager.Multicast_DisplayMessage
// 0x0038 (0x0038 - 0x0000)
struct ChatManager_Multicast_DisplayMessage final
{
public:
	class FString                                 ChatIdentifier;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MirrorsId;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Msg;                                               // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChatManager_Multicast_DisplayMessage) == 0x000008, "Wrong alignment on ChatManager_Multicast_DisplayMessage");
static_assert(sizeof(ChatManager_Multicast_DisplayMessage) == 0x000038, "Wrong size on ChatManager_Multicast_DisplayMessage");
static_assert(offsetof(ChatManager_Multicast_DisplayMessage, ChatIdentifier) == 0x000000, "Member 'ChatManager_Multicast_DisplayMessage::ChatIdentifier' has a wrong offset!");
static_assert(offsetof(ChatManager_Multicast_DisplayMessage, PlayerIndex) == 0x000010, "Member 'ChatManager_Multicast_DisplayMessage::PlayerIndex' has a wrong offset!");
static_assert(offsetof(ChatManager_Multicast_DisplayMessage, MirrorsId) == 0x000018, "Member 'ChatManager_Multicast_DisplayMessage::MirrorsId' has a wrong offset!");
static_assert(offsetof(ChatManager_Multicast_DisplayMessage, Msg) == 0x000028, "Member 'ChatManager_Multicast_DisplayMessage::Msg' has a wrong offset!");

// Function DeadByDaylight.VaultableOutlineUpdateStrategy.SetCanBeRevealedToLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer final
{
public:
	bool                                          CanBeRevealedToLocalPlayer;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer) == 0x000001, "Wrong alignment on VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer");
static_assert(sizeof(VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer) == 0x000001, "Wrong size on VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer");
static_assert(offsetof(VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer, CanBeRevealedToLocalPlayer) == 0x000000, "Member 'VaultableOutlineUpdateStrategy_SetCanBeRevealedToLocalPlayer::CanBeRevealedToLocalPlayer' has a wrong offset!");

// Function DeadByDaylight.DreamPalletOutlineUpdateStrategy.InitializeTunableValues
// 0x0008 (0x0008 - 0x0000)
struct DreamPalletOutlineUpdateStrategy_InitializeTunableValues final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamPalletOutlineUpdateStrategy_InitializeTunableValues) == 0x000008, "Wrong alignment on DreamPalletOutlineUpdateStrategy_InitializeTunableValues");
static_assert(sizeof(DreamPalletOutlineUpdateStrategy_InitializeTunableValues) == 0x000008, "Wrong size on DreamPalletOutlineUpdateStrategy_InitializeTunableValues");
static_assert(offsetof(DreamPalletOutlineUpdateStrategy_InitializeTunableValues, Killer) == 0x000000, "Member 'DreamPalletOutlineUpdateStrategy_InitializeTunableValues::Killer' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.AddDetectionZone
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_AddDetectionZone final
{
public:
	EDetectionZone                                DetectionZoneID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    Zone;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_AddDetectionZone) == 0x000008, "Wrong alignment on DBDPlayer_AddDetectionZone");
static_assert(sizeof(DBDPlayer_AddDetectionZone) == 0x000010, "Wrong size on DBDPlayer_AddDetectionZone");
static_assert(offsetof(DBDPlayer_AddDetectionZone, DetectionZoneID) == 0x000000, "Member 'DBDPlayer_AddDetectionZone::DetectionZoneID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_AddDetectionZone, Zone) == 0x000008, "Member 'DBDPlayer_AddDetectionZone::Zone' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.AttachInteractor
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_AttachInteractor final
{
public:
	class UInteractor*                            Interactor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_AttachInteractor) == 0x000008, "Wrong alignment on DBDPlayer_AttachInteractor");
static_assert(sizeof(DBDPlayer_AttachInteractor) == 0x000008, "Wrong size on DBDPlayer_AttachInteractor");
static_assert(offsetof(DBDPlayer_AttachInteractor, Interactor) == 0x000000, "Member 'DBDPlayer_AttachInteractor::Interactor' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Authority_HandleScoreEvent
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_Authority_HandleScoreEvent final
{
public:
	struct FGameplayTag                           ScoreTypeTag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScoreEventData                        ScoreEventData;                                    // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Authority_HandleScoreEvent) == 0x000008, "Wrong alignment on DBDPlayer_Authority_HandleScoreEvent");
static_assert(sizeof(DBDPlayer_Authority_HandleScoreEvent) == 0x000028, "Wrong size on DBDPlayer_Authority_HandleScoreEvent");
static_assert(offsetof(DBDPlayer_Authority_HandleScoreEvent, ScoreTypeTag) == 0x000000, "Member 'DBDPlayer_Authority_HandleScoreEvent::ScoreTypeTag' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_HandleScoreEvent, ScoreEventData) == 0x000010, "Member 'DBDPlayer_Authority_HandleScoreEvent::ScoreEventData' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Authority_RequestStun
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_Authority_RequestStun final
{
public:
	EStunType                                     StunType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Stunner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Authority_RequestStun) == 0x000008, "Wrong alignment on DBDPlayer_Authority_RequestStun");
static_assert(sizeof(DBDPlayer_Authority_RequestStun) == 0x000010, "Wrong size on DBDPlayer_Authority_RequestStun");
static_assert(offsetof(DBDPlayer_Authority_RequestStun, StunType) == 0x000000, "Member 'DBDPlayer_Authority_RequestStun::StunType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Authority_RequestStun, Stunner) == 0x000008, "Member 'DBDPlayer_Authority_RequestStun::Stunner' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Authority_SetDreamworldComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_Authority_SetDreamworldComponent final
{
public:
	class UCharacterDreamworldComponent*          Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Authority_SetDreamworldComponent) == 0x000008, "Wrong alignment on DBDPlayer_Authority_SetDreamworldComponent");
static_assert(sizeof(DBDPlayer_Authority_SetDreamworldComponent) == 0x000008, "Wrong size on DBDPlayer_Authority_SetDreamworldComponent");
static_assert(offsetof(DBDPlayer_Authority_SetDreamworldComponent, Component) == 0x000000, "Member 'DBDPlayer_Authority_SetDreamworldComponent::Component' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.CancelCarry
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_CancelCarry final
{
public:
	bool                                          AlsoCancelForOtherPlayer;                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_CancelCarry) == 0x000001, "Wrong alignment on DBDPlayer_CancelCarry");
static_assert(sizeof(DBDPlayer_CancelCarry) == 0x000001, "Wrong size on DBDPlayer_CancelCarry");
static_assert(offsetof(DBDPlayer_CancelCarry, AlsoCancelForOtherPlayer) == 0x000000, "Member 'DBDPlayer_CancelCarry::AlsoCancelForOtherPlayer' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Client_SendCancelInteraction
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_Client_SendCancelInteraction final
{
public:
	const class UInteractionDefinition*           InteractionDefinition;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Client_SendCancelInteraction) == 0x000008, "Wrong alignment on DBDPlayer_Client_SendCancelInteraction");
static_assert(sizeof(DBDPlayer_Client_SendCancelInteraction) == 0x000008, "Wrong size on DBDPlayer_Client_SendCancelInteraction");
static_assert(offsetof(DBDPlayer_Client_SendCancelInteraction, InteractionDefinition) == 0x000000, "Member 'DBDPlayer_Client_SendCancelInteraction::InteractionDefinition' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Client_TryInteraction
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_Client_TryInteraction final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsingInputPersistence;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_Client_TryInteraction) == 0x000008, "Wrong alignment on DBDPlayer_Client_TryInteraction");
static_assert(sizeof(DBDPlayer_Client_TryInteraction) == 0x000018, "Wrong size on DBDPlayer_Client_TryInteraction");
static_assert(offsetof(DBDPlayer_Client_TryInteraction, Interaction) == 0x000000, "Member 'DBDPlayer_Client_TryInteraction::Interaction' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Client_TryInteraction, Requester) == 0x000008, "Member 'DBDPlayer_Client_TryInteraction::Requester' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Client_TryInteraction, Force) == 0x000010, "Member 'DBDPlayer_Client_TryInteraction::Force' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Client_TryInteraction, UsingInputPersistence) == 0x000011, "Member 'DBDPlayer_Client_TryInteraction::UsingInputPersistence' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Client_TryInteractionType
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_Client_TryInteractionType final
{
public:
	EInputInteractionType                         InteractionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Client_TryInteractionType) == 0x000008, "Wrong alignment on DBDPlayer_Client_TryInteractionType");
static_assert(sizeof(DBDPlayer_Client_TryInteractionType) == 0x000010, "Wrong size on DBDPlayer_Client_TryInteractionType");
static_assert(offsetof(DBDPlayer_Client_TryInteractionType, InteractionType) == 0x000000, "Member 'DBDPlayer_Client_TryInteractionType::InteractionType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Client_TryInteractionType, Requester) == 0x000008, "Member 'DBDPlayer_Client_TryInteractionType::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.DBD_SetMouseLookUpSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier) == 0x000004, "Wrong alignment on DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier");
static_assert(sizeof(DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier) == 0x000004, "Wrong size on DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier");
static_assert(offsetof(DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier, Value) == 0x000000, "Member 'DBDPlayer_DBD_SetMouseLookUpSpeedMultiplier::Value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.DBD_SetMouseTurnSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_DBD_SetMouseTurnSpeedMultiplier final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_DBD_SetMouseTurnSpeedMultiplier) == 0x000004, "Wrong alignment on DBDPlayer_DBD_SetMouseTurnSpeedMultiplier");
static_assert(sizeof(DBDPlayer_DBD_SetMouseTurnSpeedMultiplier) == 0x000004, "Wrong size on DBDPlayer_DBD_SetMouseTurnSpeedMultiplier");
static_assert(offsetof(DBDPlayer_DBD_SetMouseTurnSpeedMultiplier, Value) == 0x000000, "Member 'DBDPlayer_DBD_SetMouseTurnSpeedMultiplier::Value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Dissolve
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Dissolve final
{
public:
	bool                                          Param_Dissolve;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Dissolve) == 0x000001, "Wrong alignment on DBDPlayer_Dissolve");
static_assert(sizeof(DBDPlayer_Dissolve) == 0x000001, "Wrong size on DBDPlayer_Dissolve");
static_assert(offsetof(DBDPlayer_Dissolve, Param_Dissolve) == 0x000000, "Member 'DBDPlayer_Dissolve::Param_Dissolve' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetInteractionPlayerProperties
// 0x0078 (0x0078 - 0x0000)
struct DBDPlayer_GetInteractionPlayerProperties final
{
public:
	struct FInteractionPlayerProperties           ReturnValue;                                       // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetInteractionPlayerProperties) == 0x000008, "Wrong alignment on DBDPlayer_GetInteractionPlayerProperties");
static_assert(sizeof(DBDPlayer_GetInteractionPlayerProperties) == 0x000078, "Wrong size on DBDPlayer_GetInteractionPlayerProperties");
static_assert(offsetof(DBDPlayer_GetInteractionPlayerProperties, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetInteractionPlayerProperties::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.K2_SetActorLocationByBottomCapsule
// 0x0118 (0x0118 - 0x0000)
struct DBDPlayer_K2_SetActorLocationByBottomCapsule final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSweep;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepHitResult;                                    // 0x0020(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0110(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_K2_SetActorLocationByBottomCapsule) == 0x000008, "Wrong alignment on DBDPlayer_K2_SetActorLocationByBottomCapsule");
static_assert(sizeof(DBDPlayer_K2_SetActorLocationByBottomCapsule) == 0x000118, "Wrong size on DBDPlayer_K2_SetActorLocationByBottomCapsule");
static_assert(offsetof(DBDPlayer_K2_SetActorLocationByBottomCapsule, NewLocation) == 0x000000, "Member 'DBDPlayer_K2_SetActorLocationByBottomCapsule::NewLocation' has a wrong offset!");
static_assert(offsetof(DBDPlayer_K2_SetActorLocationByBottomCapsule, bSweep) == 0x000018, "Member 'DBDPlayer_K2_SetActorLocationByBottomCapsule::bSweep' has a wrong offset!");
static_assert(offsetof(DBDPlayer_K2_SetActorLocationByBottomCapsule, SweepHitResult) == 0x000020, "Member 'DBDPlayer_K2_SetActorLocationByBottomCapsule::SweepHitResult' has a wrong offset!");
static_assert(offsetof(DBDPlayer_K2_SetActorLocationByBottomCapsule, ReturnValue) == 0x000110, "Member 'DBDPlayer_K2_SetActorLocationByBottomCapsule::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_Broadcast_DebugPlayMontage
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_Multicast_Broadcast_DebugPlayMontage final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_Multicast_Broadcast_DebugPlayMontage) == 0x000008, "Wrong alignment on DBDPlayer_Multicast_Broadcast_DebugPlayMontage");
static_assert(sizeof(DBDPlayer_Multicast_Broadcast_DebugPlayMontage) == 0x000028, "Wrong size on DBDPlayer_Multicast_Broadcast_DebugPlayMontage");
static_assert(offsetof(DBDPlayer_Multicast_Broadcast_DebugPlayMontage, AnimMontageID) == 0x000000, "Member 'DBDPlayer_Multicast_Broadcast_DebugPlayMontage::AnimMontageID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Multicast_Broadcast_DebugPlayMontage, PlayRate) == 0x000020, "Member 'DBDPlayer_Multicast_Broadcast_DebugPlayMontage::PlayRate' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_ConfirmItemDrop
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_ConfirmItemDrop final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_ConfirmItemDrop) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_ConfirmItemDrop");
static_assert(sizeof(DBDPlayer_Multicast_ConfirmItemDrop) == 0x000001, "Wrong size on DBDPlayer_Multicast_ConfirmItemDrop");
static_assert(offsetof(DBDPlayer_Multicast_ConfirmItemDrop, Pressed) == 0x000000, "Member 'DBDPlayer_Multicast_ConfirmItemDrop::Pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_Debug_SetMaxWalkSpeed
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_Multicast_Debug_SetMaxWalkSpeed final
{
public:
	float                                         MaxWalkSpeed;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_Debug_SetMaxWalkSpeed) == 0x000004, "Wrong alignment on DBDPlayer_Multicast_Debug_SetMaxWalkSpeed");
static_assert(sizeof(DBDPlayer_Multicast_Debug_SetMaxWalkSpeed) == 0x000004, "Wrong size on DBDPlayer_Multicast_Debug_SetMaxWalkSpeed");
static_assert(offsetof(DBDPlayer_Multicast_Debug_SetMaxWalkSpeed, MaxWalkSpeed) == 0x000000, "Member 'DBDPlayer_Multicast_Debug_SetMaxWalkSpeed::MaxWalkSpeed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_LeaveGame
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_Multicast_LeaveGame final
{
public:
	struct FGuid                                  UniqueLeavingPlayerId;                             // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_LeaveGame) == 0x000004, "Wrong alignment on DBDPlayer_Multicast_LeaveGame");
static_assert(sizeof(DBDPlayer_Multicast_LeaveGame) == 0x000010, "Wrong size on DBDPlayer_Multicast_LeaveGame");
static_assert(offsetof(DBDPlayer_Multicast_LeaveGame, UniqueLeavingPlayerId) == 0x000000, "Member 'DBDPlayer_Multicast_LeaveGame::UniqueLeavingPlayerId' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_ReplicateController
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_Multicast_ReplicateController final
{
public:
	class AController*                            NewController;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_ReplicateController) == 0x000008, "Wrong alignment on DBDPlayer_Multicast_ReplicateController");
static_assert(sizeof(DBDPlayer_Multicast_ReplicateController) == 0x000008, "Wrong size on DBDPlayer_Multicast_ReplicateController");
static_assert(offsetof(DBDPlayer_Multicast_ReplicateController, NewController) == 0x000000, "Member 'DBDPlayer_Multicast_ReplicateController::NewController' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetAuthoritativeMovement
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetAuthoritativeMovement final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetAuthoritativeMovement) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetAuthoritativeMovement");
static_assert(sizeof(DBDPlayer_Multicast_SetAuthoritativeMovement) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetAuthoritativeMovement");
static_assert(offsetof(DBDPlayer_Multicast_SetAuthoritativeMovement, Enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetAuthoritativeMovement::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetContinuousPrintDebug
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetContinuousPrintDebug final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetContinuousPrintDebug) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetContinuousPrintDebug");
static_assert(sizeof(DBDPlayer_Multicast_SetContinuousPrintDebug) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetContinuousPrintDebug");
static_assert(offsetof(DBDPlayer_Multicast_SetContinuousPrintDebug, Enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetContinuousPrintDebug::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetCustomization
// 0x0038 (0x0038 - 0x0000)
struct DBDPlayer_Multicast_SetCustomization final
{
public:
	struct FEquippedPlayerCustomization           Customization;                                     // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetCustomization) == 0x000008, "Wrong alignment on DBDPlayer_Multicast_SetCustomization");
static_assert(sizeof(DBDPlayer_Multicast_SetCustomization) == 0x000038, "Wrong size on DBDPlayer_Multicast_SetCustomization");
static_assert(offsetof(DBDPlayer_Multicast_SetCustomization, Customization) == 0x000000, "Member 'DBDPlayer_Multicast_SetCustomization::Customization' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetDebugCarry
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetDebugCarry final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetDebugCarry) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetDebugCarry");
static_assert(sizeof(DBDPlayer_Multicast_SetDebugCarry) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetDebugCarry");
static_assert(offsetof(DBDPlayer_Multicast_SetDebugCarry, Enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetDebugCarry::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetDebugPrintAvailableInteractions
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetDebugPrintAvailableInteractions final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetDebugPrintAvailableInteractions) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetDebugPrintAvailableInteractions");
static_assert(sizeof(DBDPlayer_Multicast_SetDebugPrintAvailableInteractions) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetDebugPrintAvailableInteractions");
static_assert(offsetof(DBDPlayer_Multicast_SetDebugPrintAvailableInteractions, Enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetDebugPrintAvailableInteractions::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetDebugSnapPoint
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetDebugSnapPoint final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetDebugSnapPoint) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetDebugSnapPoint");
static_assert(sizeof(DBDPlayer_Multicast_SetDebugSnapPoint) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetDebugSnapPoint");
static_assert(offsetof(DBDPlayer_Multicast_SetDebugSnapPoint, Enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetDebugSnapPoint::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetEnableCapsuleDynamicResize
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetEnableCapsuleDynamicResize final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetEnableCapsuleDynamicResize) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetEnableCapsuleDynamicResize");
static_assert(sizeof(DBDPlayer_Multicast_SetEnableCapsuleDynamicResize) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetEnableCapsuleDynamicResize");
static_assert(offsetof(DBDPlayer_Multicast_SetEnableCapsuleDynamicResize, Enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetEnableCapsuleDynamicResize::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetForceAuthoritativeMovement
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetForceAuthoritativeMovement final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetForceAuthoritativeMovement) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetForceAuthoritativeMovement");
static_assert(sizeof(DBDPlayer_Multicast_SetForceAuthoritativeMovement) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetForceAuthoritativeMovement");
static_assert(offsetof(DBDPlayer_Multicast_SetForceAuthoritativeMovement, Value) == 0x000000, "Member 'DBDPlayer_Multicast_SetForceAuthoritativeMovement::Value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetInteractingPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_Multicast_SetInteractingPlayer final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetInteractingPlayer) == 0x000008, "Wrong alignment on DBDPlayer_Multicast_SetInteractingPlayer");
static_assert(sizeof(DBDPlayer_Multicast_SetInteractingPlayer) == 0x000008, "Wrong size on DBDPlayer_Multicast_SetInteractingPlayer");
static_assert(offsetof(DBDPlayer_Multicast_SetInteractingPlayer, InteractingPlayer) == 0x000000, "Member 'DBDPlayer_Multicast_SetInteractingPlayer::InteractingPlayer' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetReverseTraverseEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetReverseTraverseEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetReverseTraverseEnabled) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetReverseTraverseEnabled");
static_assert(sizeof(DBDPlayer_Multicast_SetReverseTraverseEnabled) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetReverseTraverseEnabled");
static_assert(offsetof(DBDPlayer_Multicast_SetReverseTraverseEnabled, Enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetReverseTraverseEnabled::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Multicast_SetRunVaultEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Multicast_SetRunVaultEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Multicast_SetRunVaultEnabled) == 0x000001, "Wrong alignment on DBDPlayer_Multicast_SetRunVaultEnabled");
static_assert(sizeof(DBDPlayer_Multicast_SetRunVaultEnabled) == 0x000001, "Wrong size on DBDPlayer_Multicast_SetRunVaultEnabled");
static_assert(offsetof(DBDPlayer_Multicast_SetRunVaultEnabled, Enabled) == 0x000000, "Member 'DBDPlayer_Multicast_SetRunVaultEnabled::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnControllerChanged
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_OnControllerChanged final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            OldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            NewController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnControllerChanged) == 0x000008, "Wrong alignment on DBDPlayer_OnControllerChanged");
static_assert(sizeof(DBDPlayer_OnControllerChanged) == 0x000018, "Wrong size on DBDPlayer_OnControllerChanged");
static_assert(offsetof(DBDPlayer_OnControllerChanged, Pawn) == 0x000000, "Member 'DBDPlayer_OnControllerChanged::Pawn' has a wrong offset!");
static_assert(offsetof(DBDPlayer_OnControllerChanged, OldController) == 0x000008, "Member 'DBDPlayer_OnControllerChanged::OldController' has a wrong offset!");
static_assert(offsetof(DBDPlayer_OnControllerChanged, NewController) == 0x000010, "Member 'DBDPlayer_OnControllerChanged::NewController' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnHudVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_OnHudVisibilityChanged final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnHudVisibilityChanged) == 0x000001, "Wrong alignment on DBDPlayer_OnHudVisibilityChanged");
static_assert(sizeof(DBDPlayer_OnHudVisibilityChanged) == 0x000001, "Wrong size on DBDPlayer_OnHudVisibilityChanged");
static_assert(offsetof(DBDPlayer_OnHudVisibilityChanged, IsVisible) == 0x000000, "Member 'DBDPlayer_OnHudVisibilityChanged::IsVisible' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnHudVisibilityChangedNative
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_OnHudVisibilityChangedNative final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnHudVisibilityChangedNative) == 0x000001, "Wrong alignment on DBDPlayer_OnHudVisibilityChangedNative");
static_assert(sizeof(DBDPlayer_OnHudVisibilityChangedNative) == 0x000001, "Wrong size on DBDPlayer_OnHudVisibilityChangedNative");
static_assert(offsetof(DBDPlayer_OnHudVisibilityChangedNative, IsVisible) == 0x000000, "Member 'DBDPlayer_OnHudVisibilityChangedNative::IsVisible' has a wrong offset!");

// DelegateFunction DeadByDaylight.DBDPlayer.OnIsCrouchedChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_OnIsCrouchedChanged__DelegateSignature final
{
public:
	bool                                          IsCrouched;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnIsCrouchedChanged__DelegateSignature) == 0x000001, "Wrong alignment on DBDPlayer_OnIsCrouchedChanged__DelegateSignature");
static_assert(sizeof(DBDPlayer_OnIsCrouchedChanged__DelegateSignature) == 0x000001, "Wrong size on DBDPlayer_OnIsCrouchedChanged__DelegateSignature");
static_assert(offsetof(DBDPlayer_OnIsCrouchedChanged__DelegateSignature, IsCrouched) == 0x000000, "Member 'DBDPlayer_OnIsCrouchedChanged__DelegateSignature::IsCrouched' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnPickupEnd
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_OnPickupEnd final
{
public:
	class ADBDPlayer*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnPickupEnd) == 0x000008, "Wrong alignment on DBDPlayer_OnPickupEnd");
static_assert(sizeof(DBDPlayer_OnPickupEnd) == 0x000008, "Wrong size on DBDPlayer_OnPickupEnd");
static_assert(offsetof(DBDPlayer_OnPickupEnd, Target) == 0x000000, "Member 'DBDPlayer_OnPickupEnd::Target' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnPickupStart
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_OnPickupStart final
{
public:
	class ADBDPlayer*                             Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnPickupStart) == 0x000008, "Wrong alignment on DBDPlayer_OnPickupStart");
static_assert(sizeof(DBDPlayer_OnPickupStart) == 0x000008, "Wrong size on DBDPlayer_OnPickupStart");
static_assert(offsetof(DBDPlayer_OnPickupStart, Target) == 0x000000, "Member 'DBDPlayer_OnPickupStart::Target' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.RemoveStatusEffect
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_RemoveStatusEffect final
{
public:
	class UStatusEffect*                          StatusEffect;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_RemoveStatusEffect) == 0x000008, "Wrong alignment on DBDPlayer_RemoveStatusEffect");
static_assert(sizeof(DBDPlayer_RemoveStatusEffect) == 0x000008, "Wrong size on DBDPlayer_RemoveStatusEffect");
static_assert(offsetof(DBDPlayer_RemoveStatusEffect, StatusEffect) == 0x000000, "Member 'DBDPlayer_RemoveStatusEffect::StatusEffect' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.ResetPitchScale
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_ResetPitchScale final
{
public:
	float                                         AdjustTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_ResetPitchScale) == 0x000004, "Wrong alignment on DBDPlayer_ResetPitchScale");
static_assert(sizeof(DBDPlayer_ResetPitchScale) == 0x000004, "Wrong size on DBDPlayer_ResetPitchScale");
static_assert(offsetof(DBDPlayer_ResetPitchScale, AdjustTime) == 0x000000, "Member 'DBDPlayer_ResetPitchScale::AdjustTime' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_Broadcast_DebugPlayMontage
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_Server_Broadcast_DebugPlayMontage final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_Server_Broadcast_DebugPlayMontage) == 0x000008, "Wrong alignment on DBDPlayer_Server_Broadcast_DebugPlayMontage");
static_assert(sizeof(DBDPlayer_Server_Broadcast_DebugPlayMontage) == 0x000028, "Wrong size on DBDPlayer_Server_Broadcast_DebugPlayMontage");
static_assert(offsetof(DBDPlayer_Server_Broadcast_DebugPlayMontage, AnimMontageID) == 0x000000, "Member 'DBDPlayer_Server_Broadcast_DebugPlayMontage::AnimMontageID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Server_Broadcast_DebugPlayMontage, PlayRate) == 0x000020, "Member 'DBDPlayer_Server_Broadcast_DebugPlayMontage::PlayRate' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_DebugSetCustomization
// 0x0038 (0x0038 - 0x0000)
struct DBDPlayer_Server_DebugSetCustomization final
{
public:
	struct FEquippedPlayerCustomization           Customization;                                     // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_DebugSetCustomization) == 0x000008, "Wrong alignment on DBDPlayer_Server_DebugSetCustomization");
static_assert(sizeof(DBDPlayer_Server_DebugSetCustomization) == 0x000038, "Wrong size on DBDPlayer_Server_DebugSetCustomization");
static_assert(offsetof(DBDPlayer_Server_DebugSetCustomization, Customization) == 0x000000, "Member 'DBDPlayer_Server_DebugSetCustomization::Customization' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendAbilityInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendAbilityInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendAbilityInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendAbilityInput");
static_assert(sizeof(DBDPlayer_Server_SendAbilityInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendAbilityInput");
static_assert(offsetof(DBDPlayer_Server_SendAbilityInput, Pressed) == 0x000000, "Member 'DBDPlayer_Server_SendAbilityInput::Pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendAbilityTwoInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendAbilityTwoInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendAbilityTwoInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendAbilityTwoInput");
static_assert(sizeof(DBDPlayer_Server_SendAbilityTwoInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendAbilityTwoInput");
static_assert(offsetof(DBDPlayer_Server_SendAbilityTwoInput, Pressed) == 0x000000, "Member 'DBDPlayer_Server_SendAbilityTwoInput::Pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendEventAbilityInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendEventAbilityInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendEventAbilityInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendEventAbilityInput");
static_assert(sizeof(DBDPlayer_Server_SendEventAbilityInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendEventAbilityInput");
static_assert(offsetof(DBDPlayer_Server_SendEventAbilityInput, Pressed) == 0x000000, "Member 'DBDPlayer_Server_SendEventAbilityInput::Pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendFastInteractionInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendFastInteractionInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendFastInteractionInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendFastInteractionInput");
static_assert(sizeof(DBDPlayer_Server_SendFastInteractionInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendFastInteractionInput");
static_assert(offsetof(DBDPlayer_Server_SendFastInteractionInput, Pressed) == 0x000000, "Member 'DBDPlayer_Server_SendFastInteractionInput::Pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendInteractionInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendInteractionInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendInteractionInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendInteractionInput");
static_assert(sizeof(DBDPlayer_Server_SendInteractionInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendInteractionInput");
static_assert(offsetof(DBDPlayer_Server_SendInteractionInput, Pressed) == 0x000000, "Member 'DBDPlayer_Server_SendInteractionInput::Pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendItemDropInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendItemDropInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendItemDropInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendItemDropInput");
static_assert(sizeof(DBDPlayer_Server_SendItemDropInput) == 0x000001, "Wrong size on DBDPlayer_Server_SendItemDropInput");
static_assert(offsetof(DBDPlayer_Server_SendItemDropInput, Pressed) == 0x000000, "Member 'DBDPlayer_Server_SendItemDropInput::Pressed' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendItemUseInput
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_Server_SendItemUseInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RequestItemUse;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendItemUseInput) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendItemUseInput");
static_assert(sizeof(DBDPlayer_Server_SendItemUseInput) == 0x000002, "Wrong size on DBDPlayer_Server_SendItemUseInput");
static_assert(offsetof(DBDPlayer_Server_SendItemUseInput, Pressed) == 0x000000, "Member 'DBDPlayer_Server_SendItemUseInput::Pressed' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Server_SendItemUseInput, RequestItemUse) == 0x000001, "Member 'DBDPlayer_Server_SendItemUseInput::RequestItemUse' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_SendSecondaryActionPressed
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_Server_SendSecondaryActionPressed final
{
public:
	bool                                          FromCancelRequest;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_SendSecondaryActionPressed) == 0x000001, "Wrong alignment on DBDPlayer_Server_SendSecondaryActionPressed");
static_assert(sizeof(DBDPlayer_Server_SendSecondaryActionPressed) == 0x000001, "Wrong size on DBDPlayer_Server_SendSecondaryActionPressed");
static_assert(offsetof(DBDPlayer_Server_SendSecondaryActionPressed, FromCancelRequest) == 0x000000, "Member 'DBDPlayer_Server_SendSecondaryActionPressed::FromCancelRequest' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Server_UpdateScreenAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_Server_UpdateScreenAspectRatio final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Server_UpdateScreenAspectRatio) == 0x000004, "Wrong alignment on DBDPlayer_Server_UpdateScreenAspectRatio");
static_assert(sizeof(DBDPlayer_Server_UpdateScreenAspectRatio) == 0x000004, "Wrong size on DBDPlayer_Server_UpdateScreenAspectRatio");
static_assert(offsetof(DBDPlayer_Server_UpdateScreenAspectRatio, Value) == 0x000000, "Member 'DBDPlayer_Server_UpdateScreenAspectRatio::Value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetAllDetectionZonesEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetAllDetectionZonesEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetAllDetectionZonesEnabled) == 0x000001, "Wrong alignment on DBDPlayer_SetAllDetectionZonesEnabled");
static_assert(sizeof(DBDPlayer_SetAllDetectionZonesEnabled) == 0x000001, "Wrong size on DBDPlayer_SetAllDetectionZonesEnabled");
static_assert(offsetof(DBDPlayer_SetAllDetectionZonesEnabled, Enabled) == 0x000000, "Member 'DBDPlayer_SetAllDetectionZonesEnabled::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetAnimationCrouchState
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetAnimationCrouchState final
{
public:
	bool                                          Crouched;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetAnimationCrouchState) == 0x000001, "Wrong alignment on DBDPlayer_SetAnimationCrouchState");
static_assert(sizeof(DBDPlayer_SetAnimationCrouchState) == 0x000001, "Wrong size on DBDPlayer_SetAnimationCrouchState");
static_assert(offsetof(DBDPlayer_SetAnimationCrouchState, Crouched) == 0x000000, "Member 'DBDPlayer_SetAnimationCrouchState::Crouched' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetDetectionZoneEnabled
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_SetDetectionZoneEnabled final
{
public:
	EDetectionZone                                DetectionZoneID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetDetectionZoneEnabled) == 0x000001, "Wrong alignment on DBDPlayer_SetDetectionZoneEnabled");
static_assert(sizeof(DBDPlayer_SetDetectionZoneEnabled) == 0x000002, "Wrong size on DBDPlayer_SetDetectionZoneEnabled");
static_assert(offsetof(DBDPlayer_SetDetectionZoneEnabled, DetectionZoneID) == 0x000000, "Member 'DBDPlayer_SetDetectionZoneEnabled::DetectionZoneID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SetDetectionZoneEnabled, Enabled) == 0x000001, "Member 'DBDPlayer_SetDetectionZoneEnabled::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetFirstPersonModelEnabled
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_SetFirstPersonModelEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetFirstPersonModelEnabled) == 0x000001, "Wrong alignment on DBDPlayer_SetFirstPersonModelEnabled");
static_assert(sizeof(DBDPlayer_SetFirstPersonModelEnabled) == 0x000002, "Wrong size on DBDPlayer_SetFirstPersonModelEnabled");
static_assert(offsetof(DBDPlayer_SetFirstPersonModelEnabled, Enabled) == 0x000000, "Member 'DBDPlayer_SetFirstPersonModelEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(DBDPlayer_SetFirstPersonModelEnabled, Force) == 0x000001, "Member 'DBDPlayer_SetFirstPersonModelEnabled::Force' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetFirstPersonVfxsVisibility
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetFirstPersonVfxsVisibility final
{
public:
	bool                                          IsFirstPerson;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetFirstPersonVfxsVisibility) == 0x000001, "Wrong alignment on DBDPlayer_SetFirstPersonVfxsVisibility");
static_assert(sizeof(DBDPlayer_SetFirstPersonVfxsVisibility) == 0x000001, "Wrong size on DBDPlayer_SetFirstPersonVfxsVisibility");
static_assert(offsetof(DBDPlayer_SetFirstPersonVfxsVisibility, IsFirstPerson) == 0x000000, "Member 'DBDPlayer_SetFirstPersonVfxsVisibility::IsFirstPerson' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetForceDisableSkillChecks
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetForceDisableSkillChecks final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetForceDisableSkillChecks) == 0x000001, "Wrong alignment on DBDPlayer_SetForceDisableSkillChecks");
static_assert(sizeof(DBDPlayer_SetForceDisableSkillChecks) == 0x000001, "Wrong size on DBDPlayer_SetForceDisableSkillChecks");
static_assert(offsetof(DBDPlayer_SetForceDisableSkillChecks, IsEnabled) == 0x000000, "Member 'DBDPlayer_SetForceDisableSkillChecks::IsEnabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetItemUseAsToggle
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetItemUseAsToggle final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetItemUseAsToggle) == 0x000001, "Wrong alignment on DBDPlayer_SetItemUseAsToggle");
static_assert(sizeof(DBDPlayer_SetItemUseAsToggle) == 0x000001, "Wrong size on DBDPlayer_SetItemUseAsToggle");
static_assert(offsetof(DBDPlayer_SetItemUseAsToggle, Value) == 0x000000, "Member 'DBDPlayer_SetItemUseAsToggle::Value' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetQuestEventHandlerComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_SetQuestEventHandlerComponent final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetQuestEventHandlerComponent) == 0x000008, "Wrong alignment on DBDPlayer_SetQuestEventHandlerComponent");
static_assert(sizeof(DBDPlayer_SetQuestEventHandlerComponent) == 0x000008, "Wrong size on DBDPlayer_SetQuestEventHandlerComponent");
static_assert(offsetof(DBDPlayer_SetQuestEventHandlerComponent, Component) == 0x000000, "Member 'DBDPlayer_SetQuestEventHandlerComponent::Component' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetReverseMontage
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetReverseMontage final
{
public:
	bool                                          Reverse;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetReverseMontage) == 0x000001, "Wrong alignment on DBDPlayer_SetReverseMontage");
static_assert(sizeof(DBDPlayer_SetReverseMontage) == 0x000001, "Wrong size on DBDPlayer_SetReverseMontage");
static_assert(offsetof(DBDPlayer_SetReverseMontage, Reverse) == 0x000000, "Member 'DBDPlayer_SetReverseMontage::Reverse' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.SetShouldPlayCarryAnim
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_SetShouldPlayCarryAnim final
{
public:
	bool                                          Param_ShouldPlayCarryAnim;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_SetShouldPlayCarryAnim) == 0x000001, "Wrong alignment on DBDPlayer_SetShouldPlayCarryAnim");
static_assert(sizeof(DBDPlayer_SetShouldPlayCarryAnim) == 0x000001, "Wrong size on DBDPlayer_SetShouldPlayCarryAnim");
static_assert(offsetof(DBDPlayer_SetShouldPlayCarryAnim, Param_ShouldPlayCarryAnim) == 0x000000, "Member 'DBDPlayer_SetShouldPlayCarryAnim::Param_ShouldPlayCarryAnim' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.TriggerAnimNotify
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_TriggerAnimNotify final
{
public:
	EAnimNotifyType                               AnimNotifyType;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_TriggerAnimNotify) == 0x000001, "Wrong alignment on DBDPlayer_TriggerAnimNotify");
static_assert(sizeof(DBDPlayer_TriggerAnimNotify) == 0x000001, "Wrong size on DBDPlayer_TriggerAnimNotify");
static_assert(offsetof(DBDPlayer_TriggerAnimNotify, AnimNotifyType) == 0x000000, "Member 'DBDPlayer_TriggerAnimNotify::AnimNotifyType' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.TryInteraction
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_TryInteraction final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsingInputPersistence;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_TryInteraction) == 0x000008, "Wrong alignment on DBDPlayer_TryInteraction");
static_assert(sizeof(DBDPlayer_TryInteraction) == 0x000018, "Wrong size on DBDPlayer_TryInteraction");
static_assert(offsetof(DBDPlayer_TryInteraction, Interaction) == 0x000000, "Member 'DBDPlayer_TryInteraction::Interaction' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteraction, Requester) == 0x000008, "Member 'DBDPlayer_TryInteraction::Requester' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteraction, Force) == 0x000010, "Member 'DBDPlayer_TryInteraction::Force' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteraction, UsingInputPersistence) == 0x000011, "Member 'DBDPlayer_TryInteraction::UsingInputPersistence' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteraction, ReturnValue) == 0x000012, "Member 'DBDPlayer_TryInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.TryInteractionType
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_TryInteractionType final
{
public:
	EInputInteractionType                         InteractionInputType;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Requester;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsingInputPersistence;                             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0012(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_TryInteractionType) == 0x000008, "Wrong alignment on DBDPlayer_TryInteractionType");
static_assert(sizeof(DBDPlayer_TryInteractionType) == 0x000018, "Wrong size on DBDPlayer_TryInteractionType");
static_assert(offsetof(DBDPlayer_TryInteractionType, InteractionInputType) == 0x000000, "Member 'DBDPlayer_TryInteractionType::InteractionInputType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteractionType, Requester) == 0x000008, "Member 'DBDPlayer_TryInteractionType::Requester' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteractionType, UsingInputPersistence) == 0x000010, "Member 'DBDPlayer_TryInteractionType::UsingInputPersistence' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteractionType, Force) == 0x000011, "Member 'DBDPlayer_TryInteractionType::Force' has a wrong offset!");
static_assert(offsetof(DBDPlayer_TryInteractionType, ReturnValue) == 0x000012, "Member 'DBDPlayer_TryInteractionType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.CanInterrupt_BP
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_CanInterrupt_BP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_CanInterrupt_BP) == 0x000001, "Wrong alignment on DBDPlayer_CanInterrupt_BP");
static_assert(sizeof(DBDPlayer_CanInterrupt_BP) == 0x000001, "Wrong size on DBDPlayer_CanInterrupt_BP");
static_assert(offsetof(DBDPlayer_CanInterrupt_BP, ReturnValue) == 0x000000, "Member 'DBDPlayer_CanInterrupt_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.FindClosestSlashablePlayerInDetectionZone
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_FindClosestSlashablePlayerInDetectionZone final
{
public:
	EDetectionZone                                DetectionZoneID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_FindClosestSlashablePlayerInDetectionZone) == 0x000008, "Wrong alignment on DBDPlayer_FindClosestSlashablePlayerInDetectionZone");
static_assert(sizeof(DBDPlayer_FindClosestSlashablePlayerInDetectionZone) == 0x000010, "Wrong size on DBDPlayer_FindClosestSlashablePlayerInDetectionZone");
static_assert(offsetof(DBDPlayer_FindClosestSlashablePlayerInDetectionZone, DetectionZoneID) == 0x000000, "Member 'DBDPlayer_FindClosestSlashablePlayerInDetectionZone::DetectionZoneID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_FindClosestSlashablePlayerInDetectionZone, ReturnValue) == 0x000008, "Member 'DBDPlayer_FindClosestSlashablePlayerInDetectionZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetActorLocationFromFeetLocation
// 0x0030 (0x0030 - 0x0000)
struct DBDPlayer_GetActorLocationFromFeetLocation final
{
public:
	struct FVector                                FeetLocation;                                      // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetActorLocationFromFeetLocation) == 0x000008, "Wrong alignment on DBDPlayer_GetActorLocationFromFeetLocation");
static_assert(sizeof(DBDPlayer_GetActorLocationFromFeetLocation) == 0x000030, "Wrong size on DBDPlayer_GetActorLocationFromFeetLocation");
static_assert(offsetof(DBDPlayer_GetActorLocationFromFeetLocation, FeetLocation) == 0x000000, "Member 'DBDPlayer_GetActorLocationFromFeetLocation::FeetLocation' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetActorLocationFromFeetLocation, ReturnValue) == 0x000018, "Member 'DBDPlayer_GetActorLocationFromFeetLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAssociatedPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetAssociatedPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAssociatedPlayer) == 0x000008, "Wrong alignment on DBDPlayer_GetAssociatedPlayer");
static_assert(sizeof(DBDPlayer_GetAssociatedPlayer) == 0x000008, "Wrong size on DBDPlayer_GetAssociatedPlayer");
static_assert(offsetof(DBDPlayer_GetAssociatedPlayer, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetAssociatedPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAssociatedPlayerState
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetAssociatedPlayerState final
{
public:
	class APlayerState*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAssociatedPlayerState) == 0x000008, "Wrong alignment on DBDPlayer_GetAssociatedPlayerState");
static_assert(sizeof(DBDPlayer_GetAssociatedPlayerState) == 0x000008, "Wrong size on DBDPlayer_GetAssociatedPlayerState");
static_assert(offsetof(DBDPlayer_GetAssociatedPlayerState, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetAssociatedPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAttachPoint
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_GetAttachPoint final
{
public:
	class FName                                   AttachPointName;                                   // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAttachPoint) == 0x000008, "Wrong alignment on DBDPlayer_GetAttachPoint");
static_assert(sizeof(DBDPlayer_GetAttachPoint) == 0x000018, "Wrong size on DBDPlayer_GetAttachPoint");
static_assert(offsetof(DBDPlayer_GetAttachPoint, AttachPointName) == 0x000000, "Member 'DBDPlayer_GetAttachPoint::AttachPointName' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetAttachPoint, ReturnValue) == 0x000010, "Member 'DBDPlayer_GetAttachPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAuthoritativeMovementComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetAuthoritativeMovementComponent final
{
public:
	class UAuthoritativeMovementComponent*        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAuthoritativeMovementComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetAuthoritativeMovementComponent");
static_assert(sizeof(DBDPlayer_GetAuthoritativeMovementComponent) == 0x000008, "Wrong size on DBDPlayer_GetAuthoritativeMovementComponent");
static_assert(offsetof(DBDPlayer_GetAuthoritativeMovementComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetAuthoritativeMovementComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetAverageVelocity
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_GetAverageVelocity final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetAverageVelocity) == 0x000008, "Wrong alignment on DBDPlayer_GetAverageVelocity");
static_assert(sizeof(DBDPlayer_GetAverageVelocity) == 0x000018, "Wrong size on DBDPlayer_GetAverageVelocity");
static_assert(offsetof(DBDPlayer_GetAverageVelocity, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetAverageVelocity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetBlindableComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetBlindableComponent final
{
public:
	class UBlindableComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetBlindableComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetBlindableComponent");
static_assert(sizeof(DBDPlayer_GetBlindableComponent) == 0x000008, "Wrong size on DBDPlayer_GetBlindableComponent");
static_assert(offsetof(DBDPlayer_GetBlindableComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetBlindableComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetBoneLocation
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayer_GetBoneLocation final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneSpaces                                   Space;                                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetBoneLocation) == 0x000008, "Wrong alignment on DBDPlayer_GetBoneLocation");
static_assert(sizeof(DBDPlayer_GetBoneLocation) == 0x000028, "Wrong size on DBDPlayer_GetBoneLocation");
static_assert(offsetof(DBDPlayer_GetBoneLocation, Param_Name) == 0x000000, "Member 'DBDPlayer_GetBoneLocation::Param_Name' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetBoneLocation, Space) == 0x00000C, "Member 'DBDPlayer_GetBoneLocation::Space' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetBoneLocation, ReturnValue) == 0x000010, "Member 'DBDPlayer_GetBoneLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetCameraManager
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetCameraManager final
{
public:
	class ADBDPlayerCameraManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetCameraManager) == 0x000008, "Wrong alignment on DBDPlayer_GetCameraManager");
static_assert(sizeof(DBDPlayer_GetCameraManager) == 0x000008, "Wrong size on DBDPlayer_GetCameraManager");
static_assert(offsetof(DBDPlayer_GetCameraManager, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetCameraManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetCharacterInventoryComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetCharacterInventoryComponent final
{
public:
	class UCharacterInventoryComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetCharacterInventoryComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetCharacterInventoryComponent");
static_assert(sizeof(DBDPlayer_GetCharacterInventoryComponent) == 0x000008, "Wrong size on DBDPlayer_GetCharacterInventoryComponent");
static_assert(offsetof(DBDPlayer_GetCharacterInventoryComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetCharacterInventoryComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetChaseComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetChaseComponent final
{
public:
	class UChaseComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetChaseComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetChaseComponent");
static_assert(sizeof(DBDPlayer_GetChaseComponent) == 0x000008, "Wrong size on DBDPlayer_GetChaseComponent");
static_assert(offsetof(DBDPlayer_GetChaseComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetChaseComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetCurrentInteraction
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetCurrentInteraction final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetCurrentInteraction) == 0x000008, "Wrong alignment on DBDPlayer_GetCurrentInteraction");
static_assert(sizeof(DBDPlayer_GetCurrentInteraction) == 0x000008, "Wrong size on DBDPlayer_GetCurrentInteraction");
static_assert(offsetof(DBDPlayer_GetCurrentInteraction, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetCurrentInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetCurrentInteractionAnimation
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetCurrentInteractionAnimation final
{
public:
	EInteractionAnimation                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetCurrentInteractionAnimation) == 0x000001, "Wrong alignment on DBDPlayer_GetCurrentInteractionAnimation");
static_assert(sizeof(DBDPlayer_GetCurrentInteractionAnimation) == 0x000001, "Wrong size on DBDPlayer_GetCurrentInteractionAnimation");
static_assert(offsetof(DBDPlayer_GetCurrentInteractionAnimation, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetCurrentInteractionAnimation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetDBDPlayerState
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetDBDPlayerState final
{
public:
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetDBDPlayerState) == 0x000008, "Wrong alignment on DBDPlayer_GetDBDPlayerState");
static_assert(sizeof(DBDPlayer_GetDBDPlayerState) == 0x000008, "Wrong size on DBDPlayer_GetDBDPlayerState");
static_assert(offsetof(DBDPlayer_GetDBDPlayerState, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetDBDPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetDetectionZone
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetDetectionZone final
{
public:
	EDetectionZone                                DetectionZoneID;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetDetectionZone) == 0x000008, "Wrong alignment on DBDPlayer_GetDetectionZone");
static_assert(sizeof(DBDPlayer_GetDetectionZone) == 0x000010, "Wrong size on DBDPlayer_GetDetectionZone");
static_assert(offsetof(DBDPlayer_GetDetectionZone, DetectionZoneID) == 0x000000, "Member 'DBDPlayer_GetDetectionZone::DetectionZoneID' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetDetectionZone, ReturnValue) == 0x000008, "Member 'DBDPlayer_GetDetectionZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetDreamworldComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetDreamworldComponent final
{
public:
	class UCharacterDreamworldComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetDreamworldComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetDreamworldComponent");
static_assert(sizeof(DBDPlayer_GetDreamworldComponent) == 0x000008, "Wrong size on DBDPlayer_GetDreamworldComponent");
static_assert(offsetof(DBDPlayer_GetDreamworldComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetDreamworldComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetFeetPosition
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_GetFeetPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetFeetPosition) == 0x000008, "Wrong alignment on DBDPlayer_GetFeetPosition");
static_assert(sizeof(DBDPlayer_GetFeetPosition) == 0x000018, "Wrong size on DBDPlayer_GetFeetPosition");
static_assert(offsetof(DBDPlayer_GetFeetPosition, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetFeetPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetFirstComponentByClass
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetFirstComponentByClass final
{
public:
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetFirstComponentByClass) == 0x000008, "Wrong alignment on DBDPlayer_GetFirstComponentByClass");
static_assert(sizeof(DBDPlayer_GetFirstComponentByClass) == 0x000010, "Wrong size on DBDPlayer_GetFirstComponentByClass");
static_assert(offsetof(DBDPlayer_GetFirstComponentByClass, ComponentClass) == 0x000000, "Member 'DBDPlayer_GetFirstComponentByClass::ComponentClass' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetFirstComponentByClass, ReturnValue) == 0x000008, "Member 'DBDPlayer_GetFirstComponentByClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetGrassEffectRadiusMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_GetGrassEffectRadiusMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetGrassEffectRadiusMultiplier) == 0x000004, "Wrong alignment on DBDPlayer_GetGrassEffectRadiusMultiplier");
static_assert(sizeof(DBDPlayer_GetGrassEffectRadiusMultiplier) == 0x000004, "Wrong size on DBDPlayer_GetGrassEffectRadiusMultiplier");
static_assert(offsetof(DBDPlayer_GetGrassEffectRadiusMultiplier, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetGrassEffectRadiusMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetInteractable
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetInteractable) == 0x000008, "Wrong alignment on DBDPlayer_GetInteractable");
static_assert(sizeof(DBDPlayer_GetInteractable) == 0x000008, "Wrong size on DBDPlayer_GetInteractable");
static_assert(offsetof(DBDPlayer_GetInteractable, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetInteractionDetectorComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetInteractionDetectorComponent final
{
public:
	class UInteractionDetectorComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetInteractionDetectorComponent) == 0x000008, "Wrong alignment on DBDPlayer_GetInteractionDetectorComponent");
static_assert(sizeof(DBDPlayer_GetInteractionDetectorComponent) == 0x000008, "Wrong size on DBDPlayer_GetInteractionDetectorComponent");
static_assert(offsetof(DBDPlayer_GetInteractionDetectorComponent, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetInteractionDetectorComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetIsInFirstPerson
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetIsInFirstPerson final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetIsInFirstPerson) == 0x000001, "Wrong alignment on DBDPlayer_GetIsInFirstPerson");
static_assert(sizeof(DBDPlayer_GetIsInFirstPerson) == 0x000001, "Wrong size on DBDPlayer_GetIsInFirstPerson");
static_assert(offsetof(DBDPlayer_GetIsInFirstPerson, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetIsInFirstPerson::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetIsInteracting
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetIsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetIsInteracting) == 0x000001, "Wrong alignment on DBDPlayer_GetIsInteracting");
static_assert(sizeof(DBDPlayer_GetIsInteracting) == 0x000001, "Wrong size on DBDPlayer_GetIsInteracting");
static_assert(offsetof(DBDPlayer_GetIsInteracting, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetIsInteracting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetIsInterrupting
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetIsInterrupting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetIsInterrupting) == 0x000001, "Wrong alignment on DBDPlayer_GetIsInterrupting");
static_assert(sizeof(DBDPlayer_GetIsInterrupting) == 0x000001, "Wrong size on DBDPlayer_GetIsInterrupting");
static_assert(offsetof(DBDPlayer_GetIsInterrupting, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetIsInterrupting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetItemAddons
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetItemAddons final
{
public:
	TArray<class UItemAddon*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetItemAddons) == 0x000008, "Wrong alignment on DBDPlayer_GetItemAddons");
static_assert(sizeof(DBDPlayer_GetItemAddons) == 0x000010, "Wrong size on DBDPlayer_GetItemAddons");
static_assert(offsetof(DBDPlayer_GetItemAddons, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetItemAddons::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetItemModifiers
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetItemModifiers final
{
public:
	TArray<class UItemModifier*>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetItemModifiers) == 0x000008, "Wrong alignment on DBDPlayer_GetItemModifiers");
static_assert(sizeof(DBDPlayer_GetItemModifiers) == 0x000010, "Wrong size on DBDPlayer_GetItemModifiers");
static_assert(offsetof(DBDPlayer_GetItemModifiers, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetItemModifiers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetLuck
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_GetLuck final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetLuck) == 0x000004, "Wrong alignment on DBDPlayer_GetLuck");
static_assert(sizeof(DBDPlayer_GetLuck) == 0x000004, "Wrong size on DBDPlayer_GetLuck");
static_assert(offsetof(DBDPlayer_GetLuck, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetLuck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_GetMaxSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetMaxSpeed) == 0x000004, "Wrong alignment on DBDPlayer_GetMaxSpeed");
static_assert(sizeof(DBDPlayer_GetMaxSpeed) == 0x000004, "Wrong size on DBDPlayer_GetMaxSpeed");
static_assert(offsetof(DBDPlayer_GetMaxSpeed, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetMaxSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetNameDebugString
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_GetNameDebugString final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetNameDebugString) == 0x000008, "Wrong alignment on DBDPlayer_GetNameDebugString");
static_assert(sizeof(DBDPlayer_GetNameDebugString) == 0x000010, "Wrong size on DBDPlayer_GetNameDebugString");
static_assert(offsetof(DBDPlayer_GetNameDebugString, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetNameDebugString::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetObjectState
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetObjectState final
{
public:
	class UGameplayTagContainerComponent*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetObjectState) == 0x000008, "Wrong alignment on DBDPlayer_GetObjectState");
static_assert(sizeof(DBDPlayer_GetObjectState) == 0x000008, "Wrong size on DBDPlayer_GetObjectState");
static_assert(offsetof(DBDPlayer_GetObjectState, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetObjectState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetOtherCharactersVerticalCollisionsHandler
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetOtherCharactersVerticalCollisionsHandler final
{
public:
	class UOtherCharactersVerticalCollisionsHandler* ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetOtherCharactersVerticalCollisionsHandler) == 0x000008, "Wrong alignment on DBDPlayer_GetOtherCharactersVerticalCollisionsHandler");
static_assert(sizeof(DBDPlayer_GetOtherCharactersVerticalCollisionsHandler) == 0x000008, "Wrong size on DBDPlayer_GetOtherCharactersVerticalCollisionsHandler");
static_assert(offsetof(DBDPlayer_GetOtherCharactersVerticalCollisionsHandler, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetOtherCharactersVerticalCollisionsHandler::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPawnType
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetPawnType final
{
public:
	EPawnType                                     ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPawnType) == 0x000001, "Wrong alignment on DBDPlayer_GetPawnType");
static_assert(sizeof(DBDPlayer_GetPawnType) == 0x000001, "Wrong size on DBDPlayer_GetPawnType");
static_assert(offsetof(DBDPlayer_GetPawnType, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPawnType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPercentMovementSpeed
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayer_GetPercentMovementSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPercentMovementSpeed) == 0x000004, "Wrong alignment on DBDPlayer_GetPercentMovementSpeed");
static_assert(sizeof(DBDPlayer_GetPercentMovementSpeed) == 0x000004, "Wrong size on DBDPlayer_GetPercentMovementSpeed");
static_assert(offsetof(DBDPlayer_GetPercentMovementSpeed, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPercentMovementSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPerkManager
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetPerkManager final
{
public:
	class UPerkManager*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPerkManager) == 0x000008, "Wrong alignment on DBDPlayer_GetPerkManager");
static_assert(sizeof(DBDPlayer_GetPerkManager) == 0x000008, "Wrong size on DBDPlayer_GetPerkManager");
static_assert(offsetof(DBDPlayer_GetPerkManager, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPerkManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerCamera
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetPlayerCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerCamera) == 0x000008, "Wrong alignment on DBDPlayer_GetPlayerCamera");
static_assert(sizeof(DBDPlayer_GetPlayerCamera) == 0x000008, "Wrong size on DBDPlayer_GetPlayerCamera");
static_assert(offsetof(DBDPlayer_GetPlayerCamera, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerCamera::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerController
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetPlayerController final
{
public:
	class ADBDPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerController) == 0x000008, "Wrong alignment on DBDPlayer_GetPlayerController");
static_assert(sizeof(DBDPlayer_GetPlayerController) == 0x000008, "Wrong size on DBDPlayer_GetPlayerController");
static_assert(offsetof(DBDPlayer_GetPlayerController, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerDirection
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_GetPlayerDirection final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerDirection) == 0x000008, "Wrong alignment on DBDPlayer_GetPlayerDirection");
static_assert(sizeof(DBDPlayer_GetPlayerDirection) == 0x000018, "Wrong size on DBDPlayer_GetPlayerDirection");
static_assert(offsetof(DBDPlayer_GetPlayerDirection, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerDirection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerInteractionHandler
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetPlayerInteractionHandler final
{
public:
	class UPlayerInteractionHandler*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerInteractionHandler) == 0x000008, "Wrong alignment on DBDPlayer_GetPlayerInteractionHandler");
static_assert(sizeof(DBDPlayer_GetPlayerInteractionHandler) == 0x000008, "Wrong size on DBDPlayer_GetPlayerInteractionHandler");
static_assert(offsetof(DBDPlayer_GetPlayerInteractionHandler, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerInteractionHandler::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerRole
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetPlayerRole final
{
public:
	EPlayerRole                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerRole) == 0x000001, "Wrong alignment on DBDPlayer_GetPlayerRole");
static_assert(sizeof(DBDPlayer_GetPlayerRole) == 0x000001, "Wrong size on DBDPlayer_GetPlayerRole");
static_assert(offsetof(DBDPlayer_GetPlayerRole, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetPlayerTeam
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetPlayerTeam final
{
public:
	EPlayerTeam                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetPlayerTeam) == 0x000001, "Wrong alignment on DBDPlayer_GetPlayerTeam");
static_assert(sizeof(DBDPlayer_GetPlayerTeam) == 0x000001, "Wrong size on DBDPlayer_GetPlayerTeam");
static_assert(offsetof(DBDPlayer_GetPlayerTeam, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetPlayerTeam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetRepControlRotation
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_GetRepControlRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetRepControlRotation) == 0x000008, "Wrong alignment on DBDPlayer_GetRepControlRotation");
static_assert(sizeof(DBDPlayer_GetRepControlRotation) == 0x000018, "Wrong size on DBDPlayer_GetRepControlRotation");
static_assert(offsetof(DBDPlayer_GetRepControlRotation, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetRepControlRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetReverseTraverseEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetReverseTraverseEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetReverseTraverseEnabled) == 0x000001, "Wrong alignment on DBDPlayer_GetReverseTraverseEnabled");
static_assert(sizeof(DBDPlayer_GetReverseTraverseEnabled) == 0x000001, "Wrong size on DBDPlayer_GetReverseTraverseEnabled");
static_assert(offsetof(DBDPlayer_GetReverseTraverseEnabled, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetReverseTraverseEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetRunVaultEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_GetRunVaultEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetRunVaultEnabled) == 0x000001, "Wrong alignment on DBDPlayer_GetRunVaultEnabled");
static_assert(sizeof(DBDPlayer_GetRunVaultEnabled) == 0x000001, "Wrong size on DBDPlayer_GetRunVaultEnabled");
static_assert(offsetof(DBDPlayer_GetRunVaultEnabled, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetRunVaultEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetSharedPlayerController
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetSharedPlayerController final
{
public:
	class ADBDPlayerController*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetSharedPlayerController) == 0x000008, "Wrong alignment on DBDPlayer_GetSharedPlayerController");
static_assert(sizeof(DBDPlayer_GetSharedPlayerController) == 0x000008, "Wrong size on DBDPlayer_GetSharedPlayerController");
static_assert(offsetof(DBDPlayer_GetSharedPlayerController, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetSharedPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetStillnessStartTime
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayer_GetStillnessStartTime final
{
public:
	struct FDateTime                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetStillnessStartTime) == 0x000008, "Wrong alignment on DBDPlayer_GetStillnessStartTime");
static_assert(sizeof(DBDPlayer_GetStillnessStartTime) == 0x000008, "Wrong size on DBDPlayer_GetStillnessStartTime");
static_assert(offsetof(DBDPlayer_GetStillnessStartTime, ReturnValue) == 0x000000, "Member 'DBDPlayer_GetStillnessStartTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.GetTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayer_GetTunableValue final
{
public:
	class FName                                   Key;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultValue;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WarnIfRowMissing;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_GetTunableValue) == 0x000004, "Wrong alignment on DBDPlayer_GetTunableValue");
static_assert(sizeof(DBDPlayer_GetTunableValue) == 0x000018, "Wrong size on DBDPlayer_GetTunableValue");
static_assert(offsetof(DBDPlayer_GetTunableValue, Key) == 0x000000, "Member 'DBDPlayer_GetTunableValue::Key' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetTunableValue, DefaultValue) == 0x00000C, "Member 'DBDPlayer_GetTunableValue::DefaultValue' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetTunableValue, WarnIfRowMissing) == 0x000010, "Member 'DBDPlayer_GetTunableValue::WarnIfRowMissing' has a wrong offset!");
static_assert(offsetof(DBDPlayer_GetTunableValue, ReturnValue) == 0x000014, "Member 'DBDPlayer_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.HasClearPathToTarget
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayer_HasClearPathToTarget final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_HasClearPathToTarget) == 0x000008, "Wrong alignment on DBDPlayer_HasClearPathToTarget");
static_assert(sizeof(DBDPlayer_HasClearPathToTarget) == 0x000020, "Wrong size on DBDPlayer_HasClearPathToTarget");
static_assert(offsetof(DBDPlayer_HasClearPathToTarget, TargetPosition) == 0x000000, "Member 'DBDPlayer_HasClearPathToTarget::TargetPosition' has a wrong offset!");
static_assert(offsetof(DBDPlayer_HasClearPathToTarget, ReturnValue) == 0x000018, "Member 'DBDPlayer_HasClearPathToTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.HasClearPathToTargetWithFilter
// 0x0030 (0x0030 - 0x0000)
struct DBDPlayer_HasClearPathToTargetWithFilter final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     ClassFilter;                                       // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 IgnoreActor;                                       // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_HasClearPathToTargetWithFilter) == 0x000008, "Wrong alignment on DBDPlayer_HasClearPathToTargetWithFilter");
static_assert(sizeof(DBDPlayer_HasClearPathToTargetWithFilter) == 0x000030, "Wrong size on DBDPlayer_HasClearPathToTargetWithFilter");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithFilter, TargetPosition) == 0x000000, "Member 'DBDPlayer_HasClearPathToTargetWithFilter::TargetPosition' has a wrong offset!");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithFilter, ClassFilter) == 0x000018, "Member 'DBDPlayer_HasClearPathToTargetWithFilter::ClassFilter' has a wrong offset!");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithFilter, IgnoreActor) == 0x000020, "Member 'DBDPlayer_HasClearPathToTargetWithFilter::IgnoreActor' has a wrong offset!");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithFilter, ReturnValue) == 0x000028, "Member 'DBDPlayer_HasClearPathToTargetWithFilter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.HasClearPathToTargetWithIgnore
// 0x0030 (0x0030 - 0x0000)
struct DBDPlayer_HasClearPathToTargetWithIgnore final
{
public:
	struct FVector                                TargetPosition;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0018(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayer_HasClearPathToTargetWithIgnore) == 0x000008, "Wrong alignment on DBDPlayer_HasClearPathToTargetWithIgnore");
static_assert(sizeof(DBDPlayer_HasClearPathToTargetWithIgnore) == 0x000030, "Wrong size on DBDPlayer_HasClearPathToTargetWithIgnore");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithIgnore, TargetPosition) == 0x000000, "Member 'DBDPlayer_HasClearPathToTargetWithIgnore::TargetPosition' has a wrong offset!");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithIgnore, IgnoreActors) == 0x000018, "Member 'DBDPlayer_HasClearPathToTargetWithIgnore::IgnoreActors' has a wrong offset!");
static_assert(offsetof(DBDPlayer_HasClearPathToTargetWithIgnore, ReturnValue) == 0x000028, "Member 'DBDPlayer_HasClearPathToTargetWithIgnore::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.HasDamageImmunity
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_HasDamageImmunity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_HasDamageImmunity) == 0x000001, "Wrong alignment on DBDPlayer_HasDamageImmunity");
static_assert(sizeof(DBDPlayer_HasDamageImmunity) == 0x000001, "Wrong size on DBDPlayer_HasDamageImmunity");
static_assert(offsetof(DBDPlayer_HasDamageImmunity, ReturnValue) == 0x000000, "Member 'DBDPlayer_HasDamageImmunity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.HasMoveInput
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_HasMoveInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_HasMoveInput) == 0x000001, "Wrong alignment on DBDPlayer_HasMoveInput");
static_assert(sizeof(DBDPlayer_HasMoveInput) == 0x000001, "Wrong size on DBDPlayer_HasMoveInput");
static_assert(offsetof(DBDPlayer_HasMoveInput, ReturnValue) == 0x000000, "Member 'DBDPlayer_HasMoveInput::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsBeingInterrupted
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsBeingInterrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsBeingInterrupted) == 0x000001, "Wrong alignment on DBDPlayer_IsBeingInterrupted");
static_assert(sizeof(DBDPlayer_IsBeingInterrupted) == 0x000001, "Wrong size on DBDPlayer_IsBeingInterrupted");
static_assert(offsetof(DBDPlayer_IsBeingInterrupted, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsBeingInterrupted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsCloaked
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsCloaked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsCloaked) == 0x000001, "Wrong alignment on DBDPlayer_IsCloaked");
static_assert(sizeof(DBDPlayer_IsCloaked) == 0x000001, "Wrong size on DBDPlayer_IsCloaked");
static_assert(offsetof(DBDPlayer_IsCloaked, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsCloaked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsCrouching
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsCrouching final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsCrouching) == 0x000001, "Wrong alignment on DBDPlayer_IsCrouching");
static_assert(sizeof(DBDPlayer_IsCrouching) == 0x000001, "Wrong size on DBDPlayer_IsCrouching");
static_assert(offsetof(DBDPlayer_IsCrouching, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsCrouching::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsCrouchPressed
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsCrouchPressed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsCrouchPressed) == 0x000001, "Wrong alignment on DBDPlayer_IsCrouchPressed");
static_assert(sizeof(DBDPlayer_IsCrouchPressed) == 0x000001, "Wrong size on DBDPlayer_IsCrouchPressed");
static_assert(offsetof(DBDPlayer_IsCrouchPressed, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsCrouchPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsExhausted
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsExhausted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsExhausted) == 0x000001, "Wrong alignment on DBDPlayer_IsExhausted");
static_assert(sizeof(DBDPlayer_IsExhausted) == 0x000001, "Wrong size on DBDPlayer_IsExhausted");
static_assert(offsetof(DBDPlayer_IsExhausted, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsExhausted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsForPreview
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsForPreview final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsForPreview) == 0x000001, "Wrong alignment on DBDPlayer_IsForPreview");
static_assert(sizeof(DBDPlayer_IsForPreview) == 0x000001, "Wrong size on DBDPlayer_IsForPreview");
static_assert(offsetof(DBDPlayer_IsForPreview, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsForPreview::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsHeadHidden
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsHeadHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsHeadHidden) == 0x000001, "Wrong alignment on DBDPlayer_IsHeadHidden");
static_assert(sizeof(DBDPlayer_IsHeadHidden) == 0x000001, "Wrong size on DBDPlayer_IsHeadHidden");
static_assert(offsetof(DBDPlayer_IsHeadHidden, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsHeadHidden::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsIncapacitated
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsIncapacitated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsIncapacitated) == 0x000001, "Wrong alignment on DBDPlayer_IsIncapacitated");
static_assert(sizeof(DBDPlayer_IsIncapacitated) == 0x000001, "Wrong size on DBDPlayer_IsIncapacitated");
static_assert(offsetof(DBDPlayer_IsIncapacitated, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsIncapacitated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInMeathookZone
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInMeathookZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInMeathookZone) == 0x000001, "Wrong alignment on DBDPlayer_IsInMeathookZone");
static_assert(sizeof(DBDPlayer_IsInMeathookZone) == 0x000001, "Wrong size on DBDPlayer_IsInMeathookZone");
static_assert(offsetof(DBDPlayer_IsInMeathookZone, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInMeathookZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInParadise
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInParadise final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInParadise) == 0x000001, "Wrong alignment on DBDPlayer_IsInParadise");
static_assert(sizeof(DBDPlayer_IsInParadise) == 0x000001, "Wrong size on DBDPlayer_IsInParadise");
static_assert(offsetof(DBDPlayer_IsInParadise, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInParadise::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInsideCloset
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInsideCloset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInsideCloset) == 0x000001, "Wrong alignment on DBDPlayer_IsInsideCloset");
static_assert(sizeof(DBDPlayer_IsInsideCloset) == 0x000001, "Wrong size on DBDPlayer_IsInsideCloset");
static_assert(offsetof(DBDPlayer_IsInsideCloset, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInsideCloset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInStalkMode
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInStalkMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInStalkMode) == 0x000001, "Wrong alignment on DBDPlayer_IsInStalkMode");
static_assert(sizeof(DBDPlayer_IsInStalkMode) == 0x000001, "Wrong size on DBDPlayer_IsInStalkMode");
static_assert(offsetof(DBDPlayer_IsInStalkMode, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInStalkMode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInteractionInputPressed
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_IsInteractionInputPressed final
{
public:
	EInputInteractionType                         InteractionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInteractionInputPressed) == 0x000001, "Wrong alignment on DBDPlayer_IsInteractionInputPressed");
static_assert(sizeof(DBDPlayer_IsInteractionInputPressed) == 0x000002, "Wrong size on DBDPlayer_IsInteractionInputPressed");
static_assert(offsetof(DBDPlayer_IsInteractionInputPressed, InteractionType) == 0x000000, "Member 'DBDPlayer_IsInteractionInputPressed::InteractionType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_IsInteractionInputPressed, ReturnValue) == 0x000001, "Member 'DBDPlayer_IsInteractionInputPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsInTerrorRadius
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsInTerrorRadius final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsInTerrorRadius) == 0x000001, "Wrong alignment on DBDPlayer_IsInTerrorRadius");
static_assert(sizeof(DBDPlayer_IsInTerrorRadius) == 0x000001, "Wrong size on DBDPlayer_IsInTerrorRadius");
static_assert(offsetof(DBDPlayer_IsInTerrorRadius, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsInTerrorRadius::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsLocallyObserved
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsLocallyObserved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsLocallyObserved) == 0x000001, "Wrong alignment on DBDPlayer_IsLocallyObserved");
static_assert(sizeof(DBDPlayer_IsLocallyObserved) == 0x000001, "Wrong size on DBDPlayer_IsLocallyObserved");
static_assert(offsetof(DBDPlayer_IsLocallyObserved, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsLocallyObserved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsMoving
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsMoving final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsMoving) == 0x000001, "Wrong alignment on DBDPlayer_IsMoving");
static_assert(sizeof(DBDPlayer_IsMoving) == 0x000001, "Wrong size on DBDPlayer_IsMoving");
static_assert(offsetof(DBDPlayer_IsMoving, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsMoving::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_IsRunning) == 0x000001, "Wrong alignment on DBDPlayer_IsRunning");
static_assert(sizeof(DBDPlayer_IsRunning) == 0x000001, "Wrong size on DBDPlayer_IsRunning");
static_assert(offsetof(DBDPlayer_IsRunning, ReturnValue) == 0x000000, "Member 'DBDPlayer_IsRunning::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.Local_IsInteractionInputPressed
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayer_Local_IsInteractionInputPressed final
{
public:
	EInputInteractionType                         InteractionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_Local_IsInteractionInputPressed) == 0x000001, "Wrong alignment on DBDPlayer_Local_IsInteractionInputPressed");
static_assert(sizeof(DBDPlayer_Local_IsInteractionInputPressed) == 0x000002, "Wrong size on DBDPlayer_Local_IsInteractionInputPressed");
static_assert(offsetof(DBDPlayer_Local_IsInteractionInputPressed, InteractionType) == 0x000000, "Member 'DBDPlayer_Local_IsInteractionInputPressed::InteractionType' has a wrong offset!");
static_assert(offsetof(DBDPlayer_Local_IsInteractionInputPressed, ReturnValue) == 0x000001, "Member 'DBDPlayer_Local_IsInteractionInputPressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.OnGetCharacterName
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayer_OnGetCharacterName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_OnGetCharacterName) == 0x000008, "Wrong alignment on DBDPlayer_OnGetCharacterName");
static_assert(sizeof(DBDPlayer_OnGetCharacterName) == 0x000010, "Wrong size on DBDPlayer_OnGetCharacterName");
static_assert(offsetof(DBDPlayer_OnGetCharacterName, ReturnValue) == 0x000000, "Member 'DBDPlayer_OnGetCharacterName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.ShouldFall
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_ShouldFall final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_ShouldFall) == 0x000001, "Wrong alignment on DBDPlayer_ShouldFall");
static_assert(sizeof(DBDPlayer_ShouldFall) == 0x000001, "Wrong size on DBDPlayer_ShouldFall");
static_assert(offsetof(DBDPlayer_ShouldFall, ReturnValue) == 0x000000, "Member 'DBDPlayer_ShouldFall::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayer.ShouldPlayCarryAnim
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayer_ShouldPlayCarryAnim final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayer_ShouldPlayCarryAnim) == 0x000001, "Wrong alignment on DBDPlayer_ShouldPlayCarryAnim");
static_assert(sizeof(DBDPlayer_ShouldPlayCarryAnim) == 0x000001, "Wrong size on DBDPlayer_ShouldPlayCarryAnim");
static_assert(offsetof(DBDPlayer_ShouldPlayCarryAnim, ReturnValue) == 0x000000, "Member 'DBDPlayer_ShouldPlayCarryAnim::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDesignTunables.GetArrayGameTypeTunable
// 0x0018 (0x0018 - 0x0000)
struct DBDDesignTunables_GetArrayGameTypeTunable final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameTypeModifierName                         TunableName;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDesignTunables_GetArrayGameTypeTunable) == 0x000008, "Wrong alignment on DBDDesignTunables_GetArrayGameTypeTunable");
static_assert(sizeof(DBDDesignTunables_GetArrayGameTypeTunable) == 0x000018, "Wrong size on DBDDesignTunables_GetArrayGameTypeTunable");
static_assert(offsetof(DBDDesignTunables_GetArrayGameTypeTunable, GameType) == 0x000000, "Member 'DBDDesignTunables_GetArrayGameTypeTunable::GameType' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetArrayGameTypeTunable, TunableName) == 0x000001, "Member 'DBDDesignTunables_GetArrayGameTypeTunable::TunableName' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetArrayGameTypeTunable, ReturnValue) == 0x000008, "Member 'DBDDesignTunables_GetArrayGameTypeTunable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDesignTunables.GetBoolGameTypeTunable
// 0x0003 (0x0003 - 0x0000)
struct DBDDesignTunables_GetBoolGameTypeTunable final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameTypeModifierName                         TunableName;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0002(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDesignTunables_GetBoolGameTypeTunable) == 0x000001, "Wrong alignment on DBDDesignTunables_GetBoolGameTypeTunable");
static_assert(sizeof(DBDDesignTunables_GetBoolGameTypeTunable) == 0x000003, "Wrong size on DBDDesignTunables_GetBoolGameTypeTunable");
static_assert(offsetof(DBDDesignTunables_GetBoolGameTypeTunable, GameType) == 0x000000, "Member 'DBDDesignTunables_GetBoolGameTypeTunable::GameType' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetBoolGameTypeTunable, TunableName) == 0x000001, "Member 'DBDDesignTunables_GetBoolGameTypeTunable::TunableName' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetBoolGameTypeTunable, ReturnValue) == 0x000002, "Member 'DBDDesignTunables_GetBoolGameTypeTunable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDesignTunables.GetFloatGameTypeTunable
// 0x0008 (0x0008 - 0x0000)
struct DBDDesignTunables_GetFloatGameTypeTunable final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameTypeModifierName                         TunableName;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDesignTunables_GetFloatGameTypeTunable) == 0x000004, "Wrong alignment on DBDDesignTunables_GetFloatGameTypeTunable");
static_assert(sizeof(DBDDesignTunables_GetFloatGameTypeTunable) == 0x000008, "Wrong size on DBDDesignTunables_GetFloatGameTypeTunable");
static_assert(offsetof(DBDDesignTunables_GetFloatGameTypeTunable, GameType) == 0x000000, "Member 'DBDDesignTunables_GetFloatGameTypeTunable::GameType' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetFloatGameTypeTunable, TunableName) == 0x000001, "Member 'DBDDesignTunables_GetFloatGameTypeTunable::TunableName' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetFloatGameTypeTunable, ReturnValue) == 0x000004, "Member 'DBDDesignTunables_GetFloatGameTypeTunable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDesignTunables.GetIntGameTypeTunable
// 0x0008 (0x0008 - 0x0000)
struct DBDDesignTunables_GetIntGameTypeTunable final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameTypeModifierName                         TunableName;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDesignTunables_GetIntGameTypeTunable) == 0x000004, "Wrong alignment on DBDDesignTunables_GetIntGameTypeTunable");
static_assert(sizeof(DBDDesignTunables_GetIntGameTypeTunable) == 0x000008, "Wrong size on DBDDesignTunables_GetIntGameTypeTunable");
static_assert(offsetof(DBDDesignTunables_GetIntGameTypeTunable, GameType) == 0x000000, "Member 'DBDDesignTunables_GetIntGameTypeTunable::GameType' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetIntGameTypeTunable, TunableName) == 0x000001, "Member 'DBDDesignTunables_GetIntGameTypeTunable::TunableName' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetIntGameTypeTunable, ReturnValue) == 0x000004, "Member 'DBDDesignTunables_GetIntGameTypeTunable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDesignTunables.GetStringGameTypeTunable
// 0x0018 (0x0018 - 0x0000)
struct DBDDesignTunables_GetStringGameTypeTunable final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameTypeModifierName                         TunableName;                                       // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDesignTunables_GetStringGameTypeTunable) == 0x000008, "Wrong alignment on DBDDesignTunables_GetStringGameTypeTunable");
static_assert(sizeof(DBDDesignTunables_GetStringGameTypeTunable) == 0x000018, "Wrong size on DBDDesignTunables_GetStringGameTypeTunable");
static_assert(offsetof(DBDDesignTunables_GetStringGameTypeTunable, GameType) == 0x000000, "Member 'DBDDesignTunables_GetStringGameTypeTunable::GameType' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetStringGameTypeTunable, TunableName) == 0x000001, "Member 'DBDDesignTunables_GetStringGameTypeTunable::TunableName' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetStringGameTypeTunable, ReturnValue) == 0x000008, "Member 'DBDDesignTunables_GetStringGameTypeTunable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDesignTunables.OnPluginDataPathAdded
// 0x0010 (0x0010 - 0x0000)
struct DBDDesignTunables_OnPluginDataPathAdded final
{
public:
	class FString                                 DataPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDesignTunables_OnPluginDataPathAdded) == 0x000008, "Wrong alignment on DBDDesignTunables_OnPluginDataPathAdded");
static_assert(sizeof(DBDDesignTunables_OnPluginDataPathAdded) == 0x000010, "Wrong size on DBDDesignTunables_OnPluginDataPathAdded");
static_assert(offsetof(DBDDesignTunables_OnPluginDataPathAdded, DataPath) == 0x000000, "Member 'DBDDesignTunables_OnPluginDataPathAdded::DataPath' has a wrong offset!");

// Function DeadByDaylight.DBDDesignTunables.GetTunableValue
// 0x0014 (0x0014 - 0x0000)
struct DBDDesignTunables_GetTunableValue final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WarnIfRowMissing;                                  // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDesignTunables_GetTunableValue) == 0x000004, "Wrong alignment on DBDDesignTunables_GetTunableValue");
static_assert(sizeof(DBDDesignTunables_GetTunableValue) == 0x000014, "Wrong size on DBDDesignTunables_GetTunableValue");
static_assert(offsetof(DBDDesignTunables_GetTunableValue, ID) == 0x000000, "Member 'DBDDesignTunables_GetTunableValue::ID' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetTunableValue, WarnIfRowMissing) == 0x00000C, "Member 'DBDDesignTunables_GetTunableValue::WarnIfRowMissing' has a wrong offset!");
static_assert(offsetof(DBDDesignTunables_GetTunableValue, ReturnValue) == 0x000010, "Member 'DBDDesignTunables_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Client_Cheat_SetMaxSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct DBDCharacterMovementComponent_Client_Cheat_SetMaxSpeedMultiplier final
{
public:
	float                                         MaxSpeedMultiplier;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Client_Cheat_SetMaxSpeedMultiplier) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Client_Cheat_SetMaxSpeedMultiplier");
static_assert(sizeof(DBDCharacterMovementComponent_Client_Cheat_SetMaxSpeedMultiplier) == 0x000004, "Wrong size on DBDCharacterMovementComponent_Client_Cheat_SetMaxSpeedMultiplier");
static_assert(offsetof(DBDCharacterMovementComponent_Client_Cheat_SetMaxSpeedMultiplier, MaxSpeedMultiplier) == 0x000000, "Member 'DBDCharacterMovementComponent_Client_Cheat_SetMaxSpeedMultiplier::MaxSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Client_PreventMovement
// 0x0001 (0x0001 - 0x0000)
struct DBDCharacterMovementComponent_Client_PreventMovement final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Client_PreventMovement) == 0x000001, "Wrong alignment on DBDCharacterMovementComponent_Client_PreventMovement");
static_assert(sizeof(DBDCharacterMovementComponent_Client_PreventMovement) == 0x000001, "Wrong size on DBDCharacterMovementComponent_Client_PreventMovement");
static_assert(offsetof(DBDCharacterMovementComponent_Client_PreventMovement, Value) == 0x000000, "Member 'DBDCharacterMovementComponent_Client_PreventMovement::Value' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Client_TeleportTo
// 0x0030 (0x0030 - 0x0000)
struct DBDCharacterMovementComponent_Client_TeleportTo final
{
public:
	struct FVector_NetQuantize100                 Location;                                          // 0x0000(0x0018)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FYawAndPitchRotator_NetQuantize32      Rotation;                                          // 0x0018(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Client_TeleportTo) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_Client_TeleportTo");
static_assert(sizeof(DBDCharacterMovementComponent_Client_TeleportTo) == 0x000030, "Wrong size on DBDCharacterMovementComponent_Client_TeleportTo");
static_assert(offsetof(DBDCharacterMovementComponent_Client_TeleportTo, Location) == 0x000000, "Member 'DBDCharacterMovementComponent_Client_TeleportTo::Location' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Client_TeleportTo, Rotation) == 0x000018, "Member 'DBDCharacterMovementComponent_Client_TeleportTo::Rotation' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.OnMontageStarted
// 0x0030 (0x0030 - 0x0000)
struct DBDCharacterMovementComponent_OnMontageStarted final
{
public:
	struct FMontagePlaybackDefinition             MontageDefinition;                                 // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     Montage;                                           // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_OnMontageStarted) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_OnMontageStarted");
static_assert(sizeof(DBDCharacterMovementComponent_OnMontageStarted) == 0x000030, "Wrong size on DBDCharacterMovementComponent_OnMontageStarted");
static_assert(offsetof(DBDCharacterMovementComponent_OnMontageStarted, MontageDefinition) == 0x000000, "Member 'DBDCharacterMovementComponent_OnMontageStarted::MontageDefinition' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_OnMontageStarted, Montage) == 0x000028, "Member 'DBDCharacterMovementComponent_OnMontageStarted::Montage' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.OnPreMontageStop
// 0x0030 (0x0030 - 0x0000)
struct DBDCharacterMovementComponent_OnPreMontageStop final
{
public:
	struct FMontageStopDefinition                 MontageDefinition;                                 // 0x0000(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
	const class UAnimMontage*                     Montage;                                           // 0x0028(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_OnPreMontageStop) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_OnPreMontageStop");
static_assert(sizeof(DBDCharacterMovementComponent_OnPreMontageStop) == 0x000030, "Wrong size on DBDCharacterMovementComponent_OnPreMontageStop");
static_assert(offsetof(DBDCharacterMovementComponent_OnPreMontageStop, MontageDefinition) == 0x000000, "Member 'DBDCharacterMovementComponent_OnPreMontageStop::MontageDefinition' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_OnPreMontageStop, Montage) == 0x000028, "Member 'DBDCharacterMovementComponent_OnPreMontageStop::Montage' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_AddMaxSpeedMovementCurve
// 0x0014 (0x0014 - 0x0000)
struct DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CurveNetId;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartOffset;                                       // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementCurveType                            MovementCurveType;                                 // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve");
static_assert(sizeof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve) == 0x000014, "Wrong size on DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, Timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::Timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, CurveNetId) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::CurveNetId' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, Duration) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::Duration' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, StartOffset) == 0x00000C, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::StartOffset' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve, MovementCurveType) == 0x000010, "Member 'DBDCharacterMovementComponent_Server_AddMaxSpeedMovementCurve::MovementCurveType' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_Launch
// 0x0028 (0x0028 - 0x0000)
struct DBDCharacterMovementComponent_Server_Launch final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaunchVelocity;                                    // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LaunchCallCount;                                   // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_Launch) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_Server_Launch");
static_assert(sizeof(DBDCharacterMovementComponent_Server_Launch) == 0x000028, "Wrong size on DBDCharacterMovementComponent_Server_Launch");
static_assert(offsetof(DBDCharacterMovementComponent_Server_Launch, Timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_Launch::Timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_Launch, LaunchVelocity) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_Launch::LaunchVelocity' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_Launch, LaunchCallCount) == 0x000020, "Member 'DBDCharacterMovementComponent_Server_Launch::LaunchCallCount' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_MovementTimeSync
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_MovementTimeSync final
{
public:
	uint64                                        ClientTimeSync;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_MovementTimeSync) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_Server_MovementTimeSync");
static_assert(sizeof(DBDCharacterMovementComponent_Server_MovementTimeSync) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_MovementTimeSync");
static_assert(offsetof(DBDCharacterMovementComponent_Server_MovementTimeSync, ClientTimeSync) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_MovementTimeSync::ClientTimeSync' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_PlayMontage
// 0x0038 (0x0038 - 0x0000)
struct DBDCharacterMovementComponent_Server_PlayMontage final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             MontagePlaybackDefinition;                         // 0x0008(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         PlayMontageCallCount;                              // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_PlayMontage) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_Server_PlayMontage");
static_assert(sizeof(DBDCharacterMovementComponent_Server_PlayMontage) == 0x000038, "Wrong size on DBDCharacterMovementComponent_Server_PlayMontage");
static_assert(offsetof(DBDCharacterMovementComponent_Server_PlayMontage, Timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_PlayMontage::Timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_PlayMontage, MontagePlaybackDefinition) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_PlayMontage::MontagePlaybackDefinition' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_PlayMontage, PlayMontageCallCount) == 0x000030, "Member 'DBDCharacterMovementComponent_Server_PlayMontage::PlayMontageCallCount' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_RemoveMaxSpeedMovementCurve
// 0x000C (0x000C - 0x0000)
struct DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        CurveNetId;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementCurveType                            MovementCurveType;                                 // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve");
static_assert(sizeof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve) == 0x00000C, "Wrong size on DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve");
static_assert(offsetof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve, Timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve::Timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve, CurveNetId) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve::CurveNetId' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve, MovementCurveType) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_RemoveMaxSpeedMovementCurve::MovementCurveType' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_ReplicateControlRotation
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_ReplicateControlRotation final
{
public:
	uint8                                         ClientRoll;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        View;                                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_ReplicateControlRotation) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_ReplicateControlRotation");
static_assert(sizeof(DBDCharacterMovementComponent_Server_ReplicateControlRotation) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_ReplicateControlRotation");
static_assert(offsetof(DBDCharacterMovementComponent_Server_ReplicateControlRotation, ClientRoll) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_ReplicateControlRotation::ClientRoll' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_ReplicateControlRotation, View) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_ReplicateControlRotation::View' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_SetMaxAcceleration
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_SetMaxAcceleration final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_SetMaxAcceleration) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_SetMaxAcceleration");
static_assert(sizeof(DBDCharacterMovementComponent_Server_SetMaxAcceleration) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_SetMaxAcceleration");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetMaxAcceleration, Timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_SetMaxAcceleration::Timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetMaxAcceleration, Value) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_SetMaxAcceleration::Value' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_SetStopSnapping
// 0x0008 (0x0008 - 0x0000)
struct DBDCharacterMovementComponent_Server_SetStopSnapping final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SnapToFinalDestination;                            // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterMovementComponent_Server_SetStopSnapping) == 0x000004, "Wrong alignment on DBDCharacterMovementComponent_Server_SetStopSnapping");
static_assert(sizeof(DBDCharacterMovementComponent_Server_SetStopSnapping) == 0x000008, "Wrong size on DBDCharacterMovementComponent_Server_SetStopSnapping");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetStopSnapping, Timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_SetStopSnapping::Timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_SetStopSnapping, SnapToFinalDestination) == 0x000004, "Member 'DBDCharacterMovementComponent_Server_SetStopSnapping::SnapToFinalDestination' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_StartSnapping
// 0x0058 (0x0058 - 0x0000)
struct DBDCharacterMovementComponent_Server_StartSnapping final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnappingData                          Data;                                              // 0x0008(0x0040)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SnappingCallCount;                                 // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        ClientTimeSync;                                    // 0x0050(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_StartSnapping) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_Server_StartSnapping");
static_assert(sizeof(DBDCharacterMovementComponent_Server_StartSnapping) == 0x000058, "Wrong size on DBDCharacterMovementComponent_Server_StartSnapping");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StartSnapping, Timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_StartSnapping::Timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StartSnapping, Data) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_StartSnapping::Data' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StartSnapping, SnappingCallCount) == 0x000048, "Member 'DBDCharacterMovementComponent_Server_StartSnapping::SnappingCallCount' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StartSnapping, ClientTimeSync) == 0x000050, "Member 'DBDCharacterMovementComponent_Server_StartSnapping::ClientTimeSync' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterMovementComponent.Server_StopMontage
// 0x0030 (0x0030 - 0x0000)
struct DBDCharacterMovementComponent_Server_StopMontage final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontageStopDefinition                 MontageStopDefinition;                             // 0x0008(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDCharacterMovementComponent_Server_StopMontage) == 0x000008, "Wrong alignment on DBDCharacterMovementComponent_Server_StopMontage");
static_assert(sizeof(DBDCharacterMovementComponent_Server_StopMontage) == 0x000030, "Wrong size on DBDCharacterMovementComponent_Server_StopMontage");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StopMontage, Timestamp) == 0x000000, "Member 'DBDCharacterMovementComponent_Server_StopMontage::Timestamp' has a wrong offset!");
static_assert(offsetof(DBDCharacterMovementComponent_Server_StopMontage, MontageStopDefinition) == 0x000008, "Member 'DBDCharacterMovementComponent_Server_StopMontage::MontageStopDefinition' has a wrong offset!");

// Function DeadByDaylight.Generator.AddDamagingInteraction
// 0x0008 (0x0008 - 0x0000)
struct Generator_AddDamagingInteraction final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_AddDamagingInteraction) == 0x000008, "Wrong alignment on Generator_AddDamagingInteraction");
static_assert(sizeof(Generator_AddDamagingInteraction) == 0x000008, "Wrong size on Generator_AddDamagingInteraction");
static_assert(offsetof(Generator_AddDamagingInteraction, Interaction) == 0x000000, "Member 'Generator_AddDamagingInteraction::Interaction' has a wrong offset!");

// Function DeadByDaylight.Generator.AddPlayerStartTime
// 0x0010 (0x0010 - 0x0000)
struct Generator_AddPlayerStartTime final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Starttime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_AddPlayerStartTime) == 0x000008, "Wrong alignment on Generator_AddPlayerStartTime");
static_assert(sizeof(Generator_AddPlayerStartTime) == 0x000010, "Wrong size on Generator_AddPlayerStartTime");
static_assert(offsetof(Generator_AddPlayerStartTime, Player) == 0x000000, "Member 'Generator_AddPlayerStartTime::Player' has a wrong offset!");
static_assert(offsetof(Generator_AddPlayerStartTime, Starttime) == 0x000008, "Member 'Generator_AddPlayerStartTime::Starttime' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_AddBlockingSource
// 0x0008 (0x0008 - 0x0000)
struct Generator_Authority_AddBlockingSource final
{
public:
	const class UObject*                          Source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_AddBlockingSource) == 0x000008, "Wrong alignment on Generator_Authority_AddBlockingSource");
static_assert(sizeof(Generator_Authority_AddBlockingSource) == 0x000008, "Wrong size on Generator_Authority_AddBlockingSource");
static_assert(offsetof(Generator_Authority_AddBlockingSource, Source) == 0x000000, "Member 'Generator_Authority_AddBlockingSource::Source' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_AddTimedBlockingSource
// 0x0010 (0x0010 - 0x0000)
struct Generator_Authority_AddTimedBlockingSource final
{
public:
	const class UObject*                          Source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         blockingTime;                                      // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_Authority_AddTimedBlockingSource) == 0x000008, "Wrong alignment on Generator_Authority_AddTimedBlockingSource");
static_assert(sizeof(Generator_Authority_AddTimedBlockingSource) == 0x000010, "Wrong size on Generator_Authority_AddTimedBlockingSource");
static_assert(offsetof(Generator_Authority_AddTimedBlockingSource, Source) == 0x000000, "Member 'Generator_Authority_AddTimedBlockingSource::Source' has a wrong offset!");
static_assert(offsetof(Generator_Authority_AddTimedBlockingSource, blockingTime) == 0x000008, "Member 'Generator_Authority_AddTimedBlockingSource::blockingTime' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_OnChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct Generator_Authority_OnChargeApplied final
{
public:
	float                                         IndividualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_OnChargeApplied) == 0x000008, "Wrong alignment on Generator_Authority_OnChargeApplied");
static_assert(sizeof(Generator_Authority_OnChargeApplied) == 0x000018, "Wrong size on Generator_Authority_OnChargeApplied");
static_assert(offsetof(Generator_Authority_OnChargeApplied, IndividualChargeAmount) == 0x000000, "Member 'Generator_Authority_OnChargeApplied::IndividualChargeAmount' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeApplied, TotalChargeAmount) == 0x000004, "Member 'Generator_Authority_OnChargeApplied::TotalChargeAmount' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeApplied, ChargeInstigator) == 0x000008, "Member 'Generator_Authority_OnChargeApplied::ChargeInstigator' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeApplied, WasCoop) == 0x000010, "Member 'Generator_Authority_OnChargeApplied::WasCoop' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeApplied, DeltaTime) == 0x000014, "Member 'Generator_Authority_OnChargeApplied::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_OnChargeChanged
// 0x0010 (0x0010 - 0x0000)
struct Generator_Authority_OnChargeChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_OnChargeChanged) == 0x000008, "Wrong alignment on Generator_Authority_OnChargeChanged");
static_assert(sizeof(Generator_Authority_OnChargeChanged) == 0x000010, "Wrong size on Generator_Authority_OnChargeChanged");
static_assert(offsetof(Generator_Authority_OnChargeChanged, ChargeableComponent) == 0x000000, "Member 'Generator_Authority_OnChargeChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeChanged, PercentCompletionChange) == 0x000008, "Member 'Generator_Authority_OnChargeChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(Generator_Authority_OnChargeChanged, TotalPercentComplete) == 0x00000C, "Member 'Generator_Authority_OnChargeChanged::TotalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_RemoveBlockingSource
// 0x0008 (0x0008 - 0x0000)
struct Generator_Authority_RemoveBlockingSource final
{
public:
	const class UObject*                          Source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_RemoveBlockingSource) == 0x000008, "Wrong alignment on Generator_Authority_RemoveBlockingSource");
static_assert(sizeof(Generator_Authority_RemoveBlockingSource) == 0x000008, "Wrong size on Generator_Authority_RemoveBlockingSource");
static_assert(offsetof(Generator_Authority_RemoveBlockingSource, Source) == 0x000000, "Member 'Generator_Authority_RemoveBlockingSource::Source' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_RepairDamage
// 0x0008 (0x0008 - 0x0000)
struct Generator_Authority_RepairDamage final
{
public:
	class ADBDPlayer*                             RepairedBy;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_RepairDamage) == 0x000008, "Wrong alignment on Generator_Authority_RepairDamage");
static_assert(sizeof(Generator_Authority_RepairDamage) == 0x000008, "Wrong size on Generator_Authority_RepairDamage");
static_assert(offsetof(Generator_Authority_RepairDamage, RepairedBy) == 0x000000, "Member 'Generator_Authority_RepairDamage::RepairedBy' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_SetRepaired
// 0x0002 (0x0002 - 0x0000)
struct Generator_Authority_SetRepaired final
{
public:
	bool                                          ShowGeneratorCloneLoudNoise;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoCompleted;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_SetRepaired) == 0x000001, "Wrong alignment on Generator_Authority_SetRepaired");
static_assert(sizeof(Generator_Authority_SetRepaired) == 0x000002, "Wrong size on Generator_Authority_SetRepaired");
static_assert(offsetof(Generator_Authority_SetRepaired, ShowGeneratorCloneLoudNoise) == 0x000000, "Member 'Generator_Authority_SetRepaired::ShowGeneratorCloneLoudNoise' has a wrong offset!");
static_assert(offsetof(Generator_Authority_SetRepaired, IsAutoCompleted) == 0x000001, "Member 'Generator_Authority_SetRepaired::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.Generator.BroadcastIsDamagedChangedEvent
// 0x0008 (0x0008 - 0x0000)
struct Generator_BroadcastIsDamagedChangedEvent final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_BroadcastIsDamagedChangedEvent) == 0x000008, "Wrong alignment on Generator_BroadcastIsDamagedChangedEvent");
static_assert(sizeof(Generator_BroadcastIsDamagedChangedEvent) == 0x000008, "Wrong size on Generator_BroadcastIsDamagedChangedEvent");
static_assert(offsetof(Generator_BroadcastIsDamagedChangedEvent, Player) == 0x000000, "Member 'Generator_BroadcastIsDamagedChangedEvent::Player' has a wrong offset!");

// Function DeadByDaylight.Generator.GetIsBlockedFromCharging
// 0x0001 (0x0001 - 0x0000)
struct Generator_GetIsBlockedFromCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetIsBlockedFromCharging) == 0x000001, "Wrong alignment on Generator_GetIsBlockedFromCharging");
static_assert(sizeof(Generator_GetIsBlockedFromCharging) == 0x000001, "Wrong size on Generator_GetIsBlockedFromCharging");
static_assert(offsetof(Generator_GetIsBlockedFromCharging, ReturnValue) == 0x000000, "Member 'Generator_GetIsBlockedFromCharging::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.Multicast_OnRepaired
// 0x0008 (0x0008 - 0x0000)
struct Generator_Multicast_OnRepaired final
{
public:
	bool                                          ShowGeneratorCloneLoudNoise;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoCompleted;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         UpdatedRemainingGeneratorCount;                    // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Multicast_OnRepaired) == 0x000004, "Wrong alignment on Generator_Multicast_OnRepaired");
static_assert(sizeof(Generator_Multicast_OnRepaired) == 0x000008, "Wrong size on Generator_Multicast_OnRepaired");
static_assert(offsetof(Generator_Multicast_OnRepaired, ShowGeneratorCloneLoudNoise) == 0x000000, "Member 'Generator_Multicast_OnRepaired::ShowGeneratorCloneLoudNoise' has a wrong offset!");
static_assert(offsetof(Generator_Multicast_OnRepaired, IsAutoCompleted) == 0x000001, "Member 'Generator_Multicast_OnRepaired::IsAutoCompleted' has a wrong offset!");
static_assert(offsetof(Generator_Multicast_OnRepaired, UpdatedRemainingGeneratorCount) == 0x000004, "Member 'Generator_Multicast_OnRepaired::UpdatedRemainingGeneratorCount' has a wrong offset!");

// Function DeadByDaylight.Generator.Multicast_PlayFailSparksFX
// 0x0010 (0x0010 - 0x0000)
struct Generator_Multicast_PlayFailSparksFX final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Explode;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_Multicast_PlayFailSparksFX) == 0x000008, "Wrong alignment on Generator_Multicast_PlayFailSparksFX");
static_assert(sizeof(Generator_Multicast_PlayFailSparksFX) == 0x000010, "Wrong size on Generator_Multicast_PlayFailSparksFX");
static_assert(offsetof(Generator_Multicast_PlayFailSparksFX, Player) == 0x000000, "Member 'Generator_Multicast_PlayFailSparksFX::Player' has a wrong offset!");
static_assert(offsetof(Generator_Multicast_PlayFailSparksFX, Explode) == 0x000008, "Member 'Generator_Multicast_PlayFailSparksFX::Explode' has a wrong offset!");

// Function DeadByDaylight.Generator.NotifyRepairFinish
// 0x0010 (0x0010 - 0x0000)
struct Generator_NotifyRepairFinish final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractor*                            Interactor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_NotifyRepairFinish) == 0x000008, "Wrong alignment on Generator_NotifyRepairFinish");
static_assert(sizeof(Generator_NotifyRepairFinish) == 0x000010, "Wrong size on Generator_NotifyRepairFinish");
static_assert(offsetof(Generator_NotifyRepairFinish, Player) == 0x000000, "Member 'Generator_NotifyRepairFinish::Player' has a wrong offset!");
static_assert(offsetof(Generator_NotifyRepairFinish, Interactor) == 0x000008, "Member 'Generator_NotifyRepairFinish::Interactor' has a wrong offset!");

// Function DeadByDaylight.Generator.NotifyRepairStart
// 0x0008 (0x0008 - 0x0000)
struct Generator_NotifyRepairStart final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_NotifyRepairStart) == 0x000008, "Wrong alignment on Generator_NotifyRepairStart");
static_assert(sizeof(Generator_NotifyRepairStart) == 0x000008, "Wrong size on Generator_NotifyRepairStart");
static_assert(offsetof(Generator_NotifyRepairStart, Player) == 0x000000, "Member 'Generator_NotifyRepairStart::Player' has a wrong offset!");

// Function DeadByDaylight.Generator.OnBlockingStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct Generator_OnBlockingStatusChanged final
{
public:
	bool                                          IsBlocked;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_OnBlockingStatusChanged) == 0x000001, "Wrong alignment on Generator_OnBlockingStatusChanged");
static_assert(sizeof(Generator_OnBlockingStatusChanged) == 0x000001, "Wrong size on Generator_OnBlockingStatusChanged");
static_assert(offsetof(Generator_OnBlockingStatusChanged, IsBlocked) == 0x000000, "Member 'Generator_OnBlockingStatusChanged::IsBlocked' has a wrong offset!");

// Function DeadByDaylight.Generator.OnChargeChanged
// 0x0010 (0x0010 - 0x0000)
struct Generator_OnChargeChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_OnChargeChanged) == 0x000008, "Wrong alignment on Generator_OnChargeChanged");
static_assert(sizeof(Generator_OnChargeChanged) == 0x000010, "Wrong size on Generator_OnChargeChanged");
static_assert(offsetof(Generator_OnChargeChanged, ChargeableComponent) == 0x000000, "Member 'Generator_OnChargeChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(Generator_OnChargeChanged, Percent) == 0x000008, "Member 'Generator_OnChargeChanged::Percent' has a wrong offset!");

// Function DeadByDaylight.Generator.OnRegressionStateChanged
// 0x0010 (0x0010 - 0x0000)
struct Generator_OnRegressionStateChanged final
{
public:
	bool                                          Regressing;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             LastDamageChangeSource;                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_OnRegressionStateChanged) == 0x000008, "Wrong alignment on Generator_OnRegressionStateChanged");
static_assert(sizeof(Generator_OnRegressionStateChanged) == 0x000010, "Wrong size on Generator_OnRegressionStateChanged");
static_assert(offsetof(Generator_OnRegressionStateChanged, Regressing) == 0x000000, "Member 'Generator_OnRegressionStateChanged::Regressing' has a wrong offset!");
static_assert(offsetof(Generator_OnRegressionStateChanged, LastDamageChangeSource) == 0x000008, "Member 'Generator_OnRegressionStateChanged::LastDamageChangeSource' has a wrong offset!");

// Function DeadByDaylight.Generator.OnRepairedBP
// 0x0002 (0x0002 - 0x0000)
struct Generator_OnRepairedBP final
{
public:
	bool                                          ShowGeneratorCloneLoudNoise;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoCompleted;                                   // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_OnRepairedBP) == 0x000001, "Wrong alignment on Generator_OnRepairedBP");
static_assert(sizeof(Generator_OnRepairedBP) == 0x000002, "Wrong size on Generator_OnRepairedBP");
static_assert(offsetof(Generator_OnRepairedBP, ShowGeneratorCloneLoudNoise) == 0x000000, "Member 'Generator_OnRepairedBP::ShowGeneratorCloneLoudNoise' has a wrong offset!");
static_assert(offsetof(Generator_OnRepairedBP, IsAutoCompleted) == 0x000001, "Member 'Generator_OnRepairedBP::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.Generator.OnUpdateChargeProgress
// 0x0004 (0x0004 - 0x0000)
struct Generator_OnUpdateChargeProgress final
{
public:
	float                                         NewPercentComplete;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_OnUpdateChargeProgress) == 0x000004, "Wrong alignment on Generator_OnUpdateChargeProgress");
static_assert(sizeof(Generator_OnUpdateChargeProgress) == 0x000004, "Wrong size on Generator_OnUpdateChargeProgress");
static_assert(offsetof(Generator_OnUpdateChargeProgress, NewPercentComplete) == 0x000000, "Member 'Generator_OnUpdateChargeProgress::NewPercentComplete' has a wrong offset!");

// Function DeadByDaylight.Generator.PlayFailSparksFX
// 0x0010 (0x0010 - 0x0000)
struct Generator_PlayFailSparksFX final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Explode;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_PlayFailSparksFX) == 0x000008, "Wrong alignment on Generator_PlayFailSparksFX");
static_assert(sizeof(Generator_PlayFailSparksFX) == 0x000010, "Wrong size on Generator_PlayFailSparksFX");
static_assert(offsetof(Generator_PlayFailSparksFX, InteractingPlayer) == 0x000000, "Member 'Generator_PlayFailSparksFX::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(Generator_PlayFailSparksFX, Explode) == 0x000008, "Member 'Generator_PlayFailSparksFX::Explode' has a wrong offset!");

// Function DeadByDaylight.Generator.PostAkEvent
// 0x0028 (0x0028 - 0x0000)
struct Generator_PostAkEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback;                                 // 0x000C(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_PostAkEvent) == 0x000008, "Wrong alignment on Generator_PostAkEvent");
static_assert(sizeof(Generator_PostAkEvent) == 0x000028, "Wrong size on Generator_PostAkEvent");
static_assert(offsetof(Generator_PostAkEvent, AkEvent) == 0x000000, "Member 'Generator_PostAkEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(Generator_PostAkEvent, CallbackMask) == 0x000008, "Member 'Generator_PostAkEvent::CallbackMask' has a wrong offset!");
static_assert(offsetof(Generator_PostAkEvent, PostEventCallback) == 0x00000C, "Member 'Generator_PostAkEvent::PostEventCallback' has a wrong offset!");
static_assert(offsetof(Generator_PostAkEvent, ReturnValue) == 0x000020, "Member 'Generator_PostAkEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.RemovePlayerStartTime
// 0x0008 (0x0008 - 0x0000)
struct Generator_RemovePlayerStartTime final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_RemovePlayerStartTime) == 0x000008, "Wrong alignment on Generator_RemovePlayerStartTime");
static_assert(sizeof(Generator_RemovePlayerStartTime) == 0x000008, "Wrong size on Generator_RemovePlayerStartTime");
static_assert(offsetof(Generator_RemovePlayerStartTime, Player) == 0x000000, "Member 'Generator_RemovePlayerStartTime::Player' has a wrong offset!");

// Function DeadByDaylight.Generator.SetComplete
// 0x0001 (0x0001 - 0x0000)
struct Generator_SetComplete final
{
public:
	bool                                          Complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SetComplete) == 0x000001, "Wrong alignment on Generator_SetComplete");
static_assert(sizeof(Generator_SetComplete) == 0x000001, "Wrong size on Generator_SetComplete");
static_assert(offsetof(Generator_SetComplete, Complete) == 0x000000, "Member 'Generator_SetComplete::Complete' has a wrong offset!");

// Function DeadByDaylight.Generator.SetFireLevelScoreEventOnFix
// 0x0001 (0x0001 - 0x0000)
struct Generator_SetFireLevelScoreEventOnFix final
{
public:
	bool                                          Param_FireLevelScoreEventOnFix;                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SetFireLevelScoreEventOnFix) == 0x000001, "Wrong alignment on Generator_SetFireLevelScoreEventOnFix");
static_assert(sizeof(Generator_SetFireLevelScoreEventOnFix) == 0x000001, "Wrong size on Generator_SetFireLevelScoreEventOnFix");
static_assert(offsetof(Generator_SetFireLevelScoreEventOnFix, Param_FireLevelScoreEventOnFix) == 0x000000, "Member 'Generator_SetFireLevelScoreEventOnFix::Param_FireLevelScoreEventOnFix' has a wrong offset!");

// Function DeadByDaylight.Generator.SetIsAutoCompleted
// 0x0001 (0x0001 - 0x0000)
struct Generator_SetIsAutoCompleted final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SetIsAutoCompleted) == 0x000001, "Wrong alignment on Generator_SetIsAutoCompleted");
static_assert(sizeof(Generator_SetIsAutoCompleted) == 0x000001, "Wrong size on Generator_SetIsAutoCompleted");
static_assert(offsetof(Generator_SetIsAutoCompleted, IsAutoCompleted) == 0x000000, "Member 'Generator_SetIsAutoCompleted::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.Generator.SetIsBlockedFromCharging
// 0x0001 (0x0001 - 0x0000)
struct Generator_SetIsBlockedFromCharging final
{
public:
	bool                                          IsBlockedFromCharging;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SetIsBlockedFromCharging) == 0x000001, "Wrong alignment on Generator_SetIsBlockedFromCharging");
static_assert(sizeof(Generator_SetIsBlockedFromCharging) == 0x000001, "Wrong size on Generator_SetIsBlockedFromCharging");
static_assert(offsetof(Generator_SetIsBlockedFromCharging, IsBlockedFromCharging) == 0x000000, "Member 'Generator_SetIsBlockedFromCharging::IsBlockedFromCharging' has a wrong offset!");

// Function DeadByDaylight.Generator.SetIsOvercharged
// 0x0001 (0x0001 - 0x0000)
struct Generator_SetIsOvercharged final
{
public:
	bool                                          Overcharged;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SetIsOvercharged) == 0x000001, "Wrong alignment on Generator_SetIsOvercharged");
static_assert(sizeof(Generator_SetIsOvercharged) == 0x000001, "Wrong size on Generator_SetIsOvercharged");
static_assert(offsetof(Generator_SetIsOvercharged, Overcharged) == 0x000000, "Member 'Generator_SetIsOvercharged::Overcharged' has a wrong offset!");

// Function DeadByDaylight.Generator.SpawnBloodEffectToSocket
// 0x000C (0x000C - 0x0000)
struct Generator_SpawnBloodEffectToSocket final
{
public:
	class FName                                   Param_Name;                                        // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_SpawnBloodEffectToSocket) == 0x000004, "Wrong alignment on Generator_SpawnBloodEffectToSocket");
static_assert(sizeof(Generator_SpawnBloodEffectToSocket) == 0x00000C, "Wrong size on Generator_SpawnBloodEffectToSocket");
static_assert(offsetof(Generator_SpawnBloodEffectToSocket, Param_Name) == 0x000000, "Member 'Generator_SpawnBloodEffectToSocket::Param_Name' has a wrong offset!");

// Function DeadByDaylight.Generator.TriggerSkillCheck
// 0x0008 (0x0008 - 0x0000)
struct Generator_TriggerSkillCheck final
{
public:
	class ADBDPlayer*                             InstigatingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_TriggerSkillCheck) == 0x000008, "Wrong alignment on Generator_TriggerSkillCheck");
static_assert(sizeof(Generator_TriggerSkillCheck) == 0x000008, "Wrong size on Generator_TriggerSkillCheck");
static_assert(offsetof(Generator_TriggerSkillCheck, InstigatingPlayer) == 0x000000, "Member 'Generator_TriggerSkillCheck::InstigatingPlayer' has a wrong offset!");

// Function DeadByDaylight.Generator.TriggerSkillCheckFailureLoudNoise
// 0x0008 (0x0008 - 0x0000)
struct Generator_TriggerSkillCheckFailureLoudNoise final
{
public:
	class ADBDPlayer*                             InstigatingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_TriggerSkillCheckFailureLoudNoise) == 0x000008, "Wrong alignment on Generator_TriggerSkillCheckFailureLoudNoise");
static_assert(sizeof(Generator_TriggerSkillCheckFailureLoudNoise) == 0x000008, "Wrong size on Generator_TriggerSkillCheckFailureLoudNoise");
static_assert(offsetof(Generator_TriggerSkillCheckFailureLoudNoise, InstigatingPlayer) == 0x000000, "Member 'Generator_TriggerSkillCheckFailureLoudNoise::InstigatingPlayer' has a wrong offset!");

// Function DeadByDaylight.Generator.VFXClampTopActivationSingleLight
// 0x0010 (0x0010 - 0x0000)
struct Generator_VFXClampTopActivationSingleLight final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_VFXClampTopActivationSingleLight) == 0x000004, "Wrong alignment on Generator_VFXClampTopActivationSingleLight");
static_assert(sizeof(Generator_VFXClampTopActivationSingleLight) == 0x000010, "Wrong size on Generator_VFXClampTopActivationSingleLight");
static_assert(offsetof(Generator_VFXClampTopActivationSingleLight, Distance) == 0x000000, "Member 'Generator_VFXClampTopActivationSingleLight::Distance' has a wrong offset!");
static_assert(offsetof(Generator_VFXClampTopActivationSingleLight, ParameterName) == 0x000004, "Member 'Generator_VFXClampTopActivationSingleLight::ParameterName' has a wrong offset!");

// Function DeadByDaylight.Generator.ActivateTeleportGeneratorIndicator
// 0x0001 (0x0001 - 0x0000)
struct Generator_ActivateTeleportGeneratorIndicator final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_ActivateTeleportGeneratorIndicator) == 0x000001, "Wrong alignment on Generator_ActivateTeleportGeneratorIndicator");
static_assert(sizeof(Generator_ActivateTeleportGeneratorIndicator) == 0x000001, "Wrong size on Generator_ActivateTeleportGeneratorIndicator");
static_assert(offsetof(Generator_ActivateTeleportGeneratorIndicator, Activate) == 0x000000, "Member 'Generator_ActivateTeleportGeneratorIndicator::Activate' has a wrong offset!");

// Function DeadByDaylight.Generator.Authority_CancelRepairInteractions
// 0x0010 (0x0010 - 0x0000)
struct Generator_Authority_CancelRepairInteractions final
{
public:
	TArray<class ADBDPlayer*>                     Repairers;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_Authority_CancelRepairInteractions) == 0x000008, "Wrong alignment on Generator_Authority_CancelRepairInteractions");
static_assert(sizeof(Generator_Authority_CancelRepairInteractions) == 0x000010, "Wrong size on Generator_Authority_CancelRepairInteractions");
static_assert(offsetof(Generator_Authority_CancelRepairInteractions, Repairers) == 0x000000, "Member 'Generator_Authority_CancelRepairInteractions::Repairers' has a wrong offset!");

// Function DeadByDaylight.Generator.BroadcastGeneratorRepairedBySurvivor
// 0x0008 (0x0008 - 0x0000)
struct Generator_BroadcastGeneratorRepairedBySurvivor final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_BroadcastGeneratorRepairedBySurvivor) == 0x000008, "Wrong alignment on Generator_BroadcastGeneratorRepairedBySurvivor");
static_assert(sizeof(Generator_BroadcastGeneratorRepairedBySurvivor) == 0x000008, "Wrong size on Generator_BroadcastGeneratorRepairedBySurvivor");
static_assert(offsetof(Generator_BroadcastGeneratorRepairedBySurvivor, RepairingSurvivor) == 0x000000, "Member 'Generator_BroadcastGeneratorRepairedBySurvivor::RepairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.Generator.CanSurvivorReactToBlockingEntity
// 0x0010 (0x0010 - 0x0000)
struct Generator_CanSurvivorReactToBlockingEntity final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_CanSurvivorReactToBlockingEntity) == 0x000008, "Wrong alignment on Generator_CanSurvivorReactToBlockingEntity");
static_assert(sizeof(Generator_CanSurvivorReactToBlockingEntity) == 0x000010, "Wrong size on Generator_CanSurvivorReactToBlockingEntity");
static_assert(offsetof(Generator_CanSurvivorReactToBlockingEntity, Survivor) == 0x000000, "Member 'Generator_CanSurvivorReactToBlockingEntity::Survivor' has a wrong offset!");
static_assert(offsetof(Generator_CanSurvivorReactToBlockingEntity, ReturnValue) == 0x000008, "Member 'Generator_CanSurvivorReactToBlockingEntity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetChargePercentComplete
// 0x0004 (0x0004 - 0x0000)
struct Generator_GetChargePercentComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetChargePercentComplete) == 0x000004, "Wrong alignment on Generator_GetChargePercentComplete");
static_assert(sizeof(Generator_GetChargePercentComplete) == 0x000004, "Wrong size on Generator_GetChargePercentComplete");
static_assert(offsetof(Generator_GetChargePercentComplete, ReturnValue) == 0x000000, "Member 'Generator_GetChargePercentComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetGeneratorAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct Generator_GetGeneratorAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetGeneratorAudioComponent) == 0x000008, "Wrong alignment on Generator_GetGeneratorAudioComponent");
static_assert(sizeof(Generator_GetGeneratorAudioComponent) == 0x000008, "Wrong size on Generator_GetGeneratorAudioComponent");
static_assert(offsetof(Generator_GetGeneratorAudioComponent, ReturnValue) == 0x000000, "Member 'Generator_GetGeneratorAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetGeneratorChargeComponent
// 0x0008 (0x0008 - 0x0000)
struct Generator_GetGeneratorChargeComponent final
{
public:
	class UChargeableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetGeneratorChargeComponent) == 0x000008, "Wrong alignment on Generator_GetGeneratorChargeComponent");
static_assert(sizeof(Generator_GetGeneratorChargeComponent) == 0x000008, "Wrong size on Generator_GetGeneratorChargeComponent");
static_assert(offsetof(Generator_GetGeneratorChargeComponent, ReturnValue) == 0x000000, "Member 'Generator_GetGeneratorChargeComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetGeneratorDamageComponent
// 0x0008 (0x0008 - 0x0000)
struct Generator_GetGeneratorDamageComponent final
{
public:
	class UGeneratorDamageComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetGeneratorDamageComponent) == 0x000008, "Wrong alignment on Generator_GetGeneratorDamageComponent");
static_assert(sizeof(Generator_GetGeneratorDamageComponent) == 0x000008, "Wrong size on Generator_GetGeneratorDamageComponent");
static_assert(offsetof(Generator_GetGeneratorDamageComponent, ReturnValue) == 0x000000, "Member 'Generator_GetGeneratorDamageComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetIsAutoCompleted
// 0x0001 (0x0001 - 0x0000)
struct Generator_GetIsAutoCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetIsAutoCompleted) == 0x000001, "Wrong alignment on Generator_GetIsAutoCompleted");
static_assert(sizeof(Generator_GetIsAutoCompleted) == 0x000001, "Wrong size on Generator_GetIsAutoCompleted");
static_assert(offsetof(Generator_GetIsAutoCompleted, ReturnValue) == 0x000000, "Member 'Generator_GetIsAutoCompleted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetPlayerStartTime
// 0x0010 (0x0010 - 0x0000)
struct Generator_GetPlayerStartTime final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Generator_GetPlayerStartTime) == 0x000008, "Wrong alignment on Generator_GetPlayerStartTime");
static_assert(sizeof(Generator_GetPlayerStartTime) == 0x000010, "Wrong size on Generator_GetPlayerStartTime");
static_assert(offsetof(Generator_GetPlayerStartTime, Player) == 0x000000, "Member 'Generator_GetPlayerStartTime::Player' has a wrong offset!");
static_assert(offsetof(Generator_GetPlayerStartTime, ReturnValue) == 0x000008, "Member 'Generator_GetPlayerStartTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetPlayerStartTimes
// 0x0010 (0x0010 - 0x0000)
struct Generator_GetPlayerStartTimes final
{
public:
	TArray<struct FPlayerFloatTuple>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetPlayerStartTimes) == 0x000008, "Wrong alignment on Generator_GetPlayerStartTimes");
static_assert(sizeof(Generator_GetPlayerStartTimes) == 0x000010, "Wrong size on Generator_GetPlayerStartTimes");
static_assert(offsetof(Generator_GetPlayerStartTimes, ReturnValue) == 0x000000, "Member 'Generator_GetPlayerStartTimes::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetRepairers
// 0x0010 (0x0010 - 0x0000)
struct Generator_GetRepairers final
{
public:
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetRepairers) == 0x000008, "Wrong alignment on Generator_GetRepairers");
static_assert(sizeof(Generator_GetRepairers) == 0x000010, "Wrong size on Generator_GetRepairers");
static_assert(offsetof(Generator_GetRepairers, ReturnValue) == 0x000000, "Member 'Generator_GetRepairers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetRepairPercentComplete
// 0x0004 (0x0004 - 0x0000)
struct Generator_GetRepairPercentComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetRepairPercentComplete) == 0x000004, "Wrong alignment on Generator_GetRepairPercentComplete");
static_assert(sizeof(Generator_GetRepairPercentComplete) == 0x000004, "Wrong size on Generator_GetRepairPercentComplete");
static_assert(offsetof(Generator_GetRepairPercentComplete, ReturnValue) == 0x000000, "Member 'Generator_GetRepairPercentComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.GetSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct Generator_GetSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_GetSkeletalMesh) == 0x000008, "Wrong alignment on Generator_GetSkeletalMesh");
static_assert(sizeof(Generator_GetSkeletalMesh) == 0x000008, "Wrong size on Generator_GetSkeletalMesh");
static_assert(offsetof(Generator_GetSkeletalMesh, ReturnValue) == 0x000000, "Member 'Generator_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.IsBeingDamagedByKiller
// 0x0001 (0x0001 - 0x0000)
struct Generator_IsBeingDamagedByKiller final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_IsBeingDamagedByKiller) == 0x000001, "Wrong alignment on Generator_IsBeingDamagedByKiller");
static_assert(sizeof(Generator_IsBeingDamagedByKiller) == 0x000001, "Wrong size on Generator_IsBeingDamagedByKiller");
static_assert(offsetof(Generator_IsBeingDamagedByKiller, ReturnValue) == 0x000000, "Member 'Generator_IsBeingDamagedByKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.IsBeingRepaired
// 0x0001 (0x0001 - 0x0000)
struct Generator_IsBeingRepaired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_IsBeingRepaired) == 0x000001, "Wrong alignment on Generator_IsBeingRepaired");
static_assert(sizeof(Generator_IsBeingRepaired) == 0x000001, "Wrong size on Generator_IsBeingRepaired");
static_assert(offsetof(Generator_IsBeingRepaired, ReturnValue) == 0x000000, "Member 'Generator_IsBeingRepaired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.IsBlocked
// 0x0001 (0x0001 - 0x0000)
struct Generator_IsBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_IsBlocked) == 0x000001, "Wrong alignment on Generator_IsBlocked");
static_assert(sizeof(Generator_IsBlocked) == 0x000001, "Wrong size on Generator_IsBlocked");
static_assert(offsetof(Generator_IsBlocked, ReturnValue) == 0x000000, "Member 'Generator_IsBlocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.IsRepaired
// 0x0001 (0x0001 - 0x0000)
struct Generator_IsRepaired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_IsRepaired) == 0x000001, "Wrong alignment on Generator_IsRepaired");
static_assert(sizeof(Generator_IsRepaired) == 0x000001, "Wrong size on Generator_IsRepaired");
static_assert(offsetof(Generator_IsRepaired, ReturnValue) == 0x000000, "Member 'Generator_IsRepaired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Generator.ShouldDoOverchargeSkillcheck
// 0x0001 (0x0001 - 0x0000)
struct Generator_ShouldDoOverchargeSkillcheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Generator_ShouldDoOverchargeSkillcheck) == 0x000001, "Wrong alignment on Generator_ShouldDoOverchargeSkillcheck");
static_assert(sizeof(Generator_ShouldDoOverchargeSkillcheck) == 0x000001, "Wrong size on Generator_ShouldDoOverchargeSkillcheck");
static_assert(offsetof(Generator_ShouldDoOverchargeSkillcheck, ReturnValue) == 0x000000, "Member 'Generator_ShouldDoOverchargeSkillcheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.Authority_AccumulateOngoingGameEvent
// 0x0048 (0x0048 - 0x0000)
struct GameEventDispatcher_Authority_AccumulateOngoingGameEvent final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	float                                         OngoingWaitTime;                                   // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent) == 0x000008, "Wrong alignment on GameEventDispatcher_Authority_AccumulateOngoingGameEvent");
static_assert(sizeof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent) == 0x000048, "Wrong size on GameEventDispatcher_Authority_AccumulateOngoingGameEvent");
static_assert(offsetof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent, GameEventType) == 0x000000, "Member 'GameEventDispatcher_Authority_AccumulateOngoingGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent, GameEventData) == 0x000010, "Member 'GameEventDispatcher_Authority_AccumulateOngoingGameEvent::GameEventData' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_Authority_AccumulateOngoingGameEvent, OngoingWaitTime) == 0x000040, "Member 'GameEventDispatcher_Authority_AccumulateOngoingGameEvent::OngoingWaitTime' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.Authority_RemotelyDispatch
// 0x0040 (0x0040 - 0x0000)
struct GameEventDispatcher_Authority_RemotelyDispatch final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_Authority_RemotelyDispatch) == 0x000008, "Wrong alignment on GameEventDispatcher_Authority_RemotelyDispatch");
static_assert(sizeof(GameEventDispatcher_Authority_RemotelyDispatch) == 0x000040, "Wrong size on GameEventDispatcher_Authority_RemotelyDispatch");
static_assert(offsetof(GameEventDispatcher_Authority_RemotelyDispatch, GameEventType) == 0x000000, "Member 'GameEventDispatcher_Authority_RemotelyDispatch::GameEventType' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_Authority_RemotelyDispatch, GameEventData) == 0x000010, "Member 'GameEventDispatcher_Authority_RemotelyDispatch::GameEventData' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.LocallyDispatch
// 0x0040 (0x0040 - 0x0000)
struct GameEventDispatcher_LocallyDispatch final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_LocallyDispatch) == 0x000008, "Wrong alignment on GameEventDispatcher_LocallyDispatch");
static_assert(sizeof(GameEventDispatcher_LocallyDispatch) == 0x000040, "Wrong size on GameEventDispatcher_LocallyDispatch");
static_assert(offsetof(GameEventDispatcher_LocallyDispatch, GameEventType) == 0x000000, "Member 'GameEventDispatcher_LocallyDispatch::GameEventType' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_LocallyDispatch, GameEventData) == 0x000010, "Member 'GameEventDispatcher_LocallyDispatch::GameEventData' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.RegisterListener
// 0x0020 (0x0020 - 0x0000)
struct GameEventDispatcher_RegisterListener final
{
public:
	struct FGameEventDispatcherHandleBP           GameEventDispatcherHandle;                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_RegisterListener) == 0x000004, "Wrong alignment on GameEventDispatcher_RegisterListener");
static_assert(sizeof(GameEventDispatcher_RegisterListener) == 0x000020, "Wrong size on GameEventDispatcher_RegisterListener");
static_assert(offsetof(GameEventDispatcher_RegisterListener, GameEventDispatcherHandle) == 0x000000, "Member 'GameEventDispatcher_RegisterListener::GameEventDispatcherHandle' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.RemotelyDispatch
// 0x0040 (0x0040 - 0x0000)
struct GameEventDispatcher_RemotelyDispatch final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_RemotelyDispatch) == 0x000008, "Wrong alignment on GameEventDispatcher_RemotelyDispatch");
static_assert(sizeof(GameEventDispatcher_RemotelyDispatch) == 0x000040, "Wrong size on GameEventDispatcher_RemotelyDispatch");
static_assert(offsetof(GameEventDispatcher_RemotelyDispatch, GameEventType) == 0x000000, "Member 'GameEventDispatcher_RemotelyDispatch::GameEventType' has a wrong offset!");
static_assert(offsetof(GameEventDispatcher_RemotelyDispatch, GameEventData) == 0x000010, "Member 'GameEventDispatcher_RemotelyDispatch::GameEventData' has a wrong offset!");

// Function DeadByDaylight.GameEventDispatcher.UnregisterListener
// 0x0020 (0x0020 - 0x0000)
struct GameEventDispatcher_UnregisterListener final
{
public:
	struct FGameEventDispatcherHandleBP           GameEventDispatcherHandle;                         // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventDispatcher_UnregisterListener) == 0x000004, "Wrong alignment on GameEventDispatcher_UnregisterListener");
static_assert(sizeof(GameEventDispatcher_UnregisterListener) == 0x000020, "Wrong size on GameEventDispatcher_UnregisterListener");
static_assert(offsetof(GameEventDispatcher_UnregisterListener, GameEventDispatcherHandle) == 0x000000, "Member 'GameEventDispatcher_UnregisterListener::GameEventDispatcherHandle' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.ActivateObjectPlacement
// 0x0001 (0x0001 - 0x0000)
struct ObjectPlacerComponent_ActivateObjectPlacement final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_ActivateObjectPlacement) == 0x000001, "Wrong alignment on ObjectPlacerComponent_ActivateObjectPlacement");
static_assert(sizeof(ObjectPlacerComponent_ActivateObjectPlacement) == 0x000001, "Wrong size on ObjectPlacerComponent_ActivateObjectPlacement");
static_assert(offsetof(ObjectPlacerComponent_ActivateObjectPlacement, Active) == 0x000000, "Member 'ObjectPlacerComponent_ActivateObjectPlacement::Active' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetHideIndicatorDuringAttack
// 0x0001 (0x0001 - 0x0000)
struct ObjectPlacerComponent_SetHideIndicatorDuringAttack final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetHideIndicatorDuringAttack) == 0x000001, "Wrong alignment on ObjectPlacerComponent_SetHideIndicatorDuringAttack");
static_assert(sizeof(ObjectPlacerComponent_SetHideIndicatorDuringAttack) == 0x000001, "Wrong size on ObjectPlacerComponent_SetHideIndicatorDuringAttack");
static_assert(offsetof(ObjectPlacerComponent_SetHideIndicatorDuringAttack, Enable) == 0x000000, "Member 'ObjectPlacerComponent_SetHideIndicatorDuringAttack::Enable' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetIndicatorOffsetX
// 0x0004 (0x0004 - 0x0000)
struct ObjectPlacerComponent_SetIndicatorOffsetX final
{
public:
	float                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetIndicatorOffsetX) == 0x000004, "Wrong alignment on ObjectPlacerComponent_SetIndicatorOffsetX");
static_assert(sizeof(ObjectPlacerComponent_SetIndicatorOffsetX) == 0x000004, "Wrong size on ObjectPlacerComponent_SetIndicatorOffsetX");
static_assert(offsetof(ObjectPlacerComponent_SetIndicatorOffsetX, X) == 0x000000, "Member 'ObjectPlacerComponent_SetIndicatorOffsetX::X' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetIndicatorOffsetY
// 0x0004 (0x0004 - 0x0000)
struct ObjectPlacerComponent_SetIndicatorOffsetY final
{
public:
	float                                         Y;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetIndicatorOffsetY) == 0x000004, "Wrong alignment on ObjectPlacerComponent_SetIndicatorOffsetY");
static_assert(sizeof(ObjectPlacerComponent_SetIndicatorOffsetY) == 0x000004, "Wrong size on ObjectPlacerComponent_SetIndicatorOffsetY");
static_assert(offsetof(ObjectPlacerComponent_SetIndicatorOffsetY, Y) == 0x000000, "Member 'ObjectPlacerComponent_SetIndicatorOffsetY::Y' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetMeshOffsetZ
// 0x0004 (0x0004 - 0x0000)
struct ObjectPlacerComponent_SetMeshOffsetZ final
{
public:
	float                                         Z;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetMeshOffsetZ) == 0x000004, "Wrong alignment on ObjectPlacerComponent_SetMeshOffsetZ");
static_assert(sizeof(ObjectPlacerComponent_SetMeshOffsetZ) == 0x000004, "Wrong size on ObjectPlacerComponent_SetMeshOffsetZ");
static_assert(offsetof(ObjectPlacerComponent_SetMeshOffsetZ, Z) == 0x000000, "Member 'ObjectPlacerComponent_SetMeshOffsetZ::Z' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetObjectMesh
// 0x0008 (0x0008 - 0x0000)
struct ObjectPlacerComponent_SetObjectMesh final
{
public:
	class UStaticMeshComponent*                   ObjectMesh;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetObjectMesh) == 0x000008, "Wrong alignment on ObjectPlacerComponent_SetObjectMesh");
static_assert(sizeof(ObjectPlacerComponent_SetObjectMesh) == 0x000008, "Wrong size on ObjectPlacerComponent_SetObjectMesh");
static_assert(offsetof(ObjectPlacerComponent_SetObjectMesh, ObjectMesh) == 0x000000, "Member 'ObjectPlacerComponent_SetObjectMesh::ObjectMesh' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.SetShowIndicator
// 0x0001 (0x0001 - 0x0000)
struct ObjectPlacerComponent_SetShowIndicator final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_SetShowIndicator) == 0x000001, "Wrong alignment on ObjectPlacerComponent_SetShowIndicator");
static_assert(sizeof(ObjectPlacerComponent_SetShowIndicator) == 0x000001, "Wrong size on ObjectPlacerComponent_SetShowIndicator");
static_assert(offsetof(ObjectPlacerComponent_SetShowIndicator, NewValue) == 0x000000, "Member 'ObjectPlacerComponent_SetShowIndicator::NewValue' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.GetObjectPlacementLocation
// 0x0018 (0x0018 - 0x0000)
struct ObjectPlacerComponent_GetObjectPlacementLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_GetObjectPlacementLocation) == 0x000008, "Wrong alignment on ObjectPlacerComponent_GetObjectPlacementLocation");
static_assert(sizeof(ObjectPlacerComponent_GetObjectPlacementLocation) == 0x000018, "Wrong size on ObjectPlacerComponent_GetObjectPlacementLocation");
static_assert(offsetof(ObjectPlacerComponent_GetObjectPlacementLocation, ReturnValue) == 0x000000, "Member 'ObjectPlacerComponent_GetObjectPlacementLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.GetObjectPlacementRotation
// 0x0018 (0x0018 - 0x0000)
struct ObjectPlacerComponent_GetObjectPlacementRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_GetObjectPlacementRotation) == 0x000008, "Wrong alignment on ObjectPlacerComponent_GetObjectPlacementRotation");
static_assert(sizeof(ObjectPlacerComponent_GetObjectPlacementRotation) == 0x000018, "Wrong size on ObjectPlacerComponent_GetObjectPlacementRotation");
static_assert(offsetof(ObjectPlacerComponent_GetObjectPlacementRotation, ReturnValue) == 0x000000, "Member 'ObjectPlacerComponent_GetObjectPlacementRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ObjectPlacerComponent.IsPlacementValid
// 0x0001 (0x0001 - 0x0000)
struct ObjectPlacerComponent_IsPlacementValid final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ObjectPlacerComponent_IsPlacementValid) == 0x000001, "Wrong alignment on ObjectPlacerComponent_IsPlacementValid");
static_assert(sizeof(ObjectPlacerComponent_IsPlacementValid) == 0x000001, "Wrong size on ObjectPlacerComponent_IsPlacementValid");
static_assert(offsetof(ObjectPlacerComponent_IsPlacementValid, ReturnValue) == 0x000000, "Member 'ObjectPlacerComponent_IsPlacementValid::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.Authority_AddBlindingEffector
// 0x0010 (0x0010 - 0x0000)
struct BlindableBaseComponent_Authority_AddBlindingEffector final
{
public:
	TScriptInterface<class IBlindingEffectorInterface> Effector;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_Authority_AddBlindingEffector) == 0x000008, "Wrong alignment on BlindableBaseComponent_Authority_AddBlindingEffector");
static_assert(sizeof(BlindableBaseComponent_Authority_AddBlindingEffector) == 0x000010, "Wrong size on BlindableBaseComponent_Authority_AddBlindingEffector");
static_assert(offsetof(BlindableBaseComponent_Authority_AddBlindingEffector, Effector) == 0x000000, "Member 'BlindableBaseComponent_Authority_AddBlindingEffector::Effector' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.Authority_Blinded
// 0x0010 (0x0010 - 0x0000)
struct BlindableBaseComponent_Authority_Blinded final
{
public:
	EBlindType                                    blindType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlindnessDuration;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EffectorActor;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_Authority_Blinded) == 0x000008, "Wrong alignment on BlindableBaseComponent_Authority_Blinded");
static_assert(sizeof(BlindableBaseComponent_Authority_Blinded) == 0x000010, "Wrong size on BlindableBaseComponent_Authority_Blinded");
static_assert(offsetof(BlindableBaseComponent_Authority_Blinded, blindType) == 0x000000, "Member 'BlindableBaseComponent_Authority_Blinded::blindType' has a wrong offset!");
static_assert(offsetof(BlindableBaseComponent_Authority_Blinded, BlindnessDuration) == 0x000004, "Member 'BlindableBaseComponent_Authority_Blinded::BlindnessDuration' has a wrong offset!");
static_assert(offsetof(BlindableBaseComponent_Authority_Blinded, EffectorActor) == 0x000008, "Member 'BlindableBaseComponent_Authority_Blinded::EffectorActor' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.Authority_RemoveBlindingEffector
// 0x0010 (0x0010 - 0x0000)
struct BlindableBaseComponent_Authority_RemoveBlindingEffector final
{
public:
	TScriptInterface<class IBlindingEffectorInterface> Effector;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_Authority_RemoveBlindingEffector) == 0x000008, "Wrong alignment on BlindableBaseComponent_Authority_RemoveBlindingEffector");
static_assert(sizeof(BlindableBaseComponent_Authority_RemoveBlindingEffector) == 0x000010, "Wrong size on BlindableBaseComponent_Authority_RemoveBlindingEffector");
static_assert(offsetof(BlindableBaseComponent_Authority_RemoveBlindingEffector, Effector) == 0x000000, "Member 'BlindableBaseComponent_Authority_RemoveBlindingEffector::Effector' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.OnChargeableCompletionPercentChanged
// 0x0010 (0x0010 - 0x0000)
struct BlindableBaseComponent_OnChargeableCompletionPercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlindableBaseComponent_OnChargeableCompletionPercentChanged) == 0x000008, "Wrong alignment on BlindableBaseComponent_OnChargeableCompletionPercentChanged");
static_assert(sizeof(BlindableBaseComponent_OnChargeableCompletionPercentChanged) == 0x000010, "Wrong size on BlindableBaseComponent_OnChargeableCompletionPercentChanged");
static_assert(offsetof(BlindableBaseComponent_OnChargeableCompletionPercentChanged, ChargeableComponent) == 0x000000, "Member 'BlindableBaseComponent_OnChargeableCompletionPercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(BlindableBaseComponent_OnChargeableCompletionPercentChanged, TotalPercentComplete) == 0x000008, "Member 'BlindableBaseComponent_OnChargeableCompletionPercentChanged::TotalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.SetChargeable
// 0x0008 (0x0008 - 0x0000)
struct BlindableBaseComponent_SetChargeable final
{
public:
	class UChargeableComponent*                   Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_SetChargeable) == 0x000008, "Wrong alignment on BlindableBaseComponent_SetChargeable");
static_assert(sizeof(BlindableBaseComponent_SetChargeable) == 0x000008, "Wrong size on BlindableBaseComponent_SetChargeable");
static_assert(offsetof(BlindableBaseComponent_SetChargeable, Value) == 0x000000, "Member 'BlindableBaseComponent_SetChargeable::Value' has a wrong offset!");

// Function DeadByDaylight.BlindableBaseComponent.IsBlinded
// 0x0001 (0x0001 - 0x0000)
struct BlindableBaseComponent_IsBlinded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlindableBaseComponent_IsBlinded) == 0x000001, "Wrong alignment on BlindableBaseComponent_IsBlinded");
static_assert(sizeof(BlindableBaseComponent_IsBlinded) == 0x000001, "Wrong size on BlindableBaseComponent_IsBlinded");
static_assert(offsetof(BlindableBaseComponent_IsBlinded, ReturnValue) == 0x000000, "Member 'BlindableBaseComponent_IsBlinded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.AddActorKnowledgeCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_AddActorKnowledgeCollection final
{
public:
	class UActorKnowledgeCollection*              Collection;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_AddActorKnowledgeCollection) == 0x000008, "Wrong alignment on DBDGameInstance_AddActorKnowledgeCollection");
static_assert(sizeof(DBDGameInstance_AddActorKnowledgeCollection) == 0x000008, "Wrong size on DBDGameInstance_AddActorKnowledgeCollection");
static_assert(offsetof(DBDGameInstance_AddActorKnowledgeCollection, Collection) == 0x000000, "Member 'DBDGameInstance_AddActorKnowledgeCollection::Collection' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.Authority_SimulatePerks
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_Authority_SimulatePerks final
{
public:
	TArray<class FName>                           Perks;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_Authority_SimulatePerks) == 0x000008, "Wrong alignment on DBDGameInstance_Authority_SimulatePerks");
static_assert(sizeof(DBDGameInstance_Authority_SimulatePerks) == 0x000018, "Wrong size on DBDGameInstance_Authority_SimulatePerks");
static_assert(offsetof(DBDGameInstance_Authority_SimulatePerks, Perks) == 0x000000, "Member 'DBDGameInstance_Authority_SimulatePerks::Perks' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_Authority_SimulatePerks, Level) == 0x000010, "Member 'DBDGameInstance_Authority_SimulatePerks::Level' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.BeginLoadingScreen
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_BeginLoadingScreen final
{
public:
	class FString                                 MapName;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_BeginLoadingScreen) == 0x000008, "Wrong alignment on DBDGameInstance_BeginLoadingScreen");
static_assert(sizeof(DBDGameInstance_BeginLoadingScreen) == 0x000010, "Wrong size on DBDGameInstance_BeginLoadingScreen");
static_assert(offsetof(DBDGameInstance_BeginLoadingScreen, MapName) == 0x000000, "Member 'DBDGameInstance_BeginLoadingScreen::MapName' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_ApplyMist
// 0x0004 (0x0004 - 0x0000)
struct DBDGameInstance_DBD_ApplyMist final
{
public:
	float                                         FogModifier;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_ApplyMist) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_ApplyMist");
static_assert(sizeof(DBDGameInstance_DBD_ApplyMist) == 0x000004, "Wrong size on DBDGameInstance_DBD_ApplyMist");
static_assert(offsetof(DBDGameInstance_DBD_ApplyMist, FogModifier) == 0x000000, "Member 'DBDGameInstance_DBD_ApplyMist::FogModifier' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_ChangeSteamOverlayPosition
// 0x000C (0x000C - 0x0000)
struct DBDGameInstance_DBD_ChangeSteamOverlayPosition final
{
public:
	int32                                         Position;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VerticalOffset;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HorizontalOffset;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_ChangeSteamOverlayPosition) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_ChangeSteamOverlayPosition");
static_assert(sizeof(DBDGameInstance_DBD_ChangeSteamOverlayPosition) == 0x00000C, "Wrong size on DBDGameInstance_DBD_ChangeSteamOverlayPosition");
static_assert(offsetof(DBDGameInstance_DBD_ChangeSteamOverlayPosition, Position) == 0x000000, "Member 'DBDGameInstance_DBD_ChangeSteamOverlayPosition::Position' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_ChangeSteamOverlayPosition, VerticalOffset) == 0x000004, "Member 'DBDGameInstance_DBD_ChangeSteamOverlayPosition::VerticalOffset' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_ChangeSteamOverlayPosition, HorizontalOffset) == 0x000008, "Member 'DBDGameInstance_DBD_ChangeSteamOverlayPosition::HorizontalOffset' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_CheckForNewContent
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_DBD_CheckForNewContent final
{
public:
	class FString                                 DebugGameVersion;                                  // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceDisplay;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_DBD_CheckForNewContent) == 0x000008, "Wrong alignment on DBDGameInstance_DBD_CheckForNewContent");
static_assert(sizeof(DBDGameInstance_DBD_CheckForNewContent) == 0x000018, "Wrong size on DBDGameInstance_DBD_CheckForNewContent");
static_assert(offsetof(DBDGameInstance_DBD_CheckForNewContent, DebugGameVersion) == 0x000000, "Member 'DBDGameInstance_DBD_CheckForNewContent::DebugGameVersion' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_CheckForNewContent, ForceDisplay) == 0x000010, "Member 'DBDGameInstance_DBD_CheckForNewContent::ForceDisplay' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_DisplayCurrentAchievementStat
// 0x000C (0x000C - 0x0000)
struct DBDGameInstance_DBD_DisplayCurrentAchievementStat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_DisplayCurrentAchievementStat) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_DisplayCurrentAchievementStat");
static_assert(sizeof(DBDGameInstance_DBD_DisplayCurrentAchievementStat) == 0x00000C, "Wrong size on DBDGameInstance_DBD_DisplayCurrentAchievementStat");
static_assert(offsetof(DBDGameInstance_DBD_DisplayCurrentAchievementStat, StatName) == 0x000000, "Member 'DBDGameInstance_DBD_DisplayCurrentAchievementStat::StatName' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_ResetCurrentAchievementStat
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_DBD_ResetCurrentAchievementStat final
{
public:
	class FName                                   StatName;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AndUpload;                                         // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_DBD_ResetCurrentAchievementStat) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_ResetCurrentAchievementStat");
static_assert(sizeof(DBDGameInstance_DBD_ResetCurrentAchievementStat) == 0x000010, "Wrong size on DBDGameInstance_DBD_ResetCurrentAchievementStat");
static_assert(offsetof(DBDGameInstance_DBD_ResetCurrentAchievementStat, StatName) == 0x000000, "Member 'DBDGameInstance_DBD_ResetCurrentAchievementStat::StatName' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_ResetCurrentAchievementStat, AndUpload) == 0x00000C, "Member 'DBDGameInstance_DBD_ResetCurrentAchievementStat::AndUpload' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_ResetCurrentAchievementStats
// 0x0002 (0x0002 - 0x0000)
struct DBDGameInstance_DBD_ResetCurrentAchievementStats final
{
public:
	bool                                          AndUpload;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AndUpdateData;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_ResetCurrentAchievementStats) == 0x000001, "Wrong alignment on DBDGameInstance_DBD_ResetCurrentAchievementStats");
static_assert(sizeof(DBDGameInstance_DBD_ResetCurrentAchievementStats) == 0x000002, "Wrong size on DBDGameInstance_DBD_ResetCurrentAchievementStats");
static_assert(offsetof(DBDGameInstance_DBD_ResetCurrentAchievementStats, AndUpload) == 0x000000, "Member 'DBDGameInstance_DBD_ResetCurrentAchievementStats::AndUpload' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_ResetCurrentAchievementStats, AndUpdateData) == 0x000001, "Member 'DBDGameInstance_DBD_ResetCurrentAchievementStats::AndUpdateData' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_SetFearMarketDate
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_DBD_SetFearMarketDate final
{
public:
	class FString                                 DateString;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_SetFearMarketDate) == 0x000008, "Wrong alignment on DBDGameInstance_DBD_SetFearMarketDate");
static_assert(sizeof(DBDGameInstance_DBD_SetFearMarketDate) == 0x000010, "Wrong size on DBDGameInstance_DBD_SetFearMarketDate");
static_assert(offsetof(DBDGameInstance_DBD_SetFearMarketDate, DateString) == 0x000000, "Member 'DBDGameInstance_DBD_SetFearMarketDate::DateString' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_SetStatsUploadEnabled
// 0x0001 (0x0001 - 0x0000)
struct DBDGameInstance_DBD_SetStatsUploadEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_SetStatsUploadEnabled) == 0x000001, "Wrong alignment on DBDGameInstance_DBD_SetStatsUploadEnabled");
static_assert(sizeof(DBDGameInstance_DBD_SetStatsUploadEnabled) == 0x000001, "Wrong size on DBDGameInstance_DBD_SetStatsUploadEnabled");
static_assert(offsetof(DBDGameInstance_DBD_SetStatsUploadEnabled, Enabled) == 0x000000, "Member 'DBDGameInstance_DBD_SetStatsUploadEnabled::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_TestDiceRoll
// 0x000C (0x000C - 0x0000)
struct DBDGameInstance_DBD_TestDiceRoll final
{
public:
	float                                         BaseProbability;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_TestDiceRoll) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_TestDiceRoll");
static_assert(sizeof(DBDGameInstance_DBD_TestDiceRoll) == 0x00000C, "Wrong size on DBDGameInstance_DBD_TestDiceRoll");
static_assert(offsetof(DBDGameInstance_DBD_TestDiceRoll, BaseProbability) == 0x000000, "Member 'DBDGameInstance_DBD_TestDiceRoll::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestDiceRoll, MultiplicativeModifier) == 0x000004, "Member 'DBDGameInstance_DBD_TestDiceRoll::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestDiceRoll, AdditiveModifier) == 0x000008, "Member 'DBDGameInstance_DBD_TestDiceRoll::AdditiveModifier' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_TestSaveFile
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_DBD_TestSaveFile final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_TestSaveFile) == 0x000008, "Wrong alignment on DBDGameInstance_DBD_TestSaveFile");
static_assert(sizeof(DBDGameInstance_DBD_TestSaveFile) == 0x000010, "Wrong size on DBDGameInstance_DBD_TestSaveFile");
static_assert(offsetof(DBDGameInstance_DBD_TestSaveFile, Param_Name) == 0x000000, "Member 'DBDGameInstance_DBD_TestSaveFile::Param_Name' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.DBD_TestTickedDiceRoll
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_DBD_TestTickedDiceRoll final
{
public:
	float                                         BaseProbability;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ticks;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_DBD_TestTickedDiceRoll) == 0x000004, "Wrong alignment on DBDGameInstance_DBD_TestTickedDiceRoll");
static_assert(sizeof(DBDGameInstance_DBD_TestTickedDiceRoll) == 0x000010, "Wrong size on DBDGameInstance_DBD_TestTickedDiceRoll");
static_assert(offsetof(DBDGameInstance_DBD_TestTickedDiceRoll, BaseProbability) == 0x000000, "Member 'DBDGameInstance_DBD_TestTickedDiceRoll::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestTickedDiceRoll, Ticks) == 0x000004, "Member 'DBDGameInstance_DBD_TestTickedDiceRoll::Ticks' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestTickedDiceRoll, MultiplicativeModifier) == 0x000008, "Member 'DBDGameInstance_DBD_TestTickedDiceRoll::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_DBD_TestTickedDiceRoll, AdditiveModifier) == 0x00000C, "Member 'DBDGameInstance_DBD_TestTickedDiceRoll::AdditiveModifier' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.EndLoadingScreen
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_EndLoadingScreen final
{
public:
	class UWorld*                                 LoadedWorld;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_EndLoadingScreen) == 0x000008, "Wrong alignment on DBDGameInstance_EndLoadingScreen");
static_assert(sizeof(DBDGameInstance_EndLoadingScreen) == 0x000008, "Wrong size on DBDGameInstance_EndLoadingScreen");
static_assert(offsetof(DBDGameInstance_EndLoadingScreen, LoadedWorld) == 0x000000, "Member 'DBDGameInstance_EndLoadingScreen::LoadedWorld' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLevelLighting
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLevelLighting final
{
public:
	class ABaseSky*                               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLevelLighting) == 0x000008, "Wrong alignment on DBDGameInstance_GetLevelLighting");
static_assert(sizeof(DBDGameInstance_GetLevelLighting) == 0x000008, "Wrong size on DBDGameInstance_GetLevelLighting");
static_assert(offsetof(DBDGameInstance_GetLevelLighting, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLevelLighting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLightingHelper
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLightingHelper final
{
public:
	class ULightingHelper*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLightingHelper) == 0x000008, "Wrong alignment on DBDGameInstance_GetLightingHelper");
static_assert(sizeof(DBDGameInstance_GetLightingHelper) == 0x000008, "Wrong size on DBDGameInstance_GetLightingHelper");
static_assert(offsetof(DBDGameInstance_GetLightingHelper, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLightingHelper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLightInterpolator
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLightInterpolator final
{
public:
	class ULightingInterpolator*                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLightInterpolator) == 0x000008, "Wrong alignment on DBDGameInstance_GetLightInterpolator");
static_assert(sizeof(DBDGameInstance_GetLightInterpolator) == 0x000008, "Wrong size on DBDGameInstance_GetLightInterpolator");
static_assert(offsetof(DBDGameInstance_GetLightInterpolator, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLightInterpolator::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GotoSplashScreen
// 0x0001 (0x0001 - 0x0000)
struct DBDGameInstance_GotoSplashScreen final
{
public:
	bool                                          ShowDefaultDialogueOnSplashScreen;                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GotoSplashScreen) == 0x000001, "Wrong alignment on DBDGameInstance_GotoSplashScreen");
static_assert(sizeof(DBDGameInstance_GotoSplashScreen) == 0x000001, "Wrong size on DBDGameInstance_GotoSplashScreen");
static_assert(offsetof(DBDGameInstance_GotoSplashScreen, ShowDefaultDialogueOnSplashScreen) == 0x000000, "Member 'DBDGameInstance_GotoSplashScreen::ShowDefaultDialogueOnSplashScreen' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.RemoveActorKnowledgeCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_RemoveActorKnowledgeCollection final
{
public:
	class UActorKnowledgeCollection*              Collection;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_RemoveActorKnowledgeCollection) == 0x000008, "Wrong alignment on DBDGameInstance_RemoveActorKnowledgeCollection");
static_assert(sizeof(DBDGameInstance_RemoveActorKnowledgeCollection) == 0x000008, "Wrong size on DBDGameInstance_RemoveActorKnowledgeCollection");
static_assert(offsetof(DBDGameInstance_RemoveActorKnowledgeCollection, Collection) == 0x000000, "Member 'DBDGameInstance_RemoveActorKnowledgeCollection::Collection' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.SimulateOfferingSequence
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_SimulateOfferingSequence final
{
public:
	TArray<class FName>                           Offerings;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          PlaySequence;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_SimulateOfferingSequence) == 0x000008, "Wrong alignment on DBDGameInstance_SimulateOfferingSequence");
static_assert(sizeof(DBDGameInstance_SimulateOfferingSequence) == 0x000018, "Wrong size on DBDGameInstance_SimulateOfferingSequence");
static_assert(offsetof(DBDGameInstance_SimulateOfferingSequence, Offerings) == 0x000000, "Member 'DBDGameInstance_SimulateOfferingSequence::Offerings' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_SimulateOfferingSequence, PlaySequence) == 0x000010, "Member 'DBDGameInstance_SimulateOfferingSequence::PlaySequence' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetBonusPointEventsManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetBonusPointEventsManager final
{
public:
	class UBonusPointEventsManager*               ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetBonusPointEventsManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetBonusPointEventsManager");
static_assert(sizeof(DBDGameInstance_GetBonusPointEventsManager) == 0x000008, "Wrong size on DBDGameInstance_GetBonusPointEventsManager");
static_assert(offsetof(DBDGameInstance_GetBonusPointEventsManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetBonusPointEventsManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetCharacterClippingPrimitiveCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetCharacterClippingPrimitiveCollection final
{
public:
	class UPrimitiveCollection*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetCharacterClippingPrimitiveCollection) == 0x000008, "Wrong alignment on DBDGameInstance_GetCharacterClippingPrimitiveCollection");
static_assert(sizeof(DBDGameInstance_GetCharacterClippingPrimitiveCollection) == 0x000008, "Wrong size on DBDGameInstance_GetCharacterClippingPrimitiveCollection");
static_assert(offsetof(DBDGameInstance_GetCharacterClippingPrimitiveCollection, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetCharacterClippingPrimitiveCollection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetCharacterDefaultItem
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_GetCharacterDefaultItem final
{
public:
	int32                                         InCharacterIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetCharacterDefaultItem) == 0x000004, "Wrong alignment on DBDGameInstance_GetCharacterDefaultItem");
static_assert(sizeof(DBDGameInstance_GetCharacterDefaultItem) == 0x000010, "Wrong size on DBDGameInstance_GetCharacterDefaultItem");
static_assert(offsetof(DBDGameInstance_GetCharacterDefaultItem, InCharacterIndex) == 0x000000, "Member 'DBDGameInstance_GetCharacterDefaultItem::InCharacterIndex' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_GetCharacterDefaultItem, ReturnValue) == 0x000004, "Member 'DBDGameInstance_GetCharacterDefaultItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetCinematicManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetCinematicManager final
{
public:
	class UCinematicManager*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetCinematicManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetCinematicManager");
static_assert(sizeof(DBDGameInstance_GetCinematicManager) == 0x000008, "Wrong size on DBDGameInstance_GetCinematicManager");
static_assert(offsetof(DBDGameInstance_GetCinematicManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetCinematicManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetConsentManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetConsentManager final
{
public:
	class UConsentManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetConsentManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetConsentManager");
static_assert(sizeof(DBDGameInstance_GetConsentManager) == 0x000008, "Wrong size on DBDGameInstance_GetConsentManager");
static_assert(offsetof(DBDGameInstance_GetConsentManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetConsentManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetDeadOrDisconnectedCampersCount
// 0x0010 (0x0010 - 0x0000)
struct DBDGameInstance_GetDeadOrDisconnectedCampersCount final
{
public:
	class ADBDPlayerState*                        Exception;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_GetDeadOrDisconnectedCampersCount) == 0x000008, "Wrong alignment on DBDGameInstance_GetDeadOrDisconnectedCampersCount");
static_assert(sizeof(DBDGameInstance_GetDeadOrDisconnectedCampersCount) == 0x000010, "Wrong size on DBDGameInstance_GetDeadOrDisconnectedCampersCount");
static_assert(offsetof(DBDGameInstance_GetDeadOrDisconnectedCampersCount, Exception) == 0x000000, "Member 'DBDGameInstance_GetDeadOrDisconnectedCampersCount::Exception' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_GetDeadOrDisconnectedCampersCount, ReturnValue) == 0x000008, "Member 'DBDGameInstance_GetDeadOrDisconnectedCampersCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetDecalSpawnerCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetDecalSpawnerCollection final
{
public:
	class UDecalSpawnerCollection*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetDecalSpawnerCollection) == 0x000008, "Wrong alignment on DBDGameInstance_GetDecalSpawnerCollection");
static_assert(sizeof(DBDGameInstance_GetDecalSpawnerCollection) == 0x000008, "Wrong size on DBDGameInstance_GetDecalSpawnerCollection");
static_assert(offsetof(DBDGameInstance_GetDecalSpawnerCollection, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetDecalSpawnerCollection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetDedicatedServerManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetDedicatedServerManager final
{
public:
	class UDedicatedServerManager*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetDedicatedServerManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetDedicatedServerManager");
static_assert(sizeof(DBDGameInstance_GetDedicatedServerManager) == 0x000008, "Wrong size on DBDGameInstance_GetDedicatedServerManager");
static_assert(offsetof(DBDGameInstance_GetDedicatedServerManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetDedicatedServerManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetInventoryHandler
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetInventoryHandler final
{
public:
	class UInventoryHandler*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetInventoryHandler) == 0x000008, "Wrong alignment on DBDGameInstance_GetInventoryHandler");
static_assert(sizeof(DBDGameInstance_GetInventoryHandler) == 0x000008, "Wrong size on DBDGameInstance_GetInventoryHandler");
static_assert(offsetof(DBDGameInstance_GetInventoryHandler, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetInventoryHandler::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLocalEventManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLocalEventManager final
{
public:
	class ULocalEventManager*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLocalEventManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetLocalEventManager");
static_assert(sizeof(DBDGameInstance_GetLocalEventManager) == 0x000008, "Wrong size on DBDGameInstance_GetLocalEventManager");
static_assert(offsetof(DBDGameInstance_GetLocalEventManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLocalEventManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLocallyControlledCharacter
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLocallyControlledCharacter final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLocallyControlledCharacter) == 0x000008, "Wrong alignment on DBDGameInstance_GetLocallyControlledCharacter");
static_assert(sizeof(DBDGameInstance_GetLocallyControlledCharacter) == 0x000008, "Wrong size on DBDGameInstance_GetLocallyControlledCharacter");
static_assert(offsetof(DBDGameInstance_GetLocallyControlledCharacter, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLocallyControlledCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLocalPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLocalPlayer final
{
public:
	class ULocalPlayer*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLocalPlayer) == 0x000008, "Wrong alignment on DBDGameInstance_GetLocalPlayer");
static_assert(sizeof(DBDGameInstance_GetLocalPlayer) == 0x000008, "Wrong size on DBDGameInstance_GetLocalPlayer");
static_assert(offsetof(DBDGameInstance_GetLocalPlayer, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLocalPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetLocalPlayerController
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetLocalPlayerController final
{
public:
	class APlayerController*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetLocalPlayerController) == 0x000008, "Wrong alignment on DBDGameInstance_GetLocalPlayerController");
static_assert(sizeof(DBDGameInstance_GetLocalPlayerController) == 0x000008, "Wrong size on DBDGameInstance_GetLocalPlayerController");
static_assert(offsetof(DBDGameInstance_GetLocalPlayerController, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetLocalPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetMapActorDB
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetMapActorDB final
{
public:
	class UMapActorDB*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetMapActorDB) == 0x000008, "Wrong alignment on DBDGameInstance_GetMapActorDB");
static_assert(sizeof(DBDGameInstance_GetMapActorDB) == 0x000008, "Wrong size on DBDGameInstance_GetMapActorDB");
static_assert(offsetof(DBDGameInstance_GetMapActorDB, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetMapActorDB::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetMaxSurvivorCount
// 0x0004 (0x0004 - 0x0000)
struct DBDGameInstance_GetMaxSurvivorCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetMaxSurvivorCount) == 0x000004, "Wrong alignment on DBDGameInstance_GetMaxSurvivorCount");
static_assert(sizeof(DBDGameInstance_GetMaxSurvivorCount) == 0x000004, "Wrong size on DBDGameInstance_GetMaxSurvivorCount");
static_assert(offsetof(DBDGameInstance_GetMaxSurvivorCount, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetMaxSurvivorCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetPlayerLevelManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetPlayerLevelManager final
{
public:
	class UDBDPlayerLevelManager*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetPlayerLevelManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetPlayerLevelManager");
static_assert(sizeof(DBDGameInstance_GetPlayerLevelManager) == 0x000008, "Wrong size on DBDGameInstance_GetPlayerLevelManager");
static_assert(offsetof(DBDGameInstance_GetPlayerLevelManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetPlayerLevelManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetPlayerNameRegistration
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetPlayerNameRegistration final
{
public:
	class UPlayerNameRegistration*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetPlayerNameRegistration) == 0x000008, "Wrong alignment on DBDGameInstance_GetPlayerNameRegistration");
static_assert(sizeof(DBDGameInstance_GetPlayerNameRegistration) == 0x000008, "Wrong size on DBDGameInstance_GetPlayerNameRegistration");
static_assert(offsetof(DBDGameInstance_GetPlayerNameRegistration, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetPlayerNameRegistration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetRankManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetRankManager final
{
public:
	class URankManager*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetRankManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetRankManager");
static_assert(sizeof(DBDGameInstance_GetRankManager) == 0x000008, "Wrong size on DBDGameInstance_GetRankManager");
static_assert(offsetof(DBDGameInstance_GetRankManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetRankManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetSoftBanManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetSoftBanManager final
{
public:
	class USoftBanManager*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetSoftBanManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetSoftBanManager");
static_assert(sizeof(DBDGameInstance_GetSoftBanManager) == 0x000008, "Wrong size on DBDGameInstance_GetSoftBanManager");
static_assert(offsetof(DBDGameInstance_GetSoftBanManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetSoftBanManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetSpecialEventManager
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetSpecialEventManager final
{
public:
	class USpecialeventmanager*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetSpecialEventManager) == 0x000008, "Wrong alignment on DBDGameInstance_GetSpecialEventManager");
static_assert(sizeof(DBDGameInstance_GetSpecialEventManager) == 0x000008, "Wrong size on DBDGameInstance_GetSpecialEventManager");
static_assert(offsetof(DBDGameInstance_GetSpecialEventManager, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetSpecialEventManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.GetTimeUtils
// 0x0008 (0x0008 - 0x0000)
struct DBDGameInstance_GetTimeUtils final
{
public:
	class UDBDTimeUtilities*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_GetTimeUtils) == 0x000008, "Wrong alignment on DBDGameInstance_GetTimeUtils");
static_assert(sizeof(DBDGameInstance_GetTimeUtils) == 0x000008, "Wrong size on DBDGameInstance_GetTimeUtils");
static_assert(offsetof(DBDGameInstance_GetTimeUtils, ReturnValue) == 0x000000, "Member 'DBDGameInstance_GetTimeUtils::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.HasOfferingByType
// 0x0002 (0x0002 - 0x0000)
struct DBDGameInstance_HasOfferingByType final
{
public:
	EOfferingEffectType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_HasOfferingByType) == 0x000001, "Wrong alignment on DBDGameInstance_HasOfferingByType");
static_assert(sizeof(DBDGameInstance_HasOfferingByType) == 0x000002, "Wrong size on DBDGameInstance_HasOfferingByType");
static_assert(offsetof(DBDGameInstance_HasOfferingByType, Type) == 0x000000, "Member 'DBDGameInstance_HasOfferingByType::Type' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_HasOfferingByType, ReturnValue) == 0x000001, "Member 'DBDGameInstance_HasOfferingByType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.HasOfferingOfType
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_HasOfferingOfType final
{
public:
	EOfferingEffectType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_HasOfferingOfType) == 0x000004, "Wrong alignment on DBDGameInstance_HasOfferingOfType");
static_assert(sizeof(DBDGameInstance_HasOfferingOfType) == 0x000018, "Wrong size on DBDGameInstance_HasOfferingOfType");
static_assert(offsetof(DBDGameInstance_HasOfferingOfType, Type) == 0x000000, "Member 'DBDGameInstance_HasOfferingOfType::Type' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_HasOfferingOfType, PlayerId) == 0x000004, "Member 'DBDGameInstance_HasOfferingOfType::PlayerId' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_HasOfferingOfType, Tag) == 0x000008, "Member 'DBDGameInstance_HasOfferingOfType::Tag' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_HasOfferingOfType, ReturnValue) == 0x000014, "Member 'DBDGameInstance_HasOfferingOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.IsActorKnown
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_IsActorKnown final
{
public:
	const class ADBDPlayer*                       KnowledgePossessor;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PossiblyKnownActor;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameInstance_IsActorKnown) == 0x000008, "Wrong alignment on DBDGameInstance_IsActorKnown");
static_assert(sizeof(DBDGameInstance_IsActorKnown) == 0x000018, "Wrong size on DBDGameInstance_IsActorKnown");
static_assert(offsetof(DBDGameInstance_IsActorKnown, KnowledgePossessor) == 0x000000, "Member 'DBDGameInstance_IsActorKnown::KnowledgePossessor' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_IsActorKnown, PossiblyKnownActor) == 0x000008, "Member 'DBDGameInstance_IsActorKnown::PossiblyKnownActor' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_IsActorKnown, ReturnValue) == 0x000010, "Member 'DBDGameInstance_IsActorKnown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameInstance.OnTimeTravelComplete
// 0x0018 (0x0018 - 0x0000)
struct DBDGameInstance_OnTimeTravelComplete final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Date;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameInstance_OnTimeTravelComplete) == 0x000008, "Wrong alignment on DBDGameInstance_OnTimeTravelComplete");
static_assert(sizeof(DBDGameInstance_OnTimeTravelComplete) == 0x000018, "Wrong size on DBDGameInstance_OnTimeTravelComplete");
static_assert(offsetof(DBDGameInstance_OnTimeTravelComplete, Success) == 0x000000, "Member 'DBDGameInstance_OnTimeTravelComplete::Success' has a wrong offset!");
static_assert(offsetof(DBDGameInstance_OnTimeTravelComplete, Date) == 0x000008, "Member 'DBDGameInstance_OnTimeTravelComplete::Date' has a wrong offset!");

// Function DeadByDaylight.AimingCrosshairComponent.Cosmetic_OnCrosshairStateChanged
// 0x0002 (0x0002 - 0x0000)
struct AimingCrosshairComponent_Cosmetic_OnCrosshairStateChanged final
{
public:
	EAimingCrosshairState                         NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAimingCrosshairState                         LastState;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AimingCrosshairComponent_Cosmetic_OnCrosshairStateChanged) == 0x000001, "Wrong alignment on AimingCrosshairComponent_Cosmetic_OnCrosshairStateChanged");
static_assert(sizeof(AimingCrosshairComponent_Cosmetic_OnCrosshairStateChanged) == 0x000002, "Wrong size on AimingCrosshairComponent_Cosmetic_OnCrosshairStateChanged");
static_assert(offsetof(AimingCrosshairComponent_Cosmetic_OnCrosshairStateChanged, NewState) == 0x000000, "Member 'AimingCrosshairComponent_Cosmetic_OnCrosshairStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(AimingCrosshairComponent_Cosmetic_OnCrosshairStateChanged, LastState) == 0x000001, "Member 'AimingCrosshairComponent_Cosmetic_OnCrosshairStateChanged::LastState' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Authority_AddToInventory
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_Authority_AddToInventory final
{
public:
	class ACollectable*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_Authority_AddToInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Authority_AddToInventory");
static_assert(sizeof(CharacterInventoryComponent_Authority_AddToInventory) == 0x000010, "Wrong size on CharacterInventoryComponent_Authority_AddToInventory");
static_assert(offsetof(CharacterInventoryComponent_Authority_AddToInventory, Item) == 0x000000, "Member 'CharacterInventoryComponent_Authority_AddToInventory::Item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Authority_AddToInventory, InventoryType) == 0x000008, "Member 'CharacterInventoryComponent_Authority_AddToInventory::InventoryType' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Authority_Collect
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_Authority_Collect final
{
public:
	class ACollectable*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwapItemsAndHideOldAway;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_Authority_Collect) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Authority_Collect");
static_assert(sizeof(CharacterInventoryComponent_Authority_Collect) == 0x000010, "Wrong size on CharacterInventoryComponent_Authority_Collect");
static_assert(offsetof(CharacterInventoryComponent_Authority_Collect, Item) == 0x000000, "Member 'CharacterInventoryComponent_Authority_Collect::Item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Authority_Collect, InventoryType) == 0x000008, "Member 'CharacterInventoryComponent_Authority_Collect::InventoryType' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Authority_Collect, SwapItemsAndHideOldAway) == 0x000009, "Member 'CharacterInventoryComponent_Authority_Collect::SwapItemsAndHideOldAway' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Authority_RemoveFromInventory
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_Authority_RemoveFromInventory final
{
public:
	class ACollectable*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_Authority_RemoveFromInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Authority_RemoveFromInventory");
static_assert(sizeof(CharacterInventoryComponent_Authority_RemoveFromInventory) == 0x000010, "Wrong size on CharacterInventoryComponent_Authority_RemoveFromInventory");
static_assert(offsetof(CharacterInventoryComponent_Authority_RemoveFromInventory, Item) == 0x000000, "Member 'CharacterInventoryComponent_Authority_RemoveFromInventory::Item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Authority_RemoveFromInventory, InventoryType) == 0x000008, "Member 'CharacterInventoryComponent_Authority_RemoveFromInventory::InventoryType' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetAddon
// 0x0018 (0x0018 - 0x0000)
struct CharacterInventoryComponent_GetAddon final
{
public:
	class FName                                   AddonID;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UItemAddon*                             ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetAddon) == 0x000008, "Wrong alignment on CharacterInventoryComponent_GetAddon");
static_assert(sizeof(CharacterInventoryComponent_GetAddon) == 0x000018, "Wrong size on CharacterInventoryComponent_GetAddon");
static_assert(offsetof(CharacterInventoryComponent_GetAddon, AddonID) == 0x000000, "Member 'CharacterInventoryComponent_GetAddon::AddonID' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_GetAddon, ReturnValue) == 0x000010, "Member 'CharacterInventoryComponent_GetAddon::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetAddons
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_GetAddons final
{
public:
	TArray<class UItemAddon*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetAddons) == 0x000008, "Wrong alignment on CharacterInventoryComponent_GetAddons");
static_assert(sizeof(CharacterInventoryComponent_GetAddons) == 0x000010, "Wrong size on CharacterInventoryComponent_GetAddons");
static_assert(offsetof(CharacterInventoryComponent_GetAddons, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_GetAddons::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetFirstItemFromInventory
// 0x0018 (0x0018 - 0x0000)
struct CharacterInventoryComponent_GetFirstItemFromInventory final
{
public:
	TSubclassOf<class ACollectable>               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACollectable*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetFirstItemFromInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_GetFirstItemFromInventory");
static_assert(sizeof(CharacterInventoryComponent_GetFirstItemFromInventory) == 0x000018, "Wrong size on CharacterInventoryComponent_GetFirstItemFromInventory");
static_assert(offsetof(CharacterInventoryComponent_GetFirstItemFromInventory, Item) == 0x000000, "Member 'CharacterInventoryComponent_GetFirstItemFromInventory::Item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_GetFirstItemFromInventory, InventoryType) == 0x000008, "Member 'CharacterInventoryComponent_GetFirstItemFromInventory::InventoryType' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_GetFirstItemFromInventory, ReturnValue) == 0x000010, "Member 'CharacterInventoryComponent_GetFirstItemFromInventory::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasInInventory
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_HasInInventory final
{
public:
	TSubclassOf<class ACollectable>               Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_HasInInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_HasInInventory");
static_assert(sizeof(CharacterInventoryComponent_HasInInventory) == 0x000010, "Wrong size on CharacterInventoryComponent_HasInInventory");
static_assert(offsetof(CharacterInventoryComponent_HasInInventory, Item) == 0x000000, "Member 'CharacterInventoryComponent_HasInInventory::Item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_HasInInventory, InventoryType) == 0x000008, "Member 'CharacterInventoryComponent_HasInInventory::InventoryType' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_HasInInventory, ReturnValue) == 0x000009, "Member 'CharacterInventoryComponent_HasInInventory::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Multicast_AddToInventory
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_Multicast_AddToInventory final
{
public:
	class ACollectable*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_Multicast_AddToInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Multicast_AddToInventory");
static_assert(sizeof(CharacterInventoryComponent_Multicast_AddToInventory) == 0x000010, "Wrong size on CharacterInventoryComponent_Multicast_AddToInventory");
static_assert(offsetof(CharacterInventoryComponent_Multicast_AddToInventory, Item) == 0x000000, "Member 'CharacterInventoryComponent_Multicast_AddToInventory::Item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Multicast_AddToInventory, InventoryType) == 0x000008, "Member 'CharacterInventoryComponent_Multicast_AddToInventory::InventoryType' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Multicast_MoveItemToOtherSlot
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_Multicast_MoveItemToOtherSlot final
{
public:
	class ACollectable*                           ItemBeingMoved;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                TargetInventoryType;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_Multicast_MoveItemToOtherSlot) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Multicast_MoveItemToOtherSlot");
static_assert(sizeof(CharacterInventoryComponent_Multicast_MoveItemToOtherSlot) == 0x000010, "Wrong size on CharacterInventoryComponent_Multicast_MoveItemToOtherSlot");
static_assert(offsetof(CharacterInventoryComponent_Multicast_MoveItemToOtherSlot, ItemBeingMoved) == 0x000000, "Member 'CharacterInventoryComponent_Multicast_MoveItemToOtherSlot::ItemBeingMoved' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Multicast_MoveItemToOtherSlot, TargetInventoryType) == 0x000008, "Member 'CharacterInventoryComponent_Multicast_MoveItemToOtherSlot::TargetInventoryType' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.Multicast_RemoveFromInventory
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_Multicast_RemoveFromInventory final
{
public:
	class ACollectable*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_Multicast_RemoveFromInventory) == 0x000008, "Wrong alignment on CharacterInventoryComponent_Multicast_RemoveFromInventory");
static_assert(sizeof(CharacterInventoryComponent_Multicast_RemoveFromInventory) == 0x000010, "Wrong size on CharacterInventoryComponent_Multicast_RemoveFromInventory");
static_assert(offsetof(CharacterInventoryComponent_Multicast_RemoveFromInventory, Item) == 0x000000, "Member 'CharacterInventoryComponent_Multicast_RemoveFromInventory::Item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_Multicast_RemoveFromInventory, InventoryType) == 0x000008, "Member 'CharacterInventoryComponent_Multicast_RemoveFromInventory::InventoryType' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.SpawnAndCollectItem
// 0x0018 (0x0018 - 0x0000)
struct CharacterInventoryComponent_SpawnAndCollectItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ACollectable*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_SpawnAndCollectItem) == 0x000008, "Wrong alignment on CharacterInventoryComponent_SpawnAndCollectItem");
static_assert(sizeof(CharacterInventoryComponent_SpawnAndCollectItem) == 0x000018, "Wrong size on CharacterInventoryComponent_SpawnAndCollectItem");
static_assert(offsetof(CharacterInventoryComponent_SpawnAndCollectItem, ItemId) == 0x000000, "Member 'CharacterInventoryComponent_SpawnAndCollectItem::ItemId' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_SpawnAndCollectItem, ReturnValue) == 0x000010, "Member 'CharacterInventoryComponent_SpawnAndCollectItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetItem
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_GetItem final
{
public:
	EInventoryType                                InventoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACollectable*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetItem) == 0x000008, "Wrong alignment on CharacterInventoryComponent_GetItem");
static_assert(sizeof(CharacterInventoryComponent_GetItem) == 0x000010, "Wrong size on CharacterInventoryComponent_GetItem");
static_assert(offsetof(CharacterInventoryComponent_GetItem, InventoryType) == 0x000000, "Member 'CharacterInventoryComponent_GetItem::InventoryType' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_GetItem, ReturnValue) == 0x000008, "Member 'CharacterInventoryComponent_GetItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetItemCount
// 0x0004 (0x0004 - 0x0000)
struct CharacterInventoryComponent_GetItemCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetItemCount) == 0x000004, "Wrong alignment on CharacterInventoryComponent_GetItemCount");
static_assert(sizeof(CharacterInventoryComponent_GetItemCount) == 0x000004, "Wrong size on CharacterInventoryComponent_GetItemCount");
static_assert(offsetof(CharacterInventoryComponent_GetItemCount, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_GetItemCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetItemCountByID
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_GetItemCountByID final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetItemCountByID) == 0x000004, "Wrong alignment on CharacterInventoryComponent_GetItemCountByID");
static_assert(sizeof(CharacterInventoryComponent_GetItemCountByID) == 0x000010, "Wrong size on CharacterInventoryComponent_GetItemCountByID");
static_assert(offsetof(CharacterInventoryComponent_GetItemCountByID, ItemId) == 0x000000, "Member 'CharacterInventoryComponent_GetItemCountByID::ItemId' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_GetItemCountByID, ReturnValue) == 0x00000C, "Member 'CharacterInventoryComponent_GetItemCountByID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.GetItemID
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_GetItemID final
{
public:
	EInventoryType                                InventoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_GetItemID) == 0x000004, "Wrong alignment on CharacterInventoryComponent_GetItemID");
static_assert(sizeof(CharacterInventoryComponent_GetItemID) == 0x000010, "Wrong size on CharacterInventoryComponent_GetItemID");
static_assert(offsetof(CharacterInventoryComponent_GetItemID, InventoryType) == 0x000000, "Member 'CharacterInventoryComponent_GetItemID::InventoryType' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_GetItemID, ReturnValue) == 0x000004, "Member 'CharacterInventoryComponent_GetItemID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasEquippedItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterInventoryComponent_HasEquippedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_HasEquippedItem) == 0x000001, "Wrong alignment on CharacterInventoryComponent_HasEquippedItem");
static_assert(sizeof(CharacterInventoryComponent_HasEquippedItem) == 0x000001, "Wrong size on CharacterInventoryComponent_HasEquippedItem");
static_assert(offsetof(CharacterInventoryComponent_HasEquippedItem, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_HasEquippedItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasItem
// 0x0002 (0x0002 - 0x0000)
struct CharacterInventoryComponent_HasItem final
{
public:
	EInventoryType                                InventoryType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_HasItem) == 0x000001, "Wrong alignment on CharacterInventoryComponent_HasItem");
static_assert(sizeof(CharacterInventoryComponent_HasItem) == 0x000002, "Wrong size on CharacterInventoryComponent_HasItem");
static_assert(offsetof(CharacterInventoryComponent_HasItem, InventoryType) == 0x000000, "Member 'CharacterInventoryComponent_HasItem::InventoryType' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_HasItem, ReturnValue) == 0x000001, "Member 'CharacterInventoryComponent_HasItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasMaximumItemCount
// 0x0010 (0x0010 - 0x0000)
struct CharacterInventoryComponent_HasMaximumItemCount final
{
public:
	const class ACollectable*                     Item;                                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterInventoryComponent_HasMaximumItemCount) == 0x000008, "Wrong alignment on CharacterInventoryComponent_HasMaximumItemCount");
static_assert(sizeof(CharacterInventoryComponent_HasMaximumItemCount) == 0x000010, "Wrong size on CharacterInventoryComponent_HasMaximumItemCount");
static_assert(offsetof(CharacterInventoryComponent_HasMaximumItemCount, Item) == 0x000000, "Member 'CharacterInventoryComponent_HasMaximumItemCount::Item' has a wrong offset!");
static_assert(offsetof(CharacterInventoryComponent_HasMaximumItemCount, ReturnValue) == 0x000008, "Member 'CharacterInventoryComponent_HasMaximumItemCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.HasStoredItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterInventoryComponent_HasStoredItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_HasStoredItem) == 0x000001, "Wrong alignment on CharacterInventoryComponent_HasStoredItem");
static_assert(sizeof(CharacterInventoryComponent_HasStoredItem) == 0x000001, "Wrong size on CharacterInventoryComponent_HasStoredItem");
static_assert(offsetof(CharacterInventoryComponent_HasStoredItem, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_HasStoredItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterInventoryComponent.IsUsingAimItem
// 0x0001 (0x0001 - 0x0000)
struct CharacterInventoryComponent_IsUsingAimItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterInventoryComponent_IsUsingAimItem) == 0x000001, "Wrong alignment on CharacterInventoryComponent_IsUsingAimItem");
static_assert(sizeof(CharacterInventoryComponent_IsUsingAimItem) == 0x000001, "Wrong size on CharacterInventoryComponent_IsUsingAimItem");
static_assert(offsetof(CharacterInventoryComponent_IsUsingAimItem, ReturnValue) == 0x000000, "Member 'CharacterInventoryComponent_IsUsingAimItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.AbilityTwoRequest
// 0x0010 (0x0010 - 0x0000)
struct DBDAIController_AbilityTwoRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       MovementMode;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAIController_AbilityTwoRequest) == 0x000008, "Wrong alignment on DBDAIController_AbilityTwoRequest");
static_assert(sizeof(DBDAIController_AbilityTwoRequest) == 0x000010, "Wrong size on DBDAIController_AbilityTwoRequest");
static_assert(offsetof(DBDAIController_AbilityTwoRequest, Requester) == 0x000000, "Member 'DBDAIController_AbilityTwoRequest::Requester' has a wrong offset!");
static_assert(offsetof(DBDAIController_AbilityTwoRequest, MovementMode) == 0x000008, "Member 'DBDAIController_AbilityTwoRequest::MovementMode' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.ActionRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_ActionRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_ActionRequest) == 0x000008, "Wrong alignment on DBDAIController_ActionRequest");
static_assert(sizeof(DBDAIController_ActionRequest) == 0x000008, "Wrong size on DBDAIController_ActionRequest");
static_assert(offsetof(DBDAIController_ActionRequest, Requester) == 0x000000, "Member 'DBDAIController_ActionRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.AttackRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_AttackRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_AttackRequest) == 0x000008, "Wrong alignment on DBDAIController_AttackRequest");
static_assert(sizeof(DBDAIController_AttackRequest) == 0x000008, "Wrong size on DBDAIController_AttackRequest");
static_assert(offsetof(DBDAIController_AttackRequest, Requester) == 0x000000, "Member 'DBDAIController_AttackRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.CancelMinigameRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_CancelMinigameRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_CancelMinigameRequest) == 0x000008, "Wrong alignment on DBDAIController_CancelMinigameRequest");
static_assert(sizeof(DBDAIController_CancelMinigameRequest) == 0x000008, "Wrong size on DBDAIController_CancelMinigameRequest");
static_assert(offsetof(DBDAIController_CancelMinigameRequest, Requester) == 0x000000, "Member 'DBDAIController_CancelMinigameRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.DropItemRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_DropItemRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_DropItemRequest) == 0x000008, "Wrong alignment on DBDAIController_DropItemRequest");
static_assert(sizeof(DBDAIController_DropItemRequest) == 0x000008, "Wrong size on DBDAIController_DropItemRequest");
static_assert(offsetof(DBDAIController_DropItemRequest, Requester) == 0x000000, "Member 'DBDAIController_DropItemRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndAbilityTwoRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndAbilityTwoRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndAbilityTwoRequest) == 0x000008, "Wrong alignment on DBDAIController_EndAbilityTwoRequest");
static_assert(sizeof(DBDAIController_EndAbilityTwoRequest) == 0x000008, "Wrong size on DBDAIController_EndAbilityTwoRequest");
static_assert(offsetof(DBDAIController_EndAbilityTwoRequest, Requester) == 0x000000, "Member 'DBDAIController_EndAbilityTwoRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndActionRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndActionRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndActionRequest) == 0x000008, "Wrong alignment on DBDAIController_EndActionRequest");
static_assert(sizeof(DBDAIController_EndActionRequest) == 0x000008, "Wrong size on DBDAIController_EndActionRequest");
static_assert(offsetof(DBDAIController_EndActionRequest, Requester) == 0x000000, "Member 'DBDAIController_EndActionRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndDropItemRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndDropItemRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndDropItemRequest) == 0x000008, "Wrong alignment on DBDAIController_EndDropItemRequest");
static_assert(sizeof(DBDAIController_EndDropItemRequest) == 0x000008, "Wrong size on DBDAIController_EndDropItemRequest");
static_assert(offsetof(DBDAIController_EndDropItemRequest, Requester) == 0x000000, "Member 'DBDAIController_EndDropItemRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndEventAbilityRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndEventAbilityRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndEventAbilityRequest) == 0x000008, "Wrong alignment on DBDAIController_EndEventAbilityRequest");
static_assert(sizeof(DBDAIController_EndEventAbilityRequest) == 0x000008, "Wrong size on DBDAIController_EndEventAbilityRequest");
static_assert(offsetof(DBDAIController_EndEventAbilityRequest, Requester) == 0x000000, "Member 'DBDAIController_EndEventAbilityRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndFastInteractRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndFastInteractRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndFastInteractRequest) == 0x000008, "Wrong alignment on DBDAIController_EndFastInteractRequest");
static_assert(sizeof(DBDAIController_EndFastInteractRequest) == 0x000008, "Wrong size on DBDAIController_EndFastInteractRequest");
static_assert(offsetof(DBDAIController_EndFastInteractRequest, Requester) == 0x000000, "Member 'DBDAIController_EndFastInteractRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndInteractRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndInteractRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndInteractRequest) == 0x000008, "Wrong alignment on DBDAIController_EndInteractRequest");
static_assert(sizeof(DBDAIController_EndInteractRequest) == 0x000008, "Wrong size on DBDAIController_EndInteractRequest");
static_assert(offsetof(DBDAIController_EndInteractRequest, Requester) == 0x000000, "Member 'DBDAIController_EndInteractRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndRunRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndRunRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndRunRequest) == 0x000008, "Wrong alignment on DBDAIController_EndRunRequest");
static_assert(sizeof(DBDAIController_EndRunRequest) == 0x000008, "Wrong size on DBDAIController_EndRunRequest");
static_assert(offsetof(DBDAIController_EndRunRequest, Requester) == 0x000000, "Member 'DBDAIController_EndRunRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndSecondAttackRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndSecondAttackRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndSecondAttackRequest) == 0x000008, "Wrong alignment on DBDAIController_EndSecondAttackRequest");
static_assert(sizeof(DBDAIController_EndSecondAttackRequest) == 0x000008, "Wrong size on DBDAIController_EndSecondAttackRequest");
static_assert(offsetof(DBDAIController_EndSecondAttackRequest, Requester) == 0x000000, "Member 'DBDAIController_EndSecondAttackRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EndUseItemRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EndUseItemRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EndUseItemRequest) == 0x000008, "Wrong alignment on DBDAIController_EndUseItemRequest");
static_assert(sizeof(DBDAIController_EndUseItemRequest) == 0x000008, "Wrong size on DBDAIController_EndUseItemRequest");
static_assert(offsetof(DBDAIController_EndUseItemRequest, Requester) == 0x000000, "Member 'DBDAIController_EndUseItemRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.EventAbilityRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_EventAbilityRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_EventAbilityRequest) == 0x000008, "Wrong alignment on DBDAIController_EventAbilityRequest");
static_assert(sizeof(DBDAIController_EventAbilityRequest) == 0x000008, "Wrong size on DBDAIController_EventAbilityRequest");
static_assert(offsetof(DBDAIController_EventAbilityRequest, Requester) == 0x000000, "Member 'DBDAIController_EventAbilityRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.FastInteractRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_FastInteractRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_FastInteractRequest) == 0x000008, "Wrong alignment on DBDAIController_FastInteractRequest");
static_assert(sizeof(DBDAIController_FastInteractRequest) == 0x000008, "Wrong size on DBDAIController_FastInteractRequest");
static_assert(offsetof(DBDAIController_FastInteractRequest, Requester) == 0x000000, "Member 'DBDAIController_FastInteractRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Gesture01Request
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_Gesture01Request final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Gesture01Request) == 0x000008, "Wrong alignment on DBDAIController_Gesture01Request");
static_assert(sizeof(DBDAIController_Gesture01Request) == 0x000008, "Wrong size on DBDAIController_Gesture01Request");
static_assert(offsetof(DBDAIController_Gesture01Request, Requester) == 0x000000, "Member 'DBDAIController_Gesture01Request::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Gesture02Request
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_Gesture02Request final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Gesture02Request) == 0x000008, "Wrong alignment on DBDAIController_Gesture02Request");
static_assert(sizeof(DBDAIController_Gesture02Request) == 0x000008, "Wrong size on DBDAIController_Gesture02Request");
static_assert(offsetof(DBDAIController_Gesture02Request, Requester) == 0x000000, "Member 'DBDAIController_Gesture02Request::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Gesture03Request
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_Gesture03Request final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Gesture03Request) == 0x000008, "Wrong alignment on DBDAIController_Gesture03Request");
static_assert(sizeof(DBDAIController_Gesture03Request) == 0x000008, "Wrong size on DBDAIController_Gesture03Request");
static_assert(offsetof(DBDAIController_Gesture03Request, Requester) == 0x000000, "Member 'DBDAIController_Gesture03Request::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Gesture04Request
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_Gesture04Request final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Gesture04Request) == 0x000008, "Wrong alignment on DBDAIController_Gesture04Request");
static_assert(sizeof(DBDAIController_Gesture04Request) == 0x000008, "Wrong size on DBDAIController_Gesture04Request");
static_assert(offsetof(DBDAIController_Gesture04Request, Requester) == 0x000000, "Member 'DBDAIController_Gesture04Request::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.InteractRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_InteractRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_InteractRequest) == 0x000008, "Wrong alignment on DBDAIController_InteractRequest");
static_assert(sizeof(DBDAIController_InteractRequest) == 0x000008, "Wrong size on DBDAIController_InteractRequest");
static_assert(offsetof(DBDAIController_InteractRequest, Requester) == 0x000000, "Member 'DBDAIController_InteractRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.InteractRequestRelease
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_InteractRequestRelease final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_InteractRequestRelease) == 0x000008, "Wrong alignment on DBDAIController_InteractRequestRelease");
static_assert(sizeof(DBDAIController_InteractRequestRelease) == 0x000008, "Wrong size on DBDAIController_InteractRequestRelease");
static_assert(offsetof(DBDAIController_InteractRequestRelease, Requester) == 0x000000, "Member 'DBDAIController_InteractRequestRelease::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.RunRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_RunRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_RunRequest) == 0x000008, "Wrong alignment on DBDAIController_RunRequest");
static_assert(sizeof(DBDAIController_RunRequest) == 0x000008, "Wrong size on DBDAIController_RunRequest");
static_assert(offsetof(DBDAIController_RunRequest, Requester) == 0x000000, "Member 'DBDAIController_RunRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.SecondaryActionRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_SecondaryActionRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_SecondaryActionRequest) == 0x000008, "Wrong alignment on DBDAIController_SecondaryActionRequest");
static_assert(sizeof(DBDAIController_SecondaryActionRequest) == 0x000008, "Wrong size on DBDAIController_SecondaryActionRequest");
static_assert(offsetof(DBDAIController_SecondaryActionRequest, Requester) == 0x000000, "Member 'DBDAIController_SecondaryActionRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.SecondAttackRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_SecondAttackRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_SecondAttackRequest) == 0x000008, "Wrong alignment on DBDAIController_SecondAttackRequest");
static_assert(sizeof(DBDAIController_SecondAttackRequest) == 0x000008, "Wrong size on DBDAIController_SecondAttackRequest");
static_assert(offsetof(DBDAIController_SecondAttackRequest, Requester) == 0x000000, "Member 'DBDAIController_SecondAttackRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.Server_SetAIPlayerRank
// 0x0004 (0x0004 - 0x0000)
struct DBDAIController_Server_SetAIPlayerRank final
{
public:
	int32                                         PlayerRank;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_Server_SetAIPlayerRank) == 0x000004, "Wrong alignment on DBDAIController_Server_SetAIPlayerRank");
static_assert(sizeof(DBDAIController_Server_SetAIPlayerRank) == 0x000004, "Wrong size on DBDAIController_Server_SetAIPlayerRank");
static_assert(offsetof(DBDAIController_Server_SetAIPlayerRank, PlayerRank) == 0x000000, "Member 'DBDAIController_Server_SetAIPlayerRank::PlayerRank' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.SetCharacterMovement
// 0x0018 (0x0018 - 0x0000)
struct DBDAIController_SetCharacterMovement final
{
public:
	ECharacterMovementTypes                       MovementTypes;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Requester;                                         // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIMovementPriority                           ApplyOrder;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0011(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAIController_SetCharacterMovement) == 0x000008, "Wrong alignment on DBDAIController_SetCharacterMovement");
static_assert(sizeof(DBDAIController_SetCharacterMovement) == 0x000018, "Wrong size on DBDAIController_SetCharacterMovement");
static_assert(offsetof(DBDAIController_SetCharacterMovement, MovementTypes) == 0x000000, "Member 'DBDAIController_SetCharacterMovement::MovementTypes' has a wrong offset!");
static_assert(offsetof(DBDAIController_SetCharacterMovement, Requester) == 0x000008, "Member 'DBDAIController_SetCharacterMovement::Requester' has a wrong offset!");
static_assert(offsetof(DBDAIController_SetCharacterMovement, ApplyOrder) == 0x000010, "Member 'DBDAIController_SetCharacterMovement::ApplyOrder' has a wrong offset!");
static_assert(offsetof(DBDAIController_SetCharacterMovement, ReturnValue) == 0x000011, "Member 'DBDAIController_SetCharacterMovement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.StruggleRequest
// 0x0010 (0x0010 - 0x0000)
struct DBDAIController_StruggleRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Input;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAIController_StruggleRequest) == 0x000008, "Wrong alignment on DBDAIController_StruggleRequest");
static_assert(sizeof(DBDAIController_StruggleRequest) == 0x000010, "Wrong size on DBDAIController_StruggleRequest");
static_assert(offsetof(DBDAIController_StruggleRequest, Requester) == 0x000000, "Member 'DBDAIController_StruggleRequest::Requester' has a wrong offset!");
static_assert(offsetof(DBDAIController_StruggleRequest, Input) == 0x000008, "Member 'DBDAIController_StruggleRequest::Input' has a wrong offset!");

// Function DeadByDaylight.DBDAIController.UseItemRequest
// 0x0008 (0x0008 - 0x0000)
struct DBDAIController_UseItemRequest final
{
public:
	const class UObject*                          Requester;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIController_UseItemRequest) == 0x000008, "Wrong alignment on DBDAIController_UseItemRequest");
static_assert(sizeof(DBDAIController_UseItemRequest) == 0x000008, "Wrong size on DBDAIController_UseItemRequest");
static_assert(offsetof(DBDAIController_UseItemRequest, Requester) == 0x000000, "Member 'DBDAIController_UseItemRequest::Requester' has a wrong offset!");

// Function DeadByDaylight.AISlasherMoveToGrabSurvivorBehaviourData.Init
// 0x0008 (0x0008 - 0x0000)
struct AISlasherMoveToGrabSurvivorBehaviourData_Init final
{
public:
	class ACamperPlayer*                          TargetSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISlasherMoveToGrabSurvivorBehaviourData_Init) == 0x000008, "Wrong alignment on AISlasherMoveToGrabSurvivorBehaviourData_Init");
static_assert(sizeof(AISlasherMoveToGrabSurvivorBehaviourData_Init) == 0x000008, "Wrong size on AISlasherMoveToGrabSurvivorBehaviourData_Init");
static_assert(offsetof(AISlasherMoveToGrabSurvivorBehaviourData_Init, TargetSurvivor) == 0x000000, "Member 'AISlasherMoveToGrabSurvivorBehaviourData_Init::TargetSurvivor' has a wrong offset!");

// Function DeadByDaylight.DBDTunableUtilities.GetEndGameTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDTunableUtilities_GetEndGameTunableValue final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ValueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTunableUtilities_GetEndGameTunableValue) == 0x000008, "Wrong alignment on DBDTunableUtilities_GetEndGameTunableValue");
static_assert(sizeof(DBDTunableUtilities_GetEndGameTunableValue) == 0x000018, "Wrong size on DBDTunableUtilities_GetEndGameTunableValue");
static_assert(offsetof(DBDTunableUtilities_GetEndGameTunableValue, WorldContextObject) == 0x000000, "Member 'DBDTunableUtilities_GetEndGameTunableValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetEndGameTunableValue, ValueName) == 0x000008, "Member 'DBDTunableUtilities_GetEndGameTunableValue::ValueName' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetEndGameTunableValue, ReturnValue) == 0x000014, "Member 'DBDTunableUtilities_GetEndGameTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTunableUtilities.GetSlasherTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDTunableUtilities_GetSlasherTunableValue final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ValueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTunableUtilities_GetSlasherTunableValue) == 0x000008, "Wrong alignment on DBDTunableUtilities_GetSlasherTunableValue");
static_assert(sizeof(DBDTunableUtilities_GetSlasherTunableValue) == 0x000018, "Wrong size on DBDTunableUtilities_GetSlasherTunableValue");
static_assert(offsetof(DBDTunableUtilities_GetSlasherTunableValue, WorldContextObject) == 0x000000, "Member 'DBDTunableUtilities_GetSlasherTunableValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetSlasherTunableValue, ValueName) == 0x000008, "Member 'DBDTunableUtilities_GetSlasherTunableValue::ValueName' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetSlasherTunableValue, ReturnValue) == 0x000014, "Member 'DBDTunableUtilities_GetSlasherTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTunableUtilities.GetTunableRowHandleValue
// 0x0030 (0x0030 - 0x0000)
struct DBDTunableUtilities_GetTunableRowHandleValue final
{
public:
	struct FDBDTunableRowHandle                   RowHandle;                                         // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDTunableUtilities_GetTunableRowHandleValue) == 0x000008, "Wrong alignment on DBDTunableUtilities_GetTunableRowHandleValue");
static_assert(sizeof(DBDTunableUtilities_GetTunableRowHandleValue) == 0x000030, "Wrong size on DBDTunableUtilities_GetTunableRowHandleValue");
static_assert(offsetof(DBDTunableUtilities_GetTunableRowHandleValue, RowHandle) == 0x000000, "Member 'DBDTunableUtilities_GetTunableRowHandleValue::RowHandle' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetTunableRowHandleValue, ReturnValue) == 0x000028, "Member 'DBDTunableUtilities_GetTunableRowHandleValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTunableUtilities.GetTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDTunableUtilities_GetTunableValue final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ValueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTunableUtilities_GetTunableValue) == 0x000008, "Wrong alignment on DBDTunableUtilities_GetTunableValue");
static_assert(sizeof(DBDTunableUtilities_GetTunableValue) == 0x000018, "Wrong size on DBDTunableUtilities_GetTunableValue");
static_assert(offsetof(DBDTunableUtilities_GetTunableValue, WorldContextObject) == 0x000000, "Member 'DBDTunableUtilities_GetTunableValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetTunableValue, ValueName) == 0x000008, "Member 'DBDTunableUtilities_GetTunableValue::ValueName' has a wrong offset!");
static_assert(offsetof(DBDTunableUtilities_GetTunableValue, ReturnValue) == 0x000014, "Member 'DBDTunableUtilities_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AICharacterEvasionBehaviour.EscapeDestinationReached
// 0x0008 (0x0008 - 0x0000)
struct AICharacterEvasionBehaviour_EscapeDestinationReached final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterEvasionBehaviour_EscapeDestinationReached) == 0x000004, "Wrong alignment on AICharacterEvasionBehaviour_EscapeDestinationReached");
static_assert(sizeof(AICharacterEvasionBehaviour_EscapeDestinationReached) == 0x000008, "Wrong size on AICharacterEvasionBehaviour_EscapeDestinationReached");
static_assert(offsetof(AICharacterEvasionBehaviour_EscapeDestinationReached, RequestID) == 0x000000, "Member 'AICharacterEvasionBehaviour_EscapeDestinationReached::RequestID' has a wrong offset!");
static_assert(offsetof(AICharacterEvasionBehaviour_EscapeDestinationReached, Result) == 0x000004, "Member 'AICharacterEvasionBehaviour_EscapeDestinationReached::Result' has a wrong offset!");

// Function DeadByDaylight.MenuForcedLODHandler.OnCustomizationChanged
// 0x0018 (0x0018 - 0x0000)
struct MenuForcedLODHandler_OnCustomizationChanged final
{
public:
	ECustomizationCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId;                                            // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDMenuPlayer*                         MenuPlayer;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuForcedLODHandler_OnCustomizationChanged) == 0x000008, "Wrong alignment on MenuForcedLODHandler_OnCustomizationChanged");
static_assert(sizeof(MenuForcedLODHandler_OnCustomizationChanged) == 0x000018, "Wrong size on MenuForcedLODHandler_OnCustomizationChanged");
static_assert(offsetof(MenuForcedLODHandler_OnCustomizationChanged, Category) == 0x000000, "Member 'MenuForcedLODHandler_OnCustomizationChanged::Category' has a wrong offset!");
static_assert(offsetof(MenuForcedLODHandler_OnCustomizationChanged, ItemId) == 0x000004, "Member 'MenuForcedLODHandler_OnCustomizationChanged::ItemId' has a wrong offset!");
static_assert(offsetof(MenuForcedLODHandler_OnCustomizationChanged, MenuPlayer) == 0x000010, "Member 'MenuForcedLODHandler_OnCustomizationChanged::MenuPlayer' has a wrong offset!");

// Function DeadByDaylight.MenuForcedLODHandler.OnMenuPlayerEndPlay
// 0x0010 (0x0010 - 0x0000)
struct MenuForcedLODHandler_OnMenuPlayerEndPlay final
{
public:
	class AActor*                                 MenuPlayerActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuForcedLODHandler_OnMenuPlayerEndPlay) == 0x000008, "Wrong alignment on MenuForcedLODHandler_OnMenuPlayerEndPlay");
static_assert(sizeof(MenuForcedLODHandler_OnMenuPlayerEndPlay) == 0x000010, "Wrong size on MenuForcedLODHandler_OnMenuPlayerEndPlay");
static_assert(offsetof(MenuForcedLODHandler_OnMenuPlayerEndPlay, MenuPlayerActor) == 0x000000, "Member 'MenuForcedLODHandler_OnMenuPlayerEndPlay::MenuPlayerActor' has a wrong offset!");
static_assert(offsetof(MenuForcedLODHandler_OnMenuPlayerEndPlay, EndPlayReason) == 0x000008, "Member 'MenuForcedLODHandler_OnMenuPlayerEndPlay::EndPlayReason' has a wrong offset!");

// Function DeadByDaylight.CamperMaterialHelperController.AddManagedGroup
// 0x0018 (0x0018 - 0x0000)
struct CamperMaterialHelperController_AddManagedGroup final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Group;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMaterialHelperController_AddManagedGroup) == 0x000008, "Wrong alignment on CamperMaterialHelperController_AddManagedGroup");
static_assert(sizeof(CamperMaterialHelperController_AddManagedGroup) == 0x000018, "Wrong size on CamperMaterialHelperController_AddManagedGroup");
static_assert(offsetof(CamperMaterialHelperController_AddManagedGroup, Source) == 0x000000, "Member 'CamperMaterialHelperController_AddManagedGroup::Source' has a wrong offset!");
static_assert(offsetof(CamperMaterialHelperController_AddManagedGroup, Group) == 0x000008, "Member 'CamperMaterialHelperController_AddManagedGroup::Group' has a wrong offset!");

// Function DeadByDaylight.CamperMaterialHelperController.AddManagedWithCondition
// 0x0030 (0x0030 - 0x0000)
struct CamperMaterialHelperController_AddManagedWithCondition final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Group;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             Condition;                                         // 0x0018(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperMaterialHelperController_AddManagedWithCondition) == 0x000008, "Wrong alignment on CamperMaterialHelperController_AddManagedWithCondition");
static_assert(sizeof(CamperMaterialHelperController_AddManagedWithCondition) == 0x000030, "Wrong size on CamperMaterialHelperController_AddManagedWithCondition");
static_assert(offsetof(CamperMaterialHelperController_AddManagedWithCondition, Source) == 0x000000, "Member 'CamperMaterialHelperController_AddManagedWithCondition::Source' has a wrong offset!");
static_assert(offsetof(CamperMaterialHelperController_AddManagedWithCondition, Group) == 0x000008, "Member 'CamperMaterialHelperController_AddManagedWithCondition::Group' has a wrong offset!");
static_assert(offsetof(CamperMaterialHelperController_AddManagedWithCondition, Condition) == 0x000018, "Member 'CamperMaterialHelperController_AddManagedWithCondition::Condition' has a wrong offset!");

// Function DeadByDaylight.CamperMaterialHelperController.RemoveGroupsBySource
// 0x0008 (0x0008 - 0x0000)
struct CamperMaterialHelperController_RemoveGroupsBySource final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMaterialHelperController_RemoveGroupsBySource) == 0x000008, "Wrong alignment on CamperMaterialHelperController_RemoveGroupsBySource");
static_assert(sizeof(CamperMaterialHelperController_RemoveGroupsBySource) == 0x000008, "Wrong size on CamperMaterialHelperController_RemoveGroupsBySource");
static_assert(offsetof(CamperMaterialHelperController_RemoveGroupsBySource, Source) == 0x000000, "Member 'CamperMaterialHelperController_RemoveGroupsBySource::Source' has a wrong offset!");

// DelegateFunction DeadByDaylight.GeneratorDamageComponent.CosmeticGeneratorDamagedDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDamageComponent_CosmeticGeneratorDamagedDelegate__DelegateSignature final
{
public:
	bool                                          Intense;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDamageComponent_CosmeticGeneratorDamagedDelegate__DelegateSignature) == 0x000001, "Wrong alignment on GeneratorDamageComponent_CosmeticGeneratorDamagedDelegate__DelegateSignature");
static_assert(sizeof(GeneratorDamageComponent_CosmeticGeneratorDamagedDelegate__DelegateSignature) == 0x000001, "Wrong size on GeneratorDamageComponent_CosmeticGeneratorDamagedDelegate__DelegateSignature");
static_assert(offsetof(GeneratorDamageComponent_CosmeticGeneratorDamagedDelegate__DelegateSignature, Intense) == 0x000000, "Member 'GeneratorDamageComponent_CosmeticGeneratorDamagedDelegate__DelegateSignature::Intense' has a wrong offset!");

// Function DeadByDaylight.GeneratorDamageComponent.Multicast_DamageEffects
// 0x0020 (0x0020 - 0x0000)
struct GeneratorDamageComponent_Multicast_DamageEffects final
{
public:
	float                                         ImmediateRegressionPercent;                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ADBDPlayer*>                     Repairers;                                         // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          PlayLoudNoise;                                     // 0x0018(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDamageComponent_Multicast_DamageEffects) == 0x000008, "Wrong alignment on GeneratorDamageComponent_Multicast_DamageEffects");
static_assert(sizeof(GeneratorDamageComponent_Multicast_DamageEffects) == 0x000020, "Wrong size on GeneratorDamageComponent_Multicast_DamageEffects");
static_assert(offsetof(GeneratorDamageComponent_Multicast_DamageEffects, ImmediateRegressionPercent) == 0x000000, "Member 'GeneratorDamageComponent_Multicast_DamageEffects::ImmediateRegressionPercent' has a wrong offset!");
static_assert(offsetof(GeneratorDamageComponent_Multicast_DamageEffects, Repairers) == 0x000008, "Member 'GeneratorDamageComponent_Multicast_DamageEffects::Repairers' has a wrong offset!");
static_assert(offsetof(GeneratorDamageComponent_Multicast_DamageEffects, PlayLoudNoise) == 0x000018, "Member 'GeneratorDamageComponent_Multicast_DamageEffects::PlayLoudNoise' has a wrong offset!");

// Function DeadByDaylight.GeneratorDamageComponent.IsIntenseDamage
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDamageComponent_IsIntenseDamage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDamageComponent_IsIntenseDamage) == 0x000001, "Wrong alignment on GeneratorDamageComponent_IsIntenseDamage");
static_assert(sizeof(GeneratorDamageComponent_IsIntenseDamage) == 0x000001, "Wrong size on GeneratorDamageComponent_IsIntenseDamage");
static_assert(offsetof(GeneratorDamageComponent_IsIntenseDamage, ReturnValue) == 0x000000, "Member 'GeneratorDamageComponent_IsIntenseDamage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorDamageComponent.IsRegressing
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDamageComponent_IsRegressing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDamageComponent_IsRegressing) == 0x000001, "Wrong alignment on GeneratorDamageComponent_IsRegressing");
static_assert(sizeof(GeneratorDamageComponent_IsRegressing) == 0x000001, "Wrong size on GeneratorDamageComponent_IsRegressing");
static_assert(offsetof(GeneratorDamageComponent_IsRegressing, ReturnValue) == 0x000000, "Member 'GeneratorDamageComponent_IsRegressing::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerPerspectiveChangeComponent.TransitionToTargetPerspective
// 0x0028 (0x0028 - 0x0000)
struct PlayerPerspectiveChangeComponent_TransitionToTargetPerspective final
{
public:
	struct FPlayerPerspectiveChangeTargetData     TargetData;                                        // 0x0000(0x0020)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         TransitionDuration;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerPerspectiveChangeComponent_TransitionToTargetPerspective) == 0x000008, "Wrong alignment on PlayerPerspectiveChangeComponent_TransitionToTargetPerspective");
static_assert(sizeof(PlayerPerspectiveChangeComponent_TransitionToTargetPerspective) == 0x000028, "Wrong size on PlayerPerspectiveChangeComponent_TransitionToTargetPerspective");
static_assert(offsetof(PlayerPerspectiveChangeComponent_TransitionToTargetPerspective, TargetData) == 0x000000, "Member 'PlayerPerspectiveChangeComponent_TransitionToTargetPerspective::TargetData' has a wrong offset!");
static_assert(offsetof(PlayerPerspectiveChangeComponent_TransitionToTargetPerspective, TransitionDuration) == 0x000020, "Member 'PlayerPerspectiveChangeComponent_TransitionToTargetPerspective::TransitionDuration' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.Cosmetic_OnMontageStarted
// 0x0020 (0x0020 - 0x0000)
struct AnimationFollowerActor_Cosmetic_OnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            MontagePlayed;                                     // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationFollowerActor_Cosmetic_OnMontageStarted) == 0x000008, "Wrong alignment on AnimationFollowerActor_Cosmetic_OnMontageStarted");
static_assert(sizeof(AnimationFollowerActor_Cosmetic_OnMontageStarted) == 0x000020, "Wrong size on AnimationFollowerActor_Cosmetic_OnMontageStarted");
static_assert(offsetof(AnimationFollowerActor_Cosmetic_OnMontageStarted, MontagePlayed) == 0x000000, "Member 'AnimationFollowerActor_Cosmetic_OnMontageStarted::MontagePlayed' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.Cosmetic_OnVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct AnimationFollowerActor_Cosmetic_OnVisibilityChanged final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationFollowerActor_Cosmetic_OnVisibilityChanged) == 0x000001, "Wrong alignment on AnimationFollowerActor_Cosmetic_OnVisibilityChanged");
static_assert(sizeof(AnimationFollowerActor_Cosmetic_OnVisibilityChanged) == 0x000001, "Wrong size on AnimationFollowerActor_Cosmetic_OnVisibilityChanged");
static_assert(offsetof(AnimationFollowerActor_Cosmetic_OnVisibilityChanged, IsVisible) == 0x000000, "Member 'AnimationFollowerActor_Cosmetic_OnVisibilityChanged::IsVisible' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.NativeOnMontageEnded
// 0x0028 (0x0028 - 0x0000)
struct AnimationFollowerActor_NativeOnMontageEnded final
{
public:
	struct FAnimationMontageDescriptor            Montage;                                           // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationFollowerActor_NativeOnMontageEnded) == 0x000008, "Wrong alignment on AnimationFollowerActor_NativeOnMontageEnded");
static_assert(sizeof(AnimationFollowerActor_NativeOnMontageEnded) == 0x000028, "Wrong size on AnimationFollowerActor_NativeOnMontageEnded");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageEnded, Montage) == 0x000000, "Member 'AnimationFollowerActor_NativeOnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageEnded, Interrupted) == 0x000020, "Member 'AnimationFollowerActor_NativeOnMontageEnded::Interrupted' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.NativeOnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct AnimationFollowerActor_NativeOnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            ID;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationFollowerActor_NativeOnMontageStarted) == 0x000008, "Wrong alignment on AnimationFollowerActor_NativeOnMontageStarted");
static_assert(sizeof(AnimationFollowerActor_NativeOnMontageStarted) == 0x000028, "Wrong size on AnimationFollowerActor_NativeOnMontageStarted");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageStarted, ID) == 0x000000, "Member 'AnimationFollowerActor_NativeOnMontageStarted::ID' has a wrong offset!");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageStarted, Rate) == 0x000020, "Member 'AnimationFollowerActor_NativeOnMontageStarted::Rate' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.NativeOnMontageStopped
// 0x0020 (0x0020 - 0x0000)
struct AnimationFollowerActor_NativeOnMontageStopped final
{
public:
	struct FAnimationMontageDescriptor            ID;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationFollowerActor_NativeOnMontageStopped) == 0x000008, "Wrong alignment on AnimationFollowerActor_NativeOnMontageStopped");
static_assert(sizeof(AnimationFollowerActor_NativeOnMontageStopped) == 0x000020, "Wrong size on AnimationFollowerActor_NativeOnMontageStopped");
static_assert(offsetof(AnimationFollowerActor_NativeOnMontageStopped, ID) == 0x000000, "Member 'AnimationFollowerActor_NativeOnMontageStopped::ID' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.OnMontageEnd
// 0x0028 (0x0028 - 0x0000)
struct AnimationFollowerActor_OnMontageEnd final
{
public:
	struct FAnimationMontageDescriptor            MontageID;                                         // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationFollowerActor_OnMontageEnd) == 0x000008, "Wrong alignment on AnimationFollowerActor_OnMontageEnd");
static_assert(sizeof(AnimationFollowerActor_OnMontageEnd) == 0x000028, "Wrong size on AnimationFollowerActor_OnMontageEnd");
static_assert(offsetof(AnimationFollowerActor_OnMontageEnd, MontageID) == 0x000000, "Member 'AnimationFollowerActor_OnMontageEnd::MontageID' has a wrong offset!");
static_assert(offsetof(AnimationFollowerActor_OnMontageEnd, Interrupted) == 0x000020, "Member 'AnimationFollowerActor_OnMontageEnd::Interrupted' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.OnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct AnimationFollowerActor_OnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            MontageID;                                         // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationFollowerActor_OnMontageStarted) == 0x000008, "Wrong alignment on AnimationFollowerActor_OnMontageStarted");
static_assert(sizeof(AnimationFollowerActor_OnMontageStarted) == 0x000028, "Wrong size on AnimationFollowerActor_OnMontageStarted");
static_assert(offsetof(AnimationFollowerActor_OnMontageStarted, MontageID) == 0x000000, "Member 'AnimationFollowerActor_OnMontageStarted::MontageID' has a wrong offset!");
static_assert(offsetof(AnimationFollowerActor_OnMontageStarted, Rate) == 0x000020, "Member 'AnimationFollowerActor_OnMontageStarted::Rate' has a wrong offset!");

// Function DeadByDaylight.AnimationFollowerActor.OnMontageStopped
// 0x0020 (0x0020 - 0x0000)
struct AnimationFollowerActor_OnMontageStopped final
{
public:
	struct FAnimationMontageDescriptor            MontageID;                                         // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationFollowerActor_OnMontageStopped) == 0x000008, "Wrong alignment on AnimationFollowerActor_OnMontageStopped");
static_assert(sizeof(AnimationFollowerActor_OnMontageStopped) == 0x000020, "Wrong size on AnimationFollowerActor_OnMontageStopped");
static_assert(offsetof(AnimationFollowerActor_OnMontageStopped, MontageID) == 0x000000, "Member 'AnimationFollowerActor_OnMontageStopped::MontageID' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameComponent.Authority_StartMinigameForSurvivor
// 0x0028 (0x0028 - 0x0000)
struct DirectionalMinigameComponent_Authority_StartMinigameForSurvivor final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDirectionalMiniGameDefinition         MiniGameDefinition;                                // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigameComponent_Authority_StartMinigameForSurvivor) == 0x000008, "Wrong alignment on DirectionalMinigameComponent_Authority_StartMinigameForSurvivor");
static_assert(sizeof(DirectionalMinigameComponent_Authority_StartMinigameForSurvivor) == 0x000028, "Wrong size on DirectionalMinigameComponent_Authority_StartMinigameForSurvivor");
static_assert(offsetof(DirectionalMinigameComponent_Authority_StartMinigameForSurvivor, Survivor) == 0x000000, "Member 'DirectionalMinigameComponent_Authority_StartMinigameForSurvivor::Survivor' has a wrong offset!");
static_assert(offsetof(DirectionalMinigameComponent_Authority_StartMinigameForSurvivor, MiniGameDefinition) == 0x000008, "Member 'DirectionalMinigameComponent_Authority_StartMinigameForSurvivor::MiniGameDefinition' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameComponent.Server_EnterKey
// 0x0001 (0x0001 - 0x0000)
struct DirectionalMinigameComponent_Server_EnterKey final
{
public:
	EDirectionalInputKey                          EnteredKey;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigameComponent_Server_EnterKey) == 0x000001, "Wrong alignment on DirectionalMinigameComponent_Server_EnterKey");
static_assert(sizeof(DirectionalMinigameComponent_Server_EnterKey) == 0x000001, "Wrong size on DirectionalMinigameComponent_Server_EnterKey");
static_assert(offsetof(DirectionalMinigameComponent_Server_EnterKey, EnteredKey) == 0x000000, "Member 'DirectionalMinigameComponent_Server_EnterKey::EnteredKey' has a wrong offset!");

// Function DeadByDaylight.ColorBlindSettingsListenerInterface.OnColorBlindSettingsChange
// 0x0008 (0x0008 - 0x0000)
struct ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange final
{
public:
	EColorVisionDeficiency                        ColorBlindMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ColorblindIntensity;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange) == 0x000004, "Wrong alignment on ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange");
static_assert(sizeof(ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange) == 0x000008, "Wrong size on ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange");
static_assert(offsetof(ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange, ColorBlindMode) == 0x000000, "Member 'ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange::ColorBlindMode' has a wrong offset!");
static_assert(offsetof(ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange, ColorblindIntensity) == 0x000004, "Member 'ColorBlindSettingsListenerInterface_OnColorBlindSettingsChange::ColorblindIntensity' has a wrong offset!");

// Function DeadByDaylight.PalletTracker.CanSpawnPalletAtLocation
// 0x0010 (0x0010 - 0x0000)
struct PalletTracker_CanSpawnPalletAtLocation final
{
public:
	const class AActor*                           SpawningActor;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PalletTracker_CanSpawnPalletAtLocation) == 0x000008, "Wrong alignment on PalletTracker_CanSpawnPalletAtLocation");
static_assert(sizeof(PalletTracker_CanSpawnPalletAtLocation) == 0x000010, "Wrong size on PalletTracker_CanSpawnPalletAtLocation");
static_assert(offsetof(PalletTracker_CanSpawnPalletAtLocation, SpawningActor) == 0x000000, "Member 'PalletTracker_CanSpawnPalletAtLocation::SpawningActor' has a wrong offset!");
static_assert(offsetof(PalletTracker_CanSpawnPalletAtLocation, ReturnValue) == 0x000008, "Member 'PalletTracker_CanSpawnPalletAtLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorTrapPerk.Authority_OnKillerInteracted
// 0x0040 (0x0040 - 0x0000)
struct SurvivorTrapPerk_Authority_OnKillerInteracted final
{
public:
	struct FGameplayTag                           GameEventTag;                                      // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorTrapPerk_Authority_OnKillerInteracted) == 0x000008, "Wrong alignment on SurvivorTrapPerk_Authority_OnKillerInteracted");
static_assert(sizeof(SurvivorTrapPerk_Authority_OnKillerInteracted) == 0x000040, "Wrong size on SurvivorTrapPerk_Authority_OnKillerInteracted");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnKillerInteracted, GameEventTag) == 0x000000, "Member 'SurvivorTrapPerk_Authority_OnKillerInteracted::GameEventTag' has a wrong offset!");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnKillerInteracted, GameEventData) == 0x000010, "Member 'SurvivorTrapPerk_Authority_OnKillerInteracted::GameEventData' has a wrong offset!");

// Function DeadByDaylight.SurvivorTrapPerk.Authority_OnRepairProgress
// 0x0018 (0x0018 - 0x0000)
struct SurvivorTrapPerk_Authority_OnRepairProgress final
{
public:
	float                                         IndividualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorTrapPerk_Authority_OnRepairProgress) == 0x000008, "Wrong alignment on SurvivorTrapPerk_Authority_OnRepairProgress");
static_assert(sizeof(SurvivorTrapPerk_Authority_OnRepairProgress) == 0x000018, "Wrong size on SurvivorTrapPerk_Authority_OnRepairProgress");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnRepairProgress, IndividualChargeAmount) == 0x000000, "Member 'SurvivorTrapPerk_Authority_OnRepairProgress::IndividualChargeAmount' has a wrong offset!");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnRepairProgress, TotalChargeAmount) == 0x000004, "Member 'SurvivorTrapPerk_Authority_OnRepairProgress::TotalChargeAmount' has a wrong offset!");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnRepairProgress, ChargeInstigator) == 0x000008, "Member 'SurvivorTrapPerk_Authority_OnRepairProgress::ChargeInstigator' has a wrong offset!");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnRepairProgress, WasCoop) == 0x000010, "Member 'SurvivorTrapPerk_Authority_OnRepairProgress::WasCoop' has a wrong offset!");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnRepairProgress, DeltaTime) == 0x000014, "Member 'SurvivorTrapPerk_Authority_OnRepairProgress::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.SurvivorTrapPerk.Authority_OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct SurvivorTrapPerk_Authority_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorTrapPerk_Authority_OnSurvivorRemoved) == 0x000008, "Wrong alignment on SurvivorTrapPerk_Authority_OnSurvivorRemoved");
static_assert(sizeof(SurvivorTrapPerk_Authority_OnSurvivorRemoved) == 0x000008, "Wrong size on SurvivorTrapPerk_Authority_OnSurvivorRemoved");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnSurvivorRemoved, Survivor) == 0x000000, "Member 'SurvivorTrapPerk_Authority_OnSurvivorRemoved::Survivor' has a wrong offset!");

// Function DeadByDaylight.SurvivorTrapPerk.Authority_OnTrapInteractionEvent
// 0x0040 (0x0040 - 0x0000)
struct SurvivorTrapPerk_Authority_OnTrapInteractionEvent final
{
public:
	struct FGameplayTag                           GameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorTrapPerk_Authority_OnTrapInteractionEvent) == 0x000008, "Wrong alignment on SurvivorTrapPerk_Authority_OnTrapInteractionEvent");
static_assert(sizeof(SurvivorTrapPerk_Authority_OnTrapInteractionEvent) == 0x000040, "Wrong size on SurvivorTrapPerk_Authority_OnTrapInteractionEvent");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnTrapInteractionEvent, GameEvent) == 0x000000, "Member 'SurvivorTrapPerk_Authority_OnTrapInteractionEvent::GameEvent' has a wrong offset!");
static_assert(offsetof(SurvivorTrapPerk_Authority_OnTrapInteractionEvent, GameEventData) == 0x000010, "Member 'SurvivorTrapPerk_Authority_OnTrapInteractionEvent::GameEventData' has a wrong offset!");

// Function DeadByDaylight.SurvivorTrapPerk.OnRep_TrappedInteractable
// 0x0008 (0x0008 - 0x0000)
struct SurvivorTrapPerk_OnRep_TrappedInteractable final
{
public:
	class AInteractable*                          OldInteractable;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorTrapPerk_OnRep_TrappedInteractable) == 0x000008, "Wrong alignment on SurvivorTrapPerk_OnRep_TrappedInteractable");
static_assert(sizeof(SurvivorTrapPerk_OnRep_TrappedInteractable) == 0x000008, "Wrong size on SurvivorTrapPerk_OnRep_TrappedInteractable");
static_assert(offsetof(SurvivorTrapPerk_OnRep_TrappedInteractable, OldInteractable) == 0x000000, "Member 'SurvivorTrapPerk_OnRep_TrappedInteractable::OldInteractable' has a wrong offset!");

// Function DeadByDaylight.SurvivorTrapPerk.GetPerkTrappableComponent
// 0x0010 (0x0010 - 0x0000)
struct SurvivorTrapPerk_GetPerkTrappableComponent final
{
public:
	class AInteractable*                          Interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPerkTrappableComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorTrapPerk_GetPerkTrappableComponent) == 0x000008, "Wrong alignment on SurvivorTrapPerk_GetPerkTrappableComponent");
static_assert(sizeof(SurvivorTrapPerk_GetPerkTrappableComponent) == 0x000010, "Wrong size on SurvivorTrapPerk_GetPerkTrappableComponent");
static_assert(offsetof(SurvivorTrapPerk_GetPerkTrappableComponent, Interactable) == 0x000000, "Member 'SurvivorTrapPerk_GetPerkTrappableComponent::Interactable' has a wrong offset!");
static_assert(offsetof(SurvivorTrapPerk_GetPerkTrappableComponent, ReturnValue) == 0x000008, "Member 'SurvivorTrapPerk_GetPerkTrappableComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorTrapPerk.GetRepairProgressPercent
// 0x0004 (0x0004 - 0x0000)
struct SurvivorTrapPerk_GetRepairProgressPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorTrapPerk_GetRepairProgressPercent) == 0x000004, "Wrong alignment on SurvivorTrapPerk_GetRepairProgressPercent");
static_assert(sizeof(SurvivorTrapPerk_GetRepairProgressPercent) == 0x000004, "Wrong size on SurvivorTrapPerk_GetRepairProgressPercent");
static_assert(offsetof(SurvivorTrapPerk_GetRepairProgressPercent, ReturnValue) == 0x000000, "Member 'SurvivorTrapPerk_GetRepairProgressPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorTrapPerk.GetRequiredRepairProgressForActivation
// 0x0004 (0x0004 - 0x0000)
struct SurvivorTrapPerk_GetRequiredRepairProgressForActivation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorTrapPerk_GetRequiredRepairProgressForActivation) == 0x000004, "Wrong alignment on SurvivorTrapPerk_GetRequiredRepairProgressForActivation");
static_assert(sizeof(SurvivorTrapPerk_GetRequiredRepairProgressForActivation) == 0x000004, "Wrong size on SurvivorTrapPerk_GetRequiredRepairProgressForActivation");
static_assert(offsetof(SurvivorTrapPerk_GetRequiredRepairProgressForActivation, ReturnValue) == 0x000000, "Member 'SurvivorTrapPerk_GetRequiredRepairProgressForActivation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorTrapPerk.GetTrapDuration
// 0x0004 (0x0004 - 0x0000)
struct SurvivorTrapPerk_GetTrapDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorTrapPerk_GetTrapDuration) == 0x000004, "Wrong alignment on SurvivorTrapPerk_GetTrapDuration");
static_assert(sizeof(SurvivorTrapPerk_GetTrapDuration) == 0x000004, "Wrong size on SurvivorTrapPerk_GetTrapDuration");
static_assert(offsetof(SurvivorTrapPerk_GetTrapDuration, ReturnValue) == 0x000000, "Member 'SurvivorTrapPerk_GetTrapDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.Authority_EnableOtherInteractors
// 0x0010 (0x0010 - 0x0000)
struct Locker_Authority_EnableOtherInteractors final
{
public:
	const class UInteractor*                      UsableInteractor;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Usable;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Locker_Authority_EnableOtherInteractors) == 0x000008, "Wrong alignment on Locker_Authority_EnableOtherInteractors");
static_assert(sizeof(Locker_Authority_EnableOtherInteractors) == 0x000010, "Wrong size on Locker_Authority_EnableOtherInteractors");
static_assert(offsetof(Locker_Authority_EnableOtherInteractors, UsableInteractor) == 0x000000, "Member 'Locker_Authority_EnableOtherInteractors::UsableInteractor' has a wrong offset!");
static_assert(offsetof(Locker_Authority_EnableOtherInteractors, Usable) == 0x000008, "Member 'Locker_Authority_EnableOtherInteractors::Usable' has a wrong offset!");

// Function DeadByDaylight.Locker.Authority_ReportOpenLockerNoiseEventToAI
// 0x0001 (0x0001 - 0x0000)
struct Locker_Authority_ReportOpenLockerNoiseEventToAI final
{
public:
	bool                                          FastActivation;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_Authority_ReportOpenLockerNoiseEventToAI) == 0x000001, "Wrong alignment on Locker_Authority_ReportOpenLockerNoiseEventToAI");
static_assert(sizeof(Locker_Authority_ReportOpenLockerNoiseEventToAI) == 0x000001, "Wrong size on Locker_Authority_ReportOpenLockerNoiseEventToAI");
static_assert(offsetof(Locker_Authority_ReportOpenLockerNoiseEventToAI, FastActivation) == 0x000000, "Member 'Locker_Authority_ReportOpenLockerNoiseEventToAI::FastActivation' has a wrong offset!");

// Function DeadByDaylight.Locker.GetExposerInteriorZone
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetExposerInteriorZone final
{
public:
	class UExposerInteriorZoneComponent*          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetExposerInteriorZone) == 0x000008, "Wrong alignment on Locker_GetExposerInteriorZone");
static_assert(sizeof(Locker_GetExposerInteriorZone) == 0x000008, "Wrong size on Locker_GetExposerInteriorZone");
static_assert(offsetof(Locker_GetExposerInteriorZone, ReturnValue) == 0x000000, "Member 'Locker_GetExposerInteriorZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetPlayerInClosetLocation
// 0x0018 (0x0018 - 0x0000)
struct Locker_GetPlayerInClosetLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetPlayerInClosetLocation) == 0x000008, "Wrong alignment on Locker_GetPlayerInClosetLocation");
static_assert(sizeof(Locker_GetPlayerInClosetLocation) == 0x000018, "Wrong size on Locker_GetPlayerInClosetLocation");
static_assert(offsetof(Locker_GetPlayerInClosetLocation, ReturnValue) == 0x000000, "Member 'Locker_GetPlayerInClosetLocation::ReturnValue' has a wrong offset!");

// DelegateFunction DeadByDaylight.Locker.OnPlayerInLockerChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct Locker_OnPlayerInLockerChanged__DelegateSignature final
{
public:
	class ADBDPlayer*                             PlayerWhoWasInLocker;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             PlayerNowInLocker;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_OnPlayerInLockerChanged__DelegateSignature) == 0x000008, "Wrong alignment on Locker_OnPlayerInLockerChanged__DelegateSignature");
static_assert(sizeof(Locker_OnPlayerInLockerChanged__DelegateSignature) == 0x000010, "Wrong size on Locker_OnPlayerInLockerChanged__DelegateSignature");
static_assert(offsetof(Locker_OnPlayerInLockerChanged__DelegateSignature, PlayerWhoWasInLocker) == 0x000000, "Member 'Locker_OnPlayerInLockerChanged__DelegateSignature::PlayerWhoWasInLocker' has a wrong offset!");
static_assert(offsetof(Locker_OnPlayerInLockerChanged__DelegateSignature, PlayerNowInLocker) == 0x000008, "Member 'Locker_OnPlayerInLockerChanged__DelegateSignature::PlayerNowInLocker' has a wrong offset!");

// Function DeadByDaylight.Locker.OnRep_PlayerInLocker
// 0x0008 (0x0008 - 0x0000)
struct Locker_OnRep_PlayerInLocker final
{
public:
	class ADBDPlayer*                             PreviousPlayerInLocker;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_OnRep_PlayerInLocker) == 0x000008, "Wrong alignment on Locker_OnRep_PlayerInLocker");
static_assert(sizeof(Locker_OnRep_PlayerInLocker) == 0x000008, "Wrong size on Locker_OnRep_PlayerInLocker");
static_assert(offsetof(Locker_OnRep_PlayerInLocker, PreviousPlayerInLocker) == 0x000000, "Member 'Locker_OnRep_PlayerInLocker::PreviousPlayerInLocker' has a wrong offset!");

// Function DeadByDaylight.Locker.OnRep_PlayerOpeningLocker
// 0x0008 (0x0008 - 0x0000)
struct Locker_OnRep_PlayerOpeningLocker final
{
public:
	class ADBDPlayer*                             PlayerWhoWasOpeningLocker;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_OnRep_PlayerOpeningLocker) == 0x000008, "Wrong alignment on Locker_OnRep_PlayerOpeningLocker");
static_assert(sizeof(Locker_OnRep_PlayerOpeningLocker) == 0x000008, "Wrong size on Locker_OnRep_PlayerOpeningLocker");
static_assert(offsetof(Locker_OnRep_PlayerOpeningLocker, PlayerWhoWasOpeningLocker) == 0x000000, "Member 'Locker_OnRep_PlayerOpeningLocker::PlayerWhoWasOpeningLocker' has a wrong offset!");

// Function DeadByDaylight.Locker.StartMinNearOutlineDistLerp
// 0x0008 (0x0008 - 0x0000)
struct Locker_StartMinNearOutlineDistLerp final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_StartMinNearOutlineDistLerp) == 0x000008, "Wrong alignment on Locker_StartMinNearOutlineDistLerp");
static_assert(sizeof(Locker_StartMinNearOutlineDistLerp) == 0x000008, "Wrong size on Locker_StartMinNearOutlineDistLerp");
static_assert(offsetof(Locker_StartMinNearOutlineDistLerp, Player) == 0x000000, "Member 'Locker_StartMinNearOutlineDistLerp::Player' has a wrong offset!");

// Function DeadByDaylight.Locker.StopMinNearOutlineDistLerp
// 0x0008 (0x0008 - 0x0000)
struct Locker_StopMinNearOutlineDistLerp final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_StopMinNearOutlineDistLerp) == 0x000008, "Wrong alignment on Locker_StopMinNearOutlineDistLerp");
static_assert(sizeof(Locker_StopMinNearOutlineDistLerp) == 0x000008, "Wrong size on Locker_StopMinNearOutlineDistLerp");
static_assert(offsetof(Locker_StopMinNearOutlineDistLerp, Player) == 0x000000, "Member 'Locker_StopMinNearOutlineDistLerp::Player' has a wrong offset!");

// Function DeadByDaylight.Locker.GetChildInteractionActor
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetChildInteractionActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetChildInteractionActor) == 0x000008, "Wrong alignment on Locker_GetChildInteractionActor");
static_assert(sizeof(Locker_GetChildInteractionActor) == 0x000008, "Wrong size on Locker_GetChildInteractionActor");
static_assert(offsetof(Locker_GetChildInteractionActor, ReturnValue) == 0x000000, "Member 'Locker_GetChildInteractionActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetInteractor
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetInteractor) == 0x000008, "Wrong alignment on Locker_GetInteractor");
static_assert(sizeof(Locker_GetInteractor) == 0x000008, "Wrong size on Locker_GetInteractor");
static_assert(offsetof(Locker_GetInteractor, ReturnValue) == 0x000000, "Member 'Locker_GetInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetLockerHideEnterSneakInteraction
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetLockerHideEnterSneakInteraction final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetLockerHideEnterSneakInteraction) == 0x000008, "Wrong alignment on Locker_GetLockerHideEnterSneakInteraction");
static_assert(sizeof(Locker_GetLockerHideEnterSneakInteraction) == 0x000008, "Wrong size on Locker_GetLockerHideEnterSneakInteraction");
static_assert(offsetof(Locker_GetLockerHideEnterSneakInteraction, ReturnValue) == 0x000000, "Member 'Locker_GetLockerHideEnterSneakInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetMesh) == 0x000008, "Wrong alignment on Locker_GetMesh");
static_assert(sizeof(Locker_GetMesh) == 0x000008, "Wrong size on Locker_GetMesh");
static_assert(offsetof(Locker_GetMesh, ReturnValue) == 0x000000, "Member 'Locker_GetMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetPlayerInLocker
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetPlayerInLocker final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetPlayerInLocker) == 0x000008, "Wrong alignment on Locker_GetPlayerInLocker");
static_assert(sizeof(Locker_GetPlayerInLocker) == 0x000008, "Wrong size on Locker_GetPlayerInLocker");
static_assert(offsetof(Locker_GetPlayerInLocker, ReturnValue) == 0x000000, "Member 'Locker_GetPlayerInLocker::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetStunZone
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetStunZone final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetStunZone) == 0x000008, "Wrong alignment on Locker_GetStunZone");
static_assert(sizeof(Locker_GetStunZone) == 0x000008, "Wrong size on Locker_GetStunZone");
static_assert(offsetof(Locker_GetStunZone, ReturnValue) == 0x000000, "Member 'Locker_GetStunZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.GetSurvivorInLocker
// 0x0008 (0x0008 - 0x0000)
struct Locker_GetSurvivorInLocker final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_GetSurvivorInLocker) == 0x000008, "Wrong alignment on Locker_GetSurvivorInLocker");
static_assert(sizeof(Locker_GetSurvivorInLocker) == 0x000008, "Wrong size on Locker_GetSurvivorInLocker");
static_assert(offsetof(Locker_GetSurvivorInLocker, ReturnValue) == 0x000000, "Member 'Locker_GetSurvivorInLocker::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.IsFacingLocker
// 0x0010 (0x0010 - 0x0000)
struct Locker_IsFacingLocker final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToleranceDegreeAngle;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Locker_IsFacingLocker) == 0x000008, "Wrong alignment on Locker_IsFacingLocker");
static_assert(sizeof(Locker_IsFacingLocker) == 0x000010, "Wrong size on Locker_IsFacingLocker");
static_assert(offsetof(Locker_IsFacingLocker, Player) == 0x000000, "Member 'Locker_IsFacingLocker::Player' has a wrong offset!");
static_assert(offsetof(Locker_IsFacingLocker, ToleranceDegreeAngle) == 0x000008, "Member 'Locker_IsFacingLocker::ToleranceDegreeAngle' has a wrong offset!");
static_assert(offsetof(Locker_IsFacingLocker, ReturnValue) == 0x00000C, "Member 'Locker_IsFacingLocker::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.IsOccupied
// 0x0001 (0x0001 - 0x0000)
struct Locker_IsOccupied final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_IsOccupied) == 0x000001, "Wrong alignment on Locker_IsOccupied");
static_assert(sizeof(Locker_IsOccupied) == 0x000001, "Wrong size on Locker_IsOccupied");
static_assert(offsetof(Locker_IsOccupied, ReturnValue) == 0x000000, "Member 'Locker_IsOccupied::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Locker.SetPlayerInLockerVisibility
// 0x0001 (0x0001 - 0x0000)
struct Locker_SetPlayerInLockerVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Locker_SetPlayerInLockerVisibility) == 0x000001, "Wrong alignment on Locker_SetPlayerInLockerVisibility");
static_assert(sizeof(Locker_SetPlayerInLockerVisibility) == 0x000001, "Wrong size on Locker_SetPlayerInLockerVisibility");
static_assert(offsetof(Locker_SetPlayerInLockerVisibility, IsVisible) == 0x000000, "Member 'Locker_SetPlayerInLockerVisibility::IsVisible' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Authority_OnExitGatesPowered
// 0x0040 (0x0040 - 0x0000)
struct GeneratorTrapPerk_Authority_OnExitGatesPowered final
{
public:
	struct FGameplayTag                           GameEventTag;                                      // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Authority_OnExitGatesPowered) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Authority_OnExitGatesPowered");
static_assert(sizeof(GeneratorTrapPerk_Authority_OnExitGatesPowered) == 0x000040, "Wrong size on GeneratorTrapPerk_Authority_OnExitGatesPowered");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnExitGatesPowered, GameEventTag) == 0x000000, "Member 'GeneratorTrapPerk_Authority_OnExitGatesPowered::GameEventTag' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnExitGatesPowered, GameEventData) == 0x000010, "Member 'GeneratorTrapPerk_Authority_OnExitGatesPowered::GameEventData' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Authority_OnGeneratorCompleted
// 0x0001 (0x0001 - 0x0000)
struct GeneratorTrapPerk_Authority_OnGeneratorCompleted final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Authority_OnGeneratorCompleted) == 0x000001, "Wrong alignment on GeneratorTrapPerk_Authority_OnGeneratorCompleted");
static_assert(sizeof(GeneratorTrapPerk_Authority_OnGeneratorCompleted) == 0x000001, "Wrong size on GeneratorTrapPerk_Authority_OnGeneratorCompleted");
static_assert(offsetof(GeneratorTrapPerk_Authority_OnGeneratorCompleted, IsAutoCompleted) == 0x000000, "Member 'GeneratorTrapPerk_Authority_OnGeneratorCompleted::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Client_OnTrapActivated
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTrapPerk_Client_OnTrapActivated final
{
public:
	const class AGenerator*                       Generator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Client_OnTrapActivated) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Client_OnTrapActivated");
static_assert(sizeof(GeneratorTrapPerk_Client_OnTrapActivated) == 0x000008, "Wrong size on GeneratorTrapPerk_Client_OnTrapActivated");
static_assert(offsetof(GeneratorTrapPerk_Client_OnTrapActivated, Generator) == 0x000000, "Member 'GeneratorTrapPerk_Client_OnTrapActivated::Generator' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Client_OnTrapDestroyed
// 0x0010 (0x0010 - 0x0000)
struct GeneratorTrapPerk_Client_OnTrapDestroyed final
{
public:
	const class AGenerator*                       Generator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrapRemovedReason                            Reason;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorTrapPerk_Client_OnTrapDestroyed) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Client_OnTrapDestroyed");
static_assert(sizeof(GeneratorTrapPerk_Client_OnTrapDestroyed) == 0x000010, "Wrong size on GeneratorTrapPerk_Client_OnTrapDestroyed");
static_assert(offsetof(GeneratorTrapPerk_Client_OnTrapDestroyed, Generator) == 0x000000, "Member 'GeneratorTrapPerk_Client_OnTrapDestroyed::Generator' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Client_OnTrapDestroyed, Reason) == 0x000008, "Member 'GeneratorTrapPerk_Client_OnTrapDestroyed::Reason' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Cosmetic_TrapActivated
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTrapPerk_Cosmetic_TrapActivated final
{
public:
	const class AGenerator*                       Generator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_Cosmetic_TrapActivated) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Cosmetic_TrapActivated");
static_assert(sizeof(GeneratorTrapPerk_Cosmetic_TrapActivated) == 0x000008, "Wrong size on GeneratorTrapPerk_Cosmetic_TrapActivated");
static_assert(offsetof(GeneratorTrapPerk_Cosmetic_TrapActivated, Generator) == 0x000000, "Member 'GeneratorTrapPerk_Cosmetic_TrapActivated::Generator' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.Cosmetic_TrapDestroyed
// 0x0010 (0x0010 - 0x0000)
struct GeneratorTrapPerk_Cosmetic_TrapDestroyed final
{
public:
	const class AGenerator*                       Generator;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETrapRemovedReason                            Reason;                                            // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorTrapPerk_Cosmetic_TrapDestroyed) == 0x000008, "Wrong alignment on GeneratorTrapPerk_Cosmetic_TrapDestroyed");
static_assert(sizeof(GeneratorTrapPerk_Cosmetic_TrapDestroyed) == 0x000010, "Wrong size on GeneratorTrapPerk_Cosmetic_TrapDestroyed");
static_assert(offsetof(GeneratorTrapPerk_Cosmetic_TrapDestroyed, Generator) == 0x000000, "Member 'GeneratorTrapPerk_Cosmetic_TrapDestroyed::Generator' has a wrong offset!");
static_assert(offsetof(GeneratorTrapPerk_Cosmetic_TrapDestroyed, Reason) == 0x000008, "Member 'GeneratorTrapPerk_Cosmetic_TrapDestroyed::Reason' has a wrong offset!");

// Function DeadByDaylight.GeneratorTrapPerk.GetGeneratorTrapDuration
// 0x0004 (0x0004 - 0x0000)
struct GeneratorTrapPerk_GetGeneratorTrapDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTrapPerk_GetGeneratorTrapDuration) == 0x000004, "Wrong alignment on GeneratorTrapPerk_GetGeneratorTrapDuration");
static_assert(sizeof(GeneratorTrapPerk_GetGeneratorTrapDuration) == 0x000004, "Wrong size on GeneratorTrapPerk_GetGeneratorTrapDuration");
static_assert(offsetof(GeneratorTrapPerk_GetGeneratorTrapDuration, ReturnValue) == 0x000000, "Member 'GeneratorTrapPerk_GetGeneratorTrapDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDEmblem.Client_FinalizeReplication
// 0x0018 (0x0018 - 0x0000)
struct DBDEmblem_Client_FinalizeReplication final
{
public:
	float                                         Points;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProgressionPoints>             ProgressionPoints;                                 // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDEmblem_Client_FinalizeReplication) == 0x000008, "Wrong alignment on DBDEmblem_Client_FinalizeReplication");
static_assert(sizeof(DBDEmblem_Client_FinalizeReplication) == 0x000018, "Wrong size on DBDEmblem_Client_FinalizeReplication");
static_assert(offsetof(DBDEmblem_Client_FinalizeReplication, Points) == 0x000000, "Member 'DBDEmblem_Client_FinalizeReplication::Points' has a wrong offset!");
static_assert(offsetof(DBDEmblem_Client_FinalizeReplication, ProgressionPoints) == 0x000008, "Member 'DBDEmblem_Client_FinalizeReplication::ProgressionPoints' has a wrong offset!");

// Function DeadByDaylight.LanternLightCollectable.SetParentLantern
// 0x0008 (0x0008 - 0x0000)
struct LanternLightCollectable_SetParentLantern final
{
public:
	class ALanternInteractable*                   ParentLantern;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternLightCollectable_SetParentLantern) == 0x000008, "Wrong alignment on LanternLightCollectable_SetParentLantern");
static_assert(sizeof(LanternLightCollectable_SetParentLantern) == 0x000008, "Wrong size on LanternLightCollectable_SetParentLantern");
static_assert(offsetof(LanternLightCollectable_SetParentLantern, ParentLantern) == 0x000000, "Member 'LanternLightCollectable_SetParentLantern::ParentLantern' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetAlantaInteractionDescriptionText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetAlantaInteractionDescriptionText final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetAlantaInteractionDescriptionText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetAlantaInteractionDescriptionText");
static_assert(sizeof(AtlantaUtilities_GetAlantaInteractionDescriptionText) == 0x000020, "Wrong size on AtlantaUtilities_GetAlantaInteractionDescriptionText");
static_assert(offsetof(AtlantaUtilities_GetAlantaInteractionDescriptionText, Interaction) == 0x000000, "Member 'AtlantaUtilities_GetAlantaInteractionDescriptionText::Interaction' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetAlantaInteractionDescriptionText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetAlantaInteractionDescriptionText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetAvailableInteractionOfType
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetAvailableInteractionOfType final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InteractionInputType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetAvailableInteractionOfType) == 0x000008, "Wrong alignment on AtlantaUtilities_GetAvailableInteractionOfType");
static_assert(sizeof(AtlantaUtilities_GetAvailableInteractionOfType) == 0x000018, "Wrong size on AtlantaUtilities_GetAvailableInteractionOfType");
static_assert(offsetof(AtlantaUtilities_GetAvailableInteractionOfType, Player) == 0x000000, "Member 'AtlantaUtilities_GetAvailableInteractionOfType::Player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetAvailableInteractionOfType, InteractionInputType) == 0x000008, "Member 'AtlantaUtilities_GetAvailableInteractionOfType::InteractionInputType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetAvailableInteractionOfType, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetAvailableInteractionOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrencyColor
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetCurrencyColor final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            ReturnValue;                                       // 0x0004(0x0014)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrencyColor) == 0x000004, "Wrong alignment on AtlantaUtilities_GetCurrencyColor");
static_assert(sizeof(AtlantaUtilities_GetCurrencyColor) == 0x000018, "Wrong size on AtlantaUtilities_GetCurrencyColor");
static_assert(offsetof(AtlantaUtilities_GetCurrencyColor, CurrencyType) == 0x000000, "Member 'AtlantaUtilities_GetCurrencyColor::CurrencyType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrencyColor, ReturnValue) == 0x000004, "Member 'AtlantaUtilities_GetCurrencyColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrencyUITexturePath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetCurrencyUITexturePath final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrencyUITexturePath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetCurrencyUITexturePath");
static_assert(sizeof(AtlantaUtilities_GetCurrencyUITexturePath) == 0x000018, "Wrong size on AtlantaUtilities_GetCurrencyUITexturePath");
static_assert(offsetof(AtlantaUtilities_GetCurrencyUITexturePath, CurrencyType) == 0x000000, "Member 'AtlantaUtilities_GetCurrencyUITexturePath::CurrencyType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrencyUITexturePath, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetCurrencyUITexturePath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrentInteraction
// 0x0010 (0x0010 - 0x0000)
struct AtlantaUtilities_GetCurrentInteraction final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrentInteraction) == 0x000008, "Wrong alignment on AtlantaUtilities_GetCurrentInteraction");
static_assert(sizeof(AtlantaUtilities_GetCurrentInteraction) == 0x000010, "Wrong size on AtlantaUtilities_GetCurrentInteraction");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteraction, Player) == 0x000000, "Member 'AtlantaUtilities_GetCurrentInteraction::Player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteraction, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetCurrentInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrentInteractionOfType
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetCurrentInteractionOfType final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InteractionInputType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrentInteractionOfType) == 0x000008, "Wrong alignment on AtlantaUtilities_GetCurrentInteractionOfType");
static_assert(sizeof(AtlantaUtilities_GetCurrentInteractionOfType) == 0x000018, "Wrong size on AtlantaUtilities_GetCurrentInteractionOfType");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteractionOfType, Player) == 0x000000, "Member 'AtlantaUtilities_GetCurrentInteractionOfType::Player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteractionOfType, InteractionInputType) == 0x000008, "Member 'AtlantaUtilities_GetCurrentInteractionOfType::InteractionInputType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentInteractionOfType, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetCurrentInteractionOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetCurrentOrAvailableInteractionOfType
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetCurrentOrAvailableInteractionOfType final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InteractionInputType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType) == 0x000008, "Wrong alignment on AtlantaUtilities_GetCurrentOrAvailableInteractionOfType");
static_assert(sizeof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType) == 0x000018, "Wrong size on AtlantaUtilities_GetCurrentOrAvailableInteractionOfType");
static_assert(offsetof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType, Player) == 0x000000, "Member 'AtlantaUtilities_GetCurrentOrAvailableInteractionOfType::Player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType, InteractionInputType) == 0x000008, "Member 'AtlantaUtilities_GetCurrentOrAvailableInteractionOfType::InteractionInputType' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetCurrentOrAvailableInteractionOfType, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetCurrentOrAvailableInteractionOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetDifficultyLevelText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetDifficultyLevelText final
{
public:
	EAIDifficultyLevel                            DifficultyLevel;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetDifficultyLevelText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetDifficultyLevelText");
static_assert(sizeof(AtlantaUtilities_GetDifficultyLevelText) == 0x000020, "Wrong size on AtlantaUtilities_GetDifficultyLevelText");
static_assert(offsetof(AtlantaUtilities_GetDifficultyLevelText, DifficultyLevel) == 0x000000, "Member 'AtlantaUtilities_GetDifficultyLevelText::DifficultyLevel' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetDifficultyLevelText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetDifficultyLevelText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetEmblemQualityText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetEmblemQualityText final
{
public:
	EEmblemQuality                                EmblemQuality;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetEmblemQualityText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetEmblemQualityText");
static_assert(sizeof(AtlantaUtilities_GetEmblemQualityText) == 0x000020, "Wrong size on AtlantaUtilities_GetEmblemQualityText");
static_assert(offsetof(AtlantaUtilities_GetEmblemQualityText, EmblemQuality) == 0x000000, "Member 'AtlantaUtilities_GetEmblemQualityText::EmblemQuality' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetEmblemQualityText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetEmblemQualityText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetIconImageByPath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetIconImageByPath final
{
public:
	class FString                                 IconPath;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetIconImageByPath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetIconImageByPath");
static_assert(sizeof(AtlantaUtilities_GetIconImageByPath) == 0x000018, "Wrong size on AtlantaUtilities_GetIconImageByPath");
static_assert(offsetof(AtlantaUtilities_GetIconImageByPath, IconPath) == 0x000000, "Member 'AtlantaUtilities_GetIconImageByPath::IconPath' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetIconImageByPath, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetIconImageByPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetItemAvailabilityText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetItemAvailabilityText final
{
public:
	EItemAvailability                             Availability;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetItemAvailabilityText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetItemAvailabilityText");
static_assert(sizeof(AtlantaUtilities_GetItemAvailabilityText) == 0x000020, "Wrong size on AtlantaUtilities_GetItemAvailabilityText");
static_assert(offsetof(AtlantaUtilities_GetItemAvailabilityText, Availability) == 0x000000, "Member 'AtlantaUtilities_GetItemAvailabilityText::Availability' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetItemAvailabilityText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetItemAvailabilityText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetItemRarityText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetItemRarityText final
{
public:
	EItemRarity                                   Rarity;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetItemRarityText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetItemRarityText");
static_assert(sizeof(AtlantaUtilities_GetItemRarityText) == 0x000020, "Wrong size on AtlantaUtilities_GetItemRarityText");
static_assert(offsetof(AtlantaUtilities_GetItemRarityText, Rarity) == 0x000000, "Member 'AtlantaUtilities_GetItemRarityText::Rarity' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetItemRarityText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetItemRarityText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetMapSpriteFromPath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetMapSpriteFromPath final
{
public:
	class FString                                 MapSpritePath;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetMapSpriteFromPath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetMapSpriteFromPath");
static_assert(sizeof(AtlantaUtilities_GetMapSpriteFromPath) == 0x000018, "Wrong size on AtlantaUtilities_GetMapSpriteFromPath");
static_assert(offsetof(AtlantaUtilities_GetMapSpriteFromPath, MapSpritePath) == 0x000000, "Member 'AtlantaUtilities_GetMapSpriteFromPath::MapSpritePath' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetMapSpriteFromPath, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetMapSpriteFromPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetOfferingCategoryText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetOfferingCategoryText final
{
public:
	EOfferingCategory                             OfferingCategory;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetOfferingCategoryText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetOfferingCategoryText");
static_assert(sizeof(AtlantaUtilities_GetOfferingCategoryText) == 0x000020, "Wrong size on AtlantaUtilities_GetOfferingCategoryText");
static_assert(offsetof(AtlantaUtilities_GetOfferingCategoryText, OfferingCategory) == 0x000000, "Member 'AtlantaUtilities_GetOfferingCategoryText::OfferingCategory' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetOfferingCategoryText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetOfferingCategoryText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetPlayerRoleText
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetPlayerRoleText final
{
public:
	EPlayerRole                                   PlayerRole;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetPlayerRoleText) == 0x000008, "Wrong alignment on AtlantaUtilities_GetPlayerRoleText");
static_assert(sizeof(AtlantaUtilities_GetPlayerRoleText) == 0x000020, "Wrong size on AtlantaUtilities_GetPlayerRoleText");
static_assert(offsetof(AtlantaUtilities_GetPlayerRoleText, PlayerRole) == 0x000000, "Member 'AtlantaUtilities_GetPlayerRoleText::PlayerRole' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetPlayerRoleText, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetPlayerRoleText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetPlayerRoleTextUppercase
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_GetPlayerRoleTextUppercase final
{
public:
	EPlayerRole                                   PlayerRole;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetPlayerRoleTextUppercase) == 0x000008, "Wrong alignment on AtlantaUtilities_GetPlayerRoleTextUppercase");
static_assert(sizeof(AtlantaUtilities_GetPlayerRoleTextUppercase) == 0x000020, "Wrong size on AtlantaUtilities_GetPlayerRoleTextUppercase");
static_assert(offsetof(AtlantaUtilities_GetPlayerRoleTextUppercase, PlayerRole) == 0x000000, "Member 'AtlantaUtilities_GetPlayerRoleTextUppercase::PlayerRole' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetPlayerRoleTextUppercase, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_GetPlayerRoleTextUppercase::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetSpriteFromFullPath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_GetSpriteFromFullPath final
{
public:
	class FString                                 FullSpritePath;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetSpriteFromFullPath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetSpriteFromFullPath");
static_assert(sizeof(AtlantaUtilities_GetSpriteFromFullPath) == 0x000018, "Wrong size on AtlantaUtilities_GetSpriteFromFullPath");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromFullPath, FullSpritePath) == 0x000000, "Member 'AtlantaUtilities_GetSpriteFromFullPath::FullSpritePath' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromFullPath, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_GetSpriteFromFullPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetSpriteFromPath
// 0x0038 (0x0038 - 0x0000)
struct AtlantaUtilities_GetSpriteFromPath final
{
public:
	class FString                                 FullDbPathToImage;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConstantDbPathToImageFolder;                       // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ConstantPathToSpriteFolder;                        // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPaperSprite*                           ReturnValue;                                       // 0x0030(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetSpriteFromPath) == 0x000008, "Wrong alignment on AtlantaUtilities_GetSpriteFromPath");
static_assert(sizeof(AtlantaUtilities_GetSpriteFromPath) == 0x000038, "Wrong size on AtlantaUtilities_GetSpriteFromPath");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromPath, FullDbPathToImage) == 0x000000, "Member 'AtlantaUtilities_GetSpriteFromPath::FullDbPathToImage' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromPath, ConstantDbPathToImageFolder) == 0x000010, "Member 'AtlantaUtilities_GetSpriteFromPath::ConstantDbPathToImageFolder' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromPath, ConstantPathToSpriteFolder) == 0x000020, "Member 'AtlantaUtilities_GetSpriteFromPath::ConstantPathToSpriteFolder' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_GetSpriteFromPath, ReturnValue) == 0x000030, "Member 'AtlantaUtilities_GetSpriteFromPath::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.GetStoreVersion
// 0x0010 (0x0010 - 0x0000)
struct AtlantaUtilities_GetStoreVersion final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_GetStoreVersion) == 0x000008, "Wrong alignment on AtlantaUtilities_GetStoreVersion");
static_assert(sizeof(AtlantaUtilities_GetStoreVersion) == 0x000010, "Wrong size on AtlantaUtilities_GetStoreVersion");
static_assert(offsetof(AtlantaUtilities_GetStoreVersion, ReturnValue) == 0x000000, "Member 'AtlantaUtilities_GetStoreVersion::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.IsPlayerInteractingWithActor
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_IsPlayerInteractingWithActor final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaUtilities_IsPlayerInteractingWithActor) == 0x000008, "Wrong alignment on AtlantaUtilities_IsPlayerInteractingWithActor");
static_assert(sizeof(AtlantaUtilities_IsPlayerInteractingWithActor) == 0x000018, "Wrong size on AtlantaUtilities_IsPlayerInteractingWithActor");
static_assert(offsetof(AtlantaUtilities_IsPlayerInteractingWithActor, Player) == 0x000000, "Member 'AtlantaUtilities_IsPlayerInteractingWithActor::Player' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_IsPlayerInteractingWithActor, Actor) == 0x000008, "Member 'AtlantaUtilities_IsPlayerInteractingWithActor::Actor' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_IsPlayerInteractingWithActor, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_IsPlayerInteractingWithActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.LoadTextureByAsset
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_LoadTextureByAsset final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_LoadTextureByAsset) == 0x000008, "Wrong alignment on AtlantaUtilities_LoadTextureByAsset");
static_assert(sizeof(AtlantaUtilities_LoadTextureByAsset) == 0x000018, "Wrong size on AtlantaUtilities_LoadTextureByAsset");
static_assert(offsetof(AtlantaUtilities_LoadTextureByAsset, Path) == 0x000000, "Member 'AtlantaUtilities_LoadTextureByAsset::Path' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_LoadTextureByAsset, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_LoadTextureByAsset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.MakeBrushFromSprite
// 0x00E0 (0x00E0 - 0x0000)
struct AtlantaUtilities_MakeBrushFromSprite final
{
public:
	class UPaperSprite*                           Sprite;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_MakeBrushFromSprite) == 0x000010, "Wrong alignment on AtlantaUtilities_MakeBrushFromSprite");
static_assert(sizeof(AtlantaUtilities_MakeBrushFromSprite) == 0x0000E0, "Wrong size on AtlantaUtilities_MakeBrushFromSprite");
static_assert(offsetof(AtlantaUtilities_MakeBrushFromSprite, Sprite) == 0x000000, "Member 'AtlantaUtilities_MakeBrushFromSprite::Sprite' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_MakeBrushFromSprite, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_MakeBrushFromSprite::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.MakeBrushFromTexture
// 0x00E0 (0x00E0 - 0x0000)
struct AtlantaUtilities_MakeBrushFromTexture final
{
public:
	class UTexture2D*                             Texture;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            ReturnValue;                                       // 0x0010(0x00D0)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_MakeBrushFromTexture) == 0x000010, "Wrong alignment on AtlantaUtilities_MakeBrushFromTexture");
static_assert(sizeof(AtlantaUtilities_MakeBrushFromTexture) == 0x0000E0, "Wrong size on AtlantaUtilities_MakeBrushFromTexture");
static_assert(offsetof(AtlantaUtilities_MakeBrushFromTexture, Texture) == 0x000000, "Member 'AtlantaUtilities_MakeBrushFromTexture::Texture' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_MakeBrushFromTexture, ReturnValue) == 0x000010, "Member 'AtlantaUtilities_MakeBrushFromTexture::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SecondsToStringWithoutDecimals
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_SecondsToStringWithoutDecimals final
{
public:
	int32                                         Seconds;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_SecondsToStringWithoutDecimals) == 0x000008, "Wrong alignment on AtlantaUtilities_SecondsToStringWithoutDecimals");
static_assert(sizeof(AtlantaUtilities_SecondsToStringWithoutDecimals) == 0x000018, "Wrong size on AtlantaUtilities_SecondsToStringWithoutDecimals");
static_assert(offsetof(AtlantaUtilities_SecondsToStringWithoutDecimals, Seconds) == 0x000000, "Member 'AtlantaUtilities_SecondsToStringWithoutDecimals::Seconds' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SecondsToStringWithoutDecimals, ReturnValue) == 0x000008, "Member 'AtlantaUtilities_SecondsToStringWithoutDecimals::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetButtonStyle
// 0x00E0 (0x00E0 - 0x0000)
struct AtlantaUtilities_SetButtonStyle final
{
public:
	class UButton*                                Button;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_SetButtonStyle) == 0x000010, "Wrong alignment on AtlantaUtilities_SetButtonStyle");
static_assert(sizeof(AtlantaUtilities_SetButtonStyle) == 0x0000E0, "Wrong size on AtlantaUtilities_SetButtonStyle");
static_assert(offsetof(AtlantaUtilities_SetButtonStyle, Button) == 0x000000, "Member 'AtlantaUtilities_SetButtonStyle::Button' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetButtonStyle, Brush) == 0x000010, "Member 'AtlantaUtilities_SetButtonStyle::Brush' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetImageBrush
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_SetImageBrush final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             Asset;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaUtilities_SetImageBrush) == 0x000008, "Wrong alignment on AtlantaUtilities_SetImageBrush");
static_assert(sizeof(AtlantaUtilities_SetImageBrush) == 0x000018, "Wrong size on AtlantaUtilities_SetImageBrush");
static_assert(offsetof(AtlantaUtilities_SetImageBrush, Image) == 0x000000, "Member 'AtlantaUtilities_SetImageBrush::Image' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrush, Asset) == 0x000008, "Member 'AtlantaUtilities_SetImageBrush::Asset' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrush, bMatchSize) == 0x000010, "Member 'AtlantaUtilities_SetImageBrush::bMatchSize' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetImageBrushFromPath
// 0x0020 (0x0020 - 0x0000)
struct AtlantaUtilities_SetImageBrushFromPath final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaUtilities_SetImageBrushFromPath) == 0x000008, "Wrong alignment on AtlantaUtilities_SetImageBrushFromPath");
static_assert(sizeof(AtlantaUtilities_SetImageBrushFromPath) == 0x000020, "Wrong size on AtlantaUtilities_SetImageBrushFromPath");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromPath, Image) == 0x000000, "Member 'AtlantaUtilities_SetImageBrushFromPath::Image' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromPath, Path) == 0x000008, "Member 'AtlantaUtilities_SetImageBrushFromPath::Path' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromPath, bMatchSize) == 0x000018, "Member 'AtlantaUtilities_SetImageBrushFromPath::bMatchSize' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetImageBrushFromSpritePath
// 0x0018 (0x0018 - 0x0000)
struct AtlantaUtilities_SetImageBrushFromSpritePath final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Path;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaUtilities_SetImageBrushFromSpritePath) == 0x000008, "Wrong alignment on AtlantaUtilities_SetImageBrushFromSpritePath");
static_assert(sizeof(AtlantaUtilities_SetImageBrushFromSpritePath) == 0x000018, "Wrong size on AtlantaUtilities_SetImageBrushFromSpritePath");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromSpritePath, Image) == 0x000000, "Member 'AtlantaUtilities_SetImageBrushFromSpritePath::Image' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageBrushFromSpritePath, Path) == 0x000008, "Member 'AtlantaUtilities_SetImageBrushFromSpritePath::Path' has a wrong offset!");

// Function DeadByDaylight.AtlantaUtilities.SetImageSlateBrush
// 0x00F0 (0x00F0 - 0x0000)
struct AtlantaUtilities_SetImageSlateBrush final
{
public:
	class UImage*                                 Image;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0010(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          bMatchSize;                                        // 0x00E0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x00E1(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0xE];                                       // 0x00E2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AtlantaUtilities_SetImageSlateBrush) == 0x000010, "Wrong alignment on AtlantaUtilities_SetImageSlateBrush");
static_assert(sizeof(AtlantaUtilities_SetImageSlateBrush) == 0x0000F0, "Wrong size on AtlantaUtilities_SetImageSlateBrush");
static_assert(offsetof(AtlantaUtilities_SetImageSlateBrush, Image) == 0x000000, "Member 'AtlantaUtilities_SetImageSlateBrush::Image' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageSlateBrush, Brush) == 0x000010, "Member 'AtlantaUtilities_SetImageSlateBrush::Brush' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageSlateBrush, bMatchSize) == 0x0000E0, "Member 'AtlantaUtilities_SetImageSlateBrush::bMatchSize' has a wrong offset!");
static_assert(offsetof(AtlantaUtilities_SetImageSlateBrush, ReturnValue) == 0x0000E1, "Member 'AtlantaUtilities_SetImageSlateBrush::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Searchable.Authority_SpawnObject
// 0x0010 (0x0010 - 0x0000)
struct Searchable_Authority_SpawnObject final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACollectable*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_Authority_SpawnObject) == 0x000008, "Wrong alignment on Searchable_Authority_SpawnObject");
static_assert(sizeof(Searchable_Authority_SpawnObject) == 0x000010, "Wrong size on Searchable_Authority_SpawnObject");
static_assert(offsetof(Searchable_Authority_SpawnObject, Player) == 0x000000, "Member 'Searchable_Authority_SpawnObject::Player' has a wrong offset!");
static_assert(offsetof(Searchable_Authority_SpawnObject, ReturnValue) == 0x000008, "Member 'Searchable_Authority_SpawnObject::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Searchable.Cosmetic_OnBlockSearchable
// 0x0008 (0x0008 - 0x0000)
struct Searchable_Cosmetic_OnBlockSearchable final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_Cosmetic_OnBlockSearchable) == 0x000008, "Wrong alignment on Searchable_Cosmetic_OnBlockSearchable");
static_assert(sizeof(Searchable_Cosmetic_OnBlockSearchable) == 0x000008, "Wrong size on Searchable_Cosmetic_OnBlockSearchable");
static_assert(offsetof(Searchable_Cosmetic_OnBlockSearchable, Player) == 0x000000, "Member 'Searchable_Cosmetic_OnBlockSearchable::Player' has a wrong offset!");

// Function DeadByDaylight.Searchable.Cosmetic_OnUnblockSearchable
// 0x0008 (0x0008 - 0x0000)
struct Searchable_Cosmetic_OnUnblockSearchable final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_Cosmetic_OnUnblockSearchable) == 0x000008, "Wrong alignment on Searchable_Cosmetic_OnUnblockSearchable");
static_assert(sizeof(Searchable_Cosmetic_OnUnblockSearchable) == 0x000008, "Wrong size on Searchable_Cosmetic_OnUnblockSearchable");
static_assert(offsetof(Searchable_Cosmetic_OnUnblockSearchable, Player) == 0x000000, "Member 'Searchable_Cosmetic_OnUnblockSearchable::Player' has a wrong offset!");

// Function DeadByDaylight.Searchable.Multicast_SetHasBeenSearched
// 0x0001 (0x0001 - 0x0000)
struct Searchable_Multicast_SetHasBeenSearched final
{
public:
	bool                                          HasBeenSearched;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_Multicast_SetHasBeenSearched) == 0x000001, "Wrong alignment on Searchable_Multicast_SetHasBeenSearched");
static_assert(sizeof(Searchable_Multicast_SetHasBeenSearched) == 0x000001, "Wrong size on Searchable_Multicast_SetHasBeenSearched");
static_assert(offsetof(Searchable_Multicast_SetHasBeenSearched, HasBeenSearched) == 0x000000, "Member 'Searchable_Multicast_SetHasBeenSearched::HasBeenSearched' has a wrong offset!");

// DelegateFunction DeadByDaylight.Searchable.OnSearchedChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct Searchable_OnSearchedChanged__DelegateSignature final
{
public:
	bool                                          Searched;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_OnSearchedChanged__DelegateSignature) == 0x000001, "Wrong alignment on Searchable_OnSearchedChanged__DelegateSignature");
static_assert(sizeof(Searchable_OnSearchedChanged__DelegateSignature) == 0x000001, "Wrong size on Searchable_OnSearchedChanged__DelegateSignature");
static_assert(offsetof(Searchable_OnSearchedChanged__DelegateSignature, Searched) == 0x000000, "Member 'Searchable_OnSearchedChanged__DelegateSignature::Searched' has a wrong offset!");

// Function DeadByDaylight.Searchable.SetHasBeenSearched
// 0x0001 (0x0001 - 0x0000)
struct Searchable_SetHasBeenSearched final
{
public:
	bool                                          NewHasBeenSearched;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_SetHasBeenSearched) == 0x000001, "Wrong alignment on Searchable_SetHasBeenSearched");
static_assert(sizeof(Searchable_SetHasBeenSearched) == 0x000001, "Wrong size on Searchable_SetHasBeenSearched");
static_assert(offsetof(Searchable_SetHasBeenSearched, NewHasBeenSearched) == 0x000000, "Member 'Searchable_SetHasBeenSearched::NewHasBeenSearched' has a wrong offset!");

// Function DeadByDaylight.Searchable.ContainsSpawnedItem
// 0x0001 (0x0001 - 0x0000)
struct Searchable_ContainsSpawnedItem final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_ContainsSpawnedItem) == 0x000001, "Wrong alignment on Searchable_ContainsSpawnedItem");
static_assert(sizeof(Searchable_ContainsSpawnedItem) == 0x000001, "Wrong size on Searchable_ContainsSpawnedItem");
static_assert(offsetof(Searchable_ContainsSpawnedItem, ReturnValue) == 0x000000, "Member 'Searchable_ContainsSpawnedItem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Searchable.GetInteractorPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct Searchable_GetInteractorPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_GetInteractorPrimitiveComponent) == 0x000008, "Wrong alignment on Searchable_GetInteractorPrimitiveComponent");
static_assert(sizeof(Searchable_GetInteractorPrimitiveComponent) == 0x000008, "Wrong size on Searchable_GetInteractorPrimitiveComponent");
static_assert(offsetof(Searchable_GetInteractorPrimitiveComponent, ReturnValue) == 0x000000, "Member 'Searchable_GetInteractorPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Searchable.HasBeenSearched
// 0x0001 (0x0001 - 0x0000)
struct Searchable_HasBeenSearched final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Searchable_HasBeenSearched) == 0x000001, "Wrong alignment on Searchable_HasBeenSearched");
static_assert(sizeof(Searchable_HasBeenSearched) == 0x000001, "Wrong size on Searchable_HasBeenSearched");
static_assert(offsetof(Searchable_HasBeenSearched, ReturnValue) == 0x000000, "Member 'Searchable_HasBeenSearched::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Searchable.IsSearchableBlockedForPlayer
// 0x0010 (0x0010 - 0x0000)
struct Searchable_IsSearchableBlockedForPlayer final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Searchable_IsSearchableBlockedForPlayer) == 0x000008, "Wrong alignment on Searchable_IsSearchableBlockedForPlayer");
static_assert(sizeof(Searchable_IsSearchableBlockedForPlayer) == 0x000010, "Wrong size on Searchable_IsSearchableBlockedForPlayer");
static_assert(offsetof(Searchable_IsSearchableBlockedForPlayer, Player) == 0x000000, "Member 'Searchable_IsSearchableBlockedForPlayer::Player' has a wrong offset!");
static_assert(offsetof(Searchable_IsSearchableBlockedForPlayer, ReturnValue) == 0x000008, "Member 'Searchable_IsSearchableBlockedForPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.Authority_BindToPerk
// 0x0008 (0x0008 - 0x0000)
struct Totem_Authority_BindToPerk final
{
public:
	class UTotemBoundPerk*                        Perk;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_Authority_BindToPerk) == 0x000008, "Wrong alignment on Totem_Authority_BindToPerk");
static_assert(sizeof(Totem_Authority_BindToPerk) == 0x000008, "Wrong size on Totem_Authority_BindToPerk");
static_assert(offsetof(Totem_Authority_BindToPerk, Perk) == 0x000000, "Member 'Totem_Authority_BindToPerk::Perk' has a wrong offset!");

// Function DeadByDaylight.Totem.Authority_UnbindFromPerk
// 0x0008 (0x0008 - 0x0000)
struct Totem_Authority_UnbindFromPerk final
{
public:
	class UTotemBoundPerk*                        Perk;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_Authority_UnbindFromPerk) == 0x000008, "Wrong alignment on Totem_Authority_UnbindFromPerk");
static_assert(sizeof(Totem_Authority_UnbindFromPerk) == 0x000008, "Wrong size on Totem_Authority_UnbindFromPerk");
static_assert(offsetof(Totem_Authority_UnbindFromPerk, Perk) == 0x000000, "Member 'Totem_Authority_UnbindFromPerk::Perk' has a wrong offset!");

// Function DeadByDaylight.Totem.OnBlockTotemCosmetic
// 0x0008 (0x0008 - 0x0000)
struct Totem_OnBlockTotemCosmetic final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_OnBlockTotemCosmetic) == 0x000008, "Wrong alignment on Totem_OnBlockTotemCosmetic");
static_assert(sizeof(Totem_OnBlockTotemCosmetic) == 0x000008, "Wrong size on Totem_OnBlockTotemCosmetic");
static_assert(offsetof(Totem_OnBlockTotemCosmetic, Player) == 0x000000, "Member 'Totem_OnBlockTotemCosmetic::Player' has a wrong offset!");

// Function DeadByDaylight.Totem.OnCleanseTotem
// 0x0010 (0x0010 - 0x0000)
struct Totem_OnCleanseTotem final
{
public:
	class ATotem*                                 Totem;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETotemState                                   OldTotemState;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Totem_OnCleanseTotem) == 0x000008, "Wrong alignment on Totem_OnCleanseTotem");
static_assert(sizeof(Totem_OnCleanseTotem) == 0x000010, "Wrong size on Totem_OnCleanseTotem");
static_assert(offsetof(Totem_OnCleanseTotem, Totem) == 0x000000, "Member 'Totem_OnCleanseTotem::Totem' has a wrong offset!");
static_assert(offsetof(Totem_OnCleanseTotem, OldTotemState) == 0x000008, "Member 'Totem_OnCleanseTotem::OldTotemState' has a wrong offset!");

// Function DeadByDaylight.Totem.OnRep_TotemState
// 0x0001 (0x0001 - 0x0000)
struct Totem_OnRep_TotemState final
{
public:
	ETotemState                                   OldTotemState;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_OnRep_TotemState) == 0x000001, "Wrong alignment on Totem_OnRep_TotemState");
static_assert(sizeof(Totem_OnRep_TotemState) == 0x000001, "Wrong size on Totem_OnRep_TotemState");
static_assert(offsetof(Totem_OnRep_TotemState, OldTotemState) == 0x000000, "Member 'Totem_OnRep_TotemState::OldTotemState' has a wrong offset!");

// Function DeadByDaylight.Totem.OnTotemStateChanged
// 0x0002 (0x0002 - 0x0000)
struct Totem_OnTotemStateChanged final
{
public:
	ETotemState                                   OldTotemState;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETotemState                                   NewTotemState;                                     // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_OnTotemStateChanged) == 0x000001, "Wrong alignment on Totem_OnTotemStateChanged");
static_assert(sizeof(Totem_OnTotemStateChanged) == 0x000002, "Wrong size on Totem_OnTotemStateChanged");
static_assert(offsetof(Totem_OnTotemStateChanged, OldTotemState) == 0x000000, "Member 'Totem_OnTotemStateChanged::OldTotemState' has a wrong offset!");
static_assert(offsetof(Totem_OnTotemStateChanged, NewTotemState) == 0x000001, "Member 'Totem_OnTotemStateChanged::NewTotemState' has a wrong offset!");

// Function DeadByDaylight.Totem.OnUnblockTotemCosmetic
// 0x0008 (0x0008 - 0x0000)
struct Totem_OnUnblockTotemCosmetic final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_OnUnblockTotemCosmetic) == 0x000008, "Wrong alignment on Totem_OnUnblockTotemCosmetic");
static_assert(sizeof(Totem_OnUnblockTotemCosmetic) == 0x000008, "Wrong size on Totem_OnUnblockTotemCosmetic");
static_assert(offsetof(Totem_OnUnblockTotemCosmetic, Player) == 0x000000, "Member 'Totem_OnUnblockTotemCosmetic::Player' has a wrong offset!");

// Function DeadByDaylight.Totem.GetAkAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct Totem_GetAkAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetAkAudioComponent) == 0x000008, "Wrong alignment on Totem_GetAkAudioComponent");
static_assert(sizeof(Totem_GetAkAudioComponent) == 0x000008, "Wrong size on Totem_GetAkAudioComponent");
static_assert(offsetof(Totem_GetAkAudioComponent, ReturnValue) == 0x000000, "Member 'Totem_GetAkAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetBlessTotemInteraction
// 0x0008 (0x0008 - 0x0000)
struct Totem_GetBlessTotemInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetBlessTotemInteraction) == 0x000008, "Wrong alignment on Totem_GetBlessTotemInteraction");
static_assert(sizeof(Totem_GetBlessTotemInteraction) == 0x000008, "Wrong size on Totem_GetBlessTotemInteraction");
static_assert(offsetof(Totem_GetBlessTotemInteraction, ReturnValue) == 0x000000, "Member 'Totem_GetBlessTotemInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetBoonAuraRevealColor
// 0x0010 (0x0010 - 0x0000)
struct Totem_GetBoonAuraRevealColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetBoonAuraRevealColor) == 0x000004, "Wrong alignment on Totem_GetBoonAuraRevealColor");
static_assert(sizeof(Totem_GetBoonAuraRevealColor) == 0x000010, "Wrong size on Totem_GetBoonAuraRevealColor");
static_assert(offsetof(Totem_GetBoonAuraRevealColor, ReturnValue) == 0x000000, "Member 'Totem_GetBoonAuraRevealColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetBoonTotemAuraRevealRange
// 0x0004 (0x0004 - 0x0000)
struct Totem_GetBoonTotemAuraRevealRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetBoonTotemAuraRevealRange) == 0x000004, "Wrong alignment on Totem_GetBoonTotemAuraRevealRange");
static_assert(sizeof(Totem_GetBoonTotemAuraRevealRange) == 0x000004, "Wrong size on Totem_GetBoonTotemAuraRevealRange");
static_assert(offsetof(Totem_GetBoonTotemAuraRevealRange, ReturnValue) == 0x000000, "Member 'Totem_GetBoonTotemAuraRevealRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetBoonTotemBlessingRange
// 0x0004 (0x0004 - 0x0000)
struct Totem_GetBoonTotemBlessingRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetBoonTotemBlessingRange) == 0x000004, "Wrong alignment on Totem_GetBoonTotemBlessingRange");
static_assert(sizeof(Totem_GetBoonTotemBlessingRange) == 0x000004, "Wrong size on Totem_GetBoonTotemBlessingRange");
static_assert(offsetof(Totem_GetBoonTotemBlessingRange, ReturnValue) == 0x000000, "Member 'Totem_GetBoonTotemBlessingRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetCleanseTotemInteraction
// 0x0008 (0x0008 - 0x0000)
struct Totem_GetCleanseTotemInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetCleanseTotemInteraction) == 0x000008, "Wrong alignment on Totem_GetCleanseTotemInteraction");
static_assert(sizeof(Totem_GetCleanseTotemInteraction) == 0x000008, "Wrong size on Totem_GetCleanseTotemInteraction");
static_assert(offsetof(Totem_GetCleanseTotemInteraction, ReturnValue) == 0x000000, "Member 'Totem_GetCleanseTotemInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetMainInteractor
// 0x0008 (0x0008 - 0x0000)
struct Totem_GetMainInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetMainInteractor) == 0x000008, "Wrong alignment on Totem_GetMainInteractor");
static_assert(sizeof(Totem_GetMainInteractor) == 0x000008, "Wrong size on Totem_GetMainInteractor");
static_assert(offsetof(Totem_GetMainInteractor, ReturnValue) == 0x000000, "Member 'Totem_GetMainInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.GetTotemState
// 0x0001 (0x0001 - 0x0000)
struct Totem_GetTotemState final
{
public:
	ETotemState                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_GetTotemState) == 0x000001, "Wrong alignment on Totem_GetTotemState");
static_assert(sizeof(Totem_GetTotemState) == 0x000001, "Wrong size on Totem_GetTotemState");
static_assert(offsetof(Totem_GetTotemState, ReturnValue) == 0x000000, "Member 'Totem_GetTotemState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.IsBoundToPerk
// 0x0001 (0x0001 - 0x0000)
struct Totem_IsBoundToPerk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Totem_IsBoundToPerk) == 0x000001, "Wrong alignment on Totem_IsBoundToPerk");
static_assert(sizeof(Totem_IsBoundToPerk) == 0x000001, "Wrong size on Totem_IsBoundToPerk");
static_assert(offsetof(Totem_IsBoundToPerk, ReturnValue) == 0x000000, "Member 'Totem_IsBoundToPerk::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Totem.IsTotemBlockedForPlayer
// 0x0010 (0x0010 - 0x0000)
struct Totem_IsTotemBlockedForPlayer final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Totem_IsTotemBlockedForPlayer) == 0x000008, "Wrong alignment on Totem_IsTotemBlockedForPlayer");
static_assert(sizeof(Totem_IsTotemBlockedForPlayer) == 0x000010, "Wrong size on Totem_IsTotemBlockedForPlayer");
static_assert(offsetof(Totem_IsTotemBlockedForPlayer, Player) == 0x000000, "Member 'Totem_IsTotemBlockedForPlayer::Player' has a wrong offset!");
static_assert(offsetof(Totem_IsTotemBlockedForPlayer, ReturnValue) == 0x000008, "Member 'Totem_IsTotemBlockedForPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameFlowUtilities.IsCurrentlyInGame
// 0x0010 (0x0010 - 0x0000)
struct DBDGameFlowUtilities_IsCurrentlyInGame final
{
public:
	const class UDBDGameInstance*                 GameInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameFlowUtilities_IsCurrentlyInGame) == 0x000008, "Wrong alignment on DBDGameFlowUtilities_IsCurrentlyInGame");
static_assert(sizeof(DBDGameFlowUtilities_IsCurrentlyInGame) == 0x000010, "Wrong size on DBDGameFlowUtilities_IsCurrentlyInGame");
static_assert(offsetof(DBDGameFlowUtilities_IsCurrentlyInGame, GameInstance) == 0x000000, "Member 'DBDGameFlowUtilities_IsCurrentlyInGame::GameInstance' has a wrong offset!");
static_assert(offsetof(DBDGameFlowUtilities_IsCurrentlyInGame, ReturnValue) == 0x000008, "Member 'DBDGameFlowUtilities_IsCurrentlyInGame::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameFlowUtilities.TriggerUIFlowEvent
// 0x0010 (0x0010 - 0x0000)
struct DBDGameFlowUtilities_TriggerUIFlowEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIFlowEvent                                  UiFlowEvent;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceChange;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameFlowUtilities_TriggerUIFlowEvent) == 0x000008, "Wrong alignment on DBDGameFlowUtilities_TriggerUIFlowEvent");
static_assert(sizeof(DBDGameFlowUtilities_TriggerUIFlowEvent) == 0x000010, "Wrong size on DBDGameFlowUtilities_TriggerUIFlowEvent");
static_assert(offsetof(DBDGameFlowUtilities_TriggerUIFlowEvent, WorldContextObject) == 0x000000, "Member 'DBDGameFlowUtilities_TriggerUIFlowEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameFlowUtilities_TriggerUIFlowEvent, UiFlowEvent) == 0x000008, "Member 'DBDGameFlowUtilities_TriggerUIFlowEvent::UiFlowEvent' has a wrong offset!");
static_assert(offsetof(DBDGameFlowUtilities_TriggerUIFlowEvent, ForceChange) == 0x000009, "Member 'DBDGameFlowUtilities_TriggerUIFlowEvent::ForceChange' has a wrong offset!");

// Function DeadByDaylight.DBDGameFlowUtilities.TriggerWorldFlowEvent
// 0x0010 (0x0010 - 0x0000)
struct DBDGameFlowUtilities_TriggerWorldFlowEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldFlowEvent                               WorldFlowEvent;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameFlowUtilities_TriggerWorldFlowEvent) == 0x000008, "Wrong alignment on DBDGameFlowUtilities_TriggerWorldFlowEvent");
static_assert(sizeof(DBDGameFlowUtilities_TriggerWorldFlowEvent) == 0x000010, "Wrong size on DBDGameFlowUtilities_TriggerWorldFlowEvent");
static_assert(offsetof(DBDGameFlowUtilities_TriggerWorldFlowEvent, WorldContextObject) == 0x000000, "Member 'DBDGameFlowUtilities_TriggerWorldFlowEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameFlowUtilities_TriggerWorldFlowEvent, WorldFlowEvent) == 0x000008, "Member 'DBDGameFlowUtilities_TriggerWorldFlowEvent::WorldFlowEvent' has a wrong offset!");

// Function DeadByDaylight.QuestEventEvaluatorBase.OnGameEvent
// 0x0040 (0x0040 - 0x0000)
struct QuestEventEvaluatorBase_OnGameEvent final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventEvaluatorBase_OnGameEvent) == 0x000008, "Wrong alignment on QuestEventEvaluatorBase_OnGameEvent");
static_assert(sizeof(QuestEventEvaluatorBase_OnGameEvent) == 0x000040, "Wrong size on QuestEventEvaluatorBase_OnGameEvent");
static_assert(offsetof(QuestEventEvaluatorBase_OnGameEvent, GameEventType) == 0x000000, "Member 'QuestEventEvaluatorBase_OnGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(QuestEventEvaluatorBase_OnGameEvent, GameEventData) == 0x000010, "Member 'QuestEventEvaluatorBase_OnGameEvent::GameEventData' has a wrong offset!");

// Function DeadByDaylight.DBDBaseHud.DBD_ShowAnimHud
// 0x0001 (0x0001 - 0x0000)
struct DBDBaseHud_DBD_ShowAnimHud final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBaseHud_DBD_ShowAnimHud) == 0x000001, "Wrong alignment on DBDBaseHud_DBD_ShowAnimHud");
static_assert(sizeof(DBDBaseHud_DBD_ShowAnimHud) == 0x000001, "Wrong size on DBDBaseHud_DBD_ShowAnimHud");
static_assert(offsetof(DBDBaseHud_DBD_ShowAnimHud, Show) == 0x000000, "Member 'DBDBaseHud_DBD_ShowAnimHud::Show' has a wrong offset!");

// Function DeadByDaylight.DBDBaseHud.ShouldDrawAnimHud
// 0x0001 (0x0001 - 0x0000)
struct DBDBaseHud_ShouldDrawAnimHud final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDBaseHud_ShouldDrawAnimHud) == 0x000001, "Wrong alignment on DBDBaseHud_ShouldDrawAnimHud");
static_assert(sizeof(DBDBaseHud_ShouldDrawAnimHud) == 0x000001, "Wrong size on DBDBaseHud_ShouldDrawAnimHud");
static_assert(offsetof(DBDBaseHud_ShouldDrawAnimHud, ReturnValue) == 0x000000, "Member 'DBDBaseHud_ShouldDrawAnimHud::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.DrawDebugAINavigation
// 0x0001 (0x0001 - 0x0000)
struct DBDAIUtilities_DrawDebugAINavigation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIUtilities_DrawDebugAINavigation) == 0x000001, "Wrong alignment on DBDAIUtilities_DrawDebugAINavigation");
static_assert(sizeof(DBDAIUtilities_DrawDebugAINavigation) == 0x000001, "Wrong size on DBDAIUtilities_DrawDebugAINavigation");
static_assert(offsetof(DBDAIUtilities_DrawDebugAINavigation, ReturnValue) == 0x000000, "Member 'DBDAIUtilities_DrawDebugAINavigation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.DrawDebugAINavigationFilter
// 0x0001 (0x0001 - 0x0000)
struct DBDAIUtilities_DrawDebugAINavigationFilter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIUtilities_DrawDebugAINavigationFilter) == 0x000001, "Wrong alignment on DBDAIUtilities_DrawDebugAINavigationFilter");
static_assert(sizeof(DBDAIUtilities_DrawDebugAINavigationFilter) == 0x000001, "Wrong size on DBDAIUtilities_DrawDebugAINavigationFilter");
static_assert(offsetof(DBDAIUtilities_DrawDebugAINavigationFilter, ReturnValue) == 0x000000, "Member 'DBDAIUtilities_DrawDebugAINavigationFilter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.DrawDebugAIPerception
// 0x0001 (0x0001 - 0x0000)
struct DBDAIUtilities_DrawDebugAIPerception final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIUtilities_DrawDebugAIPerception) == 0x000001, "Wrong alignment on DBDAIUtilities_DrawDebugAIPerception");
static_assert(sizeof(DBDAIUtilities_DrawDebugAIPerception) == 0x000001, "Wrong size on DBDAIUtilities_DrawDebugAIPerception");
static_assert(offsetof(DBDAIUtilities_DrawDebugAIPerception, ReturnValue) == 0x000000, "Member 'DBDAIUtilities_DrawDebugAIPerception::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.FindPathWithAgentRadiusToActorSynchronously
// 0x0048 (0x0048 - 0x0000)
struct DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PathStart;                                         // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 GoalActor;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AgentRadius;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TetherDistance;                                    // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 PathfindingContext;                                // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UNavigationQueryFilter>     FilterClass;                                       // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNavigationPath*                        ReturnValue;                                       // 0x0040(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously) == 0x000008, "Wrong alignment on DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously");
static_assert(sizeof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously) == 0x000048, "Wrong size on DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, WorldContextObject) == 0x000000, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, PathStart) == 0x000008, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::PathStart' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, GoalActor) == 0x000020, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::GoalActor' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, AgentRadius) == 0x000028, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::AgentRadius' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, TetherDistance) == 0x00002C, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::TetherDistance' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, PathfindingContext) == 0x000030, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::PathfindingContext' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, FilterClass) == 0x000038, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::FilterClass' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously, ReturnValue) == 0x000040, "Member 'DBDAIUtilities_FindPathWithAgentRadiusToActorSynchronously::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIUtilities.SetCanEverAffectNavigation
// 0x0010 (0x0010 - 0x0000)
struct DBDAIUtilities_SetCanEverAffectNavigation final
{
public:
	class UActorComponent*                        Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AffectNavigation;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAIUtilities_SetCanEverAffectNavigation) == 0x000008, "Wrong alignment on DBDAIUtilities_SetCanEverAffectNavigation");
static_assert(sizeof(DBDAIUtilities_SetCanEverAffectNavigation) == 0x000010, "Wrong size on DBDAIUtilities_SetCanEverAffectNavigation");
static_assert(offsetof(DBDAIUtilities_SetCanEverAffectNavigation, Component) == 0x000000, "Member 'DBDAIUtilities_SetCanEverAffectNavigation::Component' has a wrong offset!");
static_assert(offsetof(DBDAIUtilities_SetCanEverAffectNavigation, AffectNavigation) == 0x000008, "Member 'DBDAIUtilities_SetCanEverAffectNavigation::AffectNavigation' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Authority_CancelOngoingScoreEvent
// 0x000C (0x000C - 0x0000)
struct DBDPlayerState_Authority_CancelOngoingScoreEvent final
{
public:
	struct FGameplayTag                           ScoreTypeTag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Authority_CancelOngoingScoreEvent) == 0x000004, "Wrong alignment on DBDPlayerState_Authority_CancelOngoingScoreEvent");
static_assert(sizeof(DBDPlayerState_Authority_CancelOngoingScoreEvent) == 0x00000C, "Wrong size on DBDPlayerState_Authority_CancelOngoingScoreEvent");
static_assert(offsetof(DBDPlayerState_Authority_CancelOngoingScoreEvent, ScoreTypeTag) == 0x000000, "Member 'DBDPlayerState_Authority_CancelOngoingScoreEvent::ScoreTypeTag' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Authority_EndOngoingScoreEvent
// 0x000C (0x000C - 0x0000)
struct DBDPlayerState_Authority_EndOngoingScoreEvent final
{
public:
	struct FGameplayTag                           ScoreTypeTag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Authority_EndOngoingScoreEvent) == 0x000004, "Wrong alignment on DBDPlayerState_Authority_EndOngoingScoreEvent");
static_assert(sizeof(DBDPlayerState_Authority_EndOngoingScoreEvent) == 0x00000C, "Wrong size on DBDPlayerState_Authority_EndOngoingScoreEvent");
static_assert(offsetof(DBDPlayerState_Authority_EndOngoingScoreEvent, ScoreTypeTag) == 0x000000, "Member 'DBDPlayerState_Authority_EndOngoingScoreEvent::ScoreTypeTag' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Authority_HandleScoreEvent
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayerState_Authority_HandleScoreEvent final
{
public:
	struct FGameplayTag                           ScoreTypeTag;                                      // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScoreEventData                        ScoreEventData;                                    // 0x0010(0x0018)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Authority_HandleScoreEvent) == 0x000008, "Wrong alignment on DBDPlayerState_Authority_HandleScoreEvent");
static_assert(sizeof(DBDPlayerState_Authority_HandleScoreEvent) == 0x000028, "Wrong size on DBDPlayerState_Authority_HandleScoreEvent");
static_assert(offsetof(DBDPlayerState_Authority_HandleScoreEvent, ScoreTypeTag) == 0x000000, "Member 'DBDPlayerState_Authority_HandleScoreEvent::ScoreTypeTag' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Authority_HandleScoreEvent, ScoreEventData) == 0x000010, "Member 'DBDPlayerState_Authority_HandleScoreEvent::ScoreEventData' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Authority_SetBotStateInfo
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerState_Authority_SetBotStateInfo final
{
public:
	struct FDBDBotStateInfo                       Info;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Authority_SetBotStateInfo) == 0x000008, "Wrong alignment on DBDPlayerState_Authority_SetBotStateInfo");
static_assert(sizeof(DBDPlayerState_Authority_SetBotStateInfo) == 0x000020, "Wrong size on DBDPlayerState_Authority_SetBotStateInfo");
static_assert(offsetof(DBDPlayerState_Authority_SetBotStateInfo, Info) == 0x000000, "Member 'DBDPlayerState_Authority_SetBotStateInfo::Info' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Authority_SetPlayerGameState
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayerState_Authority_SetPlayerGameState final
{
public:
	EGameState                                    NewGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEscapeHatch;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Authority_SetPlayerGameState) == 0x000001, "Wrong alignment on DBDPlayerState_Authority_SetPlayerGameState");
static_assert(sizeof(DBDPlayerState_Authority_SetPlayerGameState) == 0x000002, "Wrong size on DBDPlayerState_Authority_SetPlayerGameState");
static_assert(offsetof(DBDPlayerState_Authority_SetPlayerGameState, NewGameState) == 0x000000, "Member 'DBDPlayerState_Authority_SetPlayerGameState::NewGameState' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Authority_SetPlayerGameState, IsEscapeHatch) == 0x000001, "Member 'DBDPlayerState_Authority_SetPlayerGameState::IsEscapeHatch' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.ChangeStartingGameRole
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_ChangeStartingGameRole final
{
public:
	EPlayerRole                                   Param_GameRole;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_ChangeStartingGameRole) == 0x000001, "Wrong alignment on DBDPlayerState_ChangeStartingGameRole");
static_assert(sizeof(DBDPlayerState_ChangeStartingGameRole) == 0x000001, "Wrong size on DBDPlayerState_ChangeStartingGameRole");
static_assert(offsetof(DBDPlayerState_ChangeStartingGameRole, Param_GameRole) == 0x000000, "Member 'DBDPlayerState_ChangeStartingGameRole::Param_GameRole' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_FetchCoreRituals
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_Client_FetchCoreRituals final
{
public:
	bool                                          HasClaimableRitual;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_FetchCoreRituals) == 0x000001, "Wrong alignment on DBDPlayerState_Client_FetchCoreRituals");
static_assert(sizeof(DBDPlayerState_Client_FetchCoreRituals) == 0x000001, "Wrong size on DBDPlayerState_Client_FetchCoreRituals");
static_assert(offsetof(DBDPlayerState_Client_FetchCoreRituals, HasClaimableRitual) == 0x000000, "Member 'DBDPlayerState_Client_FetchCoreRituals::HasClaimableRitual' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_FireQuestRepetitionValueChangeEvent
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_Client_FireQuestRepetitionValueChangeEvent final
{
public:
	int32                                         Repetition;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QuestEventId;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_FireQuestRepetitionValueChangeEvent) == 0x000008, "Wrong alignment on DBDPlayerState_Client_FireQuestRepetitionValueChangeEvent");
static_assert(sizeof(DBDPlayerState_Client_FireQuestRepetitionValueChangeEvent) == 0x000018, "Wrong size on DBDPlayerState_Client_FireQuestRepetitionValueChangeEvent");
static_assert(offsetof(DBDPlayerState_Client_FireQuestRepetitionValueChangeEvent, Repetition) == 0x000000, "Member 'DBDPlayerState_Client_FireQuestRepetitionValueChangeEvent::Repetition' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_FireQuestRepetitionValueChangeEvent, QuestEventId) == 0x000008, "Member 'DBDPlayerState_Client_FireQuestRepetitionValueChangeEvent::QuestEventId' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_HandleEndOfMatch
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerState_Client_HandleEndOfMatch final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEndOfMatchRPCData                     Response;                                          // 0x0008(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_HandleEndOfMatch) == 0x000008, "Wrong alignment on DBDPlayerState_Client_HandleEndOfMatch");
static_assert(sizeof(DBDPlayerState_Client_HandleEndOfMatch) == 0x000020, "Wrong size on DBDPlayerState_Client_HandleEndOfMatch");
static_assert(offsetof(DBDPlayerState_Client_HandleEndOfMatch, Success) == 0x000000, "Member 'DBDPlayerState_Client_HandleEndOfMatch::Success' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_HandleEndOfMatch, Response) == 0x000008, "Member 'DBDPlayerState_Client_HandleEndOfMatch::Response' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_RemotelyDispatchGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDPlayerState_Client_RemotelyDispatchGameEvent final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_RemotelyDispatchGameEvent) == 0x000008, "Wrong alignment on DBDPlayerState_Client_RemotelyDispatchGameEvent");
static_assert(sizeof(DBDPlayerState_Client_RemotelyDispatchGameEvent) == 0x000040, "Wrong size on DBDPlayerState_Client_RemotelyDispatchGameEvent");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEvent, GameEventType) == 0x000000, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEvent, GameEventData) == 0x000010, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEvent::GameEventData' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_RemotelyDispatchGameEventWithScore
// 0x0050 (0x0050 - 0x0000)
struct DBDPlayerState_Client_RemotelyDispatchGameEventWithScore final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FAwardedScore                          AwardedScore;                                      // 0x0040(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore) == 0x000008, "Wrong alignment on DBDPlayerState_Client_RemotelyDispatchGameEventWithScore");
static_assert(sizeof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore) == 0x000050, "Wrong size on DBDPlayerState_Client_RemotelyDispatchGameEventWithScore");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore, GameEventType) == 0x000000, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEventWithScore::GameEventType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore, GameEventData) == 0x000010, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEventWithScore::GameEventData' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_RemotelyDispatchGameEventWithScore, AwardedScore) == 0x000040, "Member 'DBDPlayerState_Client_RemotelyDispatchGameEventWithScore::AwardedScore' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_RemoveElementFromInventory
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerState_Client_RemoveElementFromInventory final
{
public:
	class FName                                   ToRemove;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpdateLoadout;                                     // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Client_RemoveElementFromInventory) == 0x000004, "Wrong alignment on DBDPlayerState_Client_RemoveElementFromInventory");
static_assert(sizeof(DBDPlayerState_Client_RemoveElementFromInventory) == 0x000010, "Wrong size on DBDPlayerState_Client_RemoveElementFromInventory");
static_assert(offsetof(DBDPlayerState_Client_RemoveElementFromInventory, ToRemove) == 0x000000, "Member 'DBDPlayerState_Client_RemoveElementFromInventory::ToRemove' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_RemoveElementFromInventory, UpdateLoadout) == 0x00000C, "Member 'DBDPlayerState_Client_RemoveElementFromInventory::UpdateLoadout' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_SetDSKickedOutReason
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerState_Client_SetDSKickedOutReason final
{
public:
	uint32                                        Reason;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_SetDSKickedOutReason) == 0x000004, "Wrong alignment on DBDPlayerState_Client_SetDSKickedOutReason");
static_assert(sizeof(DBDPlayerState_Client_SetDSKickedOutReason) == 0x000004, "Wrong size on DBDPlayerState_Client_SetDSKickedOutReason");
static_assert(offsetof(DBDPlayerState_Client_SetDSKickedOutReason, Reason) == 0x000000, "Member 'DBDPlayerState_Client_SetDSKickedOutReason::Reason' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_SetGameRole
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_Client_SetGameRole final
{
public:
	EPlayerRole                                   NewRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_SetGameRole) == 0x000001, "Wrong alignment on DBDPlayerState_Client_SetGameRole");
static_assert(sizeof(DBDPlayerState_Client_SetGameRole) == 0x000001, "Wrong size on DBDPlayerState_Client_SetGameRole");
static_assert(offsetof(DBDPlayerState_Client_SetGameRole, NewRole) == 0x000000, "Member 'DBDPlayerState_Client_SetGameRole::NewRole' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_SetHasActiveArchiveDSQuestUpdate
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_Client_SetHasActiveArchiveDSQuestUpdate final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Client_SetHasActiveArchiveDSQuestUpdate) == 0x000001, "Wrong alignment on DBDPlayerState_Client_SetHasActiveArchiveDSQuestUpdate");
static_assert(sizeof(DBDPlayerState_Client_SetHasActiveArchiveDSQuestUpdate) == 0x000001, "Wrong size on DBDPlayerState_Client_SetHasActiveArchiveDSQuestUpdate");
static_assert(offsetof(DBDPlayerState_Client_SetHasActiveArchiveDSQuestUpdate, IsEnabled) == 0x000000, "Member 'DBDPlayerState_Client_SetHasActiveArchiveDSQuestUpdate::IsEnabled' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Client_UpdateWallet
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_Client_UpdateWallet final
{
public:
	class FString                                 CurrencyId;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Client_UpdateWallet) == 0x000008, "Wrong alignment on DBDPlayerState_Client_UpdateWallet");
static_assert(sizeof(DBDPlayerState_Client_UpdateWallet) == 0x000018, "Wrong size on DBDPlayerState_Client_UpdateWallet");
static_assert(offsetof(DBDPlayerState_Client_UpdateWallet, CurrencyId) == 0x000000, "Member 'DBDPlayerState_Client_UpdateWallet::CurrencyId' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Client_UpdateWallet, Amount) == 0x000010, "Member 'DBDPlayerState_Client_UpdateWallet::Amount' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.FireActiveStatusEffectEvent
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_FireActiveStatusEffectEvent final
{
public:
	class FName                                   StatusEffectId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IconFilePathIndex;                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelToDisplay;                                    // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_FireActiveStatusEffectEvent) == 0x000004, "Wrong alignment on DBDPlayerState_FireActiveStatusEffectEvent");
static_assert(sizeof(DBDPlayerState_FireActiveStatusEffectEvent) == 0x000018, "Wrong size on DBDPlayerState_FireActiveStatusEffectEvent");
static_assert(offsetof(DBDPlayerState_FireActiveStatusEffectEvent, StatusEffectId) == 0x000000, "Member 'DBDPlayerState_FireActiveStatusEffectEvent::StatusEffectId' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusEffectEvent, Percentage) == 0x00000C, "Member 'DBDPlayerState_FireActiveStatusEffectEvent::Percentage' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusEffectEvent, IconFilePathIndex) == 0x000010, "Member 'DBDPlayerState_FireActiveStatusEffectEvent::IconFilePathIndex' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusEffectEvent, LevelToDisplay) == 0x000014, "Member 'DBDPlayerState_FireActiveStatusEffectEvent::LevelToDisplay' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.FireActiveStatusViewEvent
// 0x0044 (0x0044 - 0x0000)
struct DBDPlayerState_FireActiveStatusViewEvent final
{
public:
	class FName                                   StatusViewID;                                      // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   UniqueSourceID;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStatusViewSource                      StatusViewSource;                                  // 0x0018(0x002C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_FireActiveStatusViewEvent) == 0x000004, "Wrong alignment on DBDPlayerState_FireActiveStatusViewEvent");
static_assert(sizeof(DBDPlayerState_FireActiveStatusViewEvent) == 0x000044, "Wrong size on DBDPlayerState_FireActiveStatusViewEvent");
static_assert(offsetof(DBDPlayerState_FireActiveStatusViewEvent, StatusViewID) == 0x000000, "Member 'DBDPlayerState_FireActiveStatusViewEvent::StatusViewID' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusViewEvent, UniqueSourceID) == 0x00000C, "Member 'DBDPlayerState_FireActiveStatusViewEvent::UniqueSourceID' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireActiveStatusViewEvent, StatusViewSource) == 0x000018, "Member 'DBDPlayerState_FireActiveStatusViewEvent::StatusViewSource' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.FireScoreEvent
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerState_FireScoreEvent final
{
public:
	EDBDScoreTypes                                ScoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentToAward;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_FireScoreEvent) == 0x000004, "Wrong alignment on DBDPlayerState_FireScoreEvent");
static_assert(sizeof(DBDPlayerState_FireScoreEvent) == 0x000008, "Wrong size on DBDPlayerState_FireScoreEvent");
static_assert(offsetof(DBDPlayerState_FireScoreEvent, ScoreType) == 0x000000, "Member 'DBDPlayerState_FireScoreEvent::ScoreType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_FireScoreEvent, PercentToAward) == 0x000004, "Member 'DBDPlayerState_FireScoreEvent::PercentToAward' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Multicast_FireGameplayEvent
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_Multicast_FireGameplayEvent final
{
public:
	EDBDScoreTypes                                PlayerGameplayEventType;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Effector;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Multicast_FireGameplayEvent) == 0x000008, "Wrong alignment on DBDPlayerState_Multicast_FireGameplayEvent");
static_assert(sizeof(DBDPlayerState_Multicast_FireGameplayEvent) == 0x000018, "Wrong size on DBDPlayerState_Multicast_FireGameplayEvent");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEvent, PlayerGameplayEventType) == 0x000000, "Member 'DBDPlayerState_Multicast_FireGameplayEvent::PlayerGameplayEventType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEvent, Amount) == 0x000004, "Member 'DBDPlayerState_Multicast_FireGameplayEvent::Amount' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEvent, Effector) == 0x000008, "Member 'DBDPlayerState_Multicast_FireGameplayEvent::Effector' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEvent, Target) == 0x000010, "Member 'DBDPlayerState_Multicast_FireGameplayEvent::Target' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Multicast_FireGameplayEventWithScore
// 0x0028 (0x0028 - 0x0000)
struct DBDPlayerState_Multicast_FireGameplayEventWithScore final
{
public:
	EDBDScoreTypes                                PlayerGameplayEventType;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Effector;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAwardedScore                          AwardedScore;                                      // 0x0018(0x0010)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Multicast_FireGameplayEventWithScore) == 0x000008, "Wrong alignment on DBDPlayerState_Multicast_FireGameplayEventWithScore");
static_assert(sizeof(DBDPlayerState_Multicast_FireGameplayEventWithScore) == 0x000028, "Wrong size on DBDPlayerState_Multicast_FireGameplayEventWithScore");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, PlayerGameplayEventType) == 0x000000, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::PlayerGameplayEventType' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, Amount) == 0x000004, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::Amount' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, Effector) == 0x000008, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::Effector' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, Target) == 0x000010, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::Target' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_FireGameplayEventWithScore, AwardedScore) == 0x000018, "Member 'DBDPlayerState_Multicast_FireGameplayEventWithScore::AwardedScore' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Multicast_SetAsDisconnected
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_Multicast_SetAsDisconnected final
{
public:
	EBotReplacementState                          botReplacementState;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Multicast_SetAsDisconnected) == 0x000001, "Wrong alignment on DBDPlayerState_Multicast_SetAsDisconnected");
static_assert(sizeof(DBDPlayerState_Multicast_SetAsDisconnected) == 0x000001, "Wrong size on DBDPlayerState_Multicast_SetAsDisconnected");
static_assert(offsetof(DBDPlayerState_Multicast_SetAsDisconnected, botReplacementState) == 0x000000, "Member 'DBDPlayerState_Multicast_SetAsDisconnected::botReplacementState' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Multicast_SetAsLeftMatch
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_Multicast_SetAsLeftMatch final
{
public:
	EBotReplacementState                          botReplacementState;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Multicast_SetAsLeftMatch) == 0x000001, "Wrong alignment on DBDPlayerState_Multicast_SetAsLeftMatch");
static_assert(sizeof(DBDPlayerState_Multicast_SetAsLeftMatch) == 0x000001, "Wrong size on DBDPlayerState_Multicast_SetAsLeftMatch");
static_assert(offsetof(DBDPlayerState_Multicast_SetAsLeftMatch, botReplacementState) == 0x000000, "Member 'DBDPlayerState_Multicast_SetAsLeftMatch::botReplacementState' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Multicast_SetPlayerGameState
// 0x0002 (0x0002 - 0x0000)
struct DBDPlayerState_Multicast_SetPlayerGameState final
{
public:
	EGameState                                    NewGameState;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEscapeHatch;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Multicast_SetPlayerGameState) == 0x000001, "Wrong alignment on DBDPlayerState_Multicast_SetPlayerGameState");
static_assert(sizeof(DBDPlayerState_Multicast_SetPlayerGameState) == 0x000002, "Wrong size on DBDPlayerState_Multicast_SetPlayerGameState");
static_assert(offsetof(DBDPlayerState_Multicast_SetPlayerGameState, NewGameState) == 0x000000, "Member 'DBDPlayerState_Multicast_SetPlayerGameState::NewGameState' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Multicast_SetPlayerGameState, IsEscapeHatch) == 0x000001, "Member 'DBDPlayerState_Multicast_SetPlayerGameState::IsEscapeHatch' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Server_CheatSelectKiller
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerState_Server_CheatSelectKiller final
{
public:
	int32                                         SlasherIndex;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Server_CheatSelectKiller) == 0x000004, "Wrong alignment on DBDPlayerState_Server_CheatSelectKiller");
static_assert(sizeof(DBDPlayerState_Server_CheatSelectKiller) == 0x000004, "Wrong size on DBDPlayerState_Server_CheatSelectKiller");
static_assert(offsetof(DBDPlayerState_Server_CheatSelectKiller, SlasherIndex) == 0x000000, "Member 'DBDPlayerState_Server_CheatSelectKiller::SlasherIndex' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Server_CheatSelectSurvivor
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerState_Server_CheatSelectSurvivor final
{
public:
	int32                                         CamperIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Server_CheatSelectSurvivor) == 0x000004, "Wrong alignment on DBDPlayerState_Server_CheatSelectSurvivor");
static_assert(sizeof(DBDPlayerState_Server_CheatSelectSurvivor) == 0x000004, "Wrong size on DBDPlayerState_Server_CheatSelectSurvivor");
static_assert(offsetof(DBDPlayerState_Server_CheatSelectSurvivor, CamperIndex) == 0x000000, "Member 'DBDPlayerState_Server_CheatSelectSurvivor::CamperIndex' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.Server_SetQuestRepetitionByClientValue
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_Server_SetQuestRepetitionByClientValue final
{
public:
	int32                                         Repetition;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 QuestEventId;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Server_SetQuestRepetitionByClientValue) == 0x000008, "Wrong alignment on DBDPlayerState_Server_SetQuestRepetitionByClientValue");
static_assert(sizeof(DBDPlayerState_Server_SetQuestRepetitionByClientValue) == 0x000018, "Wrong size on DBDPlayerState_Server_SetQuestRepetitionByClientValue");
static_assert(offsetof(DBDPlayerState_Server_SetQuestRepetitionByClientValue, Repetition) == 0x000000, "Member 'DBDPlayerState_Server_SetQuestRepetitionByClientValue::Repetition' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Server_SetQuestRepetitionByClientValue, QuestEventId) == 0x000008, "Member 'DBDPlayerState_Server_SetQuestRepetitionByClientValue::QuestEventId' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.GetBotStateInfo
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerState_GetBotStateInfo final
{
public:
	struct FDBDBotStateInfo                       ReturnValue;                                       // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_GetBotStateInfo) == 0x000008, "Wrong alignment on DBDPlayerState_GetBotStateInfo");
static_assert(sizeof(DBDPlayerState_GetBotStateInfo) == 0x000020, "Wrong size on DBDPlayerState_GetBotStateInfo");
static_assert(offsetof(DBDPlayerState_GetBotStateInfo, ReturnValue) == 0x000000, "Member 'DBDPlayerState_GetBotStateInfo::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.GetGameplayNotificationManager
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerState_GetGameplayNotificationManager final
{
public:
	class UGameplayNotificationManager*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_GetGameplayNotificationManager) == 0x000008, "Wrong alignment on DBDPlayerState_GetGameplayNotificationManager");
static_assert(sizeof(DBDPlayerState_GetGameplayNotificationManager) == 0x000008, "Wrong size on DBDPlayerState_GetGameplayNotificationManager");
static_assert(offsetof(DBDPlayerState_GetGameplayNotificationManager, ReturnValue) == 0x000000, "Member 'DBDPlayerState_GetGameplayNotificationManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.GetGameRole
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_GetGameRole final
{
public:
	EPlayerRole                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_GetGameRole) == 0x000001, "Wrong alignment on DBDPlayerState_GetGameRole");
static_assert(sizeof(DBDPlayerState_GetGameRole) == 0x000001, "Wrong size on DBDPlayerState_GetGameRole");
static_assert(offsetof(DBDPlayerState_GetGameRole, ReturnValue) == 0x000000, "Member 'DBDPlayerState_GetGameRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.GetPlayerGameState
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_GetPlayerGameState final
{
public:
	EGameState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_GetPlayerGameState) == 0x000001, "Wrong alignment on DBDPlayerState_GetPlayerGameState");
static_assert(sizeof(DBDPlayerState_GetPlayerGameState) == 0x000001, "Wrong size on DBDPlayerState_GetPlayerGameState");
static_assert(offsetof(DBDPlayerState_GetPlayerGameState, ReturnValue) == 0x000000, "Member 'DBDPlayerState_GetPlayerGameState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.HasEscaped
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_HasEscaped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_HasEscaped) == 0x000001, "Wrong alignment on DBDPlayerState_HasEscaped");
static_assert(sizeof(DBDPlayerState_HasEscaped) == 0x000001, "Wrong size on DBDPlayerState_HasEscaped");
static_assert(offsetof(DBDPlayerState_HasEscaped, ReturnValue) == 0x000000, "Member 'DBDPlayerState_HasEscaped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.IsInFinishedPlayingState
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_IsInFinishedPlayingState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_IsInFinishedPlayingState) == 0x000001, "Wrong alignment on DBDPlayerState_IsInFinishedPlayingState");
static_assert(sizeof(DBDPlayerState_IsInFinishedPlayingState) == 0x000001, "Wrong size on DBDPlayerState_IsInFinishedPlayingState");
static_assert(offsetof(DBDPlayerState_IsInFinishedPlayingState, ReturnValue) == 0x000000, "Member 'DBDPlayerState_IsInFinishedPlayingState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState.IsReplacementBot
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerState_IsReplacementBot final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_IsReplacementBot) == 0x000001, "Wrong alignment on DBDPlayerState_IsReplacementBot");
static_assert(sizeof(DBDPlayerState_IsReplacementBot) == 0x000001, "Wrong size on DBDPlayerState_IsReplacementBot");
static_assert(offsetof(DBDPlayerState_IsReplacementBot, ReturnValue) == 0x000000, "Member 'DBDPlayerState_IsReplacementBot::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Client_ChangeCharacterClass
// 0x0020 (0x0020 - 0x0000)
struct DBDPlayerState_Menu_Client_ChangeCharacterClass final
{
public:
	class FName                                   CharacterClass;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreviousClass;                                     // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterId;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassChangeAttempt;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Menu_Client_ChangeCharacterClass) == 0x000004, "Wrong alignment on DBDPlayerState_Menu_Client_ChangeCharacterClass");
static_assert(sizeof(DBDPlayerState_Menu_Client_ChangeCharacterClass) == 0x000020, "Wrong size on DBDPlayerState_Menu_Client_ChangeCharacterClass");
static_assert(offsetof(DBDPlayerState_Menu_Client_ChangeCharacterClass, CharacterClass) == 0x000000, "Member 'DBDPlayerState_Menu_Client_ChangeCharacterClass::CharacterClass' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Client_ChangeCharacterClass, PreviousClass) == 0x00000C, "Member 'DBDPlayerState_Menu_Client_ChangeCharacterClass::PreviousClass' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Client_ChangeCharacterClass, CharacterId) == 0x000018, "Member 'DBDPlayerState_Menu_Client_ChangeCharacterClass::CharacterId' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Client_ChangeCharacterClass, ClassChangeAttempt) == 0x00001C, "Member 'DBDPlayerState_Menu_Client_ChangeCharacterClass::ClassChangeAttempt' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Multicast_SetSelectedCharacterCustomization
// 0x0040 (0x0040 - 0x0000)
struct DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization final
{
public:
	EPlayerRole                                   ForRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEquippedPlayerCustomization           Customization;                                     // 0x0008(0x0038)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization) == 0x000008, "Wrong alignment on DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization");
static_assert(sizeof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization) == 0x000040, "Wrong size on DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization, ForRole) == 0x000000, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization::ForRole' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization, ID) == 0x000004, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization::ID' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization, Customization) == 0x000008, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterCustomization::Customization' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Multicast_SetSelectedCharacterId
// 0x000C (0x000C - 0x0000)
struct DBDPlayerState_Menu_Multicast_SetSelectedCharacterId final
{
public:
	EPlayerRole                                   ForRole;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpdateDisplayData;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId) == 0x000004, "Wrong alignment on DBDPlayerState_Menu_Multicast_SetSelectedCharacterId");
static_assert(sizeof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId) == 0x00000C, "Wrong size on DBDPlayerState_Menu_Multicast_SetSelectedCharacterId");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId, ForRole) == 0x000000, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterId::ForRole' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId, ID) == 0x000004, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterId::ID' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Multicast_SetSelectedCharacterId, UpdateDisplayData) == 0x000008, "Member 'DBDPlayerState_Menu_Multicast_SetSelectedCharacterId::UpdateDisplayData' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Server_SetCharacterClass
// 0x0024 (0x0024 - 0x0000)
struct DBDPlayerState_Menu_Server_SetCharacterClass final
{
public:
	class FName                                   CharacterClass;                                    // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreviousClass;                                     // 0x000C(0x000C)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterId;                                       // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClassChangeAttempt;                                // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallOnRep;                                         // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Menu_Server_SetCharacterClass) == 0x000004, "Wrong alignment on DBDPlayerState_Menu_Server_SetCharacterClass");
static_assert(sizeof(DBDPlayerState_Menu_Server_SetCharacterClass) == 0x000024, "Wrong size on DBDPlayerState_Menu_Server_SetCharacterClass");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetCharacterClass, CharacterClass) == 0x000000, "Member 'DBDPlayerState_Menu_Server_SetCharacterClass::CharacterClass' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetCharacterClass, PreviousClass) == 0x00000C, "Member 'DBDPlayerState_Menu_Server_SetCharacterClass::PreviousClass' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetCharacterClass, CharacterId) == 0x000018, "Member 'DBDPlayerState_Menu_Server_SetCharacterClass::CharacterId' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetCharacterClass, ClassChangeAttempt) == 0x00001C, "Member 'DBDPlayerState_Menu_Server_SetCharacterClass::ClassChangeAttempt' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetCharacterClass, CallOnRep) == 0x000020, "Member 'DBDPlayerState_Menu_Server_SetCharacterClass::CallOnRep' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Server_SetEquipment
// 0x0014 (0x0014 - 0x0000)
struct DBDPlayerState_Menu_Server_SetEquipment final
{
public:
	ELoadoutSlot                                  Slot;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ItemId;                                            // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CallOnRep;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Menu_Server_SetEquipment) == 0x000004, "Wrong alignment on DBDPlayerState_Menu_Server_SetEquipment");
static_assert(sizeof(DBDPlayerState_Menu_Server_SetEquipment) == 0x000014, "Wrong size on DBDPlayerState_Menu_Server_SetEquipment");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipment, Slot) == 0x000000, "Member 'DBDPlayerState_Menu_Server_SetEquipment::Slot' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipment, ItemId) == 0x000004, "Member 'DBDPlayerState_Menu_Server_SetEquipment::ItemId' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipment, CallOnRep) == 0x000010, "Member 'DBDPlayerState_Menu_Server_SetEquipment::CallOnRep' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Server_SetEquipmentAddons
// 0x0018 (0x0018 - 0x0000)
struct DBDPlayerState_Menu_Server_SetEquipmentAddons final
{
public:
	TArray<class FName>                           AddonItemIds;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          CallOnRep;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Menu_Server_SetEquipmentAddons) == 0x000008, "Wrong alignment on DBDPlayerState_Menu_Server_SetEquipmentAddons");
static_assert(sizeof(DBDPlayerState_Menu_Server_SetEquipmentAddons) == 0x000018, "Wrong size on DBDPlayerState_Menu_Server_SetEquipmentAddons");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipmentAddons, AddonItemIds) == 0x000000, "Member 'DBDPlayerState_Menu_Server_SetEquipmentAddons::AddonItemIds' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetEquipmentAddons, CallOnRep) == 0x000010, "Member 'DBDPlayerState_Menu_Server_SetEquipmentAddons::CallOnRep' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerState_Menu.Server_SetSelectedCharacterId
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerState_Menu_Server_SetSelectedCharacterId final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UpdateDisplayData;                                 // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerState_Menu_Server_SetSelectedCharacterId) == 0x000004, "Wrong alignment on DBDPlayerState_Menu_Server_SetSelectedCharacterId");
static_assert(sizeof(DBDPlayerState_Menu_Server_SetSelectedCharacterId) == 0x000008, "Wrong size on DBDPlayerState_Menu_Server_SetSelectedCharacterId");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetSelectedCharacterId, ID) == 0x000000, "Member 'DBDPlayerState_Menu_Server_SetSelectedCharacterId::ID' has a wrong offset!");
static_assert(offsetof(DBDPlayerState_Menu_Server_SetSelectedCharacterId, UpdateDisplayData) == 0x000004, "Member 'DBDPlayerState_Menu_Server_SetSelectedCharacterId::UpdateDisplayData' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierCondition.SetOwningGameplayModifier
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierCondition_SetOwningGameplayModifier final
{
public:
	class UGameplayModifierContainer*             OwningGameplayModifier;                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierCondition_SetOwningGameplayModifier) == 0x000008, "Wrong alignment on GameplayModifierCondition_SetOwningGameplayModifier");
static_assert(sizeof(GameplayModifierCondition_SetOwningGameplayModifier) == 0x000008, "Wrong size on GameplayModifierCondition_SetOwningGameplayModifier");
static_assert(offsetof(GameplayModifierCondition_SetOwningGameplayModifier, OwningGameplayModifier) == 0x000000, "Member 'GameplayModifierCondition_SetOwningGameplayModifier::OwningGameplayModifier' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierCondition.GetOwningGameplayModifier
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierCondition_GetOwningGameplayModifier final
{
public:
	class UGameplayModifierContainer*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierCondition_GetOwningGameplayModifier) == 0x000008, "Wrong alignment on GameplayModifierCondition_GetOwningGameplayModifier");
static_assert(sizeof(GameplayModifierCondition_GetOwningGameplayModifier) == 0x000008, "Wrong size on GameplayModifierCondition_GetOwningGameplayModifier");
static_assert(offsetof(GameplayModifierCondition_GetOwningGameplayModifier, ReturnValue) == 0x000000, "Member 'GameplayModifierCondition_GetOwningGameplayModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierCondition.GetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierCondition_GetOwningPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierCondition_GetOwningPlayer) == 0x000008, "Wrong alignment on GameplayModifierCondition_GetOwningPlayer");
static_assert(sizeof(GameplayModifierCondition_GetOwningPlayer) == 0x000008, "Wrong size on GameplayModifierCondition_GetOwningPlayer");
static_assert(offsetof(GameplayModifierCondition_GetOwningPlayer, ReturnValue) == 0x000000, "Member 'GameplayModifierCondition_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierCondition.IsApplicable
// 0x0001 (0x0001 - 0x0000)
struct GameplayModifierCondition_IsApplicable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierCondition_IsApplicable) == 0x000001, "Wrong alignment on GameplayModifierCondition_IsApplicable");
static_assert(sizeof(GameplayModifierCondition_IsApplicable) == 0x000001, "Wrong size on GameplayModifierCondition_IsApplicable");
static_assert(offsetof(GameplayModifierCondition_IsApplicable, ReturnValue) == 0x000000, "Member 'GameplayModifierCondition_IsApplicable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AISense_UnclearHearing.ReportUnclearNoiseEvent
// 0x0040 (0x0040 - 0x0000)
struct AISense_UnclearHearing_ReportUnclearNoiseEvent final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NoiseLocation;                                     // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Loudness;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0034(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISense_UnclearHearing_ReportUnclearNoiseEvent) == 0x000008, "Wrong alignment on AISense_UnclearHearing_ReportUnclearNoiseEvent");
static_assert(sizeof(AISense_UnclearHearing_ReportUnclearNoiseEvent) == 0x000040, "Wrong size on AISense_UnclearHearing_ReportUnclearNoiseEvent");
static_assert(offsetof(AISense_UnclearHearing_ReportUnclearNoiseEvent, WorldContextObject) == 0x000000, "Member 'AISense_UnclearHearing_ReportUnclearNoiseEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AISense_UnclearHearing_ReportUnclearNoiseEvent, NoiseLocation) == 0x000008, "Member 'AISense_UnclearHearing_ReportUnclearNoiseEvent::NoiseLocation' has a wrong offset!");
static_assert(offsetof(AISense_UnclearHearing_ReportUnclearNoiseEvent, Loudness) == 0x000020, "Member 'AISense_UnclearHearing_ReportUnclearNoiseEvent::Loudness' has a wrong offset!");
static_assert(offsetof(AISense_UnclearHearing_ReportUnclearNoiseEvent, Instigator) == 0x000028, "Member 'AISense_UnclearHearing_ReportUnclearNoiseEvent::Instigator' has a wrong offset!");
static_assert(offsetof(AISense_UnclearHearing_ReportUnclearNoiseEvent, MaxRange) == 0x000030, "Member 'AISense_UnclearHearing_ReportUnclearNoiseEvent::MaxRange' has a wrong offset!");
static_assert(offsetof(AISense_UnclearHearing_ReportUnclearNoiseEvent, Tag) == 0x000034, "Member 'AISense_UnclearHearing_ReportUnclearNoiseEvent::Tag' has a wrong offset!");

// Function DeadByDaylight.AnimationPreview.OnFadeOutForCompletionComplete
// 0x0001 (0x0001 - 0x0000)
struct AnimationPreview_OnFadeOutForCompletionComplete final
{
public:
	bool                                          Succeeded;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationPreview_OnFadeOutForCompletionComplete) == 0x000001, "Wrong alignment on AnimationPreview_OnFadeOutForCompletionComplete");
static_assert(sizeof(AnimationPreview_OnFadeOutForCompletionComplete) == 0x000001, "Wrong size on AnimationPreview_OnFadeOutForCompletionComplete");
static_assert(offsetof(AnimationPreview_OnFadeOutForCompletionComplete, Succeeded) == 0x000000, "Member 'AnimationPreview_OnFadeOutForCompletionComplete::Succeeded' has a wrong offset!");

// Function DeadByDaylight.InteractionAnimationPreview.OnInteractionFinished
// 0x0010 (0x0010 - 0x0000)
struct InteractionAnimationPreview_OnInteractionFinished final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DidInteractionStart;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionAnimationPreview_OnInteractionFinished) == 0x000008, "Wrong alignment on InteractionAnimationPreview_OnInteractionFinished");
static_assert(sizeof(InteractionAnimationPreview_OnInteractionFinished) == 0x000010, "Wrong size on InteractionAnimationPreview_OnInteractionFinished");
static_assert(offsetof(InteractionAnimationPreview_OnInteractionFinished, Player) == 0x000000, "Member 'InteractionAnimationPreview_OnInteractionFinished::Player' has a wrong offset!");
static_assert(offsetof(InteractionAnimationPreview_OnInteractionFinished, DidInteractionStart) == 0x000008, "Member 'InteractionAnimationPreview_OnInteractionFinished::DidInteractionStart' has a wrong offset!");

// Function DeadByDaylight.MoriAnimationPreview.OnAudioEventFinished
// 0x0010 (0x0010 - 0x0000)
struct MoriAnimationPreview_OnAudioEventFinished final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoriAnimationPreview_OnAudioEventFinished) == 0x000008, "Wrong alignment on MoriAnimationPreview_OnAudioEventFinished");
static_assert(sizeof(MoriAnimationPreview_OnAudioEventFinished) == 0x000010, "Wrong size on MoriAnimationPreview_OnAudioEventFinished");
static_assert(offsetof(MoriAnimationPreview_OnAudioEventFinished, CallbackType) == 0x000000, "Member 'MoriAnimationPreview_OnAudioEventFinished::CallbackType' has a wrong offset!");
static_assert(offsetof(MoriAnimationPreview_OnAudioEventFinished, CallbackInfo) == 0x000008, "Member 'MoriAnimationPreview_OnAudioEventFinished::CallbackInfo' has a wrong offset!");

// Function DeadByDaylight.MoriAnimationPreview.OnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct MoriAnimationPreview_OnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MoriAnimationPreview_OnMontageStarted) == 0x000008, "Wrong alignment on MoriAnimationPreview_OnMontageStarted");
static_assert(sizeof(MoriAnimationPreview_OnMontageStarted) == 0x000028, "Wrong size on MoriAnimationPreview_OnMontageStarted");
static_assert(offsetof(MoriAnimationPreview_OnMontageStarted, AnimMontageID) == 0x000000, "Member 'MoriAnimationPreview_OnMontageStarted::AnimMontageID' has a wrong offset!");
static_assert(offsetof(MoriAnimationPreview_OnMontageStarted, PlayRate) == 0x000020, "Member 'MoriAnimationPreview_OnMontageStarted::PlayRate' has a wrong offset!");

// Function DeadByDaylight.Tile.OnRep_Initialized
// 0x0001 (0x0001 - 0x0000)
struct Tile_OnRep_Initialized final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tile_OnRep_Initialized) == 0x000001, "Wrong alignment on Tile_OnRep_Initialized");
static_assert(sizeof(Tile_OnRep_Initialized) == 0x000001, "Wrong size on Tile_OnRep_Initialized");
static_assert(offsetof(Tile_OnRep_Initialized, OldValue) == 0x000000, "Member 'Tile_OnRep_Initialized::OldValue' has a wrong offset!");

// Function DeadByDaylight.Tile.OnSetSpawnObject
// 0x0010 (0x0010 - 0x0000)
struct Tile_OnSetSpawnObject final
{
public:
	class UTileSpawnPoint*                        TileSpawnPoint;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SpawnedObject;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tile_OnSetSpawnObject) == 0x000008, "Wrong alignment on Tile_OnSetSpawnObject");
static_assert(sizeof(Tile_OnSetSpawnObject) == 0x000010, "Wrong size on Tile_OnSetSpawnObject");
static_assert(offsetof(Tile_OnSetSpawnObject, TileSpawnPoint) == 0x000000, "Member 'Tile_OnSetSpawnObject::TileSpawnPoint' has a wrong offset!");
static_assert(offsetof(Tile_OnSetSpawnObject, SpawnedObject) == 0x000008, "Member 'Tile_OnSetSpawnObject::SpawnedObject' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.AddDangerPredictionObject
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_AddDangerPredictionObject final
{
public:
	class UDBDDangerPredictionComponent*          ToAdd;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_AddDangerPredictionObject) == 0x000008, "Wrong alignment on DBDGameState_AddDangerPredictionObject");
static_assert(sizeof(DBDGameState_AddDangerPredictionObject) == 0x000008, "Wrong size on DBDGameState_AddDangerPredictionObject");
static_assert(offsetof(DBDGameState_AddDangerPredictionObject, ToAdd) == 0x000000, "Member 'DBDGameState_AddDangerPredictionObject::ToAdd' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.AddTrap
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_AddTrap final
{
public:
	class AInteractable*                          ToAdd;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_AddTrap) == 0x000008, "Wrong alignment on DBDGameState_AddTrap");
static_assert(sizeof(DBDGameState_AddTrap) == 0x000008, "Wrong size on DBDGameState_AddTrap");
static_assert(offsetof(DBDGameState_AddTrap, ToAdd) == 0x000000, "Member 'DBDGameState_AddTrap::ToAdd' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_EvaluateObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_Authority_EvaluateObsessionTarget final
{
public:
	class ADBDPlayer*                             PotentialTarget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_EvaluateObsessionTarget) == 0x000008, "Wrong alignment on DBDGameState_Authority_EvaluateObsessionTarget");
static_assert(sizeof(DBDGameState_Authority_EvaluateObsessionTarget) == 0x000008, "Wrong size on DBDGameState_Authority_EvaluateObsessionTarget");
static_assert(offsetof(DBDGameState_Authority_EvaluateObsessionTarget, PotentialTarget) == 0x000000, "Member 'DBDGameState_Authority_EvaluateObsessionTarget::PotentialTarget' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_OnPlayerGameStateChangedAddIfKilled
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_Authority_OnPlayerGameStateChangedAddIfKilled final
{
public:
	class ADBDPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    GameState;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameState_Authority_OnPlayerGameStateChangedAddIfKilled) == 0x000008, "Wrong alignment on DBDGameState_Authority_OnPlayerGameStateChangedAddIfKilled");
static_assert(sizeof(DBDGameState_Authority_OnPlayerGameStateChangedAddIfKilled) == 0x000010, "Wrong size on DBDGameState_Authority_OnPlayerGameStateChangedAddIfKilled");
static_assert(offsetof(DBDGameState_Authority_OnPlayerGameStateChangedAddIfKilled, PlayerState) == 0x000000, "Member 'DBDGameState_Authority_OnPlayerGameStateChangedAddIfKilled::PlayerState' has a wrong offset!");
static_assert(offsetof(DBDGameState_Authority_OnPlayerGameStateChangedAddIfKilled, GameState) == 0x000008, "Member 'DBDGameState_Authority_OnPlayerGameStateChangedAddIfKilled::GameState' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetBuiltLevelData
// 0x00B8 (0x00B8 - 0x0000)
struct DBDGameState_Authority_SetBuiltLevelData final
{
public:
	struct FBuiltLevelData                        BuiltLevelData;                                    // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetBuiltLevelData) == 0x000008, "Wrong alignment on DBDGameState_Authority_SetBuiltLevelData");
static_assert(sizeof(DBDGameState_Authority_SetBuiltLevelData) == 0x0000B8, "Wrong size on DBDGameState_Authority_SetBuiltLevelData");
static_assert(offsetof(DBDGameState_Authority_SetBuiltLevelData, BuiltLevelData) == 0x000000, "Member 'DBDGameState_Authority_SetBuiltLevelData::BuiltLevelData' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetEscapeDoorOpened
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Authority_SetEscapeDoorOpened final
{
public:
	bool                                          OPENED;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetEscapeDoorOpened) == 0x000001, "Wrong alignment on DBDGameState_Authority_SetEscapeDoorOpened");
static_assert(sizeof(DBDGameState_Authority_SetEscapeDoorOpened) == 0x000001, "Wrong size on DBDGameState_Authority_SetEscapeDoorOpened");
static_assert(offsetof(DBDGameState_Authority_SetEscapeDoorOpened, OPENED) == 0x000000, "Member 'DBDGameState_Authority_SetEscapeDoorOpened::OPENED' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetGameLevelEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Authority_SetGameLevelEnded final
{
public:
	EEndGameReason                                EndGameReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetGameLevelEnded) == 0x000001, "Wrong alignment on DBDGameState_Authority_SetGameLevelEnded");
static_assert(sizeof(DBDGameState_Authority_SetGameLevelEnded) == 0x000001, "Wrong size on DBDGameState_Authority_SetGameLevelEnded");
static_assert(offsetof(DBDGameState_Authority_SetGameLevelEnded, EndGameReason) == 0x000000, "Member 'DBDGameState_Authority_SetGameLevelEnded::EndGameReason' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetGameSelectedOffering
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_Authority_SetGameSelectedOffering final
{
public:
	TArray<struct FSelectedOffering>              Offerings;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetGameSelectedOffering) == 0x000008, "Wrong alignment on DBDGameState_Authority_SetGameSelectedOffering");
static_assert(sizeof(DBDGameState_Authority_SetGameSelectedOffering) == 0x000010, "Wrong size on DBDGameState_Authority_SetGameSelectedOffering");
static_assert(offsetof(DBDGameState_Authority_SetGameSelectedOffering, Offerings) == 0x000000, "Member 'DBDGameState_Authority_SetGameSelectedOffering::Offerings' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_Authority_SetObsessionTarget final
{
public:
	class ACamperPlayer*                          ObsessionTarget;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetObsessionTarget) == 0x000008, "Wrong alignment on DBDGameState_Authority_SetObsessionTarget");
static_assert(sizeof(DBDGameState_Authority_SetObsessionTarget) == 0x000008, "Wrong size on DBDGameState_Authority_SetObsessionTarget");
static_assert(offsetof(DBDGameState_Authority_SetObsessionTarget, ObsessionTarget) == 0x000000, "Member 'DBDGameState_Authority_SetObsessionTarget::ObsessionTarget' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SetSurvivorLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_Authority_SetSurvivorLeft final
{
public:
	int32                                         SurvivorRemaining;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SetSurvivorLeft) == 0x000004, "Wrong alignment on DBDGameState_Authority_SetSurvivorLeft");
static_assert(sizeof(DBDGameState_Authority_SetSurvivorLeft) == 0x000004, "Wrong size on DBDGameState_Authority_SetSurvivorLeft");
static_assert(offsetof(DBDGameState_Authority_SetSurvivorLeft, SurvivorRemaining) == 0x000000, "Member 'DBDGameState_Authority_SetSurvivorLeft::SurvivorRemaining' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Authority_SignalEscapeDoorActivated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Authority_SignalEscapeDoorActivated final
{
public:
	bool                                          NewEscapeDoorActivated;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Authority_SignalEscapeDoorActivated) == 0x000001, "Wrong alignment on DBDGameState_Authority_SignalEscapeDoorActivated");
static_assert(sizeof(DBDGameState_Authority_SignalEscapeDoorActivated) == 0x000001, "Wrong size on DBDGameState_Authority_SignalEscapeDoorActivated");
static_assert(offsetof(DBDGameState_Authority_SignalEscapeDoorActivated, NewEscapeDoorActivated) == 0x000000, "Member 'DBDGameState_Authority_SignalEscapeDoorActivated::NewEscapeDoorActivated' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.CallOnIntroComplete
// 0x0014 (0x0014 - 0x0000)
struct DBDGameState_CallOnIntroComplete final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_CallOnIntroComplete) == 0x000004, "Wrong alignment on DBDGameState_CallOnIntroComplete");
static_assert(sizeof(DBDGameState_CallOnIntroComplete) == 0x000014, "Wrong size on DBDGameState_CallOnIntroComplete");
static_assert(offsetof(DBDGameState_CallOnIntroComplete, Callback) == 0x000000, "Member 'DBDGameState_CallOnIntroComplete::Callback' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.CallOnLevelReadyToPlay
// 0x0014 (0x0014 - 0x0000)
struct DBDGameState_CallOnLevelReadyToPlay final
{
public:
	TDelegate<void()>                             Callback;                                          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_CallOnLevelReadyToPlay) == 0x000004, "Wrong alignment on DBDGameState_CallOnLevelReadyToPlay");
static_assert(sizeof(DBDGameState_CallOnLevelReadyToPlay) == 0x000014, "Wrong size on DBDGameState_CallOnLevelReadyToPlay");
static_assert(offsetof(DBDGameState_CallOnLevelReadyToPlay, Callback) == 0x000000, "Member 'DBDGameState_CallOnLevelReadyToPlay::Callback' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.CallOnSlasherSet
// 0x0014 (0x0014 - 0x0000)
struct DBDGameState_CallOnSlasherSet final
{
public:
	TDelegate<void(class ASlasherPlayer* Slasher)> Callback;                                          // 0x0000(0x0014)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_CallOnSlasherSet) == 0x000004, "Wrong alignment on DBDGameState_CallOnSlasherSet");
static_assert(sizeof(DBDGameState_CallOnSlasherSet) == 0x000014, "Wrong size on DBDGameState_CallOnSlasherSet");
static_assert(offsetof(DBDGameState_CallOnSlasherSet, Callback) == 0x000000, "Member 'DBDGameState_CallOnSlasherSet::Callback' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetDangerPredictionObjects
// 0x0018 (0x0018 - 0x0000)
struct DBDGameState_GetDangerPredictionObjects final
{
public:
	bool                                          IsObjectDynamic;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UDBDDangerPredictionComponent*>  ReturnValue;                                       // 0x0008(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetDangerPredictionObjects) == 0x000008, "Wrong alignment on DBDGameState_GetDangerPredictionObjects");
static_assert(sizeof(DBDGameState_GetDangerPredictionObjects) == 0x000018, "Wrong size on DBDGameState_GetDangerPredictionObjects");
static_assert(offsetof(DBDGameState_GetDangerPredictionObjects, IsObjectDynamic) == 0x000000, "Member 'DBDGameState_GetDangerPredictionObjects::IsObjectDynamic' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetDangerPredictionObjects, ReturnValue) == 0x000008, "Member 'DBDGameState_GetDangerPredictionObjects::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsObsessionTargetAlive
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsObsessionTargetAlive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsObsessionTargetAlive) == 0x000001, "Wrong alignment on DBDGameState_IsObsessionTargetAlive");
static_assert(sizeof(DBDGameState_IsObsessionTargetAlive) == 0x000001, "Wrong size on DBDGameState_IsObsessionTargetAlive");
static_assert(offsetof(DBDGameState_IsObsessionTargetAlive, ReturnValue) == 0x000000, "Member 'DBDGameState_IsObsessionTargetAlive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsObsessionTargetAliveInLevel
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsObsessionTargetAliveInLevel final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsObsessionTargetAliveInLevel) == 0x000001, "Wrong alignment on DBDGameState_IsObsessionTargetAliveInLevel");
static_assert(sizeof(DBDGameState_IsObsessionTargetAliveInLevel) == 0x000001, "Wrong size on DBDGameState_IsObsessionTargetAliveInLevel");
static_assert(offsetof(DBDGameState_IsObsessionTargetAliveInLevel, ReturnValue) == 0x000000, "Member 'DBDGameState_IsObsessionTargetAliveInLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SendEnsureToClients
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_Multicast_SendEnsureToClients final
{
public:
	class FString                                 Ensure;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SendEnsureToClients) == 0x000008, "Wrong alignment on DBDGameState_Multicast_SendEnsureToClients");
static_assert(sizeof(DBDGameState_Multicast_SendEnsureToClients) == 0x000010, "Wrong size on DBDGameState_Multicast_SendEnsureToClients");
static_assert(offsetof(DBDGameState_Multicast_SendEnsureToClients, Ensure) == 0x000000, "Member 'DBDGameState_Multicast_SendEnsureToClients::Ensure' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SendHVSPlusState
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SendHVSPlusState final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SendHVSPlusState) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SendHVSPlusState");
static_assert(sizeof(DBDGameState_Multicast_SendHVSPlusState) == 0x000001, "Wrong size on DBDGameState_Multicast_SendHVSPlusState");
static_assert(offsetof(DBDGameState_Multicast_SendHVSPlusState, Enabled) == 0x000000, "Member 'DBDGameState_Multicast_SendHVSPlusState::Enabled' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetBuiltLevelData
// 0x00B8 (0x00B8 - 0x0000)
struct DBDGameState_Multicast_SetBuiltLevelData final
{
public:
	struct FBuiltLevelData                        BuiltLevelData;                                    // 0x0000(0x00B8)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetBuiltLevelData) == 0x000008, "Wrong alignment on DBDGameState_Multicast_SetBuiltLevelData");
static_assert(sizeof(DBDGameState_Multicast_SetBuiltLevelData) == 0x0000B8, "Wrong size on DBDGameState_Multicast_SetBuiltLevelData");
static_assert(offsetof(DBDGameState_Multicast_SetBuiltLevelData, BuiltLevelData) == 0x000000, "Member 'DBDGameState_Multicast_SetBuiltLevelData::BuiltLevelData' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetGameEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetGameEnded final
{
public:
	bool                                          HasServerLeftGame;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetGameEnded) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetGameEnded");
static_assert(sizeof(DBDGameState_Multicast_SetGameEnded) == 0x000001, "Wrong size on DBDGameState_Multicast_SetGameEnded");
static_assert(offsetof(DBDGameState_Multicast_SetGameEnded, HasServerLeftGame) == 0x000000, "Member 'DBDGameState_Multicast_SetGameEnded::HasServerLeftGame' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetGameLevelEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetGameLevelEnded final
{
public:
	EEndGameReason                                EndGameReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetGameLevelEnded) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetGameLevelEnded");
static_assert(sizeof(DBDGameState_Multicast_SetGameLevelEnded) == 0x000001, "Wrong size on DBDGameState_Multicast_SetGameLevelEnded");
static_assert(offsetof(DBDGameState_Multicast_SetGameLevelEnded, EndGameReason) == 0x000000, "Member 'DBDGameState_Multicast_SetGameLevelEnded::EndGameReason' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetGameLevelLoaded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetGameLevelLoaded final
{
public:
	bool                                          GameLevelLoaded;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetGameLevelLoaded) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetGameLevelLoaded");
static_assert(sizeof(DBDGameState_Multicast_SetGameLevelLoaded) == 0x000001, "Wrong size on DBDGameState_Multicast_SetGameLevelLoaded");
static_assert(offsetof(DBDGameState_Multicast_SetGameLevelLoaded, GameLevelLoaded) == 0x000000, "Member 'DBDGameState_Multicast_SetGameLevelLoaded::GameLevelLoaded' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetLostServerConnection
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetLostServerConnection final
{
public:
	bool                                          HasLostServerConnection;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetLostServerConnection) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetLostServerConnection");
static_assert(sizeof(DBDGameState_Multicast_SetLostServerConnection) == 0x000001, "Wrong size on DBDGameState_Multicast_SetLostServerConnection");
static_assert(offsetof(DBDGameState_Multicast_SetLostServerConnection, HasLostServerConnection) == 0x000000, "Member 'DBDGameState_Multicast_SetLostServerConnection::HasLostServerConnection' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_SetServerLeftGame
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_Multicast_SetServerLeftGame final
{
public:
	bool                                          HasServerLeftGame;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_SetServerLeftGame) == 0x000001, "Wrong alignment on DBDGameState_Multicast_SetServerLeftGame");
static_assert(sizeof(DBDGameState_Multicast_SetServerLeftGame) == 0x000001, "Wrong size on DBDGameState_Multicast_SetServerLeftGame");
static_assert(offsetof(DBDGameState_Multicast_SetServerLeftGame, HasServerLeftGame) == 0x000000, "Member 'DBDGameState_Multicast_SetServerLeftGame::HasServerLeftGame' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.Multicast_UpdateCharacterFromGamePreset
// 0x0098 (0x0098 - 0x0000)
struct DBDGameState_Multicast_UpdateCharacterFromGamePreset final
{
public:
	class ADBDPlayerState_Menu*                   PlayerState_Menu;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGamePresetData                        GamePresetData;                                    // 0x0008(0x0090)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_Multicast_UpdateCharacterFromGamePreset) == 0x000008, "Wrong alignment on DBDGameState_Multicast_UpdateCharacterFromGamePreset");
static_assert(sizeof(DBDGameState_Multicast_UpdateCharacterFromGamePreset) == 0x000098, "Wrong size on DBDGameState_Multicast_UpdateCharacterFromGamePreset");
static_assert(offsetof(DBDGameState_Multicast_UpdateCharacterFromGamePreset, PlayerState_Menu) == 0x000000, "Member 'DBDGameState_Multicast_UpdateCharacterFromGamePreset::PlayerState_Menu' has a wrong offset!");
static_assert(offsetof(DBDGameState_Multicast_UpdateCharacterFromGamePreset, GamePresetData) == 0x000008, "Member 'DBDGameState_Multicast_UpdateCharacterFromGamePreset::GamePresetData' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_EscapeDoorActivated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_OnRep_EscapeDoorActivated final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_EscapeDoorActivated) == 0x000001, "Wrong alignment on DBDGameState_OnRep_EscapeDoorActivated");
static_assert(sizeof(DBDGameState_OnRep_EscapeDoorActivated) == 0x000001, "Wrong size on DBDGameState_OnRep_EscapeDoorActivated");
static_assert(offsetof(DBDGameState_OnRep_EscapeDoorActivated, OldValue) == 0x000000, "Member 'DBDGameState_OnRep_EscapeDoorActivated::OldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_GameLevelLoadingStarted
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_OnRep_GameLevelLoadingStarted final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_GameLevelLoadingStarted) == 0x000001, "Wrong alignment on DBDGameState_OnRep_GameLevelLoadingStarted");
static_assert(sizeof(DBDGameState_OnRep_GameLevelLoadingStarted) == 0x000001, "Wrong size on DBDGameState_OnRep_GameLevelLoadingStarted");
static_assert(offsetof(DBDGameState_OnRep_GameLevelLoadingStarted, OldValue) == 0x000000, "Member 'DBDGameState_OnRep_GameLevelLoadingStarted::OldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_GameObjectives
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_OnRep_GameObjectives final
{
public:
	TArray<class AGameObjectiveBase*>             OldArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_GameObjectives) == 0x000008, "Wrong alignment on DBDGameState_OnRep_GameObjectives");
static_assert(sizeof(DBDGameState_OnRep_GameObjectives) == 0x000010, "Wrong size on DBDGameState_OnRep_GameObjectives");
static_assert(offsetof(DBDGameState_OnRep_GameObjectives, OldArray) == 0x000000, "Member 'DBDGameState_OnRep_GameObjectives::OldArray' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_ObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_OnRep_ObsessionTarget final
{
public:
	class ACamperPlayer*                          PreviousObsessionTarget;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_ObsessionTarget) == 0x000008, "Wrong alignment on DBDGameState_OnRep_ObsessionTarget");
static_assert(sizeof(DBDGameState_OnRep_ObsessionTarget) == 0x000008, "Wrong size on DBDGameState_OnRep_ObsessionTarget");
static_assert(offsetof(DBDGameState_OnRep_ObsessionTarget, PreviousObsessionTarget) == 0x000000, "Member 'DBDGameState_OnRep_ObsessionTarget::PreviousObsessionTarget' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_SecondsLeftInLobby
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_OnRep_SecondsLeftInLobby final
{
public:
	int32                                         OldValue;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_SecondsLeftInLobby) == 0x000004, "Wrong alignment on DBDGameState_OnRep_SecondsLeftInLobby");
static_assert(sizeof(DBDGameState_OnRep_SecondsLeftInLobby) == 0x000004, "Wrong size on DBDGameState_OnRep_SecondsLeftInLobby");
static_assert(offsetof(DBDGameState_OnRep_SecondsLeftInLobby, OldValue) == 0x000000, "Member 'DBDGameState_OnRep_SecondsLeftInLobby::OldValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.OnRep_SurvivorLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_OnRep_SurvivorLeft final
{
public:
	int32                                         OldValue;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnRep_SurvivorLeft) == 0x000004, "Wrong alignment on DBDGameState_OnRep_SurvivorLeft");
static_assert(sizeof(DBDGameState_OnRep_SurvivorLeft) == 0x000004, "Wrong size on DBDGameState_OnRep_SurvivorLeft");
static_assert(offsetof(DBDGameState_OnRep_SurvivorLeft, OldValue) == 0x000000, "Member 'DBDGameState_OnRep_SurvivorLeft::OldValue' has a wrong offset!");

// DelegateFunction DeadByDaylight.DBDGameState.OnSlasherSetMultiDelegate__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_OnSlasherSetMultiDelegate__DelegateSignature final
{
public:
	class ASlasherPlayer*                         SlasherPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_OnSlasherSetMultiDelegate__DelegateSignature) == 0x000008, "Wrong alignment on DBDGameState_OnSlasherSetMultiDelegate__DelegateSignature");
static_assert(sizeof(DBDGameState_OnSlasherSetMultiDelegate__DelegateSignature) == 0x000008, "Wrong size on DBDGameState_OnSlasherSetMultiDelegate__DelegateSignature");
static_assert(offsetof(DBDGameState_OnSlasherSetMultiDelegate__DelegateSignature, SlasherPlayer) == 0x000000, "Member 'DBDGameState_OnSlasherSetMultiDelegate__DelegateSignature::SlasherPlayer' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.RemoveDangerPredictionObject
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_RemoveDangerPredictionObject final
{
public:
	class UDBDDangerPredictionComponent*          ToRemove;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_RemoveDangerPredictionObject) == 0x000008, "Wrong alignment on DBDGameState_RemoveDangerPredictionObject");
static_assert(sizeof(DBDGameState_RemoveDangerPredictionObject) == 0x000008, "Wrong size on DBDGameState_RemoveDangerPredictionObject");
static_assert(offsetof(DBDGameState_RemoveDangerPredictionObject, ToRemove) == 0x000000, "Member 'DBDGameState_RemoveDangerPredictionObject::ToRemove' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.RemoveTrap
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_RemoveTrap final
{
public:
	class AInteractable*                          ToRemove;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_RemoveTrap) == 0x000008, "Wrong alignment on DBDGameState_RemoveTrap");
static_assert(sizeof(DBDGameState_RemoveTrap) == 0x000008, "Wrong size on DBDGameState_RemoveTrap");
static_assert(offsetof(DBDGameState_RemoveTrap, ToRemove) == 0x000000, "Member 'DBDGameState_RemoveTrap::ToRemove' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.SetDisplayMapName
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_SetDisplayMapName final
{
public:
	bool                                          Display;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_SetDisplayMapName) == 0x000001, "Wrong alignment on DBDGameState_SetDisplayMapName");
static_assert(sizeof(DBDGameState_SetDisplayMapName) == 0x000001, "Wrong size on DBDGameState_SetDisplayMapName");
static_assert(offsetof(DBDGameState_SetDisplayMapName, Display) == 0x000000, "Member 'DBDGameState_SetDisplayMapName::Display' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.SetGameLevelEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_SetGameLevelEnded final
{
public:
	EEndGameReason                                EndGameReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_SetGameLevelEnded) == 0x000001, "Wrong alignment on DBDGameState_SetGameLevelEnded");
static_assert(sizeof(DBDGameState_SetGameLevelEnded) == 0x000001, "Wrong size on DBDGameState_SetGameLevelEnded");
static_assert(offsetof(DBDGameState_SetGameLevelEnded, EndGameReason) == 0x000000, "Member 'DBDGameState_SetGameLevelEnded::EndGameReason' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.SetKillerIntroCompletedNormalized
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_SetKillerIntroCompletedNormalized final
{
public:
	float                                         CompletedAmount;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_SetKillerIntroCompletedNormalized) == 0x000004, "Wrong alignment on DBDGameState_SetKillerIntroCompletedNormalized");
static_assert(sizeof(DBDGameState_SetKillerIntroCompletedNormalized) == 0x000004, "Wrong size on DBDGameState_SetKillerIntroCompletedNormalized");
static_assert(offsetof(DBDGameState_SetKillerIntroCompletedNormalized, CompletedAmount) == 0x000000, "Member 'DBDGameState_SetKillerIntroCompletedNormalized::CompletedAmount' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.SetPlayersReadyToStart
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_SetPlayersReadyToStart final
{
public:
	bool                                          PlayersReadyToStart;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_SetPlayersReadyToStart) == 0x000001, "Wrong alignment on DBDGameState_SetPlayersReadyToStart");
static_assert(sizeof(DBDGameState_SetPlayersReadyToStart) == 0x000001, "Wrong size on DBDGameState_SetPlayersReadyToStart");
static_assert(offsetof(DBDGameState_SetPlayersReadyToStart, PlayersReadyToStart) == 0x000000, "Member 'DBDGameState_SetPlayersReadyToStart::PlayersReadyToStart' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.UnregisterFromIntroCompleteAndLevelReadyToPlay
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay final
{
public:
	const class UObject*                          InObject;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay) == 0x000008, "Wrong alignment on DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay");
static_assert(sizeof(DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay) == 0x000008, "Wrong size on DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay");
static_assert(offsetof(DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay, InObject) == 0x000000, "Member 'DBDGameState_UnregisterFromIntroCompleteAndLevelReadyToPlay::InObject' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetAllDangerPredictionObjects
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetAllDangerPredictionObjects final
{
public:
	TArray<class UDBDDangerPredictionComponent*>  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetAllDangerPredictionObjects) == 0x000008, "Wrong alignment on DBDGameState_GetAllDangerPredictionObjects");
static_assert(sizeof(DBDGameState_GetAllDangerPredictionObjects) == 0x000010, "Wrong size on DBDGameState_GetAllDangerPredictionObjects");
static_assert(offsetof(DBDGameState_GetAllDangerPredictionObjects, ReturnValue) == 0x000000, "Member 'DBDGameState_GetAllDangerPredictionObjects::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetCharacterCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetCharacterCollection final
{
public:
	class UCharacterCollection*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetCharacterCollection) == 0x000008, "Wrong alignment on DBDGameState_GetCharacterCollection");
static_assert(sizeof(DBDGameState_GetCharacterCollection) == 0x000008, "Wrong size on DBDGameState_GetCharacterCollection");
static_assert(offsetof(DBDGameState_GetCharacterCollection, ReturnValue) == 0x000000, "Member 'DBDGameState_GetCharacterCollection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetCollectableCollection
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetCollectableCollection final
{
public:
	class UCollectableCollection*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetCollectableCollection) == 0x000008, "Wrong alignment on DBDGameState_GetCollectableCollection");
static_assert(sizeof(DBDGameState_GetCollectableCollection) == 0x000008, "Wrong size on DBDGameState_GetCollectableCollection");
static_assert(offsetof(DBDGameState_GetCollectableCollection, ReturnValue) == 0x000000, "Member 'DBDGameState_GetCollectableCollection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetEndGameStateComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetEndGameStateComponent final
{
public:
	class UEndGameStateComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetEndGameStateComponent) == 0x000008, "Wrong alignment on DBDGameState_GetEndGameStateComponent");
static_assert(sizeof(DBDGameState_GetEndGameStateComponent) == 0x000008, "Wrong size on DBDGameState_GetEndGameStateComponent");
static_assert(offsetof(DBDGameState_GetEndGameStateComponent, ReturnValue) == 0x000000, "Member 'DBDGameState_GetEndGameStateComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetGameLevelLoaded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_GetGameLevelLoaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetGameLevelLoaded) == 0x000001, "Wrong alignment on DBDGameState_GetGameLevelLoaded");
static_assert(sizeof(DBDGameState_GetGameLevelLoaded) == 0x000001, "Wrong size on DBDGameState_GetGameLevelLoaded");
static_assert(offsetof(DBDGameState_GetGameLevelLoaded, ReturnValue) == 0x000000, "Member 'DBDGameState_GetGameLevelLoaded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetGameLevelLoadingStarted
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_GetGameLevelLoadingStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetGameLevelLoadingStarted) == 0x000001, "Wrong alignment on DBDGameState_GetGameLevelLoadingStarted");
static_assert(sizeof(DBDGameState_GetGameLevelLoadingStarted) == 0x000001, "Wrong size on DBDGameState_GetGameLevelLoadingStarted");
static_assert(offsetof(DBDGameState_GetGameLevelLoadingStarted, ReturnValue) == 0x000000, "Member 'DBDGameState_GetGameLevelLoadingStarted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameBaseTraps
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameBaseTraps final
{
public:
	TArray<class ABaseTrap*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameBaseTraps) == 0x000008, "Wrong alignment on DBDGameState_GetInGameBaseTraps");
static_assert(sizeof(DBDGameState_GetInGameBaseTraps) == 0x000010, "Wrong size on DBDGameState_GetInGameBaseTraps");
static_assert(offsetof(DBDGameState_GetInGameBaseTraps, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameBaseTraps::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameEscapeDoors
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameEscapeDoors final
{
public:
	TArray<class AEscapeDoor*>                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameEscapeDoors) == 0x000008, "Wrong alignment on DBDGameState_GetInGameEscapeDoors");
static_assert(sizeof(DBDGameState_GetInGameEscapeDoors) == 0x000010, "Wrong size on DBDGameState_GetInGameEscapeDoors");
static_assert(offsetof(DBDGameState_GetInGameEscapeDoors, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameEscapeDoors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameGenerators
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameGenerators final
{
public:
	TArray<class AGenerator*>                     ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameGenerators) == 0x000008, "Wrong alignment on DBDGameState_GetInGameGenerators");
static_assert(sizeof(DBDGameState_GetInGameGenerators) == 0x000010, "Wrong size on DBDGameState_GetInGameGenerators");
static_assert(offsetof(DBDGameState_GetInGameGenerators, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameGenerators::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameHatches
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameHatches final
{
public:
	TArray<class AHatch*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameHatches) == 0x000008, "Wrong alignment on DBDGameState_GetInGameHatches");
static_assert(sizeof(DBDGameState_GetInGameHatches) == 0x000010, "Wrong size on DBDGameState_GetInGameHatches");
static_assert(offsetof(DBDGameState_GetInGameHatches, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameHatches::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameMeatHooks
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameMeatHooks final
{
public:
	TArray<class AMeatHook*>                      ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameMeatHooks) == 0x000008, "Wrong alignment on DBDGameState_GetInGameMeatHooks");
static_assert(sizeof(DBDGameState_GetInGameMeatHooks) == 0x000010, "Wrong size on DBDGameState_GetInGameMeatHooks");
static_assert(offsetof(DBDGameState_GetInGameMeatHooks, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameMeatHooks::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGamePallets
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGamePallets final
{
public:
	TArray<class APallet*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGamePallets) == 0x000008, "Wrong alignment on DBDGameState_GetInGamePallets");
static_assert(sizeof(DBDGameState_GetInGamePallets) == 0x000010, "Wrong size on DBDGameState_GetInGamePallets");
static_assert(offsetof(DBDGameState_GetInGamePallets, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGamePallets::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameReverseBearTrapRemovers
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameReverseBearTrapRemovers final
{
public:
	TArray<class AReverseBearTrapRemover*>        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameReverseBearTrapRemovers) == 0x000008, "Wrong alignment on DBDGameState_GetInGameReverseBearTrapRemovers");
static_assert(sizeof(DBDGameState_GetInGameReverseBearTrapRemovers) == 0x000010, "Wrong size on DBDGameState_GetInGameReverseBearTrapRemovers");
static_assert(offsetof(DBDGameState_GetInGameReverseBearTrapRemovers, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameReverseBearTrapRemovers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameSearchables
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameSearchables final
{
public:
	TArray<class ASearchable*>                    ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameSearchables) == 0x000008, "Wrong alignment on DBDGameState_GetInGameSearchables");
static_assert(sizeof(DBDGameState_GetInGameSearchables) == 0x000010, "Wrong size on DBDGameState_GetInGameSearchables");
static_assert(offsetof(DBDGameState_GetInGameSearchables, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameSearchables::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetInGameWindows
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetInGameWindows final
{
public:
	TArray<class AWindow*>                        ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetInGameWindows) == 0x000008, "Wrong alignment on DBDGameState_GetInGameWindows");
static_assert(sizeof(DBDGameState_GetInGameWindows) == 0x000010, "Wrong size on DBDGameState_GetInGameWindows");
static_assert(offsetof(DBDGameState_GetInGameWindows, ReturnValue) == 0x000000, "Member 'DBDGameState_GetInGameWindows::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetIsGameEnded
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_GetIsGameEnded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetIsGameEnded) == 0x000001, "Wrong alignment on DBDGameState_GetIsGameEnded");
static_assert(sizeof(DBDGameState_GetIsGameEnded) == 0x000001, "Wrong size on DBDGameState_GetIsGameEnded");
static_assert(offsetof(DBDGameState_GetIsGameEnded, ReturnValue) == 0x000000, "Member 'DBDGameState_GetIsGameEnded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetKiller
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetKiller) == 0x000008, "Wrong alignment on DBDGameState_GetKiller");
static_assert(sizeof(DBDGameState_GetKiller) == 0x000008, "Wrong size on DBDGameState_GetKiller");
static_assert(offsetof(DBDGameState_GetKiller, ReturnValue) == 0x000000, "Member 'DBDGameState_GetKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetKillerIntroCompletedNormalized
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetKillerIntroCompletedNormalized final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetKillerIntroCompletedNormalized) == 0x000004, "Wrong alignment on DBDGameState_GetKillerIntroCompletedNormalized");
static_assert(sizeof(DBDGameState_GetKillerIntroCompletedNormalized) == 0x000004, "Wrong size on DBDGameState_GetKillerIntroCompletedNormalized");
static_assert(offsetof(DBDGameState_GetKillerIntroCompletedNormalized, ReturnValue) == 0x000000, "Member 'DBDGameState_GetKillerIntroCompletedNormalized::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetLevelData
// 0x00B8 (0x00B8 - 0x0000)
struct DBDGameState_GetLevelData final
{
public:
	struct FBuiltLevelData                        ReturnValue;                                       // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetLevelData) == 0x000008, "Wrong alignment on DBDGameState_GetLevelData");
static_assert(sizeof(DBDGameState_GetLevelData) == 0x0000B8, "Wrong size on DBDGameState_GetLevelData");
static_assert(offsetof(DBDGameState_GetLevelData, ReturnValue) == 0x000000, "Member 'DBDGameState_GetLevelData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetLevelThemeAudioSoundBankAssetPtr
// 0x0038 (0x0038 - 0x0000)
struct DBDGameState_GetLevelThemeAudioSoundBankAssetPtr final
{
public:
	TSoftObjectPtr<class UAkAudioBank>            ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetLevelThemeAudioSoundBankAssetPtr) == 0x000008, "Wrong alignment on DBDGameState_GetLevelThemeAudioSoundBankAssetPtr");
static_assert(sizeof(DBDGameState_GetLevelThemeAudioSoundBankAssetPtr) == 0x000038, "Wrong size on DBDGameState_GetLevelThemeAudioSoundBankAssetPtr");
static_assert(offsetof(DBDGameState_GetLevelThemeAudioSoundBankAssetPtr, ReturnValue) == 0x000000, "Member 'DBDGameState_GetLevelThemeAudioSoundBankAssetPtr::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetLocalPlayerBasePawn
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetLocalPlayerBasePawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetLocalPlayerBasePawn) == 0x000008, "Wrong alignment on DBDGameState_GetLocalPlayerBasePawn");
static_assert(sizeof(DBDGameState_GetLocalPlayerBasePawn) == 0x000008, "Wrong size on DBDGameState_GetLocalPlayerBasePawn");
static_assert(offsetof(DBDGameState_GetLocalPlayerBasePawn, ReturnValue) == 0x000000, "Member 'DBDGameState_GetLocalPlayerBasePawn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetLocalPlayerPawn
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetLocalPlayerPawn final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetLocalPlayerPawn) == 0x000008, "Wrong alignment on DBDGameState_GetLocalPlayerPawn");
static_assert(sizeof(DBDGameState_GetLocalPlayerPawn) == 0x000008, "Wrong size on DBDGameState_GetLocalPlayerPawn");
static_assert(offsetof(DBDGameState_GetLocalPlayerPawn, ReturnValue) == 0x000000, "Member 'DBDGameState_GetLocalPlayerPawn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetMapThemeName
// 0x000C (0x000C - 0x0000)
struct DBDGameState_GetMapThemeName final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetMapThemeName) == 0x000004, "Wrong alignment on DBDGameState_GetMapThemeName");
static_assert(sizeof(DBDGameState_GetMapThemeName) == 0x00000C, "Wrong size on DBDGameState_GetMapThemeName");
static_assert(offsetof(DBDGameState_GetMapThemeName, ReturnValue) == 0x000000, "Member 'DBDGameState_GetMapThemeName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetNumberOfActiveSurvivors
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetNumberOfActiveSurvivors final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetNumberOfActiveSurvivors) == 0x000004, "Wrong alignment on DBDGameState_GetNumberOfActiveSurvivors");
static_assert(sizeof(DBDGameState_GetNumberOfActiveSurvivors) == 0x000004, "Wrong size on DBDGameState_GetNumberOfActiveSurvivors");
static_assert(offsetof(DBDGameState_GetNumberOfActiveSurvivors, ReturnValue) == 0x000000, "Member 'DBDGameState_GetNumberOfActiveSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetNumberOfOtherActiveSurvivors
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetNumberOfOtherActiveSurvivors final
{
public:
	class ADBDPlayer*                             Exception;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameState_GetNumberOfOtherActiveSurvivors) == 0x000008, "Wrong alignment on DBDGameState_GetNumberOfOtherActiveSurvivors");
static_assert(sizeof(DBDGameState_GetNumberOfOtherActiveSurvivors) == 0x000010, "Wrong size on DBDGameState_GetNumberOfOtherActiveSurvivors");
static_assert(offsetof(DBDGameState_GetNumberOfOtherActiveSurvivors, Exception) == 0x000000, "Member 'DBDGameState_GetNumberOfOtherActiveSurvivors::Exception' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetNumberOfOtherActiveSurvivors, ReturnValue) == 0x000008, "Member 'DBDGameState_GetNumberOfOtherActiveSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetObsessionTarget final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetObsessionTarget) == 0x000008, "Wrong alignment on DBDGameState_GetObsessionTarget");
static_assert(sizeof(DBDGameState_GetObsessionTarget) == 0x000008, "Wrong size on DBDGameState_GetObsessionTarget");
static_assert(offsetof(DBDGameState_GetObsessionTarget, ReturnValue) == 0x000000, "Member 'DBDGameState_GetObsessionTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetPlayerRoleCounts
// 0x000C (0x000C - 0x0000)
struct DBDGameState_GetPlayerRoleCounts final
{
public:
	int32                                         SurvivorCount;                                     // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillerCount;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpectatorCount;                                    // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetPlayerRoleCounts) == 0x000004, "Wrong alignment on DBDGameState_GetPlayerRoleCounts");
static_assert(sizeof(DBDGameState_GetPlayerRoleCounts) == 0x00000C, "Wrong size on DBDGameState_GetPlayerRoleCounts");
static_assert(offsetof(DBDGameState_GetPlayerRoleCounts, SurvivorCount) == 0x000000, "Member 'DBDGameState_GetPlayerRoleCounts::SurvivorCount' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetPlayerRoleCounts, KillerCount) == 0x000004, "Member 'DBDGameState_GetPlayerRoleCounts::KillerCount' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetPlayerRoleCounts, SpectatorCount) == 0x000008, "Member 'DBDGameState_GetPlayerRoleCounts::SpectatorCount' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetPlayersReadyToStart
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_GetPlayersReadyToStart final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetPlayersReadyToStart) == 0x000001, "Wrong alignment on DBDGameState_GetPlayersReadyToStart");
static_assert(sizeof(DBDGameState_GetPlayersReadyToStart) == 0x000001, "Wrong size on DBDGameState_GetPlayersReadyToStart");
static_assert(offsetof(DBDGameState_GetPlayersReadyToStart, ReturnValue) == 0x000000, "Member 'DBDGameState_GetPlayersReadyToStart::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetPlayerStateByIDString
// 0x0020 (0x0020 - 0x0000)
struct DBDGameState_GetPlayerStateByIDString final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReplacementBot;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetPlayerStateByIDString) == 0x000008, "Wrong alignment on DBDGameState_GetPlayerStateByIDString");
static_assert(sizeof(DBDGameState_GetPlayerStateByIDString) == 0x000020, "Wrong size on DBDGameState_GetPlayerStateByIDString");
static_assert(offsetof(DBDGameState_GetPlayerStateByIDString, ID) == 0x000000, "Member 'DBDGameState_GetPlayerStateByIDString::ID' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetPlayerStateByIDString, IsReplacementBot) == 0x000010, "Member 'DBDGameState_GetPlayerStateByIDString::IsReplacementBot' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetPlayerStateByIDString, ReturnValue) == 0x000018, "Member 'DBDGameState_GetPlayerStateByIDString::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetPlayerStateByMirrorsID
// 0x0018 (0x0018 - 0x0000)
struct DBDGameState_GetPlayerStateByMirrorsID final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetPlayerStateByMirrorsID) == 0x000008, "Wrong alignment on DBDGameState_GetPlayerStateByMirrorsID");
static_assert(sizeof(DBDGameState_GetPlayerStateByMirrorsID) == 0x000018, "Wrong size on DBDGameState_GetPlayerStateByMirrorsID");
static_assert(offsetof(DBDGameState_GetPlayerStateByMirrorsID, ID) == 0x000000, "Member 'DBDGameState_GetPlayerStateByMirrorsID::ID' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetPlayerStateByMirrorsID, ReturnValue) == 0x000010, "Member 'DBDGameState_GetPlayerStateByMirrorsID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetRemainingGeneratorsNeeded
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetRemainingGeneratorsNeeded final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetRemainingGeneratorsNeeded) == 0x000004, "Wrong alignment on DBDGameState_GetRemainingGeneratorsNeeded");
static_assert(sizeof(DBDGameState_GetRemainingGeneratorsNeeded) == 0x000004, "Wrong size on DBDGameState_GetRemainingGeneratorsNeeded");
static_assert(offsetof(DBDGameState_GetRemainingGeneratorsNeeded, ReturnValue) == 0x000000, "Member 'DBDGameState_GetRemainingGeneratorsNeeded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetRequiredActivatedGeneratorCount
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetRequiredActivatedGeneratorCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetRequiredActivatedGeneratorCount) == 0x000004, "Wrong alignment on DBDGameState_GetRequiredActivatedGeneratorCount");
static_assert(sizeof(DBDGameState_GetRequiredActivatedGeneratorCount) == 0x000004, "Wrong size on DBDGameState_GetRequiredActivatedGeneratorCount");
static_assert(offsetof(DBDGameState_GetRequiredActivatedGeneratorCount, ReturnValue) == 0x000000, "Member 'DBDGameState_GetRequiredActivatedGeneratorCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetSelectedOffering
// 0x0018 (0x0018 - 0x0000)
struct DBDGameState_GetSelectedOffering final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSelectedOffering                      SelectedOffering;                                  // 0x0004(0x0010)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameState_GetSelectedOffering) == 0x000004, "Wrong alignment on DBDGameState_GetSelectedOffering");
static_assert(sizeof(DBDGameState_GetSelectedOffering) == 0x000018, "Wrong size on DBDGameState_GetSelectedOffering");
static_assert(offsetof(DBDGameState_GetSelectedOffering, Param_Index) == 0x000000, "Member 'DBDGameState_GetSelectedOffering::Param_Index' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetSelectedOffering, SelectedOffering) == 0x000004, "Member 'DBDGameState_GetSelectedOffering::SelectedOffering' has a wrong offset!");
static_assert(offsetof(DBDGameState_GetSelectedOffering, ReturnValue) == 0x000014, "Member 'DBDGameState_GetSelectedOffering::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetSelectedOfferings
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetSelectedOfferings final
{
public:
	TArray<struct FSelectedOffering>              ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetSelectedOfferings) == 0x000008, "Wrong alignment on DBDGameState_GetSelectedOfferings");
static_assert(sizeof(DBDGameState_GetSelectedOfferings) == 0x000010, "Wrong size on DBDGameState_GetSelectedOfferings");
static_assert(offsetof(DBDGameState_GetSelectedOfferings, ReturnValue) == 0x000000, "Member 'DBDGameState_GetSelectedOfferings::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetSpecialEventGameplaySpawnerComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDGameState_GetSpecialEventGameplaySpawnerComponent final
{
public:
	class USpecialEventGameplaySpawnerComponent*  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetSpecialEventGameplaySpawnerComponent) == 0x000008, "Wrong alignment on DBDGameState_GetSpecialEventGameplaySpawnerComponent");
static_assert(sizeof(DBDGameState_GetSpecialEventGameplaySpawnerComponent) == 0x000008, "Wrong size on DBDGameState_GetSpecialEventGameplaySpawnerComponent");
static_assert(offsetof(DBDGameState_GetSpecialEventGameplaySpawnerComponent, ReturnValue) == 0x000000, "Member 'DBDGameState_GetSpecialEventGameplaySpawnerComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetSurvivorLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDGameState_GetSurvivorLeft final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetSurvivorLeft) == 0x000004, "Wrong alignment on DBDGameState_GetSurvivorLeft");
static_assert(sizeof(DBDGameState_GetSurvivorLeft) == 0x000004, "Wrong size on DBDGameState_GetSurvivorLeft");
static_assert(offsetof(DBDGameState_GetSurvivorLeft, ReturnValue) == 0x000000, "Member 'DBDGameState_GetSurvivorLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetTotems
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetTotems final
{
public:
	TArray<class ATotem*>                         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetTotems) == 0x000008, "Wrong alignment on DBDGameState_GetTotems");
static_assert(sizeof(DBDGameState_GetTotems) == 0x000010, "Wrong size on DBDGameState_GetTotems");
static_assert(offsetof(DBDGameState_GetTotems, ReturnValue) == 0x000000, "Member 'DBDGameState_GetTotems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.GetTraps
// 0x0010 (0x0010 - 0x0000)
struct DBDGameState_GetTraps final
{
public:
	TArray<class AInteractable*>                  ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_GetTraps) == 0x000008, "Wrong alignment on DBDGameState_GetTraps");
static_assert(sizeof(DBDGameState_GetTraps) == 0x000010, "Wrong size on DBDGameState_GetTraps");
static_assert(offsetof(DBDGameState_GetTraps, ReturnValue) == 0x000000, "Member 'DBDGameState_GetTraps::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsEscapeDoorActivated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsEscapeDoorActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsEscapeDoorActivated) == 0x000001, "Wrong alignment on DBDGameState_IsEscapeDoorActivated");
static_assert(sizeof(DBDGameState_IsEscapeDoorActivated) == 0x000001, "Wrong size on DBDGameState_IsEscapeDoorActivated");
static_assert(offsetof(DBDGameState_IsEscapeDoorActivated, ReturnValue) == 0x000000, "Member 'DBDGameState_IsEscapeDoorActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsEscapeDoorOpen
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsEscapeDoorOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsEscapeDoorOpen) == 0x000001, "Wrong alignment on DBDGameState_IsEscapeDoorOpen");
static_assert(sizeof(DBDGameState_IsEscapeDoorOpen) == 0x000001, "Wrong size on DBDGameState_IsEscapeDoorOpen");
static_assert(offsetof(DBDGameState_IsEscapeDoorOpen, ReturnValue) == 0x000000, "Member 'DBDGameState_IsEscapeDoorOpen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsEscapeRequirementCompleted
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsEscapeRequirementCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsEscapeRequirementCompleted) == 0x000001, "Wrong alignment on DBDGameState_IsEscapeRequirementCompleted");
static_assert(sizeof(DBDGameState_IsEscapeRequirementCompleted) == 0x000001, "Wrong size on DBDGameState_IsEscapeRequirementCompleted");
static_assert(offsetof(DBDGameState_IsEscapeRequirementCompleted, ReturnValue) == 0x000000, "Member 'DBDGameState_IsEscapeRequirementCompleted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsHatchVisible
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsHatchVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsHatchVisible) == 0x000001, "Wrong alignment on DBDGameState_IsHatchVisible");
static_assert(sizeof(DBDGameState_IsHatchVisible) == 0x000001, "Wrong size on DBDGameState_IsHatchVisible");
static_assert(offsetof(DBDGameState_IsHatchVisible, ReturnValue) == 0x000000, "Member 'DBDGameState_IsHatchVisible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsIntroCompleted
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsIntroCompleted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsIntroCompleted) == 0x000001, "Wrong alignment on DBDGameState_IsIntroCompleted");
static_assert(sizeof(DBDGameState_IsIntroCompleted) == 0x000001, "Wrong size on DBDGameState_IsIntroCompleted");
static_assert(offsetof(DBDGameState_IsIntroCompleted, ReturnValue) == 0x000000, "Member 'DBDGameState_IsIntroCompleted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsLevelReadyToPlay
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsLevelReadyToPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsLevelReadyToPlay) == 0x000001, "Wrong alignment on DBDGameState_IsLevelReadyToPlay");
static_assert(sizeof(DBDGameState_IsLevelReadyToPlay) == 0x000001, "Wrong size on DBDGameState_IsLevelReadyToPlay");
static_assert(offsetof(DBDGameState_IsLevelReadyToPlay, ReturnValue) == 0x000000, "Member 'DBDGameState_IsLevelReadyToPlay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsLevelSetupDone
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsLevelSetupDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsLevelSetupDone) == 0x000001, "Wrong alignment on DBDGameState_IsLevelSetupDone");
static_assert(sizeof(DBDGameState_IsLevelSetupDone) == 0x000001, "Wrong size on DBDGameState_IsLevelSetupDone");
static_assert(offsetof(DBDGameState_IsLevelSetupDone, ReturnValue) == 0x000000, "Member 'DBDGameState_IsLevelSetupDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsLightingGenerated
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsLightingGenerated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsLightingGenerated) == 0x000001, "Wrong alignment on DBDGameState_IsLightingGenerated");
static_assert(sizeof(DBDGameState_IsLightingGenerated) == 0x000001, "Wrong size on DBDGameState_IsLightingGenerated");
static_assert(offsetof(DBDGameState_IsLightingGenerated, ReturnValue) == 0x000000, "Member 'DBDGameState_IsLightingGenerated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsOfferingReceived
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsOfferingReceived final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsOfferingReceived) == 0x000001, "Wrong alignment on DBDGameState_IsOfferingReceived");
static_assert(sizeof(DBDGameState_IsOfferingReceived) == 0x000001, "Wrong size on DBDGameState_IsOfferingReceived");
static_assert(offsetof(DBDGameState_IsOfferingReceived, ReturnValue) == 0x000000, "Member 'DBDGameState_IsOfferingReceived::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsOnePlayerLeft
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsOnePlayerLeft final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsOnePlayerLeft) == 0x000001, "Wrong alignment on DBDGameState_IsOnePlayerLeft");
static_assert(sizeof(DBDGameState_IsOnePlayerLeft) == 0x000001, "Wrong size on DBDGameState_IsOnePlayerLeft");
static_assert(offsetof(DBDGameState_IsOnePlayerLeft, ReturnValue) == 0x000000, "Member 'DBDGameState_IsOnePlayerLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameState.IsPlayerDistributionReady
// 0x0001 (0x0001 - 0x0000)
struct DBDGameState_IsPlayerDistributionReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameState_IsPlayerDistributionReady) == 0x000001, "Wrong alignment on DBDGameState_IsPlayerDistributionReady");
static_assert(sizeof(DBDGameState_IsPlayerDistributionReady) == 0x000001, "Wrong size on DBDGameState_IsPlayerDistributionReady");
static_assert(offsetof(DBDGameState_IsPlayerDistributionReady, ReturnValue) == 0x000000, "Member 'DBDGameState_IsPlayerDistributionReady::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningCharacter
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningCharacter final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningCharacter) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningCharacter");
static_assert(sizeof(ActorComponentExt_GetOwningCharacter) == 0x000018, "Wrong size on ActorComponentExt_GetOwningCharacter");
static_assert(offsetof(ActorComponentExt_GetOwningCharacter, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningCharacter::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningCharacter, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningCharacter::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningCharacter, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningCharacterChecked
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningCharacterChecked final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACharacter*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningCharacterChecked) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningCharacterChecked");
static_assert(sizeof(ActorComponentExt_GetOwningCharacterChecked) == 0x000018, "Wrong size on ActorComponentExt_GetOwningCharacterChecked");
static_assert(offsetof(ActorComponentExt_GetOwningCharacterChecked, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningCharacterChecked::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningCharacterChecked, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningCharacterChecked::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningCharacterChecked, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningCharacterChecked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningKiller
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningKiller final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningKiller) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningKiller");
static_assert(sizeof(ActorComponentExt_GetOwningKiller) == 0x000018, "Wrong size on ActorComponentExt_GetOwningKiller");
static_assert(offsetof(ActorComponentExt_GetOwningKiller, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningKiller::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningKiller, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningKiller::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningKiller, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPawn
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningPawn final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPawn) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPawn");
static_assert(sizeof(ActorComponentExt_GetOwningPawn) == 0x000018, "Wrong size on ActorComponentExt_GetOwningPawn");
static_assert(offsetof(ActorComponentExt_GetOwningPawn, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPawn::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPawn, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningPawn::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPawn, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningPawn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPawnChecked
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningPawnChecked final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPawnChecked) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPawnChecked");
static_assert(sizeof(ActorComponentExt_GetOwningPawnChecked) == 0x000018, "Wrong size on ActorComponentExt_GetOwningPawnChecked");
static_assert(offsetof(ActorComponentExt_GetOwningPawnChecked, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPawnChecked::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPawnChecked, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningPawnChecked::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPawnChecked, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningPawnChecked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPlayer
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningPlayer final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPlayer) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPlayer");
static_assert(sizeof(ActorComponentExt_GetOwningPlayer) == 0x000018, "Wrong size on ActorComponentExt_GetOwningPlayer");
static_assert(offsetof(ActorComponentExt_GetOwningPlayer, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPlayer::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayer, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningPlayer::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayer, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPlayerChecked
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningPlayerChecked final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPlayerChecked) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPlayerChecked");
static_assert(sizeof(ActorComponentExt_GetOwningPlayerChecked) == 0x000018, "Wrong size on ActorComponentExt_GetOwningPlayerChecked");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerChecked, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPlayerChecked::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerChecked, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningPlayerChecked::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerChecked, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningPlayerChecked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningPlayerInHierarchy
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_GetOwningPlayerInHierarchy final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningPlayerInHierarchy) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningPlayerInHierarchy");
static_assert(sizeof(ActorComponentExt_GetOwningPlayerInHierarchy) == 0x000010, "Wrong size on ActorComponentExt_GetOwningPlayerInHierarchy");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerInHierarchy, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningPlayerInHierarchy::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningPlayerInHierarchy, ReturnValue) == 0x000008, "Member 'ActorComponentExt_GetOwningPlayerInHierarchy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningSurvivor
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningSurvivor final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningSurvivor) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningSurvivor");
static_assert(sizeof(ActorComponentExt_GetOwningSurvivor) == 0x000018, "Wrong size on ActorComponentExt_GetOwningSurvivor");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivor, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningSurvivor::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivor, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningSurvivor::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivor, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetOwningSurvivorChecked
// 0x0018 (0x0018 - 0x0000)
struct ActorComponentExt_GetOwningSurvivorChecked final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetOwningSurvivorChecked) == 0x000008, "Wrong alignment on ActorComponentExt_GetOwningSurvivorChecked");
static_assert(sizeof(ActorComponentExt_GetOwningSurvivorChecked) == 0x000018, "Wrong size on ActorComponentExt_GetOwningSurvivorChecked");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivorChecked, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetOwningSurvivorChecked::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivorChecked, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_GetOwningSurvivorChecked::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetOwningSurvivorChecked, ReturnValue) == 0x000010, "Member 'ActorComponentExt_GetOwningSurvivorChecked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.GetValidatedOwner
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_GetValidatedOwner final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorComponentExt_GetValidatedOwner) == 0x000008, "Wrong alignment on ActorComponentExt_GetValidatedOwner");
static_assert(sizeof(ActorComponentExt_GetValidatedOwner) == 0x000010, "Wrong size on ActorComponentExt_GetValidatedOwner");
static_assert(offsetof(ActorComponentExt_GetValidatedOwner, ActorComponent) == 0x000000, "Member 'ActorComponentExt_GetValidatedOwner::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_GetValidatedOwner, ReturnValue) == 0x000008, "Member 'ActorComponentExt_GetValidatedOwner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.HasAuthority
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_HasAuthority final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorComponentExt_HasAuthority) == 0x000008, "Wrong alignment on ActorComponentExt_HasAuthority");
static_assert(sizeof(ActorComponentExt_HasAuthority) == 0x000010, "Wrong size on ActorComponentExt_HasAuthority");
static_assert(offsetof(ActorComponentExt_HasAuthority, ActorComponent) == 0x000000, "Member 'ActorComponentExt_HasAuthority::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_HasAuthority, ReturnValue) == 0x000008, "Member 'ActorComponentExt_HasAuthority::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.IsLocallyControlled
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_IsLocallyControlled final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorComponentExt_IsLocallyControlled) == 0x000008, "Wrong alignment on ActorComponentExt_IsLocallyControlled");
static_assert(sizeof(ActorComponentExt_IsLocallyControlled) == 0x000010, "Wrong size on ActorComponentExt_IsLocallyControlled");
static_assert(offsetof(ActorComponentExt_IsLocallyControlled, ActorComponent) == 0x000000, "Member 'ActorComponentExt_IsLocallyControlled::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_IsLocallyControlled, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_IsLocallyControlled::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_IsLocallyControlled, ReturnValue) == 0x000009, "Member 'ActorComponentExt_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorComponentExt.IsLocallyObserved
// 0x0010 (0x0010 - 0x0000)
struct ActorComponentExt_IsLocallyObserved final
{
public:
	const class UActorComponent*                  ActorComponent;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RecursiveSearch;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorComponentExt_IsLocallyObserved) == 0x000008, "Wrong alignment on ActorComponentExt_IsLocallyObserved");
static_assert(sizeof(ActorComponentExt_IsLocallyObserved) == 0x000010, "Wrong size on ActorComponentExt_IsLocallyObserved");
static_assert(offsetof(ActorComponentExt_IsLocallyObserved, ActorComponent) == 0x000000, "Member 'ActorComponentExt_IsLocallyObserved::ActorComponent' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_IsLocallyObserved, RecursiveSearch) == 0x000008, "Member 'ActorComponentExt_IsLocallyObserved::RecursiveSearch' has a wrong offset!");
static_assert(offsetof(ActorComponentExt_IsLocallyObserved, ReturnValue) == 0x000009, "Member 'ActorComponentExt_IsLocallyObserved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OtherCharactersVerticalCollisionsHandler.OnPawnDetectorOverlapEnter
// 0x0110 (0x0110 - 0x0000)
struct OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter) == 0x000008, "Wrong alignment on OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter");
static_assert(sizeof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter) == 0x000110, "Wrong size on OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, HitComponent) == 0x000000, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, OtherActor) == 0x000008, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, OtherComp) == 0x000010, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, bFromSweep) == 0x00001C, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter, SweepResult) == 0x000020, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.OtherCharactersVerticalCollisionsHandler.OnPawnDetectorOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit) == 0x000008, "Wrong alignment on OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit");
static_assert(sizeof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit) == 0x000020, "Wrong size on OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit, HitComponent) == 0x000000, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit::HitComponent' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit, OtherActor) == 0x000008, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit::OtherActor' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit, OtherComp) == 0x000010, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit::OtherComp' has a wrong offset!");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit, OtherBodyIndex) == 0x000018, "Member 'OtherCharactersVerticalCollisionsHandler_OnPawnDetectorOverlapExit::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.OtherCharactersVerticalCollisionsHandler.SetPawnDetector
// 0x0008 (0x0008 - 0x0000)
struct OtherCharactersVerticalCollisionsHandler_SetPawnDetector final
{
public:
	class UCapsuleComponent*                      PawnDetector;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OtherCharactersVerticalCollisionsHandler_SetPawnDetector) == 0x000008, "Wrong alignment on OtherCharactersVerticalCollisionsHandler_SetPawnDetector");
static_assert(sizeof(OtherCharactersVerticalCollisionsHandler_SetPawnDetector) == 0x000008, "Wrong size on OtherCharactersVerticalCollisionsHandler_SetPawnDetector");
static_assert(offsetof(OtherCharactersVerticalCollisionsHandler_SetPawnDetector, PawnDetector) == 0x000000, "Member 'OtherCharactersVerticalCollisionsHandler_SetPawnDetector::PawnDetector' has a wrong offset!");

// Function DeadByDaylight.TutorialObjectiveController.AddObjective
// 0x000C (0x000C - 0x0000)
struct TutorialObjectiveController_AddObjective final
{
public:
	class FName                                   TutorialObjectiveId;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialObjectiveController_AddObjective) == 0x000004, "Wrong alignment on TutorialObjectiveController_AddObjective");
static_assert(sizeof(TutorialObjectiveController_AddObjective) == 0x00000C, "Wrong size on TutorialObjectiveController_AddObjective");
static_assert(offsetof(TutorialObjectiveController_AddObjective, TutorialObjectiveId) == 0x000000, "Member 'TutorialObjectiveController_AddObjective::TutorialObjectiveId' has a wrong offset!");

// Function DeadByDaylight.TutorialObjectiveController.CompleteObjective
// 0x0010 (0x0010 - 0x0000)
struct TutorialObjectiveController_CompleteObjective final
{
public:
	class FName                                   TutorialObjectiveId;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveAfterCompletion;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialObjectiveController_CompleteObjective) == 0x000004, "Wrong alignment on TutorialObjectiveController_CompleteObjective");
static_assert(sizeof(TutorialObjectiveController_CompleteObjective) == 0x000010, "Wrong size on TutorialObjectiveController_CompleteObjective");
static_assert(offsetof(TutorialObjectiveController_CompleteObjective, TutorialObjectiveId) == 0x000000, "Member 'TutorialObjectiveController_CompleteObjective::TutorialObjectiveId' has a wrong offset!");
static_assert(offsetof(TutorialObjectiveController_CompleteObjective, RemoveAfterCompletion) == 0x00000C, "Member 'TutorialObjectiveController_CompleteObjective::RemoveAfterCompletion' has a wrong offset!");

// Function DeadByDaylight.TutorialObjectiveController.RemoveObjective
// 0x000C (0x000C - 0x0000)
struct TutorialObjectiveController_RemoveObjective final
{
public:
	class FName                                   TutorialObjectiveId;                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialObjectiveController_RemoveObjective) == 0x000004, "Wrong alignment on TutorialObjectiveController_RemoveObjective");
static_assert(sizeof(TutorialObjectiveController_RemoveObjective) == 0x00000C, "Wrong size on TutorialObjectiveController_RemoveObjective");
static_assert(offsetof(TutorialObjectiveController_RemoveObjective, TutorialObjectiveId) == 0x000000, "Member 'TutorialObjectiveController_RemoveObjective::TutorialObjectiveId' has a wrong offset!");

// Function DeadByDaylight.ActionButton.SetIcon
// 0x00D0 (0x00D0 - 0x0000)
struct ActionButton_SetIcon final
{
public:
	struct FSlateBrush                            SlateBrush;                                        // 0x0000(0x00D0)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionButton_SetIcon) == 0x000010, "Wrong alignment on ActionButton_SetIcon");
static_assert(sizeof(ActionButton_SetIcon) == 0x0000D0, "Wrong size on ActionButton_SetIcon");
static_assert(offsetof(ActionButton_SetIcon, SlateBrush) == 0x000000, "Member 'ActionButton_SetIcon::SlateBrush' has a wrong offset!");

// Function DeadByDaylight.ActionButton.SetSlateBrush
// 0x00D0 (0x00D0 - 0x0000)
struct ActionButton_SetSlateBrush final
{
public:
	struct FSlateBrush                            InBrush;                                           // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionButton_SetSlateBrush) == 0x000010, "Wrong alignment on ActionButton_SetSlateBrush");
static_assert(sizeof(ActionButton_SetSlateBrush) == 0x0000D0, "Wrong size on ActionButton_SetSlateBrush");
static_assert(offsetof(ActionButton_SetSlateBrush, InBrush) == 0x000000, "Member 'ActionButton_SetSlateBrush::InBrush' has a wrong offset!");

// Function DeadByDaylight.ActionButton.SetState
// 0x0001 (0x0001 - 0x0000)
struct ActionButton_SetState final
{
public:
	EActionButtonState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActionButton_SetState) == 0x000001, "Wrong alignment on ActionButton_SetState");
static_assert(sizeof(ActionButton_SetState) == 0x000001, "Wrong size on ActionButton_SetState");
static_assert(offsetof(ActionButton_SetState, State) == 0x000000, "Member 'ActionButton_SetState::State' has a wrong offset!");

// Function DeadByDaylight.RedStainComponent.DBD_HideRedStain
// 0x0001 (0x0001 - 0x0000)
struct RedStainComponent_DBD_HideRedStain final
{
public:
	bool                                          HideStain;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RedStainComponent_DBD_HideRedStain) == 0x000001, "Wrong alignment on RedStainComponent_DBD_HideRedStain");
static_assert(sizeof(RedStainComponent_DBD_HideRedStain) == 0x000001, "Wrong size on RedStainComponent_DBD_HideRedStain");
static_assert(offsetof(RedStainComponent_DBD_HideRedStain, HideStain) == 0x000000, "Member 'RedStainComponent_DBD_HideRedStain::HideStain' has a wrong offset!");

// Function DeadByDaylight.RedStainComponent.UpdateRedStain
// 0x0008 (0x0008 - 0x0000)
struct RedStainComponent_UpdateRedStain final
{
public:
	bool                                          ShouldBeHidden;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Alpha;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RedStainComponent_UpdateRedStain) == 0x000004, "Wrong alignment on RedStainComponent_UpdateRedStain");
static_assert(sizeof(RedStainComponent_UpdateRedStain) == 0x000008, "Wrong size on RedStainComponent_UpdateRedStain");
static_assert(offsetof(RedStainComponent_UpdateRedStain, ShouldBeHidden) == 0x000000, "Member 'RedStainComponent_UpdateRedStain::ShouldBeHidden' has a wrong offset!");
static_assert(offsetof(RedStainComponent_UpdateRedStain, Alpha) == 0x000004, "Member 'RedStainComponent_UpdateRedStain::Alpha' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.BroadcastOnHighlightedElementClickedEvent
// 0x000C (0x000C - 0x0000)
struct ScreenBase_BroadcastOnHighlightedElementClickedEvent final
{
public:
	class FName                                   OnBoardingID;                                      // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_BroadcastOnHighlightedElementClickedEvent) == 0x000004, "Wrong alignment on ScreenBase_BroadcastOnHighlightedElementClickedEvent");
static_assert(sizeof(ScreenBase_BroadcastOnHighlightedElementClickedEvent) == 0x00000C, "Wrong size on ScreenBase_BroadcastOnHighlightedElementClickedEvent");
static_assert(offsetof(ScreenBase_BroadcastOnHighlightedElementClickedEvent, OnBoardingID) == 0x000000, "Member 'ScreenBase_BroadcastOnHighlightedElementClickedEvent::OnBoardingID' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.OnAnimationUpdate
// 0x0004 (0x0004 - 0x0000)
struct ScreenBase_OnAnimationUpdate final
{
public:
	int32                                         Param_IsAnimationDone;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_OnAnimationUpdate) == 0x000004, "Wrong alignment on ScreenBase_OnAnimationUpdate");
static_assert(sizeof(ScreenBase_OnAnimationUpdate) == 0x000004, "Wrong size on ScreenBase_OnAnimationUpdate");
static_assert(offsetof(ScreenBase_OnAnimationUpdate, Param_IsAnimationDone) == 0x000000, "Member 'ScreenBase_OnAnimationUpdate::Param_IsAnimationDone' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.OnAnyKey
// 0x0004 (0x0004 - 0x0000)
struct ScreenBase_OnAnyKey final
{
public:
	float                                         Code;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_OnAnyKey) == 0x000004, "Wrong alignment on ScreenBase_OnAnyKey");
static_assert(sizeof(ScreenBase_OnAnyKey) == 0x000004, "Wrong size on ScreenBase_OnAnyKey");
static_assert(offsetof(ScreenBase_OnAnyKey, Code) == 0x000000, "Member 'ScreenBase_OnAnyKey::Code' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.OnNavKey
// 0x0010 (0x0010 - 0x0000)
struct ScreenBase_OnNavKey final
{
public:
	class FString                                 NavKey;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_OnNavKey) == 0x000008, "Wrong alignment on ScreenBase_OnNavKey");
static_assert(sizeof(ScreenBase_OnNavKey) == 0x000010, "Wrong size on ScreenBase_OnNavKey");
static_assert(offsetof(ScreenBase_OnNavKey, NavKey) == 0x000000, "Member 'ScreenBase_OnNavKey::NavKey' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.OnTextInputMouseClicked
// 0x0001 (0x0001 - 0x0000)
struct ScreenBase_OnTextInputMouseClicked final
{
public:
	bool                                          IsPassword;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_OnTextInputMouseClicked) == 0x000001, "Wrong alignment on ScreenBase_OnTextInputMouseClicked");
static_assert(sizeof(ScreenBase_OnTextInputMouseClicked) == 0x000001, "Wrong size on ScreenBase_OnTextInputMouseClicked");
static_assert(offsetof(ScreenBase_OnTextInputMouseClicked, IsPassword) == 0x000000, "Member 'ScreenBase_OnTextInputMouseClicked::IsPassword' has a wrong offset!");

// Function DeadByDaylight.ScreenBase.SetFadesOut
// 0x0001 (0x0001 - 0x0000)
struct ScreenBase_SetFadesOut final
{
public:
	bool                                          FadesOut;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenBase_SetFadesOut) == 0x000001, "Wrong alignment on ScreenBase_SetFadesOut");
static_assert(sizeof(ScreenBase_SetFadesOut) == 0x000001, "Wrong size on ScreenBase_SetFadesOut");
static_assert(offsetof(ScreenBase_SetFadesOut, FadesOut) == 0x000000, "Member 'ScreenBase_SetFadesOut::FadesOut' has a wrong offset!");

// Function DeadByDaylight.GenericPopupScreen.OnChoiceSelected
// 0x0004 (0x0004 - 0x0000)
struct GenericPopupScreen_OnChoiceSelected final
{
public:
	int32                                         SelectedButtonType;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericPopupScreen_OnChoiceSelected) == 0x000004, "Wrong alignment on GenericPopupScreen_OnChoiceSelected");
static_assert(sizeof(GenericPopupScreen_OnChoiceSelected) == 0x000004, "Wrong size on GenericPopupScreen_OnChoiceSelected");
static_assert(offsetof(GenericPopupScreen_OnChoiceSelected, SelectedButtonType) == 0x000000, "Member 'GenericPopupScreen_OnChoiceSelected::SelectedButtonType' has a wrong offset!");

// Function DeadByDaylight.ReportPlayerPopupScreen.OnConfirmReportPlayer
// 0x0020 (0x0020 - 0x0000)
struct ReportPlayerPopupScreen_OnConfirmReportPlayer final
{
public:
	class FString                                 Category;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comment;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReportPlayerPopupScreen_OnConfirmReportPlayer) == 0x000008, "Wrong alignment on ReportPlayerPopupScreen_OnConfirmReportPlayer");
static_assert(sizeof(ReportPlayerPopupScreen_OnConfirmReportPlayer) == 0x000020, "Wrong size on ReportPlayerPopupScreen_OnConfirmReportPlayer");
static_assert(offsetof(ReportPlayerPopupScreen_OnConfirmReportPlayer, Category) == 0x000000, "Member 'ReportPlayerPopupScreen_OnConfirmReportPlayer::Category' has a wrong offset!");
static_assert(offsetof(ReportPlayerPopupScreen_OnConfirmReportPlayer, Comment) == 0x000010, "Member 'ReportPlayerPopupScreen_OnConfirmReportPlayer::Comment' has a wrong offset!");

// Function DeadByDaylight.ReportPlayerPopupScreen.OnTextInputMouseOver
// 0x0001 (0x0001 - 0x0000)
struct ReportPlayerPopupScreen_OnTextInputMouseOver final
{
public:
	bool                                          IsMouseOver;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReportPlayerPopupScreen_OnTextInputMouseOver) == 0x000001, "Wrong alignment on ReportPlayerPopupScreen_OnTextInputMouseOver");
static_assert(sizeof(ReportPlayerPopupScreen_OnTextInputMouseOver) == 0x000001, "Wrong size on ReportPlayerPopupScreen_OnTextInputMouseOver");
static_assert(offsetof(ReportPlayerPopupScreen_OnTextInputMouseOver, IsMouseOver) == 0x000000, "Member 'ReportPlayerPopupScreen_OnTextInputMouseOver::IsMouseOver' has a wrong offset!");

// Function DeadByDaylight.BlueprintDebugUtilities.EnsureFalseWithMessage
// 0x0010 (0x0010 - 0x0000)
struct BlueprintDebugUtilities_EnsureFalseWithMessage final
{
public:
	class FString                                 EnsureMessage;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintDebugUtilities_EnsureFalseWithMessage) == 0x000008, "Wrong alignment on BlueprintDebugUtilities_EnsureFalseWithMessage");
static_assert(sizeof(BlueprintDebugUtilities_EnsureFalseWithMessage) == 0x000010, "Wrong size on BlueprintDebugUtilities_EnsureFalseWithMessage");
static_assert(offsetof(BlueprintDebugUtilities_EnsureFalseWithMessage, EnsureMessage) == 0x000000, "Member 'BlueprintDebugUtilities_EnsureFalseWithMessage::EnsureMessage' has a wrong offset!");

// Function DeadByDaylight.BlueprintDebugUtilities.EnsureOnConditionWithMessage
// 0x0018 (0x0018 - 0x0000)
struct BlueprintDebugUtilities_EnsureOnConditionWithMessage final
{
public:
	bool                                          Condition;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EnsureMessage;                                     // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlueprintDebugUtilities_EnsureOnConditionWithMessage) == 0x000008, "Wrong alignment on BlueprintDebugUtilities_EnsureOnConditionWithMessage");
static_assert(sizeof(BlueprintDebugUtilities_EnsureOnConditionWithMessage) == 0x000018, "Wrong size on BlueprintDebugUtilities_EnsureOnConditionWithMessage");
static_assert(offsetof(BlueprintDebugUtilities_EnsureOnConditionWithMessage, Condition) == 0x000000, "Member 'BlueprintDebugUtilities_EnsureOnConditionWithMessage::Condition' has a wrong offset!");
static_assert(offsetof(BlueprintDebugUtilities_EnsureOnConditionWithMessage, EnsureMessage) == 0x000008, "Member 'BlueprintDebugUtilities_EnsureOnConditionWithMessage::EnsureMessage' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.RegisterEditorLayoutScreen
// 0x0010 (0x0010 - 0x0000)
struct UMGHudEditorScreen_RegisterEditorLayoutScreen final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGHudEditorLayoutScreen*              Screen;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_RegisterEditorLayoutScreen) == 0x000008, "Wrong alignment on UMGHudEditorScreen_RegisterEditorLayoutScreen");
static_assert(sizeof(UMGHudEditorScreen_RegisterEditorLayoutScreen) == 0x000010, "Wrong size on UMGHudEditorScreen_RegisterEditorLayoutScreen");
static_assert(offsetof(UMGHudEditorScreen_RegisterEditorLayoutScreen, Role) == 0x000000, "Member 'UMGHudEditorScreen_RegisterEditorLayoutScreen::Role' has a wrong offset!");
static_assert(offsetof(UMGHudEditorScreen_RegisterEditorLayoutScreen, Screen) == 0x000008, "Member 'UMGHudEditorScreen_RegisterEditorLayoutScreen::Screen' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.SetEditorDropErrorOverlapSound
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorScreen_SetEditorDropErrorOverlapSound final
{
public:
	class UAkAudioEvent*                          OnDropOverlapSound;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_SetEditorDropErrorOverlapSound) == 0x000008, "Wrong alignment on UMGHudEditorScreen_SetEditorDropErrorOverlapSound");
static_assert(sizeof(UMGHudEditorScreen_SetEditorDropErrorOverlapSound) == 0x000008, "Wrong size on UMGHudEditorScreen_SetEditorDropErrorOverlapSound");
static_assert(offsetof(UMGHudEditorScreen_SetEditorDropErrorOverlapSound, OnDropOverlapSound) == 0x000000, "Member 'UMGHudEditorScreen_SetEditorDropErrorOverlapSound::OnDropOverlapSound' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.SetWidgets
// 0x0010 (0x0010 - 0x0000)
struct UMGHudEditorScreen_SetWidgets final
{
public:
	class UUMGHudEditorLayoutWidget*              HudEditorLayoutWidget;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUMGHudEditorVersionWidget*             VersionSwapWidget;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_SetWidgets) == 0x000008, "Wrong alignment on UMGHudEditorScreen_SetWidgets");
static_assert(sizeof(UMGHudEditorScreen_SetWidgets) == 0x000010, "Wrong size on UMGHudEditorScreen_SetWidgets");
static_assert(offsetof(UMGHudEditorScreen_SetWidgets, HudEditorLayoutWidget) == 0x000000, "Member 'UMGHudEditorScreen_SetWidgets::HudEditorLayoutWidget' has a wrong offset!");
static_assert(offsetof(UMGHudEditorScreen_SetWidgets, VersionSwapWidget) == 0x000008, "Member 'UMGHudEditorScreen_SetWidgets::VersionSwapWidget' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.ShowHudLayout
// 0x0001 (0x0001 - 0x0000)
struct UMGHudEditorScreen_ShowHudLayout final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_ShowHudLayout) == 0x000001, "Wrong alignment on UMGHudEditorScreen_ShowHudLayout");
static_assert(sizeof(UMGHudEditorScreen_ShowHudLayout) == 0x000001, "Wrong size on UMGHudEditorScreen_ShowHudLayout");
static_assert(offsetof(UMGHudEditorScreen_ShowHudLayout, Role) == 0x000000, "Member 'UMGHudEditorScreen_ShowHudLayout::Role' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorScreen.GetVersionSwapWidget
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorScreen_GetVersionSwapWidget final
{
public:
	class UUMGHudEditorVersionWidget*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorScreen_GetVersionSwapWidget) == 0x000008, "Wrong alignment on UMGHudEditorScreen_GetVersionSwapWidget");
static_assert(sizeof(UMGHudEditorScreen_GetVersionSwapWidget) == 0x000008, "Wrong size on UMGHudEditorScreen_GetVersionSwapWidget");
static_assert(offsetof(UMGHudEditorScreen_GetVersionSwapWidget, ReturnValue) == 0x000000, "Member 'UMGHudEditorScreen_GetVersionSwapWidget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CameraAttachmentComponent.IsAttached
// 0x0001 (0x0001 - 0x0000)
struct CameraAttachmentComponent_IsAttached final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraAttachmentComponent_IsAttached) == 0x000001, "Wrong alignment on CameraAttachmentComponent_IsAttached");
static_assert(sizeof(CameraAttachmentComponent_IsAttached) == 0x000001, "Wrong size on CameraAttachmentComponent_IsAttached");
static_assert(offsetof(CameraAttachmentComponent_IsAttached, ReturnValue) == 0x000000, "Member 'CameraAttachmentComponent_IsAttached::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorClipperComponent.OnCameraChanged
// 0x0001 (0x0001 - 0x0000)
struct ActorClipperComponent_OnCameraChanged final
{
public:
	EDBDCameraSocketID                            SocketId;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorClipperComponent_OnCameraChanged) == 0x000001, "Wrong alignment on ActorClipperComponent_OnCameraChanged");
static_assert(sizeof(ActorClipperComponent_OnCameraChanged) == 0x000001, "Wrong size on ActorClipperComponent_OnCameraChanged");
static_assert(offsetof(ActorClipperComponent_OnCameraChanged, SocketId) == 0x000000, "Member 'ActorClipperComponent_OnCameraChanged::SocketId' has a wrong offset!");

// Function DeadByDaylight.ActorClipperComponent.OnOwnerLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct ActorClipperComponent_OnOwnerLocallyObservedChanged final
{
public:
	bool                                          LocallyObserved;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorClipperComponent_OnOwnerLocallyObservedChanged) == 0x000001, "Wrong alignment on ActorClipperComponent_OnOwnerLocallyObservedChanged");
static_assert(sizeof(ActorClipperComponent_OnOwnerLocallyObservedChanged) == 0x000001, "Wrong size on ActorClipperComponent_OnOwnerLocallyObservedChanged");
static_assert(offsetof(ActorClipperComponent_OnOwnerLocallyObservedChanged, LocallyObserved) == 0x000000, "Member 'ActorClipperComponent_OnOwnerLocallyObservedChanged::LocallyObserved' has a wrong offset!");

// Function DeadByDaylight.ActorClipperComponent.SetPrimitiveCollection
// 0x0008 (0x0008 - 0x0000)
struct ActorClipperComponent_SetPrimitiveCollection final
{
public:
	const class UPrimitiveCollection*             Clippables;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorClipperComponent_SetPrimitiveCollection) == 0x000008, "Wrong alignment on ActorClipperComponent_SetPrimitiveCollection");
static_assert(sizeof(ActorClipperComponent_SetPrimitiveCollection) == 0x000008, "Wrong size on ActorClipperComponent_SetPrimitiveCollection");
static_assert(offsetof(ActorClipperComponent_SetPrimitiveCollection, Clippables) == 0x000000, "Member 'ActorClipperComponent_SetPrimitiveCollection::Clippables' has a wrong offset!");

// Function DeadByDaylight.TokenProvider.GetTokenProvider
// 0x0008 (0x0008 - 0x0000)
struct TokenProvider_GetTokenProvider final
{
public:
	class UTokenCounter*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenProvider_GetTokenProvider) == 0x000008, "Wrong alignment on TokenProvider_GetTokenProvider");
static_assert(sizeof(TokenProvider_GetTokenProvider) == 0x000008, "Wrong size on TokenProvider_GetTokenProvider");
static_assert(offsetof(TokenProvider_GetTokenProvider, ReturnValue) == 0x000000, "Member 'TokenProvider_GetTokenProvider::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorDetectorComponent.OnOverlapEnter
// 0x0110 (0x0110 - 0x0000)
struct ActorDetectorComponent_OnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorDetectorComponent_OnOverlapEnter) == 0x000008, "Wrong alignment on ActorDetectorComponent_OnOverlapEnter");
static_assert(sizeof(ActorDetectorComponent_OnOverlapEnter) == 0x000110, "Wrong size on ActorDetectorComponent_OnOverlapEnter");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, HitComponent) == 0x000000, "Member 'ActorDetectorComponent_OnOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, OtherActor) == 0x000008, "Member 'ActorDetectorComponent_OnOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, OtherComp) == 0x000010, "Member 'ActorDetectorComponent_OnOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'ActorDetectorComponent_OnOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, bFromSweep) == 0x00001C, "Member 'ActorDetectorComponent_OnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(ActorDetectorComponent_OnOverlapEnter, SweepResult) == 0x000020, "Member 'ActorDetectorComponent_OnOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.ActorDetectorComponent.SetDetectionPrimitive
// 0x0008 (0x0008 - 0x0000)
struct ActorDetectorComponent_SetDetectionPrimitive final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong alignment on ActorDetectorComponent_SetDetectionPrimitive");
static_assert(sizeof(ActorDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong size on ActorDetectorComponent_SetDetectionPrimitive");
static_assert(offsetof(ActorDetectorComponent_SetDetectionPrimitive, Primitive) == 0x000000, "Member 'ActorDetectorComponent_SetDetectionPrimitive::Primitive' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_Add
// 0x0010 (0x0010 - 0x0000)
struct ActorKnowledgeCollection_Authority_Add final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorKnowledgeCollection_Authority_Add) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Authority_Add");
static_assert(sizeof(ActorKnowledgeCollection_Authority_Add) == 0x000010, "Wrong size on ActorKnowledgeCollection_Authority_Add");
static_assert(offsetof(ActorKnowledgeCollection_Authority_Add, Actor) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_Add::Actor' has a wrong offset!");
static_assert(offsetof(ActorKnowledgeCollection_Authority_Add, ReturnValue) == 0x000008, "Member 'ActorKnowledgeCollection_Authority_Add::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_Append
// 0x0010 (0x0010 - 0x0000)
struct ActorKnowledgeCollection_Authority_Append final
{
public:
	TArray<class AActor*>                         Actors;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_Append) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Authority_Append");
static_assert(sizeof(ActorKnowledgeCollection_Authority_Append) == 0x000010, "Wrong size on ActorKnowledgeCollection_Authority_Append");
static_assert(offsetof(ActorKnowledgeCollection_Authority_Append, Actors) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_Append::Actors' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_Remove
// 0x0008 (0x0008 - 0x0000)
struct ActorKnowledgeCollection_Authority_Remove final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_Remove) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Authority_Remove");
static_assert(sizeof(ActorKnowledgeCollection_Authority_Remove) == 0x000008, "Wrong size on ActorKnowledgeCollection_Authority_Remove");
static_assert(offsetof(ActorKnowledgeCollection_Authority_Remove, Actor) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_Remove::Actor' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_SetAvailable
// 0x0001 (0x0001 - 0x0000)
struct ActorKnowledgeCollection_Authority_SetAvailable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_SetAvailable) == 0x000001, "Wrong alignment on ActorKnowledgeCollection_Authority_SetAvailable");
static_assert(sizeof(ActorKnowledgeCollection_Authority_SetAvailable) == 0x000001, "Wrong size on ActorKnowledgeCollection_Authority_SetAvailable");
static_assert(offsetof(ActorKnowledgeCollection_Authority_SetAvailable, Value) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_SetAvailable::Value' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_SetPossessor
// 0x0008 (0x0008 - 0x0000)
struct ActorKnowledgeCollection_Authority_SetPossessor final
{
public:
	class ACharacter*                             Possessor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_SetPossessor) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Authority_SetPossessor");
static_assert(sizeof(ActorKnowledgeCollection_Authority_SetPossessor) == 0x000008, "Wrong size on ActorKnowledgeCollection_Authority_SetPossessor");
static_assert(offsetof(ActorKnowledgeCollection_Authority_SetPossessor, Possessor) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_SetPossessor::Possessor' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Authority_SetSharingType
// 0x0001 (0x0001 - 0x0000)
struct ActorKnowledgeCollection_Authority_SetSharingType final
{
public:
	EKnowledgeSharingType                         Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Authority_SetSharingType) == 0x000001, "Wrong alignment on ActorKnowledgeCollection_Authority_SetSharingType");
static_assert(sizeof(ActorKnowledgeCollection_Authority_SetSharingType) == 0x000001, "Wrong size on ActorKnowledgeCollection_Authority_SetSharingType");
static_assert(offsetof(ActorKnowledgeCollection_Authority_SetSharingType, Value) == 0x000000, "Member 'ActorKnowledgeCollection_Authority_SetSharingType::Value' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Local_SetAvailable
// 0x0001 (0x0001 - 0x0000)
struct ActorKnowledgeCollection_Local_SetAvailable final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ActorKnowledgeCollection_Local_SetAvailable) == 0x000001, "Wrong alignment on ActorKnowledgeCollection_Local_SetAvailable");
static_assert(sizeof(ActorKnowledgeCollection_Local_SetAvailable) == 0x000001, "Wrong size on ActorKnowledgeCollection_Local_SetAvailable");
static_assert(offsetof(ActorKnowledgeCollection_Local_SetAvailable, Value) == 0x000000, "Member 'ActorKnowledgeCollection_Local_SetAvailable::Value' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.Contains
// 0x0010 (0x0010 - 0x0000)
struct ActorKnowledgeCollection_Contains final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorKnowledgeCollection_Contains) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_Contains");
static_assert(sizeof(ActorKnowledgeCollection_Contains) == 0x000010, "Wrong size on ActorKnowledgeCollection_Contains");
static_assert(offsetof(ActorKnowledgeCollection_Contains, Actor) == 0x000000, "Member 'ActorKnowledgeCollection_Contains::Actor' has a wrong offset!");
static_assert(offsetof(ActorKnowledgeCollection_Contains, ReturnValue) == 0x000008, "Member 'ActorKnowledgeCollection_Contains::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ActorKnowledgeCollection.IsAvailable
// 0x0010 (0x0010 - 0x0000)
struct ActorKnowledgeCollection_IsAvailable final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ActorKnowledgeCollection_IsAvailable) == 0x000008, "Wrong alignment on ActorKnowledgeCollection_IsAvailable");
static_assert(sizeof(ActorKnowledgeCollection_IsAvailable) == 0x000010, "Wrong size on ActorKnowledgeCollection_IsAvailable");
static_assert(offsetof(ActorKnowledgeCollection_IsAvailable, Character) == 0x000000, "Member 'ActorKnowledgeCollection_IsAvailable::Character' has a wrong offset!");
static_assert(offsetof(ActorKnowledgeCollection_IsAvailable, ReturnValue) == 0x000008, "Member 'ActorKnowledgeCollection_IsAvailable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillerAudioMenuReactionComponent.LobbyKillerReactionSpecificSurvivorSFX
// 0x0010 (0x0010 - 0x0000)
struct KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX final
{
public:
	TArray<class ADBDMenuPlayer*>                 MenuPlayers;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong alignment on KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX");
static_assert(sizeof(KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX) == 0x000010, "Wrong size on KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX");
static_assert(offsetof(KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX, MenuPlayers) == 0x000000, "Member 'KillerAudioMenuReactionComponent_LobbyKillerReactionSpecificSurvivorSFX::MenuPlayers' has a wrong offset!");

// Function DeadByDaylight.CamperExposerInstance.SetIsInteriorBP
// 0x0001 (0x0001 - 0x0000)
struct CamperExposerInstance_SetIsInteriorBP final
{
public:
	bool                                          Interior;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperExposerInstance_SetIsInteriorBP) == 0x000001, "Wrong alignment on CamperExposerInstance_SetIsInteriorBP");
static_assert(sizeof(CamperExposerInstance_SetIsInteriorBP) == 0x000001, "Wrong size on CamperExposerInstance_SetIsInteriorBP");
static_assert(offsetof(CamperExposerInstance_SetIsInteriorBP, Interior) == 0x000000, "Member 'CamperExposerInstance_SetIsInteriorBP::Interior' has a wrong offset!");

// Function DeadByDaylight.CamperExposerInstance.StartExitSequence
// 0x0001 (0x0001 - 0x0000)
struct CamperExposerInstance_StartExitSequence final
{
public:
	bool                                          WithRandomDelay;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperExposerInstance_StartExitSequence) == 0x000001, "Wrong alignment on CamperExposerInstance_StartExitSequence");
static_assert(sizeof(CamperExposerInstance_StartExitSequence) == 0x000001, "Wrong size on CamperExposerInstance_StartExitSequence");
static_assert(offsetof(CamperExposerInstance_StartExitSequence, WithRandomDelay) == 0x000000, "Member 'CamperExposerInstance_StartExitSequence::WithRandomDelay' has a wrong offset!");

// Function DeadByDaylight.CamperExposerInstance.StartSpawnSequence
// 0x0001 (0x0001 - 0x0000)
struct CamperExposerInstance_StartSpawnSequence final
{
public:
	bool                                          WithRandomDelay;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperExposerInstance_StartSpawnSequence) == 0x000001, "Wrong alignment on CamperExposerInstance_StartSpawnSequence");
static_assert(sizeof(CamperExposerInstance_StartSpawnSequence) == 0x000001, "Wrong size on CamperExposerInstance_StartSpawnSequence");
static_assert(offsetof(CamperExposerInstance_StartSpawnSequence, WithRandomDelay) == 0x000000, "Member 'CamperExposerInstance_StartSpawnSequence::WithRandomDelay' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.AddCameraToSocket
// 0x0010 (0x0010 - 0x0000)
struct CameraHandlerComponent_AddCameraToSocket final
{
public:
	EDBDCameraSocketID                            Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Camera;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_AddCameraToSocket) == 0x000008, "Wrong alignment on CameraHandlerComponent_AddCameraToSocket");
static_assert(sizeof(CameraHandlerComponent_AddCameraToSocket) == 0x000010, "Wrong size on CameraHandlerComponent_AddCameraToSocket");
static_assert(offsetof(CameraHandlerComponent_AddCameraToSocket, Mode) == 0x000000, "Member 'CameraHandlerComponent_AddCameraToSocket::Mode' has a wrong offset!");
static_assert(offsetof(CameraHandlerComponent_AddCameraToSocket, Camera) == 0x000008, "Member 'CameraHandlerComponent_AddCameraToSocket::Camera' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.GetCurrentCamera
// 0x0008 (0x0008 - 0x0000)
struct CameraHandlerComponent_GetCurrentCamera final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_GetCurrentCamera) == 0x000008, "Wrong alignment on CameraHandlerComponent_GetCurrentCamera");
static_assert(sizeof(CameraHandlerComponent_GetCurrentCamera) == 0x000008, "Wrong size on CameraHandlerComponent_GetCurrentCamera");
static_assert(offsetof(CameraHandlerComponent_GetCurrentCamera, ReturnValue) == 0x000000, "Member 'CameraHandlerComponent_GetCurrentCamera::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.GetSocketID
// 0x0001 (0x0001 - 0x0000)
struct CameraHandlerComponent_GetSocketID final
{
public:
	EDBDCameraSocketID                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_GetSocketID) == 0x000001, "Wrong alignment on CameraHandlerComponent_GetSocketID");
static_assert(sizeof(CameraHandlerComponent_GetSocketID) == 0x000001, "Wrong size on CameraHandlerComponent_GetSocketID");
static_assert(offsetof(CameraHandlerComponent_GetSocketID, ReturnValue) == 0x000000, "Member 'CameraHandlerComponent_GetSocketID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.OnFirstPersonViewChanged
// 0x0001 (0x0001 - 0x0000)
struct CameraHandlerComponent_OnFirstPersonViewChanged final
{
public:
	bool                                          IsFirstPerson;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_OnFirstPersonViewChanged) == 0x000001, "Wrong alignment on CameraHandlerComponent_OnFirstPersonViewChanged");
static_assert(sizeof(CameraHandlerComponent_OnFirstPersonViewChanged) == 0x000001, "Wrong size on CameraHandlerComponent_OnFirstPersonViewChanged");
static_assert(offsetof(CameraHandlerComponent_OnFirstPersonViewChanged, IsFirstPerson) == 0x000000, "Member 'CameraHandlerComponent_OnFirstPersonViewChanged::IsFirstPerson' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.PlayVFXOnCurrentCamera
// 0x0008 (0x0008 - 0x0000)
struct CameraHandlerComponent_PlayVFXOnCurrentCamera final
{
public:
	class UParticleSystemComponent*               Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_PlayVFXOnCurrentCamera) == 0x000008, "Wrong alignment on CameraHandlerComponent_PlayVFXOnCurrentCamera");
static_assert(sizeof(CameraHandlerComponent_PlayVFXOnCurrentCamera) == 0x000008, "Wrong size on CameraHandlerComponent_PlayVFXOnCurrentCamera");
static_assert(offsetof(CameraHandlerComponent_PlayVFXOnCurrentCamera, Component) == 0x000000, "Member 'CameraHandlerComponent_PlayVFXOnCurrentCamera::Component' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.SetAttachmentComponent
// 0x0008 (0x0008 - 0x0000)
struct CameraHandlerComponent_SetAttachmentComponent final
{
public:
	class USceneComponent*                        AttachmentComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_SetAttachmentComponent) == 0x000008, "Wrong alignment on CameraHandlerComponent_SetAttachmentComponent");
static_assert(sizeof(CameraHandlerComponent_SetAttachmentComponent) == 0x000008, "Wrong size on CameraHandlerComponent_SetAttachmentComponent");
static_assert(offsetof(CameraHandlerComponent_SetAttachmentComponent, AttachmentComponent) == 0x000000, "Member 'CameraHandlerComponent_SetAttachmentComponent::AttachmentComponent' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.SetSocketID
// 0x0001 (0x0001 - 0x0000)
struct CameraHandlerComponent_SetSocketID final
{
public:
	EDBDCameraSocketID                            Mode;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_SetSocketID) == 0x000001, "Wrong alignment on CameraHandlerComponent_SetSocketID");
static_assert(sizeof(CameraHandlerComponent_SetSocketID) == 0x000001, "Wrong size on CameraHandlerComponent_SetSocketID");
static_assert(offsetof(CameraHandlerComponent_SetSocketID, Mode) == 0x000000, "Member 'CameraHandlerComponent_SetSocketID::Mode' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.GetCameraComponentBySocket
// 0x0010 (0x0010 - 0x0000)
struct CameraHandlerComponent_GetCameraComponentBySocket final
{
public:
	EDBDCameraSocketID                            Socket;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_GetCameraComponentBySocket) == 0x000008, "Wrong alignment on CameraHandlerComponent_GetCameraComponentBySocket");
static_assert(sizeof(CameraHandlerComponent_GetCameraComponentBySocket) == 0x000010, "Wrong size on CameraHandlerComponent_GetCameraComponentBySocket");
static_assert(offsetof(CameraHandlerComponent_GetCameraComponentBySocket, Socket) == 0x000000, "Member 'CameraHandlerComponent_GetCameraComponentBySocket::Socket' has a wrong offset!");
static_assert(offsetof(CameraHandlerComponent_GetCameraComponentBySocket, ReturnValue) == 0x000008, "Member 'CameraHandlerComponent_GetCameraComponentBySocket::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CameraHandlerComponent.GetDesiredFOV
// 0x0004 (0x0004 - 0x0000)
struct CameraHandlerComponent_GetDesiredFOV final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraHandlerComponent_GetDesiredFOV) == 0x000004, "Wrong alignment on CameraHandlerComponent_GetDesiredFOV");
static_assert(sizeof(CameraHandlerComponent_GetDesiredFOV) == 0x000004, "Wrong size on CameraHandlerComponent_GetDesiredFOV");
static_assert(offsetof(CameraHandlerComponent_GetDesiredFOV, ReturnValue) == 0x000000, "Member 'CameraHandlerComponent_GetDesiredFOV::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ConfigurableCollisionComponent.OnBeginOverlap
// 0x0110 (0x0110 - 0x0000)
struct ConfigurableCollisionComponent_OnBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConfigurableCollisionComponent_OnBeginOverlap) == 0x000008, "Wrong alignment on ConfigurableCollisionComponent_OnBeginOverlap");
static_assert(sizeof(ConfigurableCollisionComponent_OnBeginOverlap) == 0x000110, "Wrong size on ConfigurableCollisionComponent_OnBeginOverlap");
static_assert(offsetof(ConfigurableCollisionComponent_OnBeginOverlap, OverlappedComponent) == 0x000000, "Member 'ConfigurableCollisionComponent_OnBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ConfigurableCollisionComponent_OnBeginOverlap, OtherActor) == 0x000008, "Member 'ConfigurableCollisionComponent_OnBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ConfigurableCollisionComponent_OnBeginOverlap, OtherComp) == 0x000010, "Member 'ConfigurableCollisionComponent_OnBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ConfigurableCollisionComponent_OnBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'ConfigurableCollisionComponent_OnBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ConfigurableCollisionComponent_OnBeginOverlap, FromSweep) == 0x00001C, "Member 'ConfigurableCollisionComponent_OnBeginOverlap::FromSweep' has a wrong offset!");
static_assert(offsetof(ConfigurableCollisionComponent_OnBeginOverlap, SweepResult) == 0x000020, "Member 'ConfigurableCollisionComponent_OnBeginOverlap::SweepResult' has a wrong offset!");

// Function DeadByDaylight.ConfigurableCollisionComponent.OnEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct ConfigurableCollisionComponent_OnEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ConfigurableCollisionComponent_OnEndOverlap) == 0x000008, "Wrong alignment on ConfigurableCollisionComponent_OnEndOverlap");
static_assert(sizeof(ConfigurableCollisionComponent_OnEndOverlap) == 0x000020, "Wrong size on ConfigurableCollisionComponent_OnEndOverlap");
static_assert(offsetof(ConfigurableCollisionComponent_OnEndOverlap, OverlappedComponent) == 0x000000, "Member 'ConfigurableCollisionComponent_OnEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(ConfigurableCollisionComponent_OnEndOverlap, OtherActor) == 0x000008, "Member 'ConfigurableCollisionComponent_OnEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(ConfigurableCollisionComponent_OnEndOverlap, OtherComp) == 0x000010, "Member 'ConfigurableCollisionComponent_OnEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(ConfigurableCollisionComponent_OnEndOverlap, OtherBodyIndex) == 0x000018, "Member 'ConfigurableCollisionComponent_OnEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviourInteractWithActor.OnMovementFinished
// 0x0008 (0x0008 - 0x0000)
struct AICharacterBehaviourInteractWithActor_OnMovementFinished final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterBehaviourInteractWithActor_OnMovementFinished) == 0x000004, "Wrong alignment on AICharacterBehaviourInteractWithActor_OnMovementFinished");
static_assert(sizeof(AICharacterBehaviourInteractWithActor_OnMovementFinished) == 0x000008, "Wrong size on AICharacterBehaviourInteractWithActor_OnMovementFinished");
static_assert(offsetof(AICharacterBehaviourInteractWithActor_OnMovementFinished, RequestID) == 0x000000, "Member 'AICharacterBehaviourInteractWithActor_OnMovementFinished::RequestID' has a wrong offset!");
static_assert(offsetof(AICharacterBehaviourInteractWithActor_OnMovementFinished, Result) == 0x000004, "Member 'AICharacterBehaviourInteractWithActor_OnMovementFinished::Result' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviourInteractWithActorData.Init
// 0x0010 (0x0010 - 0x0000)
struct AICharacterBehaviourInteractWithActorData_Init final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       Param_CharacterMovementType;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_UsePathfinding;                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterBehaviourInteractWithActorData_Init) == 0x000008, "Wrong alignment on AICharacterBehaviourInteractWithActorData_Init");
static_assert(sizeof(AICharacterBehaviourInteractWithActorData_Init) == 0x000010, "Wrong size on AICharacterBehaviourInteractWithActorData_Init");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_Init, Actor) == 0x000000, "Member 'AICharacterBehaviourInteractWithActorData_Init::Actor' has a wrong offset!");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_Init, Param_CharacterMovementType) == 0x000008, "Member 'AICharacterBehaviourInteractWithActorData_Init::Param_CharacterMovementType' has a wrong offset!");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_Init, Param_UsePathfinding) == 0x000009, "Member 'AICharacterBehaviourInteractWithActorData_Init::Param_UsePathfinding' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviourInteractWithActorData.WatchGameEventType
// 0x000C (0x000C - 0x0000)
struct AICharacterBehaviourInteractWithActorData_WatchGameEventType final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviourInteractWithActorData_WatchGameEventType) == 0x000004, "Wrong alignment on AICharacterBehaviourInteractWithActorData_WatchGameEventType");
static_assert(sizeof(AICharacterBehaviourInteractWithActorData_WatchGameEventType) == 0x00000C, "Wrong size on AICharacterBehaviourInteractWithActorData_WatchGameEventType");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_WatchGameEventType, GameEventType) == 0x000000, "Member 'AICharacterBehaviourInteractWithActorData_WatchGameEventType::GameEventType' has a wrong offset!");

// Function DeadByDaylight.AICharacterBehaviourInteractWithActorData.WatchGameEventTypes
// 0x0010 (0x0010 - 0x0000)
struct AICharacterBehaviourInteractWithActorData_WatchGameEventTypes final
{
public:
	TArray<struct FGameplayTag>                   GameEventTypes;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterBehaviourInteractWithActorData_WatchGameEventTypes) == 0x000008, "Wrong alignment on AICharacterBehaviourInteractWithActorData_WatchGameEventTypes");
static_assert(sizeof(AICharacterBehaviourInteractWithActorData_WatchGameEventTypes) == 0x000010, "Wrong size on AICharacterBehaviourInteractWithActorData_WatchGameEventTypes");
static_assert(offsetof(AICharacterBehaviourInteractWithActorData_WatchGameEventTypes, GameEventTypes) == 0x000000, "Member 'AICharacterBehaviourInteractWithActorData_WatchGameEventTypes::GameEventTypes' has a wrong offset!");

// Function DeadByDaylight.AICharacterEscapeCarriedData.Init
// 0x0001 (0x0001 - 0x0000)
struct AICharacterEscapeCarriedData_Init final
{
public:
	bool                                          PreventWiggleSuccess;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterEscapeCarriedData_Init) == 0x000001, "Wrong alignment on AICharacterEscapeCarriedData_Init");
static_assert(sizeof(AICharacterEscapeCarriedData_Init) == 0x000001, "Wrong size on AICharacterEscapeCarriedData_Init");
static_assert(offsetof(AICharacterEscapeCarriedData_Init, PreventWiggleSuccess) == 0x000000, "Member 'AICharacterEscapeCarriedData_Init::PreventWiggleSuccess' has a wrong offset!");

// Function DeadByDaylight.CharacterEvasionBehaviourData.Init
// 0x0020 (0x0020 - 0x0000)
struct CharacterEvasionBehaviourData_Init final
{
public:
	class AActor*                                 Hunter;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         EscapePoints;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MinEscapeDist;                                     // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterEvasionBehaviourData_Init) == 0x000008, "Wrong alignment on CharacterEvasionBehaviourData_Init");
static_assert(sizeof(CharacterEvasionBehaviourData_Init) == 0x000020, "Wrong size on CharacterEvasionBehaviourData_Init");
static_assert(offsetof(CharacterEvasionBehaviourData_Init, Hunter) == 0x000000, "Member 'CharacterEvasionBehaviourData_Init::Hunter' has a wrong offset!");
static_assert(offsetof(CharacterEvasionBehaviourData_Init, EscapePoints) == 0x000008, "Member 'CharacterEvasionBehaviourData_Init::EscapePoints' has a wrong offset!");
static_assert(offsetof(CharacterEvasionBehaviourData_Init, MinEscapeDist) == 0x000018, "Member 'CharacterEvasionBehaviourData_Init::MinEscapeDist' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetCrouchCapsuleHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct CamperSlashableComponent_SetCrouchCapsuleHalfHeight final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetCrouchCapsuleHalfHeight) == 0x000004, "Wrong alignment on CamperSlashableComponent_SetCrouchCapsuleHalfHeight");
static_assert(sizeof(CamperSlashableComponent_SetCrouchCapsuleHalfHeight) == 0x000004, "Wrong size on CamperSlashableComponent_SetCrouchCapsuleHalfHeight");
static_assert(offsetof(CamperSlashableComponent_SetCrouchCapsuleHalfHeight, Height) == 0x000000, "Member 'CamperSlashableComponent_SetCrouchCapsuleHalfHeight::Height' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetHookSlashableZone
// 0x0008 (0x0008 - 0x0000)
struct CamperSlashableComponent_SetHookSlashableZone final
{
public:
	class UCapsuleComponent*                      Zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetHookSlashableZone) == 0x000008, "Wrong alignment on CamperSlashableComponent_SetHookSlashableZone");
static_assert(sizeof(CamperSlashableComponent_SetHookSlashableZone) == 0x000008, "Wrong size on CamperSlashableComponent_SetHookSlashableZone");
static_assert(offsetof(CamperSlashableComponent_SetHookSlashableZone, Zone) == 0x000000, "Member 'CamperSlashableComponent_SetHookSlashableZone::Zone' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetSlashableZone
// 0x0008 (0x0008 - 0x0000)
struct CamperSlashableComponent_SetSlashableZone final
{
public:
	class UCapsuleComponent*                      Zone;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetSlashableZone) == 0x000008, "Wrong alignment on CamperSlashableComponent_SetSlashableZone");
static_assert(sizeof(CamperSlashableComponent_SetSlashableZone) == 0x000008, "Wrong size on CamperSlashableComponent_SetSlashableZone");
static_assert(offsetof(CamperSlashableComponent_SetSlashableZone, Zone) == 0x000000, "Member 'CamperSlashableComponent_SetSlashableZone::Zone' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetStandingCapsuleHalfHeight
// 0x0004 (0x0004 - 0x0000)
struct CamperSlashableComponent_SetStandingCapsuleHalfHeight final
{
public:
	float                                         Height;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetStandingCapsuleHalfHeight) == 0x000004, "Wrong alignment on CamperSlashableComponent_SetStandingCapsuleHalfHeight");
static_assert(sizeof(CamperSlashableComponent_SetStandingCapsuleHalfHeight) == 0x000004, "Wrong size on CamperSlashableComponent_SetStandingCapsuleHalfHeight");
static_assert(offsetof(CamperSlashableComponent_SetStandingCapsuleHalfHeight, Height) == 0x000000, "Member 'CamperSlashableComponent_SetStandingCapsuleHalfHeight::Height' has a wrong offset!");

// Function DeadByDaylight.CamperSlashableComponent.SetUseCrouchSlashableCapsule
// 0x0001 (0x0001 - 0x0000)
struct CamperSlashableComponent_SetUseCrouchSlashableCapsule final
{
public:
	bool                                          UseCrouchCapsule;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperSlashableComponent_SetUseCrouchSlashableCapsule) == 0x000001, "Wrong alignment on CamperSlashableComponent_SetUseCrouchSlashableCapsule");
static_assert(sizeof(CamperSlashableComponent_SetUseCrouchSlashableCapsule) == 0x000001, "Wrong size on CamperSlashableComponent_SetUseCrouchSlashableCapsule");
static_assert(offsetof(CamperSlashableComponent_SetUseCrouchSlashableCapsule, UseCrouchCapsule) == 0x000000, "Member 'CamperSlashableComponent_SetUseCrouchSlashableCapsule::UseCrouchCapsule' has a wrong offset!");

// Function DeadByDaylight.AICharacterHideInLockerBehaviourData.Init
// 0x0010 (0x0010 - 0x0000)
struct AICharacterHideInLockerBehaviourData_Init final
{
public:
	class ALocker*                                Locker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       Param_CharacterMovementType;                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterHideInLockerBehaviourData_Init) == 0x000008, "Wrong alignment on AICharacterHideInLockerBehaviourData_Init");
static_assert(sizeof(AICharacterHideInLockerBehaviourData_Init) == 0x000010, "Wrong size on AICharacterHideInLockerBehaviourData_Init");
static_assert(offsetof(AICharacterHideInLockerBehaviourData_Init, Locker) == 0x000000, "Member 'AICharacterHideInLockerBehaviourData_Init::Locker' has a wrong offset!");
static_assert(offsetof(AICharacterHideInLockerBehaviourData_Init, Param_CharacterMovementType) == 0x000008, "Member 'AICharacterHideInLockerBehaviourData_Init::Param_CharacterMovementType' has a wrong offset!");

// Function DeadByDaylight.AICharacterHideInLockerBehaviour.OnMovementFinished
// 0x0008 (0x0008 - 0x0000)
struct AICharacterHideInLockerBehaviour_OnMovementFinished final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterHideInLockerBehaviour_OnMovementFinished) == 0x000004, "Wrong alignment on AICharacterHideInLockerBehaviour_OnMovementFinished");
static_assert(sizeof(AICharacterHideInLockerBehaviour_OnMovementFinished) == 0x000008, "Wrong size on AICharacterHideInLockerBehaviour_OnMovementFinished");
static_assert(offsetof(AICharacterHideInLockerBehaviour_OnMovementFinished, RequestID) == 0x000000, "Member 'AICharacterHideInLockerBehaviour_OnMovementFinished::RequestID' has a wrong offset!");
static_assert(offsetof(AICharacterHideInLockerBehaviour_OnMovementFinished, Result) == 0x000004, "Member 'AICharacterHideInLockerBehaviour_OnMovementFinished::Result' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetAllCharacters
// 0x0058 (0x0058 - 0x0000)
struct CharacterCollectionUtilities_GetAllCharacters final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class ACharacter*>                       ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetAllCharacters) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetAllCharacters");
static_assert(sizeof(CharacterCollectionUtilities_GetAllCharacters) == 0x000058, "Wrong size on CharacterCollectionUtilities_GetAllCharacters");
static_assert(offsetof(CharacterCollectionUtilities_GetAllCharacters, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetAllCharacters::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetAllCharacters, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetAllCharacters::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetAllDBDPlayers
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetAllDBDPlayers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetAllDBDPlayers) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetAllDBDPlayers");
static_assert(sizeof(CharacterCollectionUtilities_GetAllDBDPlayers) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetAllDBDPlayers");
static_assert(offsetof(CharacterCollectionUtilities_GetAllDBDPlayers, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetAllDBDPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetAllDBDPlayers, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetAllDBDPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetCharactersByPlayerTeam
// 0x0020 (0x0020 - 0x0000)
struct CharacterCollectionUtilities_GetCharactersByPlayerTeam final
{
public:
	EPlayerTeam                                   PlayerTeam;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          WorldContextObject;                                // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetCharactersByPlayerTeam) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetCharactersByPlayerTeam");
static_assert(sizeof(CharacterCollectionUtilities_GetCharactersByPlayerTeam) == 0x000020, "Wrong size on CharacterCollectionUtilities_GetCharactersByPlayerTeam");
static_assert(offsetof(CharacterCollectionUtilities_GetCharactersByPlayerTeam, PlayerTeam) == 0x000000, "Member 'CharacterCollectionUtilities_GetCharactersByPlayerTeam::PlayerTeam' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetCharactersByPlayerTeam, WorldContextObject) == 0x000008, "Member 'CharacterCollectionUtilities_GetCharactersByPlayerTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetCharactersByPlayerTeam, ReturnValue) == 0x000010, "Member 'CharacterCollectionUtilities_GetCharactersByPlayerTeam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGameKillers
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetInGameKillers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ASlasherPlayer*>                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGameKillers) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGameKillers");
static_assert(sizeof(CharacterCollectionUtilities_GetInGameKillers) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetInGameKillers");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameKillers, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGameKillers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameKillers, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGameKillers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGameKillersByRef
// 0x0058 (0x0058 - 0x0000)
struct CharacterCollectionUtilities_GetInGameKillersByRef final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class ASlasherPlayer*>                   ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGameKillersByRef) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGameKillersByRef");
static_assert(sizeof(CharacterCollectionUtilities_GetInGameKillersByRef) == 0x000058, "Wrong size on CharacterCollectionUtilities_GetInGameKillersByRef");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameKillersByRef, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGameKillersByRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameKillersByRef, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGameKillersByRef::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGameOtherCharacters
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetInGameOtherCharacters final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGameOtherCharacters) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGameOtherCharacters");
static_assert(sizeof(CharacterCollectionUtilities_GetInGameOtherCharacters) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetInGameOtherCharacters");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameOtherCharacters, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGameOtherCharacters::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameOtherCharacters, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGameOtherCharacters::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGamePlayers
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetInGamePlayers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGamePlayers) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGamePlayers");
static_assert(sizeof(CharacterCollectionUtilities_GetInGamePlayers) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetInGamePlayers");
static_assert(offsetof(CharacterCollectionUtilities_GetInGamePlayers, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGamePlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGamePlayers, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGamePlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGameSurvivors
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetInGameSurvivors final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ACamperPlayer*>                  ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGameSurvivors) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGameSurvivors");
static_assert(sizeof(CharacterCollectionUtilities_GetInGameSurvivors) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetInGameSurvivors");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivors, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGameSurvivors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivors, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGameSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGameSurvivorsAsPlayers
// 0x0018 (0x0018 - 0x0000)
struct CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers");
static_assert(sizeof(CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers) == 0x000018, "Wrong size on CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGameSurvivorsAsPlayers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetInGameSurvivorsByRef
// 0x0058 (0x0058 - 0x0000)
struct CharacterCollectionUtilities_GetInGameSurvivorsByRef final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class ACamperPlayer*>                    ReturnValue;                                       // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetInGameSurvivorsByRef) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetInGameSurvivorsByRef");
static_assert(sizeof(CharacterCollectionUtilities_GetInGameSurvivorsByRef) == 0x000058, "Wrong size on CharacterCollectionUtilities_GetInGameSurvivorsByRef");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivorsByRef, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetInGameSurvivorsByRef::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetInGameSurvivorsByRef, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetInGameSurvivorsByRef::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetKiller
// 0x0010 (0x0010 - 0x0000)
struct CharacterCollectionUtilities_GetKiller final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterCollectionUtilities_GetKiller) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetKiller");
static_assert(sizeof(CharacterCollectionUtilities_GetKiller) == 0x000010, "Wrong size on CharacterCollectionUtilities_GetKiller");
static_assert(offsetof(CharacterCollectionUtilities_GetKiller, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetKiller::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetKiller, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterCollectionUtilities.GetNumberOfInjuredHookedOrDyingSurvivors
// 0x0010 (0x0010 - 0x0000)
struct CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors) == 0x000008, "Wrong alignment on CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors");
static_assert(sizeof(CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors) == 0x000010, "Wrong size on CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors");
static_assert(offsetof(CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors, WorldContextObject) == 0x000000, "Member 'CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors, ReturnValue) == 0x000008, "Member 'CharacterCollectionUtilities_GetNumberOfInjuredHookedOrDyingSurvivors::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AICharacterRepairGeneratorBehaviourData.Init
// 0x0010 (0x0010 - 0x0000)
struct AICharacterRepairGeneratorBehaviourData_Init final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       CharacterMovementType;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterRepairGeneratorBehaviourData_Init) == 0x000008, "Wrong alignment on AICharacterRepairGeneratorBehaviourData_Init");
static_assert(sizeof(AICharacterRepairGeneratorBehaviourData_Init) == 0x000010, "Wrong size on AICharacterRepairGeneratorBehaviourData_Init");
static_assert(offsetof(AICharacterRepairGeneratorBehaviourData_Init, Generator) == 0x000000, "Member 'AICharacterRepairGeneratorBehaviourData_Init::Generator' has a wrong offset!");
static_assert(offsetof(AICharacterRepairGeneratorBehaviourData_Init, CharacterMovementType) == 0x000008, "Member 'AICharacterRepairGeneratorBehaviourData_Init::CharacterMovementType' has a wrong offset!");

// Function DeadByDaylight.AICharacterRepairGeneratorBehaviour.OnGeneratorRepairedEventHandler
// 0x0001 (0x0001 - 0x0000)
struct AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler) == 0x000001, "Wrong alignment on AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler");
static_assert(sizeof(AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler) == 0x000001, "Wrong size on AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler");
static_assert(offsetof(AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler, IsAutoCompleted) == 0x000000, "Member 'AICharacterRepairGeneratorBehaviour_OnGeneratorRepairedEventHandler::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.AICharacterRepairGeneratorBehaviour.OnMovementFinished
// 0x0008 (0x0008 - 0x0000)
struct AICharacterRepairGeneratorBehaviour_OnMovementFinished final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AICharacterRepairGeneratorBehaviour_OnMovementFinished) == 0x000004, "Wrong alignment on AICharacterRepairGeneratorBehaviour_OnMovementFinished");
static_assert(sizeof(AICharacterRepairGeneratorBehaviour_OnMovementFinished) == 0x000008, "Wrong size on AICharacterRepairGeneratorBehaviour_OnMovementFinished");
static_assert(offsetof(AICharacterRepairGeneratorBehaviour_OnMovementFinished, RequestID) == 0x000000, "Member 'AICharacterRepairGeneratorBehaviour_OnMovementFinished::RequestID' has a wrong offset!");
static_assert(offsetof(AICharacterRepairGeneratorBehaviour_OnMovementFinished, Result) == 0x000004, "Member 'AICharacterRepairGeneratorBehaviour_OnMovementFinished::Result' has a wrong offset!");

// Function DeadByDaylight.AIHealAllyBehaviourData.Init
// 0x0008 (0x0008 - 0x0000)
struct AIHealAllyBehaviourData_Init final
{
public:
	class ACamperPlayer*                          AllyToHealTarget;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHealAllyBehaviourData_Init) == 0x000008, "Wrong alignment on AIHealAllyBehaviourData_Init");
static_assert(sizeof(AIHealAllyBehaviourData_Init) == 0x000008, "Wrong size on AIHealAllyBehaviourData_Init");
static_assert(offsetof(AIHealAllyBehaviourData_Init, AllyToHealTarget) == 0x000000, "Member 'AIHealAllyBehaviourData_Init::AllyToHealTarget' has a wrong offset!");

// Function DeadByDaylight.AIHealAllyBehaviour.Init
// 0x0010 (0x0010 - 0x0000)
struct AIHealAllyBehaviour_Init final
{
public:
	class ADBDPlayer*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAICharacterBehaviourData*              behaviourData;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIHealAllyBehaviour_Init) == 0x000008, "Wrong alignment on AIHealAllyBehaviour_Init");
static_assert(sizeof(AIHealAllyBehaviour_Init) == 0x000010, "Wrong size on AIHealAllyBehaviour_Init");
static_assert(offsetof(AIHealAllyBehaviour_Init, Character) == 0x000000, "Member 'AIHealAllyBehaviour_Init::Character' has a wrong offset!");
static_assert(offsetof(AIHealAllyBehaviour_Init, behaviourData) == 0x000008, "Member 'AIHealAllyBehaviour_Init::behaviourData' has a wrong offset!");

// Function DeadByDaylight.AIHealAllyBehaviour.TargetPositionReached
// 0x0008 (0x0008 - 0x0000)
struct AIHealAllyBehaviour_TargetPositionReached final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIHealAllyBehaviour_TargetPositionReached) == 0x000004, "Wrong alignment on AIHealAllyBehaviour_TargetPositionReached");
static_assert(sizeof(AIHealAllyBehaviour_TargetPositionReached) == 0x000008, "Wrong size on AIHealAllyBehaviour_TargetPositionReached");
static_assert(offsetof(AIHealAllyBehaviour_TargetPositionReached, RequestID) == 0x000000, "Member 'AIHealAllyBehaviour_TargetPositionReached::RequestID' has a wrong offset!");
static_assert(offsetof(AIHealAllyBehaviour_TargetPositionReached, Result) == 0x000004, "Member 'AIHealAllyBehaviour_TargetPositionReached::Result' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.OnCamperHealthStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CamperMovementComponent_OnCamperHealthStateChanged final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            CurrentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_OnCamperHealthStateChanged) == 0x000001, "Wrong alignment on CamperMovementComponent_OnCamperHealthStateChanged");
static_assert(sizeof(CamperMovementComponent_OnCamperHealthStateChanged) == 0x000002, "Wrong size on CamperMovementComponent_OnCamperHealthStateChanged");
static_assert(offsetof(CamperMovementComponent_OnCamperHealthStateChanged, OldDamageState) == 0x000000, "Member 'CamperMovementComponent_OnCamperHealthStateChanged::OldDamageState' has a wrong offset!");
static_assert(offsetof(CamperMovementComponent_OnCamperHealthStateChanged, CurrentDamageState) == 0x000001, "Member 'CamperMovementComponent_OnCamperHealthStateChanged::CurrentDamageState' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.GetDefaultRotationRate
// 0x0018 (0x0018 - 0x0000)
struct CamperMovementComponent_GetDefaultRotationRate final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_GetDefaultRotationRate) == 0x000008, "Wrong alignment on CamperMovementComponent_GetDefaultRotationRate");
static_assert(sizeof(CamperMovementComponent_GetDefaultRotationRate) == 0x000018, "Wrong size on CamperMovementComponent_GetDefaultRotationRate");
static_assert(offsetof(CamperMovementComponent_GetDefaultRotationRate, ReturnValue) == 0x000000, "Member 'CamperMovementComponent_GetDefaultRotationRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.GetDropStaggerTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct CamperMovementComponent_GetDropStaggerTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_GetDropStaggerTimeLeft) == 0x000004, "Wrong alignment on CamperMovementComponent_GetDropStaggerTimeLeft");
static_assert(sizeof(CamperMovementComponent_GetDropStaggerTimeLeft) == 0x000004, "Wrong size on CamperMovementComponent_GetDropStaggerTimeLeft");
static_assert(offsetof(CamperMovementComponent_GetDropStaggerTimeLeft, ReturnValue) == 0x000000, "Member 'CamperMovementComponent_GetDropStaggerTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperMovementComponent.GetRotationRateWhileCrawling
// 0x0018 (0x0018 - 0x0000)
struct CamperMovementComponent_GetRotationRateWhileCrawling final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperMovementComponent_GetRotationRateWhileCrawling) == 0x000008, "Wrong alignment on CamperMovementComponent_GetRotationRateWhileCrawling");
static_assert(sizeof(CamperMovementComponent_GetRotationRateWhileCrawling) == 0x000018, "Wrong size on CamperMovementComponent_GetRotationRateWhileCrawling");
static_assert(offsetof(CamperMovementComponent_GetRotationRateWhileCrawling, ReturnValue) == 0x000000, "Member 'CamperMovementComponent_GetRotationRateWhileCrawling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AIMoveToInteractData.Init
// 0x0018 (0x0018 - 0x0000)
struct AIMoveToInteractData_Init final
{
public:
	class AActor*                                 InteractActor;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterMovementTypes                       CharacterMovementTypes;                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetPositionActor;                               // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveToInteractData_Init) == 0x000008, "Wrong alignment on AIMoveToInteractData_Init");
static_assert(sizeof(AIMoveToInteractData_Init) == 0x000018, "Wrong size on AIMoveToInteractData_Init");
static_assert(offsetof(AIMoveToInteractData_Init, InteractActor) == 0x000000, "Member 'AIMoveToInteractData_Init::InteractActor' has a wrong offset!");
static_assert(offsetof(AIMoveToInteractData_Init, CharacterMovementTypes) == 0x000008, "Member 'AIMoveToInteractData_Init::CharacterMovementTypes' has a wrong offset!");
static_assert(offsetof(AIMoveToInteractData_Init, TargetPositionActor) == 0x000010, "Member 'AIMoveToInteractData_Init::TargetPositionActor' has a wrong offset!");

// Function DeadByDaylight.AIMoveToPosition.Init
// 0x0010 (0x0010 - 0x0000)
struct AIMoveToPosition_Init final
{
public:
	class ADBDPlayer*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAICharacterBehaviourData*              behaviourData;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AIMoveToPosition_Init) == 0x000008, "Wrong alignment on AIMoveToPosition_Init");
static_assert(sizeof(AIMoveToPosition_Init) == 0x000010, "Wrong size on AIMoveToPosition_Init");
static_assert(offsetof(AIMoveToPosition_Init, Character) == 0x000000, "Member 'AIMoveToPosition_Init::Character' has a wrong offset!");
static_assert(offsetof(AIMoveToPosition_Init, behaviourData) == 0x000008, "Member 'AIMoveToPosition_Init::behaviourData' has a wrong offset!");

// Function DeadByDaylight.AIMoveToPosition.TargetPositionReached
// 0x0008 (0x0008 - 0x0000)
struct AIMoveToPosition_TargetPositionReached final
{
public:
	struct FAIRequestID                           RequestID;                                         // 0x0000(0x0004)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	EPathFollowingResult                          Result;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AIMoveToPosition_TargetPositionReached) == 0x000004, "Wrong alignment on AIMoveToPosition_TargetPositionReached");
static_assert(sizeof(AIMoveToPosition_TargetPositionReached) == 0x000008, "Wrong size on AIMoveToPosition_TargetPositionReached");
static_assert(offsetof(AIMoveToPosition_TargetPositionReached, RequestID) == 0x000000, "Member 'AIMoveToPosition_TargetPositionReached::RequestID' has a wrong offset!");
static_assert(offsetof(AIMoveToPosition_TargetPositionReached, Result) == 0x000004, "Member 'AIMoveToPosition_TargetPositionReached::Result' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.AddInteraction
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_AddInteraction final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_AddInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_AddInteraction");
static_assert(sizeof(PlayerInteractionHandler_AddInteraction) == 0x000008, "Wrong size on PlayerInteractionHandler_AddInteraction");
static_assert(offsetof(PlayerInteractionHandler_AddInteraction, Interaction) == 0x000000, "Member 'PlayerInteractionHandler_AddInteraction::Interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Authority_ClearPlayerDependency
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_Authority_ClearPlayerDependency final
{
public:
	class ADBDPlayer*                             PlayerDependency;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Authority_ClearPlayerDependency) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Authority_ClearPlayerDependency");
static_assert(sizeof(PlayerInteractionHandler_Authority_ClearPlayerDependency) == 0x000008, "Wrong size on PlayerInteractionHandler_Authority_ClearPlayerDependency");
static_assert(offsetof(PlayerInteractionHandler_Authority_ClearPlayerDependency, PlayerDependency) == 0x000000, "Member 'PlayerInteractionHandler_Authority_ClearPlayerDependency::PlayerDependency' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Broadcast_Multicast_ConfirmChargedCompleted
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted final
{
public:
	bool                                          ChargeComplete;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted) == 0x000001, "Wrong alignment on PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted");
static_assert(sizeof(PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted) == 0x000001, "Wrong size on PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted");
static_assert(offsetof(PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted, ChargeComplete) == 0x000000, "Member 'PlayerInteractionHandler_Broadcast_Multicast_ConfirmChargedCompleted::ChargeComplete' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.CleanInteractionArray
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_CleanInteractionArray final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_CleanInteractionArray) == 0x000008, "Wrong alignment on PlayerInteractionHandler_CleanInteractionArray");
static_assert(sizeof(PlayerInteractionHandler_CleanInteractionArray) == 0x000008, "Wrong size on PlayerInteractionHandler_CleanInteractionArray");
static_assert(offsetof(PlayerInteractionHandler_CleanInteractionArray, DestroyedActor) == 0x000000, "Member 'PlayerInteractionHandler_CleanInteractionArray::DestroyedActor' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Client_Cheat_SetInteractionScanInterval
// 0x0004 (0x0004 - 0x0000)
struct PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval final
{
public:
	float                                         Interval;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval) == 0x000004, "Wrong alignment on PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval");
static_assert(sizeof(PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval) == 0x000004, "Wrong size on PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval");
static_assert(offsetof(PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval, Interval) == 0x000000, "Member 'PlayerInteractionHandler_Client_Cheat_SetInteractionScanInterval::Interval' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Client_NotifyChargeCompleted
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_Client_NotifyChargeCompleted final
{
public:
	const class UInteractionDefinition*           Interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Client_NotifyChargeCompleted) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Client_NotifyChargeCompleted");
static_assert(sizeof(PlayerInteractionHandler_Client_NotifyChargeCompleted) == 0x000008, "Wrong size on PlayerInteractionHandler_Client_NotifyChargeCompleted");
static_assert(offsetof(PlayerInteractionHandler_Client_NotifyChargeCompleted, Interaction) == 0x000000, "Member 'PlayerInteractionHandler_Client_NotifyChargeCompleted::Interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.HasAvailableInteraction
// 0x0002 (0x0002 - 0x0000)
struct PlayerInteractionHandler_HasAvailableInteraction final
{
public:
	EInputInteractionType                         InteractionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_HasAvailableInteraction) == 0x000001, "Wrong alignment on PlayerInteractionHandler_HasAvailableInteraction");
static_assert(sizeof(PlayerInteractionHandler_HasAvailableInteraction) == 0x000002, "Wrong size on PlayerInteractionHandler_HasAvailableInteraction");
static_assert(offsetof(PlayerInteractionHandler_HasAvailableInteraction, InteractionType) == 0x000000, "Member 'PlayerInteractionHandler_HasAvailableInteraction::InteractionType' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_HasAvailableInteraction, ReturnValue) == 0x000001, "Member 'PlayerInteractionHandler_HasAvailableInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_InteractionPredictionValidationResult
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionValidationState                   State;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult");
static_assert(sizeof(PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult) == 0x000010, "Wrong size on PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult");
static_assert(offsetof(PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult, Interaction) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult::Interaction' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult, State) == 0x000008, "Member 'PlayerInteractionHandler_Multicast_InteractionPredictionValidationResult::State' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_InterruptionRequestResult_Interruptor
// 0x0002 (0x0002 - 0x0000)
struct PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor final
{
public:
	ERequestState                                 State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrantInterruptScore;                               // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor) == 0x000001, "Wrong alignment on PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor");
static_assert(sizeof(PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor) == 0x000002, "Wrong size on PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor");
static_assert(offsetof(PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor, State) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor::State' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor, GrantInterruptScore) == 0x000001, "Member 'PlayerInteractionHandler_Multicast_InterruptionRequestResult_Interruptor::GrantInterruptScore' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_RequestInterruption_Interruptee
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee final
{
public:
	class ADBDPlayer*                             InterruptionOtherParty;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                InterruptionDefinition;                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee");
static_assert(sizeof(PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee) == 0x000010, "Wrong size on PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee");
static_assert(offsetof(PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee, InterruptionOtherParty) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee::InterruptionOtherParty' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee, InterruptionDefinition) == 0x000008, "Member 'PlayerInteractionHandler_Multicast_RequestInterruption_Interruptee::InterruptionDefinition' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_SetInteractionToSwapTo
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_Multicast_SetInteractionToSwapTo final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_SetInteractionToSwapTo) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Multicast_SetInteractionToSwapTo");
static_assert(sizeof(PlayerInteractionHandler_Multicast_SetInteractionToSwapTo) == 0x000008, "Wrong size on PlayerInteractionHandler_Multicast_SetInteractionToSwapTo");
static_assert(offsetof(PlayerInteractionHandler_Multicast_SetInteractionToSwapTo, Interaction) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_SetInteractionToSwapTo::Interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_StoreInteraction
// 0x0090 (0x0090 - 0x0000)
struct PlayerInteractionHandler_Multicast_StoreInteraction final
{
public:
	struct FStoredInteraction                     InteractionToStore;                                // 0x0000(0x0090)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_StoreInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Multicast_StoreInteraction");
static_assert(sizeof(PlayerInteractionHandler_Multicast_StoreInteraction) == 0x000090, "Wrong size on PlayerInteractionHandler_Multicast_StoreInteraction");
static_assert(offsetof(PlayerInteractionHandler_Multicast_StoreInteraction, InteractionToStore) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_StoreInteraction::InteractionToStore' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Multicast_StoreInterruption_Interruptor
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor final
{
public:
	class ADBDPlayer*                             InterruptionOtherParty;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                InterruptionDefinition;                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor");
static_assert(sizeof(PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor) == 0x000010, "Wrong size on PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor");
static_assert(offsetof(PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor, InterruptionOtherParty) == 0x000000, "Member 'PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor::InterruptionOtherParty' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor, InterruptionDefinition) == 0x000008, "Member 'PlayerInteractionHandler_Multicast_StoreInterruption_Interruptor::InterruptionDefinition' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.OnAttachedInteractorOwnerEndPlay
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay) == 0x000008, "Wrong alignment on PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay");
static_assert(sizeof(PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay) == 0x000010, "Wrong size on PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay");
static_assert(offsetof(PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay, Actor) == 0x000000, "Member 'PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay, EndPlayReason) == 0x000008, "Member 'PlayerInteractionHandler_OnAttachedInteractorOwnerEndPlay::EndPlayReason' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.RemoveInteraction
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_RemoveInteraction final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_RemoveInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_RemoveInteraction");
static_assert(sizeof(PlayerInteractionHandler_RemoveInteraction) == 0x000008, "Wrong size on PlayerInteractionHandler_RemoveInteraction");
static_assert(offsetof(PlayerInteractionHandler_RemoveInteraction, Interaction) == 0x000000, "Member 'PlayerInteractionHandler_RemoveInteraction::Interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_AnswerInterruption_Interruptee
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionHandler_Server_AnswerInterruption_Interruptee final
{
public:
	ERequestState                                 State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_AnswerInterruption_Interruptee) == 0x000001, "Wrong alignment on PlayerInteractionHandler_Server_AnswerInterruption_Interruptee");
static_assert(sizeof(PlayerInteractionHandler_Server_AnswerInterruption_Interruptee) == 0x000001, "Wrong size on PlayerInteractionHandler_Server_AnswerInterruption_Interruptee");
static_assert(offsetof(PlayerInteractionHandler_Server_AnswerInterruption_Interruptee, State) == 0x000000, "Member 'PlayerInteractionHandler_Server_AnswerInterruption_Interruptee::State' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_Broadcast_ConfirmChargedCompleted
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted final
{
public:
	bool                                          ChargeComplete;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted) == 0x000001, "Wrong alignment on PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted");
static_assert(sizeof(PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted) == 0x000001, "Wrong size on PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted");
static_assert(offsetof(PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted, ChargeComplete) == 0x000000, "Member 'PlayerInteractionHandler_Server_Broadcast_ConfirmChargedCompleted::ChargeComplete' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_Broadcast_StoreInteraction
// 0x0090 (0x0090 - 0x0000)
struct PlayerInteractionHandler_Server_Broadcast_StoreInteraction final
{
public:
	struct FStoredInteraction                     InteractionToStore;                                // 0x0000(0x0090)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_Broadcast_StoreInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Server_Broadcast_StoreInteraction");
static_assert(sizeof(PlayerInteractionHandler_Server_Broadcast_StoreInteraction) == 0x000090, "Wrong size on PlayerInteractionHandler_Server_Broadcast_StoreInteraction");
static_assert(offsetof(PlayerInteractionHandler_Server_Broadcast_StoreInteraction, InteractionToStore) == 0x000000, "Member 'PlayerInteractionHandler_Server_Broadcast_StoreInteraction::InteractionToStore' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_Cheat_SetInteractionScanInterval
// 0x0004 (0x0004 - 0x0000)
struct PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval final
{
public:
	float                                         Interval;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval) == 0x000004, "Wrong alignment on PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval");
static_assert(sizeof(PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval) == 0x000004, "Wrong size on PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval");
static_assert(offsetof(PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval, Interval) == 0x000000, "Member 'PlayerInteractionHandler_Server_Cheat_SetInteractionScanInterval::Interval' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_SetInteractionToSwapTo
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_Server_SetInteractionToSwapTo final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_SetInteractionToSwapTo) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Server_SetInteractionToSwapTo");
static_assert(sizeof(PlayerInteractionHandler_Server_SetInteractionToSwapTo) == 0x000008, "Wrong size on PlayerInteractionHandler_Server_SetInteractionToSwapTo");
static_assert(offsetof(PlayerInteractionHandler_Server_SetInteractionToSwapTo, Interaction) == 0x000000, "Member 'PlayerInteractionHandler_Server_SetInteractionToSwapTo::Interaction' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.Server_StoreInterruption_Interruptor
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_Server_StoreInterruption_Interruptor final
{
public:
	class ADBDPlayer*                             InterruptionOtherParty;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInterruptionDefinition*                InterruptionDefinition;                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_Server_StoreInterruption_Interruptor) == 0x000008, "Wrong alignment on PlayerInteractionHandler_Server_StoreInterruption_Interruptor");
static_assert(sizeof(PlayerInteractionHandler_Server_StoreInterruption_Interruptor) == 0x000010, "Wrong size on PlayerInteractionHandler_Server_StoreInterruption_Interruptor");
static_assert(offsetof(PlayerInteractionHandler_Server_StoreInterruption_Interruptor, InterruptionOtherParty) == 0x000000, "Member 'PlayerInteractionHandler_Server_StoreInterruption_Interruptor::InterruptionOtherParty' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_Server_StoreInterruption_Interruptor, InterruptionDefinition) == 0x000008, "Member 'PlayerInteractionHandler_Server_StoreInterruption_Interruptor::InterruptionDefinition' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetAdditiveSkillCheckProbabilityModifier
// 0x0004 (0x0004 - 0x0000)
struct PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier) == 0x000004, "Wrong alignment on PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier");
static_assert(sizeof(PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier) == 0x000004, "Wrong size on PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier");
static_assert(offsetof(PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_GetAdditiveSkillCheckProbabilityModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetAvailableInteraction
// 0x0010 (0x0010 - 0x0000)
struct PlayerInteractionHandler_GetAvailableInteraction final
{
public:
	EInputInteractionType                         InteractionType;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetAvailableInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_GetAvailableInteraction");
static_assert(sizeof(PlayerInteractionHandler_GetAvailableInteraction) == 0x000010, "Wrong size on PlayerInteractionHandler_GetAvailableInteraction");
static_assert(offsetof(PlayerInteractionHandler_GetAvailableInteraction, InteractionType) == 0x000000, "Member 'PlayerInteractionHandler_GetAvailableInteraction::InteractionType' has a wrong offset!");
static_assert(offsetof(PlayerInteractionHandler_GetAvailableInteraction, ReturnValue) == 0x000008, "Member 'PlayerInteractionHandler_GetAvailableInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetCurrentInteraction
// 0x0008 (0x0008 - 0x0000)
struct PlayerInteractionHandler_GetCurrentInteraction final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetCurrentInteraction) == 0x000008, "Wrong alignment on PlayerInteractionHandler_GetCurrentInteraction");
static_assert(sizeof(PlayerInteractionHandler_GetCurrentInteraction) == 0x000008, "Wrong size on PlayerInteractionHandler_GetCurrentInteraction");
static_assert(offsetof(PlayerInteractionHandler_GetCurrentInteraction, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_GetCurrentInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.GetMultiplicativeSkillCheckProbabilityModifier
// 0x0004 (0x0004 - 0x0000)
struct PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier) == 0x000004, "Wrong alignment on PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier");
static_assert(sizeof(PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier) == 0x000004, "Wrong size on PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier");
static_assert(offsetof(PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_GetMultiplicativeSkillCheckProbabilityModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInteractionHandler.HasActiveSkillCheck
// 0x0001 (0x0001 - 0x0000)
struct PlayerInteractionHandler_HasActiveSkillCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInteractionHandler_HasActiveSkillCheck) == 0x000001, "Wrong alignment on PlayerInteractionHandler_HasActiveSkillCheck");
static_assert(sizeof(PlayerInteractionHandler_HasActiveSkillCheck) == 0x000001, "Wrong size on PlayerInteractionHandler_HasActiveSkillCheck");
static_assert(offsetof(PlayerInteractionHandler_HasActiveSkillCheck, ReturnValue) == 0x000000, "Member 'PlayerInteractionHandler_HasActiveSkillCheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AISense_Trail.ReportTrailEvent
// 0x0038 (0x0038 - 0x0000)
struct AISense_Trail_ReportTrailEvent final
{
public:
	class UObject*                                WorldContextObj;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IgnoreOnPerkTag;                                   // 0x0028(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Lifetime;                                          // 0x0034(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISense_Trail_ReportTrailEvent) == 0x000008, "Wrong alignment on AISense_Trail_ReportTrailEvent");
static_assert(sizeof(AISense_Trail_ReportTrailEvent) == 0x000038, "Wrong size on AISense_Trail_ReportTrailEvent");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, WorldContextObj) == 0x000000, "Member 'AISense_Trail_ReportTrailEvent::WorldContextObj' has a wrong offset!");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, Location) == 0x000008, "Member 'AISense_Trail_ReportTrailEvent::Location' has a wrong offset!");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, Instigator) == 0x000020, "Member 'AISense_Trail_ReportTrailEvent::Instigator' has a wrong offset!");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, IgnoreOnPerkTag) == 0x000028, "Member 'AISense_Trail_ReportTrailEvent::IgnoreOnPerkTag' has a wrong offset!");
static_assert(offsetof(AISense_Trail_ReportTrailEvent, Lifetime) == 0x000034, "Member 'AISense_Trail_ReportTrailEvent::Lifetime' has a wrong offset!");

// Function DeadByDaylight.AISlasherChaseAndAttackBehaviourData.Init
// 0x0010 (0x0010 - 0x0000)
struct AISlasherChaseAndAttackBehaviourData_Init final
{
public:
	class ACamperPlayer*                          TargetSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttackRangeDistance;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocationDistance;                                  // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISlasherChaseAndAttackBehaviourData_Init) == 0x000008, "Wrong alignment on AISlasherChaseAndAttackBehaviourData_Init");
static_assert(sizeof(AISlasherChaseAndAttackBehaviourData_Init) == 0x000010, "Wrong size on AISlasherChaseAndAttackBehaviourData_Init");
static_assert(offsetof(AISlasherChaseAndAttackBehaviourData_Init, TargetSurvivor) == 0x000000, "Member 'AISlasherChaseAndAttackBehaviourData_Init::TargetSurvivor' has a wrong offset!");
static_assert(offsetof(AISlasherChaseAndAttackBehaviourData_Init, AttackRangeDistance) == 0x000008, "Member 'AISlasherChaseAndAttackBehaviourData_Init::AttackRangeDistance' has a wrong offset!");
static_assert(offsetof(AISlasherChaseAndAttackBehaviourData_Init, LocationDistance) == 0x00000C, "Member 'AISlasherChaseAndAttackBehaviourData_Init::LocationDistance' has a wrong offset!");

// Function DeadByDaylight.BlockableComponent.Authority_AddBlock
// 0x0058 (0x0058 - 0x0000)
struct BlockableComponent_Authority_AddBlock final
{
public:
	const class UObject*                          Source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class ADBDPlayer*>                       AffectedPlayers;                                   // 0x0008(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlockableComponent_Authority_AddBlock) == 0x000008, "Wrong alignment on BlockableComponent_Authority_AddBlock");
static_assert(sizeof(BlockableComponent_Authority_AddBlock) == 0x000058, "Wrong size on BlockableComponent_Authority_AddBlock");
static_assert(offsetof(BlockableComponent_Authority_AddBlock, Source) == 0x000000, "Member 'BlockableComponent_Authority_AddBlock::Source' has a wrong offset!");
static_assert(offsetof(BlockableComponent_Authority_AddBlock, AffectedPlayers) == 0x000008, "Member 'BlockableComponent_Authority_AddBlock::AffectedPlayers' has a wrong offset!");

// Function DeadByDaylight.BlockableComponent.Authority_AddTimedBlock
// 0x0060 (0x0060 - 0x0000)
struct BlockableComponent_Authority_AddTimedBlock final
{
public:
	const class UObject*                          Source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ADBDPlayer*>                       AffectedPlayers;                                   // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlockableComponent_Authority_AddTimedBlock) == 0x000008, "Wrong alignment on BlockableComponent_Authority_AddTimedBlock");
static_assert(sizeof(BlockableComponent_Authority_AddTimedBlock) == 0x000060, "Wrong size on BlockableComponent_Authority_AddTimedBlock");
static_assert(offsetof(BlockableComponent_Authority_AddTimedBlock, Source) == 0x000000, "Member 'BlockableComponent_Authority_AddTimedBlock::Source' has a wrong offset!");
static_assert(offsetof(BlockableComponent_Authority_AddTimedBlock, Duration) == 0x000008, "Member 'BlockableComponent_Authority_AddTimedBlock::Duration' has a wrong offset!");
static_assert(offsetof(BlockableComponent_Authority_AddTimedBlock, AffectedPlayers) == 0x000010, "Member 'BlockableComponent_Authority_AddTimedBlock::AffectedPlayers' has a wrong offset!");

// Function DeadByDaylight.BlockableComponent.Authority_RemoveBlock
// 0x0008 (0x0008 - 0x0000)
struct BlockableComponent_Authority_RemoveBlock final
{
public:
	const class UObject*                          Source;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlockableComponent_Authority_RemoveBlock) == 0x000008, "Wrong alignment on BlockableComponent_Authority_RemoveBlock");
static_assert(sizeof(BlockableComponent_Authority_RemoveBlock) == 0x000008, "Wrong size on BlockableComponent_Authority_RemoveBlock");
static_assert(offsetof(BlockableComponent_Authority_RemoveBlock, Source) == 0x000000, "Member 'BlockableComponent_Authority_RemoveBlock::Source' has a wrong offset!");

// Function DeadByDaylight.ChaseComponent.IsInChase
// 0x0001 (0x0001 - 0x0000)
struct ChaseComponent_IsInChase final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseComponent_IsInChase) == 0x000001, "Wrong alignment on ChaseComponent_IsInChase");
static_assert(sizeof(ChaseComponent_IsInChase) == 0x000001, "Wrong size on ChaseComponent_IsInChase");
static_assert(offsetof(ChaseComponent_IsInChase, ReturnValue) == 0x000000, "Member 'ChaseComponent_IsInChase::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AnimationMontageSlave.OnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct AnimationMontageSlave_OnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            ID;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationMontageSlave_OnMontageStarted) == 0x000008, "Wrong alignment on AnimationMontageSlave_OnMontageStarted");
static_assert(sizeof(AnimationMontageSlave_OnMontageStarted) == 0x000028, "Wrong size on AnimationMontageSlave_OnMontageStarted");
static_assert(offsetof(AnimationMontageSlave_OnMontageStarted, ID) == 0x000000, "Member 'AnimationMontageSlave_OnMontageStarted::ID' has a wrong offset!");
static_assert(offsetof(AnimationMontageSlave_OnMontageStarted, Rate) == 0x000020, "Member 'AnimationMontageSlave_OnMontageStarted::Rate' has a wrong offset!");

// Function DeadByDaylight.AnimationMontageSlave.OnMontageStopped
// 0x0020 (0x0020 - 0x0000)
struct AnimationMontageSlave_OnMontageStopped final
{
public:
	struct FAnimationMontageDescriptor            ID;                                                // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMontageSlave_OnMontageStopped) == 0x000008, "Wrong alignment on AnimationMontageSlave_OnMontageStopped");
static_assert(sizeof(AnimationMontageSlave_OnMontageStopped) == 0x000020, "Wrong size on AnimationMontageSlave_OnMontageStopped");
static_assert(offsetof(AnimationMontageSlave_OnMontageStopped, ID) == 0x000000, "Member 'AnimationMontageSlave_OnMontageStopped::ID' has a wrong offset!");

// Function DeadByDaylight.AnimationMontageSlave.SetLeader
// 0x0008 (0x0008 - 0x0000)
struct AnimationMontageSlave_SetLeader final
{
public:
	class UMontagePlayer*                         Leader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMontageSlave_SetLeader) == 0x000008, "Wrong alignment on AnimationMontageSlave_SetLeader");
static_assert(sizeof(AnimationMontageSlave_SetLeader) == 0x000008, "Wrong size on AnimationMontageSlave_SetLeader");
static_assert(offsetof(AnimationMontageSlave_SetLeader, Leader) == 0x000000, "Member 'AnimationMontageSlave_SetLeader::Leader' has a wrong offset!");

// Function DeadByDaylight.AnimationMontageSlave.SetMontagePlayer
// 0x0008 (0x0008 - 0x0000)
struct AnimationMontageSlave_SetMontagePlayer final
{
public:
	class UMontagePlayer*                         MontagePlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationMontageSlave_SetMontagePlayer) == 0x000008, "Wrong alignment on AnimationMontageSlave_SetMontagePlayer");
static_assert(sizeof(AnimationMontageSlave_SetMontagePlayer) == 0x000008, "Wrong size on AnimationMontageSlave_SetMontagePlayer");
static_assert(offsetof(AnimationMontageSlave_SetMontagePlayer, MontagePlayer) == 0x000000, "Member 'AnimationMontageSlave_SetMontagePlayer::MontagePlayer' has a wrong offset!");

// Function DeadByDaylight.VomitStateComponent.SetObjectState
// 0x0008 (0x0008 - 0x0000)
struct VomitStateComponent_SetObjectState final
{
public:
	class UGameplayTagContainerComponent*         ObjectState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VomitStateComponent_SetObjectState) == 0x000008, "Wrong alignment on VomitStateComponent_SetObjectState");
static_assert(sizeof(VomitStateComponent_SetObjectState) == 0x000008, "Wrong size on VomitStateComponent_SetObjectState");
static_assert(offsetof(VomitStateComponent_SetObjectState, ObjectState) == 0x000000, "Member 'VomitStateComponent_SetObjectState::ObjectState' has a wrong offset!");

// Function DeadByDaylight.VomitStateComponent.SetVomitState
// 0x0001 (0x0001 - 0x0000)
struct VomitStateComponent_SetVomitState final
{
public:
	ELinkedVomitState                             NewVomitState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VomitStateComponent_SetVomitState) == 0x000001, "Wrong alignment on VomitStateComponent_SetVomitState");
static_assert(sizeof(VomitStateComponent_SetVomitState) == 0x000001, "Wrong size on VomitStateComponent_SetVomitState");
static_assert(offsetof(VomitStateComponent_SetVomitState, NewVomitState) == 0x000000, "Member 'VomitStateComponent_SetVomitState::NewVomitState' has a wrong offset!");

// Function DeadByDaylight.VomitStateComponent.getVomitState
// 0x0001 (0x0001 - 0x0000)
struct VomitStateComponent_GetVomitState final
{
public:
	ELinkedVomitState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VomitStateComponent_GetVomitState) == 0x000001, "Wrong alignment on VomitStateComponent_GetVomitState");
static_assert(sizeof(VomitStateComponent_GetVomitState) == 0x000001, "Wrong size on VomitStateComponent_GetVomitState");
static_assert(offsetof(VomitStateComponent_GetVomitState, ReturnValue) == 0x000000, "Member 'VomitStateComponent_GetVomitState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.VomitStateComponent.IsVomiting
// 0x0001 (0x0001 - 0x0000)
struct VomitStateComponent_IsVomiting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VomitStateComponent_IsVomiting) == 0x000001, "Wrong alignment on VomitStateComponent_IsVomiting");
static_assert(sizeof(VomitStateComponent_IsVomiting) == 0x000001, "Wrong size on VomitStateComponent_IsVomiting");
static_assert(offsetof(VomitStateComponent_IsVomiting, ReturnValue) == 0x000000, "Member 'VomitStateComponent_IsVomiting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AnimationPreviewSubsystem.OnAnimationPreviewEnd
// 0x0010 (0x0010 - 0x0000)
struct AnimationPreviewSubsystem_OnAnimationPreviewEnd final
{
public:
	class UAnimationPreview*                      Preview;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CompletedSuccessfully;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationPreviewSubsystem_OnAnimationPreviewEnd) == 0x000008, "Wrong alignment on AnimationPreviewSubsystem_OnAnimationPreviewEnd");
static_assert(sizeof(AnimationPreviewSubsystem_OnAnimationPreviewEnd) == 0x000010, "Wrong size on AnimationPreviewSubsystem_OnAnimationPreviewEnd");
static_assert(offsetof(AnimationPreviewSubsystem_OnAnimationPreviewEnd, Preview) == 0x000000, "Member 'AnimationPreviewSubsystem_OnAnimationPreviewEnd::Preview' has a wrong offset!");
static_assert(offsetof(AnimationPreviewSubsystem_OnAnimationPreviewEnd, CompletedSuccessfully) == 0x000008, "Member 'AnimationPreviewSubsystem_OnAnimationPreviewEnd::CompletedSuccessfully' has a wrong offset!");

// Function DeadByDaylight.AnimationPreviewSubsystem.OnAnimationPreviewStart
// 0x0008 (0x0008 - 0x0000)
struct AnimationPreviewSubsystem_OnAnimationPreviewStart final
{
public:
	class UAnimationPreview*                      Preview;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationPreviewSubsystem_OnAnimationPreviewStart) == 0x000008, "Wrong alignment on AnimationPreviewSubsystem_OnAnimationPreviewStart");
static_assert(sizeof(AnimationPreviewSubsystem_OnAnimationPreviewStart) == 0x000008, "Wrong size on AnimationPreviewSubsystem_OnAnimationPreviewStart");
static_assert(offsetof(AnimationPreviewSubsystem_OnAnimationPreviewStart, Preview) == 0x000000, "Member 'AnimationPreviewSubsystem_OnAnimationPreviewStart::Preview' has a wrong offset!");

// Function DeadByDaylight.AnimationPreviewSubsystem.CharacterHasSecondaryMori
// 0x0008 (0x0008 - 0x0000)
struct AnimationPreviewSubsystem_CharacterHasSecondaryMori final
{
public:
	int32                                         KillerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AnimationPreviewSubsystem_CharacterHasSecondaryMori) == 0x000004, "Wrong alignment on AnimationPreviewSubsystem_CharacterHasSecondaryMori");
static_assert(sizeof(AnimationPreviewSubsystem_CharacterHasSecondaryMori) == 0x000008, "Wrong size on AnimationPreviewSubsystem_CharacterHasSecondaryMori");
static_assert(offsetof(AnimationPreviewSubsystem_CharacterHasSecondaryMori, KillerId) == 0x000000, "Member 'AnimationPreviewSubsystem_CharacterHasSecondaryMori::KillerId' has a wrong offset!");
static_assert(offsetof(AnimationPreviewSubsystem_CharacterHasSecondaryMori, ReturnValue) == 0x000004, "Member 'AnimationPreviewSubsystem_CharacterHasSecondaryMori::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AnimationPreviewSubsystem.IsPreviewingAnimation
// 0x0001 (0x0001 - 0x0000)
struct AnimationPreviewSubsystem_IsPreviewingAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationPreviewSubsystem_IsPreviewingAnimation) == 0x000001, "Wrong alignment on AnimationPreviewSubsystem_IsPreviewingAnimation");
static_assert(sizeof(AnimationPreviewSubsystem_IsPreviewingAnimation) == 0x000001, "Wrong size on AnimationPreviewSubsystem_IsPreviewingAnimation");
static_assert(offsetof(AnimationPreviewSubsystem_IsPreviewingAnimation, ReturnValue) == 0x000000, "Member 'AnimationPreviewSubsystem_IsPreviewingAnimation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharmAttacher.GetActorAttachedOn
// 0x0008 (0x0008 - 0x0000)
struct CharmAttacher_GetActorAttachedOn final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmAttacher_GetActorAttachedOn) == 0x000008, "Wrong alignment on CharmAttacher_GetActorAttachedOn");
static_assert(sizeof(CharmAttacher_GetActorAttachedOn) == 0x000008, "Wrong size on CharmAttacher_GetActorAttachedOn");
static_assert(offsetof(CharmAttacher_GetActorAttachedOn, ReturnValue) == 0x000000, "Member 'CharmAttacher_GetActorAttachedOn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharmAttacher.GetAnimationTweak
// 0x0040 (0x0040 - 0x0000)
struct CharmAttacher_GetAnimationTweak final
{
public:
	struct FCharmAttacherAnimationTweak           ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmAttacher_GetAnimationTweak) == 0x000008, "Wrong alignment on CharmAttacher_GetAnimationTweak");
static_assert(sizeof(CharmAttacher_GetAnimationTweak) == 0x000040, "Wrong size on CharmAttacher_GetAnimationTweak");
static_assert(offsetof(CharmAttacher_GetAnimationTweak, ReturnValue) == 0x000000, "Member 'CharmAttacher_GetAnimationTweak::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharmAttacher.GetAttachedCharm
// 0x0008 (0x0008 - 0x0000)
struct CharmAttacher_GetAttachedCharm final
{
public:
	class ACharm*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmAttacher_GetAttachedCharm) == 0x000008, "Wrong alignment on CharmAttacher_GetAttachedCharm");
static_assert(sizeof(CharmAttacher_GetAttachedCharm) == 0x000008, "Wrong size on CharmAttacher_GetAttachedCharm");
static_assert(offsetof(CharmAttacher_GetAttachedCharm, ReturnValue) == 0x000000, "Member 'CharmAttacher_GetAttachedCharm::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharmAttacher.GetSkeletalMeshComponentAttachedOn
// 0x0008 (0x0008 - 0x0000)
struct CharmAttacher_GetSkeletalMeshComponentAttachedOn final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmAttacher_GetSkeletalMeshComponentAttachedOn) == 0x000008, "Wrong alignment on CharmAttacher_GetSkeletalMeshComponentAttachedOn");
static_assert(sizeof(CharmAttacher_GetSkeletalMeshComponentAttachedOn) == 0x000008, "Wrong size on CharmAttacher_GetSkeletalMeshComponentAttachedOn");
static_assert(offsetof(CharmAttacher_GetSkeletalMeshComponentAttachedOn, ReturnValue) == 0x000000, "Member 'CharmAttacher_GetSkeletalMeshComponentAttachedOn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AntiCampSelfUnhookComponent.OnHookedSurvivorDrainStageChanged
// 0x0010 (0x0010 - 0x0000)
struct AntiCampSelfUnhookComponent_OnHookedSurvivorDrainStageChanged final
{
public:
	int32                                         DrainStage;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookComponent_OnHookedSurvivorDrainStageChanged) == 0x000008, "Wrong alignment on AntiCampSelfUnhookComponent_OnHookedSurvivorDrainStageChanged");
static_assert(sizeof(AntiCampSelfUnhookComponent_OnHookedSurvivorDrainStageChanged) == 0x000010, "Wrong size on AntiCampSelfUnhookComponent_OnHookedSurvivorDrainStageChanged");
static_assert(offsetof(AntiCampSelfUnhookComponent_OnHookedSurvivorDrainStageChanged, DrainStage) == 0x000000, "Member 'AntiCampSelfUnhookComponent_OnHookedSurvivorDrainStageChanged::DrainStage' has a wrong offset!");
static_assert(offsetof(AntiCampSelfUnhookComponent_OnHookedSurvivorDrainStageChanged, Target) == 0x000008, "Member 'AntiCampSelfUnhookComponent_OnHookedSurvivorDrainStageChanged::Target' has a wrong offset!");

// Function DeadByDaylight.AntiCampSelfUnhookComponent.OnRep_State
// 0x0001 (0x0001 - 0x0000)
struct AntiCampSelfUnhookComponent_OnRep_State final
{
public:
	EAntiCampSelfUnhookMeterState                 PreviousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookComponent_OnRep_State) == 0x000001, "Wrong alignment on AntiCampSelfUnhookComponent_OnRep_State");
static_assert(sizeof(AntiCampSelfUnhookComponent_OnRep_State) == 0x000001, "Wrong size on AntiCampSelfUnhookComponent_OnRep_State");
static_assert(offsetof(AntiCampSelfUnhookComponent_OnRep_State, PreviousState) == 0x000000, "Member 'AntiCampSelfUnhookComponent_OnRep_State::PreviousState' has a wrong offset!");

// Function DeadByDaylight.AntiCampSelfUnhookComponent.SetAntiCampUnhookChargeable
// 0x0008 (0x0008 - 0x0000)
struct AntiCampSelfUnhookComponent_SetAntiCampUnhookChargeable final
{
public:
	class UChargeableComponent*                   Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookComponent_SetAntiCampUnhookChargeable) == 0x000008, "Wrong alignment on AntiCampSelfUnhookComponent_SetAntiCampUnhookChargeable");
static_assert(sizeof(AntiCampSelfUnhookComponent_SetAntiCampUnhookChargeable) == 0x000008, "Wrong size on AntiCampSelfUnhookComponent_SetAntiCampUnhookChargeable");
static_assert(offsetof(AntiCampSelfUnhookComponent_SetAntiCampUnhookChargeable, Component) == 0x000000, "Member 'AntiCampSelfUnhookComponent_SetAntiCampUnhookChargeable::Component' has a wrong offset!");

// Function DeadByDaylight.AntiCampSelfUnhookComponent.GetAntiCampGracePeriod
// 0x0004 (0x0004 - 0x0000)
struct AntiCampSelfUnhookComponent_GetAntiCampGracePeriod final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookComponent_GetAntiCampGracePeriod) == 0x000004, "Wrong alignment on AntiCampSelfUnhookComponent_GetAntiCampGracePeriod");
static_assert(sizeof(AntiCampSelfUnhookComponent_GetAntiCampGracePeriod) == 0x000004, "Wrong size on AntiCampSelfUnhookComponent_GetAntiCampGracePeriod");
static_assert(offsetof(AntiCampSelfUnhookComponent_GetAntiCampGracePeriod, ReturnValue) == 0x000000, "Member 'AntiCampSelfUnhookComponent_GetAntiCampGracePeriod::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AntiCampSelfUnhookComponent.GetAntiCampMaxLowerZCurveDistanceTime
// 0x0004 (0x0004 - 0x0000)
struct AntiCampSelfUnhookComponent_GetAntiCampMaxLowerZCurveDistanceTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookComponent_GetAntiCampMaxLowerZCurveDistanceTime) == 0x000004, "Wrong alignment on AntiCampSelfUnhookComponent_GetAntiCampMaxLowerZCurveDistanceTime");
static_assert(sizeof(AntiCampSelfUnhookComponent_GetAntiCampMaxLowerZCurveDistanceTime) == 0x000004, "Wrong size on AntiCampSelfUnhookComponent_GetAntiCampMaxLowerZCurveDistanceTime");
static_assert(offsetof(AntiCampSelfUnhookComponent_GetAntiCampMaxLowerZCurveDistanceTime, ReturnValue) == 0x000000, "Member 'AntiCampSelfUnhookComponent_GetAntiCampMaxLowerZCurveDistanceTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AntiCampSelfUnhookComponent.GetAntiCampMaxUpperZCurveDistanceTime
// 0x0004 (0x0004 - 0x0000)
struct AntiCampSelfUnhookComponent_GetAntiCampMaxUpperZCurveDistanceTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookComponent_GetAntiCampMaxUpperZCurveDistanceTime) == 0x000004, "Wrong alignment on AntiCampSelfUnhookComponent_GetAntiCampMaxUpperZCurveDistanceTime");
static_assert(sizeof(AntiCampSelfUnhookComponent_GetAntiCampMaxUpperZCurveDistanceTime) == 0x000004, "Wrong size on AntiCampSelfUnhookComponent_GetAntiCampMaxUpperZCurveDistanceTime");
static_assert(offsetof(AntiCampSelfUnhookComponent_GetAntiCampMaxUpperZCurveDistanceTime, ReturnValue) == 0x000000, "Member 'AntiCampSelfUnhookComponent_GetAntiCampMaxUpperZCurveDistanceTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AntiCampSelfUnhookComponent.GetAntiCampMaxXYCurveDistanceTime
// 0x0004 (0x0004 - 0x0000)
struct AntiCampSelfUnhookComponent_GetAntiCampMaxXYCurveDistanceTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookComponent_GetAntiCampMaxXYCurveDistanceTime) == 0x000004, "Wrong alignment on AntiCampSelfUnhookComponent_GetAntiCampMaxXYCurveDistanceTime");
static_assert(sizeof(AntiCampSelfUnhookComponent_GetAntiCampMaxXYCurveDistanceTime) == 0x000004, "Wrong size on AntiCampSelfUnhookComponent_GetAntiCampMaxXYCurveDistanceTime");
static_assert(offsetof(AntiCampSelfUnhookComponent_GetAntiCampMaxXYCurveDistanceTime, ReturnValue) == 0x000000, "Member 'AntiCampSelfUnhookComponent_GetAntiCampMaxXYCurveDistanceTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AntiCampSelfUnhookComponent.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct AntiCampSelfUnhookComponent_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookComponent_GetProgress) == 0x000004, "Wrong alignment on AntiCampSelfUnhookComponent_GetProgress");
static_assert(sizeof(AntiCampSelfUnhookComponent_GetProgress) == 0x000004, "Wrong size on AntiCampSelfUnhookComponent_GetProgress");
static_assert(offsetof(AntiCampSelfUnhookComponent_GetProgress, ReturnValue) == 0x000000, "Member 'AntiCampSelfUnhookComponent_GetProgress::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingEffectCollection.HasOfferingOfType
// 0x0018 (0x0018 - 0x0000)
struct OfferingEffectCollection_HasOfferingOfType final
{
public:
	EOfferingEffectType                           Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerId;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingEffectCollection_HasOfferingOfType) == 0x000004, "Wrong alignment on OfferingEffectCollection_HasOfferingOfType");
static_assert(sizeof(OfferingEffectCollection_HasOfferingOfType) == 0x000018, "Wrong size on OfferingEffectCollection_HasOfferingOfType");
static_assert(offsetof(OfferingEffectCollection_HasOfferingOfType, Type) == 0x000000, "Member 'OfferingEffectCollection_HasOfferingOfType::Type' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingOfType, PlayerId) == 0x000004, "Member 'OfferingEffectCollection_HasOfferingOfType::PlayerId' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingOfType, Tag) == 0x000008, "Member 'OfferingEffectCollection_HasOfferingOfType::Tag' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingOfType, ReturnValue) == 0x000014, "Member 'OfferingEffectCollection_HasOfferingOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingEffectCollection.HasOfferingWithTag
// 0x0014 (0x0014 - 0x0000)
struct OfferingEffectCollection_HasOfferingWithTag final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Tag;                                               // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingEffectCollection_HasOfferingWithTag) == 0x000004, "Wrong alignment on OfferingEffectCollection_HasOfferingWithTag");
static_assert(sizeof(OfferingEffectCollection_HasOfferingWithTag) == 0x000014, "Wrong size on OfferingEffectCollection_HasOfferingWithTag");
static_assert(offsetof(OfferingEffectCollection_HasOfferingWithTag, PlayerId) == 0x000000, "Member 'OfferingEffectCollection_HasOfferingWithTag::PlayerId' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingWithTag, Tag) == 0x000004, "Member 'OfferingEffectCollection_HasOfferingWithTag::Tag' has a wrong offset!");
static_assert(offsetof(OfferingEffectCollection_HasOfferingWithTag, ReturnValue) == 0x000010, "Member 'OfferingEffectCollection_HasOfferingWithTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChaserCharacterComponent.Authority_OnChaseTargetFound
// 0x0008 (0x0008 - 0x0000)
struct ChaserCharacterComponent_Authority_OnChaseTargetFound final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaserCharacterComponent_Authority_OnChaseTargetFound) == 0x000008, "Wrong alignment on ChaserCharacterComponent_Authority_OnChaseTargetFound");
static_assert(sizeof(ChaserCharacterComponent_Authority_OnChaseTargetFound) == 0x000008, "Wrong size on ChaserCharacterComponent_Authority_OnChaseTargetFound");
static_assert(offsetof(ChaserCharacterComponent_Authority_OnChaseTargetFound, Pawn) == 0x000000, "Member 'ChaserCharacterComponent_Authority_OnChaseTargetFound::Pawn' has a wrong offset!");

// Function DeadByDaylight.ChaserCharacterComponent.Multicast_OnChaseEnd
// 0x0050 (0x0050 - 0x0000)
struct ChaserCharacterComponent_Multicast_OnChaseEnd final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChaseUpdateInfo                       ChaseUpdateInfo;                                   // 0x0008(0x0048)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaserCharacterComponent_Multicast_OnChaseEnd) == 0x000008, "Wrong alignment on ChaserCharacterComponent_Multicast_OnChaseEnd");
static_assert(sizeof(ChaserCharacterComponent_Multicast_OnChaseEnd) == 0x000050, "Wrong size on ChaserCharacterComponent_Multicast_OnChaseEnd");
static_assert(offsetof(ChaserCharacterComponent_Multicast_OnChaseEnd, Survivor) == 0x000000, "Member 'ChaserCharacterComponent_Multicast_OnChaseEnd::Survivor' has a wrong offset!");
static_assert(offsetof(ChaserCharacterComponent_Multicast_OnChaseEnd, ChaseUpdateInfo) == 0x000008, "Member 'ChaserCharacterComponent_Multicast_OnChaseEnd::ChaseUpdateInfo' has a wrong offset!");

// Function DeadByDaylight.ChaserCharacterComponent.Multicast_OnChaseStart
// 0x0008 (0x0008 - 0x0000)
struct ChaserCharacterComponent_Multicast_OnChaseStart final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaserCharacterComponent_Multicast_OnChaseStart) == 0x000008, "Wrong alignment on ChaserCharacterComponent_Multicast_OnChaseStart");
static_assert(sizeof(ChaserCharacterComponent_Multicast_OnChaseStart) == 0x000008, "Wrong size on ChaserCharacterComponent_Multicast_OnChaseStart");
static_assert(offsetof(ChaserCharacterComponent_Multicast_OnChaseStart, Survivor) == 0x000000, "Member 'ChaserCharacterComponent_Multicast_OnChaseStart::Survivor' has a wrong offset!");

// Function DeadByDaylight.ChaserCharacterComponent.OnKillerLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct ChaserCharacterComponent_OnKillerLocallyObservedChanged final
{
public:
	bool                                          LocallyObserved;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaserCharacterComponent_OnKillerLocallyObservedChanged) == 0x000001, "Wrong alignment on ChaserCharacterComponent_OnKillerLocallyObservedChanged");
static_assert(sizeof(ChaserCharacterComponent_OnKillerLocallyObservedChanged) == 0x000001, "Wrong size on ChaserCharacterComponent_OnKillerLocallyObservedChanged");
static_assert(offsetof(ChaserCharacterComponent_OnKillerLocallyObservedChanged, LocallyObserved) == 0x000000, "Member 'ChaserCharacterComponent_OnKillerLocallyObservedChanged::LocallyObserved' has a wrong offset!");

// Function DeadByDaylight.MagicFountainOutlineUpdateStrategy.SetFountainCorrupted
// 0x0001 (0x0001 - 0x0000)
struct MagicFountainOutlineUpdateStrategy_SetFountainCorrupted final
{
public:
	bool                                          Corrupted;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicFountainOutlineUpdateStrategy_SetFountainCorrupted) == 0x000001, "Wrong alignment on MagicFountainOutlineUpdateStrategy_SetFountainCorrupted");
static_assert(sizeof(MagicFountainOutlineUpdateStrategy_SetFountainCorrupted) == 0x000001, "Wrong size on MagicFountainOutlineUpdateStrategy_SetFountainCorrupted");
static_assert(offsetof(MagicFountainOutlineUpdateStrategy_SetFountainCorrupted, Corrupted) == 0x000000, "Member 'MagicFountainOutlineUpdateStrategy_SetFountainCorrupted::Corrupted' has a wrong offset!");

// Function DeadByDaylight.CinematicManager.GetNextCinematicToPlay
// 0x0078 (0x0078 - 0x0000)
struct CinematicManager_GetNextCinematicToPlay final
{
public:
	struct FCinematic                             ReturnValue;                                       // 0x0000(0x0078)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_GetNextCinematicToPlay) == 0x000008, "Wrong alignment on CinematicManager_GetNextCinematicToPlay");
static_assert(sizeof(CinematicManager_GetNextCinematicToPlay) == 0x000078, "Wrong size on CinematicManager_GetNextCinematicToPlay");
static_assert(offsetof(CinematicManager_GetNextCinematicToPlay, ReturnValue) == 0x000000, "Member 'CinematicManager_GetNextCinematicToPlay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CinematicManager.PlayMultiple
// 0x0010 (0x0010 - 0x0000)
struct CinematicManager_PlayMultiple final
{
public:
	TArray<struct FCinematic>                     Cinematics;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_PlayMultiple) == 0x000008, "Wrong alignment on CinematicManager_PlayMultiple");
static_assert(sizeof(CinematicManager_PlayMultiple) == 0x000010, "Wrong size on CinematicManager_PlayMultiple");
static_assert(offsetof(CinematicManager_PlayMultiple, Cinematics) == 0x000000, "Member 'CinematicManager_PlayMultiple::Cinematics' has a wrong offset!");

// Function DeadByDaylight.CinematicManager.PlaySingle
// 0x0078 (0x0078 - 0x0000)
struct CinematicManager_PlaySingle final
{
public:
	struct FCinematic                             Cinematic;                                         // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_PlaySingle) == 0x000008, "Wrong alignment on CinematicManager_PlaySingle");
static_assert(sizeof(CinematicManager_PlaySingle) == 0x000078, "Wrong size on CinematicManager_PlaySingle");
static_assert(offsetof(CinematicManager_PlaySingle, Cinematic) == 0x000000, "Member 'CinematicManager_PlaySingle::Cinematic' has a wrong offset!");

// Function DeadByDaylight.CinematicManager.SetVideoThumbnailProperties
// 0x0078 (0x0078 - 0x0000)
struct CinematicManager_SetVideoThumbnailProperties final
{
public:
	struct FCinematic                             Cinematic;                                         // 0x0000(0x0078)(Parm, OutParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_SetVideoThumbnailProperties) == 0x000008, "Wrong alignment on CinematicManager_SetVideoThumbnailProperties");
static_assert(sizeof(CinematicManager_SetVideoThumbnailProperties) == 0x000078, "Wrong size on CinematicManager_SetVideoThumbnailProperties");
static_assert(offsetof(CinematicManager_SetVideoThumbnailProperties, Cinematic) == 0x000000, "Member 'CinematicManager_SetVideoThumbnailProperties::Cinematic' has a wrong offset!");

// Function DeadByDaylight.CinematicManager.HasCinematicToPlay
// 0x0001 (0x0001 - 0x0000)
struct CinematicManager_HasCinematicToPlay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicManager_HasCinematicToPlay) == 0x000001, "Wrong alignment on CinematicManager_HasCinematicToPlay");
static_assert(sizeof(CinematicManager_HasCinematicToPlay) == 0x000001, "Wrong size on CinematicManager_HasCinematicToPlay");
static_assert(offsetof(CinematicManager_HasCinematicToPlay, ReturnValue) == 0x000000, "Member 'CinematicManager_HasCinematicToPlay::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorDetectorComponent.OnOverlapEnter
// 0x0110 (0x0110 - 0x0000)
struct MapActorDetectorComponent_OnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDetectorComponent_OnOverlapEnter) == 0x000008, "Wrong alignment on MapActorDetectorComponent_OnOverlapEnter");
static_assert(sizeof(MapActorDetectorComponent_OnOverlapEnter) == 0x000110, "Wrong size on MapActorDetectorComponent_OnOverlapEnter");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, HitComponent) == 0x000000, "Member 'MapActorDetectorComponent_OnOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, OtherActor) == 0x000008, "Member 'MapActorDetectorComponent_OnOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, OtherComp) == 0x000010, "Member 'MapActorDetectorComponent_OnOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'MapActorDetectorComponent_OnOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, bFromSweep) == 0x00001C, "Member 'MapActorDetectorComponent_OnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(MapActorDetectorComponent_OnOverlapEnter, SweepResult) == 0x000020, "Member 'MapActorDetectorComponent_OnOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.MapActorDetectorComponent.SetDetectionPrimitive
// 0x0008 (0x0008 - 0x0000)
struct MapActorDetectorComponent_SetDetectionPrimitive final
{
public:
	class UPrimitiveComponent*                    Primitive;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong alignment on MapActorDetectorComponent_SetDetectionPrimitive");
static_assert(sizeof(MapActorDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong size on MapActorDetectorComponent_SetDetectionPrimitive");
static_assert(offsetof(MapActorDetectorComponent_SetDetectionPrimitive, Primitive) == 0x000000, "Member 'MapActorDetectorComponent_SetDetectionPrimitive::Primitive' has a wrong offset!");

// Function DeadByDaylight.CollectableAudioComponent.AddonConsumed
// 0x0008 (0x0008 - 0x0000)
struct CollectableAudioComponent_AddonConsumed final
{
public:
	class UItemAddon*                             Addon;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectableAudioComponent_AddonConsumed) == 0x000008, "Wrong alignment on CollectableAudioComponent_AddonConsumed");
static_assert(sizeof(CollectableAudioComponent_AddonConsumed) == 0x000008, "Wrong size on CollectableAudioComponent_AddonConsumed");
static_assert(offsetof(CollectableAudioComponent_AddonConsumed, Addon) == 0x000000, "Member 'CollectableAudioComponent_AddonConsumed::Addon' has a wrong offset!");

// Function DeadByDaylight.CollectableAudioComponent.OnItemDropped
// 0x0001 (0x0001 - 0x0000)
struct CollectableAudioComponent_OnItemDropped final
{
public:
	EItemDropType                                 DropType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectableAudioComponent_OnItemDropped) == 0x000001, "Wrong alignment on CollectableAudioComponent_OnItemDropped");
static_assert(sizeof(CollectableAudioComponent_OnItemDropped) == 0x000001, "Wrong size on CollectableAudioComponent_OnItemDropped");
static_assert(offsetof(CollectableAudioComponent_OnItemDropped, DropType) == 0x000000, "Member 'CollectableAudioComponent_OnItemDropped::DropType' has a wrong offset!");

// Function DeadByDaylight.CollectableAudioComponent.PlayerPickedUpCollectable
// 0x0008 (0x0008 - 0x0000)
struct CollectableAudioComponent_PlayerPickedUpCollectable final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectableAudioComponent_PlayerPickedUpCollectable) == 0x000008, "Wrong alignment on CollectableAudioComponent_PlayerPickedUpCollectable");
static_assert(sizeof(CollectableAudioComponent_PlayerPickedUpCollectable) == 0x000008, "Wrong size on CollectableAudioComponent_PlayerPickedUpCollectable");
static_assert(offsetof(CollectableAudioComponent_PlayerPickedUpCollectable, Player) == 0x000000, "Member 'CollectableAudioComponent_PlayerPickedUpCollectable::Player' has a wrong offset!");

// Function DeadByDaylight.CollectableAudioComponent.PostAudioEvent
// 0x0010 (0x0010 - 0x0000)
struct CollectableAudioComponent_PostAudioEvent final
{
public:
	class FString                                 AudioCall;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CollectableAudioComponent_PostAudioEvent) == 0x000008, "Wrong alignment on CollectableAudioComponent_PostAudioEvent");
static_assert(sizeof(CollectableAudioComponent_PostAudioEvent) == 0x000010, "Wrong size on CollectableAudioComponent_PostAudioEvent");
static_assert(offsetof(CollectableAudioComponent_PostAudioEvent, AudioCall) == 0x000000, "Member 'CollectableAudioComponent_PostAudioEvent::AudioCall' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnAddMap
// 0x0010 (0x0010 - 0x0000)
struct MatchManagementScreen_OnAddMap final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnAddMap) == 0x000008, "Wrong alignment on MatchManagementScreen_OnAddMap");
static_assert(sizeof(MatchManagementScreen_OnAddMap) == 0x000010, "Wrong size on MatchManagementScreen_OnAddMap");
static_assert(offsetof(MatchManagementScreen_OnAddMap, MapId) == 0x000000, "Member 'MatchManagementScreen_OnAddMap::MapId' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnItemsAndAddonsSettingsChange
// 0x0004 (0x0004 - 0x0000)
struct MatchManagementScreen_OnItemsAndAddonsSettingsChange final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnItemsAndAddonsSettingsChange) == 0x000004, "Wrong alignment on MatchManagementScreen_OnItemsAndAddonsSettingsChange");
static_assert(sizeof(MatchManagementScreen_OnItemsAndAddonsSettingsChange) == 0x000004, "Wrong size on MatchManagementScreen_OnItemsAndAddonsSettingsChange");
static_assert(offsetof(MatchManagementScreen_OnItemsAndAddonsSettingsChange, Value) == 0x000000, "Member 'MatchManagementScreen_OnItemsAndAddonsSettingsChange::Value' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnOfferingsSettingsChange
// 0x0004 (0x0004 - 0x0000)
struct MatchManagementScreen_OnOfferingsSettingsChange final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnOfferingsSettingsChange) == 0x000004, "Wrong alignment on MatchManagementScreen_OnOfferingsSettingsChange");
static_assert(sizeof(MatchManagementScreen_OnOfferingsSettingsChange) == 0x000004, "Wrong size on MatchManagementScreen_OnOfferingsSettingsChange");
static_assert(offsetof(MatchManagementScreen_OnOfferingsSettingsChange, Value) == 0x000000, "Member 'MatchManagementScreen_OnOfferingsSettingsChange::Value' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnPerksSettingsChange
// 0x0004 (0x0004 - 0x0000)
struct MatchManagementScreen_OnPerksSettingsChange final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnPerksSettingsChange) == 0x000004, "Wrong alignment on MatchManagementScreen_OnPerksSettingsChange");
static_assert(sizeof(MatchManagementScreen_OnPerksSettingsChange) == 0x000004, "Wrong size on MatchManagementScreen_OnPerksSettingsChange");
static_assert(offsetof(MatchManagementScreen_OnPerksSettingsChange, Value) == 0x000000, "Member 'MatchManagementScreen_OnPerksSettingsChange::Value' has a wrong offset!");

// Function DeadByDaylight.MatchManagementScreen.OnRemoveMap
// 0x0010 (0x0010 - 0x0000)
struct MatchManagementScreen_OnRemoveMap final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchManagementScreen_OnRemoveMap) == 0x000008, "Wrong alignment on MatchManagementScreen_OnRemoveMap");
static_assert(sizeof(MatchManagementScreen_OnRemoveMap) == 0x000010, "Wrong size on MatchManagementScreen_OnRemoveMap");
static_assert(offsetof(MatchManagementScreen_OnRemoveMap, MapId) == 0x000000, "Member 'MatchManagementScreen_OnRemoveMap::MapId' has a wrong offset!");

// Function DeadByDaylight.CommentatorSubsystem.OnCommentatorAudioFinished
// 0x0010 (0x0010 - 0x0000)
struct CommentatorSubsystem_OnCommentatorAudioFinished final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CommentatorSubsystem_OnCommentatorAudioFinished) == 0x000008, "Wrong alignment on CommentatorSubsystem_OnCommentatorAudioFinished");
static_assert(sizeof(CommentatorSubsystem_OnCommentatorAudioFinished) == 0x000010, "Wrong size on CommentatorSubsystem_OnCommentatorAudioFinished");
static_assert(offsetof(CommentatorSubsystem_OnCommentatorAudioFinished, CallbackType) == 0x000000, "Member 'CommentatorSubsystem_OnCommentatorAudioFinished::CallbackType' has a wrong offset!");
static_assert(offsetof(CommentatorSubsystem_OnCommentatorAudioFinished, CallbackInfo) == 0x000008, "Member 'CommentatorSubsystem_OnCommentatorAudioFinished::CallbackInfo' has a wrong offset!");

// Function DeadByDaylight.DisplayStand.BlockRotation
// 0x0001 (0x0001 - 0x0000)
struct DisplayStand_BlockRotation final
{
public:
	bool                                          ShouldBlockRotation;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStand_BlockRotation) == 0x000001, "Wrong alignment on DisplayStand_BlockRotation");
static_assert(sizeof(DisplayStand_BlockRotation) == 0x000001, "Wrong size on DisplayStand_BlockRotation");
static_assert(offsetof(DisplayStand_BlockRotation, ShouldBlockRotation) == 0x000000, "Member 'DisplayStand_BlockRotation::ShouldBlockRotation' has a wrong offset!");

// Function DeadByDaylight.DisplayStand.OnCurrentActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct DisplayStand_OnCurrentActorDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStand_OnCurrentActorDestroyed) == 0x000008, "Wrong alignment on DisplayStand_OnCurrentActorDestroyed");
static_assert(sizeof(DisplayStand_OnCurrentActorDestroyed) == 0x000008, "Wrong size on DisplayStand_OnCurrentActorDestroyed");
static_assert(offsetof(DisplayStand_OnCurrentActorDestroyed, DestroyedActor) == 0x000000, "Member 'DisplayStand_OnCurrentActorDestroyed::DestroyedActor' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialPlayerHudController.HideHudComponent
// 0x0001 (0x0001 - 0x0000)
struct AtlantaTutorialPlayerHudController_HideHudComponent final
{
public:
	EHudComponent                                 HudComponentToHide;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialPlayerHudController_HideHudComponent) == 0x000001, "Wrong alignment on AtlantaTutorialPlayerHudController_HideHudComponent");
static_assert(sizeof(AtlantaTutorialPlayerHudController_HideHudComponent) == 0x000001, "Wrong size on AtlantaTutorialPlayerHudController_HideHudComponent");
static_assert(offsetof(AtlantaTutorialPlayerHudController_HideHudComponent, HudComponentToHide) == 0x000000, "Member 'AtlantaTutorialPlayerHudController_HideHudComponent::HudComponentToHide' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialPlayerHudController.SetVirtualJoystickInputEnabled
// 0x0001 (0x0001 - 0x0000)
struct AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled) == 0x000001, "Wrong alignment on AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled");
static_assert(sizeof(AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled) == 0x000001, "Wrong size on AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled");
static_assert(offsetof(AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled, Enable) == 0x000000, "Member 'AtlantaTutorialPlayerHudController_SetVirtualJoystickInputEnabled::Enable' has a wrong offset!");

// Function DeadByDaylight.AtlantaTutorialPlayerHudController.ShowHudComponent
// 0x0001 (0x0001 - 0x0000)
struct AtlantaTutorialPlayerHudController_ShowHudComponent final
{
public:
	EHudComponent                                 HudComponentToShow;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AtlantaTutorialPlayerHudController_ShowHudComponent) == 0x000001, "Wrong alignment on AtlantaTutorialPlayerHudController_ShowHudComponent");
static_assert(sizeof(AtlantaTutorialPlayerHudController_ShowHudComponent) == 0x000001, "Wrong size on AtlantaTutorialPlayerHudController_ShowHudComponent");
static_assert(offsetof(AtlantaTutorialPlayerHudController_ShowHudComponent, HudComponentToShow) == 0x000000, "Member 'AtlantaTutorialPlayerHudController_ShowHudComponent::HudComponentToShow' has a wrong offset!");

// Function DeadByDaylight.AttachInteractionComponent.Authority_SetInteractionAttachPoints
// 0x0010 (0x0010 - 0x0000)
struct AttachInteractionComponent_Authority_SetInteractionAttachPoints final
{
public:
	TArray<class USceneComponent*>                InteractionsAttachPoints;                          // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AttachInteractionComponent_Authority_SetInteractionAttachPoints) == 0x000008, "Wrong alignment on AttachInteractionComponent_Authority_SetInteractionAttachPoints");
static_assert(sizeof(AttachInteractionComponent_Authority_SetInteractionAttachPoints) == 0x000010, "Wrong size on AttachInteractionComponent_Authority_SetInteractionAttachPoints");
static_assert(offsetof(AttachInteractionComponent_Authority_SetInteractionAttachPoints, InteractionsAttachPoints) == 0x000000, "Member 'AttachInteractionComponent_Authority_SetInteractionAttachPoints::InteractionsAttachPoints' has a wrong offset!");

// Function DeadByDaylight.AudioFXComponent.Authority_Deafen
// 0x0004 (0x0004 - 0x0000)
struct AudioFXComponent_Authority_Deafen final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFXComponent_Authority_Deafen) == 0x000004, "Wrong alignment on AudioFXComponent_Authority_Deafen");
static_assert(sizeof(AudioFXComponent_Authority_Deafen) == 0x000004, "Wrong size on AudioFXComponent_Authority_Deafen");
static_assert(offsetof(AudioFXComponent_Authority_Deafen, Duration) == 0x000000, "Member 'AudioFXComponent_Authority_Deafen::Duration' has a wrong offset!");

// Function DeadByDaylight.AudioFXComponent.Multicast_Deafen
// 0x0004 (0x0004 - 0x0000)
struct AudioFXComponent_Multicast_Deafen final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFXComponent_Multicast_Deafen) == 0x000004, "Wrong alignment on AudioFXComponent_Multicast_Deafen");
static_assert(sizeof(AudioFXComponent_Multicast_Deafen) == 0x000004, "Wrong size on AudioFXComponent_Multicast_Deafen");
static_assert(offsetof(AudioFXComponent_Multicast_Deafen, Duration) == 0x000000, "Member 'AudioFXComponent_Multicast_Deafen::Duration' has a wrong offset!");

// Function DeadByDaylight.AudioFXComponent.OnLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct AudioFXComponent_OnLocallyObservedChanged final
{
public:
	bool                                          LocallyObserved;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFXComponent_OnLocallyObservedChanged) == 0x000001, "Wrong alignment on AudioFXComponent_OnLocallyObservedChanged");
static_assert(sizeof(AudioFXComponent_OnLocallyObservedChanged) == 0x000001, "Wrong size on AudioFXComponent_OnLocallyObservedChanged");
static_assert(offsetof(AudioFXComponent_OnLocallyObservedChanged, LocallyObserved) == 0x000000, "Member 'AudioFXComponent_OnLocallyObservedChanged::LocallyObserved' has a wrong offset!");

// Function DeadByDaylight.AudioFXComponent.SetAudioAmbientDetector
// 0x0008 (0x0008 - 0x0000)
struct AudioFXComponent_SetAudioAmbientDetector final
{
public:
	class UPrimitiveComponent*                    AudioAmbientDetector;                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioFXComponent_SetAudioAmbientDetector) == 0x000008, "Wrong alignment on AudioFXComponent_SetAudioAmbientDetector");
static_assert(sizeof(AudioFXComponent_SetAudioAmbientDetector) == 0x000008, "Wrong size on AudioFXComponent_SetAudioAmbientDetector");
static_assert(offsetof(AudioFXComponent_SetAudioAmbientDetector, AudioAmbientDetector) == 0x000000, "Member 'AudioFXComponent_SetAudioAmbientDetector::AudioAmbientDetector' has a wrong offset!");

// Function DeadByDaylight.AuthoritativeMovementComponent.OnPawnDetectorOverlapEnter
// 0x0110 (0x0110 - 0x0000)
struct AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter) == 0x000008, "Wrong alignment on AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter");
static_assert(sizeof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter) == 0x000110, "Wrong size on AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, HitComponent) == 0x000000, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, OtherActor) == 0x000008, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, OtherComp) == 0x000010, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, bFromSweep) == 0x00001C, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter, SweepResult) == 0x000020, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.AuthoritativeMovementComponent.OnPawnDetectorOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct AuthoritativeMovementComponent_OnPawnDetectorOverlapExit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit) == 0x000008, "Wrong alignment on AuthoritativeMovementComponent_OnPawnDetectorOverlapExit");
static_assert(sizeof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit) == 0x000020, "Wrong size on AuthoritativeMovementComponent_OnPawnDetectorOverlapExit");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit, HitComponent) == 0x000000, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapExit::HitComponent' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit, OtherActor) == 0x000008, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapExit::OtherActor' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit, OtherComp) == 0x000010, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapExit::OtherComp' has a wrong offset!");
static_assert(offsetof(AuthoritativeMovementComponent_OnPawnDetectorOverlapExit, OtherBodyIndex) == 0x000018, "Member 'AuthoritativeMovementComponent_OnPawnDetectorOverlapExit::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.AuthoritativeMovementComponent.SetPawnDetector
// 0x0008 (0x0008 - 0x0000)
struct AuthoritativeMovementComponent_SetPawnDetector final
{
public:
	class UCapsuleComponent*                      PawnDetector;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthoritativeMovementComponent_SetPawnDetector) == 0x000008, "Wrong alignment on AuthoritativeMovementComponent_SetPawnDetector");
static_assert(sizeof(AuthoritativeMovementComponent_SetPawnDetector) == 0x000008, "Wrong size on AuthoritativeMovementComponent_SetPawnDetector");
static_assert(offsetof(AuthoritativeMovementComponent_SetPawnDetector, PawnDetector) == 0x000000, "Member 'AuthoritativeMovementComponent_SetPawnDetector::PawnDetector' has a wrong offset!");

// DelegateFunction DeadByDaylight.AutomaticLeanComponent.OnCanInitiateLeanChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_OnCanInitiateLeanChanged__DelegateSignature final
{
public:
	bool                                          CanInitiate;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_OnCanInitiateLeanChanged__DelegateSignature) == 0x000001, "Wrong alignment on AutomaticLeanComponent_OnCanInitiateLeanChanged__DelegateSignature");
static_assert(sizeof(AutomaticLeanComponent_OnCanInitiateLeanChanged__DelegateSignature) == 0x000001, "Wrong size on AutomaticLeanComponent_OnCanInitiateLeanChanged__DelegateSignature");
static_assert(offsetof(AutomaticLeanComponent_OnCanInitiateLeanChanged__DelegateSignature, CanInitiate) == 0x000000, "Member 'AutomaticLeanComponent_OnCanInitiateLeanChanged__DelegateSignature::CanInitiate' has a wrong offset!");

// DelegateFunction DeadByDaylight.AutomaticLeanComponent.OnLeanStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_OnLeanStateChanged__DelegateSignature final
{
public:
	ELeanState                                    LeanState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_OnLeanStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on AutomaticLeanComponent_OnLeanStateChanged__DelegateSignature");
static_assert(sizeof(AutomaticLeanComponent_OnLeanStateChanged__DelegateSignature) == 0x000001, "Wrong size on AutomaticLeanComponent_OnLeanStateChanged__DelegateSignature");
static_assert(offsetof(AutomaticLeanComponent_OnLeanStateChanged__DelegateSignature, LeanState) == 0x000000, "Member 'AutomaticLeanComponent_OnLeanStateChanged__DelegateSignature::LeanState' has a wrong offset!");

// DelegateFunction DeadByDaylight.AutomaticLeanComponent.OnPotentialLeanStateChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_OnPotentialLeanStateChanged__DelegateSignature final
{
public:
	ELeanState                                    LeanState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_OnPotentialLeanStateChanged__DelegateSignature) == 0x000001, "Wrong alignment on AutomaticLeanComponent_OnPotentialLeanStateChanged__DelegateSignature");
static_assert(sizeof(AutomaticLeanComponent_OnPotentialLeanStateChanged__DelegateSignature) == 0x000001, "Wrong size on AutomaticLeanComponent_OnPotentialLeanStateChanged__DelegateSignature");
static_assert(offsetof(AutomaticLeanComponent_OnPotentialLeanStateChanged__DelegateSignature, LeanState) == 0x000000, "Member 'AutomaticLeanComponent_OnPotentialLeanStateChanged__DelegateSignature::LeanState' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.Server_SetLeanState
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_Server_SetLeanState final
{
public:
	ELeanState                                    LeanState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_Server_SetLeanState) == 0x000001, "Wrong alignment on AutomaticLeanComponent_Server_SetLeanState");
static_assert(sizeof(AutomaticLeanComponent_Server_SetLeanState) == 0x000001, "Wrong size on AutomaticLeanComponent_Server_SetLeanState");
static_assert(offsetof(AutomaticLeanComponent_Server_SetLeanState, LeanState) == 0x000000, "Member 'AutomaticLeanComponent_Server_SetLeanState::LeanState' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.CanInitiateLean
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_CanInitiateLean final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_CanInitiateLean) == 0x000001, "Wrong alignment on AutomaticLeanComponent_CanInitiateLean");
static_assert(sizeof(AutomaticLeanComponent_CanInitiateLean) == 0x000001, "Wrong size on AutomaticLeanComponent_CanInitiateLean");
static_assert(offsetof(AutomaticLeanComponent_CanInitiateLean, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_CanInitiateLean::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.GetAvailableDistanceInFrontOfCamera
// 0x0004 (0x0004 - 0x0000)
struct AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera) == 0x000004, "Wrong alignment on AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera");
static_assert(sizeof(AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera) == 0x000004, "Wrong size on AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera");
static_assert(offsetof(AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_GetAvailableDistanceInFrontOfCamera::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.GetLeanState
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_GetLeanState final
{
public:
	ELeanState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_GetLeanState) == 0x000001, "Wrong alignment on AutomaticLeanComponent_GetLeanState");
static_assert(sizeof(AutomaticLeanComponent_GetLeanState) == 0x000001, "Wrong size on AutomaticLeanComponent_GetLeanState");
static_assert(offsetof(AutomaticLeanComponent_GetLeanState, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_GetLeanState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.GetPotentialLeanState
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_GetPotentialLeanState final
{
public:
	ELeanState                                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_GetPotentialLeanState) == 0x000001, "Wrong alignment on AutomaticLeanComponent_GetPotentialLeanState");
static_assert(sizeof(AutomaticLeanComponent_GetPotentialLeanState) == 0x000001, "Wrong size on AutomaticLeanComponent_GetPotentialLeanState");
static_assert(offsetof(AutomaticLeanComponent_GetPotentialLeanState, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_GetPotentialLeanState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AutomaticLeanComponent.IsLeaning
// 0x0001 (0x0001 - 0x0000)
struct AutomaticLeanComponent_IsLeaning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AutomaticLeanComponent_IsLeaning) == 0x000001, "Wrong alignment on AutomaticLeanComponent_IsLeaning");
static_assert(sizeof(AutomaticLeanComponent_IsLeaning) == 0x000001, "Wrong size on AutomaticLeanComponent_IsLeaning");
static_assert(offsetof(AutomaticLeanComponent_IsLeaning, ReturnValue) == 0x000000, "Member 'AutomaticLeanComponent_IsLeaning::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CoopRepairTracker.SetHasEverCoopRepaired
// 0x0008 (0x0008 - 0x0000)
struct CoopRepairTracker_SetHasEverCoopRepaired final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoopRepairTracker_SetHasEverCoopRepaired) == 0x000008, "Wrong alignment on CoopRepairTracker_SetHasEverCoopRepaired");
static_assert(sizeof(CoopRepairTracker_SetHasEverCoopRepaired) == 0x000008, "Wrong size on CoopRepairTracker_SetHasEverCoopRepaired");
static_assert(offsetof(CoopRepairTracker_SetHasEverCoopRepaired, Player) == 0x000000, "Member 'CoopRepairTracker_SetHasEverCoopRepaired::Player' has a wrong offset!");

// Function DeadByDaylight.CoopRepairTracker.HasEverCoopRepaired
// 0x0010 (0x0010 - 0x0000)
struct CoopRepairTracker_HasEverCoopRepaired final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CoopRepairTracker_HasEverCoopRepaired) == 0x000008, "Wrong alignment on CoopRepairTracker_HasEverCoopRepaired");
static_assert(sizeof(CoopRepairTracker_HasEverCoopRepaired) == 0x000010, "Wrong size on CoopRepairTracker_HasEverCoopRepaired");
static_assert(offsetof(CoopRepairTracker_HasEverCoopRepaired, Player) == 0x000000, "Member 'CoopRepairTracker_HasEverCoopRepaired::Player' has a wrong offset!");
static_assert(offsetof(CoopRepairTracker_HasEverCoopRepaired, ReturnValue) == 0x000008, "Member 'CoopRepairTracker_HasEverCoopRepaired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.Authority_CheckActivation
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_Authority_CheckActivation final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GeneratorId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_Authority_CheckActivation) == 0x000004, "Wrong alignment on GeneratorDrivenActor_Authority_CheckActivation");
static_assert(sizeof(GeneratorDrivenActor_Authority_CheckActivation) == 0x000008, "Wrong size on GeneratorDrivenActor_Authority_CheckActivation");
static_assert(offsetof(GeneratorDrivenActor_Authority_CheckActivation, IsAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_Authority_CheckActivation::IsAutoCompleted' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Authority_CheckActivation, GeneratorId) == 0x000004, "Member 'GeneratorDrivenActor_Authority_CheckActivation::GeneratorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.Authority_CheckGeneratorRepairedBySurvivor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor) == 0x000008, "Wrong alignment on GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor");
static_assert(sizeof(GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor) == 0x000010, "Wrong size on GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor");
static_assert(offsetof(GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor::RepairingSurvivor' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor, GeneratorId) == 0x000008, "Member 'GeneratorDrivenActor_Authority_CheckGeneratorRepairedBySurvivor::GeneratorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.GetSharedTileRandomizer
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_GetSharedTileRandomizer final
{
public:
	struct FRandomStream                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_GetSharedTileRandomizer) == 0x000004, "Wrong alignment on GeneratorDrivenActor_GetSharedTileRandomizer");
static_assert(sizeof(GeneratorDrivenActor_GetSharedTileRandomizer) == 0x000008, "Wrong size on GeneratorDrivenActor_GetSharedTileRandomizer");
static_assert(offsetof(GeneratorDrivenActor_GetSharedTileRandomizer, ReturnValue) == 0x000000, "Member 'GeneratorDrivenActor_GetSharedTileRandomizer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.Multicast_ActivationChecked
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_Multicast_ActivationChecked final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoCompleted;                                   // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GeneratorId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_Multicast_ActivationChecked) == 0x000004, "Wrong alignment on GeneratorDrivenActor_Multicast_ActivationChecked");
static_assert(sizeof(GeneratorDrivenActor_Multicast_ActivationChecked) == 0x000008, "Wrong size on GeneratorDrivenActor_Multicast_ActivationChecked");
static_assert(offsetof(GeneratorDrivenActor_Multicast_ActivationChecked, Activated) == 0x000000, "Member 'GeneratorDrivenActor_Multicast_ActivationChecked::Activated' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Multicast_ActivationChecked, IsAutoCompleted) == 0x000001, "Member 'GeneratorDrivenActor_Multicast_ActivationChecked::IsAutoCompleted' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Multicast_ActivationChecked, GeneratorId) == 0x000004, "Member 'GeneratorDrivenActor_Multicast_ActivationChecked::GeneratorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.Multicast_GeneratorRepairedBySurvivor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor) == 0x000008, "Wrong alignment on GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor");
static_assert(sizeof(GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor) == 0x000010, "Wrong size on GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor");
static_assert(offsetof(GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor::RepairingSurvivor' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor, GeneratorId) == 0x000008, "Member 'GeneratorDrivenActor_Multicast_GeneratorRepairedBySurvivor::GeneratorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnActivateGeneratorDrivenActor
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnActivateGeneratorDrivenActor final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GeneratorId;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnActivateGeneratorDrivenActor) == 0x000004, "Wrong alignment on GeneratorDrivenActor_OnActivateGeneratorDrivenActor");
static_assert(sizeof(GeneratorDrivenActor_OnActivateGeneratorDrivenActor) == 0x000008, "Wrong size on GeneratorDrivenActor_OnActivateGeneratorDrivenActor");
static_assert(offsetof(GeneratorDrivenActor_OnActivateGeneratorDrivenActor, IsAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnActivateGeneratorDrivenActor::IsAutoCompleted' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_OnActivateGeneratorDrivenActor, GeneratorId) == 0x000004, "Member 'GeneratorDrivenActor_OnActivateGeneratorDrivenActor::GeneratorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivor final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivor) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivor");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivor) == 0x000010, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivor");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivor, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivor::RepairingSurvivor' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivor, GeneratorId) == 0x000008, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivor::GeneratorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent0
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0 final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent0::RepairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent1
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1 final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent1::RepairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent2
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2 final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent2::RepairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent3
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3 final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent3::RepairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent4
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4 final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent4::RepairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent5
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5 final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent5::RepairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedBySurvivorEvent6
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6 final
{
public:
	class ADBDPlayer*                             RepairingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6) == 0x000008, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6, RepairingSurvivor) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedBySurvivorEvent6::RepairingSurvivor' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent0
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent0 final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent0) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent0");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent0) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent0");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent0, IsAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent0::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent1
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent1 final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent1) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent1");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent1) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent1");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent1, IsAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent1::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent2
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent2 final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent2) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent2");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent2) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent2");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent2, IsAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent2::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent3
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent3 final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent3) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent3");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent3) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent3");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent3, IsAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent3::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent4
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent4 final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent4) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent4");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent4) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent4");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent4, IsAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent4::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent5
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent5 final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent5) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent5");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent5) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent5");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent5, IsAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent5::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnGeneratorRepairedEvent6
// 0x0001 (0x0001 - 0x0000)
struct GeneratorDrivenActor_OnGeneratorRepairedEvent6 final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDrivenActor_OnGeneratorRepairedEvent6) == 0x000001, "Wrong alignment on GeneratorDrivenActor_OnGeneratorRepairedEvent6");
static_assert(sizeof(GeneratorDrivenActor_OnGeneratorRepairedEvent6) == 0x000001, "Wrong size on GeneratorDrivenActor_OnGeneratorRepairedEvent6");
static_assert(offsetof(GeneratorDrivenActor_OnGeneratorRepairedEvent6, IsAutoCompleted) == 0x000000, "Member 'GeneratorDrivenActor_OnGeneratorRepairedEvent6::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.OnInitGeneratorDrivenActor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_OnInitGeneratorDrivenActor final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_OnInitGeneratorDrivenActor) == 0x000008, "Wrong alignment on GeneratorDrivenActor_OnInitGeneratorDrivenActor");
static_assert(sizeof(GeneratorDrivenActor_OnInitGeneratorDrivenActor) == 0x000010, "Wrong size on GeneratorDrivenActor_OnInitGeneratorDrivenActor");
static_assert(offsetof(GeneratorDrivenActor_OnInitGeneratorDrivenActor, Generator) == 0x000000, "Member 'GeneratorDrivenActor_OnInitGeneratorDrivenActor::Generator' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_OnInitGeneratorDrivenActor, GeneratorId) == 0x000008, "Member 'GeneratorDrivenActor_OnInitGeneratorDrivenActor::GeneratorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.SetSpawnedObject
// 0x0010 (0x0010 - 0x0000)
struct GeneratorDrivenActor_SetSpawnedObject final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorId;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_SetSpawnedObject) == 0x000008, "Wrong alignment on GeneratorDrivenActor_SetSpawnedObject");
static_assert(sizeof(GeneratorDrivenActor_SetSpawnedObject) == 0x000010, "Wrong size on GeneratorDrivenActor_SetSpawnedObject");
static_assert(offsetof(GeneratorDrivenActor_SetSpawnedObject, Generator) == 0x000000, "Member 'GeneratorDrivenActor_SetSpawnedObject::Generator' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_SetSpawnedObject, GeneratorId) == 0x000008, "Member 'GeneratorDrivenActor_SetSpawnedObject::GeneratorId' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.IsActivated
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_IsActivated final
{
public:
	int32                                         GeneratorId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_IsActivated) == 0x000004, "Wrong alignment on GeneratorDrivenActor_IsActivated");
static_assert(sizeof(GeneratorDrivenActor_IsActivated) == 0x000008, "Wrong size on GeneratorDrivenActor_IsActivated");
static_assert(offsetof(GeneratorDrivenActor_IsActivated, GeneratorId) == 0x000000, "Member 'GeneratorDrivenActor_IsActivated::GeneratorId' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_IsActivated, ReturnValue) == 0x000004, "Member 'GeneratorDrivenActor_IsActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorDrivenActor.IsValidGeneratorId
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDrivenActor_IsValidGeneratorId final
{
public:
	int32                                         GeneratorId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorDrivenActor_IsValidGeneratorId) == 0x000004, "Wrong alignment on GeneratorDrivenActor_IsValidGeneratorId");
static_assert(sizeof(GeneratorDrivenActor_IsValidGeneratorId) == 0x000008, "Wrong size on GeneratorDrivenActor_IsValidGeneratorId");
static_assert(offsetof(GeneratorDrivenActor_IsValidGeneratorId, GeneratorId) == 0x000000, "Member 'GeneratorDrivenActor_IsValidGeneratorId::GeneratorId' has a wrong offset!");
static_assert(offsetof(GeneratorDrivenActor_IsValidGeneratorId, ReturnValue) == 0x000004, "Member 'GeneratorDrivenActor_IsValidGeneratorId::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BaseEscapeThroughHatch.GetHatch
// 0x0008 (0x0008 - 0x0000)
struct BaseEscapeThroughHatch_GetHatch final
{
public:
	class AHatch*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseEscapeThroughHatch_GetHatch) == 0x000008, "Wrong alignment on BaseEscapeThroughHatch_GetHatch");
static_assert(sizeof(BaseEscapeThroughHatch_GetHatch) == 0x000008, "Wrong size on BaseEscapeThroughHatch_GetHatch");
static_assert(offsetof(BaseEscapeThroughHatch_GetHatch, ReturnValue) == 0x000000, "Member 'BaseEscapeThroughHatch_GetHatch::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BaseLinkedVomitProjectile.NativeExplode
// 0x0048 (0x0048 - 0x0000)
struct BaseLinkedVomitProjectile_NativeExplode final
{
public:
	struct FImpactInfo                            ImpactInfo;                                        // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseLinkedVomitProjectile_NativeExplode) == 0x000008, "Wrong alignment on BaseLinkedVomitProjectile_NativeExplode");
static_assert(sizeof(BaseLinkedVomitProjectile_NativeExplode) == 0x000048, "Wrong size on BaseLinkedVomitProjectile_NativeExplode");
static_assert(offsetof(BaseLinkedVomitProjectile_NativeExplode, ImpactInfo) == 0x000000, "Member 'BaseLinkedVomitProjectile_NativeExplode::ImpactInfo' has a wrong offset!");

// Function DeadByDaylight.BaseLinkedVomitProjectile.OnAffectInteractable
// 0x0010 (0x0010 - 0x0000)
struct BaseLinkedVomitProjectile_OnAffectInteractable final
{
public:
	class AInteractable*                          Interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        HitComponent;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseLinkedVomitProjectile_OnAffectInteractable) == 0x000008, "Wrong alignment on BaseLinkedVomitProjectile_OnAffectInteractable");
static_assert(sizeof(BaseLinkedVomitProjectile_OnAffectInteractable) == 0x000010, "Wrong size on BaseLinkedVomitProjectile_OnAffectInteractable");
static_assert(offsetof(BaseLinkedVomitProjectile_OnAffectInteractable, Interactable) == 0x000000, "Member 'BaseLinkedVomitProjectile_OnAffectInteractable::Interactable' has a wrong offset!");
static_assert(offsetof(BaseLinkedVomitProjectile_OnAffectInteractable, HitComponent) == 0x000008, "Member 'BaseLinkedVomitProjectile_OnAffectInteractable::HitComponent' has a wrong offset!");

// Function DeadByDaylight.BaseLinkedVomitProjectile.OnAffectSurvivor
// 0x0008 (0x0008 - 0x0000)
struct BaseLinkedVomitProjectile_OnAffectSurvivor final
{
public:
	class ACamperPlayer*                          CamperPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseLinkedVomitProjectile_OnAffectSurvivor) == 0x000008, "Wrong alignment on BaseLinkedVomitProjectile_OnAffectSurvivor");
static_assert(sizeof(BaseLinkedVomitProjectile_OnAffectSurvivor) == 0x000008, "Wrong size on BaseLinkedVomitProjectile_OnAffectSurvivor");
static_assert(offsetof(BaseLinkedVomitProjectile_OnAffectSurvivor, CamperPlayer) == 0x000000, "Member 'BaseLinkedVomitProjectile_OnAffectSurvivor::CamperPlayer' has a wrong offset!");

// Function DeadByDaylight.BaseSky.CopyComponentsSettingsFromSource
// 0x0038 (0x0038 - 0x0000)
struct BaseSky_CopyComponentsSettingsFromSource final
{
public:
	class UStaticMeshComponent*                   MoonMesh;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             ShadowLight;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             GodRayLight;                                       // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x0020(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPostProcessComponent*                  PostProcess;                                       // 0x0028(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SourceBaseSkyClass;                                // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_CopyComponentsSettingsFromSource) == 0x000008, "Wrong alignment on BaseSky_CopyComponentsSettingsFromSource");
static_assert(sizeof(BaseSky_CopyComponentsSettingsFromSource) == 0x000038, "Wrong size on BaseSky_CopyComponentsSettingsFromSource");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, MoonMesh) == 0x000000, "Member 'BaseSky_CopyComponentsSettingsFromSource::MoonMesh' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, ShadowLight) == 0x000008, "Member 'BaseSky_CopyComponentsSettingsFromSource::ShadowLight' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, GodRayLight) == 0x000010, "Member 'BaseSky_CopyComponentsSettingsFromSource::GodRayLight' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, SkyLight) == 0x000018, "Member 'BaseSky_CopyComponentsSettingsFromSource::SkyLight' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, HeightFog) == 0x000020, "Member 'BaseSky_CopyComponentsSettingsFromSource::HeightFog' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, PostProcess) == 0x000028, "Member 'BaseSky_CopyComponentsSettingsFromSource::PostProcess' has a wrong offset!");
static_assert(offsetof(BaseSky_CopyComponentsSettingsFromSource, SourceBaseSkyClass) == 0x000030, "Member 'BaseSky_CopyComponentsSettingsFromSource::SourceBaseSkyClass' has a wrong offset!");

// Function DeadByDaylight.BaseSky.GetPostprocessComponent
// 0x0008 (0x0008 - 0x0000)
struct BaseSky_GetPostprocessComponent final
{
public:
	class UPostProcessComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_GetPostprocessComponent) == 0x000008, "Wrong alignment on BaseSky_GetPostprocessComponent");
static_assert(sizeof(BaseSky_GetPostprocessComponent) == 0x000008, "Wrong size on BaseSky_GetPostprocessComponent");
static_assert(offsetof(BaseSky_GetPostprocessComponent, ReturnValue) == 0x000000, "Member 'BaseSky_GetPostprocessComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BaseSky.GetVistasAndEnvironmentElements
// 0x0008 (0x0008 - 0x0000)
struct BaseSky_GetVistasAndEnvironmentElements final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_GetVistasAndEnvironmentElements) == 0x000008, "Wrong alignment on BaseSky_GetVistasAndEnvironmentElements");
static_assert(sizeof(BaseSky_GetVistasAndEnvironmentElements) == 0x000008, "Wrong size on BaseSky_GetVistasAndEnvironmentElements");
static_assert(offsetof(BaseSky_GetVistasAndEnvironmentElements, ReturnValue) == 0x000000, "Member 'BaseSky_GetVistasAndEnvironmentElements::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BaseSky.OnAlphaChanged
// 0x0010 (0x0010 - 0x0000)
struct BaseSky_OnAlphaChanged final
{
public:
	float                                         NewAlpha;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_OnAlphaChanged) == 0x000008, "Wrong alignment on BaseSky_OnAlphaChanged");
static_assert(sizeof(BaseSky_OnAlphaChanged) == 0x000010, "Wrong size on BaseSky_OnAlphaChanged");
static_assert(offsetof(BaseSky_OnAlphaChanged, NewAlpha) == 0x000000, "Member 'BaseSky_OnAlphaChanged::NewAlpha' has a wrong offset!");
static_assert(offsetof(BaseSky_OnAlphaChanged, Other) == 0x000008, "Member 'BaseSky_OnAlphaChanged::Other' has a wrong offset!");

// Function DeadByDaylight.BaseSky.OnFadeBegin
// 0x0008 (0x0008 - 0x0000)
struct BaseSky_OnFadeBegin final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_OnFadeBegin) == 0x000008, "Wrong alignment on BaseSky_OnFadeBegin");
static_assert(sizeof(BaseSky_OnFadeBegin) == 0x000008, "Wrong size on BaseSky_OnFadeBegin");
static_assert(offsetof(BaseSky_OnFadeBegin, Other) == 0x000000, "Member 'BaseSky_OnFadeBegin::Other' has a wrong offset!");

// Function DeadByDaylight.BaseSky.OnFadeEnd
// 0x0008 (0x0008 - 0x0000)
struct BaseSky_OnFadeEnd final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_OnFadeEnd) == 0x000008, "Wrong alignment on BaseSky_OnFadeEnd");
static_assert(sizeof(BaseSky_OnFadeEnd) == 0x000008, "Wrong size on BaseSky_OnFadeEnd");
static_assert(offsetof(BaseSky_OnFadeEnd, Other) == 0x000000, "Member 'BaseSky_OnFadeEnd::Other' has a wrong offset!");

// Function DeadByDaylight.BaseSky.SetCullDistance
// 0x0004 (0x0004 - 0x0000)
struct BaseSky_SetCullDistance final
{
public:
	float                                         NewCullDistance;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_SetCullDistance) == 0x000004, "Wrong alignment on BaseSky_SetCullDistance");
static_assert(sizeof(BaseSky_SetCullDistance) == 0x000004, "Wrong size on BaseSky_SetCullDistance");
static_assert(offsetof(BaseSky_SetCullDistance, NewCullDistance) == 0x000000, "Member 'BaseSky_SetCullDistance::NewCullDistance' has a wrong offset!");

// Function DeadByDaylight.BaseSky.SetProbesTint
// 0x0014 (0x0014 - 0x0000)
struct BaseSky_SetProbesTint final
{
public:
	struct FLinearColor                           InColor;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InSaturation;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_SetProbesTint) == 0x000004, "Wrong alignment on BaseSky_SetProbesTint");
static_assert(sizeof(BaseSky_SetProbesTint) == 0x000014, "Wrong size on BaseSky_SetProbesTint");
static_assert(offsetof(BaseSky_SetProbesTint, InColor) == 0x000000, "Member 'BaseSky_SetProbesTint::InColor' has a wrong offset!");
static_assert(offsetof(BaseSky_SetProbesTint, InSaturation) == 0x000010, "Member 'BaseSky_SetProbesTint::InSaturation' has a wrong offset!");

// Function DeadByDaylight.BaseSky.ToggleLightingChange
// 0x0010 (0x0010 - 0x0000)
struct BaseSky_ToggleLightingChange final
{
public:
	bool                                          ToggleOn;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ThemeName;                                         // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseSky_ToggleLightingChange) == 0x000004, "Wrong alignment on BaseSky_ToggleLightingChange");
static_assert(sizeof(BaseSky_ToggleLightingChange) == 0x000010, "Wrong size on BaseSky_ToggleLightingChange");
static_assert(offsetof(BaseSky_ToggleLightingChange, ToggleOn) == 0x000000, "Member 'BaseSky_ToggleLightingChange::ToggleOn' has a wrong offset!");
static_assert(offsetof(BaseSky_ToggleLightingChange, ThemeName) == 0x000004, "Member 'BaseSky_ToggleLightingChange::ThemeName' has a wrong offset!");

// Function DeadByDaylight.Bloodlust.DBD_SetBloodlust
// 0x0008 (0x0008 - 0x0000)
struct Bloodlust_DBD_SetBloodlust final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableDecay;                                       // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Bloodlust_DBD_SetBloodlust) == 0x000004, "Wrong alignment on Bloodlust_DBD_SetBloodlust");
static_assert(sizeof(Bloodlust_DBD_SetBloodlust) == 0x000008, "Wrong size on Bloodlust_DBD_SetBloodlust");
static_assert(offsetof(Bloodlust_DBD_SetBloodlust, Amount) == 0x000000, "Member 'Bloodlust_DBD_SetBloodlust::Amount' has a wrong offset!");
static_assert(offsetof(Bloodlust_DBD_SetBloodlust, EnableDecay) == 0x000004, "Member 'Bloodlust_DBD_SetBloodlust::EnableDecay' has a wrong offset!");

// Function DeadByDaylight.Bloodlust.OnChaseStartedEvent
// 0x0008 (0x0008 - 0x0000)
struct Bloodlust_OnChaseStartedEvent final
{
public:
	class ADBDPlayer*                             ChasedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bloodlust_OnChaseStartedEvent) == 0x000008, "Wrong alignment on Bloodlust_OnChaseStartedEvent");
static_assert(sizeof(Bloodlust_OnChaseStartedEvent) == 0x000008, "Wrong size on Bloodlust_OnChaseStartedEvent");
static_assert(offsetof(Bloodlust_OnChaseStartedEvent, ChasedPlayer) == 0x000000, "Member 'Bloodlust_OnChaseStartedEvent::ChasedPlayer' has a wrong offset!");

// Function DeadByDaylight.Bloodlust.OnRep_BloodlustTime
// 0x0004 (0x0004 - 0x0000)
struct Bloodlust_OnRep_BloodlustTime final
{
public:
	float                                         OldBloodlustTime;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bloodlust_OnRep_BloodlustTime) == 0x000004, "Wrong alignment on Bloodlust_OnRep_BloodlustTime");
static_assert(sizeof(Bloodlust_OnRep_BloodlustTime) == 0x000004, "Wrong size on Bloodlust_OnRep_BloodlustTime");
static_assert(offsetof(Bloodlust_OnRep_BloodlustTime, OldBloodlustTime) == 0x000000, "Member 'Bloodlust_OnRep_BloodlustTime::OldBloodlustTime' has a wrong offset!");

// Function DeadByDaylight.Bloodlust.GetBloodlustTime
// 0x0004 (0x0004 - 0x0000)
struct Bloodlust_GetBloodlustTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Bloodlust_GetBloodlustTime) == 0x000004, "Wrong alignment on Bloodlust_GetBloodlustTime");
static_assert(sizeof(Bloodlust_GetBloodlustTime) == 0x000004, "Wrong size on Bloodlust_GetBloodlustTime");
static_assert(offsetof(Bloodlust_GetBloodlustTime, ReturnValue) == 0x000000, "Member 'Bloodlust_GetBloodlustTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DetectionZoneUtilities.DetectObstruction
// 0x0050 (0x0050 - 0x0000)
struct DetectionZoneUtilities_DetectObstruction final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetectionZone                                DetectionZoneID;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalMaterial*                      PhysicalMaterialOut;                               // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                PositionOut;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalOut;                                         // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DetectionZoneUtilities_DetectObstruction) == 0x000008, "Wrong alignment on DetectionZoneUtilities_DetectObstruction");
static_assert(sizeof(DetectionZoneUtilities_DetectObstruction) == 0x000050, "Wrong size on DetectionZoneUtilities_DetectObstruction");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, Player) == 0x000000, "Member 'DetectionZoneUtilities_DetectObstruction::Player' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, DetectionZoneID) == 0x000008, "Member 'DetectionZoneUtilities_DetectObstruction::DetectionZoneID' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, PhysicalMaterialOut) == 0x000010, "Member 'DetectionZoneUtilities_DetectObstruction::PhysicalMaterialOut' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, PositionOut) == 0x000018, "Member 'DetectionZoneUtilities_DetectObstruction::PositionOut' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, NormalOut) == 0x000030, "Member 'DetectionZoneUtilities_DetectObstruction::NormalOut' has a wrong offset!");
static_assert(offsetof(DetectionZoneUtilities_DetectObstruction, ReturnValue) == 0x000048, "Member 'DetectionZoneUtilities_DetectObstruction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DischargeUntilThresholdIsReachedComponent.Authority_OnChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged) == 0x000008, "Wrong alignment on DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged");
static_assert(sizeof(DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged) == 0x000010, "Wrong size on DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged");
static_assert(offsetof(DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged, ChargeableComponent) == 0x000000, "Member 'DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged, PercentCompletionChange) == 0x000008, "Member 'DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged, TotalPercentComplete) == 0x00000C, "Member 'DischargeUntilThresholdIsReachedComponent_Authority_OnChargePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.DischargeUntilThresholdIsReachedComponent.OnChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct DischargeUntilThresholdIsReachedComponent_OnChargePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DischargeUntilThresholdIsReachedComponent_OnChargePercentChanged) == 0x000008, "Wrong alignment on DischargeUntilThresholdIsReachedComponent_OnChargePercentChanged");
static_assert(sizeof(DischargeUntilThresholdIsReachedComponent_OnChargePercentChanged) == 0x000010, "Wrong size on DischargeUntilThresholdIsReachedComponent_OnChargePercentChanged");
static_assert(offsetof(DischargeUntilThresholdIsReachedComponent_OnChargePercentChanged, ChargeableComponent) == 0x000000, "Member 'DischargeUntilThresholdIsReachedComponent_OnChargePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(DischargeUntilThresholdIsReachedComponent_OnChargePercentChanged, TotalPercentComplete) == 0x000008, "Member 'DischargeUntilThresholdIsReachedComponent_OnChargePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.BloodwebManager.Init
// 0x0008 (0x0008 - 0x0000)
struct BloodwebManager_Init final
{
public:
	class UDBDGameInstance*                       GameInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodwebManager_Init) == 0x000008, "Wrong alignment on BloodwebManager_Init");
static_assert(sizeof(BloodwebManager_Init) == 0x000008, "Wrong size on BloodwebManager_Init");
static_assert(offsetof(BloodwebManager_Init, GameInstance) == 0x000000, "Member 'BloodwebManager_Init::GameInstance' has a wrong offset!");

// Function DeadByDaylight.DisplayStandItemRequesterComponent.LoadItemsOnCharacter
// 0x0008 (0x0008 - 0x0000)
struct DisplayStandItemRequesterComponent_LoadItemsOnCharacter final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStandItemRequesterComponent_LoadItemsOnCharacter) == 0x000008, "Wrong alignment on DisplayStandItemRequesterComponent_LoadItemsOnCharacter");
static_assert(sizeof(DisplayStandItemRequesterComponent_LoadItemsOnCharacter) == 0x000008, "Wrong size on DisplayStandItemRequesterComponent_LoadItemsOnCharacter");
static_assert(offsetof(DisplayStandItemRequesterComponent_LoadItemsOnCharacter, Actor) == 0x000000, "Member 'DisplayStandItemRequesterComponent_LoadItemsOnCharacter::Actor' has a wrong offset!");

// Function DeadByDaylight.BlueprintPlatformUtilities.ToFloat
// 0x0018 (0x0018 - 0x0000)
struct BlueprintPlatformUtilities_ToFloat final
{
public:
	struct FDBDPerPlatformFloat                   PerPlatformFloat;                                  // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          ObjectInWorld;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintPlatformUtilities_ToFloat) == 0x000008, "Wrong alignment on BlueprintPlatformUtilities_ToFloat");
static_assert(sizeof(BlueprintPlatformUtilities_ToFloat) == 0x000018, "Wrong size on BlueprintPlatformUtilities_ToFloat");
static_assert(offsetof(BlueprintPlatformUtilities_ToFloat, PerPlatformFloat) == 0x000000, "Member 'BlueprintPlatformUtilities_ToFloat::PerPlatformFloat' has a wrong offset!");
static_assert(offsetof(BlueprintPlatformUtilities_ToFloat, ObjectInWorld) == 0x000008, "Member 'BlueprintPlatformUtilities_ToFloat::ObjectInWorld' has a wrong offset!");
static_assert(offsetof(BlueprintPlatformUtilities_ToFloat, ReturnValue) == 0x000010, "Member 'BlueprintPlatformUtilities_ToFloat::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BlueprintPlatformUtilities.ToInteger
// 0x0018 (0x0018 - 0x0000)
struct BlueprintPlatformUtilities_ToInteger final
{
public:
	struct FDBDPerPlatformInt                     PerPlatformInt;                                    // 0x0000(0x0004)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          ObjectInWorld;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BlueprintPlatformUtilities_ToInteger) == 0x000008, "Wrong alignment on BlueprintPlatformUtilities_ToInteger");
static_assert(sizeof(BlueprintPlatformUtilities_ToInteger) == 0x000018, "Wrong size on BlueprintPlatformUtilities_ToInteger");
static_assert(offsetof(BlueprintPlatformUtilities_ToInteger, PerPlatformInt) == 0x000000, "Member 'BlueprintPlatformUtilities_ToInteger::PerPlatformInt' has a wrong offset!");
static_assert(offsetof(BlueprintPlatformUtilities_ToInteger, ObjectInWorld) == 0x000008, "Member 'BlueprintPlatformUtilities_ToInteger::ObjectInWorld' has a wrong offset!");
static_assert(offsetof(BlueprintPlatformUtilities_ToInteger, ReturnValue) == 0x000010, "Member 'BlueprintPlatformUtilities_ToInteger::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.BreakableBase.Explode
// 0x0008 (0x0008 - 0x0000)
struct BreakableBase_Explode final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakableBase_Explode) == 0x000008, "Wrong alignment on BreakableBase_Explode");
static_assert(sizeof(BreakableBase_Explode) == 0x000008, "Wrong size on BreakableBase_Explode");
static_assert(offsetof(BreakableBase_Explode, Player) == 0x000000, "Member 'BreakableBase_Explode::Player' has a wrong offset!");

// Function DeadByDaylight.BreakableBase.ExplodeVfxSfx
// 0x0018 (0x0018 - 0x0000)
struct BreakableBase_ExplodeVfxSfx final
{
public:
	struct FVector                                ImpulseDir;                                        // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakableBase_ExplodeVfxSfx) == 0x000008, "Wrong alignment on BreakableBase_ExplodeVfxSfx");
static_assert(sizeof(BreakableBase_ExplodeVfxSfx) == 0x000018, "Wrong size on BreakableBase_ExplodeVfxSfx");
static_assert(offsetof(BreakableBase_ExplodeVfxSfx, ImpulseDir) == 0x000000, "Member 'BreakableBase_ExplodeVfxSfx::ImpulseDir' has a wrong offset!");

// Function DeadByDaylight.BreakableBase.IsUnbroken
// 0x0001 (0x0001 - 0x0000)
struct BreakableBase_IsUnbroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BreakableBase_IsUnbroken) == 0x000001, "Wrong alignment on BreakableBase_IsUnbroken");
static_assert(sizeof(BreakableBase_IsUnbroken) == 0x000001, "Wrong size on BreakableBase_IsUnbroken");
static_assert(offsetof(BreakableBase_IsUnbroken, ReturnValue) == 0x000000, "Member 'BreakableBase_IsUnbroken::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CameraFadeComponent.GetCameraFadeState
// 0x0001 (0x0001 - 0x0000)
struct CameraFadeComponent_GetCameraFadeState final
{
public:
	ECameraFadeState                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CameraFadeComponent_GetCameraFadeState) == 0x000001, "Wrong alignment on CameraFadeComponent_GetCameraFadeState");
static_assert(sizeof(CameraFadeComponent_GetCameraFadeState) == 0x000001, "Wrong size on CameraFadeComponent_GetCameraFadeState");
static_assert(offsetof(CameraFadeComponent_GetCameraFadeState, ReturnValue) == 0x000000, "Member 'CameraFadeComponent_GetCameraFadeState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperBloodTrailComponent.OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CamperBloodTrailComponent_OnDamageStateChanged final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            CurrentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperBloodTrailComponent_OnDamageStateChanged) == 0x000001, "Wrong alignment on CamperBloodTrailComponent_OnDamageStateChanged");
static_assert(sizeof(CamperBloodTrailComponent_OnDamageStateChanged) == 0x000002, "Wrong size on CamperBloodTrailComponent_OnDamageStateChanged");
static_assert(offsetof(CamperBloodTrailComponent_OnDamageStateChanged, OldDamageState) == 0x000000, "Member 'CamperBloodTrailComponent_OnDamageStateChanged::OldDamageState' has a wrong offset!");
static_assert(offsetof(CamperBloodTrailComponent_OnDamageStateChanged, CurrentDamageState) == 0x000001, "Member 'CamperBloodTrailComponent_OnDamageStateChanged::CurrentDamageState' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.GetLocallyObservedOrLocalCharacter
// 0x0010 (0x0010 - 0x0000)
struct CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter) == 0x000008, "Wrong alignment on CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter");
static_assert(sizeof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter) == 0x000010, "Wrong size on CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter");
static_assert(offsetof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter, WorldContextObject) == 0x000000, "Member 'CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter, ReturnValue) == 0x000008, "Member 'CharacterDreamworldComponent_GetLocallyObservedOrLocalCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.Authority_SetIsInDreamworld
// 0x0002 (0x0002 - 0x0000)
struct CharacterDreamworldComponent_Authority_SetIsInDreamworld final
{
public:
	bool                                          NewValue;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsScripted;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_Authority_SetIsInDreamworld) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_Authority_SetIsInDreamworld");
static_assert(sizeof(CharacterDreamworldComponent_Authority_SetIsInDreamworld) == 0x000002, "Wrong size on CharacterDreamworldComponent_Authority_SetIsInDreamworld");
static_assert(offsetof(CharacterDreamworldComponent_Authority_SetIsInDreamworld, NewValue) == 0x000000, "Member 'CharacterDreamworldComponent_Authority_SetIsInDreamworld::NewValue' has a wrong offset!");
static_assert(offsetof(CharacterDreamworldComponent_Authority_SetIsInDreamworld, IsScripted) == 0x000001, "Member 'CharacterDreamworldComponent_Authority_SetIsInDreamworld::IsScripted' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.FireWakeUpScoreEvent
// 0x0008 (0x0008 - 0x0000)
struct CharacterDreamworldComponent_FireWakeUpScoreEvent final
{
public:
	class ADBDPlayer*                             Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_FireWakeUpScoreEvent) == 0x000008, "Wrong alignment on CharacterDreamworldComponent_FireWakeUpScoreEvent");
static_assert(sizeof(CharacterDreamworldComponent_FireWakeUpScoreEvent) == 0x000008, "Wrong size on CharacterDreamworldComponent_FireWakeUpScoreEvent");
static_assert(offsetof(CharacterDreamworldComponent_FireWakeUpScoreEvent, Instigator) == 0x000000, "Member 'CharacterDreamworldComponent_FireWakeUpScoreEvent::Instigator' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.IsInDreamworld
// 0x0001 (0x0001 - 0x0000)
struct CharacterDreamworldComponent_IsInDreamworld final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_IsInDreamworld) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_IsInDreamworld");
static_assert(sizeof(CharacterDreamworldComponent_IsInDreamworld) == 0x000001, "Wrong size on CharacterDreamworldComponent_IsInDreamworld");
static_assert(offsetof(CharacterDreamworldComponent_IsInDreamworld, ReturnValue) == 0x000000, "Member 'CharacterDreamworldComponent_IsInDreamworld::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterDreamworldComponent.ShouldShowVignette
// 0x0001 (0x0001 - 0x0000)
struct CharacterDreamworldComponent_ShouldShowVignette final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterDreamworldComponent_ShouldShowVignette) == 0x000001, "Wrong alignment on CharacterDreamworldComponent_ShouldShowVignette");
static_assert(sizeof(CharacterDreamworldComponent_ShouldShowVignette) == 0x000001, "Wrong size on CharacterDreamworldComponent_ShouldShowVignette");
static_assert(offsetof(CharacterDreamworldComponent_ShouldShowVignette, ReturnValue) == 0x000000, "Member 'CharacterDreamworldComponent_ShouldShowVignette::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Authority_HandleSkillCheckFailure
// 0x0010 (0x0010 - 0x0000)
struct CamperDreamworldComponent_Authority_HandleSkillCheckFailure final
{
public:
	bool                                          WakeUpEveryoneInteracting;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Authority_HandleSkillCheckFailure) == 0x000008, "Wrong alignment on CamperDreamworldComponent_Authority_HandleSkillCheckFailure");
static_assert(sizeof(CamperDreamworldComponent_Authority_HandleSkillCheckFailure) == 0x000010, "Wrong size on CamperDreamworldComponent_Authority_HandleSkillCheckFailure");
static_assert(offsetof(CamperDreamworldComponent_Authority_HandleSkillCheckFailure, WakeUpEveryoneInteracting) == 0x000000, "Member 'CamperDreamworldComponent_Authority_HandleSkillCheckFailure::WakeUpEveryoneInteracting' has a wrong offset!");
static_assert(offsetof(CamperDreamworldComponent_Authority_HandleSkillCheckFailure, Instigator) == 0x000008, "Member 'CamperDreamworldComponent_Authority_HandleSkillCheckFailure::Instigator' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Authority_WakeUpByOther
// 0x0008 (0x0008 - 0x0000)
struct CamperDreamworldComponent_Authority_WakeUpByOther final
{
public:
	class ADBDPlayer*                             Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Authority_WakeUpByOther) == 0x000008, "Wrong alignment on CamperDreamworldComponent_Authority_WakeUpByOther");
static_assert(sizeof(CamperDreamworldComponent_Authority_WakeUpByOther) == 0x000008, "Wrong size on CamperDreamworldComponent_Authority_WakeUpByOther");
static_assert(offsetof(CamperDreamworldComponent_Authority_WakeUpByOther, Instigator) == 0x000000, "Member 'CamperDreamworldComponent_Authority_WakeUpByOther::Instigator' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.BroadcastCamperTriggeredDreamTrap
// 0x0008 (0x0008 - 0x0000)
struct CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap final
{
public:
	class AActor*                                 DreamObject;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap) == 0x000008, "Wrong alignment on CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap");
static_assert(sizeof(CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap) == 0x000008, "Wrong size on CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap");
static_assert(offsetof(CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap, DreamObject) == 0x000000, "Member 'CamperDreamworldComponent_BroadcastCamperTriggeredDreamTrap::DreamObject' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.HandleShowKillerChanged
// 0x0002 (0x0002 - 0x0000)
struct CamperDreamworldComponent_HandleShowKillerChanged final
{
public:
	bool                                          ShowKiller;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Instantly;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_HandleShowKillerChanged) == 0x000001, "Wrong alignment on CamperDreamworldComponent_HandleShowKillerChanged");
static_assert(sizeof(CamperDreamworldComponent_HandleShowKillerChanged) == 0x000002, "Wrong size on CamperDreamworldComponent_HandleShowKillerChanged");
static_assert(offsetof(CamperDreamworldComponent_HandleShowKillerChanged, ShowKiller) == 0x000000, "Member 'CamperDreamworldComponent_HandleShowKillerChanged::ShowKiller' has a wrong offset!");
static_assert(offsetof(CamperDreamworldComponent_HandleShowKillerChanged, Instantly) == 0x000001, "Member 'CamperDreamworldComponent_HandleShowKillerChanged::Instantly' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.InitializeTunableValues
// 0x0008 (0x0008 - 0x0000)
struct CamperDreamworldComponent_InitializeTunableValues final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_InitializeTunableValues) == 0x000008, "Wrong alignment on CamperDreamworldComponent_InitializeTunableValues");
static_assert(sizeof(CamperDreamworldComponent_InitializeTunableValues) == 0x000008, "Wrong size on CamperDreamworldComponent_InitializeTunableValues");
static_assert(offsetof(CamperDreamworldComponent_InitializeTunableValues, Killer) == 0x000000, "Member 'CamperDreamworldComponent_InitializeTunableValues::Killer' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Local_SetShowKiller
// 0x0002 (0x0002 - 0x0000)
struct CamperDreamworldComponent_Local_SetShowKiller final
{
public:
	bool                                          ShowKiller;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Instantly;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Local_SetShowKiller) == 0x000001, "Wrong alignment on CamperDreamworldComponent_Local_SetShowKiller");
static_assert(sizeof(CamperDreamworldComponent_Local_SetShowKiller) == 0x000002, "Wrong size on CamperDreamworldComponent_Local_SetShowKiller");
static_assert(offsetof(CamperDreamworldComponent_Local_SetShowKiller, ShowKiller) == 0x000000, "Member 'CamperDreamworldComponent_Local_SetShowKiller::ShowKiller' has a wrong offset!");
static_assert(offsetof(CamperDreamworldComponent_Local_SetShowKiller, Instantly) == 0x000001, "Member 'CamperDreamworldComponent_Local_SetShowKiller::Instantly' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.SetScriptedKillerVisibility
// 0x0001 (0x0001 - 0x0000)
struct CamperDreamworldComponent_SetScriptedKillerVisibility final
{
public:
	bool                                          UseScriptedKillerVisibility;                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_SetScriptedKillerVisibility) == 0x000001, "Wrong alignment on CamperDreamworldComponent_SetScriptedKillerVisibility");
static_assert(sizeof(CamperDreamworldComponent_SetScriptedKillerVisibility) == 0x000001, "Wrong size on CamperDreamworldComponent_SetScriptedKillerVisibility");
static_assert(offsetof(CamperDreamworldComponent_SetScriptedKillerVisibility, UseScriptedKillerVisibility) == 0x000000, "Member 'CamperDreamworldComponent_SetScriptedKillerVisibility::UseScriptedKillerVisibility' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Authority_GetFellAsleepCount
// 0x0004 (0x0004 - 0x0000)
struct CamperDreamworldComponent_Authority_GetFellAsleepCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Authority_GetFellAsleepCount) == 0x000004, "Wrong alignment on CamperDreamworldComponent_Authority_GetFellAsleepCount");
static_assert(sizeof(CamperDreamworldComponent_Authority_GetFellAsleepCount) == 0x000004, "Wrong size on CamperDreamworldComponent_Authority_GetFellAsleepCount");
static_assert(offsetof(CamperDreamworldComponent_Authority_GetFellAsleepCount, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_Authority_GetFellAsleepCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.Authority_GetWakeUpBySkillCheckCount
// 0x0004 (0x0004 - 0x0000)
struct CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount) == 0x000004, "Wrong alignment on CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount");
static_assert(sizeof(CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount) == 0x000004, "Wrong size on CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount");
static_assert(offsetof(CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_Authority_GetWakeUpBySkillCheckCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.CanWakeUp
// 0x0001 (0x0001 - 0x0000)
struct CamperDreamworldComponent_CanWakeUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_CanWakeUp) == 0x000001, "Wrong alignment on CamperDreamworldComponent_CanWakeUp");
static_assert(sizeof(CamperDreamworldComponent_CanWakeUp) == 0x000001, "Wrong size on CamperDreamworldComponent_CanWakeUp");
static_assert(offsetof(CamperDreamworldComponent_CanWakeUp, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_CanWakeUp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.CanWakeUpBySkillCheck
// 0x0001 (0x0001 - 0x0000)
struct CamperDreamworldComponent_CanWakeUpBySkillCheck final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_CanWakeUpBySkillCheck) == 0x000001, "Wrong alignment on CamperDreamworldComponent_CanWakeUpBySkillCheck");
static_assert(sizeof(CamperDreamworldComponent_CanWakeUpBySkillCheck) == 0x000001, "Wrong size on CamperDreamworldComponent_CanWakeUpBySkillCheck");
static_assert(offsetof(CamperDreamworldComponent_CanWakeUpBySkillCheck, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_CanWakeUpBySkillCheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.GetWakeUpByOtherCount
// 0x0004 (0x0004 - 0x0000)
struct CamperDreamworldComponent_GetWakeUpByOtherCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_GetWakeUpByOtherCount) == 0x000004, "Wrong alignment on CamperDreamworldComponent_GetWakeUpByOtherCount");
static_assert(sizeof(CamperDreamworldComponent_GetWakeUpByOtherCount) == 0x000004, "Wrong size on CamperDreamworldComponent_GetWakeUpByOtherCount");
static_assert(offsetof(CamperDreamworldComponent_GetWakeUpByOtherCount, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_GetWakeUpByOtherCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperDreamworldComponent.ShouldLookSleepyToLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer) == 0x000001, "Wrong alignment on CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer");
static_assert(sizeof(CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer) == 0x000001, "Wrong size on CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer");
static_assert(offsetof(CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer, ReturnValue) == 0x000000, "Member 'CamperDreamworldComponent_ShouldLookSleepyToLocalPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperEndGameComponent.GetSacrificedByEndGame
// 0x0001 (0x0001 - 0x0000)
struct CamperEndGameComponent_GetSacrificedByEndGame final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperEndGameComponent_GetSacrificedByEndGame) == 0x000001, "Wrong alignment on CamperEndGameComponent_GetSacrificedByEndGame");
static_assert(sizeof(CamperEndGameComponent_GetSacrificedByEndGame) == 0x000001, "Wrong size on CamperEndGameComponent_GetSacrificedByEndGame");
static_assert(offsetof(CamperEndGameComponent_GetSacrificedByEndGame, ReturnValue) == 0x000000, "Member 'CamperEndGameComponent_GetSacrificedByEndGame::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_ApplyDamage
// 0x0010 (0x0010 - 0x0000)
struct CamperHealthComponent_Authority_ApplyDamage final
{
public:
	class AActor*                                 DamageSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             DamagePlayerOwner;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_ApplyDamage) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_ApplyDamage");
static_assert(sizeof(CamperHealthComponent_Authority_ApplyDamage) == 0x000010, "Wrong size on CamperHealthComponent_Authority_ApplyDamage");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDamage, DamageSource) == 0x000000, "Member 'CamperHealthComponent_Authority_ApplyDamage::DamageSource' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDamage, DamagePlayerOwner) == 0x000008, "Member 'CamperHealthComponent_Authority_ApplyDamage::DamagePlayerOwner' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_ApplyDeepWound
// 0x0010 (0x0010 - 0x0000)
struct CamperHealthComponent_Authority_ApplyDeepWound final
{
public:
	class AActor*                                 DamageSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             DamagePlayerOwner;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_ApplyDeepWound) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_ApplyDeepWound");
static_assert(sizeof(CamperHealthComponent_Authority_ApplyDeepWound) == 0x000010, "Wrong size on CamperHealthComponent_Authority_ApplyDeepWound");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDeepWound, DamageSource) == 0x000000, "Member 'CamperHealthComponent_Authority_ApplyDeepWound::DamageSource' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDeepWound, DamagePlayerOwner) == 0x000008, "Member 'CamperHealthComponent_Authority_ApplyDeepWound::DamagePlayerOwner' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_ApplyDoubleDamage
// 0x0010 (0x0010 - 0x0000)
struct CamperHealthComponent_Authority_ApplyDoubleDamage final
{
public:
	class AActor*                                 DamageSource;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             DamagePlayerOwner;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_ApplyDoubleDamage) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_ApplyDoubleDamage");
static_assert(sizeof(CamperHealthComponent_Authority_ApplyDoubleDamage) == 0x000010, "Wrong size on CamperHealthComponent_Authority_ApplyDoubleDamage");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDoubleDamage, DamageSource) == 0x000000, "Member 'CamperHealthComponent_Authority_ApplyDoubleDamage::DamageSource' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_ApplyDoubleDamage, DamagePlayerOwner) == 0x000008, "Member 'CamperHealthComponent_Authority_ApplyDoubleDamage::DamagePlayerOwner' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_HealTryGrantScoresOnChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied final
{
public:
	float                                         IndividualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied");
static_assert(sizeof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied) == 0x000018, "Wrong size on CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, IndividualChargeAmount) == 0x000000, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::IndividualChargeAmount' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, TotalChargeAmount) == 0x000004, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::TotalChargeAmount' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, ChargeInstigator) == 0x000008, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::ChargeInstigator' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, WasCoop) == 0x000010, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::WasCoop' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied, DeltaTime) == 0x000014, "Member 'CamperHealthComponent_Authority_HealTryGrantScoresOnChargeApplied::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_MendTryGrantScoresOnChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied final
{
public:
	float                                         IndividualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied");
static_assert(sizeof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied) == 0x000018, "Wrong size on CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, IndividualChargeAmount) == 0x000000, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::IndividualChargeAmount' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, TotalChargeAmount) == 0x000004, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::TotalChargeAmount' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, ChargeInstigator) == 0x000008, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::ChargeInstigator' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, WasCoop) == 0x000010, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::WasCoop' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied, DeltaTime) == 0x000014, "Member 'CamperHealthComponent_Authority_MendTryGrantScoresOnChargeApplied::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_OnHealthBarCharged
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Authority_OnHealthBarCharged final
{
public:
	bool                                          Complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Instigators;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_OnHealthBarCharged) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_OnHealthBarCharged");
static_assert(sizeof(CamperHealthComponent_Authority_OnHealthBarCharged) == 0x000018, "Wrong size on CamperHealthComponent_Authority_OnHealthBarCharged");
static_assert(offsetof(CamperHealthComponent_Authority_OnHealthBarCharged, Complete) == 0x000000, "Member 'CamperHealthComponent_Authority_OnHealthBarCharged::Complete' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_OnHealthBarCharged, Instigators) == 0x000008, "Member 'CamperHealthComponent_Authority_OnHealthBarCharged::Instigators' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_OnMendChargeCompletionStateChanged
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged final
{
public:
	bool                                          Complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         Instigators;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged");
static_assert(sizeof(CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged) == 0x000018, "Wrong size on CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged");
static_assert(offsetof(CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged, Complete) == 0x000000, "Member 'CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged::Complete' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged, Instigators) == 0x000008, "Member 'CamperHealthComponent_Authority_OnMendChargeCompletionStateChanged::Instigators' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct CamperHealthComponent_Authority_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_OnSurvivorRemoved) == 0x000008, "Wrong alignment on CamperHealthComponent_Authority_OnSurvivorRemoved");
static_assert(sizeof(CamperHealthComponent_Authority_OnSurvivorRemoved) == 0x000008, "Wrong size on CamperHealthComponent_Authority_OnSurvivorRemoved");
static_assert(offsetof(CamperHealthComponent_Authority_OnSurvivorRemoved, Survivor) == 0x000000, "Member 'CamperHealthComponent_Authority_OnSurvivorRemoved::Survivor' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Authority_SetDamageState
// 0x0003 (0x0003 - 0x0000)
struct CamperHealthComponent_Authority_SetDamageState final
{
public:
	ECamperDamageState                            DamageState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireScoreEvent;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sacrificed;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Authority_SetDamageState) == 0x000001, "Wrong alignment on CamperHealthComponent_Authority_SetDamageState");
static_assert(sizeof(CamperHealthComponent_Authority_SetDamageState) == 0x000003, "Wrong size on CamperHealthComponent_Authority_SetDamageState");
static_assert(offsetof(CamperHealthComponent_Authority_SetDamageState, DamageState) == 0x000000, "Member 'CamperHealthComponent_Authority_SetDamageState::DamageState' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_SetDamageState, FireScoreEvent) == 0x000001, "Member 'CamperHealthComponent_Authority_SetDamageState::FireScoreEvent' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Authority_SetDamageState, Sacrificed) == 0x000002, "Member 'CamperHealthComponent_Authority_SetDamageState::Sacrificed' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetCurrentHPSlot
// 0x0008 (0x0008 - 0x0000)
struct CamperHealthComponent_GetCurrentHPSlot final
{
public:
	class UChargeableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetCurrentHPSlot) == 0x000008, "Wrong alignment on CamperHealthComponent_GetCurrentHPSlot");
static_assert(sizeof(CamperHealthComponent_GetCurrentHPSlot) == 0x000008, "Wrong size on CamperHealthComponent_GetCurrentHPSlot");
static_assert(offsetof(CamperHealthComponent_GetCurrentHPSlot, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetCurrentHPSlot::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IncreaseHPSlotSize
// 0x0004 (0x0004 - 0x0000)
struct CamperHealthComponent_IncreaseHPSlotSize final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IncreaseHPSlotSize) == 0x000004, "Wrong alignment on CamperHealthComponent_IncreaseHPSlotSize");
static_assert(sizeof(CamperHealthComponent_IncreaseHPSlotSize) == 0x000004, "Wrong size on CamperHealthComponent_IncreaseHPSlotSize");
static_assert(offsetof(CamperHealthComponent_IncreaseHPSlotSize, Percent) == 0x000000, "Member 'CamperHealthComponent_IncreaseHPSlotSize::Percent' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_OnHealed
// 0x0018 (0x0018 - 0x0000)
struct CamperHealthComponent_Multicast_OnHealed final
{
public:
	struct FCamperHealResult                      HealResult;                                        // 0x0000(0x0018)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_OnHealed) == 0x000008, "Wrong alignment on CamperHealthComponent_Multicast_OnHealed");
static_assert(sizeof(CamperHealthComponent_Multicast_OnHealed) == 0x000018, "Wrong size on CamperHealthComponent_Multicast_OnHealed");
static_assert(offsetof(CamperHealthComponent_Multicast_OnHealed, HealResult) == 0x000000, "Member 'CamperHealthComponent_Multicast_OnHealed::HealResult' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_OnInjuredBleedoutKO
// 0x0008 (0x0008 - 0x0000)
struct CamperHealthComponent_Multicast_OnInjuredBleedoutKO final
{
public:
	class ADBDPlayer*                             InjuredBleedoutInstigator;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_OnInjuredBleedoutKO) == 0x000008, "Wrong alignment on CamperHealthComponent_Multicast_OnInjuredBleedoutKO");
static_assert(sizeof(CamperHealthComponent_Multicast_OnInjuredBleedoutKO) == 0x000008, "Wrong size on CamperHealthComponent_Multicast_OnInjuredBleedoutKO");
static_assert(offsetof(CamperHealthComponent_Multicast_OnInjuredBleedoutKO, InjuredBleedoutInstigator) == 0x000000, "Member 'CamperHealthComponent_Multicast_OnInjuredBleedoutKO::InjuredBleedoutInstigator' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_OnSurvivorGainedHealthStateByOthersEvents
// 0x0030 (0x0030 - 0x0000)
struct CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents final
{
public:
	bool                                          HealedFromKO;                                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             HealedSurvivor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ADBDPlayer*>                     Healers;                                           // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<bool>                                  HealedSurvivorFarEnoughAway;                       // 0x0020(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents) == 0x000008, "Wrong alignment on CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents");
static_assert(sizeof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents) == 0x000030, "Wrong size on CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents");
static_assert(offsetof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents, HealedFromKO) == 0x000000, "Member 'CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents::HealedFromKO' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents, HealedSurvivor) == 0x000008, "Member 'CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents::HealedSurvivor' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents, Healers) == 0x000010, "Member 'CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents::Healers' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents, HealedSurvivorFarEnoughAway) == 0x000020, "Member 'CamperHealthComponent_Multicast_OnSurvivorGainedHealthStateByOthersEvents::HealedSurvivorFarEnoughAway' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_SetCurrentHealthStateCount
// 0x0008 (0x0008 - 0x0000)
struct CamperHealthComponent_Multicast_SetCurrentHealthStateCount final
{
public:
	int32                                         NewHealth;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireScoreEvent;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperHealthComponent_Multicast_SetCurrentHealthStateCount) == 0x000004, "Wrong alignment on CamperHealthComponent_Multicast_SetCurrentHealthStateCount");
static_assert(sizeof(CamperHealthComponent_Multicast_SetCurrentHealthStateCount) == 0x000008, "Wrong size on CamperHealthComponent_Multicast_SetCurrentHealthStateCount");
static_assert(offsetof(CamperHealthComponent_Multicast_SetCurrentHealthStateCount, NewHealth) == 0x000000, "Member 'CamperHealthComponent_Multicast_SetCurrentHealthStateCount::NewHealth' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_SetCurrentHealthStateCount, FireScoreEvent) == 0x000004, "Member 'CamperHealthComponent_Multicast_SetCurrentHealthStateCount::FireScoreEvent' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_SetDamageState
// 0x0003 (0x0003 - 0x0000)
struct CamperHealthComponent_Multicast_SetDamageState final
{
public:
	ECamperDamageState                            DamageState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireScoreEvent;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Sacrificed;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_SetDamageState) == 0x000001, "Wrong alignment on CamperHealthComponent_Multicast_SetDamageState");
static_assert(sizeof(CamperHealthComponent_Multicast_SetDamageState) == 0x000003, "Wrong size on CamperHealthComponent_Multicast_SetDamageState");
static_assert(offsetof(CamperHealthComponent_Multicast_SetDamageState, DamageState) == 0x000000, "Member 'CamperHealthComponent_Multicast_SetDamageState::DamageState' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_SetDamageState, FireScoreEvent) == 0x000001, "Member 'CamperHealthComponent_Multicast_SetDamageState::FireScoreEvent' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_SetDamageState, Sacrificed) == 0x000002, "Member 'CamperHealthComponent_Multicast_SetDamageState::Sacrificed' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_SetHealthStateFromDamageState
// 0x0002 (0x0002 - 0x0000)
struct CamperHealthComponent_Multicast_SetHealthStateFromDamageState final
{
public:
	ECamperDamageState                            DamageState;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FireScoreEvent;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_SetHealthStateFromDamageState) == 0x000001, "Wrong alignment on CamperHealthComponent_Multicast_SetHealthStateFromDamageState");
static_assert(sizeof(CamperHealthComponent_Multicast_SetHealthStateFromDamageState) == 0x000002, "Wrong size on CamperHealthComponent_Multicast_SetHealthStateFromDamageState");
static_assert(offsetof(CamperHealthComponent_Multicast_SetHealthStateFromDamageState, DamageState) == 0x000000, "Member 'CamperHealthComponent_Multicast_SetHealthStateFromDamageState::DamageState' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_SetHealthStateFromDamageState, FireScoreEvent) == 0x000001, "Member 'CamperHealthComponent_Multicast_SetHealthStateFromDamageState::FireScoreEvent' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_SetHealthType
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_Multicast_SetHealthType final
{
public:
	EHealthType                                   HealthType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_SetHealthType) == 0x000001, "Wrong alignment on CamperHealthComponent_Multicast_SetHealthType");
static_assert(sizeof(CamperHealthComponent_Multicast_SetHealthType) == 0x000001, "Wrong size on CamperHealthComponent_Multicast_SetHealthType");
static_assert(offsetof(CamperHealthComponent_Multicast_SetHealthType, HealthType) == 0x000000, "Member 'CamperHealthComponent_Multicast_SetHealthType::HealthType' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.Multicast_StartInjuredBleedout
// 0x0010 (0x0010 - 0x0000)
struct CamperHealthComponent_Multicast_StartInjuredBleedout final
{
public:
	class ADBDPlayer*                             Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayModifierContainer*             Container;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_Multicast_StartInjuredBleedout) == 0x000008, "Wrong alignment on CamperHealthComponent_Multicast_StartInjuredBleedout");
static_assert(sizeof(CamperHealthComponent_Multicast_StartInjuredBleedout) == 0x000010, "Wrong size on CamperHealthComponent_Multicast_StartInjuredBleedout");
static_assert(offsetof(CamperHealthComponent_Multicast_StartInjuredBleedout, Killer) == 0x000000, "Member 'CamperHealthComponent_Multicast_StartInjuredBleedout::Killer' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_Multicast_StartInjuredBleedout, Container) == 0x000008, "Member 'CamperHealthComponent_Multicast_StartInjuredBleedout::Container' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.OnImmobilizedStateChanged
// 0x0002 (0x0002 - 0x0000)
struct CamperHealthComponent_OnImmobilizedStateChanged final
{
public:
	EImmobilizedState                             OldImmobilizeState;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImmobilizedState                             NewImmobilizeState;                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_OnImmobilizedStateChanged) == 0x000001, "Wrong alignment on CamperHealthComponent_OnImmobilizedStateChanged");
static_assert(sizeof(CamperHealthComponent_OnImmobilizedStateChanged) == 0x000002, "Wrong size on CamperHealthComponent_OnImmobilizedStateChanged");
static_assert(offsetof(CamperHealthComponent_OnImmobilizedStateChanged, OldImmobilizeState) == 0x000000, "Member 'CamperHealthComponent_OnImmobilizedStateChanged::OldImmobilizeState' has a wrong offset!");
static_assert(offsetof(CamperHealthComponent_OnImmobilizedStateChanged, NewImmobilizeState) == 0x000001, "Member 'CamperHealthComponent_OnImmobilizedStateChanged::NewImmobilizeState' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.SetCanBleedout
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_SetCanBleedout final
{
public:
	bool                                          CanBleedout;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_SetCanBleedout) == 0x000001, "Wrong alignment on CamperHealthComponent_SetCanBleedout");
static_assert(sizeof(CamperHealthComponent_SetCanBleedout) == 0x000001, "Wrong size on CamperHealthComponent_SetCanBleedout");
static_assert(offsetof(CamperHealthComponent_SetCanBleedout, CanBleedout) == 0x000000, "Member 'CamperHealthComponent_SetCanBleedout::CanBleedout' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.CanBecomeHealthy
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_CanBecomeHealthy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_CanBecomeHealthy) == 0x000001, "Wrong alignment on CamperHealthComponent_CanBecomeHealthy");
static_assert(sizeof(CamperHealthComponent_CanBecomeHealthy) == 0x000001, "Wrong size on CamperHealthComponent_CanBecomeHealthy");
static_assert(offsetof(CamperHealthComponent_CanBecomeHealthy, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_CanBecomeHealthy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.CanBeHealed
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_CanBeHealed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_CanBeHealed) == 0x000001, "Wrong alignment on CamperHealthComponent_CanBeHealed");
static_assert(sizeof(CamperHealthComponent_CanBeHealed) == 0x000001, "Wrong size on CamperHealthComponent_CanBeHealed");
static_assert(offsetof(CamperHealthComponent_CanBeHealed, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_CanBeHealed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.CanBeHealedFromInjured
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_CanBeHealedFromInjured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_CanBeHealedFromInjured) == 0x000001, "Wrong alignment on CamperHealthComponent_CanBeHealedFromInjured");
static_assert(sizeof(CamperHealthComponent_CanBeHealedFromInjured) == 0x000001, "Wrong size on CamperHealthComponent_CanBeHealedFromInjured");
static_assert(offsetof(CamperHealthComponent_CanBeHealedFromInjured, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_CanBeHealedFromInjured::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.CanHealSelf
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_CanHealSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_CanHealSelf) == 0x000001, "Wrong alignment on CamperHealthComponent_CanHealSelf");
static_assert(sizeof(CamperHealthComponent_CanHealSelf) == 0x000001, "Wrong size on CamperHealthComponent_CanHealSelf");
static_assert(offsetof(CamperHealthComponent_CanHealSelf, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_CanHealSelf::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetCurrentTotalHealthBarPercent
// 0x0004 (0x0004 - 0x0000)
struct CamperHealthComponent_GetCurrentTotalHealthBarPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetCurrentTotalHealthBarPercent) == 0x000004, "Wrong alignment on CamperHealthComponent_GetCurrentTotalHealthBarPercent");
static_assert(sizeof(CamperHealthComponent_GetCurrentTotalHealthBarPercent) == 0x000004, "Wrong size on CamperHealthComponent_GetCurrentTotalHealthBarPercent");
static_assert(offsetof(CamperHealthComponent_GetCurrentTotalHealthBarPercent, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetCurrentTotalHealthBarPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetDamageState
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_GetDamageState final
{
public:
	ECamperDamageState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetDamageState) == 0x000001, "Wrong alignment on CamperHealthComponent_GetDamageState");
static_assert(sizeof(CamperHealthComponent_GetDamageState) == 0x000001, "Wrong size on CamperHealthComponent_GetDamageState");
static_assert(offsetof(CamperHealthComponent_GetDamageState, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetDamageState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetPercentDyingTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperHealthComponent_GetPercentDyingTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetPercentDyingTimer) == 0x000004, "Wrong alignment on CamperHealthComponent_GetPercentDyingTimer");
static_assert(sizeof(CamperHealthComponent_GetPercentDyingTimer) == 0x000004, "Wrong size on CamperHealthComponent_GetPercentDyingTimer");
static_assert(offsetof(CamperHealthComponent_GetPercentDyingTimer, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetPercentDyingTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.GetPercentInjuredBleedoutTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperHealthComponent_GetPercentInjuredBleedoutTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_GetPercentInjuredBleedoutTimer) == 0x000004, "Wrong alignment on CamperHealthComponent_GetPercentInjuredBleedoutTimer");
static_assert(sizeof(CamperHealthComponent_GetPercentInjuredBleedoutTimer) == 0x000004, "Wrong size on CamperHealthComponent_GetPercentInjuredBleedoutTimer");
static_assert(offsetof(CamperHealthComponent_GetPercentInjuredBleedoutTimer, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_GetPercentInjuredBleedoutTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsDead
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsDead final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsDead) == 0x000001, "Wrong alignment on CamperHealthComponent_IsDead");
static_assert(sizeof(CamperHealthComponent_IsDead) == 0x000001, "Wrong size on CamperHealthComponent_IsDead");
static_assert(offsetof(CamperHealthComponent_IsDead, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsDead::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsDyingTimerExpired
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsDyingTimerExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsDyingTimerExpired) == 0x000001, "Wrong alignment on CamperHealthComponent_IsDyingTimerExpired");
static_assert(sizeof(CamperHealthComponent_IsDyingTimerExpired) == 0x000001, "Wrong size on CamperHealthComponent_IsDyingTimerExpired");
static_assert(offsetof(CamperHealthComponent_IsDyingTimerExpired, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsDyingTimerExpired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsHealthy
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsHealthy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsHealthy) == 0x000001, "Wrong alignment on CamperHealthComponent_IsHealthy");
static_assert(sizeof(CamperHealthComponent_IsHealthy) == 0x000001, "Wrong size on CamperHealthComponent_IsHealthy");
static_assert(offsetof(CamperHealthComponent_IsHealthy, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsHealthy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsInInjuredBleedout
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsInInjuredBleedout final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsInInjuredBleedout) == 0x000001, "Wrong alignment on CamperHealthComponent_IsInInjuredBleedout");
static_assert(sizeof(CamperHealthComponent_IsInInjuredBleedout) == 0x000001, "Wrong size on CamperHealthComponent_IsInInjuredBleedout");
static_assert(offsetof(CamperHealthComponent_IsInInjuredBleedout, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsInInjuredBleedout::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsInjured
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsInjured final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsInjured) == 0x000001, "Wrong alignment on CamperHealthComponent_IsInjured");
static_assert(sizeof(CamperHealthComponent_IsInjured) == 0x000001, "Wrong size on CamperHealthComponent_IsInjured");
static_assert(offsetof(CamperHealthComponent_IsInjured, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsInjured::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsInjuredBleedoutTimerExpired
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsInjuredBleedoutTimerExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsInjuredBleedoutTimerExpired) == 0x000001, "Wrong alignment on CamperHealthComponent_IsInjuredBleedoutTimerExpired");
static_assert(sizeof(CamperHealthComponent_IsInjuredBleedoutTimerExpired) == 0x000001, "Wrong size on CamperHealthComponent_IsInjuredBleedoutTimerExpired");
static_assert(offsetof(CamperHealthComponent_IsInjuredBleedoutTimerExpired, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsInjuredBleedoutTimerExpired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperHealthComponent.IsKO
// 0x0001 (0x0001 - 0x0000)
struct CamperHealthComponent_IsKO final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperHealthComponent_IsKO) == 0x000001, "Wrong alignment on CamperHealthComponent_IsKO");
static_assert(sizeof(CamperHealthComponent_IsKO) == 0x000001, "Wrong size on CamperHealthComponent_IsKO");
static_assert(offsetof(CamperHealthComponent_IsKO, ReturnValue) == 0x000000, "Member 'CamperHealthComponent_IsKO::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorAttackableComponent.Authority_HitCosmetic
// 0x0010 (0x0010 - 0x0000)
struct SurvivorAttackableComponent_Authority_HitCosmetic final
{
public:
	const class AActor*                           Attacker;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CauseKO;                                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWeaponHit;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorAttackableComponent_Authority_HitCosmetic) == 0x000008, "Wrong alignment on SurvivorAttackableComponent_Authority_HitCosmetic");
static_assert(sizeof(SurvivorAttackableComponent_Authority_HitCosmetic) == 0x000010, "Wrong size on SurvivorAttackableComponent_Authority_HitCosmetic");
static_assert(offsetof(SurvivorAttackableComponent_Authority_HitCosmetic, Attacker) == 0x000000, "Member 'SurvivorAttackableComponent_Authority_HitCosmetic::Attacker' has a wrong offset!");
static_assert(offsetof(SurvivorAttackableComponent_Authority_HitCosmetic, AttackType) == 0x000008, "Member 'SurvivorAttackableComponent_Authority_HitCosmetic::AttackType' has a wrong offset!");
static_assert(offsetof(SurvivorAttackableComponent_Authority_HitCosmetic, CauseKO) == 0x000009, "Member 'SurvivorAttackableComponent_Authority_HitCosmetic::CauseKO' has a wrong offset!");
static_assert(offsetof(SurvivorAttackableComponent_Authority_HitCosmetic, IsWeaponHit) == 0x00000A, "Member 'SurvivorAttackableComponent_Authority_HitCosmetic::IsWeaponHit' has a wrong offset!");

// Function DeadByDaylight.SurvivorAttackableComponent.Multicast_HitCosmetic
// 0x0014 (0x0014 - 0x0000)
struct SurvivorAttackableComponent_Multicast_HitCosmetic final
{
public:
	struct FPlayerHitCosmeticParams               Params_0;                                          // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAttackableComponent_Multicast_HitCosmetic) == 0x000004, "Wrong alignment on SurvivorAttackableComponent_Multicast_HitCosmetic");
static_assert(sizeof(SurvivorAttackableComponent_Multicast_HitCosmetic) == 0x000014, "Wrong size on SurvivorAttackableComponent_Multicast_HitCosmetic");
static_assert(offsetof(SurvivorAttackableComponent_Multicast_HitCosmetic, Params_0) == 0x000000, "Member 'SurvivorAttackableComponent_Multicast_HitCosmetic::Params_0' has a wrong offset!");

// Function DeadByDaylight.SurvivorAttackableComponent.Multicast_HitCosmetic_NonLocal
// 0x0014 (0x0014 - 0x0000)
struct SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal final
{
public:
	struct FPlayerHitCosmeticParams               Params_0;                                          // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal) == 0x000004, "Wrong alignment on SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal");
static_assert(sizeof(SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal) == 0x000014, "Wrong size on SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal");
static_assert(offsetof(SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal, Params_0) == 0x000000, "Member 'SurvivorAttackableComponent_Multicast_HitCosmetic_NonLocal::Params_0' has a wrong offset!");

// Function DeadByDaylight.CamperInteractable.SetKillInteraction
// 0x0008 (0x0008 - 0x0000)
struct CamperInteractable_SetKillInteraction final
{
public:
	class UInteractionDefinition*                 KillInteraction;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperInteractable_SetKillInteraction) == 0x000008, "Wrong alignment on CamperInteractable_SetKillInteraction");
static_assert(sizeof(CamperInteractable_SetKillInteraction) == 0x000008, "Wrong size on CamperInteractable_SetKillInteraction");
static_assert(offsetof(CamperInteractable_SetKillInteraction, KillInteraction) == 0x000000, "Member 'CamperInteractable_SetKillInteraction::KillInteraction' has a wrong offset!");

// Function DeadByDaylight.CamperInteractable.GetOwningSurvivor
// 0x0008 (0x0008 - 0x0000)
struct CamperInteractable_GetOwningSurvivor final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperInteractable_GetOwningSurvivor) == 0x000008, "Wrong alignment on CamperInteractable_GetOwningSurvivor");
static_assert(sizeof(CamperInteractable_GetOwningSurvivor) == 0x000008, "Wrong size on CamperInteractable_GetOwningSurvivor");
static_assert(offsetof(CamperInteractable_GetOwningSurvivor, ReturnValue) == 0x000000, "Member 'CamperInteractable_GetOwningSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperInteractable.GetSlasherInteractor
// 0x0008 (0x0008 - 0x0000)
struct CamperInteractable_GetSlasherInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperInteractable_GetSlasherInteractor) == 0x000008, "Wrong alignment on CamperInteractable_GetSlasherInteractor");
static_assert(sizeof(CamperInteractable_GetSlasherInteractor) == 0x000008, "Wrong size on CamperInteractable_GetSlasherInteractor");
static_assert(offsetof(CamperInteractable_GetSlasherInteractor, ReturnValue) == 0x000000, "Member 'CamperInteractable_GetSlasherInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Authority_OnSlashed
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_Authority_OnSlashed final
{
public:
	class ADBDPlayer*                             Attacker;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Authority_OnSlashed) == 0x000008, "Wrong alignment on CamperPlayer_Authority_OnSlashed");
static_assert(sizeof(CamperPlayer_Authority_OnSlashed) == 0x000008, "Wrong size on CamperPlayer_Authority_OnSlashed");
static_assert(offsetof(CamperPlayer_Authority_OnSlashed, Attacker) == 0x000000, "Member 'CamperPlayer_Authority_OnSlashed::Attacker' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Authority_SetImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Authority_SetImmobilized final
{
public:
	EImmobilizedState                             State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Authority_SetImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_Authority_SetImmobilized");
static_assert(sizeof(CamperPlayer_Authority_SetImmobilized) == 0x000001, "Wrong size on CamperPlayer_Authority_SetImmobilized");
static_assert(offsetof(CamperPlayer_Authority_SetImmobilized, State) == 0x000000, "Member 'CamperPlayer_Authority_SetImmobilized::State' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Client_OnSlashedOutOfTrap
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_Client_OnSlashedOutOfTrap final
{
public:
	class ADBDPlayer*                             Requester;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Client_OnSlashedOutOfTrap) == 0x000008, "Wrong alignment on CamperPlayer_Client_OnSlashedOutOfTrap");
static_assert(sizeof(CamperPlayer_Client_OnSlashedOutOfTrap) == 0x000008, "Wrong size on CamperPlayer_Client_OnSlashedOutOfTrap");
static_assert(offsetof(CamperPlayer_Client_OnSlashedOutOfTrap, Requester) == 0x000000, "Member 'CamperPlayer_Client_OnSlashedOutOfTrap::Requester' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.ComputeBeartrapEscapeResult
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_ComputeBeartrapEscapeResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_ComputeBeartrapEscapeResult) == 0x000001, "Wrong alignment on CamperPlayer_ComputeBeartrapEscapeResult");
static_assert(sizeof(CamperPlayer_ComputeBeartrapEscapeResult) == 0x000001, "Wrong size on CamperPlayer_ComputeBeartrapEscapeResult");
static_assert(offsetof(CamperPlayer_ComputeBeartrapEscapeResult, ReturnValue) == 0x000000, "Member 'CamperPlayer_ComputeBeartrapEscapeResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.ComputeHookEscapeResult
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_ComputeHookEscapeResult final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_ComputeHookEscapeResult) == 0x000001, "Wrong alignment on CamperPlayer_ComputeHookEscapeResult");
static_assert(sizeof(CamperPlayer_ComputeHookEscapeResult) == 0x000001, "Wrong size on CamperPlayer_ComputeHookEscapeResult");
static_assert(offsetof(CamperPlayer_ComputeHookEscapeResult, ReturnValue) == 0x000000, "Member 'CamperPlayer_ComputeHookEscapeResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.ComputeInteractionSuccessPercentage
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_ComputeInteractionSuccessPercentage final
{
public:
	const class UInteractionDefinition*           Interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperPlayer_ComputeInteractionSuccessPercentage) == 0x000008, "Wrong alignment on CamperPlayer_ComputeInteractionSuccessPercentage");
static_assert(sizeof(CamperPlayer_ComputeInteractionSuccessPercentage) == 0x000010, "Wrong size on CamperPlayer_ComputeInteractionSuccessPercentage");
static_assert(offsetof(CamperPlayer_ComputeInteractionSuccessPercentage, Interaction) == 0x000000, "Member 'CamperPlayer_ComputeInteractionSuccessPercentage::Interaction' has a wrong offset!");
static_assert(offsetof(CamperPlayer_ComputeInteractionSuccessPercentage, ReturnValue) == 0x000008, "Member 'CamperPlayer_ComputeInteractionSuccessPercentage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.DBD_ForceRun
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_DBD_ForceRun final
{
public:
	bool                                          Forced;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_DBD_ForceRun) == 0x000001, "Wrong alignment on CamperPlayer_DBD_ForceRun");
static_assert(sizeof(CamperPlayer_DBD_ForceRun) == 0x000001, "Wrong size on CamperPlayer_DBD_ForceRun");
static_assert(offsetof(CamperPlayer_DBD_ForceRun, Forced) == 0x000000, "Member 'CamperPlayer_DBD_ForceRun::Forced' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.DBD_SetImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_DBD_SetImmobilized final
{
public:
	EImmobilizedState                             State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_DBD_SetImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_DBD_SetImmobilized");
static_assert(sizeof(CamperPlayer_DBD_SetImmobilized) == 0x000001, "Wrong size on CamperPlayer_DBD_SetImmobilized");
static_assert(offsetof(CamperPlayer_DBD_SetImmobilized, State) == 0x000000, "Member 'CamperPlayer_DBD_SetImmobilized::State' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.DBD_SetSurvivorCameraArmLength
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_DBD_SetSurvivorCameraArmLength final
{
public:
	float                                         CameraArmLength;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_DBD_SetSurvivorCameraArmLength) == 0x000004, "Wrong alignment on CamperPlayer_DBD_SetSurvivorCameraArmLength");
static_assert(sizeof(CamperPlayer_DBD_SetSurvivorCameraArmLength) == 0x000004, "Wrong size on CamperPlayer_DBD_SetSurvivorCameraArmLength");
static_assert(offsetof(CamperPlayer_DBD_SetSurvivorCameraArmLength, CameraArmLength) == 0x000000, "Member 'CamperPlayer_DBD_SetSurvivorCameraArmLength::CameraArmLength' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.DBD_SetSurvivorCameraArmLengthCommand
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand final
{
public:
	float                                         CameraArmLength;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand) == 0x000004, "Wrong alignment on CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand");
static_assert(sizeof(CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand) == 0x000004, "Wrong size on CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand");
static_assert(offsetof(CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand, CameraArmLength) == 0x000000, "Member 'CamperPlayer_DBD_SetSurvivorCameraArmLengthCommand::CameraArmLength' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.HatchEscapeZoneEntered
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_HatchEscapeZoneEntered final
{
public:
	class AActor*                                 Escape;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_HatchEscapeZoneEntered) == 0x000008, "Wrong alignment on CamperPlayer_HatchEscapeZoneEntered");
static_assert(sizeof(CamperPlayer_HatchEscapeZoneEntered) == 0x000008, "Wrong size on CamperPlayer_HatchEscapeZoneEntered");
static_assert(offsetof(CamperPlayer_HatchEscapeZoneEntered, Escape) == 0x000000, "Member 'CamperPlayer_HatchEscapeZoneEntered::Escape' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsRunLocked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsRunLocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsRunLocked) == 0x000001, "Wrong alignment on CamperPlayer_IsRunLocked");
static_assert(sizeof(CamperPlayer_IsRunLocked) == 0x000001, "Wrong size on CamperPlayer_IsRunLocked");
static_assert(offsetof(CamperPlayer_IsRunLocked, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsRunLocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Kill
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Kill final
{
public:
	EHealthType                                   HealthType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Kill) == 0x000001, "Wrong alignment on CamperPlayer_Kill");
static_assert(sizeof(CamperPlayer_Kill) == 0x000001, "Wrong size on CamperPlayer_Kill");
static_assert(offsetof(CamperPlayer_Kill, HealthType) == 0x000000, "Member 'CamperPlayer_Kill::HealthType' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Local_SetImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Local_SetImmobilized final
{
public:
	EImmobilizedState                             State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Local_SetImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_Local_SetImmobilized");
static_assert(sizeof(CamperPlayer_Local_SetImmobilized) == 0x000001, "Wrong size on CamperPlayer_Local_SetImmobilized");
static_assert(offsetof(CamperPlayer_Local_SetImmobilized, State) == 0x000000, "Member 'CamperPlayer_Local_SetImmobilized::State' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_EscapeItemEvents
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Multicast_EscapeItemEvents final
{
public:
	bool                                          IsItemFromSpawn;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_EscapeItemEvents) == 0x000001, "Wrong alignment on CamperPlayer_Multicast_EscapeItemEvents");
static_assert(sizeof(CamperPlayer_Multicast_EscapeItemEvents) == 0x000001, "Wrong size on CamperPlayer_Multicast_EscapeItemEvents");
static_assert(offsetof(CamperPlayer_Multicast_EscapeItemEvents, IsItemFromSpawn) == 0x000000, "Member 'CamperPlayer_Multicast_EscapeItemEvents::IsItemFromSpawn' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_SetAuthoritativeMovementFlag
// 0x0002 (0x0002 - 0x0000)
struct CamperPlayer_Multicast_SetAuthoritativeMovementFlag final
{
public:
	EAuthoritativeMovementFlag                    Flag;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_SetAuthoritativeMovementFlag) == 0x000001, "Wrong alignment on CamperPlayer_Multicast_SetAuthoritativeMovementFlag");
static_assert(sizeof(CamperPlayer_Multicast_SetAuthoritativeMovementFlag) == 0x000002, "Wrong size on CamperPlayer_Multicast_SetAuthoritativeMovementFlag");
static_assert(offsetof(CamperPlayer_Multicast_SetAuthoritativeMovementFlag, Flag) == 0x000000, "Member 'CamperPlayer_Multicast_SetAuthoritativeMovementFlag::Flag' has a wrong offset!");
static_assert(offsetof(CamperPlayer_Multicast_SetAuthoritativeMovementFlag, Value) == 0x000001, "Member 'CamperPlayer_Multicast_SetAuthoritativeMovementFlag::Value' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_SetHookEscapeAutoFail
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Multicast_SetHookEscapeAutoFail final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_SetHookEscapeAutoFail) == 0x000001, "Wrong alignment on CamperPlayer_Multicast_SetHookEscapeAutoFail");
static_assert(sizeof(CamperPlayer_Multicast_SetHookEscapeAutoFail) == 0x000001, "Wrong size on CamperPlayer_Multicast_SetHookEscapeAutoFail");
static_assert(offsetof(CamperPlayer_Multicast_SetHookEscapeAutoFail, Enabled) == 0x000000, "Member 'CamperPlayer_Multicast_SetHookEscapeAutoFail::Enabled' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_SetImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Multicast_SetImmobilized final
{
public:
	EImmobilizedState                             State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_SetImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_Multicast_SetImmobilized");
static_assert(sizeof(CamperPlayer_Multicast_SetImmobilized) == 0x000001, "Wrong size on CamperPlayer_Multicast_SetImmobilized");
static_assert(offsetof(CamperPlayer_Multicast_SetImmobilized, State) == 0x000000, "Member 'CamperPlayer_Multicast_SetImmobilized::State' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Multicast_SetOverlappingEscape
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_Multicast_SetOverlappingEscape final
{
public:
	class AActor*                                 Escape;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Multicast_SetOverlappingEscape) == 0x000008, "Wrong alignment on CamperPlayer_Multicast_SetOverlappingEscape");
static_assert(sizeof(CamperPlayer_Multicast_SetOverlappingEscape) == 0x000008, "Wrong size on CamperPlayer_Multicast_SetOverlappingEscape");
static_assert(offsetof(CamperPlayer_Multicast_SetOverlappingEscape, Escape) == 0x000000, "Member 'CamperPlayer_Multicast_SetOverlappingEscape::Escape' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnDroppedEnd
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_OnDroppedEnd final
{
public:
	bool                                          ClearLeader;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnDroppedEnd) == 0x000001, "Wrong alignment on CamperPlayer_OnDroppedEnd");
static_assert(sizeof(CamperPlayer_OnDroppedEnd) == 0x000001, "Wrong size on CamperPlayer_OnDroppedEnd");
static_assert(offsetof(CamperPlayer_OnDroppedEnd, ClearLeader) == 0x000000, "Member 'CamperPlayer_OnDroppedEnd::ClearLeader' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnDroppedStart
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_OnDroppedStart final
{
public:
	class ADBDPlayer*                             Dropper;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnDroppedStart) == 0x000008, "Wrong alignment on CamperPlayer_OnDroppedStart");
static_assert(sizeof(CamperPlayer_OnDroppedStart) == 0x000008, "Wrong size on CamperPlayer_OnDroppedStart");
static_assert(offsetof(CamperPlayer_OnDroppedStart, Dropper) == 0x000000, "Member 'CamperPlayer_OnDroppedStart::Dropper' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnHookedStateChangedCosmetic
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_OnHookedStateChangedCosmetic final
{
public:
	bool                                          Hooked;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnHookedStateChangedCosmetic) == 0x000001, "Wrong alignment on CamperPlayer_OnHookedStateChangedCosmetic");
static_assert(sizeof(CamperPlayer_OnHookedStateChangedCosmetic) == 0x000001, "Wrong size on CamperPlayer_OnHookedStateChangedCosmetic");
static_assert(offsetof(CamperPlayer_OnHookedStateChangedCosmetic, Hooked) == 0x000000, "Member 'CamperPlayer_OnHookedStateChangedCosmetic::Hooked' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnHpSlotSkillCheckResponseAesthetic
// 0x0018 (0x0018 - 0x0000)
struct CamperPlayer_OnHpSlotSkillCheckResponseAesthetic final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeChange;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic) == 0x000008, "Wrong alignment on CamperPlayer_OnHpSlotSkillCheckResponseAesthetic");
static_assert(sizeof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic) == 0x000018, "Wrong size on CamperPlayer_OnHpSlotSkillCheckResponseAesthetic");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, Success) == 0x000000, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::Success' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, Bonus) == 0x000001, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::Bonus' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, Player) == 0x000008, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::Player' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, TriggerLoudNoise) == 0x000010, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::TriggerLoudNoise' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, HadInput) == 0x000011, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::HadInput' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, Type) == 0x000012, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::Type' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnHpSlotSkillCheckResponseAesthetic, ChargeChange) == 0x000014, "Member 'CamperPlayer_OnHpSlotSkillCheckResponseAesthetic::ChargeChange' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnObsessionChanged
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_OnObsessionChanged final
{
public:
	class ACamperPlayer*                          NewObsession;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          PreviousObsession;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnObsessionChanged) == 0x000008, "Wrong alignment on CamperPlayer_OnObsessionChanged");
static_assert(sizeof(CamperPlayer_OnObsessionChanged) == 0x000010, "Wrong size on CamperPlayer_OnObsessionChanged");
static_assert(offsetof(CamperPlayer_OnObsessionChanged, NewObsession) == 0x000000, "Member 'CamperPlayer_OnObsessionChanged::NewObsession' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnObsessionChanged, PreviousObsession) == 0x000008, "Member 'CamperPlayer_OnObsessionChanged::PreviousObsession' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnPawnSensed
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_OnPawnSensed final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnPawnSensed) == 0x000008, "Wrong alignment on CamperPlayer_OnPawnSensed");
static_assert(sizeof(CamperPlayer_OnPawnSensed) == 0x000008, "Wrong size on CamperPlayer_OnPawnSensed");
static_assert(offsetof(CamperPlayer_OnPawnSensed, Pawn) == 0x000000, "Member 'CamperPlayer_OnPawnSensed::Pawn' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnPickUpEnter
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_OnPickUpEnter final
{
public:
	class ADBDPlayer*                             Picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionTime;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CamperPlayer_OnPickUpEnter) == 0x000008, "Wrong alignment on CamperPlayer_OnPickUpEnter");
static_assert(sizeof(CamperPlayer_OnPickUpEnter) == 0x000010, "Wrong size on CamperPlayer_OnPickUpEnter");
static_assert(offsetof(CamperPlayer_OnPickUpEnter, Picker) == 0x000000, "Member 'CamperPlayer_OnPickUpEnter::Picker' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnPickUpEnter, TransitionTime) == 0x000008, "Member 'CamperPlayer_OnPickUpEnter::TransitionTime' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.OnProximityEntered
// 0x0110 (0x0110 - 0x0000)
struct CamperPlayer_OnProximityEntered final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_OnProximityEntered) == 0x000008, "Wrong alignment on CamperPlayer_OnProximityEntered");
static_assert(sizeof(CamperPlayer_OnProximityEntered) == 0x000110, "Wrong size on CamperPlayer_OnProximityEntered");
static_assert(offsetof(CamperPlayer_OnProximityEntered, HitComponent) == 0x000000, "Member 'CamperPlayer_OnProximityEntered::HitComponent' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, OtherActor) == 0x000008, "Member 'CamperPlayer_OnProximityEntered::OtherActor' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, OtherComp) == 0x000010, "Member 'CamperPlayer_OnProximityEntered::OtherComp' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, OtherBodyIndex) == 0x000018, "Member 'CamperPlayer_OnProximityEntered::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, bFromSweep) == 0x00001C, "Member 'CamperPlayer_OnProximityEntered::bFromSweep' has a wrong offset!");
static_assert(offsetof(CamperPlayer_OnProximityEntered, SweepResult) == 0x000020, "Member 'CamperPlayer_OnProximityEntered::SweepResult' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.RunLocked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_RunLocked final
{
public:
	bool                                          Lock;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_RunLocked) == 0x000001, "Wrong alignment on CamperPlayer_RunLocked");
static_assert(sizeof(CamperPlayer_RunLocked) == 0x000001, "Wrong size on CamperPlayer_RunLocked");
static_assert(offsetof(CamperPlayer_RunLocked, Lock) == 0x000000, "Member 'CamperPlayer_RunLocked::Lock' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Server_SetOverlappingEscape
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_Server_SetOverlappingEscape final
{
public:
	class AActor*                                 Escape;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Server_SetOverlappingEscape) == 0x000008, "Wrong alignment on CamperPlayer_Server_SetOverlappingEscape");
static_assert(sizeof(CamperPlayer_Server_SetOverlappingEscape) == 0x000008, "Wrong size on CamperPlayer_Server_SetOverlappingEscape");
static_assert(offsetof(CamperPlayer_Server_SetOverlappingEscape, Escape) == 0x000000, "Member 'CamperPlayer_Server_SetOverlappingEscape::Escape' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.Server_SetRunInput
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_Server_SetRunInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_Server_SetRunInput) == 0x000001, "Wrong alignment on CamperPlayer_Server_SetRunInput");
static_assert(sizeof(CamperPlayer_Server_SetRunInput) == 0x000001, "Wrong size on CamperPlayer_Server_SetRunInput");
static_assert(offsetof(CamperPlayer_Server_SetRunInput, Pressed) == 0x000000, "Member 'CamperPlayer_Server_SetRunInput::Pressed' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.SetBeingCarried
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_SetBeingCarried final
{
public:
	bool                                          IsBeingCarried;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Carrier;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_SetBeingCarried) == 0x000008, "Wrong alignment on CamperPlayer_SetBeingCarried");
static_assert(sizeof(CamperPlayer_SetBeingCarried) == 0x000010, "Wrong size on CamperPlayer_SetBeingCarried");
static_assert(offsetof(CamperPlayer_SetBeingCarried, IsBeingCarried) == 0x000000, "Member 'CamperPlayer_SetBeingCarried::IsBeingCarried' has a wrong offset!");
static_assert(offsetof(CamperPlayer_SetBeingCarried, Carrier) == 0x000008, "Member 'CamperPlayer_SetBeingCarried::Carrier' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.SetVignetteVisible
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_SetVignetteVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_SetVignetteVisible) == 0x000001, "Wrong alignment on CamperPlayer_SetVignetteVisible");
static_assert(sizeof(CamperPlayer_SetVignetteVisible) == 0x000001, "Wrong size on CamperPlayer_SetVignetteVisible");
static_assert(offsetof(CamperPlayer_SetVignetteVisible, Visible) == 0x000000, "Member 'CamperPlayer_SetVignetteVisible::Visible' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.StartHealingTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_StartHealingTimer final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_StartHealingTimer) == 0x000004, "Wrong alignment on CamperPlayer_StartHealingTimer");
static_assert(sizeof(CamperPlayer_StartHealingTimer) == 0x000004, "Wrong size on CamperPlayer_StartHealingTimer");
static_assert(offsetof(CamperPlayer_StartHealingTimer, Time) == 0x000000, "Member 'CamperPlayer_StartHealingTimer::Time' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.SurvivorDissolve
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_SurvivorDissolve final
{
public:
	bool                                          ShouldDissolve;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToDissolve;                                    // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_SurvivorDissolve) == 0x000004, "Wrong alignment on CamperPlayer_SurvivorDissolve");
static_assert(sizeof(CamperPlayer_SurvivorDissolve) == 0x000008, "Wrong size on CamperPlayer_SurvivorDissolve");
static_assert(offsetof(CamperPlayer_SurvivorDissolve, ShouldDissolve) == 0x000000, "Member 'CamperPlayer_SurvivorDissolve::ShouldDissolve' has a wrong offset!");
static_assert(offsetof(CamperPlayer_SurvivorDissolve, TimeToDissolve) == 0x000004, "Member 'CamperPlayer_SurvivorDissolve::TimeToDissolve' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.UpdateHealingTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_UpdateHealingTimer final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_UpdateHealingTimer) == 0x000004, "Wrong alignment on CamperPlayer_UpdateHealingTimer");
static_assert(sizeof(CamperPlayer_UpdateHealingTimer) == 0x000004, "Wrong size on CamperPlayer_UpdateHealingTimer");
static_assert(offsetof(CamperPlayer_UpdateHealingTimer, DeltaTime) == 0x000000, "Member 'CamperPlayer_UpdateHealingTimer::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.AcceptsHealing
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_AcceptsHealing final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_AcceptsHealing) == 0x000001, "Wrong alignment on CamperPlayer_AcceptsHealing");
static_assert(sizeof(CamperPlayer_AcceptsHealing) == 0x000001, "Wrong size on CamperPlayer_AcceptsHealing");
static_assert(offsetof(CamperPlayer_AcceptsHealing, ReturnValue) == 0x000000, "Member 'CamperPlayer_AcceptsHealing::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.CanBeKilled
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_CanBeKilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_CanBeKilled) == 0x000001, "Wrong alignment on CamperPlayer_CanBeKilled");
static_assert(sizeof(CamperPlayer_CanBeKilled) == 0x000001, "Wrong size on CamperPlayer_CanBeKilled");
static_assert(offsetof(CamperPlayer_CanBeKilled, ReturnValue) == 0x000000, "Member 'CamperPlayer_CanBeKilled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.CanBePickedUp
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_CanBePickedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_CanBePickedUp) == 0x000001, "Wrong alignment on CamperPlayer_CanBePickedUp");
static_assert(sizeof(CamperPlayer_CanBePickedUp) == 0x000001, "Wrong size on CamperPlayer_CanBePickedUp");
static_assert(offsetof(CamperPlayer_CanBePickedUp, ReturnValue) == 0x000000, "Member 'CamperPlayer_CanBePickedUp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.CanBeShocked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_CanBeShocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_CanBeShocked) == 0x000001, "Wrong alignment on CamperPlayer_CanBeShocked");
static_assert(sizeof(CamperPlayer_CanBeShocked) == 0x000001, "Wrong size on CamperPlayer_CanBeShocked");
static_assert(offsetof(CamperPlayer_CanBeShocked, ReturnValue) == 0x000000, "Member 'CamperPlayer_CanBeShocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.CanRushQuietly
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_CanRushQuietly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_CanRushQuietly) == 0x000001, "Wrong alignment on CamperPlayer_CanRushQuietly");
static_assert(sizeof(CamperPlayer_CanRushQuietly) == 0x000001, "Wrong size on CamperPlayer_CanRushQuietly");
static_assert(offsetof(CamperPlayer_CanRushQuietly, ReturnValue) == 0x000000, "Member 'CamperPlayer_CanRushQuietly::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetAimPoint
// 0x0018 (0x0018 - 0x0000)
struct CamperPlayer_GetAimPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetAimPoint) == 0x000008, "Wrong alignment on CamperPlayer_GetAimPoint");
static_assert(sizeof(CamperPlayer_GetAimPoint) == 0x000018, "Wrong size on CamperPlayer_GetAimPoint");
static_assert(offsetof(CamperPlayer_GetAimPoint, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetAimPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetAllEntityRenderRegions
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_GetAllEntityRenderRegions final
{
public:
	TArray<class UDBDClipRegionComponent*>        ReturnValue;                                       // 0x0000(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetAllEntityRenderRegions) == 0x000008, "Wrong alignment on CamperPlayer_GetAllEntityRenderRegions");
static_assert(sizeof(CamperPlayer_GetAllEntityRenderRegions) == 0x000010, "Wrong size on CamperPlayer_GetAllEntityRenderRegions");
static_assert(offsetof(CamperPlayer_GetAllEntityRenderRegions, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetAllEntityRenderRegions::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetAntiCampSelfUnhookComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetAntiCampSelfUnhookComponent final
{
public:
	class UAntiCampSelfUnhookComponent*           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetAntiCampSelfUnhookComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetAntiCampSelfUnhookComponent");
static_assert(sizeof(CamperPlayer_GetAntiCampSelfUnhookComponent) == 0x000008, "Wrong size on CamperPlayer_GetAntiCampSelfUnhookComponent");
static_assert(offsetof(CamperPlayer_GetAntiCampSelfUnhookComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetAntiCampSelfUnhookComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetAttenuationAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetAttenuationAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetAttenuationAudioComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetAttenuationAudioComponent");
static_assert(sizeof(CamperPlayer_GetAttenuationAudioComponent) == 0x000008, "Wrong size on CamperPlayer_GetAttenuationAudioComponent");
static_assert(offsetof(CamperPlayer_GetAttenuationAudioComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetAttenuationAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetBloodTrailComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetBloodTrailComponent final
{
public:
	class UCamperBloodTrailComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetBloodTrailComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetBloodTrailComponent");
static_assert(sizeof(CamperPlayer_GetBloodTrailComponent) == 0x000008, "Wrong size on CamperPlayer_GetBloodTrailComponent");
static_assert(offsetof(CamperPlayer_GetBloodTrailComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetBloodTrailComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetCameraAttachmentComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetCameraAttachmentComponent final
{
public:
	class UCameraAttachmentComponent*             ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetCameraAttachmentComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetCameraAttachmentComponent");
static_assert(sizeof(CamperPlayer_GetCameraAttachmentComponent) == 0x000008, "Wrong size on CamperPlayer_GetCameraAttachmentComponent");
static_assert(offsetof(CamperPlayer_GetCameraAttachmentComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetCameraAttachmentComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetChaseeCharacterComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetChaseeCharacterComponent final
{
public:
	class UChaseeCharacterComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetChaseeCharacterComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetChaseeCharacterComponent");
static_assert(sizeof(CamperPlayer_GetChaseeCharacterComponent) == 0x000008, "Wrong size on CamperPlayer_GetChaseeCharacterComponent");
static_assert(offsetof(CamperPlayer_GetChaseeCharacterComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetChaseeCharacterComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetEntityRenderRegionAtIndex
// 0x0010 (0x0010 - 0x0000)
struct CamperPlayer_GetEntityRenderRegionAtIndex final
{
public:
	int32                                         InIndex;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDClipRegionComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetEntityRenderRegionAtIndex) == 0x000008, "Wrong alignment on CamperPlayer_GetEntityRenderRegionAtIndex");
static_assert(sizeof(CamperPlayer_GetEntityRenderRegionAtIndex) == 0x000010, "Wrong size on CamperPlayer_GetEntityRenderRegionAtIndex");
static_assert(offsetof(CamperPlayer_GetEntityRenderRegionAtIndex, InIndex) == 0x000000, "Member 'CamperPlayer_GetEntityRenderRegionAtIndex::InIndex' has a wrong offset!");
static_assert(offsetof(CamperPlayer_GetEntityRenderRegionAtIndex, ReturnValue) == 0x000008, "Member 'CamperPlayer_GetEntityRenderRegionAtIndex::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetGuidedAction
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetGuidedAction final
{
public:
	EGuidedState                                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetGuidedAction) == 0x000001, "Wrong alignment on CamperPlayer_GetGuidedAction");
static_assert(sizeof(CamperPlayer_GetGuidedAction) == 0x000001, "Wrong size on CamperPlayer_GetGuidedAction");
static_assert(offsetof(CamperPlayer_GetGuidedAction, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetGuidedAction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetHealthComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetHealthComponent final
{
public:
	class UCamperHealthComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetHealthComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetHealthComponent");
static_assert(sizeof(CamperPlayer_GetHealthComponent) == 0x000008, "Wrong size on CamperPlayer_GetHealthComponent");
static_assert(offsetof(CamperPlayer_GetHealthComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetHealthComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetHookableComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetHookableComponent final
{
public:
	class UHookableComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetHookableComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetHookableComponent");
static_assert(sizeof(CamperPlayer_GetHookableComponent) == 0x000008, "Wrong size on CamperPlayer_GetHookableComponent");
static_assert(offsetof(CamperPlayer_GetHookableComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetHookableComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetImmobilizedState
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetImmobilizedState final
{
public:
	EImmobilizedState                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetImmobilizedState) == 0x000001, "Wrong alignment on CamperPlayer_GetImmobilizedState");
static_assert(sizeof(CamperPlayer_GetImmobilizedState) == 0x000001, "Wrong size on CamperPlayer_GetImmobilizedState");
static_assert(offsetof(CamperPlayer_GetImmobilizedState, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetImmobilizedState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetIsBeingDissolved
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetIsBeingDissolved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetIsBeingDissolved) == 0x000001, "Wrong alignment on CamperPlayer_GetIsBeingDissolved");
static_assert(sizeof(CamperPlayer_GetIsBeingDissolved) == 0x000001, "Wrong size on CamperPlayer_GetIsBeingDissolved");
static_assert(offsetof(CamperPlayer_GetIsBeingDissolved, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetIsBeingDissolved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetIsWiggleProgressionAllowed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_GetIsWiggleProgressionAllowed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetIsWiggleProgressionAllowed) == 0x000001, "Wrong alignment on CamperPlayer_GetIsWiggleProgressionAllowed");
static_assert(sizeof(CamperPlayer_GetIsWiggleProgressionAllowed) == 0x000001, "Wrong size on CamperPlayer_GetIsWiggleProgressionAllowed");
static_assert(offsetof(CamperPlayer_GetIsWiggleProgressionAllowed, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetIsWiggleProgressionAllowed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetMaxGruntDistance
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetMaxGruntDistance final
{
public:
	bool                                          IsLocalPlayerKiller;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetMaxGruntDistance) == 0x000004, "Wrong alignment on CamperPlayer_GetMaxGruntDistance");
static_assert(sizeof(CamperPlayer_GetMaxGruntDistance) == 0x000008, "Wrong size on CamperPlayer_GetMaxGruntDistance");
static_assert(offsetof(CamperPlayer_GetMaxGruntDistance, IsLocalPlayerKiller) == 0x000000, "Member 'CamperPlayer_GetMaxGruntDistance::IsLocalPlayerKiller' has a wrong offset!");
static_assert(offsetof(CamperPlayer_GetMaxGruntDistance, ReturnValue) == 0x000004, "Member 'CamperPlayer_GetMaxGruntDistance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetMeshMover
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetMeshMover final
{
public:
	class UMoveComponentToComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetMeshMover) == 0x000008, "Wrong alignment on CamperPlayer_GetMeshMover");
static_assert(sizeof(CamperPlayer_GetMeshMover) == 0x000008, "Wrong size on CamperPlayer_GetMeshMover");
static_assert(offsetof(CamperPlayer_GetMeshMover, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetMeshMover::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetMontageFollower
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetMontageFollower final
{
public:
	class UAnimationMontageSlave*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetMontageFollower) == 0x000008, "Wrong alignment on CamperPlayer_GetMontageFollower");
static_assert(sizeof(CamperPlayer_GetMontageFollower) == 0x000008, "Wrong size on CamperPlayer_GetMontageFollower");
static_assert(offsetof(CamperPlayer_GetMontageFollower, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetMontageFollower::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetNoOcclusionAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetNoOcclusionAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetNoOcclusionAudioComponent) == 0x000008, "Wrong alignment on CamperPlayer_GetNoOcclusionAudioComponent");
static_assert(sizeof(CamperPlayer_GetNoOcclusionAudioComponent) == 0x000008, "Wrong size on CamperPlayer_GetNoOcclusionAudioComponent");
static_assert(offsetof(CamperPlayer_GetNoOcclusionAudioComponent, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetNoOcclusionAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetNumberOfEntityRenderRegions
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_GetNumberOfEntityRenderRegions final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetNumberOfEntityRenderRegions) == 0x000004, "Wrong alignment on CamperPlayer_GetNumberOfEntityRenderRegions");
static_assert(sizeof(CamperPlayer_GetNumberOfEntityRenderRegions) == 0x000004, "Wrong size on CamperPlayer_GetNumberOfEntityRenderRegions");
static_assert(offsetof(CamperPlayer_GetNumberOfEntityRenderRegions, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetNumberOfEntityRenderRegions::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetObsessionTargetWeight
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_GetObsessionTargetWeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetObsessionTargetWeight) == 0x000004, "Wrong alignment on CamperPlayer_GetObsessionTargetWeight");
static_assert(sizeof(CamperPlayer_GetObsessionTargetWeight) == 0x000004, "Wrong size on CamperPlayer_GetObsessionTargetWeight");
static_assert(offsetof(CamperPlayer_GetObsessionTargetWeight, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetObsessionTargetWeight::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetOverlappingEscape
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetOverlappingEscape final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetOverlappingEscape) == 0x000008, "Wrong alignment on CamperPlayer_GetOverlappingEscape");
static_assert(sizeof(CamperPlayer_GetOverlappingEscape) == 0x000008, "Wrong size on CamperPlayer_GetOverlappingEscape");
static_assert(offsetof(CamperPlayer_GetOverlappingEscape, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetOverlappingEscape::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetPercentHealingTimer
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_GetPercentHealingTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetPercentHealingTimer) == 0x000004, "Wrong alignment on CamperPlayer_GetPercentHealingTimer");
static_assert(sizeof(CamperPlayer_GetPercentHealingTimer) == 0x000004, "Wrong size on CamperPlayer_GetPercentHealingTimer");
static_assert(offsetof(CamperPlayer_GetPercentHealingTimer, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetPercentHealingTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetReverseBearTrap
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetReverseBearTrap final
{
public:
	class AReverseBearTrap*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetReverseBearTrap) == 0x000008, "Wrong alignment on CamperPlayer_GetReverseBearTrap");
static_assert(sizeof(CamperPlayer_GetReverseBearTrap) == 0x000008, "Wrong size on CamperPlayer_GetReverseBearTrap");
static_assert(offsetof(CamperPlayer_GetReverseBearTrap, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetReverseBearTrap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetStillness
// 0x0004 (0x0004 - 0x0000)
struct CamperPlayer_GetStillness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetStillness) == 0x000004, "Wrong alignment on CamperPlayer_GetStillness");
static_assert(sizeof(CamperPlayer_GetStillness) == 0x000004, "Wrong size on CamperPlayer_GetStillness");
static_assert(offsetof(CamperPlayer_GetStillness, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetStillness::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetToAimPointRotation
// 0x0018 (0x0018 - 0x0000)
struct CamperPlayer_GetToAimPointRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetToAimPointRotation) == 0x000008, "Wrong alignment on CamperPlayer_GetToAimPointRotation");
static_assert(sizeof(CamperPlayer_GetToAimPointRotation) == 0x000018, "Wrong size on CamperPlayer_GetToAimPointRotation");
static_assert(offsetof(CamperPlayer_GetToAimPointRotation, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetToAimPointRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.GetWiggleChargeable
// 0x0008 (0x0008 - 0x0000)
struct CamperPlayer_GetWiggleChargeable final
{
public:
	class UChargeableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_GetWiggleChargeable) == 0x000008, "Wrong alignment on CamperPlayer_GetWiggleChargeable");
static_assert(sizeof(CamperPlayer_GetWiggleChargeable) == 0x000008, "Wrong size on CamperPlayer_GetWiggleChargeable");
static_assert(offsetof(CamperPlayer_GetWiggleChargeable, ReturnValue) == 0x000000, "Member 'CamperPlayer_GetWiggleChargeable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.HasGuidedAction
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_HasGuidedAction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_HasGuidedAction) == 0x000001, "Wrong alignment on CamperPlayer_HasGuidedAction");
static_assert(sizeof(CamperPlayer_HasGuidedAction) == 0x000001, "Wrong size on CamperPlayer_HasGuidedAction");
static_assert(offsetof(CamperPlayer_HasGuidedAction, ReturnValue) == 0x000000, "Member 'CamperPlayer_HasGuidedAction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.HasHitEvents
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_HasHitEvents final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_HasHitEvents) == 0x000001, "Wrong alignment on CamperPlayer_HasHitEvents");
static_assert(sizeof(CamperPlayer_HasHitEvents) == 0x000001, "Wrong size on CamperPlayer_HasHitEvents");
static_assert(offsetof(CamperPlayer_HasHitEvents, ReturnValue) == 0x000000, "Member 'CamperPlayer_HasHitEvents::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.HasReverseBearTrap
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_HasReverseBearTrap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_HasReverseBearTrap) == 0x000001, "Wrong alignment on CamperPlayer_HasReverseBearTrap");
static_assert(sizeof(CamperPlayer_HasReverseBearTrap) == 0x000001, "Wrong size on CamperPlayer_HasReverseBearTrap");
static_assert(offsetof(CamperPlayer_HasReverseBearTrap, ReturnValue) == 0x000000, "Member 'CamperPlayer_HasReverseBearTrap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingCarried
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingCarried final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingCarried) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingCarried");
static_assert(sizeof(CamperPlayer_IsBeingCarried) == 0x000001, "Wrong size on CamperPlayer_IsBeingCarried");
static_assert(offsetof(CamperPlayer_IsBeingCarried, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingCarried::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingEndGameSacrificed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingEndGameSacrificed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingEndGameSacrificed) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingEndGameSacrificed");
static_assert(sizeof(CamperPlayer_IsBeingEndGameSacrificed) == 0x000001, "Wrong size on CamperPlayer_IsBeingEndGameSacrificed");
static_assert(offsetof(CamperPlayer_IsBeingEndGameSacrificed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingEndGameSacrificed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingHealed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingHealed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingHealed) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingHealed");
static_assert(sizeof(CamperPlayer_IsBeingHealed) == 0x000001, "Wrong size on CamperPlayer_IsBeingHealed");
static_assert(offsetof(CamperPlayer_IsBeingHealed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingHealed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingInteractedWith
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingInteractedWith final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingInteractedWith) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingInteractedWith");
static_assert(sizeof(CamperPlayer_IsBeingInteractedWith) == 0x000001, "Wrong size on CamperPlayer_IsBeingInteractedWith");
static_assert(offsetof(CamperPlayer_IsBeingInteractedWith, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingInteractedWith::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingKilled
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingKilled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingKilled) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingKilled");
static_assert(sizeof(CamperPlayer_IsBeingKilled) == 0x000001, "Wrong size on CamperPlayer_IsBeingKilled");
static_assert(offsetof(CamperPlayer_IsBeingKilled, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingKilled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingMended
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingMended final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingMended) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingMended");
static_assert(sizeof(CamperPlayer_IsBeingMended) == 0x000001, "Wrong size on CamperPlayer_IsBeingMended");
static_assert(offsetof(CamperPlayer_IsBeingMended, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingMended::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingPickedUp
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingPickedUp final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingPickedUp) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingPickedUp");
static_assert(sizeof(CamperPlayer_IsBeingPickedUp) == 0x000001, "Wrong size on CamperPlayer_IsBeingPickedUp");
static_assert(offsetof(CamperPlayer_IsBeingPickedUp, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingPickedUp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingPulledFromCloset
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingPulledFromCloset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingPulledFromCloset) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingPulledFromCloset");
static_assert(sizeof(CamperPlayer_IsBeingPulledFromCloset) == 0x000001, "Wrong size on CamperPlayer_IsBeingPulledFromCloset");
static_assert(offsetof(CamperPlayer_IsBeingPulledFromCloset, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingPulledFromCloset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingPutDown
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingPutDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingPutDown) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingPutDown");
static_assert(sizeof(CamperPlayer_IsBeingPutDown) == 0x000001, "Wrong size on CamperPlayer_IsBeingPutDown");
static_assert(offsetof(CamperPlayer_IsBeingPutDown, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingPutDown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingPutOnHook
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingPutOnHook final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingPutOnHook) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingPutOnHook");
static_assert(sizeof(CamperPlayer_IsBeingPutOnHook) == 0x000001, "Wrong size on CamperPlayer_IsBeingPutOnHook");
static_assert(offsetof(CamperPlayer_IsBeingPutOnHook, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingPutOnHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsBeingUnhooked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsBeingUnhooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsBeingUnhooked) == 0x000001, "Wrong alignment on CamperPlayer_IsBeingUnhooked");
static_assert(sizeof(CamperPlayer_IsBeingUnhooked) == 0x000001, "Wrong size on CamperPlayer_IsBeingUnhooked");
static_assert(offsetof(CamperPlayer_IsBeingUnhooked, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsBeingUnhooked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsCrawling
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsCrawling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsCrawling) == 0x000001, "Wrong alignment on CamperPlayer_IsCrawling");
static_assert(sizeof(CamperPlayer_IsCrawling) == 0x000001, "Wrong size on CamperPlayer_IsCrawling");
static_assert(offsetof(CamperPlayer_IsCrawling, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsCrawling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsDeadOrInParadise
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsDeadOrInParadise final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsDeadOrInParadise) == 0x000001, "Wrong alignment on CamperPlayer_IsDeadOrInParadise");
static_assert(sizeof(CamperPlayer_IsDeadOrInParadise) == 0x000001, "Wrong size on CamperPlayer_IsDeadOrInParadise");
static_assert(offsetof(CamperPlayer_IsDeadOrInParadise, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsDeadOrInParadise::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsEscaped
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsEscaped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsEscaped) == 0x000001, "Wrong alignment on CamperPlayer_IsEscaped");
static_assert(sizeof(CamperPlayer_IsEscaped) == 0x000001, "Wrong size on CamperPlayer_IsEscaped");
static_assert(offsetof(CamperPlayer_IsEscaped, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsEscaped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsGuidedBySlasher
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsGuidedBySlasher final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsGuidedBySlasher) == 0x000001, "Wrong alignment on CamperPlayer_IsGuidedBySlasher");
static_assert(sizeof(CamperPlayer_IsGuidedBySlasher) == 0x000001, "Wrong size on CamperPlayer_IsGuidedBySlasher");
static_assert(offsetof(CamperPlayer_IsGuidedBySlasher, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsGuidedBySlasher::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsHealingTimerExpired
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsHealingTimerExpired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsHealingTimerExpired) == 0x000001, "Wrong alignment on CamperPlayer_IsHealingTimerExpired");
static_assert(sizeof(CamperPlayer_IsHealingTimerExpired) == 0x000001, "Wrong size on CamperPlayer_IsHealingTimerExpired");
static_assert(offsetof(CamperPlayer_IsHealingTimerExpired, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsHealingTimerExpired::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsHooked
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsHooked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsHooked) == 0x000001, "Wrong alignment on CamperPlayer_IsHooked");
static_assert(sizeof(CamperPlayer_IsHooked) == 0x000001, "Wrong size on CamperPlayer_IsHooked");
static_assert(offsetof(CamperPlayer_IsHooked, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsHooked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsInDeathBed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsInDeathBed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsInDeathBed) == 0x000001, "Wrong alignment on CamperPlayer_IsInDeathBed");
static_assert(sizeof(CamperPlayer_IsInDeathBed) == 0x000001, "Wrong size on CamperPlayer_IsInDeathBed");
static_assert(offsetof(CamperPlayer_IsInDeathBed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsInDeathBed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsInNeed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsInNeed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsInNeed) == 0x000001, "Wrong alignment on CamperPlayer_IsInNeed");
static_assert(sizeof(CamperPlayer_IsInNeed) == 0x000001, "Wrong size on CamperPlayer_IsInNeed");
static_assert(offsetof(CamperPlayer_IsInNeed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsInNeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsMovementGuided
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsMovementGuided final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsMovementGuided) == 0x000001, "Wrong alignment on CamperPlayer_IsMovementGuided");
static_assert(sizeof(CamperPlayer_IsMovementGuided) == 0x000001, "Wrong size on CamperPlayer_IsMovementGuided");
static_assert(offsetof(CamperPlayer_IsMovementGuided, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsMovementGuided::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsObsessionTarget
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsObsessionTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsObsessionTarget) == 0x000001, "Wrong alignment on CamperPlayer_IsObsessionTarget");
static_assert(sizeof(CamperPlayer_IsObsessionTarget) == 0x000001, "Wrong size on CamperPlayer_IsObsessionTarget");
static_assert(offsetof(CamperPlayer_IsObsessionTarget, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsObsessionTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsSacrificed
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsSacrificed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsSacrificed) == 0x000001, "Wrong alignment on CamperPlayer_IsSacrificed");
static_assert(sizeof(CamperPlayer_IsSacrificed) == 0x000001, "Wrong size on CamperPlayer_IsSacrificed");
static_assert(offsetof(CamperPlayer_IsSacrificed, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsSacrificed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsTrapped
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsTrapped final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsTrapped) == 0x000001, "Wrong alignment on CamperPlayer_IsTrapped");
static_assert(sizeof(CamperPlayer_IsTrapped) == 0x000001, "Wrong size on CamperPlayer_IsTrapped");
static_assert(offsetof(CamperPlayer_IsTrapped, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsTrapped::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsUnhookingSelf
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsUnhookingSelf final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsUnhookingSelf) == 0x000001, "Wrong alignment on CamperPlayer_IsUnhookingSelf");
static_assert(sizeof(CamperPlayer_IsUnhookingSelf) == 0x000001, "Wrong size on CamperPlayer_IsUnhookingSelf");
static_assert(offsetof(CamperPlayer_IsUnhookingSelf, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsUnhookingSelf::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsUnintentionallyImmobilized
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsUnintentionallyImmobilized final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsUnintentionallyImmobilized) == 0x000001, "Wrong alignment on CamperPlayer_IsUnintentionallyImmobilized");
static_assert(sizeof(CamperPlayer_IsUnintentionallyImmobilized) == 0x000001, "Wrong size on CamperPlayer_IsUnintentionallyImmobilized");
static_assert(offsetof(CamperPlayer_IsUnintentionallyImmobilized, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsUnintentionallyImmobilized::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.IsVaulting
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_IsVaulting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_IsVaulting) == 0x000001, "Wrong alignment on CamperPlayer_IsVaulting");
static_assert(sizeof(CamperPlayer_IsVaulting) == 0x000001, "Wrong size on CamperPlayer_IsVaulting");
static_assert(offsetof(CamperPlayer_IsVaulting, ReturnValue) == 0x000000, "Member 'CamperPlayer_IsVaulting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CamperPlayer.NotifySurvivorDissolveFinished
// 0x0001 (0x0001 - 0x0000)
struct CamperPlayer_NotifySurvivorDissolveFinished final
{
public:
	bool                                          IsDissolved;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CamperPlayer_NotifySurvivorDissolveFinished) == 0x000001, "Wrong alignment on CamperPlayer_NotifySurvivorDissolveFinished");
static_assert(sizeof(CamperPlayer_NotifySurvivorDissolveFinished) == 0x000001, "Wrong size on CamperPlayer_NotifySurvivorDissolveFinished");
static_assert(offsetof(CamperPlayer_NotifySurvivorDissolveFinished, IsDissolved) == 0x000000, "Member 'CamperPlayer_NotifySurvivorDissolveFinished::IsDissolved' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.Authority_AddTotallyInsaneSurvivor
// 0x0008 (0x0008 - 0x0000)
struct CartersSparkComponent_Authority_AddTotallyInsaneSurvivor final
{
public:
	class ADBDPlayer*                             InsaneSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_Authority_AddTotallyInsaneSurvivor) == 0x000008, "Wrong alignment on CartersSparkComponent_Authority_AddTotallyInsaneSurvivor");
static_assert(sizeof(CartersSparkComponent_Authority_AddTotallyInsaneSurvivor) == 0x000008, "Wrong size on CartersSparkComponent_Authority_AddTotallyInsaneSurvivor");
static_assert(offsetof(CartersSparkComponent_Authority_AddTotallyInsaneSurvivor, InsaneSurvivor) == 0x000000, "Member 'CartersSparkComponent_Authority_AddTotallyInsaneSurvivor::InsaneSurvivor' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.OnRequestAndBeginInteraction
// 0x0008 (0x0008 - 0x0000)
struct CartersSparkComponent_OnRequestAndBeginInteraction final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_OnRequestAndBeginInteraction) == 0x000008, "Wrong alignment on CartersSparkComponent_OnRequestAndBeginInteraction");
static_assert(sizeof(CartersSparkComponent_OnRequestAndBeginInteraction) == 0x000008, "Wrong size on CartersSparkComponent_OnRequestAndBeginInteraction");
static_assert(offsetof(CartersSparkComponent_OnRequestAndBeginInteraction, Interaction) == 0x000000, "Member 'CartersSparkComponent_OnRequestAndBeginInteraction::Interaction' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.TriggerStaticBlastCooldown
// 0x0001 (0x0001 - 0x0000)
struct CartersSparkComponent_TriggerStaticBlastCooldown final
{
public:
	bool                                          HasHitSurvivor;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_TriggerStaticBlastCooldown) == 0x000001, "Wrong alignment on CartersSparkComponent_TriggerStaticBlastCooldown");
static_assert(sizeof(CartersSparkComponent_TriggerStaticBlastCooldown) == 0x000001, "Wrong size on CartersSparkComponent_TriggerStaticBlastCooldown");
static_assert(offsetof(CartersSparkComponent_TriggerStaticBlastCooldown, HasHitSurvivor) == 0x000000, "Member 'CartersSparkComponent_TriggerStaticBlastCooldown::HasHitSurvivor' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.GetShockTherapyCooldownDuration
// 0x0004 (0x0004 - 0x0000)
struct CartersSparkComponent_GetShockTherapyCooldownDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_GetShockTherapyCooldownDuration) == 0x000004, "Wrong alignment on CartersSparkComponent_GetShockTherapyCooldownDuration");
static_assert(sizeof(CartersSparkComponent_GetShockTherapyCooldownDuration) == 0x000004, "Wrong size on CartersSparkComponent_GetShockTherapyCooldownDuration");
static_assert(offsetof(CartersSparkComponent_GetShockTherapyCooldownDuration, ReturnValue) == 0x000000, "Member 'CartersSparkComponent_GetShockTherapyCooldownDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.GetStaticBlastCooldownDuration
// 0x0008 (0x0008 - 0x0000)
struct CartersSparkComponent_GetStaticBlastCooldownDuration final
{
public:
	bool                                          HasHitSurvivor;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_GetStaticBlastCooldownDuration) == 0x000004, "Wrong alignment on CartersSparkComponent_GetStaticBlastCooldownDuration");
static_assert(sizeof(CartersSparkComponent_GetStaticBlastCooldownDuration) == 0x000008, "Wrong size on CartersSparkComponent_GetStaticBlastCooldownDuration");
static_assert(offsetof(CartersSparkComponent_GetStaticBlastCooldownDuration, HasHitSurvivor) == 0x000000, "Member 'CartersSparkComponent_GetStaticBlastCooldownDuration::HasHitSurvivor' has a wrong offset!");
static_assert(offsetof(CartersSparkComponent_GetStaticBlastCooldownDuration, ReturnValue) == 0x000004, "Member 'CartersSparkComponent_GetStaticBlastCooldownDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.GetStaticBlastCooldownPercentElapsed
// 0x0004 (0x0004 - 0x0000)
struct CartersSparkComponent_GetStaticBlastCooldownPercentElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_GetStaticBlastCooldownPercentElapsed) == 0x000004, "Wrong alignment on CartersSparkComponent_GetStaticBlastCooldownPercentElapsed");
static_assert(sizeof(CartersSparkComponent_GetStaticBlastCooldownPercentElapsed) == 0x000004, "Wrong size on CartersSparkComponent_GetStaticBlastCooldownPercentElapsed");
static_assert(offsetof(CartersSparkComponent_GetStaticBlastCooldownPercentElapsed, ReturnValue) == 0x000000, "Member 'CartersSparkComponent_GetStaticBlastCooldownPercentElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.IsShockTherapyOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct CartersSparkComponent_IsShockTherapyOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_IsShockTherapyOnCooldown) == 0x000001, "Wrong alignment on CartersSparkComponent_IsShockTherapyOnCooldown");
static_assert(sizeof(CartersSparkComponent_IsShockTherapyOnCooldown) == 0x000001, "Wrong size on CartersSparkComponent_IsShockTherapyOnCooldown");
static_assert(offsetof(CartersSparkComponent_IsShockTherapyOnCooldown, ReturnValue) == 0x000000, "Member 'CartersSparkComponent_IsShockTherapyOnCooldown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CartersSparkComponent.IsStaticBlastOnCooldown
// 0x0001 (0x0001 - 0x0000)
struct CartersSparkComponent_IsStaticBlastOnCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CartersSparkComponent_IsStaticBlastOnCooldown) == 0x000001, "Wrong alignment on CartersSparkComponent_IsStaticBlastOnCooldown");
static_assert(sizeof(CartersSparkComponent_IsStaticBlastOnCooldown) == 0x000001, "Wrong size on CartersSparkComponent_IsStaticBlastOnCooldown");
static_assert(offsetof(CartersSparkComponent_IsStaticBlastOnCooldown, ReturnValue) == 0x000000, "Member 'CartersSparkComponent_IsStaticBlastOnCooldown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherHitsWhileCarryingTrackerComponent.OnAttack
// 0x0040 (0x0040 - 0x0000)
struct SlasherHitsWhileCarryingTrackerComponent_OnAttack final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherHitsWhileCarryingTrackerComponent_OnAttack) == 0x000008, "Wrong alignment on SlasherHitsWhileCarryingTrackerComponent_OnAttack");
static_assert(sizeof(SlasherHitsWhileCarryingTrackerComponent_OnAttack) == 0x000040, "Wrong size on SlasherHitsWhileCarryingTrackerComponent_OnAttack");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnAttack, GameEventType) == 0x000000, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnAttack::GameEventType' has a wrong offset!");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnAttack, GameEventData) == 0x000010, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnAttack::GameEventData' has a wrong offset!");

// Function DeadByDaylight.SlasherHitsWhileCarryingTrackerComponent.OnPickup
// 0x0040 (0x0040 - 0x0000)
struct SlasherHitsWhileCarryingTrackerComponent_OnPickup final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherHitsWhileCarryingTrackerComponent_OnPickup) == 0x000008, "Wrong alignment on SlasherHitsWhileCarryingTrackerComponent_OnPickup");
static_assert(sizeof(SlasherHitsWhileCarryingTrackerComponent_OnPickup) == 0x000040, "Wrong size on SlasherHitsWhileCarryingTrackerComponent_OnPickup");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnPickup, GameEventType) == 0x000000, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnPickup::GameEventType' has a wrong offset!");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnPickup, GameEventData) == 0x000010, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnPickup::GameEventData' has a wrong offset!");

// Function DeadByDaylight.SlasherHitsWhileCarryingTrackerComponent.OnPostAttack
// 0x0040 (0x0040 - 0x0000)
struct SlasherHitsWhileCarryingTrackerComponent_OnPostAttack final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherHitsWhileCarryingTrackerComponent_OnPostAttack) == 0x000008, "Wrong alignment on SlasherHitsWhileCarryingTrackerComponent_OnPostAttack");
static_assert(sizeof(SlasherHitsWhileCarryingTrackerComponent_OnPostAttack) == 0x000040, "Wrong size on SlasherHitsWhileCarryingTrackerComponent_OnPostAttack");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnPostAttack, GameEventType) == 0x000000, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnPostAttack::GameEventType' has a wrong offset!");
static_assert(offsetof(SlasherHitsWhileCarryingTrackerComponent_OnPostAttack, GameEventData) == 0x000010, "Member 'SlasherHitsWhileCarryingTrackerComponent_OnPostAttack::GameEventData' has a wrong offset!");

// Function DeadByDaylight.CharacterStatsHandlerComponent.OnGameEvent
// 0x0040 (0x0040 - 0x0000)
struct CharacterStatsHandlerComponent_OnGameEvent final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStatsHandlerComponent_OnGameEvent) == 0x000008, "Wrong alignment on CharacterStatsHandlerComponent_OnGameEvent");
static_assert(sizeof(CharacterStatsHandlerComponent_OnGameEvent) == 0x000040, "Wrong size on CharacterStatsHandlerComponent_OnGameEvent");
static_assert(offsetof(CharacterStatsHandlerComponent_OnGameEvent, GameEventType) == 0x000000, "Member 'CharacterStatsHandlerComponent_OnGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(CharacterStatsHandlerComponent_OnGameEvent, GameEventData) == 0x000010, "Member 'CharacterStatsHandlerComponent_OnGameEvent::GameEventData' has a wrong offset!");

// Function DeadByDaylight.CharacterStatsHandlerComponent.ReceiveGameEvent
// 0x0018 (0x0018 - 0x0000)
struct CharacterStatsHandlerComponent_ReceiveGameEvent final
{
public:
	EDBDScoreTypes                                ScoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterStatsHandlerComponent_ReceiveGameEvent) == 0x000008, "Wrong alignment on CharacterStatsHandlerComponent_ReceiveGameEvent");
static_assert(sizeof(CharacterStatsHandlerComponent_ReceiveGameEvent) == 0x000018, "Wrong size on CharacterStatsHandlerComponent_ReceiveGameEvent");
static_assert(offsetof(CharacterStatsHandlerComponent_ReceiveGameEvent, ScoreType) == 0x000000, "Member 'CharacterStatsHandlerComponent_ReceiveGameEvent::ScoreType' has a wrong offset!");
static_assert(offsetof(CharacterStatsHandlerComponent_ReceiveGameEvent, Amount) == 0x000004, "Member 'CharacterStatsHandlerComponent_ReceiveGameEvent::Amount' has a wrong offset!");
static_assert(offsetof(CharacterStatsHandlerComponent_ReceiveGameEvent, Instigator) == 0x000008, "Member 'CharacterStatsHandlerComponent_ReceiveGameEvent::Instigator' has a wrong offset!");
static_assert(offsetof(CharacterStatsHandlerComponent_ReceiveGameEvent, Target) == 0x000010, "Member 'CharacterStatsHandlerComponent_ReceiveGameEvent::Target' has a wrong offset!");

// Function DeadByDaylight.CharacterUtilities.GetActorLocationFromFeetLocation
// 0x0038 (0x0038 - 0x0000)
struct CharacterUtilities_GetActorLocationFromFeetLocation final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FeetLocation;                                      // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterUtilities_GetActorLocationFromFeetLocation) == 0x000008, "Wrong alignment on CharacterUtilities_GetActorLocationFromFeetLocation");
static_assert(sizeof(CharacterUtilities_GetActorLocationFromFeetLocation) == 0x000038, "Wrong size on CharacterUtilities_GetActorLocationFromFeetLocation");
static_assert(offsetof(CharacterUtilities_GetActorLocationFromFeetLocation, Character) == 0x000000, "Member 'CharacterUtilities_GetActorLocationFromFeetLocation::Character' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetActorLocationFromFeetLocation, FeetLocation) == 0x000008, "Member 'CharacterUtilities_GetActorLocationFromFeetLocation::FeetLocation' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetActorLocationFromFeetLocation, ReturnValue) == 0x000020, "Member 'CharacterUtilities_GetActorLocationFromFeetLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterUtilities.GetFeetPosition
// 0x0020 (0x0020 - 0x0000)
struct CharacterUtilities_GetFeetPosition final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0008(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterUtilities_GetFeetPosition) == 0x000008, "Wrong alignment on CharacterUtilities_GetFeetPosition");
static_assert(sizeof(CharacterUtilities_GetFeetPosition) == 0x000020, "Wrong size on CharacterUtilities_GetFeetPosition");
static_assert(offsetof(CharacterUtilities_GetFeetPosition, Character) == 0x000000, "Member 'CharacterUtilities_GetFeetPosition::Character' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetFeetPosition, ReturnValue) == 0x000008, "Member 'CharacterUtilities_GetFeetPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CharacterUtilities.GetFeetPositionAtTargetLocation
// 0x0038 (0x0038 - 0x0000)
struct CharacterUtilities_GetFeetPositionAtTargetLocation final
{
public:
	const class ACharacter*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharacterUtilities_GetFeetPositionAtTargetLocation) == 0x000008, "Wrong alignment on CharacterUtilities_GetFeetPositionAtTargetLocation");
static_assert(sizeof(CharacterUtilities_GetFeetPositionAtTargetLocation) == 0x000038, "Wrong size on CharacterUtilities_GetFeetPositionAtTargetLocation");
static_assert(offsetof(CharacterUtilities_GetFeetPositionAtTargetLocation, Character) == 0x000000, "Member 'CharacterUtilities_GetFeetPositionAtTargetLocation::Character' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetFeetPositionAtTargetLocation, Location) == 0x000008, "Member 'CharacterUtilities_GetFeetPositionAtTargetLocation::Location' has a wrong offset!");
static_assert(offsetof(CharacterUtilities_GetFeetPositionAtTargetLocation, ReturnValue) == 0x000020, "Member 'CharacterUtilities_GetFeetPositionAtTargetLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Authority_AddCharge
// 0x0018 (0x0018 - 0x0000)
struct ChargeableComponent_Authority_AddCharge final
{
public:
	float                                         ChargeAmount;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BypassSkillCheckFail;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOneTimeIncrease;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChargeWithItem;                                  // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableComponent_Authority_AddCharge) == 0x000008, "Wrong alignment on ChargeableComponent_Authority_AddCharge");
static_assert(sizeof(ChargeableComponent_Authority_AddCharge) == 0x000018, "Wrong size on ChargeableComponent_Authority_AddCharge");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, ChargeAmount) == 0x000000, "Member 'ChargeableComponent_Authority_AddCharge::ChargeAmount' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, Instigator) == 0x000008, "Member 'ChargeableComponent_Authority_AddCharge::Instigator' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, BypassSkillCheckFail) == 0x000010, "Member 'ChargeableComponent_Authority_AddCharge::BypassSkillCheckFail' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, IsOneTimeIncrease) == 0x000011, "Member 'ChargeableComponent_Authority_AddCharge::IsOneTimeIncrease' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddCharge, IsChargeWithItem) == 0x000012, "Member 'ChargeableComponent_Authority_AddCharge::IsChargeWithItem' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Authority_AddChargePercent
// 0x0018 (0x0018 - 0x0000)
struct ChargeableComponent_Authority_AddChargePercent final
{
public:
	float                                         ChargePercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BypassSkillCheckFail;                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOneTimeIncrease;                                 // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChargeWithItem;                                  // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableComponent_Authority_AddChargePercent) == 0x000008, "Wrong alignment on ChargeableComponent_Authority_AddChargePercent");
static_assert(sizeof(ChargeableComponent_Authority_AddChargePercent) == 0x000018, "Wrong size on ChargeableComponent_Authority_AddChargePercent");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, ChargePercent) == 0x000000, "Member 'ChargeableComponent_Authority_AddChargePercent::ChargePercent' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, Instigator) == 0x000008, "Member 'ChargeableComponent_Authority_AddChargePercent::Instigator' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, BypassSkillCheckFail) == 0x000010, "Member 'ChargeableComponent_Authority_AddChargePercent::BypassSkillCheckFail' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, IsOneTimeIncrease) == 0x000011, "Member 'ChargeableComponent_Authority_AddChargePercent::IsOneTimeIncrease' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_Authority_AddChargePercent, IsChargeWithItem) == 0x000012, "Member 'ChargeableComponent_Authority_AddChargePercent::IsChargeWithItem' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Authority_SetEnableAddCharge
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_Authority_SetEnableAddCharge final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_Authority_SetEnableAddCharge) == 0x000001, "Wrong alignment on ChargeableComponent_Authority_SetEnableAddCharge");
static_assert(sizeof(ChargeableComponent_Authority_SetEnableAddCharge) == 0x000001, "Wrong size on ChargeableComponent_Authority_SetEnableAddCharge");
static_assert(offsetof(ChargeableComponent_Authority_SetEnableAddCharge, Enable) == 0x000000, "Member 'ChargeableComponent_Authority_SetEnableAddCharge::Enable' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Authority_SetEnableSkillCheckFailurePenalty
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty) == 0x000001, "Wrong alignment on ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty");
static_assert(sizeof(ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty) == 0x000001, "Wrong size on ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty");
static_assert(offsetof(ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty, Enable) == 0x000000, "Member 'ChargeableComponent_Authority_SetEnableSkillCheckFailurePenalty::Enable' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.IncreaseMaxCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_IncreaseMaxCharge final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_IncreaseMaxCharge) == 0x000004, "Wrong alignment on ChargeableComponent_IncreaseMaxCharge");
static_assert(sizeof(ChargeableComponent_IncreaseMaxCharge) == 0x000004, "Wrong size on ChargeableComponent_IncreaseMaxCharge");
static_assert(offsetof(ChargeableComponent_IncreaseMaxCharge, Percent) == 0x000000, "Member 'ChargeableComponent_IncreaseMaxCharge::Percent' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Multicast_SetPermanentCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_Multicast_SetPermanentCharge final
{
public:
	float                                         ChargePercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_Multicast_SetPermanentCharge) == 0x000004, "Wrong alignment on ChargeableComponent_Multicast_SetPermanentCharge");
static_assert(sizeof(ChargeableComponent_Multicast_SetPermanentCharge) == 0x000004, "Wrong size on ChargeableComponent_Multicast_SetPermanentCharge");
static_assert(offsetof(ChargeableComponent_Multicast_SetPermanentCharge, ChargePercent) == 0x000000, "Member 'ChargeableComponent_Multicast_SetPermanentCharge::ChargePercent' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.OnCurrentChargeChanged
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_OnCurrentChargeChanged final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_OnCurrentChargeChanged) == 0x000004, "Wrong alignment on ChargeableComponent_OnCurrentChargeChanged");
static_assert(sizeof(ChargeableComponent_OnCurrentChargeChanged) == 0x000004, "Wrong size on ChargeableComponent_OnCurrentChargeChanged");
static_assert(offsetof(ChargeableComponent_OnCurrentChargeChanged, Value) == 0x000000, "Member 'ChargeableComponent_OnCurrentChargeChanged::Value' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.SetDechargeRate
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_SetDechargeRate final
{
public:
	float                                         DechargeRate;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_SetDechargeRate) == 0x000004, "Wrong alignment on ChargeableComponent_SetDechargeRate");
static_assert(sizeof(ChargeableComponent_SetDechargeRate) == 0x000004, "Wrong size on ChargeableComponent_SetDechargeRate");
static_assert(offsetof(ChargeableComponent_SetDechargeRate, DechargeRate) == 0x000000, "Member 'ChargeableComponent_SetDechargeRate::DechargeRate' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.SetSecondsToCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_SetSecondsToCharge final
{
public:
	float                                         SecondsToCharge;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_SetSecondsToCharge) == 0x000004, "Wrong alignment on ChargeableComponent_SetSecondsToCharge");
static_assert(sizeof(ChargeableComponent_SetSecondsToCharge) == 0x000004, "Wrong size on ChargeableComponent_SetSecondsToCharge");
static_assert(offsetof(ChargeableComponent_SetSecondsToCharge, SecondsToCharge) == 0x000000, "Member 'ChargeableComponent_SetSecondsToCharge::SecondsToCharge' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetChargeRemaining
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetChargeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetChargeRemaining) == 0x000004, "Wrong alignment on ChargeableComponent_GetChargeRemaining");
static_assert(sizeof(ChargeableComponent_GetChargeRemaining) == 0x000004, "Wrong size on ChargeableComponent_GetChargeRemaining");
static_assert(offsetof(ChargeableComponent_GetChargeRemaining, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetChargeRemaining::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetChargingSpeed
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetChargingSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetChargingSpeed) == 0x000004, "Wrong alignment on ChargeableComponent_GetChargingSpeed");
static_assert(sizeof(ChargeableComponent_GetChargingSpeed) == 0x000004, "Wrong size on ChargeableComponent_GetChargingSpeed");
static_assert(offsetof(ChargeableComponent_GetChargingSpeed, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetChargingSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetCurrentCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetCurrentCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetCurrentCharge) == 0x000004, "Wrong alignment on ChargeableComponent_GetCurrentCharge");
static_assert(sizeof(ChargeableComponent_GetCurrentCharge) == 0x000004, "Wrong size on ChargeableComponent_GetCurrentCharge");
static_assert(offsetof(ChargeableComponent_GetCurrentCharge, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetCurrentCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetMaxCharge
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetMaxCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetMaxCharge) == 0x000004, "Wrong alignment on ChargeableComponent_GetMaxCharge");
static_assert(sizeof(ChargeableComponent_GetMaxCharge) == 0x000004, "Wrong size on ChargeableComponent_GetMaxCharge");
static_assert(offsetof(ChargeableComponent_GetMaxCharge, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetMaxCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetPercentComplete
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetPercentComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetPercentComplete) == 0x000004, "Wrong alignment on ChargeableComponent_GetPercentComplete");
static_assert(sizeof(ChargeableComponent_GetPercentComplete) == 0x000004, "Wrong size on ChargeableComponent_GetPercentComplete");
static_assert(offsetof(ChargeableComponent_GetPercentComplete, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetPercentComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetPermanentChargePercent
// 0x0004 (0x0004 - 0x0000)
struct ChargeableComponent_GetPermanentChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetPermanentChargePercent) == 0x000004, "Wrong alignment on ChargeableComponent_GetPermanentChargePercent");
static_assert(sizeof(ChargeableComponent_GetPermanentChargePercent) == 0x000004, "Wrong size on ChargeableComponent_GetPermanentChargePercent");
static_assert(offsetof(ChargeableComponent_GetPermanentChargePercent, ReturnValue) == 0x000000, "Member 'ChargeableComponent_GetPermanentChargePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetPlayerCountPenaltyModifier
// 0x0008 (0x0008 - 0x0000)
struct ChargeableComponent_GetPlayerCountPenaltyModifier final
{
public:
	int32                                         PlayerCount;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetPlayerCountPenaltyModifier) == 0x000004, "Wrong alignment on ChargeableComponent_GetPlayerCountPenaltyModifier");
static_assert(sizeof(ChargeableComponent_GetPlayerCountPenaltyModifier) == 0x000008, "Wrong size on ChargeableComponent_GetPlayerCountPenaltyModifier");
static_assert(offsetof(ChargeableComponent_GetPlayerCountPenaltyModifier, PlayerCount) == 0x000000, "Member 'ChargeableComponent_GetPlayerCountPenaltyModifier::PlayerCount' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_GetPlayerCountPenaltyModifier, ReturnValue) == 0x000004, "Member 'ChargeableComponent_GetPlayerCountPenaltyModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.GetTunableValue
// 0x0010 (0x0010 - 0x0000)
struct ChargeableComponent_GetTunableValue final
{
public:
	class FName                                   TunableValueID;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_GetTunableValue) == 0x000004, "Wrong alignment on ChargeableComponent_GetTunableValue");
static_assert(sizeof(ChargeableComponent_GetTunableValue) == 0x000010, "Wrong size on ChargeableComponent_GetTunableValue");
static_assert(offsetof(ChargeableComponent_GetTunableValue, TunableValueID) == 0x000000, "Member 'ChargeableComponent_GetTunableValue::TunableValueID' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_GetTunableValue, ReturnValue) == 0x00000C, "Member 'ChargeableComponent_GetTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.HasPlayerDoneSkillCheck
// 0x0008 (0x0008 - 0x0000)
struct ChargeableComponent_HasPlayerDoneSkillCheck final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeableComponent_HasPlayerDoneSkillCheck) == 0x000004, "Wrong alignment on ChargeableComponent_HasPlayerDoneSkillCheck");
static_assert(sizeof(ChargeableComponent_HasPlayerDoneSkillCheck) == 0x000008, "Wrong size on ChargeableComponent_HasPlayerDoneSkillCheck");
static_assert(offsetof(ChargeableComponent_HasPlayerDoneSkillCheck, PlayerId) == 0x000000, "Member 'ChargeableComponent_HasPlayerDoneSkillCheck::PlayerId' has a wrong offset!");
static_assert(offsetof(ChargeableComponent_HasPlayerDoneSkillCheck, ReturnValue) == 0x000004, "Member 'ChargeableComponent_HasPlayerDoneSkillCheck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.IsChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_IsChargeComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_IsChargeComplete) == 0x000001, "Wrong alignment on ChargeableComponent_IsChargeComplete");
static_assert(sizeof(ChargeableComponent_IsChargeComplete) == 0x000001, "Wrong size on ChargeableComponent_IsChargeComplete");
static_assert(offsetof(ChargeableComponent_IsChargeComplete, ReturnValue) == 0x000000, "Member 'ChargeableComponent_IsChargeComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.IsSkillCheckTimePenaltyActive
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_IsSkillCheckTimePenaltyActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_IsSkillCheckTimePenaltyActive) == 0x000001, "Wrong alignment on ChargeableComponent_IsSkillCheckTimePenaltyActive");
static_assert(sizeof(ChargeableComponent_IsSkillCheckTimePenaltyActive) == 0x000001, "Wrong size on ChargeableComponent_IsSkillCheckTimePenaltyActive");
static_assert(offsetof(ChargeableComponent_IsSkillCheckTimePenaltyActive, ReturnValue) == 0x000000, "Member 'ChargeableComponent_IsSkillCheckTimePenaltyActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargeableComponent.Multicast_OnCompleteChanged
// 0x0001 (0x0001 - 0x0000)
struct ChargeableComponent_Multicast_OnCompleteChanged final
{
public:
	bool                                          COMPLETED;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargeableComponent_Multicast_OnCompleteChanged) == 0x000001, "Wrong alignment on ChargeableComponent_Multicast_OnCompleteChanged");
static_assert(sizeof(ChargeableComponent_Multicast_OnCompleteChanged) == 0x000001, "Wrong size on ChargeableComponent_Multicast_OnCompleteChanged");
static_assert(offsetof(ChargeableComponent_Multicast_OnCompleteChanged, COMPLETED) == 0x000000, "Member 'ChargeableComponent_Multicast_OnCompleteChanged::COMPLETED' has a wrong offset!");

// Function DeadByDaylight.ChargedAttackStateComponent.SetChargingPercent
// 0x0004 (0x0004 - 0x0000)
struct ChargedAttackStateComponent_SetChargingPercent final
{
public:
	float                                         ChargePercent;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargedAttackStateComponent_SetChargingPercent) == 0x000004, "Wrong alignment on ChargedAttackStateComponent_SetChargingPercent");
static_assert(sizeof(ChargedAttackStateComponent_SetChargingPercent) == 0x000004, "Wrong size on ChargedAttackStateComponent_SetChargingPercent");
static_assert(offsetof(ChargedAttackStateComponent_SetChargingPercent, ChargePercent) == 0x000000, "Member 'ChargedAttackStateComponent_SetChargingPercent::ChargePercent' has a wrong offset!");

// Function DeadByDaylight.ChargedAttackStateComponent.SetIsCharging
// 0x0001 (0x0001 - 0x0000)
struct ChargedAttackStateComponent_SetIsCharging final
{
public:
	bool                                          IsCharging;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargedAttackStateComponent_SetIsCharging) == 0x000001, "Wrong alignment on ChargedAttackStateComponent_SetIsCharging");
static_assert(sizeof(ChargedAttackStateComponent_SetIsCharging) == 0x000001, "Wrong size on ChargedAttackStateComponent_SetIsCharging");
static_assert(offsetof(ChargedAttackStateComponent_SetIsCharging, IsCharging) == 0x000000, "Member 'ChargedAttackStateComponent_SetIsCharging::IsCharging' has a wrong offset!");

// Function DeadByDaylight.ChargedAttackStateComponent.GetChargingPercent
// 0x0004 (0x0004 - 0x0000)
struct ChargedAttackStateComponent_GetChargingPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargedAttackStateComponent_GetChargingPercent) == 0x000004, "Wrong alignment on ChargedAttackStateComponent_GetChargingPercent");
static_assert(sizeof(ChargedAttackStateComponent_GetChargingPercent) == 0x000004, "Wrong size on ChargedAttackStateComponent_GetChargingPercent");
static_assert(offsetof(ChargedAttackStateComponent_GetChargingPercent, ReturnValue) == 0x000000, "Member 'ChargedAttackStateComponent_GetChargingPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargedAttackStateComponent.GetIsCharging
// 0x0001 (0x0001 - 0x0000)
struct ChargedAttackStateComponent_GetIsCharging final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargedAttackStateComponent_GetIsCharging) == 0x000001, "Wrong alignment on ChargedAttackStateComponent_GetIsCharging");
static_assert(sizeof(ChargedAttackStateComponent_GetIsCharging) == 0x000001, "Wrong size on ChargedAttackStateComponent_GetIsCharging");
static_assert(offsetof(ChargedAttackStateComponent_GetIsCharging, ReturnValue) == 0x000000, "Member 'ChargedAttackStateComponent_GetIsCharging::ReturnValue' has a wrong offset!");

// DelegateFunction DeadByDaylight.StalkedComponent.OnBeingStalkedChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct StalkedComponent_OnBeingStalkedChanged__DelegateSignature final
{
public:
	bool                                          IsBeingStalked;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkedComponent_OnBeingStalkedChanged__DelegateSignature) == 0x000001, "Wrong alignment on StalkedComponent_OnBeingStalkedChanged__DelegateSignature");
static_assert(sizeof(StalkedComponent_OnBeingStalkedChanged__DelegateSignature) == 0x000001, "Wrong size on StalkedComponent_OnBeingStalkedChanged__DelegateSignature");
static_assert(offsetof(StalkedComponent_OnBeingStalkedChanged__DelegateSignature, IsBeingStalked) == 0x000000, "Member 'StalkedComponent_OnBeingStalkedChanged__DelegateSignature::IsBeingStalked' has a wrong offset!");

// Function DeadByDaylight.StalkedComponent.HasStalkPoints
// 0x0001 (0x0001 - 0x0000)
struct StalkedComponent_HasStalkPoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkedComponent_HasStalkPoints) == 0x000001, "Wrong alignment on StalkedComponent_HasStalkPoints");
static_assert(sizeof(StalkedComponent_HasStalkPoints) == 0x000001, "Wrong size on StalkedComponent_HasStalkPoints");
static_assert(offsetof(StalkedComponent_HasStalkPoints, ReturnValue) == 0x000000, "Member 'StalkedComponent_HasStalkPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.OnRep_EnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_OnRep_EnergyLevel final
{
public:
	float                                         PreviousEnergyLevel;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_OnRep_EnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_OnRep_EnergyLevel");
static_assert(sizeof(ChargerComponent_OnRep_EnergyLevel) == 0x000004, "Wrong size on ChargerComponent_OnRep_EnergyLevel");
static_assert(offsetof(ChargerComponent_OnRep_EnergyLevel, PreviousEnergyLevel) == 0x000000, "Member 'ChargerComponent_OnRep_EnergyLevel::PreviousEnergyLevel' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.SetEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_SetEnergyLevel final
{
public:
	float                                         EnergyLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_SetEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_SetEnergyLevel");
static_assert(sizeof(ChargerComponent_SetEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_SetEnergyLevel");
static_assert(offsetof(ChargerComponent_SetEnergyLevel, EnergyLevel) == 0x000000, "Member 'ChargerComponent_SetEnergyLevel::EnergyLevel' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.SetMaxEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_SetMaxEnergyLevel final
{
public:
	float                                         EnergyLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_SetMaxEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_SetMaxEnergyLevel");
static_assert(sizeof(ChargerComponent_SetMaxEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_SetMaxEnergyLevel");
static_assert(offsetof(ChargerComponent_SetMaxEnergyLevel, EnergyLevel) == 0x000000, "Member 'ChargerComponent_SetMaxEnergyLevel::EnergyLevel' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.SetNormalizedEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_SetNormalizedEnergyLevel final
{
public:
	float                                         EnergyLevel;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_SetNormalizedEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_SetNormalizedEnergyLevel");
static_assert(sizeof(ChargerComponent_SetNormalizedEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_SetNormalizedEnergyLevel");
static_assert(offsetof(ChargerComponent_SetNormalizedEnergyLevel, EnergyLevel) == 0x000000, "Member 'ChargerComponent_SetNormalizedEnergyLevel::EnergyLevel' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.UseEnergy
// 0x0008 (0x0008 - 0x0000)
struct ChargerComponent_UseEnergy final
{
public:
	float                                         Seconds;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyUseModifier;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_UseEnergy) == 0x000004, "Wrong alignment on ChargerComponent_UseEnergy");
static_assert(sizeof(ChargerComponent_UseEnergy) == 0x000008, "Wrong size on ChargerComponent_UseEnergy");
static_assert(offsetof(ChargerComponent_UseEnergy, Seconds) == 0x000000, "Member 'ChargerComponent_UseEnergy::Seconds' has a wrong offset!");
static_assert(offsetof(ChargerComponent_UseEnergy, EnergyUseModifier) == 0x000004, "Member 'ChargerComponent_UseEnergy::EnergyUseModifier' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.GetEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_GetEnergyLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_GetEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_GetEnergyLevel");
static_assert(sizeof(ChargerComponent_GetEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_GetEnergyLevel");
static_assert(offsetof(ChargerComponent_GetEnergyLevel, ReturnValue) == 0x000000, "Member 'ChargerComponent_GetEnergyLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.GetMaxEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_GetMaxEnergyLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_GetMaxEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_GetMaxEnergyLevel");
static_assert(sizeof(ChargerComponent_GetMaxEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_GetMaxEnergyLevel");
static_assert(offsetof(ChargerComponent_GetMaxEnergyLevel, ReturnValue) == 0x000000, "Member 'ChargerComponent_GetMaxEnergyLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.GetNormalizedEnergyLevel
// 0x0004 (0x0004 - 0x0000)
struct ChargerComponent_GetNormalizedEnergyLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_GetNormalizedEnergyLevel) == 0x000004, "Wrong alignment on ChargerComponent_GetNormalizedEnergyLevel");
static_assert(sizeof(ChargerComponent_GetNormalizedEnergyLevel) == 0x000004, "Wrong size on ChargerComponent_GetNormalizedEnergyLevel");
static_assert(offsetof(ChargerComponent_GetNormalizedEnergyLevel, ReturnValue) == 0x000000, "Member 'ChargerComponent_GetNormalizedEnergyLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ChargerComponent.HasCharge
// 0x0001 (0x0001 - 0x0000)
struct ChargerComponent_HasCharge final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChargerComponent_HasCharge) == 0x000001, "Wrong alignment on ChargerComponent_HasCharge");
static_assert(sizeof(ChargerComponent_HasCharge) == 0x000001, "Wrong size on ChargerComponent_HasCharge");
static_assert(offsetof(ChargerComponent_HasCharge, ReturnValue) == 0x000000, "Member 'ChargerComponent_HasCharge::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ExposerInteriorZoneComponent.AddExposerSpawnPoint
// 0x0008 (0x0008 - 0x0000)
struct ExposerInteriorZoneComponent_AddExposerSpawnPoint final
{
public:
	class USceneComponent*                        Point;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExposerInteriorZoneComponent_AddExposerSpawnPoint) == 0x000008, "Wrong alignment on ExposerInteriorZoneComponent_AddExposerSpawnPoint");
static_assert(sizeof(ExposerInteriorZoneComponent_AddExposerSpawnPoint) == 0x000008, "Wrong size on ExposerInteriorZoneComponent_AddExposerSpawnPoint");
static_assert(offsetof(ExposerInteriorZoneComponent_AddExposerSpawnPoint, Point) == 0x000000, "Member 'ExposerInteriorZoneComponent_AddExposerSpawnPoint::Point' has a wrong offset!");

// Function DeadByDaylight.CharmSpawnerComponent.ReplaceCharmTextures
// 0x0010 (0x0010 - 0x0000)
struct CharmSpawnerComponent_ReplaceCharmTextures final
{
public:
	TArray<struct FCharmIdSlot>                   Customization;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CharmSpawnerComponent_ReplaceCharmTextures) == 0x000008, "Wrong alignment on CharmSpawnerComponent_ReplaceCharmTextures");
static_assert(sizeof(CharmSpawnerComponent_ReplaceCharmTextures) == 0x000010, "Wrong size on CharmSpawnerComponent_ReplaceCharmTextures");
static_assert(offsetof(CharmSpawnerComponent_ReplaceCharmTextures, Customization) == 0x000000, "Member 'CharmSpawnerComponent_ReplaceCharmTextures::Customization' has a wrong offset!");

// Function DeadByDaylight.ChaseeCharacterComponent.Authority_OnGeneratorPercentChanged
// 0x0010 (0x0010 - 0x0000)
struct ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged) == 0x000008, "Wrong alignment on ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged");
static_assert(sizeof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged) == 0x000010, "Wrong size on ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged");
static_assert(offsetof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged, ChargeableComponent) == 0x000000, "Member 'ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged, PercentCompletionChange) == 0x000008, "Member 'ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged, TotalPercentComplete) == 0x00000C, "Member 'ChaseeCharacterComponent_Authority_OnGeneratorPercentChanged::TotalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.FearMarketManager.ReceivedFearMarketData
// 0x0001 (0x0001 - 0x0000)
struct FearMarketManager_ReceivedFearMarketData final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FearMarketManager_ReceivedFearMarketData) == 0x000001, "Wrong alignment on FearMarketManager_ReceivedFearMarketData");
static_assert(sizeof(FearMarketManager_ReceivedFearMarketData) == 0x000001, "Wrong size on FearMarketManager_ReceivedFearMarketData");
static_assert(offsetof(FearMarketManager_ReceivedFearMarketData, Success) == 0x000000, "Member 'FearMarketManager_ReceivedFearMarketData::Success' has a wrong offset!");

// Function DeadByDaylight.FeatureGateHelper.GetAll
// 0x0020 (0x0020 - 0x0000)
struct FeatureGateHelper_GetAll final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDBDFeatureLockProgress>        OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureGateHelper_GetAll) == 0x000008, "Wrong alignment on FeatureGateHelper_GetAll");
static_assert(sizeof(FeatureGateHelper_GetAll) == 0x000020, "Wrong size on FeatureGateHelper_GetAll");
static_assert(offsetof(FeatureGateHelper_GetAll, ContextObject) == 0x000000, "Member 'FeatureGateHelper_GetAll::ContextObject' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAll, OutData) == 0x000008, "Member 'FeatureGateHelper_GetAll::OutData' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAll, ReturnValue) == 0x000018, "Member 'FeatureGateHelper_GetAll::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FeatureGateHelper.GetAllByLockState
// 0x0020 (0x0020 - 0x0000)
struct FeatureGateHelper_GetAllByLockState final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDBDFeatureLockProgress>        OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureGateHelper_GetAllByLockState) == 0x000008, "Wrong alignment on FeatureGateHelper_GetAllByLockState");
static_assert(sizeof(FeatureGateHelper_GetAllByLockState) == 0x000020, "Wrong size on FeatureGateHelper_GetAllByLockState");
static_assert(offsetof(FeatureGateHelper_GetAllByLockState, ContextObject) == 0x000000, "Member 'FeatureGateHelper_GetAllByLockState::ContextObject' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAllByLockState, OutData) == 0x000008, "Member 'FeatureGateHelper_GetAllByLockState::OutData' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAllByLockState, Locked) == 0x000018, "Member 'FeatureGateHelper_GetAllByLockState::Locked' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAllByLockState, ReturnValue) == 0x000019, "Member 'FeatureGateHelper_GetAllByLockState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FeatureGateHelper.GetAllByRole
// 0x0020 (0x0020 - 0x0000)
struct FeatureGateHelper_GetAllByRole final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDBDFeatureLockProgress>        OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureGateHelper_GetAllByRole) == 0x000008, "Wrong alignment on FeatureGateHelper_GetAllByRole");
static_assert(sizeof(FeatureGateHelper_GetAllByRole) == 0x000020, "Wrong size on FeatureGateHelper_GetAllByRole");
static_assert(offsetof(FeatureGateHelper_GetAllByRole, ContextObject) == 0x000000, "Member 'FeatureGateHelper_GetAllByRole::ContextObject' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAllByRole, OutData) == 0x000008, "Member 'FeatureGateHelper_GetAllByRole::OutData' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAllByRole, Role) == 0x000018, "Member 'FeatureGateHelper_GetAllByRole::Role' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAllByRole, ReturnValue) == 0x000019, "Member 'FeatureGateHelper_GetAllByRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FeatureGateHelper.GetAllBySeenState
// 0x0020 (0x0020 - 0x0000)
struct FeatureGateHelper_GetAllBySeenState final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDBDFeatureLockProgress>        OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          Param_WasSeen;                                     // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0019(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureGateHelper_GetAllBySeenState) == 0x000008, "Wrong alignment on FeatureGateHelper_GetAllBySeenState");
static_assert(sizeof(FeatureGateHelper_GetAllBySeenState) == 0x000020, "Wrong size on FeatureGateHelper_GetAllBySeenState");
static_assert(offsetof(FeatureGateHelper_GetAllBySeenState, ContextObject) == 0x000000, "Member 'FeatureGateHelper_GetAllBySeenState::ContextObject' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAllBySeenState, OutData) == 0x000008, "Member 'FeatureGateHelper_GetAllBySeenState::OutData' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAllBySeenState, Param_WasSeen) == 0x000018, "Member 'FeatureGateHelper_GetAllBySeenState::Param_WasSeen' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetAllBySeenState, ReturnValue) == 0x000019, "Member 'FeatureGateHelper_GetAllBySeenState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FeatureGateHelper.GetSingle
// 0x0018 (0x0018 - 0x0000)
struct FeatureGateHelper_GetSingle final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDBDFeatureLockProgress                OutData;                                           // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDBDFeatureType                               FeatureType;                                       // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0016(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureGateHelper_GetSingle) == 0x000008, "Wrong alignment on FeatureGateHelper_GetSingle");
static_assert(sizeof(FeatureGateHelper_GetSingle) == 0x000018, "Wrong size on FeatureGateHelper_GetSingle");
static_assert(offsetof(FeatureGateHelper_GetSingle, ContextObject) == 0x000000, "Member 'FeatureGateHelper_GetSingle::ContextObject' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetSingle, OutData) == 0x000008, "Member 'FeatureGateHelper_GetSingle::OutData' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetSingle, FeatureType) == 0x000014, "Member 'FeatureGateHelper_GetSingle::FeatureType' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetSingle, Role) == 0x000015, "Member 'FeatureGateHelper_GetSingle::Role' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_GetSingle, ReturnValue) == 0x000016, "Member 'FeatureGateHelper_GetSingle::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FeatureGateHelper.IsEnabled
// 0x0010 (0x0010 - 0x0000)
struct FeatureGateHelper_IsEnabled final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureGateHelper_IsEnabled) == 0x000008, "Wrong alignment on FeatureGateHelper_IsEnabled");
static_assert(sizeof(FeatureGateHelper_IsEnabled) == 0x000010, "Wrong size on FeatureGateHelper_IsEnabled");
static_assert(offsetof(FeatureGateHelper_IsEnabled, ContextObject) == 0x000000, "Member 'FeatureGateHelper_IsEnabled::ContextObject' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_IsEnabled, ReturnValue) == 0x000008, "Member 'FeatureGateHelper_IsEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FeatureGateHelper.IsLocked
// 0x0010 (0x0010 - 0x0000)
struct FeatureGateHelper_IsLocked final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDBDFeatureType                               FeatureType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureGateHelper_IsLocked) == 0x000008, "Wrong alignment on FeatureGateHelper_IsLocked");
static_assert(sizeof(FeatureGateHelper_IsLocked) == 0x000010, "Wrong size on FeatureGateHelper_IsLocked");
static_assert(offsetof(FeatureGateHelper_IsLocked, ContextObject) == 0x000000, "Member 'FeatureGateHelper_IsLocked::ContextObject' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_IsLocked, FeatureType) == 0x000008, "Member 'FeatureGateHelper_IsLocked::FeatureType' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_IsLocked, Role) == 0x000009, "Member 'FeatureGateHelper_IsLocked::Role' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_IsLocked, ReturnValue) == 0x00000A, "Member 'FeatureGateHelper_IsLocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FeatureGateHelper.WasSeen
// 0x0010 (0x0010 - 0x0000)
struct FeatureGateHelper_WasSeen final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDBDFeatureType                               FeatureType;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000A(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FeatureGateHelper_WasSeen) == 0x000008, "Wrong alignment on FeatureGateHelper_WasSeen");
static_assert(sizeof(FeatureGateHelper_WasSeen) == 0x000010, "Wrong size on FeatureGateHelper_WasSeen");
static_assert(offsetof(FeatureGateHelper_WasSeen, ContextObject) == 0x000000, "Member 'FeatureGateHelper_WasSeen::ContextObject' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_WasSeen, FeatureType) == 0x000008, "Member 'FeatureGateHelper_WasSeen::FeatureType' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_WasSeen, Role) == 0x000009, "Member 'FeatureGateHelper_WasSeen::Role' has a wrong offset!");
static_assert(offsetof(FeatureGateHelper_WasSeen, ReturnValue) == 0x00000A, "Member 'FeatureGateHelper_WasSeen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ClipManager.SphericalDissolveAt
// 0x0020 (0x0020 - 0x0000)
struct ClipManager_SphericalDissolveAt final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ClipManager_SphericalDissolveAt) == 0x000008, "Wrong alignment on ClipManager_SphericalDissolveAt");
static_assert(sizeof(ClipManager_SphericalDissolveAt) == 0x000020, "Wrong size on ClipManager_SphericalDissolveAt");
static_assert(offsetof(ClipManager_SphericalDissolveAt, Location) == 0x000000, "Member 'ClipManager_SphericalDissolveAt::Location' has a wrong offset!");
static_assert(offsetof(ClipManager_SphericalDissolveAt, Radius) == 0x000018, "Member 'ClipManager_SphericalDissolveAt::Radius' has a wrong offset!");

// Function DeadByDaylight.CombinedSpecialEventDataUtilities.GetSpecialMusicState
// 0x0440 (0x0440 - 0x0000)
struct CombinedSpecialEventDataUtilities_GetSpecialMusicState final
{
public:
	struct FCombinedSpecialEventData              Data;                                              // 0x0000(0x0430)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0430(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CombinedSpecialEventDataUtilities_GetSpecialMusicState) == 0x000008, "Wrong alignment on CombinedSpecialEventDataUtilities_GetSpecialMusicState");
static_assert(sizeof(CombinedSpecialEventDataUtilities_GetSpecialMusicState) == 0x000440, "Wrong size on CombinedSpecialEventDataUtilities_GetSpecialMusicState");
static_assert(offsetof(CombinedSpecialEventDataUtilities_GetSpecialMusicState, Data) == 0x000000, "Member 'CombinedSpecialEventDataUtilities_GetSpecialMusicState::Data' has a wrong offset!");
static_assert(offsetof(CombinedSpecialEventDataUtilities_GetSpecialMusicState, ReturnValue) == 0x000430, "Member 'CombinedSpecialEventDataUtilities_GetSpecialMusicState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ConstrainAspectRatioComponent.DBD_ToggleBlackBars
// 0x0004 (0x0004 - 0x0000)
struct ConstrainAspectRatioComponent_DBD_ToggleBlackBars final
{
public:
	int32                                         Option;                                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConstrainAspectRatioComponent_DBD_ToggleBlackBars) == 0x000004, "Wrong alignment on ConstrainAspectRatioComponent_DBD_ToggleBlackBars");
static_assert(sizeof(ConstrainAspectRatioComponent_DBD_ToggleBlackBars) == 0x000004, "Wrong size on ConstrainAspectRatioComponent_DBD_ToggleBlackBars");
static_assert(offsetof(ConstrainAspectRatioComponent_DBD_ToggleBlackBars, Option) == 0x000000, "Member 'ConstrainAspectRatioComponent_DBD_ToggleBlackBars::Option' has a wrong offset!");

// Function DeadByDaylight.ConstrainAspectRatioComponent.SetCinematicMode
// 0x0001 (0x0001 - 0x0000)
struct ConstrainAspectRatioComponent_SetCinematicMode final
{
public:
	bool                                          CinematicMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConstrainAspectRatioComponent_SetCinematicMode) == 0x000001, "Wrong alignment on ConstrainAspectRatioComponent_SetCinematicMode");
static_assert(sizeof(ConstrainAspectRatioComponent_SetCinematicMode) == 0x000001, "Wrong size on ConstrainAspectRatioComponent_SetCinematicMode");
static_assert(offsetof(ConstrainAspectRatioComponent_SetCinematicMode, CinematicMode) == 0x000000, "Member 'ConstrainAspectRatioComponent_SetCinematicMode::CinematicMode' has a wrong offset!");

// Function DeadByDaylight.ConstrainAspectRatioComponent.GetCameraConstrainedViewSize
// 0x0008 (0x0008 - 0x0000)
struct ConstrainAspectRatioComponent_GetCameraConstrainedViewSize final
{
public:
	struct FIntPoint                              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConstrainAspectRatioComponent_GetCameraConstrainedViewSize) == 0x000004, "Wrong alignment on ConstrainAspectRatioComponent_GetCameraConstrainedViewSize");
static_assert(sizeof(ConstrainAspectRatioComponent_GetCameraConstrainedViewSize) == 0x000008, "Wrong size on ConstrainAspectRatioComponent_GetCameraConstrainedViewSize");
static_assert(offsetof(ConstrainAspectRatioComponent_GetCameraConstrainedViewSize, ReturnValue) == 0x000000, "Member 'ConstrainAspectRatioComponent_GetCameraConstrainedViewSize::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGDragWidget.GetAllEditableWidgets
// 0x0010 (0x0010 - 0x0000)
struct UMGDragWidget_GetAllEditableWidgets final
{
public:
	TArray<class UCustomWidgetWrapper_HudEditor*> ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDragWidget_GetAllEditableWidgets) == 0x000008, "Wrong alignment on UMGDragWidget_GetAllEditableWidgets");
static_assert(sizeof(UMGDragWidget_GetAllEditableWidgets) == 0x000010, "Wrong size on UMGDragWidget_GetAllEditableWidgets");
static_assert(offsetof(UMGDragWidget_GetAllEditableWidgets, ReturnValue) == 0x000000, "Member 'UMGDragWidget_GetAllEditableWidgets::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.OnSaveDirty
// 0x0001 (0x0001 - 0x0000)
struct UMGHudEditorLayoutWidget_OnSaveDirty final
{
public:
	bool                                          IsDirty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_OnSaveDirty) == 0x000001, "Wrong alignment on UMGHudEditorLayoutWidget_OnSaveDirty");
static_assert(sizeof(UMGHudEditorLayoutWidget_OnSaveDirty) == 0x000001, "Wrong size on UMGHudEditorLayoutWidget_OnSaveDirty");
static_assert(offsetof(UMGHudEditorLayoutWidget_OnSaveDirty, IsDirty) == 0x000000, "Member 'UMGHudEditorLayoutWidget_OnSaveDirty::IsDirty' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.SetHudEditorScreen
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_SetHudEditorScreen final
{
public:
	class UUMGHudEditorScreen*                    Param_HudEditorScreen;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_SetHudEditorScreen) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_SetHudEditorScreen");
static_assert(sizeof(UMGHudEditorLayoutWidget_SetHudEditorScreen) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_SetHudEditorScreen");
static_assert(offsetof(UMGHudEditorLayoutWidget_SetHudEditorScreen, Param_HudEditorScreen) == 0x000000, "Member 'UMGHudEditorLayoutWidget_SetHudEditorScreen::Param_HudEditorScreen' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.SetSaveOverlapSound
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_SetSaveOverlapSound final
{
public:
	class UAkAudioEvent*                          OnSaveOverlapSound;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_SetSaveOverlapSound) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_SetSaveOverlapSound");
static_assert(sizeof(UMGHudEditorLayoutWidget_SetSaveOverlapSound) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_SetSaveOverlapSound");
static_assert(offsetof(UMGHudEditorLayoutWidget_SetSaveOverlapSound, OnSaveOverlapSound) == 0x000000, "Member 'UMGHudEditorLayoutWidget_SetSaveOverlapSound::OnSaveOverlapSound' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.SetWidgetToEdit
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_SetWidgetToEdit final
{
public:
	class UUMGDragWidget_HudEditor*               Widget;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_SetWidgetToEdit) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_SetWidgetToEdit");
static_assert(sizeof(UMGHudEditorLayoutWidget_SetWidgetToEdit) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_SetWidgetToEdit");
static_assert(offsetof(UMGHudEditorLayoutWidget_SetWidgetToEdit, Widget) == 0x000000, "Member 'UMGHudEditorLayoutWidget_SetWidgetToEdit::Widget' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.GetCurrentDragWidget
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_GetCurrentDragWidget final
{
public:
	class UUMGDragWidget_HudEditor*               ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_GetCurrentDragWidget) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_GetCurrentDragWidget");
static_assert(sizeof(UMGHudEditorLayoutWidget_GetCurrentDragWidget) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_GetCurrentDragWidget");
static_assert(offsetof(UMGHudEditorLayoutWidget_GetCurrentDragWidget, ReturnValue) == 0x000000, "Member 'UMGHudEditorLayoutWidget_GetCurrentDragWidget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UMGHudEditorLayoutWidget.GetHudEditorWrapperToEdit
// 0x0008 (0x0008 - 0x0000)
struct UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit final
{
public:
	class UCustomWidgetWrapper_HudEditor*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit) == 0x000008, "Wrong alignment on UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit");
static_assert(sizeof(UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit) == 0x000008, "Wrong size on UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit");
static_assert(offsetof(UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit, ReturnValue) == 0x000000, "Member 'UMGHudEditorLayoutWidget_GetHudEditorWrapperToEdit::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ContextualQuestComponent.Authority_DebugAddSpecialBehaviour
// 0x0010 (0x0010 - 0x0000)
struct ContextualQuestComponent_Authority_DebugAddSpecialBehaviour final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountRequired;                                    // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualQuestComponent_Authority_DebugAddSpecialBehaviour) == 0x000004, "Wrong alignment on ContextualQuestComponent_Authority_DebugAddSpecialBehaviour");
static_assert(sizeof(ContextualQuestComponent_Authority_DebugAddSpecialBehaviour) == 0x000010, "Wrong size on ContextualQuestComponent_Authority_DebugAddSpecialBehaviour");
static_assert(offsetof(ContextualQuestComponent_Authority_DebugAddSpecialBehaviour, ID) == 0x000000, "Member 'ContextualQuestComponent_Authority_DebugAddSpecialBehaviour::ID' has a wrong offset!");
static_assert(offsetof(ContextualQuestComponent_Authority_DebugAddSpecialBehaviour, AmountRequired) == 0x00000C, "Member 'ContextualQuestComponent_Authority_DebugAddSpecialBehaviour::AmountRequired' has a wrong offset!");

// Function DeadByDaylight.ContextualQuestComponent.Authority_DebugRemoveSpecialBehaviour
// 0x000C (0x000C - 0x0000)
struct ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour) == 0x000004, "Wrong alignment on ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour");
static_assert(sizeof(ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour) == 0x00000C, "Wrong size on ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour");
static_assert(offsetof(ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour, ID) == 0x000000, "Member 'ContextualQuestComponent_Authority_DebugRemoveSpecialBehaviour::ID' has a wrong offset!");

// DelegateFunction DeadByDaylight.ContextualQuestComponent.OnSpecialBehaviourSet__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ContextualQuestComponent_OnSpecialBehaviourSet__DelegateSignature final
{
public:
	class ADBDPlayer*                             DBDPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ContextualQuestComponent_OnSpecialBehaviourSet__DelegateSignature) == 0x000008, "Wrong alignment on ContextualQuestComponent_OnSpecialBehaviourSet__DelegateSignature");
static_assert(sizeof(ContextualQuestComponent_OnSpecialBehaviourSet__DelegateSignature) == 0x000008, "Wrong size on ContextualQuestComponent_OnSpecialBehaviourSet__DelegateSignature");
static_assert(offsetof(ContextualQuestComponent_OnSpecialBehaviourSet__DelegateSignature, DBDPlayer) == 0x000000, "Member 'ContextualQuestComponent_OnSpecialBehaviourSet__DelegateSignature::DBDPlayer' has a wrong offset!");

// Function DeadByDaylight.CoreHudRootWidget.ApplyConstrainedAspectRatio
// 0x0008 (0x0008 - 0x0000)
struct CoreHudRootWidget_ApplyConstrainedAspectRatio final
{
public:
	bool                                          IsConstrained;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AspectRatio;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudRootWidget_ApplyConstrainedAspectRatio) == 0x000004, "Wrong alignment on CoreHudRootWidget_ApplyConstrainedAspectRatio");
static_assert(sizeof(CoreHudRootWidget_ApplyConstrainedAspectRatio) == 0x000008, "Wrong size on CoreHudRootWidget_ApplyConstrainedAspectRatio");
static_assert(offsetof(CoreHudRootWidget_ApplyConstrainedAspectRatio, IsConstrained) == 0x000000, "Member 'CoreHudRootWidget_ApplyConstrainedAspectRatio::IsConstrained' has a wrong offset!");
static_assert(offsetof(CoreHudRootWidget_ApplyConstrainedAspectRatio, AspectRatio) == 0x000004, "Member 'CoreHudRootWidget_ApplyConstrainedAspectRatio::AspectRatio' has a wrong offset!");

// Function DeadByDaylight.CoreHudRootWidget.SetWidgetsVisibility
// 0x0001 (0x0001 - 0x0000)
struct CoreHudRootWidget_SetWidgetsVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreHudRootWidget_SetWidgetsVisibility) == 0x000001, "Wrong alignment on CoreHudRootWidget_SetWidgetsVisibility");
static_assert(sizeof(CoreHudRootWidget_SetWidgetsVisibility) == 0x000001, "Wrong size on CoreHudRootWidget_SetWidgetsVisibility");
static_assert(offsetof(CoreHudRootWidget_SetWidgetsVisibility, Visible) == 0x000000, "Member 'CoreHudRootWidget_SetWidgetsVisibility::Visible' has a wrong offset!");

// Function DeadByDaylight.DBDSurfaceTypeName.Convert
// 0x0010 (0x0010 - 0x0000)
struct DBDSurfaceTypeName_Convert final
{
public:
	EPhysicalSurface                              SurfaceType;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ReturnValue;                                       // 0x0004(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDSurfaceTypeName_Convert) == 0x000004, "Wrong alignment on DBDSurfaceTypeName_Convert");
static_assert(sizeof(DBDSurfaceTypeName_Convert) == 0x000010, "Wrong size on DBDSurfaceTypeName_Convert");
static_assert(offsetof(DBDSurfaceTypeName_Convert, SurfaceType) == 0x000000, "Member 'DBDSurfaceTypeName_Convert::SurfaceType' has a wrong offset!");
static_assert(offsetof(DBDSurfaceTypeName_Convert, ReturnValue) == 0x000004, "Member 'DBDSurfaceTypeName_Convert::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSurfaceTypeName.ConvertFromPhysicalMaterial
// 0x0018 (0x0018 - 0x0000)
struct DBDSurfaceTypeName_ConvertFromPhysicalMaterial final
{
public:
	const class UPhysicalMaterial*                Material;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0008(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDSurfaceTypeName_ConvertFromPhysicalMaterial) == 0x000008, "Wrong alignment on DBDSurfaceTypeName_ConvertFromPhysicalMaterial");
static_assert(sizeof(DBDSurfaceTypeName_ConvertFromPhysicalMaterial) == 0x000018, "Wrong size on DBDSurfaceTypeName_ConvertFromPhysicalMaterial");
static_assert(offsetof(DBDSurfaceTypeName_ConvertFromPhysicalMaterial, Material) == 0x000000, "Member 'DBDSurfaceTypeName_ConvertFromPhysicalMaterial::Material' has a wrong offset!");
static_assert(offsetof(DBDSurfaceTypeName_ConvertFromPhysicalMaterial, ReturnValue) == 0x000008, "Member 'DBDSurfaceTypeName_ConvertFromPhysicalMaterial::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSurfaceTypeName.GetSurfaceName
// 0x0018 (0x0018 - 0x0000)
struct DBDSurfaceTypeName_GetSurfaceName final
{
public:
	const class UPhysicalMaterial*                PhysicalMaterial;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDSurfaceTypeName_GetSurfaceName) == 0x000008, "Wrong alignment on DBDSurfaceTypeName_GetSurfaceName");
static_assert(sizeof(DBDSurfaceTypeName_GetSurfaceName) == 0x000018, "Wrong size on DBDSurfaceTypeName_GetSurfaceName");
static_assert(offsetof(DBDSurfaceTypeName_GetSurfaceName, PhysicalMaterial) == 0x000000, "Member 'DBDSurfaceTypeName_GetSurfaceName::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(DBDSurfaceTypeName_GetSurfaceName, ReturnValue) == 0x000008, "Member 'DBDSurfaceTypeName_GetSurfaceName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSurfaceTypeName.GetSurfaceType
// 0x0010 (0x0010 - 0x0000)
struct DBDSurfaceTypeName_GetSurfaceType final
{
public:
	const class UPhysicalMaterial*                PhysicalMaterial;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDSurfaceTypeName_GetSurfaceType) == 0x000008, "Wrong alignment on DBDSurfaceTypeName_GetSurfaceType");
static_assert(sizeof(DBDSurfaceTypeName_GetSurfaceType) == 0x000010, "Wrong size on DBDSurfaceTypeName_GetSurfaceType");
static_assert(offsetof(DBDSurfaceTypeName_GetSurfaceType, PhysicalMaterial) == 0x000000, "Member 'DBDSurfaceTypeName_GetSurfaceType::PhysicalMaterial' has a wrong offset!");
static_assert(offsetof(DBDSurfaceTypeName_GetSurfaceType, ReturnValue) == 0x000008, "Member 'DBDSurfaceTypeName_GetSurfaceType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerCameraManager.StartFadeInTimeline
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerCameraManager_StartFadeInTimeline final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerCameraManager_StartFadeInTimeline) == 0x000004, "Wrong alignment on DBDPlayerCameraManager_StartFadeInTimeline");
static_assert(sizeof(DBDPlayerCameraManager_StartFadeInTimeline) == 0x000004, "Wrong size on DBDPlayerCameraManager_StartFadeInTimeline");
static_assert(offsetof(DBDPlayerCameraManager_StartFadeInTimeline, Duration) == 0x000000, "Member 'DBDPlayerCameraManager_StartFadeInTimeline::Duration' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerCameraManager.StartFadeOutTimeline
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerCameraManager_StartFadeOutTimeline final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerCameraManager_StartFadeOutTimeline) == 0x000004, "Wrong alignment on DBDPlayerCameraManager_StartFadeOutTimeline");
static_assert(sizeof(DBDPlayerCameraManager_StartFadeOutTimeline) == 0x000004, "Wrong size on DBDPlayerCameraManager_StartFadeOutTimeline");
static_assert(offsetof(DBDPlayerCameraManager_StartFadeOutTimeline, Duration) == 0x000000, "Member 'DBDPlayerCameraManager_StartFadeOutTimeline::Duration' has a wrong offset!");

// Function DeadByDaylight.CrowBomb.TriggerTakeOff
// 0x0018 (0x0018 - 0x0000)
struct CrowBomb_TriggerTakeOff final
{
public:
	struct FVector                                TriggerLocation;                                   // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CrowBomb_TriggerTakeOff) == 0x000008, "Wrong alignment on CrowBomb_TriggerTakeOff");
static_assert(sizeof(CrowBomb_TriggerTakeOff) == 0x000018, "Wrong size on CrowBomb_TriggerTakeOff");
static_assert(offsetof(CrowBomb_TriggerTakeOff, TriggerLocation) == 0x000000, "Member 'CrowBomb_TriggerTakeOff::TriggerLocation' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Authority_AllowKilling
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_Authority_AllowKilling final
{
public:
	int32                                         NumKills;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Authority_AllowKilling) == 0x000004, "Wrong alignment on SlasherPlayer_Authority_AllowKilling");
static_assert(sizeof(SlasherPlayer_Authority_AllowKilling) == 0x000004, "Wrong size on SlasherPlayer_Authority_AllowKilling");
static_assert(offsetof(SlasherPlayer_Authority_AllowKilling, NumKills) == 0x000000, "Member 'SlasherPlayer_Authority_AllowKilling::NumKills' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Authority_SetInStalkMode
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_Authority_SetInStalkMode final
{
public:
	bool                                          StalkMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Forced;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Authority_SetInStalkMode) == 0x000001, "Wrong alignment on SlasherPlayer_Authority_SetInStalkMode");
static_assert(sizeof(SlasherPlayer_Authority_SetInStalkMode) == 0x000002, "Wrong size on SlasherPlayer_Authority_SetInStalkMode");
static_assert(offsetof(SlasherPlayer_Authority_SetInStalkMode, StalkMode) == 0x000000, "Member 'SlasherPlayer_Authority_SetInStalkMode::StalkMode' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_Authority_SetInStalkMode, Forced) == 0x000001, "Member 'SlasherPlayer_Authority_SetInStalkMode::Forced' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CancelAttackByInput
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_CancelAttackByInput final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CancelAttackByInput) == 0x000001, "Wrong alignment on SlasherPlayer_CancelAttackByInput");
static_assert(sizeof(SlasherPlayer_CancelAttackByInput) == 0x000001, "Wrong size on SlasherPlayer_CancelAttackByInput");
static_assert(offsetof(SlasherPlayer_CancelAttackByInput, ReturnValue) == 0x000000, "Member 'SlasherPlayer_CancelAttackByInput::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Client_RequestStun
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_Client_RequestStun final
{
public:
	EStunType                                     StunType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Stunner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Client_RequestStun) == 0x000008, "Wrong alignment on SlasherPlayer_Client_RequestStun");
static_assert(sizeof(SlasherPlayer_Client_RequestStun) == 0x000010, "Wrong size on SlasherPlayer_Client_RequestStun");
static_assert(offsetof(SlasherPlayer_Client_RequestStun, StunType) == 0x000000, "Member 'SlasherPlayer_Client_RequestStun::StunType' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_Client_RequestStun, Stunner) == 0x000008, "Member 'SlasherPlayer_Client_RequestStun::Stunner' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.DBD_DisplayAttackZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_DBD_DisplayAttackZones final
{
public:
	bool                                          Display;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_DBD_DisplayAttackZones) == 0x000001, "Wrong alignment on SlasherPlayer_DBD_DisplayAttackZones");
static_assert(sizeof(SlasherPlayer_DBD_DisplayAttackZones) == 0x000001, "Wrong size on SlasherPlayer_DBD_DisplayAttackZones");
static_assert(offsetof(SlasherPlayer_DBD_DisplayAttackZones, Display) == 0x000000, "Member 'SlasherPlayer_DBD_DisplayAttackZones::Display' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.DBD_MergeLockOnDamageZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_DBD_MergeLockOnDamageZones final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_DBD_MergeLockOnDamageZones) == 0x000001, "Wrong alignment on SlasherPlayer_DBD_MergeLockOnDamageZones");
static_assert(sizeof(SlasherPlayer_DBD_MergeLockOnDamageZones) == 0x000001, "Wrong size on SlasherPlayer_DBD_MergeLockOnDamageZones");
static_assert(offsetof(SlasherPlayer_DBD_MergeLockOnDamageZones, Enable) == 0x000000, "Member 'SlasherPlayer_DBD_MergeLockOnDamageZones::Enable' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.DBD_SetAttackZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_DBD_SetAttackZones final
{
public:
	EAttackZoneSet                                AttackZoneSet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_DBD_SetAttackZones) == 0x000001, "Wrong alignment on SlasherPlayer_DBD_SetAttackZones");
static_assert(sizeof(SlasherPlayer_DBD_SetAttackZones) == 0x000001, "Wrong size on SlasherPlayer_DBD_SetAttackZones");
static_assert(offsetof(SlasherPlayer_DBD_SetAttackZones, AttackZoneSet) == 0x000000, "Member 'SlasherPlayer_DBD_SetAttackZones::AttackZoneSet' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.DisplayAttackZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_DisplayAttackZones final
{
public:
	bool                                          Display;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_DisplayAttackZones) == 0x000001, "Wrong alignment on SlasherPlayer_DisplayAttackZones");
static_assert(sizeof(SlasherPlayer_DisplayAttackZones) == 0x000001, "Wrong size on SlasherPlayer_DisplayAttackZones");
static_assert(offsetof(SlasherPlayer_DisplayAttackZones, Display) == 0x000000, "Member 'SlasherPlayer_DisplayAttackZones::Display' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetAttackZonePivot
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetAttackZonePivot final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetAttackZonePivot) == 0x000008, "Wrong alignment on SlasherPlayer_GetAttackZonePivot");
static_assert(sizeof(SlasherPlayer_GetAttackZonePivot) == 0x000008, "Wrong size on SlasherPlayer_GetAttackZonePivot");
static_assert(offsetof(SlasherPlayer_GetAttackZonePivot, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetAttackZonePivot::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetCurrentRotationYaw
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetCurrentRotationYaw final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetCurrentRotationYaw) == 0x000004, "Wrong alignment on SlasherPlayer_GetCurrentRotationYaw");
static_assert(sizeof(SlasherPlayer_GetCurrentRotationYaw) == 0x000004, "Wrong size on SlasherPlayer_GetCurrentRotationYaw");
static_assert(offsetof(SlasherPlayer_GetCurrentRotationYaw, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetCurrentRotationYaw::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsCrouchAvailable_BP
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsCrouchAvailable_BP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsCrouchAvailable_BP) == 0x000001, "Wrong alignment on SlasherPlayer_IsCrouchAvailable_BP");
static_assert(sizeof(SlasherPlayer_IsCrouchAvailable_BP) == 0x000001, "Wrong size on SlasherPlayer_IsCrouchAvailable_BP");
static_assert(offsetof(SlasherPlayer_IsCrouchAvailable_BP, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsCrouchAvailable_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsIdling
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsIdling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsIdling) == 0x000001, "Wrong alignment on SlasherPlayer_IsIdling");
static_assert(sizeof(SlasherPlayer_IsIdling) == 0x000001, "Wrong size on SlasherPlayer_IsIdling");
static_assert(offsetof(SlasherPlayer_IsIdling, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsIdling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Local_CancelAttack
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Local_CancelAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Local_CancelAttack) == 0x000001, "Wrong alignment on SlasherPlayer_Local_CancelAttack");
static_assert(sizeof(SlasherPlayer_Local_CancelAttack) == 0x000001, "Wrong size on SlasherPlayer_Local_CancelAttack");
static_assert(offsetof(SlasherPlayer_Local_CancelAttack, ReturnValue) == 0x000000, "Member 'SlasherPlayer_Local_CancelAttack::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.MergeLockOnDamageZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_MergeLockOnDamageZones final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_MergeLockOnDamageZones) == 0x000001, "Wrong alignment on SlasherPlayer_MergeLockOnDamageZones");
static_assert(sizeof(SlasherPlayer_MergeLockOnDamageZones) == 0x000001, "Wrong size on SlasherPlayer_MergeLockOnDamageZones");
static_assert(offsetof(SlasherPlayer_MergeLockOnDamageZones, Enable) == 0x000000, "Member 'SlasherPlayer_MergeLockOnDamageZones::Enable' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Multicast_Cheat_SetAttackDetectionZoneSet
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet final
{
public:
	EAttackZoneSet                                AttackZoneSet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet) == 0x000001, "Wrong alignment on SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet");
static_assert(sizeof(SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet) == 0x000001, "Wrong size on SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet");
static_assert(offsetof(SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet, AttackZoneSet) == 0x000000, "Member 'SlasherPlayer_Multicast_Cheat_SetAttackDetectionZoneSet::AttackZoneSet' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Multicast_DisplayAttackZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Multicast_DisplayAttackZones final
{
public:
	bool                                          Display;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Multicast_DisplayAttackZones) == 0x000001, "Wrong alignment on SlasherPlayer_Multicast_DisplayAttackZones");
static_assert(sizeof(SlasherPlayer_Multicast_DisplayAttackZones) == 0x000001, "Wrong size on SlasherPlayer_Multicast_DisplayAttackZones");
static_assert(offsetof(SlasherPlayer_Multicast_DisplayAttackZones, Display) == 0x000000, "Member 'SlasherPlayer_Multicast_DisplayAttackZones::Display' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Multicast_MergeLockOnDamageZones
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Multicast_MergeLockOnDamageZones final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Multicast_MergeLockOnDamageZones) == 0x000001, "Wrong alignment on SlasherPlayer_Multicast_MergeLockOnDamageZones");
static_assert(sizeof(SlasherPlayer_Multicast_MergeLockOnDamageZones) == 0x000001, "Wrong size on SlasherPlayer_Multicast_MergeLockOnDamageZones");
static_assert(offsetof(SlasherPlayer_Multicast_MergeLockOnDamageZones, Enable) == 0x000000, "Member 'SlasherPlayer_Multicast_MergeLockOnDamageZones::Enable' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnAttackFinish
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnAttackFinish final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnAttackFinish) == 0x000001, "Wrong alignment on SlasherPlayer_OnAttackFinish");
static_assert(sizeof(SlasherPlayer_OnAttackFinish) == 0x000001, "Wrong size on SlasherPlayer_OnAttackFinish");
static_assert(offsetof(SlasherPlayer_OnAttackFinish, AttackType) == 0x000000, "Member 'SlasherPlayer_OnAttackFinish::AttackType' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnAttackStart
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnAttackStart final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnAttackStart) == 0x000001, "Wrong alignment on SlasherPlayer_OnAttackStart");
static_assert(sizeof(SlasherPlayer_OnAttackStart) == 0x000001, "Wrong size on SlasherPlayer_OnAttackStart");
static_assert(offsetof(SlasherPlayer_OnAttackStart, AttackType) == 0x000000, "Member 'SlasherPlayer_OnAttackStart::AttackType' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnCamperHit
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_OnCamperHit final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnCamperHit) == 0x000008, "Wrong alignment on SlasherPlayer_OnCamperHit");
static_assert(sizeof(SlasherPlayer_OnCamperHit) == 0x000008, "Wrong size on SlasherPlayer_OnCamperHit");
static_assert(offsetof(SlasherPlayer_OnCamperHit, Camper) == 0x000000, "Member 'SlasherPlayer_OnCamperHit::Camper' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnDropCamperEnd
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_OnDropCamperEnd final
{
public:
	class ADBDPlayer*                             Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnDropCamperEnd) == 0x000008, "Wrong alignment on SlasherPlayer_OnDropCamperEnd");
static_assert(sizeof(SlasherPlayer_OnDropCamperEnd) == 0x000008, "Wrong size on SlasherPlayer_OnDropCamperEnd");
static_assert(offsetof(SlasherPlayer_OnDropCamperEnd, Camper) == 0x000000, "Member 'SlasherPlayer_OnDropCamperEnd::Camper' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnIsKillingSurvivorWithMoriUpdated
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated final
{
public:
	bool                                          IsKillingSurvivorWithMori;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated) == 0x000001, "Wrong alignment on SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated");
static_assert(sizeof(SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated) == 0x000001, "Wrong size on SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated");
static_assert(offsetof(SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated, IsKillingSurvivorWithMori) == 0x000000, "Member 'SlasherPlayer_OnIsKillingSurvivorWithMoriUpdated::IsKillingSurvivorWithMori' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityBeginActivate
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnKillerAbilityBeginActivate final
{
public:
	EKillerAbilities                              KillerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityBeginActivate) == 0x000001, "Wrong alignment on SlasherPlayer_OnKillerAbilityBeginActivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityBeginActivate) == 0x000001, "Wrong size on SlasherPlayer_OnKillerAbilityBeginActivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityBeginActivate, KillerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityBeginActivate::KillerAbility' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityBeginDeactivate
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_OnKillerAbilityBeginDeactivate final
{
public:
	EKillerAbilities                              KillerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Forced;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityBeginDeactivate) == 0x000001, "Wrong alignment on SlasherPlayer_OnKillerAbilityBeginDeactivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityBeginDeactivate) == 0x000002, "Wrong size on SlasherPlayer_OnKillerAbilityBeginDeactivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityBeginDeactivate, KillerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityBeginDeactivate::KillerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityBeginDeactivate, Forced) == 0x000001, "Member 'SlasherPlayer_OnKillerAbilityBeginDeactivate::Forced' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityEndActivate
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnKillerAbilityEndActivate final
{
public:
	EKillerAbilities                              KillerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityEndActivate) == 0x000001, "Wrong alignment on SlasherPlayer_OnKillerAbilityEndActivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityEndActivate) == 0x000001, "Wrong size on SlasherPlayer_OnKillerAbilityEndActivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityEndActivate, KillerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityEndActivate::KillerAbility' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityEndDeactivate
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_OnKillerAbilityEndDeactivate final
{
public:
	EKillerAbilities                              KillerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Forced;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityEndDeactivate) == 0x000001, "Wrong alignment on SlasherPlayer_OnKillerAbilityEndDeactivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityEndDeactivate) == 0x000002, "Wrong size on SlasherPlayer_OnKillerAbilityEndDeactivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityEndDeactivate, KillerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityEndDeactivate::KillerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityEndDeactivate, Forced) == 0x000001, "Member 'SlasherPlayer_OnKillerAbilityEndDeactivate::Forced' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnKillerAbilityUpdateActivate
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_OnKillerAbilityUpdateActivate final
{
public:
	EKillerAbilities                              KillerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Percent;                                           // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnKillerAbilityUpdateActivate) == 0x000004, "Wrong alignment on SlasherPlayer_OnKillerAbilityUpdateActivate");
static_assert(sizeof(SlasherPlayer_OnKillerAbilityUpdateActivate) == 0x000008, "Wrong size on SlasherPlayer_OnKillerAbilityUpdateActivate");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityUpdateActivate, KillerAbility) == 0x000000, "Member 'SlasherPlayer_OnKillerAbilityUpdateActivate::KillerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnKillerAbilityUpdateActivate, Percent) == 0x000004, "Member 'SlasherPlayer_OnKillerAbilityUpdateActivate::Percent' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnLoudNoiseTriggered
// 0x0038 (0x0038 - 0x0000)
struct SlasherPlayer_OnLoudNoiseTriggered final
{
public:
	class AActor*                                 Originator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InstigatingActor;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldTrack;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudibleRange;                                      // 0x002C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsQuickAction;                                     // 0x0030(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeceivingNoise;                                  // 0x0031(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_OnLoudNoiseTriggered) == 0x000008, "Wrong alignment on SlasherPlayer_OnLoudNoiseTriggered");
static_assert(sizeof(SlasherPlayer_OnLoudNoiseTriggered) == 0x000038, "Wrong size on SlasherPlayer_OnLoudNoiseTriggered");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, Originator) == 0x000000, "Member 'SlasherPlayer_OnLoudNoiseTriggered::Originator' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, InstigatingActor) == 0x000008, "Member 'SlasherPlayer_OnLoudNoiseTriggered::InstigatingActor' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, Location) == 0x000010, "Member 'SlasherPlayer_OnLoudNoiseTriggered::Location' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, ShouldTrack) == 0x000028, "Member 'SlasherPlayer_OnLoudNoiseTriggered::ShouldTrack' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, AudibleRange) == 0x00002C, "Member 'SlasherPlayer_OnLoudNoiseTriggered::AudibleRange' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, IsQuickAction) == 0x000030, "Member 'SlasherPlayer_OnLoudNoiseTriggered::IsQuickAction' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_OnLoudNoiseTriggered, IsDeceivingNoise) == 0x000031, "Member 'SlasherPlayer_OnLoudNoiseTriggered::IsDeceivingNoise' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnPerformingChargableInteraction
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_OnPerformingChargableInteraction final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnPerformingChargableInteraction) == 0x000004, "Wrong alignment on SlasherPlayer_OnPerformingChargableInteraction");
static_assert(sizeof(SlasherPlayer_OnPerformingChargableInteraction) == 0x000004, "Wrong size on SlasherPlayer_OnPerformingChargableInteraction");
static_assert(offsetof(SlasherPlayer_OnPerformingChargableInteraction, Progress) == 0x000000, "Member 'SlasherPlayer_OnPerformingChargableInteraction::Progress' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnStalkModeChanged
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnStalkModeChanged final
{
public:
	bool                                          StalkMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnStalkModeChanged) == 0x000001, "Wrong alignment on SlasherPlayer_OnStalkModeChanged");
static_assert(sizeof(SlasherPlayer_OnStalkModeChanged) == 0x000001, "Wrong size on SlasherPlayer_OnStalkModeChanged");
static_assert(offsetof(SlasherPlayer_OnStalkModeChanged, StalkMode) == 0x000000, "Member 'SlasherPlayer_OnStalkModeChanged::StalkMode' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnStalkModeChangedCosmetic
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnStalkModeChangedCosmetic final
{
public:
	bool                                          StalkMode;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnStalkModeChangedCosmetic) == 0x000001, "Wrong alignment on SlasherPlayer_OnStalkModeChangedCosmetic");
static_assert(sizeof(SlasherPlayer_OnStalkModeChangedCosmetic) == 0x000001, "Wrong size on SlasherPlayer_OnStalkModeChangedCosmetic");
static_assert(offsetof(SlasherPlayer_OnStalkModeChangedCosmetic, StalkMode) == 0x000000, "Member 'SlasherPlayer_OnStalkModeChangedCosmetic::StalkMode' has a wrong offset!");

// DelegateFunction DeadByDaylight.SlasherPlayer.OnStalkModeChangedEvent__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnStalkModeChangedEvent__DelegateSignature final
{
public:
	bool                                          Param_IsInStalkMode;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnStalkModeChangedEvent__DelegateSignature) == 0x000001, "Wrong alignment on SlasherPlayer_OnStalkModeChangedEvent__DelegateSignature");
static_assert(sizeof(SlasherPlayer_OnStalkModeChangedEvent__DelegateSignature) == 0x000001, "Wrong size on SlasherPlayer_OnStalkModeChangedEvent__DelegateSignature");
static_assert(offsetof(SlasherPlayer_OnStalkModeChangedEvent__DelegateSignature, Param_IsInStalkMode) == 0x000000, "Member 'SlasherPlayer_OnStalkModeChangedEvent__DelegateSignature::Param_IsInStalkMode' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.OnStealthChanged
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_OnStealthChanged final
{
public:
	bool                                          Stealth;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_OnStealthChanged) == 0x000001, "Wrong alignment on SlasherPlayer_OnStealthChanged");
static_assert(sizeof(SlasherPlayer_OnStealthChanged) == 0x000001, "Wrong size on SlasherPlayer_OnStealthChanged");
static_assert(offsetof(SlasherPlayer_OnStealthChanged, Stealth) == 0x000000, "Member 'SlasherPlayer_OnStealthChanged::Stealth' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Server_SendActionKillerInput
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Server_SendActionKillerInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Server_SendActionKillerInput) == 0x000001, "Wrong alignment on SlasherPlayer_Server_SendActionKillerInput");
static_assert(sizeof(SlasherPlayer_Server_SendActionKillerInput) == 0x000001, "Wrong size on SlasherPlayer_Server_SendActionKillerInput");
static_assert(offsetof(SlasherPlayer_Server_SendActionKillerInput, Pressed) == 0x000000, "Member 'SlasherPlayer_Server_SendActionKillerInput::Pressed' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.Server_SendAttackInput
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_Server_SendAttackInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_Server_SendAttackInput) == 0x000001, "Wrong alignment on SlasherPlayer_Server_SendAttackInput");
static_assert(sizeof(SlasherPlayer_Server_SendAttackInput) == 0x000001, "Wrong size on SlasherPlayer_Server_SendAttackInput");
static_assert(offsetof(SlasherPlayer_Server_SendAttackInput, Pressed) == 0x000000, "Member 'SlasherPlayer_Server_SendAttackInput::Pressed' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetAttackDetectionZoneSet
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_SetAttackDetectionZoneSet final
{
public:
	EAttackZoneSet                                AttackZoneSet;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetAttackDetectionZoneSet) == 0x000001, "Wrong alignment on SlasherPlayer_SetAttackDetectionZoneSet");
static_assert(sizeof(SlasherPlayer_SetAttackDetectionZoneSet) == 0x000001, "Wrong size on SlasherPlayer_SetAttackDetectionZoneSet");
static_assert(offsetof(SlasherPlayer_SetAttackDetectionZoneSet, AttackZoneSet) == 0x000000, "Member 'SlasherPlayer_SetAttackDetectionZoneSet::AttackZoneSet' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetAttackZonePivot
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_SetAttackZonePivot final
{
public:
	class USceneComponent*                        AttackZonePivot;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetAttackZonePivot) == 0x000008, "Wrong alignment on SlasherPlayer_SetAttackZonePivot");
static_assert(sizeof(SlasherPlayer_SetAttackZonePivot) == 0x000008, "Wrong size on SlasherPlayer_SetAttackZonePivot");
static_assert(offsetof(SlasherPlayer_SetAttackZonePivot, AttackZonePivot) == 0x000000, "Member 'SlasherPlayer_SetAttackZonePivot::AttackZonePivot' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetCarriedCamper
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_SetCarriedCamper final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetCarriedCamper) == 0x000008, "Wrong alignment on SlasherPlayer_SetCarriedCamper");
static_assert(sizeof(SlasherPlayer_SetCarriedCamper) == 0x000008, "Wrong size on SlasherPlayer_SetCarriedCamper");
static_assert(offsetof(SlasherPlayer_SetCarriedCamper, Camper) == 0x000000, "Member 'SlasherPlayer_SetCarriedCamper::Camper' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetIsCloaked
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_SetIsCloaked final
{
public:
	bool                                          Param_IsCloaked;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Forced;                                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetIsCloaked) == 0x000001, "Wrong alignment on SlasherPlayer_SetIsCloaked");
static_assert(sizeof(SlasherPlayer_SetIsCloaked) == 0x000002, "Wrong size on SlasherPlayer_SetIsCloaked");
static_assert(offsetof(SlasherPlayer_SetIsCloaked, Param_IsCloaked) == 0x000000, "Member 'SlasherPlayer_SetIsCloaked::Param_IsCloaked' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_SetIsCloaked, Forced) == 0x000001, "Member 'SlasherPlayer_SetIsCloaked::Forced' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetIsHookingSurvivor
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_SetIsHookingSurvivor final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetIsHookingSurvivor) == 0x000001, "Wrong alignment on SlasherPlayer_SetIsHookingSurvivor");
static_assert(sizeof(SlasherPlayer_SetIsHookingSurvivor) == 0x000001, "Wrong size on SlasherPlayer_SetIsHookingSurvivor");
static_assert(offsetof(SlasherPlayer_SetIsHookingSurvivor, Value) == 0x000000, "Member 'SlasherPlayer_SetIsHookingSurvivor::Value' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetIsKilling
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_SetIsKilling final
{
public:
	bool                                          IsKilling;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetIsKilling) == 0x000001, "Wrong alignment on SlasherPlayer_SetIsKilling");
static_assert(sizeof(SlasherPlayer_SetIsKilling) == 0x000001, "Wrong size on SlasherPlayer_SetIsKilling");
static_assert(offsetof(SlasherPlayer_SetIsKilling, IsKilling) == 0x000000, "Member 'SlasherPlayer_SetIsKilling::IsKilling' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetLightIntensity
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_SetLightIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetLightIntensity) == 0x000004, "Wrong alignment on SlasherPlayer_SetLightIntensity");
static_assert(sizeof(SlasherPlayer_SetLightIntensity) == 0x000004, "Wrong size on SlasherPlayer_SetLightIntensity");
static_assert(offsetof(SlasherPlayer_SetLightIntensity, Intensity) == 0x000000, "Member 'SlasherPlayer_SetLightIntensity::Intensity' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetStalkTierWalkSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_SetStalkTierWalkSpeedMultiplier final
{
public:
	float                                         StalkTierWalkSpeedMultiplier;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetStalkTierWalkSpeedMultiplier) == 0x000004, "Wrong alignment on SlasherPlayer_SetStalkTierWalkSpeedMultiplier");
static_assert(sizeof(SlasherPlayer_SetStalkTierWalkSpeedMultiplier) == 0x000004, "Wrong size on SlasherPlayer_SetStalkTierWalkSpeedMultiplier");
static_assert(offsetof(SlasherPlayer_SetStalkTierWalkSpeedMultiplier, StalkTierWalkSpeedMultiplier) == 0x000000, "Member 'SlasherPlayer_SetStalkTierWalkSpeedMultiplier::StalkTierWalkSpeedMultiplier' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.SetSurvivorBeingKilled
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_SetSurvivorBeingKilled final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_SetSurvivorBeingKilled) == 0x000008, "Wrong alignment on SlasherPlayer_SetSurvivorBeingKilled");
static_assert(sizeof(SlasherPlayer_SetSurvivorBeingKilled) == 0x000008, "Wrong size on SlasherPlayer_SetSurvivorBeingKilled");
static_assert(offsetof(SlasherPlayer_SetSurvivorBeingKilled, Survivor) == 0x000000, "Member 'SlasherPlayer_SetSurvivorBeingKilled::Survivor' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.UpdateRageTierEffect
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_UpdateRageTierEffect final
{
public:
	int32                                         PreviousTier;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentTier;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_UpdateRageTierEffect) == 0x000004, "Wrong alignment on SlasherPlayer_UpdateRageTierEffect");
static_assert(sizeof(SlasherPlayer_UpdateRageTierEffect) == 0x000008, "Wrong size on SlasherPlayer_UpdateRageTierEffect");
static_assert(offsetof(SlasherPlayer_UpdateRageTierEffect, PreviousTier) == 0x000000, "Member 'SlasherPlayer_UpdateRageTierEffect::PreviousTier' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_UpdateRageTierEffect, CurrentTier) == 0x000004, "Member 'SlasherPlayer_UpdateRageTierEffect::CurrentTier' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanAffectLocalPlayer
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_CanAffectLocalPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanAffectLocalPlayer) == 0x000001, "Wrong alignment on SlasherPlayer_CanAffectLocalPlayer");
static_assert(sizeof(SlasherPlayer_CanAffectLocalPlayer) == 0x000001, "Wrong size on SlasherPlayer_CanAffectLocalPlayer");
static_assert(offsetof(SlasherPlayer_CanAffectLocalPlayer, ReturnValue) == 0x000000, "Member 'SlasherPlayer_CanAffectLocalPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanAttack
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_CanAttack final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanAttack) == 0x000001, "Wrong alignment on SlasherPlayer_CanAttack");
static_assert(sizeof(SlasherPlayer_CanAttack) == 0x000002, "Wrong size on SlasherPlayer_CanAttack");
static_assert(offsetof(SlasherPlayer_CanAttack, AttackType) == 0x000000, "Member 'SlasherPlayer_CanAttack::AttackType' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_CanAttack, ReturnValue) == 0x000001, "Member 'SlasherPlayer_CanAttack::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanAttack_BP
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_CanAttack_BP final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanAttack_BP) == 0x000001, "Wrong alignment on SlasherPlayer_CanAttack_BP");
static_assert(sizeof(SlasherPlayer_CanAttack_BP) == 0x000002, "Wrong size on SlasherPlayer_CanAttack_BP");
static_assert(offsetof(SlasherPlayer_CanAttack_BP, AttackType) == 0x000000, "Member 'SlasherPlayer_CanAttack_BP::AttackType' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_CanAttack_BP, ReturnValue) == 0x000001, "Member 'SlasherPlayer_CanAttack_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanGainRage
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_CanGainRage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanGainRage) == 0x000001, "Wrong alignment on SlasherPlayer_CanGainRage");
static_assert(sizeof(SlasherPlayer_CanGainRage) == 0x000001, "Wrong size on SlasherPlayer_CanGainRage");
static_assert(offsetof(SlasherPlayer_CanGainRage, ReturnValue) == 0x000000, "Member 'SlasherPlayer_CanGainRage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanPerformKillerAbility
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_CanPerformKillerAbility final
{
public:
	EKillerAbilities                              KillerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanPerformKillerAbility) == 0x000001, "Wrong alignment on SlasherPlayer_CanPerformKillerAbility");
static_assert(sizeof(SlasherPlayer_CanPerformKillerAbility) == 0x000002, "Wrong size on SlasherPlayer_CanPerformKillerAbility");
static_assert(offsetof(SlasherPlayer_CanPerformKillerAbility, KillerAbility) == 0x000000, "Member 'SlasherPlayer_CanPerformKillerAbility::KillerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_CanPerformKillerAbility, ReturnValue) == 0x000001, "Member 'SlasherPlayer_CanPerformKillerAbility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.CanSlashAttack_BP
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_CanSlashAttack_BP final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_CanSlashAttack_BP) == 0x000001, "Wrong alignment on SlasherPlayer_CanSlashAttack_BP");
static_assert(sizeof(SlasherPlayer_CanSlashAttack_BP) == 0x000001, "Wrong size on SlasherPlayer_CanSlashAttack_BP");
static_assert(offsetof(SlasherPlayer_CanSlashAttack_BP, ReturnValue) == 0x000000, "Member 'SlasherPlayer_CanSlashAttack_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetAnimDirection
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetAnimDirection final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetAnimDirection) == 0x000004, "Wrong alignment on SlasherPlayer_GetAnimDirection");
static_assert(sizeof(SlasherPlayer_GetAnimDirection) == 0x000004, "Wrong size on SlasherPlayer_GetAnimDirection");
static_assert(offsetof(SlasherPlayer_GetAnimDirection, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetAnimDirection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetBlindedPercent
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetBlindedPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetBlindedPercent) == 0x000004, "Wrong alignment on SlasherPlayer_GetBlindedPercent");
static_assert(sizeof(SlasherPlayer_GetBlindedPercent) == 0x000004, "Wrong size on SlasherPlayer_GetBlindedPercent");
static_assert(offsetof(SlasherPlayer_GetBlindedPercent, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetBlindedPercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetCarriedCamper
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetCarriedCamper final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetCarriedCamper) == 0x000008, "Wrong alignment on SlasherPlayer_GetCarriedCamper");
static_assert(sizeof(SlasherPlayer_GetCarriedCamper) == 0x000008, "Wrong size on SlasherPlayer_GetCarriedCamper");
static_assert(offsetof(SlasherPlayer_GetCarriedCamper, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetCarriedCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetCharacterCustomAnimTags
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_GetCharacterCustomAnimTags final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetCharacterCustomAnimTags) == 0x000008, "Wrong alignment on SlasherPlayer_GetCharacterCustomAnimTags");
static_assert(sizeof(SlasherPlayer_GetCharacterCustomAnimTags) == 0x000010, "Wrong size on SlasherPlayer_GetCharacterCustomAnimTags");
static_assert(offsetof(SlasherPlayer_GetCharacterCustomAnimTags, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetCharacterCustomAnimTags::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetChaserCharacterComponent
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetChaserCharacterComponent final
{
public:
	class UChaserCharacterComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetChaserCharacterComponent) == 0x000008, "Wrong alignment on SlasherPlayer_GetChaserCharacterComponent");
static_assert(sizeof(SlasherPlayer_GetChaserCharacterComponent) == 0x000008, "Wrong size on SlasherPlayer_GetChaserCharacterComponent");
static_assert(offsetof(SlasherPlayer_GetChaserCharacterComponent, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetChaserCharacterComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetIsAttacking
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_GetIsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetIsAttacking) == 0x000001, "Wrong alignment on SlasherPlayer_GetIsAttacking");
static_assert(sizeof(SlasherPlayer_GetIsAttacking) == 0x000001, "Wrong size on SlasherPlayer_GetIsAttacking");
static_assert(offsetof(SlasherPlayer_GetIsAttacking, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetIsAttacking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetKillerCarryAnimWeight
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_GetKillerCarryAnimWeight final
{
public:
	EKillerCarryAnimWeight                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetKillerCarryAnimWeight) == 0x000001, "Wrong alignment on SlasherPlayer_GetKillerCarryAnimWeight");
static_assert(sizeof(SlasherPlayer_GetKillerCarryAnimWeight) == 0x000001, "Wrong size on SlasherPlayer_GetKillerCarryAnimWeight");
static_assert(offsetof(SlasherPlayer_GetKillerCarryAnimWeight, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetKillerCarryAnimWeight::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetLightIntensity
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetLightIntensity final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetLightIntensity) == 0x000004, "Wrong alignment on SlasherPlayer_GetLightIntensity");
static_assert(sizeof(SlasherPlayer_GetLightIntensity) == 0x000004, "Wrong size on SlasherPlayer_GetLightIntensity");
static_assert(offsetof(SlasherPlayer_GetLightIntensity, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetLightIntensity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetLookRotation
// 0x0018 (0x0018 - 0x0000)
struct SlasherPlayer_GetLookRotation final
{
public:
	struct FRotator                               ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetLookRotation) == 0x000008, "Wrong alignment on SlasherPlayer_GetLookRotation");
static_assert(sizeof(SlasherPlayer_GetLookRotation) == 0x000018, "Wrong size on SlasherPlayer_GetLookRotation");
static_assert(offsetof(SlasherPlayer_GetLookRotation, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetLookRotation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetObsessionTarget
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetObsessionTarget final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetObsessionTarget) == 0x000008, "Wrong alignment on SlasherPlayer_GetObsessionTarget");
static_assert(sizeof(SlasherPlayer_GetObsessionTarget) == 0x000008, "Wrong size on SlasherPlayer_GetObsessionTarget");
static_assert(offsetof(SlasherPlayer_GetObsessionTarget, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetObsessionTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetPlayerDropOffPoint
// 0x0018 (0x0018 - 0x0000)
struct SlasherPlayer_GetPlayerDropOffPoint final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetPlayerDropOffPoint) == 0x000008, "Wrong alignment on SlasherPlayer_GetPlayerDropOffPoint");
static_assert(sizeof(SlasherPlayer_GetPlayerDropOffPoint) == 0x000018, "Wrong size on SlasherPlayer_GetPlayerDropOffPoint");
static_assert(offsetof(SlasherPlayer_GetPlayerDropOffPoint, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetPlayerDropOffPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetPresenceTag
// 0x000C (0x000C - 0x0000)
struct SlasherPlayer_GetPresenceTag final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetPresenceTag) == 0x000004, "Wrong alignment on SlasherPlayer_GetPresenceTag");
static_assert(sizeof(SlasherPlayer_GetPresenceTag) == 0x00000C, "Wrong size on SlasherPlayer_GetPresenceTag");
static_assert(offsetof(SlasherPlayer_GetPresenceTag, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetPresenceTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetRageTier
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetRageTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetRageTier) == 0x000004, "Wrong alignment on SlasherPlayer_GetRageTier");
static_assert(sizeof(SlasherPlayer_GetRageTier) == 0x000004, "Wrong size on SlasherPlayer_GetRageTier");
static_assert(offsetof(SlasherPlayer_GetRageTier, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetRageTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetSlasherMovement
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetSlasherMovement final
{
public:
	class USlasherMovementComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetSlasherMovement) == 0x000008, "Wrong alignment on SlasherPlayer_GetSlasherMovement");
static_assert(sizeof(SlasherPlayer_GetSlasherMovement) == 0x000008, "Wrong size on SlasherPlayer_GetSlasherMovement");
static_assert(offsetof(SlasherPlayer_GetSlasherMovement, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetSlasherMovement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetStalkTierWalkSpeedMultiplier
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetStalkTierWalkSpeedMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetStalkTierWalkSpeedMultiplier) == 0x000004, "Wrong alignment on SlasherPlayer_GetStalkTierWalkSpeedMultiplier");
static_assert(sizeof(SlasherPlayer_GetStalkTierWalkSpeedMultiplier) == 0x000004, "Wrong size on SlasherPlayer_GetStalkTierWalkSpeedMultiplier");
static_assert(offsetof(SlasherPlayer_GetStalkTierWalkSpeedMultiplier, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetStalkTierWalkSpeedMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetStealthRatio
// 0x0004 (0x0004 - 0x0000)
struct SlasherPlayer_GetStealthRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetStealthRatio) == 0x000004, "Wrong alignment on SlasherPlayer_GetStealthRatio");
static_assert(sizeof(SlasherPlayer_GetStealthRatio) == 0x000004, "Wrong size on SlasherPlayer_GetStealthRatio");
static_assert(offsetof(SlasherPlayer_GetStealthRatio, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetStealthRatio::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.GetSurvivorBeingKilled
// 0x0008 (0x0008 - 0x0000)
struct SlasherPlayer_GetSurvivorBeingKilled final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_GetSurvivorBeingKilled) == 0x000008, "Wrong alignment on SlasherPlayer_GetSurvivorBeingKilled");
static_assert(sizeof(SlasherPlayer_GetSurvivorBeingKilled) == 0x000008, "Wrong size on SlasherPlayer_GetSurvivorBeingKilled");
static_assert(offsetof(SlasherPlayer_GetSurvivorBeingKilled, ReturnValue) == 0x000000, "Member 'SlasherPlayer_GetSurvivorBeingKilled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.HasKillerAbility
// 0x0002 (0x0002 - 0x0000)
struct SlasherPlayer_HasKillerAbility final
{
public:
	EKillerAbilities                              KillerAbility;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_HasKillerAbility) == 0x000001, "Wrong alignment on SlasherPlayer_HasKillerAbility");
static_assert(sizeof(SlasherPlayer_HasKillerAbility) == 0x000002, "Wrong size on SlasherPlayer_HasKillerAbility");
static_assert(offsetof(SlasherPlayer_HasKillerAbility, KillerAbility) == 0x000000, "Member 'SlasherPlayer_HasKillerAbility::KillerAbility' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_HasKillerAbility, ReturnValue) == 0x000001, "Member 'SlasherPlayer_HasKillerAbility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.HasPreLevelGenerationModifier
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_HasPreLevelGenerationModifier final
{
public:
	class FName                                   ModifierID;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_HasPreLevelGenerationModifier) == 0x000004, "Wrong alignment on SlasherPlayer_HasPreLevelGenerationModifier");
static_assert(sizeof(SlasherPlayer_HasPreLevelGenerationModifier) == 0x000010, "Wrong size on SlasherPlayer_HasPreLevelGenerationModifier");
static_assert(offsetof(SlasherPlayer_HasPreLevelGenerationModifier, ModifierID) == 0x000000, "Member 'SlasherPlayer_HasPreLevelGenerationModifier::ModifierID' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_HasPreLevelGenerationModifier, ReturnValue) == 0x00000C, "Member 'SlasherPlayer_HasPreLevelGenerationModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsAllowedToKill
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_IsAllowedToKill final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_IsAllowedToKill) == 0x000008, "Wrong alignment on SlasherPlayer_IsAllowedToKill");
static_assert(sizeof(SlasherPlayer_IsAllowedToKill) == 0x000010, "Wrong size on SlasherPlayer_IsAllowedToKill");
static_assert(offsetof(SlasherPlayer_IsAllowedToKill, Survivor) == 0x000000, "Member 'SlasherPlayer_IsAllowedToKill::Survivor' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_IsAllowedToKill, ReturnValue) == 0x000008, "Member 'SlasherPlayer_IsAllowedToKill::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsCarrying
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsCarrying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsCarrying) == 0x000001, "Wrong alignment on SlasherPlayer_IsCarrying");
static_assert(sizeof(SlasherPlayer_IsCarrying) == 0x000001, "Wrong size on SlasherPlayer_IsCarrying");
static_assert(offsetof(SlasherPlayer_IsCarrying, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsCarrying::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsCloaking
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsCloaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsCloaking) == 0x000001, "Wrong alignment on SlasherPlayer_IsCloaking");
static_assert(sizeof(SlasherPlayer_IsCloaking) == 0x000001, "Wrong size on SlasherPlayer_IsCloaking");
static_assert(offsetof(SlasherPlayer_IsCloaking, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsCloaking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsHooking
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsHooking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsHooking) == 0x000001, "Wrong alignment on SlasherPlayer_IsHooking");
static_assert(sizeof(SlasherPlayer_IsHooking) == 0x000001, "Wrong size on SlasherPlayer_IsHooking");
static_assert(offsetof(SlasherPlayer_IsHooking, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsHooking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsImmuneToObservingPlayerDetection
// 0x0010 (0x0010 - 0x0000)
struct SlasherPlayer_IsImmuneToObservingPlayerDetection final
{
public:
	const class ADBDPlayer*                       ObservingPlayer;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SlasherPlayer_IsImmuneToObservingPlayerDetection) == 0x000008, "Wrong alignment on SlasherPlayer_IsImmuneToObservingPlayerDetection");
static_assert(sizeof(SlasherPlayer_IsImmuneToObservingPlayerDetection) == 0x000010, "Wrong size on SlasherPlayer_IsImmuneToObservingPlayerDetection");
static_assert(offsetof(SlasherPlayer_IsImmuneToObservingPlayerDetection, ObservingPlayer) == 0x000000, "Member 'SlasherPlayer_IsImmuneToObservingPlayerDetection::ObservingPlayer' has a wrong offset!");
static_assert(offsetof(SlasherPlayer_IsImmuneToObservingPlayerDetection, ReturnValue) == 0x000008, "Member 'SlasherPlayer_IsImmuneToObservingPlayerDetection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsInterruptBlocked
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsInterruptBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsInterruptBlocked) == 0x000001, "Wrong alignment on SlasherPlayer_IsInterruptBlocked");
static_assert(sizeof(SlasherPlayer_IsInterruptBlocked) == 0x000001, "Wrong size on SlasherPlayer_IsInterruptBlocked");
static_assert(offsetof(SlasherPlayer_IsInterruptBlocked, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsInterruptBlocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsKilling
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsKilling final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsKilling) == 0x000001, "Wrong alignment on SlasherPlayer_IsKilling");
static_assert(sizeof(SlasherPlayer_IsKilling) == 0x000001, "Wrong size on SlasherPlayer_IsKilling");
static_assert(offsetof(SlasherPlayer_IsKilling, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsKilling::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsStunned
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsStunned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsStunned) == 0x000001, "Wrong alignment on SlasherPlayer_IsStunned");
static_assert(sizeof(SlasherPlayer_IsStunned) == 0x000001, "Wrong size on SlasherPlayer_IsStunned");
static_assert(offsetof(SlasherPlayer_IsStunned, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsStunned::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.IsUncloaking
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_IsUncloaking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_IsUncloaking) == 0x000001, "Wrong alignment on SlasherPlayer_IsUncloaking");
static_assert(sizeof(SlasherPlayer_IsUncloaking) == 0x000001, "Wrong size on SlasherPlayer_IsUncloaking");
static_assert(offsetof(SlasherPlayer_IsUncloaking, ReturnValue) == 0x000000, "Member 'SlasherPlayer_IsUncloaking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.ShouldApplyBloodlustSpeedModifier
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_ShouldApplyBloodlustSpeedModifier final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_ShouldApplyBloodlustSpeedModifier) == 0x000001, "Wrong alignment on SlasherPlayer_ShouldApplyBloodlustSpeedModifier");
static_assert(sizeof(SlasherPlayer_ShouldApplyBloodlustSpeedModifier) == 0x000001, "Wrong size on SlasherPlayer_ShouldApplyBloodlustSpeedModifier");
static_assert(offsetof(SlasherPlayer_ShouldApplyBloodlustSpeedModifier, ReturnValue) == 0x000000, "Member 'SlasherPlayer_ShouldApplyBloodlustSpeedModifier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlasherPlayer.WasRecentlyCloaked
// 0x0001 (0x0001 - 0x0000)
struct SlasherPlayer_WasRecentlyCloaked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherPlayer_WasRecentlyCloaked) == 0x000001, "Wrong alignment on SlasherPlayer_WasRecentlyCloaked");
static_assert(sizeof(SlasherPlayer_WasRecentlyCloaked) == 0x000001, "Wrong size on SlasherPlayer_WasRecentlyCloaked");
static_assert(offsetof(SlasherPlayer_WasRecentlyCloaked, ReturnValue) == 0x000000, "Member 'SlasherPlayer_WasRecentlyCloaked::ReturnValue' has a wrong offset!");

// DelegateFunction DeadByDaylight.CustomizedAudioComponent.OutfitCustomizedAudioChangedDelegate__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct CustomizedAudioComponent_OutfitCustomizedAudioChangedDelegate__DelegateSignature final
{
public:
	class FName                                   OutfitAudioStateCollection;                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedAudioComponent_OutfitCustomizedAudioChangedDelegate__DelegateSignature) == 0x000004, "Wrong alignment on CustomizedAudioComponent_OutfitCustomizedAudioChangedDelegate__DelegateSignature");
static_assert(sizeof(CustomizedAudioComponent_OutfitCustomizedAudioChangedDelegate__DelegateSignature) == 0x00000C, "Wrong size on CustomizedAudioComponent_OutfitCustomizedAudioChangedDelegate__DelegateSignature");
static_assert(offsetof(CustomizedAudioComponent_OutfitCustomizedAudioChangedDelegate__DelegateSignature, OutfitAudioStateCollection) == 0x000000, "Member 'CustomizedAudioComponent_OutfitCustomizedAudioChangedDelegate__DelegateSignature::OutfitAudioStateCollection' has a wrong offset!");

// Function DeadByDaylight.CustomizedAudioComponent.GetAudioSwitchState
// 0x0018 (0x0018 - 0x0000)
struct CustomizedAudioComponent_GetAudioSwitchState final
{
public:
	EAudioCustomizationCategory                   AudioCustomizationCategory;                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedAudioComponent_GetAudioSwitchState) == 0x000008, "Wrong alignment on CustomizedAudioComponent_GetAudioSwitchState");
static_assert(sizeof(CustomizedAudioComponent_GetAudioSwitchState) == 0x000018, "Wrong size on CustomizedAudioComponent_GetAudioSwitchState");
static_assert(offsetof(CustomizedAudioComponent_GetAudioSwitchState, AudioCustomizationCategory) == 0x000000, "Member 'CustomizedAudioComponent_GetAudioSwitchState::AudioCustomizationCategory' has a wrong offset!");
static_assert(offsetof(CustomizedAudioComponent_GetAudioSwitchState, ReturnValue) == 0x000008, "Member 'CustomizedAudioComponent_GetAudioSwitchState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedAudioComponent.GetOutfitCustomizedAudioCollectionState
// 0x000C (0x000C - 0x0000)
struct CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState) == 0x000004, "Wrong alignment on CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState");
static_assert(sizeof(CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState) == 0x00000C, "Wrong size on CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState");
static_assert(offsetof(CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState, ReturnValue) == 0x000000, "Member 'CustomizedAudioComponent_GetOutfitCustomizedAudioCollectionState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.CopyCustomization
// 0x0008 (0x0008 - 0x0000)
struct CustomizedSkeletalMesh_CopyCustomization final
{
public:
	const class UCustomizedSkeletalMesh*          CopyFrom;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_CopyCustomization) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_CopyCustomization");
static_assert(sizeof(CustomizedSkeletalMesh_CopyCustomization) == 0x000008, "Wrong size on CustomizedSkeletalMesh_CopyCustomization");
static_assert(offsetof(CustomizedSkeletalMesh_CopyCustomization, CopyFrom) == 0x000000, "Member 'CustomizedSkeletalMesh_CopyCustomization::CopyFrom' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.GetMeshOwner
// 0x0008 (0x0008 - 0x0000)
struct CustomizedSkeletalMesh_GetMeshOwner final
{
public:
	class USkinnedMeshComponent*                  ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_GetMeshOwner) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_GetMeshOwner");
static_assert(sizeof(CustomizedSkeletalMesh_GetMeshOwner) == 0x000008, "Wrong size on CustomizedSkeletalMesh_GetMeshOwner");
static_assert(offsetof(CustomizedSkeletalMesh_GetMeshOwner, ReturnValue) == 0x000000, "Member 'CustomizedSkeletalMesh_GetMeshOwner::ReturnValue' has a wrong offset!");

// DelegateFunction DeadByDaylight.CustomizedSkeletalMesh.OnMeshSwitchEventBP__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct CustomizedSkeletalMesh_OnMeshSwitchEventBP__DelegateSignature final
{
public:
	ECustomizationCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_OnMeshSwitchEventBP__DelegateSignature) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_OnMeshSwitchEventBP__DelegateSignature");
static_assert(sizeof(CustomizedSkeletalMesh_OnMeshSwitchEventBP__DelegateSignature) == 0x000010, "Wrong size on CustomizedSkeletalMesh_OnMeshSwitchEventBP__DelegateSignature");
static_assert(offsetof(CustomizedSkeletalMesh_OnMeshSwitchEventBP__DelegateSignature, Category) == 0x000000, "Member 'CustomizedSkeletalMesh_OnMeshSwitchEventBP__DelegateSignature::Category' has a wrong offset!");
static_assert(offsetof(CustomizedSkeletalMesh_OnMeshSwitchEventBP__DelegateSignature, Mesh) == 0x000008, "Member 'CustomizedSkeletalMesh_OnMeshSwitchEventBP__DelegateSignature::Mesh' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetAllAccessoriesVisibility
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_SetAllAccessoriesVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetAllAccessoriesVisibility) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetAllAccessoriesVisibility");
static_assert(sizeof(CustomizedSkeletalMesh_SetAllAccessoriesVisibility) == 0x000001, "Wrong size on CustomizedSkeletalMesh_SetAllAccessoriesVisibility");
static_assert(offsetof(CustomizedSkeletalMesh_SetAllAccessoriesVisibility, Visible) == 0x000000, "Member 'CustomizedSkeletalMesh_SetAllAccessoriesVisibility::Visible' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetAllVfxsVisibility
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_SetAllVfxsVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetAllVfxsVisibility) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetAllVfxsVisibility");
static_assert(sizeof(CustomizedSkeletalMesh_SetAllVfxsVisibility) == 0x000001, "Wrong size on CustomizedSkeletalMesh_SetAllVfxsVisibility");
static_assert(offsetof(CustomizedSkeletalMesh_SetAllVfxsVisibility, Visible) == 0x000000, "Member 'CustomizedSkeletalMesh_SetAllVfxsVisibility::Visible' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetCastShadow
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_SetCastShadow final
{
public:
	bool                                          CastShadow;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetCastShadow) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetCastShadow");
static_assert(sizeof(CustomizedSkeletalMesh_SetCastShadow) == 0x000001, "Wrong size on CustomizedSkeletalMesh_SetCastShadow");
static_assert(offsetof(CustomizedSkeletalMesh_SetCastShadow, CastShadow) == 0x000000, "Member 'CustomizedSkeletalMesh_SetCastShadow::CastShadow' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetMeshOwner
// 0x0008 (0x0008 - 0x0000)
struct CustomizedSkeletalMesh_SetMeshOwner final
{
public:
	class USkinnedMeshComponent*                  Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetMeshOwner) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_SetMeshOwner");
static_assert(sizeof(CustomizedSkeletalMesh_SetMeshOwner) == 0x000008, "Wrong size on CustomizedSkeletalMesh_SetMeshOwner");
static_assert(offsetof(CustomizedSkeletalMesh_SetMeshOwner, Mesh) == 0x000000, "Member 'CustomizedSkeletalMesh_SetMeshOwner::Mesh' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetMeshVisibility
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_SetMeshVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetMeshVisibility) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetMeshVisibility");
static_assert(sizeof(CustomizedSkeletalMesh_SetMeshVisibility) == 0x000001, "Wrong size on CustomizedSkeletalMesh_SetMeshVisibility");
static_assert(offsetof(CustomizedSkeletalMesh_SetMeshVisibility, Visible) == 0x000000, "Member 'CustomizedSkeletalMesh_SetMeshVisibility::Visible' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.SetVfxsVisibility
// 0x0002 (0x0002 - 0x0000)
struct CustomizedSkeletalMesh_SetVfxsVisibility final
{
public:
	ECustomizationCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Visible;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_SetVfxsVisibility) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_SetVfxsVisibility");
static_assert(sizeof(CustomizedSkeletalMesh_SetVfxsVisibility) == 0x000002, "Wrong size on CustomizedSkeletalMesh_SetVfxsVisibility");
static_assert(offsetof(CustomizedSkeletalMesh_SetVfxsVisibility, Category) == 0x000000, "Member 'CustomizedSkeletalMesh_SetVfxsVisibility::Category' has a wrong offset!");
static_assert(offsetof(CustomizedSkeletalMesh_SetVfxsVisibility, Visible) == 0x000001, "Member 'CustomizedSkeletalMesh_SetVfxsVisibility::Visible' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.Contains
// 0x0018 (0x0018 - 0x0000)
struct CustomizedSkeletalMesh_Contains final
{
public:
	TArray<class FName>                           ItemIds;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CustomizedSkeletalMesh_Contains) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_Contains");
static_assert(sizeof(CustomizedSkeletalMesh_Contains) == 0x000018, "Wrong size on CustomizedSkeletalMesh_Contains");
static_assert(offsetof(CustomizedSkeletalMesh_Contains, ItemIds) == 0x000000, "Member 'CustomizedSkeletalMesh_Contains::ItemIds' has a wrong offset!");
static_assert(offsetof(CustomizedSkeletalMesh_Contains, ReturnValue) == 0x000010, "Member 'CustomizedSkeletalMesh_Contains::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.GetComponents
// 0x0010 (0x0010 - 0x0000)
struct CustomizedSkeletalMesh_GetComponents final
{
public:
	TArray<class USkeletalMeshComponent*>         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_GetComponents) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_GetComponents");
static_assert(sizeof(CustomizedSkeletalMesh_GetComponents) == 0x000010, "Wrong size on CustomizedSkeletalMesh_GetComponents");
static_assert(offsetof(CustomizedSkeletalMesh_GetComponents, ReturnValue) == 0x000000, "Member 'CustomizedSkeletalMesh_GetComponents::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.GetCurrentCustomizationItems
// 0x0010 (0x0010 - 0x0000)
struct CustomizedSkeletalMesh_GetCurrentCustomizationItems final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_GetCurrentCustomizationItems) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_GetCurrentCustomizationItems");
static_assert(sizeof(CustomizedSkeletalMesh_GetCurrentCustomizationItems) == 0x000010, "Wrong size on CustomizedSkeletalMesh_GetCurrentCustomizationItems");
static_assert(offsetof(CustomizedSkeletalMesh_GetCurrentCustomizationItems, ReturnValue) == 0x000000, "Member 'CustomizedSkeletalMesh_GetCurrentCustomizationItems::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.GetSkeletalMesh
// 0x0010 (0x0010 - 0x0000)
struct CustomizedSkeletalMesh_GetSkeletalMesh final
{
public:
	ECustomizationCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_GetSkeletalMesh) == 0x000008, "Wrong alignment on CustomizedSkeletalMesh_GetSkeletalMesh");
static_assert(sizeof(CustomizedSkeletalMesh_GetSkeletalMesh) == 0x000010, "Wrong size on CustomizedSkeletalMesh_GetSkeletalMesh");
static_assert(offsetof(CustomizedSkeletalMesh_GetSkeletalMesh, Category) == 0x000000, "Member 'CustomizedSkeletalMesh_GetSkeletalMesh::Category' has a wrong offset!");
static_assert(offsetof(CustomizedSkeletalMesh_GetSkeletalMesh, ReturnValue) == 0x000008, "Member 'CustomizedSkeletalMesh_GetSkeletalMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.CustomizedSkeletalMesh.HasValidCustomization
// 0x0001 (0x0001 - 0x0000)
struct CustomizedSkeletalMesh_HasValidCustomization final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CustomizedSkeletalMesh_HasValidCustomization) == 0x000001, "Wrong alignment on CustomizedSkeletalMesh_HasValidCustomization");
static_assert(sizeof(CustomizedSkeletalMesh_HasValidCustomization) == 0x000001, "Wrong size on CustomizedSkeletalMesh_HasValidCustomization");
static_assert(offsetof(CustomizedSkeletalMesh_HasValidCustomization, ReturnValue) == 0x000000, "Member 'CustomizedSkeletalMesh_HasValidCustomization::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SupplyCrateAnimInstance.OnBeingPriedOpenStarted
// 0x0008 (0x0008 - 0x0000)
struct SupplyCrateAnimInstance_OnBeingPriedOpenStarted final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SupplyCrateAnimInstance_OnBeingPriedOpenStarted) == 0x000008, "Wrong alignment on SupplyCrateAnimInstance_OnBeingPriedOpenStarted");
static_assert(sizeof(SupplyCrateAnimInstance_OnBeingPriedOpenStarted) == 0x000008, "Wrong size on SupplyCrateAnimInstance_OnBeingPriedOpenStarted");
static_assert(offsetof(SupplyCrateAnimInstance_OnBeingPriedOpenStarted, Player) == 0x000000, "Member 'SupplyCrateAnimInstance_OnBeingPriedOpenStarted::Player' has a wrong offset!");

// Function DeadByDaylight.DailyRitualsScreen.OnClaimRitual
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsScreen_OnClaimRitual final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsScreen_OnClaimRitual) == 0x000008, "Wrong alignment on DailyRitualsScreen_OnClaimRitual");
static_assert(sizeof(DailyRitualsScreen_OnClaimRitual) == 0x000010, "Wrong size on DailyRitualsScreen_OnClaimRitual");
static_assert(offsetof(DailyRitualsScreen_OnClaimRitual, ID) == 0x000000, "Member 'DailyRitualsScreen_OnClaimRitual::ID' has a wrong offset!");

// Function DeadByDaylight.DailyRitualsScreen.OnRemoveRitual
// 0x0010 (0x0010 - 0x0000)
struct DailyRitualsScreen_OnRemoveRitual final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsScreen_OnRemoveRitual) == 0x000008, "Wrong alignment on DailyRitualsScreen_OnRemoveRitual");
static_assert(sizeof(DailyRitualsScreen_OnRemoveRitual) == 0x000010, "Wrong size on DailyRitualsScreen_OnRemoveRitual");
static_assert(offsetof(DailyRitualsScreen_OnRemoveRitual, ID) == 0x000000, "Member 'DailyRitualsScreen_OnRemoveRitual::ID' has a wrong offset!");

// Function DeadByDaylight.EndGameComponent.FireEndGameSacrificeScoreEvent
// 0x0030 (0x0030 - 0x0000)
struct EndGameComponent_FireEndGameSacrificeScoreEvent final
{
public:
	struct FGameEventData                         GameEventData;                                     // 0x0000(0x0030)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameComponent_FireEndGameSacrificeScoreEvent) == 0x000008, "Wrong alignment on EndGameComponent_FireEndGameSacrificeScoreEvent");
static_assert(sizeof(EndGameComponent_FireEndGameSacrificeScoreEvent) == 0x000030, "Wrong size on EndGameComponent_FireEndGameSacrificeScoreEvent");
static_assert(offsetof(EndGameComponent_FireEndGameSacrificeScoreEvent, GameEventData) == 0x000000, "Member 'EndGameComponent_FireEndGameSacrificeScoreEvent::GameEventData' has a wrong offset!");

// Function DeadByDaylight.EndGameComponent.GetHasEndGameBegun
// 0x0001 (0x0001 - 0x0000)
struct EndGameComponent_GetHasEndGameBegun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameComponent_GetHasEndGameBegun) == 0x000001, "Wrong alignment on EndGameComponent_GetHasEndGameBegun");
static_assert(sizeof(EndGameComponent_GetHasEndGameBegun) == 0x000001, "Wrong size on EndGameComponent_GetHasEndGameBegun");
static_assert(offsetof(EndGameComponent_GetHasEndGameBegun, ReturnValue) == 0x000000, "Member 'EndGameComponent_GetHasEndGameBegun::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialEndGameComponent.SetTimerMaxCompletionPercentage
// 0x0004 (0x0004 - 0x0000)
struct TutorialEndGameComponent_SetTimerMaxCompletionPercentage final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialEndGameComponent_SetTimerMaxCompletionPercentage) == 0x000004, "Wrong alignment on TutorialEndGameComponent_SetTimerMaxCompletionPercentage");
static_assert(sizeof(TutorialEndGameComponent_SetTimerMaxCompletionPercentage) == 0x000004, "Wrong size on TutorialEndGameComponent_SetTimerMaxCompletionPercentage");
static_assert(offsetof(TutorialEndGameComponent_SetTimerMaxCompletionPercentage, Percentage) == 0x000000, "Member 'TutorialEndGameComponent_SetTimerMaxCompletionPercentage::Percentage' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnActorTick
// 0x0008 (0x0008 - 0x0000)
struct EffectsLocator_OnActorTick final
{
public:
	class UMaterialInstanceDynamic*               ActorMaterialInstanceDynamic;                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnActorTick) == 0x000008, "Wrong alignment on EffectsLocator_OnActorTick");
static_assert(sizeof(EffectsLocator_OnActorTick) == 0x000008, "Wrong size on EffectsLocator_OnActorTick");
static_assert(offsetof(EffectsLocator_OnActorTick, ActorMaterialInstanceDynamic) == 0x000000, "Member 'EffectsLocator_OnActorTick::ActorMaterialInstanceDynamic' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnEnterCollisionArea
// 0x0010 (0x0010 - 0x0000)
struct EffectsLocator_OnEnterCollisionArea final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnEnterCollisionArea) == 0x000008, "Wrong alignment on EffectsLocator_OnEnterCollisionArea");
static_assert(sizeof(EffectsLocator_OnEnterCollisionArea) == 0x000010, "Wrong size on EffectsLocator_OnEnterCollisionArea");
static_assert(offsetof(EffectsLocator_OnEnterCollisionArea, OverlappedActor) == 0x000000, "Member 'EffectsLocator_OnEnterCollisionArea::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EffectsLocator_OnEnterCollisionArea, OtherActor) == 0x000008, "Member 'EffectsLocator_OnEnterCollisionArea::OtherActor' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnFoundActor
// 0x0008 (0x0008 - 0x0000)
struct EffectsLocator_OnFoundActor final
{
public:
	class AActor*                                 FoundActor;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnFoundActor) == 0x000008, "Wrong alignment on EffectsLocator_OnFoundActor");
static_assert(sizeof(EffectsLocator_OnFoundActor) == 0x000008, "Wrong size on EffectsLocator_OnFoundActor");
static_assert(offsetof(EffectsLocator_OnFoundActor, FoundActor) == 0x000000, "Member 'EffectsLocator_OnFoundActor::FoundActor' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnLeaveCollisionArea
// 0x0010 (0x0010 - 0x0000)
struct EffectsLocator_OnLeaveCollisionArea final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnLeaveCollisionArea) == 0x000008, "Wrong alignment on EffectsLocator_OnLeaveCollisionArea");
static_assert(sizeof(EffectsLocator_OnLeaveCollisionArea) == 0x000010, "Wrong size on EffectsLocator_OnLeaveCollisionArea");
static_assert(offsetof(EffectsLocator_OnLeaveCollisionArea, OverlappedActor) == 0x000000, "Member 'EffectsLocator_OnLeaveCollisionArea::OverlappedActor' has a wrong offset!");
static_assert(offsetof(EffectsLocator_OnLeaveCollisionArea, OtherActor) == 0x000008, "Member 'EffectsLocator_OnLeaveCollisionArea::OtherActor' has a wrong offset!");

// Function DeadByDaylight.EffectsLocator.OnLostActor
// 0x0008 (0x0008 - 0x0000)
struct EffectsLocator_OnLostActor final
{
public:
	class AActor*                                 LostActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectsLocator_OnLostActor) == 0x000008, "Wrong alignment on EffectsLocator_OnLostActor");
static_assert(sizeof(EffectsLocator_OnLostActor) == 0x000008, "Wrong size on EffectsLocator_OnLostActor");
static_assert(offsetof(EffectsLocator_OnLostActor, LostActor) == 0x000000, "Member 'EffectsLocator_OnLostActor::LostActor' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_OnEndGameOver
// 0x0040 (0x0040 - 0x0000)
struct Hatch_Authority_OnEndGameOver final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_OnEndGameOver) == 0x000008, "Wrong alignment on Hatch_Authority_OnEndGameOver");
static_assert(sizeof(Hatch_Authority_OnEndGameOver) == 0x000040, "Wrong size on Hatch_Authority_OnEndGameOver");
static_assert(offsetof(Hatch_Authority_OnEndGameOver, GameEventType) == 0x000000, "Member 'Hatch_Authority_OnEndGameOver::GameEventType' has a wrong offset!");
static_assert(offsetof(Hatch_Authority_OnEndGameOver, GameEventData) == 0x000010, "Member 'Hatch_Authority_OnEndGameOver::GameEventData' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_OnHatchVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct Hatch_Authority_OnHatchVisibilityChanged final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_OnHatchVisibilityChanged) == 0x000001, "Wrong alignment on Hatch_Authority_OnHatchVisibilityChanged");
static_assert(sizeof(Hatch_Authority_OnHatchVisibilityChanged) == 0x000001, "Wrong size on Hatch_Authority_OnHatchVisibilityChanged");
static_assert(offsetof(Hatch_Authority_OnHatchVisibilityChanged, IsVisible) == 0x000000, "Member 'Hatch_Authority_OnHatchVisibilityChanged::IsVisible' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_ResetTimer
// 0x0004 (0x0004 - 0x0000)
struct Hatch_Authority_ResetTimer final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_ResetTimer) == 0x000004, "Wrong alignment on Hatch_Authority_ResetTimer");
static_assert(sizeof(Hatch_Authority_ResetTimer) == 0x000004, "Wrong size on Hatch_Authority_ResetTimer");
static_assert(offsetof(Hatch_Authority_ResetTimer, Duration) == 0x000000, "Member 'Hatch_Authority_ResetTimer::Duration' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_SetHatchState
// 0x0001 (0x0001 - 0x0000)
struct Hatch_Authority_SetHatchState final
{
public:
	EHatchState                                   NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_SetHatchState) == 0x000001, "Wrong alignment on Hatch_Authority_SetHatchState");
static_assert(sizeof(Hatch_Authority_SetHatchState) == 0x000001, "Wrong size on Hatch_Authority_SetHatchState");
static_assert(offsetof(Hatch_Authority_SetHatchState, NewState) == 0x000000, "Member 'Hatch_Authority_SetHatchState::NewState' has a wrong offset!");

// Function DeadByDaylight.Hatch.Authority_SetIsForceOpen
// 0x0001 (0x0001 - 0x0000)
struct Hatch_Authority_SetIsForceOpen final
{
public:
	bool                                          IsForcedOpen;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_Authority_SetIsForceOpen) == 0x000001, "Wrong alignment on Hatch_Authority_SetIsForceOpen");
static_assert(sizeof(Hatch_Authority_SetIsForceOpen) == 0x000001, "Wrong size on Hatch_Authority_SetIsForceOpen");
static_assert(offsetof(Hatch_Authority_SetIsForceOpen, IsForcedOpen) == 0x000000, "Member 'Hatch_Authority_SetIsForceOpen::IsForcedOpen' has a wrong offset!");

// Function DeadByDaylight.Hatch.OnHatchStateModified
// 0x0002 (0x0002 - 0x0000)
struct Hatch_OnHatchStateModified final
{
public:
	EHatchState                                   OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHatchState                                   NewState;                                          // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_OnHatchStateModified) == 0x000001, "Wrong alignment on Hatch_OnHatchStateModified");
static_assert(sizeof(Hatch_OnHatchStateModified) == 0x000002, "Wrong size on Hatch_OnHatchStateModified");
static_assert(offsetof(Hatch_OnHatchStateModified, OldState) == 0x000000, "Member 'Hatch_OnHatchStateModified::OldState' has a wrong offset!");
static_assert(offsetof(Hatch_OnHatchStateModified, NewState) == 0x000001, "Member 'Hatch_OnHatchStateModified::NewState' has a wrong offset!");

// Function DeadByDaylight.Hatch.OnRep_HatchState
// 0x0001 (0x0001 - 0x0000)
struct Hatch_OnRep_HatchState final
{
public:
	EHatchState                                   OldState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_OnRep_HatchState) == 0x000001, "Wrong alignment on Hatch_OnRep_HatchState");
static_assert(sizeof(Hatch_OnRep_HatchState) == 0x000001, "Wrong size on Hatch_OnRep_HatchState");
static_assert(offsetof(Hatch_OnRep_HatchState, OldState) == 0x000000, "Member 'Hatch_OnRep_HatchState::OldState' has a wrong offset!");

// Function DeadByDaylight.Hatch.GetAnimationMontageSlave
// 0x0008 (0x0008 - 0x0000)
struct Hatch_GetAnimationMontageSlave final
{
public:
	class UAnimationMontageSlave*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_GetAnimationMontageSlave) == 0x000008, "Wrong alignment on Hatch_GetAnimationMontageSlave");
static_assert(sizeof(Hatch_GetAnimationMontageSlave) == 0x000008, "Wrong size on Hatch_GetAnimationMontageSlave");
static_assert(offsetof(Hatch_GetAnimationMontageSlave, ReturnValue) == 0x000000, "Member 'Hatch_GetAnimationMontageSlave::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Hatch.GetEscapeFocalPoint
// 0x0008 (0x0008 - 0x0000)
struct Hatch_GetEscapeFocalPoint final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_GetEscapeFocalPoint) == 0x000008, "Wrong alignment on Hatch_GetEscapeFocalPoint");
static_assert(sizeof(Hatch_GetEscapeFocalPoint) == 0x000008, "Wrong size on Hatch_GetEscapeFocalPoint");
static_assert(offsetof(Hatch_GetEscapeFocalPoint, ReturnValue) == 0x000000, "Member 'Hatch_GetEscapeFocalPoint::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Hatch.GetHatchCenter
// 0x0008 (0x0008 - 0x0000)
struct Hatch_GetHatchCenter final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_GetHatchCenter) == 0x000008, "Wrong alignment on Hatch_GetHatchCenter");
static_assert(sizeof(Hatch_GetHatchCenter) == 0x000008, "Wrong size on Hatch_GetHatchCenter");
static_assert(offsetof(Hatch_GetHatchCenter, ReturnValue) == 0x000000, "Member 'Hatch_GetHatchCenter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Hatch.GetHatchState
// 0x0001 (0x0001 - 0x0000)
struct Hatch_GetHatchState final
{
public:
	EHatchState                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_GetHatchState) == 0x000001, "Wrong alignment on Hatch_GetHatchState");
static_assert(sizeof(Hatch_GetHatchState) == 0x000001, "Wrong size on Hatch_GetHatchState");
static_assert(offsetof(Hatch_GetHatchState, ReturnValue) == 0x000000, "Member 'Hatch_GetHatchState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Hatch.IsOpen
// 0x0001 (0x0001 - 0x0000)
struct Hatch_IsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hatch_IsOpen) == 0x000001, "Wrong alignment on Hatch_IsOpen");
static_assert(sizeof(Hatch_IsOpen) == 0x000001, "Wrong size on Hatch_IsOpen");
static_assert(offsetof(Hatch_IsOpen, ReturnValue) == 0x000000, "Member 'Hatch_IsOpen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSpecialEventUtilities.DoesPlayerHasEventOffering
// 0x0010 (0x0010 - 0x0000)
struct DBDSpecialEventUtilities_DoesPlayerHasEventOffering final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOfferingEffectType                           OfferingEffectType;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering) == 0x000008, "Wrong alignment on DBDSpecialEventUtilities_DoesPlayerHasEventOffering");
static_assert(sizeof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering) == 0x000010, "Wrong size on DBDSpecialEventUtilities_DoesPlayerHasEventOffering");
static_assert(offsetof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering, Player) == 0x000000, "Member 'DBDSpecialEventUtilities_DoesPlayerHasEventOffering::Player' has a wrong offset!");
static_assert(offsetof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering, OfferingEffectType) == 0x000008, "Member 'DBDSpecialEventUtilities_DoesPlayerHasEventOffering::OfferingEffectType' has a wrong offset!");
static_assert(offsetof(DBDSpecialEventUtilities_DoesPlayerHasEventOffering, ReturnValue) == 0x000009, "Member 'DBDSpecialEventUtilities_DoesPlayerHasEventOffering::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.MovePlayerToActor
// 0x0010 (0x0010 - 0x0000)
struct DBDAIPlayerController_MovePlayerToActor final
{
public:
	class AActor*                                 Goal;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AcceptanceRadius;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDAIPlayerController_MovePlayerToActor) == 0x000008, "Wrong alignment on DBDAIPlayerController_MovePlayerToActor");
static_assert(sizeof(DBDAIPlayerController_MovePlayerToActor) == 0x000010, "Wrong size on DBDAIPlayerController_MovePlayerToActor");
static_assert(offsetof(DBDAIPlayerController_MovePlayerToActor, Goal) == 0x000000, "Member 'DBDAIPlayerController_MovePlayerToActor::Goal' has a wrong offset!");
static_assert(offsetof(DBDAIPlayerController_MovePlayerToActor, AcceptanceRadius) == 0x000008, "Member 'DBDAIPlayerController_MovePlayerToActor::AcceptanceRadius' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.OnBehaviourEndedHandler
// 0x0008 (0x0008 - 0x0000)
struct DBDAIPlayerController_OnBehaviourEndedHandler final
{
public:
	class UAICharacterBehaviour*                  behaviourEnded;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_OnBehaviourEndedHandler) == 0x000008, "Wrong alignment on DBDAIPlayerController_OnBehaviourEndedHandler");
static_assert(sizeof(DBDAIPlayerController_OnBehaviourEndedHandler) == 0x000008, "Wrong size on DBDAIPlayerController_OnBehaviourEndedHandler");
static_assert(offsetof(DBDAIPlayerController_OnBehaviourEndedHandler, behaviourEnded) == 0x000000, "Member 'DBDAIPlayerController_OnBehaviourEndedHandler::behaviourEnded' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.PauseCharacterBehaviour
// 0x0008 (0x0008 - 0x0000)
struct DBDAIPlayerController_PauseCharacterBehaviour final
{
public:
	const class UClass*                           behaviourClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_PauseCharacterBehaviour) == 0x000008, "Wrong alignment on DBDAIPlayerController_PauseCharacterBehaviour");
static_assert(sizeof(DBDAIPlayerController_PauseCharacterBehaviour) == 0x000008, "Wrong size on DBDAIPlayerController_PauseCharacterBehaviour");
static_assert(offsetof(DBDAIPlayerController_PauseCharacterBehaviour, behaviourClass) == 0x000000, "Member 'DBDAIPlayerController_PauseCharacterBehaviour::behaviourClass' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.ResumeCharacterBehaviour
// 0x0008 (0x0008 - 0x0000)
struct DBDAIPlayerController_ResumeCharacterBehaviour final
{
public:
	const class UClass*                           behaviourClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_ResumeCharacterBehaviour) == 0x000008, "Wrong alignment on DBDAIPlayerController_ResumeCharacterBehaviour");
static_assert(sizeof(DBDAIPlayerController_ResumeCharacterBehaviour) == 0x000008, "Wrong size on DBDAIPlayerController_ResumeCharacterBehaviour");
static_assert(offsetof(DBDAIPlayerController_ResumeCharacterBehaviour, behaviourClass) == 0x000000, "Member 'DBDAIPlayerController_ResumeCharacterBehaviour::behaviourClass' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.StartCharacterBehaviour
// 0x0010 (0x0010 - 0x0000)
struct DBDAIPlayerController_StartCharacterBehaviour final
{
public:
	class UClass*                                 behaviourClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAICharacterBehaviourData*              CharacterBehaviourData;                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_StartCharacterBehaviour) == 0x000008, "Wrong alignment on DBDAIPlayerController_StartCharacterBehaviour");
static_assert(sizeof(DBDAIPlayerController_StartCharacterBehaviour) == 0x000010, "Wrong size on DBDAIPlayerController_StartCharacterBehaviour");
static_assert(offsetof(DBDAIPlayerController_StartCharacterBehaviour, behaviourClass) == 0x000000, "Member 'DBDAIPlayerController_StartCharacterBehaviour::behaviourClass' has a wrong offset!");
static_assert(offsetof(DBDAIPlayerController_StartCharacterBehaviour, CharacterBehaviourData) == 0x000008, "Member 'DBDAIPlayerController_StartCharacterBehaviour::CharacterBehaviourData' has a wrong offset!");

// Function DeadByDaylight.DBDAIPlayerController.StopCharacterBehaviour
// 0x0008 (0x0008 - 0x0000)
struct DBDAIPlayerController_StopCharacterBehaviour final
{
public:
	const class UClass*                           behaviourClass;                                    // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIPlayerController_StopCharacterBehaviour) == 0x000008, "Wrong alignment on DBDAIPlayerController_StopCharacterBehaviour");
static_assert(sizeof(DBDAIPlayerController_StopCharacterBehaviour) == 0x000008, "Wrong size on DBDAIPlayerController_StopCharacterBehaviour");
static_assert(offsetof(DBDAIPlayerController_StopCharacterBehaviour, behaviourClass) == 0x000000, "Member 'DBDAIPlayerController_StopCharacterBehaviour::behaviourClass' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Authority_DebugSetHookDrainStage
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_Authority_DebugSetHookDrainStage final
{
public:
	int32                                         DrainStage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Authority_DebugSetHookDrainStage) == 0x000004, "Wrong alignment on HookableComponent_Authority_DebugSetHookDrainStage");
static_assert(sizeof(HookableComponent_Authority_DebugSetHookDrainStage) == 0x000004, "Wrong size on HookableComponent_Authority_DebugSetHookDrainStage");
static_assert(offsetof(HookableComponent_Authority_DebugSetHookDrainStage, DrainStage) == 0x000000, "Member 'HookableComponent_Authority_DebugSetHookDrainStage::DrainStage' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Authority_DebugSetHookEscapeAutoFail
// 0x0001 (0x0001 - 0x0000)
struct HookableComponent_Authority_DebugSetHookEscapeAutoFail final
{
public:
	bool                                          Fail;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Authority_DebugSetHookEscapeAutoFail) == 0x000001, "Wrong alignment on HookableComponent_Authority_DebugSetHookEscapeAutoFail");
static_assert(sizeof(HookableComponent_Authority_DebugSetHookEscapeAutoFail) == 0x000001, "Wrong size on HookableComponent_Authority_DebugSetHookEscapeAutoFail");
static_assert(offsetof(HookableComponent_Authority_DebugSetHookEscapeAutoFail, Fail) == 0x000000, "Member 'HookableComponent_Authority_DebugSetHookEscapeAutoFail::Fail' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Authority_DebugSetHookEscapeAutoSuccess
// 0x0001 (0x0001 - 0x0000)
struct HookableComponent_Authority_DebugSetHookEscapeAutoSuccess final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Authority_DebugSetHookEscapeAutoSuccess) == 0x000001, "Wrong alignment on HookableComponent_Authority_DebugSetHookEscapeAutoSuccess");
static_assert(sizeof(HookableComponent_Authority_DebugSetHookEscapeAutoSuccess) == 0x000001, "Wrong size on HookableComponent_Authority_DebugSetHookEscapeAutoSuccess");
static_assert(offsetof(HookableComponent_Authority_DebugSetHookEscapeAutoSuccess, Success) == 0x000000, "Member 'HookableComponent_Authority_DebugSetHookEscapeAutoSuccess::Success' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Multicast_DebugSetHookDrainStage
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_Multicast_DebugSetHookDrainStage final
{
public:
	int32                                         DrainStage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Multicast_DebugSetHookDrainStage) == 0x000004, "Wrong alignment on HookableComponent_Multicast_DebugSetHookDrainStage");
static_assert(sizeof(HookableComponent_Multicast_DebugSetHookDrainStage) == 0x000004, "Wrong size on HookableComponent_Multicast_DebugSetHookDrainStage");
static_assert(offsetof(HookableComponent_Multicast_DebugSetHookDrainStage, DrainStage) == 0x000000, "Member 'HookableComponent_Multicast_DebugSetHookDrainStage::DrainStage' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.Multicast_SetDrainTimerPercentLeft
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_Multicast_SetDrainTimerPercentLeft final
{
public:
	float                                         PercentTime;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_Multicast_SetDrainTimerPercentLeft) == 0x000004, "Wrong alignment on HookableComponent_Multicast_SetDrainTimerPercentLeft");
static_assert(sizeof(HookableComponent_Multicast_SetDrainTimerPercentLeft) == 0x000004, "Wrong size on HookableComponent_Multicast_SetDrainTimerPercentLeft");
static_assert(offsetof(HookableComponent_Multicast_SetDrainTimerPercentLeft, PercentTime) == 0x000000, "Member 'HookableComponent_Multicast_SetDrainTimerPercentLeft::PercentTime' has a wrong offset!");

// DelegateFunction DeadByDaylight.HookableComponent.OnDrainStateChangeFX__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_OnDrainStateChangeFX__DelegateSignature final
{
public:
	int32                                         DrainState;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_OnDrainStateChangeFX__DelegateSignature) == 0x000004, "Wrong alignment on HookableComponent_OnDrainStateChangeFX__DelegateSignature");
static_assert(sizeof(HookableComponent_OnDrainStateChangeFX__DelegateSignature) == 0x000004, "Wrong size on HookableComponent_OnDrainStateChangeFX__DelegateSignature");
static_assert(offsetof(HookableComponent_OnDrainStateChangeFX__DelegateSignature, DrainState) == 0x000000, "Member 'HookableComponent_OnDrainStateChangeFX__DelegateSignature::DrainState' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.OnRep_DrainStage
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_OnRep_DrainStage final
{
public:
	int32                                         PreviousDrainStage;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_OnRep_DrainStage) == 0x000004, "Wrong alignment on HookableComponent_OnRep_DrainStage");
static_assert(sizeof(HookableComponent_OnRep_DrainStage) == 0x000004, "Wrong size on HookableComponent_OnRep_DrainStage");
static_assert(offsetof(HookableComponent_OnRep_DrainStage, PreviousDrainStage) == 0x000000, "Member 'HookableComponent_OnRep_DrainStage::PreviousDrainStage' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.GetDrainStage
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_GetDrainStage final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_GetDrainStage) == 0x000004, "Wrong alignment on HookableComponent_GetDrainStage");
static_assert(sizeof(HookableComponent_GetDrainStage) == 0x000004, "Wrong size on HookableComponent_GetDrainStage");
static_assert(offsetof(HookableComponent_GetDrainStage, ReturnValue) == 0x000000, "Member 'HookableComponent_GetDrainStage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.GetDrainTimerPercentLeft
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_GetDrainTimerPercentLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_GetDrainTimerPercentLeft) == 0x000004, "Wrong alignment on HookableComponent_GetDrainTimerPercentLeft");
static_assert(sizeof(HookableComponent_GetDrainTimerPercentLeft) == 0x000004, "Wrong size on HookableComponent_GetDrainTimerPercentLeft");
static_assert(offsetof(HookableComponent_GetDrainTimerPercentLeft, ReturnValue) == 0x000000, "Member 'HookableComponent_GetDrainTimerPercentLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.GetHookedCount
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_GetHookedCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_GetHookedCount) == 0x000004, "Wrong alignment on HookableComponent_GetHookedCount");
static_assert(sizeof(HookableComponent_GetHookedCount) == 0x000004, "Wrong size on HookableComponent_GetHookedCount");
static_assert(offsetof(HookableComponent_GetHookedCount, ReturnValue) == 0x000000, "Member 'HookableComponent_GetHookedCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HookableComponent.GetSacrificeStageIndex
// 0x0004 (0x0004 - 0x0000)
struct HookableComponent_GetSacrificeStageIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookableComponent_GetSacrificeStageIndex) == 0x000004, "Wrong alignment on HookableComponent_GetSacrificeStageIndex");
static_assert(sizeof(HookableComponent_GetSacrificeStageIndex) == 0x000004, "Wrong size on HookableComponent_GetSacrificeStageIndex");
static_assert(offsetof(HookableComponent_GetSacrificeStageIndex, ReturnValue) == 0x000000, "Member 'HookableComponent_GetSacrificeStageIndex::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.Local_RequestAttack
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_Local_RequestAttack final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_Local_RequestAttack) == 0x000001, "Wrong alignment on DBDAttackerComponent_Local_RequestAttack");
static_assert(sizeof(DBDAttackerComponent_Local_RequestAttack) == 0x000001, "Wrong size on DBDAttackerComponent_Local_RequestAttack");
static_assert(offsetof(DBDAttackerComponent_Local_RequestAttack, AttackType) == 0x000000, "Member 'DBDAttackerComponent_Local_RequestAttack::AttackType' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.Multicast_StoreAttack
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_Multicast_StoreAttack final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_Multicast_StoreAttack) == 0x000001, "Wrong alignment on DBDAttackerComponent_Multicast_StoreAttack");
static_assert(sizeof(DBDAttackerComponent_Multicast_StoreAttack) == 0x000001, "Wrong size on DBDAttackerComponent_Multicast_StoreAttack");
static_assert(offsetof(DBDAttackerComponent_Multicast_StoreAttack, AttackType) == 0x000000, "Member 'DBDAttackerComponent_Multicast_StoreAttack::AttackType' has a wrong offset!");

// DelegateFunction DeadByDaylight.DBDAttackerComponent.OnAttackPhaseChangedDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_OnAttackPhaseChangedDelegate__DelegateSignature final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_OnAttackPhaseChangedDelegate__DelegateSignature) == 0x000001, "Wrong alignment on DBDAttackerComponent_OnAttackPhaseChangedDelegate__DelegateSignature");
static_assert(sizeof(DBDAttackerComponent_OnAttackPhaseChangedDelegate__DelegateSignature) == 0x000001, "Wrong size on DBDAttackerComponent_OnAttackPhaseChangedDelegate__DelegateSignature");
static_assert(offsetof(DBDAttackerComponent_OnAttackPhaseChangedDelegate__DelegateSignature, AttackType) == 0x000000, "Member 'DBDAttackerComponent_OnAttackPhaseChangedDelegate__DelegateSignature::AttackType' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.Server_StoreAttack
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_Server_StoreAttack final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_Server_StoreAttack) == 0x000001, "Wrong alignment on DBDAttackerComponent_Server_StoreAttack");
static_assert(sizeof(DBDAttackerComponent_Server_StoreAttack) == 0x000001, "Wrong size on DBDAttackerComponent_Server_StoreAttack");
static_assert(offsetof(DBDAttackerComponent_Server_StoreAttack, AttackType) == 0x000000, "Member 'DBDAttackerComponent_Server_StoreAttack::AttackType' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.IsAnyAttackTransitionRequested
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_IsAnyAttackTransitionRequested final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_IsAnyAttackTransitionRequested) == 0x000001, "Wrong alignment on DBDAttackerComponent_IsAnyAttackTransitionRequested");
static_assert(sizeof(DBDAttackerComponent_IsAnyAttackTransitionRequested) == 0x000001, "Wrong size on DBDAttackerComponent_IsAnyAttackTransitionRequested");
static_assert(offsetof(DBDAttackerComponent_IsAnyAttackTransitionRequested, ReturnValue) == 0x000000, "Member 'DBDAttackerComponent_IsAnyAttackTransitionRequested::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.IsAttacking
// 0x0001 (0x0001 - 0x0000)
struct DBDAttackerComponent_IsAttacking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_IsAttacking) == 0x000001, "Wrong alignment on DBDAttackerComponent_IsAttacking");
static_assert(sizeof(DBDAttackerComponent_IsAttacking) == 0x000001, "Wrong size on DBDAttackerComponent_IsAttacking");
static_assert(offsetof(DBDAttackerComponent_IsAttacking, ReturnValue) == 0x000000, "Member 'DBDAttackerComponent_IsAttacking::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDAttackerComponent.IsAttackTransitionRequested
// 0x0002 (0x0002 - 0x0000)
struct DBDAttackerComponent_IsAttackTransitionRequested final
{
public:
	EAttackType                                   AttackType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAttackerComponent_IsAttackTransitionRequested) == 0x000001, "Wrong alignment on DBDAttackerComponent_IsAttackTransitionRequested");
static_assert(sizeof(DBDAttackerComponent_IsAttackTransitionRequested) == 0x000002, "Wrong size on DBDAttackerComponent_IsAttackTransitionRequested");
static_assert(offsetof(DBDAttackerComponent_IsAttackTransitionRequested, AttackType) == 0x000000, "Member 'DBDAttackerComponent_IsAttackTransitionRequested::AttackType' has a wrong offset!");
static_assert(offsetof(DBDAttackerComponent_IsAttackTransitionRequested, ReturnValue) == 0x000001, "Member 'DBDAttackerComponent_IsAttackTransitionRequested::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.GetLocallyObservedPlayerRole
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_GetLocallyObservedPlayerRole final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_GetLocallyObservedPlayerRole) == 0x000008, "Wrong alignment on DBDCharacterUtilities_GetLocallyObservedPlayerRole");
static_assert(sizeof(DBDCharacterUtilities_GetLocallyObservedPlayerRole) == 0x000010, "Wrong size on DBDCharacterUtilities_GetLocallyObservedPlayerRole");
static_assert(offsetof(DBDCharacterUtilities_GetLocallyObservedPlayerRole, WorldContextObject) == 0x000000, "Member 'DBDCharacterUtilities_GetLocallyObservedPlayerRole::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_GetLocallyObservedPlayerRole, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_GetLocallyObservedPlayerRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsAceVisconti
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsAceVisconti final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsAceVisconti) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsAceVisconti");
static_assert(sizeof(DBDCharacterUtilities_IsAceVisconti) == 0x000010, "Wrong size on DBDCharacterUtilities_IsAceVisconti");
static_assert(offsetof(DBDCharacterUtilities_IsAceVisconti, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsAceVisconti::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsAceVisconti, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsAceVisconti::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsAdamFrancis
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsAdamFrancis final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsAdamFrancis) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsAdamFrancis");
static_assert(sizeof(DBDCharacterUtilities_IsAdamFrancis) == 0x000010, "Wrong size on DBDCharacterUtilities_IsAdamFrancis");
static_assert(offsetof(DBDCharacterUtilities_IsAdamFrancis, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsAdamFrancis::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsAdamFrancis, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsAdamFrancis::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsAshleyWilliams
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsAshleyWilliams final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsAshleyWilliams) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsAshleyWilliams");
static_assert(sizeof(DBDCharacterUtilities_IsAshleyWilliams) == 0x000010, "Wrong size on DBDCharacterUtilities_IsAshleyWilliams");
static_assert(offsetof(DBDCharacterUtilities_IsAshleyWilliams, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsAshleyWilliams::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsAshleyWilliams, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsAshleyWilliams::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsClaudetteMorel
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsClaudetteMorel final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsClaudetteMorel) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsClaudetteMorel");
static_assert(sizeof(DBDCharacterUtilities_IsClaudetteMorel) == 0x000010, "Wrong size on DBDCharacterUtilities_IsClaudetteMorel");
static_assert(offsetof(DBDCharacterUtilities_IsClaudetteMorel, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsClaudetteMorel::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsClaudetteMorel, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsClaudetteMorel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsDavidKing
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsDavidKing final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsDavidKing) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsDavidKing");
static_assert(sizeof(DBDCharacterUtilities_IsDavidKing) == 0x000010, "Wrong size on DBDCharacterUtilities_IsDavidKing");
static_assert(offsetof(DBDCharacterUtilities_IsDavidKing, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsDavidKing::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsDavidKing, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsDavidKing::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsDavidTapp
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsDavidTapp final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsDavidTapp) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsDavidTapp");
static_assert(sizeof(DBDCharacterUtilities_IsDavidTapp) == 0x000010, "Wrong size on DBDCharacterUtilities_IsDavidTapp");
static_assert(offsetof(DBDCharacterUtilities_IsDavidTapp, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsDavidTapp::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsDavidTapp, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsDavidTapp::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsDwightFairfield
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsDwightFairfield final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsDwightFairfield) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsDwightFairfield");
static_assert(sizeof(DBDCharacterUtilities_IsDwightFairfield) == 0x000010, "Wrong size on DBDCharacterUtilities_IsDwightFairfield");
static_assert(offsetof(DBDCharacterUtilities_IsDwightFairfield, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsDwightFairfield::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsDwightFairfield, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsDwightFairfield::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsFengMin
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsFengMin final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsFengMin) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsFengMin");
static_assert(sizeof(DBDCharacterUtilities_IsFengMin) == 0x000010, "Wrong size on DBDCharacterUtilities_IsFengMin");
static_assert(offsetof(DBDCharacterUtilities_IsFengMin, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsFengMin::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsFengMin, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsFengMin::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsInDreamworld
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsInDreamworld final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsInDreamworld) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsInDreamworld");
static_assert(sizeof(DBDCharacterUtilities_IsInDreamworld) == 0x000010, "Wrong size on DBDCharacterUtilities_IsInDreamworld");
static_assert(offsetof(DBDCharacterUtilities_IsInDreamworld, Player) == 0x000000, "Member 'DBDCharacterUtilities_IsInDreamworld::Player' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsInDreamworld, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsInDreamworld::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsInSameTeamAsLocallyObservedPlayer
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsInSameTeamAsLocallyObservedPlayer final
{
public:
	const class ADBDPlayer*                       TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsInSameTeamAsLocallyObservedPlayer) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsInSameTeamAsLocallyObservedPlayer");
static_assert(sizeof(DBDCharacterUtilities_IsInSameTeamAsLocallyObservedPlayer) == 0x000010, "Wrong size on DBDCharacterUtilities_IsInSameTeamAsLocallyObservedPlayer");
static_assert(offsetof(DBDCharacterUtilities_IsInSameTeamAsLocallyObservedPlayer, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsInSameTeamAsLocallyObservedPlayer::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsInSameTeamAsLocallyObservedPlayer, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsInSameTeamAsLocallyObservedPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsJakePark
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsJakePark final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsJakePark) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsJakePark");
static_assert(sizeof(DBDCharacterUtilities_IsJakePark) == 0x000010, "Wrong size on DBDCharacterUtilities_IsJakePark");
static_assert(offsetof(DBDCharacterUtilities_IsJakePark, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsJakePark::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsJakePark, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsJakePark::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsJaneRomero
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsJaneRomero final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsJaneRomero) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsJaneRomero");
static_assert(sizeof(DBDCharacterUtilities_IsJaneRomero) == 0x000010, "Wrong size on DBDCharacterUtilities_IsJaneRomero");
static_assert(offsetof(DBDCharacterUtilities_IsJaneRomero, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsJaneRomero::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsJaneRomero, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsJaneRomero::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsJeffJohansen
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsJeffJohansen final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsJeffJohansen) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsJeffJohansen");
static_assert(sizeof(DBDCharacterUtilities_IsJeffJohansen) == 0x000010, "Wrong size on DBDCharacterUtilities_IsJeffJohansen");
static_assert(offsetof(DBDCharacterUtilities_IsJeffJohansen, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsJeffJohansen::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsJeffJohansen, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsJeffJohansen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsKateDenson
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsKateDenson final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsKateDenson) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsKateDenson");
static_assert(sizeof(DBDCharacterUtilities_IsKateDenson) == 0x000010, "Wrong size on DBDCharacterUtilities_IsKateDenson");
static_assert(offsetof(DBDCharacterUtilities_IsKateDenson, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsKateDenson::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsKateDenson, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsKateDenson::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsLaurieStrode
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsLaurieStrode final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsLaurieStrode) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsLaurieStrode");
static_assert(sizeof(DBDCharacterUtilities_IsLaurieStrode) == 0x000010, "Wrong size on DBDCharacterUtilities_IsLaurieStrode");
static_assert(offsetof(DBDCharacterUtilities_IsLaurieStrode, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsLaurieStrode::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsLaurieStrode, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsLaurieStrode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsMegThomas
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsMegThomas final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsMegThomas) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsMegThomas");
static_assert(sizeof(DBDCharacterUtilities_IsMegThomas) == 0x000010, "Wrong size on DBDCharacterUtilities_IsMegThomas");
static_assert(offsetof(DBDCharacterUtilities_IsMegThomas, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsMegThomas::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsMegThomas, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsMegThomas::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsNancyWheeler
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsNancyWheeler final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsNancyWheeler) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsNancyWheeler");
static_assert(sizeof(DBDCharacterUtilities_IsNancyWheeler) == 0x000010, "Wrong size on DBDCharacterUtilities_IsNancyWheeler");
static_assert(offsetof(DBDCharacterUtilities_IsNancyWheeler, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsNancyWheeler::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsNancyWheeler, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsNancyWheeler::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsNeaKarlsson
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsNeaKarlsson final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsNeaKarlsson) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsNeaKarlsson");
static_assert(sizeof(DBDCharacterUtilities_IsNeaKarlsson) == 0x000010, "Wrong size on DBDCharacterUtilities_IsNeaKarlsson");
static_assert(offsetof(DBDCharacterUtilities_IsNeaKarlsson, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsNeaKarlsson::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsNeaKarlsson, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsNeaKarlsson::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsPlague
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsPlague final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsPlague) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsPlague");
static_assert(sizeof(DBDCharacterUtilities_IsPlague) == 0x000010, "Wrong size on DBDCharacterUtilities_IsPlague");
static_assert(offsetof(DBDCharacterUtilities_IsPlague, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsPlague::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsPlague, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsPlague::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsQuentinSmith
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsQuentinSmith final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsQuentinSmith) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsQuentinSmith");
static_assert(sizeof(DBDCharacterUtilities_IsQuentinSmith) == 0x000010, "Wrong size on DBDCharacterUtilities_IsQuentinSmith");
static_assert(offsetof(DBDCharacterUtilities_IsQuentinSmith, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsQuentinSmith::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsQuentinSmith, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsQuentinSmith::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsSlasherLocallyObserved
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsSlasherLocallyObserved final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsSlasherLocallyObserved) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsSlasherLocallyObserved");
static_assert(sizeof(DBDCharacterUtilities_IsSlasherLocallyObserved) == 0x000010, "Wrong size on DBDCharacterUtilities_IsSlasherLocallyObserved");
static_assert(offsetof(DBDCharacterUtilities_IsSlasherLocallyObserved, WorldContextObject) == 0x000000, "Member 'DBDCharacterUtilities_IsSlasherLocallyObserved::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsSlasherLocallyObserved, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsSlasherLocallyObserved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsSteveHarrington
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsSteveHarrington final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsSteveHarrington) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsSteveHarrington");
static_assert(sizeof(DBDCharacterUtilities_IsSteveHarrington) == 0x000010, "Wrong size on DBDCharacterUtilities_IsSteveHarrington");
static_assert(offsetof(DBDCharacterUtilities_IsSteveHarrington, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsSteveHarrington::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsSteveHarrington, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsSteveHarrington::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheBlight
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheBlight final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheBlight) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheBlight");
static_assert(sizeof(DBDCharacterUtilities_IsTheBlight) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheBlight");
static_assert(offsetof(DBDCharacterUtilities_IsTheBlight, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheBlight::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheBlight, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheBlight::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheCannibal
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheCannibal final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheCannibal) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheCannibal");
static_assert(sizeof(DBDCharacterUtilities_IsTheCannibal) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheCannibal");
static_assert(offsetof(DBDCharacterUtilities_IsTheCannibal, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheCannibal::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheCannibal, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheCannibal::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheClown
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheClown final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheClown) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheClown");
static_assert(sizeof(DBDCharacterUtilities_IsTheClown) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheClown");
static_assert(offsetof(DBDCharacterUtilities_IsTheClown, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheClown::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheClown, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheClown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheDemogorgon
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheDemogorgon final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheDemogorgon) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheDemogorgon");
static_assert(sizeof(DBDCharacterUtilities_IsTheDemogorgon) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheDemogorgon");
static_assert(offsetof(DBDCharacterUtilities_IsTheDemogorgon, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheDemogorgon::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheDemogorgon, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheDemogorgon::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheDoctor
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheDoctor final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheDoctor) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheDoctor");
static_assert(sizeof(DBDCharacterUtilities_IsTheDoctor) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheDoctor");
static_assert(offsetof(DBDCharacterUtilities_IsTheDoctor, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheDoctor::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheDoctor, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheDoctor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheExecutioner
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheExecutioner final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheExecutioner) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheExecutioner");
static_assert(sizeof(DBDCharacterUtilities_IsTheExecutioner) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheExecutioner");
static_assert(offsetof(DBDCharacterUtilities_IsTheExecutioner, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheExecutioner::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheExecutioner, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheExecutioner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheGhost
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheGhost final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheGhost) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheGhost");
static_assert(sizeof(DBDCharacterUtilities_IsTheGhost) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheGhost");
static_assert(offsetof(DBDCharacterUtilities_IsTheGhost, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheGhost::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheGhost, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheGhost::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheGoodGuy
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheGoodGuy final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheGoodGuy) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheGoodGuy");
static_assert(sizeof(DBDCharacterUtilities_IsTheGoodGuy) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheGoodGuy");
static_assert(offsetof(DBDCharacterUtilities_IsTheGoodGuy, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheGoodGuy::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheGoodGuy, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheGoodGuy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheHag
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheHag final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheHag) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheHag");
static_assert(sizeof(DBDCharacterUtilities_IsTheHag) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheHag");
static_assert(offsetof(DBDCharacterUtilities_IsTheHag, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheHag::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheHag, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheHag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheHillBilly
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheHillBilly final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheHillBilly) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheHillBilly");
static_assert(sizeof(DBDCharacterUtilities_IsTheHillBilly) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheHillBilly");
static_assert(offsetof(DBDCharacterUtilities_IsTheHillBilly, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheHillBilly::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheHillBilly, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheHillBilly::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheHuntress
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheHuntress final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheHuntress) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheHuntress");
static_assert(sizeof(DBDCharacterUtilities_IsTheHuntress) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheHuntress");
static_assert(offsetof(DBDCharacterUtilities_IsTheHuntress, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheHuntress::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheHuntress, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheHuntress::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheLegion
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheLegion final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheLegion) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheLegion");
static_assert(sizeof(DBDCharacterUtilities_IsTheLegion) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheLegion");
static_assert(offsetof(DBDCharacterUtilities_IsTheLegion, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheLegion::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheLegion, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheLegion::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheNightmare
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheNightmare final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheNightmare) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheNightmare");
static_assert(sizeof(DBDCharacterUtilities_IsTheNightmare) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheNightmare");
static_assert(offsetof(DBDCharacterUtilities_IsTheNightmare, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheNightmare::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheNightmare, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheNightmare::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheNurse
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheNurse final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheNurse) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheNurse");
static_assert(sizeof(DBDCharacterUtilities_IsTheNurse) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheNurse");
static_assert(offsetof(DBDCharacterUtilities_IsTheNurse, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheNurse::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheNurse, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheNurse::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheOni
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheOni final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheOni) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheOni");
static_assert(sizeof(DBDCharacterUtilities_IsTheOni) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheOni");
static_assert(offsetof(DBDCharacterUtilities_IsTheOni, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheOni::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheOni, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheOni::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheOnryo
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheOnryo final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheOnryo) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheOnryo");
static_assert(sizeof(DBDCharacterUtilities_IsTheOnryo) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheOnryo");
static_assert(offsetof(DBDCharacterUtilities_IsTheOnryo, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheOnryo::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheOnryo, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheOnryo::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsThePig
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsThePig final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsThePig) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsThePig");
static_assert(sizeof(DBDCharacterUtilities_IsThePig) == 0x000010, "Wrong size on DBDCharacterUtilities_IsThePig");
static_assert(offsetof(DBDCharacterUtilities_IsThePig, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsThePig::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsThePig, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsThePig::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheShape
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheShape final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheShape) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheShape");
static_assert(sizeof(DBDCharacterUtilities_IsTheShape) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheShape");
static_assert(offsetof(DBDCharacterUtilities_IsTheShape, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheShape::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheShape, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheShape::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheSpirit
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheSpirit final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheSpirit) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheSpirit");
static_assert(sizeof(DBDCharacterUtilities_IsTheSpirit) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheSpirit");
static_assert(offsetof(DBDCharacterUtilities_IsTheSpirit, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheSpirit::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheSpirit, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheSpirit::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTrapper
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTrapper final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTrapper) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTrapper");
static_assert(sizeof(DBDCharacterUtilities_IsTheTrapper) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTrapper");
static_assert(offsetof(DBDCharacterUtilities_IsTheTrapper, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTrapper::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTrapper, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTrapper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTrickster
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTrickster final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTrickster) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTrickster");
static_assert(sizeof(DBDCharacterUtilities_IsTheTrickster) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTrickster");
static_assert(offsetof(DBDCharacterUtilities_IsTheTrickster, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTrickster::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTrickster, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTrickster::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTwins
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTwins final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTwins) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTwins");
static_assert(sizeof(DBDCharacterUtilities_IsTheTwins) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTwins");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTwins::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTwins::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTwins_Brother
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTwins_Brother final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTwins_Brother) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTwins_Brother");
static_assert(sizeof(DBDCharacterUtilities_IsTheTwins_Brother) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTwins_Brother");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins_Brother, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTwins_Brother::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins_Brother, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTwins_Brother::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheTwins_Sister
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheTwins_Sister final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheTwins_Sister) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheTwins_Sister");
static_assert(sizeof(DBDCharacterUtilities_IsTheTwins_Sister) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheTwins_Sister");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins_Sister, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheTwins_Sister::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheTwins_Sister, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheTwins_Sister::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsTheWraith
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsTheWraith final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsTheWraith) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsTheWraith");
static_assert(sizeof(DBDCharacterUtilities_IsTheWraith) == 0x000010, "Wrong size on DBDCharacterUtilities_IsTheWraith");
static_assert(offsetof(DBDCharacterUtilities_IsTheWraith, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsTheWraith::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsTheWraith, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsTheWraith::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDCharacterUtilities.IsWilliamBillOverbeck
// 0x0010 (0x0010 - 0x0000)
struct DBDCharacterUtilities_IsWilliamBillOverbeck final
{
public:
	const class ADBDBasePlayer*                   TargetPlayer;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDCharacterUtilities_IsWilliamBillOverbeck) == 0x000008, "Wrong alignment on DBDCharacterUtilities_IsWilliamBillOverbeck");
static_assert(sizeof(DBDCharacterUtilities_IsWilliamBillOverbeck) == 0x000010, "Wrong size on DBDCharacterUtilities_IsWilliamBillOverbeck");
static_assert(offsetof(DBDCharacterUtilities_IsWilliamBillOverbeck, TargetPlayer) == 0x000000, "Member 'DBDCharacterUtilities_IsWilliamBillOverbeck::TargetPlayer' has a wrong offset!");
static_assert(offsetof(DBDCharacterUtilities_IsWilliamBillOverbeck, ReturnValue) == 0x000008, "Member 'DBDCharacterUtilities_IsWilliamBillOverbeck::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.CanSkillCheckTypeGrantScore
// 0x0002 (0x0002 - 0x0000)
struct SkillCheck_CanSkillCheckTypeGrantScore final
{
public:
	ESkillCheckCustomType                         Type;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_CanSkillCheckTypeGrantScore) == 0x000001, "Wrong alignment on SkillCheck_CanSkillCheckTypeGrantScore");
static_assert(sizeof(SkillCheck_CanSkillCheckTypeGrantScore) == 0x000002, "Wrong size on SkillCheck_CanSkillCheckTypeGrantScore");
static_assert(offsetof(SkillCheck_CanSkillCheckTypeGrantScore, Type) == 0x000000, "Member 'SkillCheck_CanSkillCheckTypeGrantScore::Type' has a wrong offset!");
static_assert(offsetof(SkillCheck_CanSkillCheckTypeGrantScore, ReturnValue) == 0x000001, "Member 'SkillCheck_CanSkillCheckTypeGrantScore::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Multicast_ActivateSkillCheck
// 0x0038 (0x0038 - 0x0000)
struct SkillCheck_Multicast_ActivateSkillCheck final
{
public:
	class UChargeableInteractionDefinition*       Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         SkillCheckCustomType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillCheckDefinition                  Definition;                                        // 0x000C(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ExecuteOnlyOnNotControlled;                        // 0x0034(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheck_Multicast_ActivateSkillCheck) == 0x000008, "Wrong alignment on SkillCheck_Multicast_ActivateSkillCheck");
static_assert(sizeof(SkillCheck_Multicast_ActivateSkillCheck) == 0x000038, "Wrong size on SkillCheck_Multicast_ActivateSkillCheck");
static_assert(offsetof(SkillCheck_Multicast_ActivateSkillCheck, Interaction) == 0x000000, "Member 'SkillCheck_Multicast_ActivateSkillCheck::Interaction' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_ActivateSkillCheck, SkillCheckCustomType) == 0x000008, "Member 'SkillCheck_Multicast_ActivateSkillCheck::SkillCheckCustomType' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_ActivateSkillCheck, Definition) == 0x00000C, "Member 'SkillCheck_Multicast_ActivateSkillCheck::Definition' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_ActivateSkillCheck, ExecuteOnlyOnNotControlled) == 0x000034, "Member 'SkillCheck_Multicast_ActivateSkillCheck::ExecuteOnlyOnNotControlled' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Multicast_OnTriggerContinuousCustomSkillCheck
// 0x0038 (0x0038 - 0x0000)
struct SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck final
{
public:
	class UChargeableInteractionDefinition*       CurrentInteraction;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         SkillCheckCustomType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillCheckDefinition                  Definition;                                        // 0x000C(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck) == 0x000008, "Wrong alignment on SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck");
static_assert(sizeof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck) == 0x000038, "Wrong size on SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck, CurrentInteraction) == 0x000000, "Member 'SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck::CurrentInteraction' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck, SkillCheckCustomType) == 0x000008, "Member 'SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck::SkillCheckCustomType' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck, Definition) == 0x00000C, "Member 'SkillCheck_Multicast_OnTriggerContinuousCustomSkillCheck::Definition' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Multicast_OnTriggerCustomSkillCheck
// 0x0058 (0x0058 - 0x0000)
struct SkillCheck_Multicast_OnTriggerCustomSkillCheck final
{
public:
	class UChargeableInteractionDefinition*       CurrentInteraction;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         SkillCheckCustomType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ID;                                                // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Salt;                                              // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSkillCheckDefinition                  Definition;                                        // 0x0030(0x0028)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_Multicast_OnTriggerCustomSkillCheck) == 0x000008, "Wrong alignment on SkillCheck_Multicast_OnTriggerCustomSkillCheck");
static_assert(sizeof(SkillCheck_Multicast_OnTriggerCustomSkillCheck) == 0x000058, "Wrong size on SkillCheck_Multicast_OnTriggerCustomSkillCheck");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, CurrentInteraction) == 0x000000, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::CurrentInteraction' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, SkillCheckCustomType) == 0x000008, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::SkillCheckCustomType' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, ID) == 0x000010, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::ID' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, Salt) == 0x000020, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::Salt' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_OnTriggerCustomSkillCheck, Definition) == 0x000030, "Member 'SkillCheck_Multicast_OnTriggerCustomSkillCheck::Definition' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Multicast_SkillCheckResponse
// 0x0028 (0x0028 - 0x0000)
struct SkillCheck_Multicast_SkillCheckResponse final
{
public:
	struct FSkillCheckResponse                    SkillCheckResponse;                                // 0x0000(0x0020)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ExecuteOnlyOnNotControlled;                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheck_Multicast_SkillCheckResponse) == 0x000008, "Wrong alignment on SkillCheck_Multicast_SkillCheckResponse");
static_assert(sizeof(SkillCheck_Multicast_SkillCheckResponse) == 0x000028, "Wrong size on SkillCheck_Multicast_SkillCheckResponse");
static_assert(offsetof(SkillCheck_Multicast_SkillCheckResponse, SkillCheckResponse) == 0x000000, "Member 'SkillCheck_Multicast_SkillCheckResponse::SkillCheckResponse' has a wrong offset!");
static_assert(offsetof(SkillCheck_Multicast_SkillCheckResponse, ExecuteOnlyOnNotControlled) == 0x000020, "Member 'SkillCheck_Multicast_SkillCheckResponse::ExecuteOnlyOnNotControlled' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Server_ActivateSkillCheck
// 0x0038 (0x0038 - 0x0000)
struct SkillCheck_Server_ActivateSkillCheck final
{
public:
	class UChargeableInteractionDefinition*       Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         SkillCheckCustomType;                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSkillCheckDefinition                  Definition;                                        // 0x000C(0x0028)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SkillCheck_Server_ActivateSkillCheck) == 0x000008, "Wrong alignment on SkillCheck_Server_ActivateSkillCheck");
static_assert(sizeof(SkillCheck_Server_ActivateSkillCheck) == 0x000038, "Wrong size on SkillCheck_Server_ActivateSkillCheck");
static_assert(offsetof(SkillCheck_Server_ActivateSkillCheck, Interaction) == 0x000000, "Member 'SkillCheck_Server_ActivateSkillCheck::Interaction' has a wrong offset!");
static_assert(offsetof(SkillCheck_Server_ActivateSkillCheck, SkillCheckCustomType) == 0x000008, "Member 'SkillCheck_Server_ActivateSkillCheck::SkillCheckCustomType' has a wrong offset!");
static_assert(offsetof(SkillCheck_Server_ActivateSkillCheck, Definition) == 0x00000C, "Member 'SkillCheck_Server_ActivateSkillCheck::Definition' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Server_OnSkillCheckFailure
// 0x0020 (0x0020 - 0x0000)
struct SkillCheck_Server_OnSkillCheckFailure final
{
public:
	struct FSkillCheckResponse                    SkillCheckResponse;                                // 0x0000(0x0020)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_Server_OnSkillCheckFailure) == 0x000008, "Wrong alignment on SkillCheck_Server_OnSkillCheckFailure");
static_assert(sizeof(SkillCheck_Server_OnSkillCheckFailure) == 0x000020, "Wrong size on SkillCheck_Server_OnSkillCheckFailure");
static_assert(offsetof(SkillCheck_Server_OnSkillCheckFailure, SkillCheckResponse) == 0x000000, "Member 'SkillCheck_Server_OnSkillCheckFailure::SkillCheckResponse' has a wrong offset!");

// Function DeadByDaylight.SkillCheck.Server_OnSkillCheckSuccess
// 0x0020 (0x0020 - 0x0000)
struct SkillCheck_Server_OnSkillCheckSuccess final
{
public:
	struct FSkillCheckResponse                    SkillCheckResponse;                                // 0x0000(0x0020)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheck_Server_OnSkillCheckSuccess) == 0x000008, "Wrong alignment on SkillCheck_Server_OnSkillCheckSuccess");
static_assert(sizeof(SkillCheck_Server_OnSkillCheckSuccess) == 0x000020, "Wrong size on SkillCheck_Server_OnSkillCheckSuccess");
static_assert(offsetof(SkillCheck_Server_OnSkillCheckSuccess, SkillCheckResponse) == 0x000000, "Member 'SkillCheck_Server_OnSkillCheckSuccess::SkillCheckResponse' has a wrong offset!");

// Function DeadByDaylight.DBDClientSyncer.Multicast_SyncActorToSpawnLocally
// 0x0018 (0x0018 - 0x0000)
struct DBDClientSyncer_Multicast_SyncActorToSpawnLocally final
{
public:
	TArray<struct FSpawnInfo>                     SpawnInfos;                                        // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         StartIndex;                                        // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDClientSyncer_Multicast_SyncActorToSpawnLocally) == 0x000008, "Wrong alignment on DBDClientSyncer_Multicast_SyncActorToSpawnLocally");
static_assert(sizeof(DBDClientSyncer_Multicast_SyncActorToSpawnLocally) == 0x000018, "Wrong size on DBDClientSyncer_Multicast_SyncActorToSpawnLocally");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncActorToSpawnLocally, SpawnInfos) == 0x000000, "Member 'DBDClientSyncer_Multicast_SyncActorToSpawnLocally::SpawnInfos' has a wrong offset!");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncActorToSpawnLocally, StartIndex) == 0x000010, "Member 'DBDClientSyncer_Multicast_SyncActorToSpawnLocally::StartIndex' has a wrong offset!");

// Function DeadByDaylight.DBDClientSyncer.Multicast_SyncFinalLocallySpawnCount
// 0x0004 (0x0004 - 0x0000)
struct DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount final
{
public:
	int32                                         NumLocal;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount) == 0x000004, "Wrong alignment on DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount");
static_assert(sizeof(DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount) == 0x000004, "Wrong size on DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount, NumLocal) == 0x000000, "Member 'DBDClientSyncer_Multicast_SyncFinalLocallySpawnCount::NumLocal' has a wrong offset!");

// Function DeadByDaylight.DBDClientSyncer.Multicast_SyncSeed
// 0x0028 (0x0028 - 0x0000)
struct DBDClientSyncer_Multicast_SyncSeed final
{
public:
	int32                                         Seed;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPaperTileMap*                          TileMap;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GenerationPlayerCount;                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PremadeMap;                                        // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDClientSyncer_Multicast_SyncSeed) == 0x000008, "Wrong alignment on DBDClientSyncer_Multicast_SyncSeed");
static_assert(sizeof(DBDClientSyncer_Multicast_SyncSeed) == 0x000028, "Wrong size on DBDClientSyncer_Multicast_SyncSeed");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncSeed, Seed) == 0x000000, "Member 'DBDClientSyncer_Multicast_SyncSeed::Seed' has a wrong offset!");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncSeed, TileMap) == 0x000008, "Member 'DBDClientSyncer_Multicast_SyncSeed::TileMap' has a wrong offset!");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncSeed, GenerationPlayerCount) == 0x000010, "Member 'DBDClientSyncer_Multicast_SyncSeed::GenerationPlayerCount' has a wrong offset!");
static_assert(offsetof(DBDClientSyncer_Multicast_SyncSeed, PremadeMap) == 0x000018, "Member 'DBDClientSyncer_Multicast_SyncSeed::PremadeMap' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.ApplyArrayOfClipsToDynamicMaterial
// 0x0018 (0x0018 - 0x0000)
struct DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial final
{
public:
	TArray<class UDBDClipRegionComponent*>        InRegions;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               DynamicInstanceToClip;                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial) == 0x000008, "Wrong alignment on DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial");
static_assert(sizeof(DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial) == 0x000018, "Wrong size on DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial");
static_assert(offsetof(DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial, InRegions) == 0x000000, "Member 'DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial::InRegions' has a wrong offset!");
static_assert(offsetof(DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial, DynamicInstanceToClip) == 0x000010, "Member 'DBDClipRegionComponent_ApplyArrayOfClipsToDynamicMaterial::DynamicInstanceToClip' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.ApplyClip
// 0x0010 (0x0010 - 0x0000)
struct DBDClipRegionComponent_ApplyClip final
{
public:
	class UMaterialInstanceDynamic*               InMaterial2clip;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRegionID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDClipRegionComponent_ApplyClip) == 0x000008, "Wrong alignment on DBDClipRegionComponent_ApplyClip");
static_assert(sizeof(DBDClipRegionComponent_ApplyClip) == 0x000010, "Wrong size on DBDClipRegionComponent_ApplyClip");
static_assert(offsetof(DBDClipRegionComponent_ApplyClip, InMaterial2clip) == 0x000000, "Member 'DBDClipRegionComponent_ApplyClip::InMaterial2clip' has a wrong offset!");
static_assert(offsetof(DBDClipRegionComponent_ApplyClip, InRegionID) == 0x000008, "Member 'DBDClipRegionComponent_ApplyClip::InRegionID' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.ApplyClipToDynamicMaterial
// 0x0010 (0x0010 - 0x0000)
struct DBDClipRegionComponent_ApplyClipToDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               DynamicInstanceToClip;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InRegionID;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDClipRegionComponent_ApplyClipToDynamicMaterial) == 0x000008, "Wrong alignment on DBDClipRegionComponent_ApplyClipToDynamicMaterial");
static_assert(sizeof(DBDClipRegionComponent_ApplyClipToDynamicMaterial) == 0x000010, "Wrong size on DBDClipRegionComponent_ApplyClipToDynamicMaterial");
static_assert(offsetof(DBDClipRegionComponent_ApplyClipToDynamicMaterial, DynamicInstanceToClip) == 0x000000, "Member 'DBDClipRegionComponent_ApplyClipToDynamicMaterial::DynamicInstanceToClip' has a wrong offset!");
static_assert(offsetof(DBDClipRegionComponent_ApplyClipToDynamicMaterial, InRegionID) == 0x000008, "Member 'DBDClipRegionComponent_ApplyClipToDynamicMaterial::InRegionID' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.ClipDistance
// 0x0010 (0x0010 - 0x0000)
struct DBDClipRegionComponent_ClipDistance final
{
public:
	class UMeshComponent*                         InMeshComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDClipRegionComponent_ClipDistance) == 0x000008, "Wrong alignment on DBDClipRegionComponent_ClipDistance");
static_assert(sizeof(DBDClipRegionComponent_ClipDistance) == 0x000010, "Wrong size on DBDClipRegionComponent_ClipDistance");
static_assert(offsetof(DBDClipRegionComponent_ClipDistance, InMeshComponent) == 0x000000, "Member 'DBDClipRegionComponent_ClipDistance::InMeshComponent' has a wrong offset!");
static_assert(offsetof(DBDClipRegionComponent_ClipDistance, ReturnValue) == 0x000008, "Member 'DBDClipRegionComponent_ClipDistance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDClipRegionComponent.NotifyShouldClipComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDClipRegionComponent_NotifyShouldClipComponent final
{
public:
	class UMeshComponent*                         InMeshComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDClipRegionComponent_NotifyShouldClipComponent) == 0x000008, "Wrong alignment on DBDClipRegionComponent_NotifyShouldClipComponent");
static_assert(sizeof(DBDClipRegionComponent_NotifyShouldClipComponent) == 0x000008, "Wrong size on DBDClipRegionComponent_NotifyShouldClipComponent");
static_assert(offsetof(DBDClipRegionComponent_NotifyShouldClipComponent, InMeshComponent) == 0x000000, "Member 'DBDClipRegionComponent_NotifyShouldClipComponent::InMeshComponent' has a wrong offset!");

// Function DeadByDaylight.ColorBlindFunctionLibrary.CallOnColorBlindSettingsChange
// 0x0008 (0x0008 - 0x0000)
struct ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange final
{
public:
	class AActor*                                 CallingActor;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange) == 0x000008, "Wrong alignment on ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange");
static_assert(sizeof(ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange) == 0x000008, "Wrong size on ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange");
static_assert(offsetof(ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange, CallingActor) == 0x000000, "Member 'ColorBlindFunctionLibrary_CallOnColorBlindSettingsChange::CallingActor' has a wrong offset!");

// Function DeadByDaylight.TileSpawnPoint.SetActivated
// 0x0001 (0x0001 - 0x0000)
struct TileSpawnPoint_SetActivated final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileSpawnPoint_SetActivated) == 0x000001, "Wrong alignment on TileSpawnPoint_SetActivated");
static_assert(sizeof(TileSpawnPoint_SetActivated) == 0x000001, "Wrong size on TileSpawnPoint_SetActivated");
static_assert(offsetof(TileSpawnPoint_SetActivated, Activated) == 0x000000, "Member 'TileSpawnPoint_SetActivated::Activated' has a wrong offset!");

// Function DeadByDaylight.TileSpawnPoint.GetSpawnedObject
// 0x0008 (0x0008 - 0x0000)
struct TileSpawnPoint_GetSpawnedObject final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileSpawnPoint_GetSpawnedObject) == 0x000008, "Wrong alignment on TileSpawnPoint_GetSpawnedObject");
static_assert(sizeof(TileSpawnPoint_GetSpawnedObject) == 0x000008, "Wrong size on TileSpawnPoint_GetSpawnedObject");
static_assert(offsetof(TileSpawnPoint_GetSpawnedObject, ReturnValue) == 0x000000, "Member 'TileSpawnPoint_GetSpawnedObject::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TileSpawnPoint.IsActivated
// 0x0001 (0x0001 - 0x0000)
struct TileSpawnPoint_IsActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TileSpawnPoint_IsActivated) == 0x000001, "Wrong alignment on TileSpawnPoint_IsActivated");
static_assert(sizeof(TileSpawnPoint_IsActivated) == 0x000001, "Wrong size on TileSpawnPoint_IsActivated");
static_assert(offsetof(TileSpawnPoint_IsActivated, ReturnValue) == 0x000000, "Member 'TileSpawnPoint_IsActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DisplayStandCharmRequesterComponent.OnCharmDisplayed
// 0x0008 (0x0008 - 0x0000)
struct DisplayStandCharmRequesterComponent_OnCharmDisplayed final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStandCharmRequesterComponent_OnCharmDisplayed) == 0x000008, "Wrong alignment on DisplayStandCharmRequesterComponent_OnCharmDisplayed");
static_assert(sizeof(DisplayStandCharmRequesterComponent_OnCharmDisplayed) == 0x000008, "Wrong size on DisplayStandCharmRequesterComponent_OnCharmDisplayed");
static_assert(offsetof(DisplayStandCharmRequesterComponent_OnCharmDisplayed, Actor) == 0x000000, "Member 'DisplayStandCharmRequesterComponent_OnCharmDisplayed::Actor' has a wrong offset!");

// Function DeadByDaylight.RitualEvaluatorBase.EvaluateEvent
// 0x0038 (0x0038 - 0x0000)
struct RitualEvaluatorBase_EvaluateEvent final
{
public:
	struct FRitualEvent                           RitualEvent;                                       // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RitualEvaluatorBase_EvaluateEvent) == 0x000008, "Wrong alignment on RitualEvaluatorBase_EvaluateEvent");
static_assert(sizeof(RitualEvaluatorBase_EvaluateEvent) == 0x000038, "Wrong size on RitualEvaluatorBase_EvaluateEvent");
static_assert(offsetof(RitualEvaluatorBase_EvaluateEvent, RitualEvent) == 0x000000, "Member 'RitualEvaluatorBase_EvaluateEvent::RitualEvent' has a wrong offset!");
static_assert(offsetof(RitualEvaluatorBase_EvaluateEvent, ReturnValue) == 0x000030, "Member 'RitualEvaluatorBase_EvaluateEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TimerGateDecrease.Update
// 0x0004 (0x0004 - 0x0000)
struct TimerGateDecrease_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGateDecrease_Update) == 0x000004, "Wrong alignment on TimerGateDecrease_Update");
static_assert(sizeof(TimerGateDecrease_Update) == 0x000004, "Wrong size on TimerGateDecrease_Update");
static_assert(offsetof(TimerGateDecrease_Update, DeltaTime) == 0x000000, "Member 'TimerGateDecrease_Update::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.DoctorPowerAnimStateComponent.SetCurrentAbilityPhase
// 0x0001 (0x0001 - 0x0000)
struct DoctorPowerAnimStateComponent_SetCurrentAbilityPhase final
{
public:
	EDoctorAbilityPhase                           AbilityPhase;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoctorPowerAnimStateComponent_SetCurrentAbilityPhase) == 0x000001, "Wrong alignment on DoctorPowerAnimStateComponent_SetCurrentAbilityPhase");
static_assert(sizeof(DoctorPowerAnimStateComponent_SetCurrentAbilityPhase) == 0x000001, "Wrong size on DoctorPowerAnimStateComponent_SetCurrentAbilityPhase");
static_assert(offsetof(DoctorPowerAnimStateComponent_SetCurrentAbilityPhase, AbilityPhase) == 0x000000, "Member 'DoctorPowerAnimStateComponent_SetCurrentAbilityPhase::AbilityPhase' has a wrong offset!");

// Function DeadByDaylight.DoctorPowerAnimStateComponent.SetCurrentAbilityType
// 0x0001 (0x0001 - 0x0000)
struct DoctorPowerAnimStateComponent_SetCurrentAbilityType final
{
public:
	EDoctorAbilityType                            AbilityType;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoctorPowerAnimStateComponent_SetCurrentAbilityType) == 0x000001, "Wrong alignment on DoctorPowerAnimStateComponent_SetCurrentAbilityType");
static_assert(sizeof(DoctorPowerAnimStateComponent_SetCurrentAbilityType) == 0x000001, "Wrong size on DoctorPowerAnimStateComponent_SetCurrentAbilityType");
static_assert(offsetof(DoctorPowerAnimStateComponent_SetCurrentAbilityType, AbilityType) == 0x000000, "Member 'DoctorPowerAnimStateComponent_SetCurrentAbilityType::AbilityType' has a wrong offset!");

// Function DeadByDaylight.DBD_SoundClipUtil.Cosmetic_OnSoundTriggered
// 0x0008 (0x0008 - 0x0000)
struct DBD_SoundClipUtil_Cosmetic_OnSoundTriggered final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBD_SoundClipUtil_Cosmetic_OnSoundTriggered) == 0x000008, "Wrong alignment on DBD_SoundClipUtil_Cosmetic_OnSoundTriggered");
static_assert(sizeof(DBD_SoundClipUtil_Cosmetic_OnSoundTriggered) == 0x000008, "Wrong size on DBD_SoundClipUtil_Cosmetic_OnSoundTriggered");
static_assert(offsetof(DBD_SoundClipUtil_Cosmetic_OnSoundTriggered, Actor) == 0x000000, "Member 'DBD_SoundClipUtil_Cosmetic_OnSoundTriggered::Actor' has a wrong offset!");

// Function DeadByDaylight.DBD_SoundClipUtil.GetAudioEventForMesh
// 0x0010 (0x0010 - 0x0000)
struct DBD_SoundClipUtil_GetAudioEventForMesh final
{
public:
	class UStaticMeshComponent*                   Usm;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBD_SoundClipUtil_GetAudioEventForMesh) == 0x000008, "Wrong alignment on DBD_SoundClipUtil_GetAudioEventForMesh");
static_assert(sizeof(DBD_SoundClipUtil_GetAudioEventForMesh) == 0x000010, "Wrong size on DBD_SoundClipUtil_GetAudioEventForMesh");
static_assert(offsetof(DBD_SoundClipUtil_GetAudioEventForMesh, Usm) == 0x000000, "Member 'DBD_SoundClipUtil_GetAudioEventForMesh::Usm' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_GetAudioEventForMesh, ReturnValue) == 0x000008, "Member 'DBD_SoundClipUtil_GetAudioEventForMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBD_SoundClipUtil.OnCharacterEnterSoundRegion
// 0x0110 (0x0110 - 0x0000)
struct DBD_SoundClipUtil_OnCharacterEnterSoundRegion final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion) == 0x000008, "Wrong alignment on DBD_SoundClipUtil_OnCharacterEnterSoundRegion");
static_assert(sizeof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion) == 0x000110, "Wrong size on DBD_SoundClipUtil_OnCharacterEnterSoundRegion");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, HitComponent) == 0x000000, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::HitComponent' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, OtherActor) == 0x000008, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::OtherActor' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, OtherComp) == 0x000010, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::OtherComp' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, OtherBodyIndex) == 0x000018, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, bFromSweep) == 0x00001C, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::bFromSweep' has a wrong offset!");
static_assert(offsetof(DBD_SoundClipUtil_OnCharacterEnterSoundRegion, SweepResult) == 0x000020, "Member 'DBD_SoundClipUtil_OnCharacterEnterSoundRegion::SweepResult' has a wrong offset!");

// Function DeadByDaylight.DBDDebugInputComponent.DBD_ItsAlive
// 0x0001 (0x0001 - 0x0000)
struct DBDDebugInputComponent_DBD_ItsAlive final
{
public:
	bool                                          AliveEnabled;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDebugInputComponent_DBD_ItsAlive) == 0x000001, "Wrong alignment on DBDDebugInputComponent_DBD_ItsAlive");
static_assert(sizeof(DBDDebugInputComponent_DBD_ItsAlive) == 0x000001, "Wrong size on DBDDebugInputComponent_DBD_ItsAlive");
static_assert(offsetof(DBDDebugInputComponent_DBD_ItsAlive, AliveEnabled) == 0x000000, "Member 'DBDDebugInputComponent_DBD_ItsAlive::AliveEnabled' has a wrong offset!");

// Function DeadByDaylight.FranklinsDemiseConsumedByEntityComponent.Authority_StartConsume
// 0x0018 (0x0018 - 0x0000)
struct FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             PreviousOwner;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Slasher;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume) == 0x000008, "Wrong alignment on FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume");
static_assert(sizeof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume) == 0x000018, "Wrong size on FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume");
static_assert(offsetof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume, Duration) == 0x000000, "Member 'FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume::Duration' has a wrong offset!");
static_assert(offsetof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume, PreviousOwner) == 0x000008, "Member 'FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume::PreviousOwner' has a wrong offset!");
static_assert(offsetof(FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume, Slasher) == 0x000010, "Member 'FranklinsDemiseConsumedByEntityComponent_Authority_StartConsume::Slasher' has a wrong offset!");

// Function DeadByDaylight.SlasherMovementComponent.GetBaseMaxSpeed
// 0x0004 (0x0004 - 0x0000)
struct SlasherMovementComponent_GetBaseMaxSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherMovementComponent_GetBaseMaxSpeed) == 0x000004, "Wrong alignment on SlasherMovementComponent_GetBaseMaxSpeed");
static_assert(sizeof(SlasherMovementComponent_GetBaseMaxSpeed) == 0x000004, "Wrong size on SlasherMovementComponent_GetBaseMaxSpeed");
static_assert(offsetof(SlasherMovementComponent_GetBaseMaxSpeed, ReturnValue) == 0x000000, "Member 'SlasherMovementComponent_GetBaseMaxSpeed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FriendSearchPopupScreen.OnAcceptFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendSearchPopupScreen_OnAcceptFriendInvite final
{
public:
	class FString                                 FriendKrakenID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSearchPopupScreen_OnAcceptFriendInvite) == 0x000008, "Wrong alignment on FriendSearchPopupScreen_OnAcceptFriendInvite");
static_assert(sizeof(FriendSearchPopupScreen_OnAcceptFriendInvite) == 0x000010, "Wrong size on FriendSearchPopupScreen_OnAcceptFriendInvite");
static_assert(offsetof(FriendSearchPopupScreen_OnAcceptFriendInvite, FriendKrakenID) == 0x000000, "Member 'FriendSearchPopupScreen_OnAcceptFriendInvite::FriendKrakenID' has a wrong offset!");

// Function DeadByDaylight.FriendSearchPopupScreen.OnFriendSearchStart
// 0x0010 (0x0010 - 0x0000)
struct FriendSearchPopupScreen_OnFriendSearchStart final
{
public:
	class FString                                 SearchText;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSearchPopupScreen_OnFriendSearchStart) == 0x000008, "Wrong alignment on FriendSearchPopupScreen_OnFriendSearchStart");
static_assert(sizeof(FriendSearchPopupScreen_OnFriendSearchStart) == 0x000010, "Wrong size on FriendSearchPopupScreen_OnFriendSearchStart");
static_assert(offsetof(FriendSearchPopupScreen_OnFriendSearchStart, SearchText) == 0x000000, "Member 'FriendSearchPopupScreen_OnFriendSearchStart::SearchText' has a wrong offset!");

// Function DeadByDaylight.FriendSearchPopupScreen.OnInviteFriend
// 0x0018 (0x0018 - 0x0000)
struct FriendSearchPopupScreen_OnInviteFriend final
{
public:
	class FString                                 FriendKrakenID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOffNetwork;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FriendSearchPopupScreen_OnInviteFriend) == 0x000008, "Wrong alignment on FriendSearchPopupScreen_OnInviteFriend");
static_assert(sizeof(FriendSearchPopupScreen_OnInviteFriend) == 0x000018, "Wrong size on FriendSearchPopupScreen_OnInviteFriend");
static_assert(offsetof(FriendSearchPopupScreen_OnInviteFriend, FriendKrakenID) == 0x000000, "Member 'FriendSearchPopupScreen_OnInviteFriend::FriendKrakenID' has a wrong offset!");
static_assert(offsetof(FriendSearchPopupScreen_OnInviteFriend, IsOffNetwork) == 0x000010, "Member 'FriendSearchPopupScreen_OnInviteFriend::IsOffNetwork' has a wrong offset!");

// Function DeadByDaylight.FriendSearchPopupScreen.OnUnblockPlayer
// 0x0010 (0x0010 - 0x0000)
struct FriendSearchPopupScreen_OnUnblockPlayer final
{
public:
	class FString                                 FriendKrakenID;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendSearchPopupScreen_OnUnblockPlayer) == 0x000008, "Wrong alignment on FriendSearchPopupScreen_OnUnblockPlayer");
static_assert(sizeof(FriendSearchPopupScreen_OnUnblockPlayer) == 0x000010, "Wrong size on FriendSearchPopupScreen_OnUnblockPlayer");
static_assert(offsetof(FriendSearchPopupScreen_OnUnblockPlayer, FriendKrakenID) == 0x000000, "Member 'FriendSearchPopupScreen_OnUnblockPlayer::FriendKrakenID' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.CalculateOverTimeRollResult
// 0x0020 (0x0020 - 0x0000)
struct DBDDiceRoller_CalculateOverTimeRollResult final
{
public:
	const class AActor*                           RollingActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseProbability;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectedTime;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_CalculateOverTimeRollResult) == 0x000008, "Wrong alignment on DBDDiceRoller_CalculateOverTimeRollResult");
static_assert(sizeof(DBDDiceRoller_CalculateOverTimeRollResult) == 0x000020, "Wrong size on DBDDiceRoller_CalculateOverTimeRollResult");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, RollingActor) == 0x000000, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::RollingActor' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, BaseProbability) == 0x000008, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, DeltaTime) == 0x00000C, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::DeltaTime' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, ExpectedTime) == 0x000010, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::ExpectedTime' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, MultiplicativeModifier) == 0x000014, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, AdditiveModifier) == 0x000018, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::AdditiveModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateOverTimeRollResult, ReturnValue) == 0x00001C, "Member 'DBDDiceRoller_CalculateOverTimeRollResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.CalculateRollResult
// 0x0018 (0x0018 - 0x0000)
struct DBDDiceRoller_CalculateRollResult final
{
public:
	const class AActor*                           RollingActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseProbability;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_CalculateRollResult) == 0x000008, "Wrong alignment on DBDDiceRoller_CalculateRollResult");
static_assert(sizeof(DBDDiceRoller_CalculateRollResult) == 0x000018, "Wrong size on DBDDiceRoller_CalculateRollResult");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, RollingActor) == 0x000000, "Member 'DBDDiceRoller_CalculateRollResult::RollingActor' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, BaseProbability) == 0x000008, "Member 'DBDDiceRoller_CalculateRollResult::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, MultiplicativeModifier) == 0x00000C, "Member 'DBDDiceRoller_CalculateRollResult::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, AdditiveModifier) == 0x000010, "Member 'DBDDiceRoller_CalculateRollResult::AdditiveModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateRollResult, ReturnValue) == 0x000014, "Member 'DBDDiceRoller_CalculateRollResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.CalculateTickedRollResult
// 0x0020 (0x0020 - 0x0000)
struct DBDDiceRoller_CalculateTickedRollResult final
{
public:
	const class AActor*                           RollingActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseProbability;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ticks;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_CalculateTickedRollResult) == 0x000008, "Wrong alignment on DBDDiceRoller_CalculateTickedRollResult");
static_assert(sizeof(DBDDiceRoller_CalculateTickedRollResult) == 0x000020, "Wrong size on DBDDiceRoller_CalculateTickedRollResult");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, RollingActor) == 0x000000, "Member 'DBDDiceRoller_CalculateTickedRollResult::RollingActor' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, BaseProbability) == 0x000008, "Member 'DBDDiceRoller_CalculateTickedRollResult::BaseProbability' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, Ticks) == 0x00000C, "Member 'DBDDiceRoller_CalculateTickedRollResult::Ticks' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, MultiplicativeModifier) == 0x000010, "Member 'DBDDiceRoller_CalculateTickedRollResult::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, AdditiveModifier) == 0x000014, "Member 'DBDDiceRoller_CalculateTickedRollResult::AdditiveModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_CalculateTickedRollResult, ReturnValue) == 0x000018, "Member 'DBDDiceRoller_CalculateTickedRollResult::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.GetInteractionRollSuccessPercentageByDiceRollType
// 0x0018 (0x0018 - 0x0000)
struct DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType final
{
public:
	const class UInteractionDefinition*           Interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       RollingPlayer;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDiceRollType                                 DiceRollType;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType) == 0x000008, "Wrong alignment on DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType");
static_assert(sizeof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType) == 0x000018, "Wrong size on DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType");
static_assert(offsetof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType, Interaction) == 0x000000, "Member 'DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType::Interaction' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType, RollingPlayer) == 0x000008, "Member 'DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType::RollingPlayer' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType, DiceRollType) == 0x000010, "Member 'DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType::DiceRollType' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType, ReturnValue) == 0x000014, "Member 'DBDDiceRoller_GetInteractionRollSuccessPercentageByDiceRollType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.GetRollResultByDiceRollType
// 0x0010 (0x0010 - 0x0000)
struct DBDDiceRoller_GetRollResultByDiceRollType final
{
public:
	const class ADBDPlayer*                       RollingPlayer;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDiceRollType                                 DiceRollType;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_GetRollResultByDiceRollType) == 0x000008, "Wrong alignment on DBDDiceRoller_GetRollResultByDiceRollType");
static_assert(sizeof(DBDDiceRoller_GetRollResultByDiceRollType) == 0x000010, "Wrong size on DBDDiceRoller_GetRollResultByDiceRollType");
static_assert(offsetof(DBDDiceRoller_GetRollResultByDiceRollType, RollingPlayer) == 0x000000, "Member 'DBDDiceRoller_GetRollResultByDiceRollType::RollingPlayer' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByDiceRollType, DiceRollType) == 0x000008, "Member 'DBDDiceRoller_GetRollResultByDiceRollType::DiceRollType' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByDiceRollType, ReturnValue) == 0x000009, "Member 'DBDDiceRoller_GetRollResultByDiceRollType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDDiceRoller.GetRollResultByTunableValue
// 0x0020 (0x0020 - 0x0000)
struct DBDDiceRoller_GetRollResultByTunableValue final
{
public:
	const class AActor*                           RollingActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TunableValueName;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiplicativeModifier;                            // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdditiveModifier;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDDiceRoller_GetRollResultByTunableValue) == 0x000008, "Wrong alignment on DBDDiceRoller_GetRollResultByTunableValue");
static_assert(sizeof(DBDDiceRoller_GetRollResultByTunableValue) == 0x000020, "Wrong size on DBDDiceRoller_GetRollResultByTunableValue");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, RollingActor) == 0x000000, "Member 'DBDDiceRoller_GetRollResultByTunableValue::RollingActor' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, TunableValueName) == 0x000008, "Member 'DBDDiceRoller_GetRollResultByTunableValue::TunableValueName' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, MultiplicativeModifier) == 0x000014, "Member 'DBDDiceRoller_GetRollResultByTunableValue::MultiplicativeModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, AdditiveModifier) == 0x000018, "Member 'DBDDiceRoller_GetRollResultByTunableValue::AdditiveModifier' has a wrong offset!");
static_assert(offsetof(DBDDiceRoller_GetRollResultByTunableValue, ReturnValue) == 0x00001C, "Member 'DBDDiceRoller_GetRollResultByTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorHitCosmeticHandler.OnMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct SurvivorHitCosmeticHandler_OnMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorHitCosmeticHandler_OnMontageStarted) == 0x000008, "Wrong alignment on SurvivorHitCosmeticHandler_OnMontageStarted");
static_assert(sizeof(SurvivorHitCosmeticHandler_OnMontageStarted) == 0x000028, "Wrong size on SurvivorHitCosmeticHandler_OnMontageStarted");
static_assert(offsetof(SurvivorHitCosmeticHandler_OnMontageStarted, AnimMontageID) == 0x000000, "Member 'SurvivorHitCosmeticHandler_OnMontageStarted::AnimMontageID' has a wrong offset!");
static_assert(offsetof(SurvivorHitCosmeticHandler_OnMontageStarted, PlayRate) == 0x000020, "Member 'SurvivorHitCosmeticHandler_OnMontageStarted::PlayRate' has a wrong offset!");

// Function DeadByDaylight.GameObjectiveBase.OnRep_IsCompleted
// 0x0001 (0x0001 - 0x0000)
struct GameObjectiveBase_OnRep_IsCompleted final
{
public:
	bool                                          WasCompleted;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameObjectiveBase_OnRep_IsCompleted) == 0x000001, "Wrong alignment on GameObjectiveBase_OnRep_IsCompleted");
static_assert(sizeof(GameObjectiveBase_OnRep_IsCompleted) == 0x000001, "Wrong size on GameObjectiveBase_OnRep_IsCompleted");
static_assert(offsetof(GameObjectiveBase_OnRep_IsCompleted, WasCompleted) == 0x000000, "Member 'GameObjectiveBase_OnRep_IsCompleted::WasCompleted' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.Authority_AccumulateOngoingGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OngoingWaitTime;                                   // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                CustomObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent");
static_assert(sizeof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, WorldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, GameEventType) == 0x000008, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, Instigator) == 0x000018, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::Instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, Target) == 0x000020, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::Target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, CustomValue) == 0x000028, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::CustomValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, OngoingWaitTime) == 0x00002C, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::OngoingWaitTime' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, CustomObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::CustomObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent, CustomIntValue) == 0x000038, "Member 'DBDGameEventUtilities_Authority_AccumulateOngoingGameEvent::CustomIntValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.Authority_DispatcherFireGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_Authority_DispatcherFireGameEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          broadcastOverNetwork;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CustomObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_Authority_DispatcherFireGameEvent");
static_assert(sizeof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_Authority_DispatcherFireGameEvent");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, WorldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, GameEventType) == 0x000008, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, broadcastOverNetwork) == 0x000014, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::broadcastOverNetwork' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, Instigator) == 0x000018, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::Instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, Target) == 0x000020, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::Target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, CustomValue) == 0x000028, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::CustomValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, CustomObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::CustomObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_Authority_DispatcherFireGameEvent, CustomIntValue) == 0x000038, "Member 'DBDGameEventUtilities_Authority_DispatcherFireGameEvent::CustomIntValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.DispatcherFireGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_DispatcherFireGameEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          broadcastOverNetwork;                              // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CustomObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_DispatcherFireGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_DispatcherFireGameEvent");
static_assert(sizeof(DBDGameEventUtilities_DispatcherFireGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_DispatcherFireGameEvent");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, WorldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, GameEventType) == 0x000008, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, broadcastOverNetwork) == 0x000014, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::broadcastOverNetwork' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, Instigator) == 0x000018, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::Instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, Target) == 0x000020, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::Target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, CustomValue) == 0x000028, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::CustomValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, CustomObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::CustomObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_DispatcherFireGameEvent, CustomIntValue) == 0x000038, "Member 'DBDGameEventUtilities_DispatcherFireGameEvent::CustomIntValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.LocallyDispatchGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_LocallyDispatchGameEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CustomObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_LocallyDispatchGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_LocallyDispatchGameEvent");
static_assert(sizeof(DBDGameEventUtilities_LocallyDispatchGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_LocallyDispatchGameEvent");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, WorldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, GameEventType) == 0x000008, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, Instigator) == 0x000018, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::Instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, Target) == 0x000020, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::Target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, CustomValue) == 0x000028, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::CustomValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, CustomObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::CustomObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_LocallyDispatchGameEvent, CustomIntValue) == 0x000038, "Member 'DBDGameEventUtilities_LocallyDispatchGameEvent::CustomIntValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameEventUtilities.RemotelyDispatchGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DBDGameEventUtilities_RemotelyDispatchGameEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameEventType;                                     // 0x0008(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Instigator;                                        // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomValue;                                       // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CustomObjectParameter;                             // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CustomIntValue;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGameEventUtilities_RemotelyDispatchGameEvent) == 0x000008, "Wrong alignment on DBDGameEventUtilities_RemotelyDispatchGameEvent");
static_assert(sizeof(DBDGameEventUtilities_RemotelyDispatchGameEvent) == 0x000040, "Wrong size on DBDGameEventUtilities_RemotelyDispatchGameEvent");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, WorldContextObject) == 0x000000, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, GameEventType) == 0x000008, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, Instigator) == 0x000018, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::Instigator' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, Target) == 0x000020, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::Target' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, CustomValue) == 0x000028, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::CustomValue' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, CustomObjectParameter) == 0x000030, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::CustomObjectParameter' has a wrong offset!");
static_assert(offsetof(DBDGameEventUtilities_RemotelyDispatchGameEvent, CustomIntValue) == 0x000038, "Member 'DBDGameEventUtilities_RemotelyDispatchGameEvent::CustomIntValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.ActivateAI
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_ActivateAI final
{
public:
	bool                                          Activate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerRank;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_ActivateAI) == 0x000004, "Wrong alignment on DBDPlayerController_ActivateAI");
static_assert(sizeof(DBDPlayerController_ActivateAI) == 0x000008, "Wrong size on DBDPlayerController_ActivateAI");
static_assert(offsetof(DBDPlayerController_ActivateAI, Activate) == 0x000000, "Member 'DBDPlayerController_ActivateAI::Activate' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_ActivateAI, PlayerRank) == 0x000004, "Member 'DBDPlayerController_ActivateAI::PlayerRank' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Client_SetPlayerFinishStats
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Client_SetPlayerFinishStats final
{
public:
	struct FPlayerFinishStats                     Stats;                                             // 0x0000(0x0001)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Client_SetPlayerFinishStats) == 0x000001, "Wrong alignment on DBDPlayerController_Client_SetPlayerFinishStats");
static_assert(sizeof(DBDPlayerController_Client_SetPlayerFinishStats) == 0x000001, "Wrong size on DBDPlayerController_Client_SetPlayerFinishStats");
static_assert(offsetof(DBDPlayerController_Client_SetPlayerFinishStats, Stats) == 0x000000, "Member 'DBDPlayerController_Client_SetPlayerFinishStats::Stats' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Client_SetSpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Client_SetSpectatorMode final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Client_SetSpectatorMode) == 0x000001, "Wrong alignment on DBDPlayerController_Client_SetSpectatorMode");
static_assert(sizeof(DBDPlayerController_Client_SetSpectatorMode) == 0x000001, "Wrong size on DBDPlayerController_Client_SetSpectatorMode");
static_assert(offsetof(DBDPlayerController_Client_SetSpectatorMode, On) == 0x000000, "Member 'DBDPlayerController_Client_SetSpectatorMode::On' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Client_SetSpectatorModeInEditor
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_Client_SetSpectatorModeInEditor final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayerState*                        SpectatingPlayerState;                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Client_SetSpectatorModeInEditor) == 0x000008, "Wrong alignment on DBDPlayerController_Client_SetSpectatorModeInEditor");
static_assert(sizeof(DBDPlayerController_Client_SetSpectatorModeInEditor) == 0x000010, "Wrong size on DBDPlayerController_Client_SetSpectatorModeInEditor");
static_assert(offsetof(DBDPlayerController_Client_SetSpectatorModeInEditor, On) == 0x000000, "Member 'DBDPlayerController_Client_SetSpectatorModeInEditor::On' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Client_SetSpectatorModeInEditor, SpectatingPlayerState) == 0x000008, "Member 'DBDPlayerController_Client_SetSpectatorModeInEditor::SpectatingPlayerState' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Client_SpectateAI
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_Client_SpectateAI final
{
public:
	class APawn*                                  AiPawn;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Client_SpectateAI) == 0x000008, "Wrong alignment on DBDPlayerController_Client_SpectateAI");
static_assert(sizeof(DBDPlayerController_Client_SpectateAI) == 0x000008, "Wrong size on DBDPlayerController_Client_SpectateAI");
static_assert(offsetof(DBDPlayerController_Client_SpectateAI, AiPawn) == 0x000000, "Member 'DBDPlayerController_Client_SpectateAI::AiPawn' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_ClientTimeSinceLastLoadingProgress
// 0x0004 (0x0004 - 0x0000)
struct DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress final
{
public:
	float                                         LastProgression;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress) == 0x000004, "Wrong alignment on DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress");
static_assert(sizeof(DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress) == 0x000004, "Wrong size on DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress");
static_assert(offsetof(DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress, LastProgression) == 0x000000, "Member 'DBDPlayerController_Server_ClientTimeSinceLastLoadingProgress::LastProgression' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_DebugSend
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_Server_DebugSend final
{
public:
	class FString                                 Data;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_DebugSend) == 0x000008, "Wrong alignment on DBDPlayerController_Server_DebugSend");
static_assert(sizeof(DBDPlayerController_Server_DebugSend) == 0x000010, "Wrong size on DBDPlayerController_Server_DebugSend");
static_assert(offsetof(DBDPlayerController_Server_DebugSend, Data) == 0x000000, "Member 'DBDPlayerController_Server_DebugSend::Data' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_ForceGameObjectivesCompleted
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Server_ForceGameObjectivesCompleted final
{
public:
	bool                                          COMPLETED;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_ForceGameObjectivesCompleted) == 0x000001, "Wrong alignment on DBDPlayerController_Server_ForceGameObjectivesCompleted");
static_assert(sizeof(DBDPlayerController_Server_ForceGameObjectivesCompleted) == 0x000001, "Wrong size on DBDPlayerController_Server_ForceGameObjectivesCompleted");
static_assert(offsetof(DBDPlayerController_Server_ForceGameObjectivesCompleted, COMPLETED) == 0x000000, "Member 'DBDPlayerController_Server_ForceGameObjectivesCompleted::COMPLETED' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_InitiateSecretRewardProcess
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_Server_InitiateSecretRewardProcess final
{
public:
	TArray<class FName>                           UnclaimedIds;                                      // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_InitiateSecretRewardProcess) == 0x000008, "Wrong alignment on DBDPlayerController_Server_InitiateSecretRewardProcess");
static_assert(sizeof(DBDPlayerController_Server_InitiateSecretRewardProcess) == 0x000010, "Wrong size on DBDPlayerController_Server_InitiateSecretRewardProcess");
static_assert(offsetof(DBDPlayerController_Server_InitiateSecretRewardProcess, UnclaimedIds) == 0x000000, "Member 'DBDPlayerController_Server_InitiateSecretRewardProcess::UnclaimedIds' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_LeaveGame
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Server_LeaveGame final
{
public:
	bool                                          JoiningLobby;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_LeaveGame) == 0x000001, "Wrong alignment on DBDPlayerController_Server_LeaveGame");
static_assert(sizeof(DBDPlayerController_Server_LeaveGame) == 0x000001, "Wrong size on DBDPlayerController_Server_LeaveGame");
static_assert(offsetof(DBDPlayerController_Server_LeaveGame, JoiningLobby) == 0x000000, "Member 'DBDPlayerController_Server_LeaveGame::JoiningLobby' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_SetSpectatorMode
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_Server_SetSpectatorMode final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_SetSpectatorMode) == 0x000001, "Wrong alignment on DBDPlayerController_Server_SetSpectatorMode");
static_assert(sizeof(DBDPlayerController_Server_SetSpectatorMode) == 0x000001, "Wrong size on DBDPlayerController_Server_SetSpectatorMode");
static_assert(offsetof(DBDPlayerController_Server_SetSpectatorMode, On) == 0x000000, "Member 'DBDPlayerController_Server_SetSpectatorMode::On' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.Server_SetSpectatorModeInEditor
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_Server_SetSpectatorModeInEditor final
{
public:
	bool                                          On;                                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayerState*                        SpectatingPlayerState;                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_Server_SetSpectatorModeInEditor) == 0x000008, "Wrong alignment on DBDPlayerController_Server_SetSpectatorModeInEditor");
static_assert(sizeof(DBDPlayerController_Server_SetSpectatorModeInEditor) == 0x000010, "Wrong size on DBDPlayerController_Server_SetSpectatorModeInEditor");
static_assert(offsetof(DBDPlayerController_Server_SetSpectatorModeInEditor, On) == 0x000000, "Member 'DBDPlayerController_Server_SetSpectatorModeInEditor::On' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_Server_SetSpectatorModeInEditor, SpectatingPlayerState) == 0x000008, "Member 'DBDPlayerController_Server_SetSpectatorModeInEditor::SpectatingPlayerState' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.ServerViewPlayer
// 0x0010 (0x0010 - 0x0000)
struct DBDPlayerController_ServerViewPlayer final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_ServerViewPlayer) == 0x000008, "Wrong alignment on DBDPlayerController_ServerViewPlayer");
static_assert(sizeof(DBDPlayerController_ServerViewPlayer) == 0x000010, "Wrong size on DBDPlayerController_ServerViewPlayer");
static_assert(offsetof(DBDPlayerController_ServerViewPlayer, PlayerName) == 0x000000, "Member 'DBDPlayerController_ServerViewPlayer::PlayerName' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.GetAIPawn
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_GetAIPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_GetAIPawn) == 0x000008, "Wrong alignment on DBDPlayerController_GetAIPawn");
static_assert(sizeof(DBDPlayerController_GetAIPawn) == 0x000008, "Wrong size on DBDPlayerController_GetAIPawn");
static_assert(offsetof(DBDPlayerController_GetAIPawn, ReturnValue) == 0x000000, "Member 'DBDPlayerController_GetAIPawn::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.GetControlledPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_GetControlledPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_GetControlledPlayer) == 0x000008, "Wrong alignment on DBDPlayerController_GetControlledPlayer");
static_assert(sizeof(DBDPlayerController_GetControlledPlayer) == 0x000008, "Wrong size on DBDPlayerController_GetControlledPlayer");
static_assert(offsetof(DBDPlayerController_GetControlledPlayer, ReturnValue) == 0x000000, "Member 'DBDPlayerController_GetControlledPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.GetSpectatedPlayer
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_GetSpectatedPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_GetSpectatedPlayer) == 0x000008, "Wrong alignment on DBDPlayerController_GetSpectatedPlayer");
static_assert(sizeof(DBDPlayerController_GetSpectatedPlayer) == 0x000008, "Wrong size on DBDPlayerController_GetSpectatedPlayer");
static_assert(offsetof(DBDPlayerController_GetSpectatedPlayer, ReturnValue) == 0x000000, "Member 'DBDPlayerController_GetSpectatedPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.GetSpectatedPlayerState
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_GetSpectatedPlayerState final
{
public:
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_GetSpectatedPlayerState) == 0x000008, "Wrong alignment on DBDPlayerController_GetSpectatedPlayerState");
static_assert(sizeof(DBDPlayerController_GetSpectatedPlayerState) == 0x000008, "Wrong size on DBDPlayerController_GetSpectatedPlayerState");
static_assert(offsetof(DBDPlayerController_GetSpectatedPlayerState, ReturnValue) == 0x000000, "Member 'DBDPlayerController_GetSpectatedPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.IsSpectating
// 0x0001 (0x0001 - 0x0000)
struct DBDPlayerController_IsSpectating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDPlayerController_IsSpectating) == 0x000001, "Wrong alignment on DBDPlayerController_IsSpectating");
static_assert(sizeof(DBDPlayerController_IsSpectating) == 0x000001, "Wrong size on DBDPlayerController_IsSpectating");
static_assert(offsetof(DBDPlayerController_IsSpectating, ReturnValue) == 0x000000, "Member 'DBDPlayerController_IsSpectating::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDPlayerController.MobileJoystickInput_Pressed
// 0x0008 (0x0008 - 0x0000)
struct DBDPlayerController_MobileJoystickInput_Pressed final
{
public:
	int32                                         JoystickIndex;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDPlayerController_MobileJoystickInput_Pressed) == 0x000004, "Wrong alignment on DBDPlayerController_MobileJoystickInput_Pressed");
static_assert(sizeof(DBDPlayerController_MobileJoystickInput_Pressed) == 0x000008, "Wrong size on DBDPlayerController_MobileJoystickInput_Pressed");
static_assert(offsetof(DBDPlayerController_MobileJoystickInput_Pressed, JoystickIndex) == 0x000000, "Member 'DBDPlayerController_MobileJoystickInput_Pressed::JoystickIndex' has a wrong offset!");
static_assert(offsetof(DBDPlayerController_MobileJoystickInput_Pressed, ReturnValue) == 0x000004, "Member 'DBDPlayerController_MobileJoystickInput_Pressed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetDBDGameUserSettings
// 0x0008 (0x0008 - 0x0000)
struct DBDGameUserSettings_GetDBDGameUserSettings final
{
public:
	class UDBDGameUserSettings*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetDBDGameUserSettings) == 0x000008, "Wrong alignment on DBDGameUserSettings_GetDBDGameUserSettings");
static_assert(sizeof(DBDGameUserSettings_GetDBDGameUserSettings) == 0x000008, "Wrong size on DBDGameUserSettings_GetDBDGameUserSettings");
static_assert(offsetof(DBDGameUserSettings_GetDBDGameUserSettings, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetDBDGameUserSettings::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetArchivesChallengeProgression
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetArchivesChallengeProgression final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetArchivesChallengeProgression) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetArchivesChallengeProgression");
static_assert(sizeof(DBDGameUserSettings_GetArchivesChallengeProgression) == 0x000001, "Wrong size on DBDGameUserSettings_GetArchivesChallengeProgression");
static_assert(offsetof(DBDGameUserSettings_GetArchivesChallengeProgression, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetArchivesChallengeProgression::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetBloodwebInteractionBehaviour
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetBloodwebInteractionBehaviour final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetBloodwebInteractionBehaviour) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetBloodwebInteractionBehaviour");
static_assert(sizeof(DBDGameUserSettings_GetBloodwebInteractionBehaviour) == 0x000001, "Wrong size on DBDGameUserSettings_GetBloodwebInteractionBehaviour");
static_assert(offsetof(DBDGameUserSettings_GetBloodwebInteractionBehaviour, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetBloodwebInteractionBehaviour::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetColorBlindMode
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetColorBlindMode final
{
public:
	EColorVisionDeficiency                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetColorBlindMode) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetColorBlindMode");
static_assert(sizeof(DBDGameUserSettings_GetColorBlindMode) == 0x000001, "Wrong size on DBDGameUserSettings_GetColorBlindMode");
static_assert(offsetof(DBDGameUserSettings_GetColorBlindMode, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetColorBlindMode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetColorBlindModeIntensity
// 0x0004 (0x0004 - 0x0000)
struct DBDGameUserSettings_GetColorBlindModeIntensity final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetColorBlindModeIntensity) == 0x000004, "Wrong alignment on DBDGameUserSettings_GetColorBlindModeIntensity");
static_assert(sizeof(DBDGameUserSettings_GetColorBlindModeIntensity) == 0x000004, "Wrong size on DBDGameUserSettings_GetColorBlindModeIntensity");
static_assert(offsetof(DBDGameUserSettings_GetColorBlindModeIntensity, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetColorBlindModeIntensity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct DBDGameUserSettings_GetFieldOfView final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetFieldOfView) == 0x000004, "Wrong alignment on DBDGameUserSettings_GetFieldOfView");
static_assert(sizeof(DBDGameUserSettings_GetFieldOfView) == 0x000004, "Wrong size on DBDGameUserSettings_GetFieldOfView");
static_assert(offsetof(DBDGameUserSettings_GetFieldOfView, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetFieldOfView::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetHUDKillerHookCountVisibility
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetHUDKillerHookCountVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetHUDKillerHookCountVisibility) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetHUDKillerHookCountVisibility");
static_assert(sizeof(DBDGameUserSettings_GetHUDKillerHookCountVisibility) == 0x000001, "Wrong size on DBDGameUserSettings_GetHUDKillerHookCountVisibility");
static_assert(offsetof(DBDGameUserSettings_GetHUDKillerHookCountVisibility, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetHUDKillerHookCountVisibility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetHUDPlayerNamesVisibility
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetHUDPlayerNamesVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetHUDPlayerNamesVisibility) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetHUDPlayerNamesVisibility");
static_assert(sizeof(DBDGameUserSettings_GetHUDPlayerNamesVisibility) == 0x000001, "Wrong size on DBDGameUserSettings_GetHUDPlayerNamesVisibility");
static_assert(offsetof(DBDGameUserSettings_GetHUDPlayerNamesVisibility, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetHUDPlayerNamesVisibility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetHudScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct DBDGameUserSettings_GetHudScaleFactor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetHudScaleFactor) == 0x000004, "Wrong alignment on DBDGameUserSettings_GetHudScaleFactor");
static_assert(sizeof(DBDGameUserSettings_GetHudScaleFactor) == 0x000004, "Wrong size on DBDGameUserSettings_GetHudScaleFactor");
static_assert(offsetof(DBDGameUserSettings_GetHudScaleFactor, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetHudScaleFactor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetHUDScoreEventsVisibility
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetHUDScoreEventsVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetHUDScoreEventsVisibility) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetHUDScoreEventsVisibility");
static_assert(sizeof(DBDGameUserSettings_GetHUDScoreEventsVisibility) == 0x000001, "Wrong size on DBDGameUserSettings_GetHUDScoreEventsVisibility");
static_assert(offsetof(DBDGameUserSettings_GetHUDScoreEventsVisibility, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetHUDScoreEventsVisibility::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetHUDUseItemPickupPopupAbridgedVersion
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetHUDUseItemPickupPopupAbridgedVersion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetHUDUseItemPickupPopupAbridgedVersion) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetHUDUseItemPickupPopupAbridgedVersion");
static_assert(sizeof(DBDGameUserSettings_GetHUDUseItemPickupPopupAbridgedVersion) == 0x000001, "Wrong size on DBDGameUserSettings_GetHUDUseItemPickupPopupAbridgedVersion");
static_assert(offsetof(DBDGameUserSettings_GetHUDUseItemPickupPopupAbridgedVersion, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetHUDUseItemPickupPopupAbridgedVersion::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetLargeText
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetLargeText final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetLargeText) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetLargeText");
static_assert(sizeof(DBDGameUserSettings_GetLargeText) == 0x000001, "Wrong size on DBDGameUserSettings_GetLargeText");
static_assert(offsetof(DBDGameUserSettings_GetLargeText, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetLargeText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetLegacyPrestigePortraits
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetLegacyPrestigePortraits final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetLegacyPrestigePortraits) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetLegacyPrestigePortraits");
static_assert(sizeof(DBDGameUserSettings_GetLegacyPrestigePortraits) == 0x000001, "Wrong size on DBDGameUserSettings_GetLegacyPrestigePortraits");
static_assert(offsetof(DBDGameUserSettings_GetLegacyPrestigePortraits, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetLegacyPrestigePortraits::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetMenuScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct DBDGameUserSettings_GetMenuScaleFactor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetMenuScaleFactor) == 0x000004, "Wrong alignment on DBDGameUserSettings_GetMenuScaleFactor");
static_assert(sizeof(DBDGameUserSettings_GetMenuScaleFactor) == 0x000004, "Wrong size on DBDGameUserSettings_GetMenuScaleFactor");
static_assert(offsetof(DBDGameUserSettings_GetMenuScaleFactor, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetMenuScaleFactor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetSkillCheckScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct DBDGameUserSettings_GetSkillCheckScaleFactor final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetSkillCheckScaleFactor) == 0x000004, "Wrong alignment on DBDGameUserSettings_GetSkillCheckScaleFactor");
static_assert(sizeof(DBDGameUserSettings_GetSkillCheckScaleFactor) == 0x000004, "Wrong size on DBDGameUserSettings_GetSkillCheckScaleFactor");
static_assert(offsetof(DBDGameUserSettings_GetSkillCheckScaleFactor, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetSkillCheckScaleFactor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGameUserSettings.GetTerrorRadiusVisualFeedback
// 0x0001 (0x0001 - 0x0000)
struct DBDGameUserSettings_GetTerrorRadiusVisualFeedback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGameUserSettings_GetTerrorRadiusVisualFeedback) == 0x000001, "Wrong alignment on DBDGameUserSettings_GetTerrorRadiusVisualFeedback");
static_assert(sizeof(DBDGameUserSettings_GetTerrorRadiusVisualFeedback) == 0x000001, "Wrong size on DBDGameUserSettings_GetTerrorRadiusVisualFeedback");
static_assert(offsetof(DBDGameUserSettings_GetTerrorRadiusVisualFeedback, ReturnValue) == 0x000000, "Member 'DBDGameUserSettings_GetTerrorRadiusVisualFeedback::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_AddBotToLobby
// 0x0090 (0x0090 - 0x0000)
struct DBDGame_Lobby_DBD_AddBotToLobby final
{
public:
	int32                                         SelectedCharacter;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Item;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Addon1;                                            // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Addon2;                                            // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Offering;                                          // 0x0038(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk1;                                             // 0x0048(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk2;                                             // 0x0058(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk3;                                             // 0x0068(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk4;                                             // 0x0078(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0088(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGame_Lobby_DBD_AddBotToLobby) == 0x000008, "Wrong alignment on DBDGame_Lobby_DBD_AddBotToLobby");
static_assert(sizeof(DBDGame_Lobby_DBD_AddBotToLobby) == 0x000090, "Wrong size on DBDGame_Lobby_DBD_AddBotToLobby");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, SelectedCharacter) == 0x000000, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::SelectedCharacter' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, Item) == 0x000008, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::Item' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, Addon1) == 0x000018, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::Addon1' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, Addon2) == 0x000028, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::Addon2' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, Offering) == 0x000038, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::Offering' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, Perk1) == 0x000048, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::Perk1' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, Perk2) == 0x000058, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::Perk2' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, Perk3) == 0x000068, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::Perk3' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, Perk4) == 0x000078, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::Perk4' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobby, Rank) == 0x000088, "Member 'DBDGame_Lobby_DBD_AddBotToLobby::Rank' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_AddBotToLobbyByName
// 0x0098 (0x0098 - 0x0000)
struct DBDGame_Lobby_DBD_AddBotToLobbyByName final
{
public:
	class FString                                 SelectedCharacter;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Item;                                              // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Addon1;                                            // 0x0020(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Addon2;                                            // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Offering;                                          // 0x0040(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk1;                                             // 0x0050(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk2;                                             // 0x0060(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk3;                                             // 0x0070(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Perk4;                                             // 0x0080(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0090(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGame_Lobby_DBD_AddBotToLobbyByName) == 0x000008, "Wrong alignment on DBDGame_Lobby_DBD_AddBotToLobbyByName");
static_assert(sizeof(DBDGame_Lobby_DBD_AddBotToLobbyByName) == 0x000098, "Wrong size on DBDGame_Lobby_DBD_AddBotToLobbyByName");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, SelectedCharacter) == 0x000000, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::SelectedCharacter' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, Item) == 0x000010, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::Item' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, Addon1) == 0x000020, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::Addon1' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, Addon2) == 0x000030, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::Addon2' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, Offering) == 0x000040, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::Offering' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, Perk1) == 0x000050, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::Perk1' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, Perk2) == 0x000060, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::Perk2' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, Perk3) == 0x000070, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::Perk3' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, Perk4) == 0x000080, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::Perk4' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyByName, Rank) == 0x000090, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyByName::Rank' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_AddBotToLobbyNoLoadout
// 0x0004 (0x0004 - 0x0000)
struct DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout final
{
public:
	int32                                         SelectedCharacter;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout) == 0x000004, "Wrong alignment on DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout");
static_assert(sizeof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout) == 0x000004, "Wrong size on DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout, SelectedCharacter) == 0x000000, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyNoLoadout::SelectedCharacter' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_AddBotToLobbyNoLoadoutByName
// 0x0010 (0x0010 - 0x0000)
struct DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName final
{
public:
	class FString                                 SelectedCharacter;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName) == 0x000008, "Wrong alignment on DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName");
static_assert(sizeof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName) == 0x000010, "Wrong size on DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName");
static_assert(offsetof(DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName, SelectedCharacter) == 0x000000, "Member 'DBDGame_Lobby_DBD_AddBotToLobbyNoLoadoutByName::SelectedCharacter' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_FillLobbyWithBotsByName
// 0x0018 (0x0018 - 0x0000)
struct DBDGame_Lobby_DBD_FillLobbyWithBotsByName final
{
public:
	class FString                                 SelectedKiller;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDGame_Lobby_DBD_FillLobbyWithBotsByName) == 0x000008, "Wrong alignment on DBDGame_Lobby_DBD_FillLobbyWithBotsByName");
static_assert(sizeof(DBDGame_Lobby_DBD_FillLobbyWithBotsByName) == 0x000018, "Wrong size on DBDGame_Lobby_DBD_FillLobbyWithBotsByName");
static_assert(offsetof(DBDGame_Lobby_DBD_FillLobbyWithBotsByName, SelectedKiller) == 0x000000, "Member 'DBDGame_Lobby_DBD_FillLobbyWithBotsByName::SelectedKiller' has a wrong offset!");
static_assert(offsetof(DBDGame_Lobby_DBD_FillLobbyWithBotsByName, Rank) == 0x000010, "Member 'DBDGame_Lobby_DBD_FillLobbyWithBotsByName::Rank' has a wrong offset!");

// Function DeadByDaylight.DBDGame_Lobby.DBD_RemoveBotByIndex
// 0x0004 (0x0004 - 0x0000)
struct DBDGame_Lobby_DBD_RemoveBotByIndex final
{
public:
	int32                                         botIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDGame_Lobby_DBD_RemoveBotByIndex) == 0x000004, "Wrong alignment on DBDGame_Lobby_DBD_RemoveBotByIndex");
static_assert(sizeof(DBDGame_Lobby_DBD_RemoveBotByIndex) == 0x000004, "Wrong size on DBDGame_Lobby_DBD_RemoveBotByIndex");
static_assert(offsetof(DBDGame_Lobby_DBD_RemoveBotByIndex, botIndex) == 0x000000, "Member 'DBDGame_Lobby_DBD_RemoveBotByIndex::botIndex' has a wrong offset!");

// Function DeadByDaylight.UMGGameplayAlertWidget.UpdateWidget
// 0x0198 (0x0198 - 0x0000)
struct UMGGameplayAlertWidget_UpdateWidget final
{
public:
	struct FStatusEffectSlotData                  StatusEffectData;                                  // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FInventorySlotData                     OriginatorData;                                    // 0x0048(0x0150)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGGameplayAlertWidget_UpdateWidget) == 0x000008, "Wrong alignment on UMGGameplayAlertWidget_UpdateWidget");
static_assert(sizeof(UMGGameplayAlertWidget_UpdateWidget) == 0x000198, "Wrong size on UMGGameplayAlertWidget_UpdateWidget");
static_assert(offsetof(UMGGameplayAlertWidget_UpdateWidget, StatusEffectData) == 0x000000, "Member 'UMGGameplayAlertWidget_UpdateWidget::StatusEffectData' has a wrong offset!");
static_assert(offsetof(UMGGameplayAlertWidget_UpdateWidget, OriginatorData) == 0x000048, "Member 'UMGGameplayAlertWidget_UpdateWidget::OriginatorData' has a wrong offset!");

// Function DeadByDaylight.EscapeDoorAnimInstance.PlaySound
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoorAnimInstance_PlaySound final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoorAnimInstance_PlaySound) == 0x000008, "Wrong alignment on EscapeDoorAnimInstance_PlaySound");
static_assert(sizeof(EscapeDoorAnimInstance_PlaySound) == 0x000008, "Wrong size on EscapeDoorAnimInstance_PlaySound");
static_assert(offsetof(EscapeDoorAnimInstance_PlaySound, AkEvent) == 0x000000, "Member 'EscapeDoorAnimInstance_PlaySound::AkEvent' has a wrong offset!");

// Function DeadByDaylight.EscapeDoorAnimInstance.SetIsOpen
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoorAnimInstance_SetIsOpen final
{
public:
	bool                                          IsOpen;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoorAnimInstance_SetIsOpen) == 0x000001, "Wrong alignment on EscapeDoorAnimInstance_SetIsOpen");
static_assert(sizeof(EscapeDoorAnimInstance_SetIsOpen) == 0x000001, "Wrong size on EscapeDoorAnimInstance_SetIsOpen");
static_assert(offsetof(EscapeDoorAnimInstance_SetIsOpen, IsOpen) == 0x000000, "Member 'EscapeDoorAnimInstance_SetIsOpen::IsOpen' has a wrong offset!");

// Function DeadByDaylight.EscapeDoorAnimInstance.SetIsOpenByKiller
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoorAnimInstance_SetIsOpenByKiller final
{
public:
	bool                                          IsOpenByKiller;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoorAnimInstance_SetIsOpenByKiller) == 0x000001, "Wrong alignment on EscapeDoorAnimInstance_SetIsOpenByKiller");
static_assert(sizeof(EscapeDoorAnimInstance_SetIsOpenByKiller) == 0x000001, "Wrong size on EscapeDoorAnimInstance_SetIsOpenByKiller");
static_assert(offsetof(EscapeDoorAnimInstance_SetIsOpenByKiller, IsOpenByKiller) == 0x000000, "Member 'EscapeDoorAnimInstance_SetIsOpenByKiller::IsOpenByKiller' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetPercentTimeElapsed
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetPercentTimeElapsed final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetPercentTimeElapsed) == 0x000008, "Wrong alignment on DBDUtilTimer_GetPercentTimeElapsed");
static_assert(sizeof(DBDUtilTimer_GetPercentTimeElapsed) == 0x000030, "Wrong size on DBDUtilTimer_GetPercentTimeElapsed");
static_assert(offsetof(DBDUtilTimer_GetPercentTimeElapsed, Timer) == 0x000000, "Member 'DBDUtilTimer_GetPercentTimeElapsed::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetPercentTimeElapsed, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetPercentTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetPercentTimeLeft
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetPercentTimeLeft final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetPercentTimeLeft) == 0x000008, "Wrong alignment on DBDUtilTimer_GetPercentTimeLeft");
static_assert(sizeof(DBDUtilTimer_GetPercentTimeLeft) == 0x000030, "Wrong size on DBDUtilTimer_GetPercentTimeLeft");
static_assert(offsetof(DBDUtilTimer_GetPercentTimeLeft, Timer) == 0x000000, "Member 'DBDUtilTimer_GetPercentTimeLeft::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetPercentTimeLeft, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetPercentTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetStartTime
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetStartTime final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetStartTime) == 0x000008, "Wrong alignment on DBDUtilTimer_GetStartTime");
static_assert(sizeof(DBDUtilTimer_GetStartTime) == 0x000030, "Wrong size on DBDUtilTimer_GetStartTime");
static_assert(offsetof(DBDUtilTimer_GetStartTime, Timer) == 0x000000, "Member 'DBDUtilTimer_GetStartTime::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetStartTime, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetStartTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetTimeElapsed
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetTimeElapsed final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetTimeElapsed) == 0x000008, "Wrong alignment on DBDUtilTimer_GetTimeElapsed");
static_assert(sizeof(DBDUtilTimer_GetTimeElapsed) == 0x000030, "Wrong size on DBDUtilTimer_GetTimeElapsed");
static_assert(offsetof(DBDUtilTimer_GetTimeElapsed, Timer) == 0x000000, "Member 'DBDUtilTimer_GetTimeElapsed::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetTimeElapsed, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.GetTimeLeft
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_GetTimeLeft final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0028(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_GetTimeLeft) == 0x000008, "Wrong alignment on DBDUtilTimer_GetTimeLeft");
static_assert(sizeof(DBDUtilTimer_GetTimeLeft) == 0x000030, "Wrong size on DBDUtilTimer_GetTimeLeft");
static_assert(offsetof(DBDUtilTimer_GetTimeLeft, Timer) == 0x000000, "Member 'DBDUtilTimer_GetTimeLeft::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_GetTimeLeft, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_GetTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.IsDone
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_IsDone final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_IsDone) == 0x000008, "Wrong alignment on DBDUtilTimer_IsDone");
static_assert(sizeof(DBDUtilTimer_IsDone) == 0x000030, "Wrong size on DBDUtilTimer_IsDone");
static_assert(offsetof(DBDUtilTimer_IsDone, Timer) == 0x000000, "Member 'DBDUtilTimer_IsDone::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_IsDone, ReturnValue) == 0x000028, "Member 'DBDUtilTimer_IsDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.Reset
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilTimer_Reset final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilTimer_Reset) == 0x000008, "Wrong alignment on DBDUtilTimer_Reset");
static_assert(sizeof(DBDUtilTimer_Reset) == 0x000028, "Wrong size on DBDUtilTimer_Reset");
static_assert(offsetof(DBDUtilTimer_Reset, Timer) == 0x000000, "Member 'DBDUtilTimer_Reset::Timer' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.ResetTo
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_ResetTo final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_ResetTo) == 0x000008, "Wrong alignment on DBDUtilTimer_ResetTo");
static_assert(sizeof(DBDUtilTimer_ResetTo) == 0x000030, "Wrong size on DBDUtilTimer_ResetTo");
static_assert(offsetof(DBDUtilTimer_ResetTo, Timer) == 0x000000, "Member 'DBDUtilTimer_ResetTo::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_ResetTo, Time) == 0x000028, "Member 'DBDUtilTimer_ResetTo::Time' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.Stop
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilTimer_Stop final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilTimer_Stop) == 0x000008, "Wrong alignment on DBDUtilTimer_Stop");
static_assert(sizeof(DBDUtilTimer_Stop) == 0x000028, "Wrong size on DBDUtilTimer_Stop");
static_assert(offsetof(DBDUtilTimer_Stop, Timer) == 0x000000, "Member 'DBDUtilTimer_Stop::Timer' has a wrong offset!");

// Function DeadByDaylight.DBDUtilTimer.Update
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilTimer_Update final
{
public:
	struct FDBDTimer                              Timer;                                             // 0x0000(0x0028)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilTimer_Update) == 0x000008, "Wrong alignment on DBDUtilTimer_Update");
static_assert(sizeof(DBDUtilTimer_Update) == 0x000030, "Wrong size on DBDUtilTimer_Update");
static_assert(offsetof(DBDUtilTimer_Update, Timer) == 0x000000, "Member 'DBDUtilTimer_Update::Timer' has a wrong offset!");
static_assert(offsetof(DBDUtilTimer_Update, DeltaTime) == 0x000028, "Member 'DBDUtilTimer_Update::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.StatusView.FireNotification
// 0x002C (0x002C - 0x0000)
struct StatusView_FireNotification final
{
public:
	struct FStatusViewSource                      StatusViewSource;                                  // 0x0000(0x002C)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusView_FireNotification) == 0x000004, "Wrong alignment on StatusView_FireNotification");
static_assert(sizeof(StatusView_FireNotification) == 0x00002C, "Wrong size on StatusView_FireNotification");
static_assert(offsetof(StatusView_FireNotification, StatusViewSource) == 0x000000, "Member 'StatusView_FireNotification::StatusViewSource' has a wrong offset!");

// Function DeadByDaylight.StatusView.ResetView
// 0x0008 (0x0008 - 0x0000)
struct StatusView_ResetView final
{
public:
	const class ADBDPlayer*                       DBDPlayer;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusView_ResetView) == 0x000008, "Wrong alignment on StatusView_ResetView");
static_assert(sizeof(StatusView_ResetView) == 0x000008, "Wrong size on StatusView_ResetView");
static_assert(offsetof(StatusView_ResetView, DBDPlayer) == 0x000000, "Member 'StatusView_ResetView::DBDPlayer' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.GetActionForInteractionType
// 0x0010 (0x0010 - 0x0000)
struct DBDKeyDisplayInfo_GetActionForInteractionType final
{
public:
	EPlayerRole                                   PlayerRole;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InputInteractionType;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGamePad;                                        // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreInteractMash;                                // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ReturnValue;                                       // 0x0004(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDKeyDisplayInfo_GetActionForInteractionType) == 0x000004, "Wrong alignment on DBDKeyDisplayInfo_GetActionForInteractionType");
static_assert(sizeof(DBDKeyDisplayInfo_GetActionForInteractionType) == 0x000010, "Wrong size on DBDKeyDisplayInfo_GetActionForInteractionType");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, PlayerRole) == 0x000000, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::PlayerRole' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, InputInteractionType) == 0x000001, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::InputInteractionType' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, UseGamePad) == 0x000002, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::UseGamePad' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, IgnoreInteractMash) == 0x000003, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::IgnoreInteractMash' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetActionForInteractionType, ReturnValue) == 0x000004, "Member 'DBDKeyDisplayInfo_GetActionForInteractionType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.GetFirstKeyForAction
// 0x0038 (0x0038 - 0x0000)
struct DBDKeyDisplayInfo_GetFirstKeyForAction final
{
public:
	class UPlayerInput*                           PlayerInput;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGamePad;                                        // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   ReturnValue;                                       // 0x0018(0x0020)(ConstParm, Parm, OutParm, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDKeyDisplayInfo_GetFirstKeyForAction) == 0x000008, "Wrong alignment on DBDKeyDisplayInfo_GetFirstKeyForAction");
static_assert(sizeof(DBDKeyDisplayInfo_GetFirstKeyForAction) == 0x000038, "Wrong size on DBDKeyDisplayInfo_GetFirstKeyForAction");
static_assert(offsetof(DBDKeyDisplayInfo_GetFirstKeyForAction, PlayerInput) == 0x000000, "Member 'DBDKeyDisplayInfo_GetFirstKeyForAction::PlayerInput' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetFirstKeyForAction, ActionName) == 0x000008, "Member 'DBDKeyDisplayInfo_GetFirstKeyForAction::ActionName' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetFirstKeyForAction, UseGamePad) == 0x000014, "Member 'DBDKeyDisplayInfo_GetFirstKeyForAction::UseGamePad' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetFirstKeyForAction, ReturnValue) == 0x000018, "Member 'DBDKeyDisplayInfo_GetFirstKeyForAction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.GetKeyDisplayInfo
// 0x0060 (0x0060 - 0x0000)
struct DBDKeyDisplayInfo_GetKeyDisplayInfo final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKeyDisplayInfo                        ReturnValue;                                       // 0x0020(0x0040)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDKeyDisplayInfo_GetKeyDisplayInfo) == 0x000008, "Wrong alignment on DBDKeyDisplayInfo_GetKeyDisplayInfo");
static_assert(sizeof(DBDKeyDisplayInfo_GetKeyDisplayInfo) == 0x000060, "Wrong size on DBDKeyDisplayInfo_GetKeyDisplayInfo");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfo, Key) == 0x000000, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfo::Key' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfo, ReturnValue) == 0x000020, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfo::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.GetKeyDisplayInfoForInteractionType
// 0x0050 (0x0050 - 0x0000)
struct DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType final
{
public:
	class UPlayerInput*                           PlayerInput;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   PlayerRole;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputInteractionType                         InteractionType;                                   // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseGamePad;                                        // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyDisplayInfo                        ReturnValue;                                       // 0x0010(0x0040)(ConstParm, Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType) == 0x000008, "Wrong alignment on DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType");
static_assert(sizeof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType) == 0x000050, "Wrong size on DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, PlayerInput) == 0x000000, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::PlayerInput' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, PlayerRole) == 0x000008, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::PlayerRole' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, InteractionType) == 0x000009, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::InteractionType' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, UseGamePad) == 0x00000A, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::UseGamePad' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType, ReturnValue) == 0x000010, "Member 'DBDKeyDisplayInfo_GetKeyDisplayInfoForInteractionType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.IsExcludedKey
// 0x0028 (0x0028 - 0x0000)
struct DBDKeyDisplayInfo_IsExcludedKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDKeyDisplayInfo_IsExcludedKey) == 0x000008, "Wrong alignment on DBDKeyDisplayInfo_IsExcludedKey");
static_assert(sizeof(DBDKeyDisplayInfo_IsExcludedKey) == 0x000028, "Wrong size on DBDKeyDisplayInfo_IsExcludedKey");
static_assert(offsetof(DBDKeyDisplayInfo_IsExcludedKey, Key) == 0x000000, "Member 'DBDKeyDisplayInfo_IsExcludedKey::Key' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_IsExcludedKey, ReturnValue) == 0x000020, "Member 'DBDKeyDisplayInfo_IsExcludedKey::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDKeyDisplayInfo.IsIgnoredKey
// 0x0028 (0x0028 - 0x0000)
struct DBDKeyDisplayInfo_IsIgnoredKey final
{
public:
	struct FKey                                   Key;                                               // 0x0000(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDKeyDisplayInfo_IsIgnoredKey) == 0x000008, "Wrong alignment on DBDKeyDisplayInfo_IsIgnoredKey");
static_assert(sizeof(DBDKeyDisplayInfo_IsIgnoredKey) == 0x000028, "Wrong size on DBDKeyDisplayInfo_IsIgnoredKey");
static_assert(offsetof(DBDKeyDisplayInfo_IsIgnoredKey, Key) == 0x000000, "Member 'DBDKeyDisplayInfo_IsIgnoredKey::Key' has a wrong offset!");
static_assert(offsetof(DBDKeyDisplayInfo_IsIgnoredKey, ReturnValue) == 0x000020, "Member 'DBDKeyDisplayInfo_IsIgnoredKey::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DedicatedServerHandlerComponent.OnGameEvent
// 0x0040 (0x0040 - 0x0000)
struct DedicatedServerHandlerComponent_OnGameEvent final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DedicatedServerHandlerComponent_OnGameEvent) == 0x000008, "Wrong alignment on DedicatedServerHandlerComponent_OnGameEvent");
static_assert(sizeof(DedicatedServerHandlerComponent_OnGameEvent) == 0x000040, "Wrong size on DedicatedServerHandlerComponent_OnGameEvent");
static_assert(offsetof(DedicatedServerHandlerComponent_OnGameEvent, GameEventType) == 0x000000, "Member 'DedicatedServerHandlerComponent_OnGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(DedicatedServerHandlerComponent_OnGameEvent, GameEventData) == 0x000010, "Member 'DedicatedServerHandlerComponent_OnGameEvent::GameEventData' has a wrong offset!");

// Function DeadByDaylight.DedicatedServerHandlerComponent.ReceiveGameEvent
// 0x0018 (0x0018 - 0x0000)
struct DedicatedServerHandlerComponent_ReceiveGameEvent final
{
public:
	EDBDScoreTypes                                ScoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DedicatedServerHandlerComponent_ReceiveGameEvent) == 0x000008, "Wrong alignment on DedicatedServerHandlerComponent_ReceiveGameEvent");
static_assert(sizeof(DedicatedServerHandlerComponent_ReceiveGameEvent) == 0x000018, "Wrong size on DedicatedServerHandlerComponent_ReceiveGameEvent");
static_assert(offsetof(DedicatedServerHandlerComponent_ReceiveGameEvent, ScoreType) == 0x000000, "Member 'DedicatedServerHandlerComponent_ReceiveGameEvent::ScoreType' has a wrong offset!");
static_assert(offsetof(DedicatedServerHandlerComponent_ReceiveGameEvent, Amount) == 0x000004, "Member 'DedicatedServerHandlerComponent_ReceiveGameEvent::Amount' has a wrong offset!");
static_assert(offsetof(DedicatedServerHandlerComponent_ReceiveGameEvent, Instigator) == 0x000008, "Member 'DedicatedServerHandlerComponent_ReceiveGameEvent::Instigator' has a wrong offset!");
static_assert(offsetof(DedicatedServerHandlerComponent_ReceiveGameEvent, Target) == 0x000010, "Member 'DedicatedServerHandlerComponent_ReceiveGameEvent::Target' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.CreateDynamicMaterialInstanceForParticleSystem
// 0x0018 (0x0018 - 0x0000)
struct DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem final
{
public:
	class UParticleSystemComponent*               System;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem) == 0x000008, "Wrong alignment on DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem");
static_assert(sizeof(DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem) == 0x000018, "Wrong size on DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem");
static_assert(offsetof(DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem, System) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem::System' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem, ReturnValue) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_CreateDynamicMaterialInstanceForParticleSystem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.SetTransformParameterInverseValueOnMaterialDynamic
// 0x0080 (0x0080 - 0x0000)
struct DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic final
{
public:
	class UMaterialInstanceDynamic*               Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic) == 0x000010, "Wrong alignment on DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic");
static_assert(sizeof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic) == 0x000080, "Wrong size on DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic, Material) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic::Material' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic, ParameterName) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic::ParameterName' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic, Value) == 0x000020, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterInverseValueOnMaterialDynamic::Value' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.SetTransformParameterValueOnMaterialDynamic
// 0x0080 (0x0080 - 0x0000)
struct DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic final
{
public:
	class UMaterialInstanceDynamic*               Material;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic) == 0x000010, "Wrong alignment on DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic");
static_assert(sizeof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic) == 0x000080, "Wrong size on DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic, Material) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic::Material' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic, ParameterName) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic::ParameterName' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic, Value) == 0x000020, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMaterialDynamic::Value' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.SetTransformParameterValueOnMeshComponent
// 0x0080 (0x0080 - 0x0000)
struct DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Value;                                             // 0x0020(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent) == 0x000010, "Wrong alignment on DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent");
static_assert(sizeof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent) == 0x000080, "Wrong size on DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent, Mesh) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent::Mesh' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent, ParameterName) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent::ParameterName' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent, Value) == 0x000020, "Member 'DBDMaterialBlueprintLibrary_SetTransformParameterValueOnMeshComponent::Value' has a wrong offset!");

// Function DeadByDaylight.DBDMaterialBlueprintLibrary.SetVectorParameterValueOnMeshComponent
// 0x0028 (0x0028 - 0x0000)
struct DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Value;                                             // 0x0014(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent) == 0x000008, "Wrong alignment on DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent");
static_assert(sizeof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent) == 0x000028, "Wrong size on DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent, Mesh) == 0x000000, "Member 'DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent::Mesh' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent, ParameterName) == 0x000008, "Member 'DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent::ParameterName' has a wrong offset!");
static_assert(offsetof(DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent, Value) == 0x000014, "Member 'DBDMaterialBlueprintLibrary_SetVectorParameterValueOnMeshComponent::Value' has a wrong offset!");

// Function DeadByDaylight.DBDMathBlueprintLibrary.TransformToMatrix
// 0x0070 (0x0070 - 0x0000)
struct DBDMathBlueprintLibrary_TransformToMatrix final
{
public:
	struct FTransform                             A;                                                 // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FLinearColor>                   ReturnValue;                                       // 0x0060(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMathBlueprintLibrary_TransformToMatrix) == 0x000010, "Wrong alignment on DBDMathBlueprintLibrary_TransformToMatrix");
static_assert(sizeof(DBDMathBlueprintLibrary_TransformToMatrix) == 0x000070, "Wrong size on DBDMathBlueprintLibrary_TransformToMatrix");
static_assert(offsetof(DBDMathBlueprintLibrary_TransformToMatrix, A) == 0x000000, "Member 'DBDMathBlueprintLibrary_TransformToMatrix::A' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_TransformToMatrix, ReturnValue) == 0x000060, "Member 'DBDMathBlueprintLibrary_TransformToMatrix::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMathBlueprintLibrary.VectorAbsoluteValue
// 0x0030 (0x0030 - 0x0000)
struct DBDMathBlueprintLibrary_VectorAbsoluteValue final
{
public:
	struct FVector                                A;                                                 // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMathBlueprintLibrary_VectorAbsoluteValue) == 0x000008, "Wrong alignment on DBDMathBlueprintLibrary_VectorAbsoluteValue");
static_assert(sizeof(DBDMathBlueprintLibrary_VectorAbsoluteValue) == 0x000030, "Wrong size on DBDMathBlueprintLibrary_VectorAbsoluteValue");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorAbsoluteValue, A) == 0x000000, "Member 'DBDMathBlueprintLibrary_VectorAbsoluteValue::A' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorAbsoluteValue, ReturnValue) == 0x000018, "Member 'DBDMathBlueprintLibrary_VectorAbsoluteValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMathBlueprintLibrary.VectorIntersect
// 0x0068 (0x0068 - 0x0000)
struct DBDMathBlueprintLibrary_VectorIntersect final
{
public:
	struct FVector                                OriginA;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExtentA;                                           // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OriginB;                                           // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ExtentB;                                           // 0x0048(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDMathBlueprintLibrary_VectorIntersect) == 0x000008, "Wrong alignment on DBDMathBlueprintLibrary_VectorIntersect");
static_assert(sizeof(DBDMathBlueprintLibrary_VectorIntersect) == 0x000068, "Wrong size on DBDMathBlueprintLibrary_VectorIntersect");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, OriginA) == 0x000000, "Member 'DBDMathBlueprintLibrary_VectorIntersect::OriginA' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, ExtentA) == 0x000018, "Member 'DBDMathBlueprintLibrary_VectorIntersect::ExtentA' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, OriginB) == 0x000030, "Member 'DBDMathBlueprintLibrary_VectorIntersect::OriginB' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, ExtentB) == 0x000048, "Member 'DBDMathBlueprintLibrary_VectorIntersect::ExtentB' has a wrong offset!");
static_assert(offsetof(DBDMathBlueprintLibrary_VectorIntersect, ReturnValue) == 0x000060, "Member 'DBDMathBlueprintLibrary_VectorIntersect::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorOutlineUpdateStrategy.GetEffectsProtectingFromKillerAuraReading
// 0x0020 (0x0020 - 0x0000)
struct SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading final
{
public:
	const class ACamperPlayer*                    Subject;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASlasherPlayer*                   Killer;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UGameplayModifierContainer*>     ReturnValue;                                       // 0x0010(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading) == 0x000008, "Wrong alignment on SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading");
static_assert(sizeof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading) == 0x000020, "Wrong size on SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading, Subject) == 0x000000, "Member 'SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading::Subject' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading, Killer) == 0x000008, "Member 'SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading::Killer' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading, ReturnValue) == 0x000010, "Member 'SurvivorOutlineUpdateStrategy_GetEffectsProtectingFromKillerAuraReading::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorOutlineUpdateStrategy.IsActivelyHidingAuraFromKiller
// 0x0018 (0x0018 - 0x0000)
struct SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller final
{
public:
	const class ACamperPlayer*                    Subject;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASlasherPlayer*                   Witness;                                           // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller) == 0x000008, "Wrong alignment on SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller");
static_assert(sizeof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller) == 0x000018, "Wrong size on SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller, Subject) == 0x000000, "Member 'SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller::Subject' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller, Witness) == 0x000008, "Member 'SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller::Witness' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller, ReturnValue) == 0x000010, "Member 'SurvivorOutlineUpdateStrategy_IsActivelyHidingAuraFromKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorOutlineUpdateStrategy.SetTrappedIconActive
// 0x0001 (0x0001 - 0x0000)
struct SurvivorOutlineUpdateStrategy_SetTrappedIconActive final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorOutlineUpdateStrategy_SetTrappedIconActive) == 0x000001, "Wrong alignment on SurvivorOutlineUpdateStrategy_SetTrappedIconActive");
static_assert(sizeof(SurvivorOutlineUpdateStrategy_SetTrappedIconActive) == 0x000001, "Wrong size on SurvivorOutlineUpdateStrategy_SetTrappedIconActive");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_SetTrappedIconActive, Value) == 0x000000, "Member 'SurvivorOutlineUpdateStrategy_SetTrappedIconActive::Value' has a wrong offset!");

// Function DeadByDaylight.SurvivorOutlineUpdateStrategy.IsBlockingAuraReadingFromKiller
// 0x0010 (0x0010 - 0x0000)
struct SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller final
{
public:
	const class ASlasherPlayer*                   Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller) == 0x000008, "Wrong alignment on SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller");
static_assert(sizeof(SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller) == 0x000010, "Wrong size on SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller, Killer) == 0x000000, "Member 'SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller::Killer' has a wrong offset!");
static_assert(offsetof(SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller, ReturnValue) == 0x000008, "Member 'SurvivorOutlineUpdateStrategy_IsBlockingAuraReadingFromKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.ComputeHookStrugglePercent
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_ComputeHookStrugglePercent final
{
public:
	const class ACamperPlayer*                    HookedCamper;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HookStruggleThreshold;                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDHookUtilities_ComputeHookStrugglePercent) == 0x000008, "Wrong alignment on DBDHookUtilities_ComputeHookStrugglePercent");
static_assert(sizeof(DBDHookUtilities_ComputeHookStrugglePercent) == 0x000010, "Wrong size on DBDHookUtilities_ComputeHookStrugglePercent");
static_assert(offsetof(DBDHookUtilities_ComputeHookStrugglePercent, HookedCamper) == 0x000000, "Member 'DBDHookUtilities_ComputeHookStrugglePercent::HookedCamper' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_ComputeHookStrugglePercent, HookStruggleThreshold) == 0x000008, "Member 'DBDHookUtilities_ComputeHookStrugglePercent::HookStruggleThreshold' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_ComputeHookStrugglePercent, ReturnValue) == 0x00000C, "Member 'DBDHookUtilities_ComputeHookStrugglePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsFreddyHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsFreddyHook final
{
public:
	class AMeatHook*                              TargetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsFreddyHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsFreddyHook");
static_assert(sizeof(DBDHookUtilities_IsFreddyHook) == 0x000010, "Wrong size on DBDHookUtilities_IsFreddyHook");
static_assert(offsetof(DBDHookUtilities_IsFreddyHook, TargetHook) == 0x000000, "Member 'DBDHookUtilities_IsFreddyHook::TargetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsFreddyHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsFreddyHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsHagHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsHagHook final
{
public:
	class AMeatHook*                              TargetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsHagHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsHagHook");
static_assert(sizeof(DBDHookUtilities_IsHagHook) == 0x000010, "Wrong size on DBDHookUtilities_IsHagHook");
static_assert(offsetof(DBDHookUtilities_IsHagHook, TargetHook) == 0x000000, "Member 'DBDHookUtilities_IsHagHook::TargetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsHagHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsHagHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsHookOf
// 0x0018 (0x0018 - 0x0000)
struct DBDHookUtilities_IsHookOf final
{
public:
	class AMeatHook*                              TargetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HookTag;                                           // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsHookOf) == 0x000008, "Wrong alignment on DBDHookUtilities_IsHookOf");
static_assert(sizeof(DBDHookUtilities_IsHookOf) == 0x000018, "Wrong size on DBDHookUtilities_IsHookOf");
static_assert(offsetof(DBDHookUtilities_IsHookOf, TargetHook) == 0x000000, "Member 'DBDHookUtilities_IsHookOf::TargetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsHookOf, HookTag) == 0x000008, "Member 'DBDHookUtilities_IsHookOf::HookTag' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsHookOf, ReturnValue) == 0x000014, "Member 'DBDHookUtilities_IsHookOf::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsHuntressHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsHuntressHook final
{
public:
	class AMeatHook*                              TargetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsHuntressHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsHuntressHook");
static_assert(sizeof(DBDHookUtilities_IsHuntressHook) == 0x000010, "Wrong size on DBDHookUtilities_IsHuntressHook");
static_assert(offsetof(DBDHookUtilities_IsHuntressHook, TargetHook) == 0x000000, "Member 'DBDHookUtilities_IsHuntressHook::TargetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsHuntressHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsHuntressHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsLegionHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsLegionHook final
{
public:
	class AMeatHook*                              TargetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsLegionHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsLegionHook");
static_assert(sizeof(DBDHookUtilities_IsLegionHook) == 0x000010, "Wrong size on DBDHookUtilities_IsLegionHook");
static_assert(offsetof(DBDHookUtilities_IsLegionHook, TargetHook) == 0x000000, "Member 'DBDHookUtilities_IsLegionHook::TargetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsLegionHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsLegionHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsNurseHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsNurseHook final
{
public:
	class AMeatHook*                              TargetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsNurseHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsNurseHook");
static_assert(sizeof(DBDHookUtilities_IsNurseHook) == 0x000010, "Wrong size on DBDHookUtilities_IsNurseHook");
static_assert(offsetof(DBDHookUtilities_IsNurseHook, TargetHook) == 0x000000, "Member 'DBDHookUtilities_IsNurseHook::TargetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsNurseHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsNurseHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsPigHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsPigHook final
{
public:
	class AMeatHook*                              TargetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsPigHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsPigHook");
static_assert(sizeof(DBDHookUtilities_IsPigHook) == 0x000010, "Wrong size on DBDHookUtilities_IsPigHook");
static_assert(offsetof(DBDHookUtilities_IsPigHook, TargetHook) == 0x000000, "Member 'DBDHookUtilities_IsPigHook::TargetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsPigHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsPigHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDHookUtilities.IsWraithHook
// 0x0010 (0x0010 - 0x0000)
struct DBDHookUtilities_IsWraithHook final
{
public:
	class AMeatHook*                              TargetHook;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDHookUtilities_IsWraithHook) == 0x000008, "Wrong alignment on DBDHookUtilities_IsWraithHook");
static_assert(sizeof(DBDHookUtilities_IsWraithHook) == 0x000010, "Wrong size on DBDHookUtilities_IsWraithHook");
static_assert(offsetof(DBDHookUtilities_IsWraithHook, TargetHook) == 0x000000, "Member 'DBDHookUtilities_IsWraithHook::TargetHook' has a wrong offset!");
static_assert(offsetof(DBDHookUtilities_IsWraithHook, ReturnValue) == 0x000008, "Member 'DBDHookUtilities_IsWraithHook::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.BlockCharacterRotation
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_BlockCharacterRotation final
{
public:
	bool                                          ShouldBlock;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_BlockCharacterRotation) == 0x000001, "Wrong alignment on DBDMenuPlayer_BlockCharacterRotation");
static_assert(sizeof(DBDMenuPlayer_BlockCharacterRotation) == 0x000001, "Wrong size on DBDMenuPlayer_BlockCharacterRotation");
static_assert(offsetof(DBDMenuPlayer_BlockCharacterRotation, ShouldBlock) == 0x000000, "Member 'DBDMenuPlayer_BlockCharacterRotation::ShouldBlock' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetCharmSpawnerComponent
// 0x0008 (0x0008 - 0x0000)
struct DBDMenuPlayer_GetCharmSpawnerComponent final
{
public:
	class UCharmSpawnerComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetCharmSpawnerComponent) == 0x000008, "Wrong alignment on DBDMenuPlayer_GetCharmSpawnerComponent");
static_assert(sizeof(DBDMenuPlayer_GetCharmSpawnerComponent) == 0x000008, "Wrong size on DBDMenuPlayer_GetCharmSpawnerComponent");
static_assert(offsetof(DBDMenuPlayer_GetCharmSpawnerComponent, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetCharmSpawnerComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.HasSameCharacterInLobby
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_HasSameCharacterInLobby final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_HasSameCharacterInLobby) == 0x000001, "Wrong alignment on DBDMenuPlayer_HasSameCharacterInLobby");
static_assert(sizeof(DBDMenuPlayer_HasSameCharacterInLobby) == 0x000001, "Wrong size on DBDMenuPlayer_HasSameCharacterInLobby");
static_assert(offsetof(DBDMenuPlayer_HasSameCharacterInLobby, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_HasSameCharacterInLobby::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.IsInMenuPlayer
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_IsInMenuPlayer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_IsInMenuPlayer) == 0x000001, "Wrong alignment on DBDMenuPlayer_IsInMenuPlayer");
static_assert(sizeof(DBDMenuPlayer_IsInMenuPlayer) == 0x000001, "Wrong size on DBDMenuPlayer_IsInMenuPlayer");
static_assert(offsetof(DBDMenuPlayer_IsInMenuPlayer, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_IsInMenuPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnCustomizationTransactionCompleted
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_OnCustomizationTransactionCompleted final
{
public:
	ECustomizationCategory                        Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnCustomizationTransactionCompleted) == 0x000001, "Wrong alignment on DBDMenuPlayer_OnCustomizationTransactionCompleted");
static_assert(sizeof(DBDMenuPlayer_OnCustomizationTransactionCompleted) == 0x000001, "Wrong size on DBDMenuPlayer_OnCustomizationTransactionCompleted");
static_assert(offsetof(DBDMenuPlayer_OnCustomizationTransactionCompleted, Category) == 0x000000, "Member 'DBDMenuPlayer_OnCustomizationTransactionCompleted::Category' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnGuestPlayerDespawned
// 0x0008 (0x0008 - 0x0000)
struct DBDMenuPlayer_OnGuestPlayerDespawned final
{
public:
	class ADBDMenuPlayer*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnGuestPlayerDespawned) == 0x000008, "Wrong alignment on DBDMenuPlayer_OnGuestPlayerDespawned");
static_assert(sizeof(DBDMenuPlayer_OnGuestPlayerDespawned) == 0x000008, "Wrong size on DBDMenuPlayer_OnGuestPlayerDespawned");
static_assert(offsetof(DBDMenuPlayer_OnGuestPlayerDespawned, Player) == 0x000000, "Member 'DBDMenuPlayer_OnGuestPlayerDespawned::Player' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnGuestPlayerReadyChanged
// 0x0010 (0x0010 - 0x0000)
struct DBDMenuPlayer_OnGuestPlayerReadyChanged final
{
public:
	class ADBDMenuPlayer*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReady;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDMenuPlayer_OnGuestPlayerReadyChanged) == 0x000008, "Wrong alignment on DBDMenuPlayer_OnGuestPlayerReadyChanged");
static_assert(sizeof(DBDMenuPlayer_OnGuestPlayerReadyChanged) == 0x000010, "Wrong size on DBDMenuPlayer_OnGuestPlayerReadyChanged");
static_assert(offsetof(DBDMenuPlayer_OnGuestPlayerReadyChanged, Player) == 0x000000, "Member 'DBDMenuPlayer_OnGuestPlayerReadyChanged::Player' has a wrong offset!");
static_assert(offsetof(DBDMenuPlayer_OnGuestPlayerReadyChanged, IsReady) == 0x000008, "Member 'DBDMenuPlayer_OnGuestPlayerReadyChanged::IsReady' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnGuestPlayerSpawned
// 0x0008 (0x0008 - 0x0000)
struct DBDMenuPlayer_OnGuestPlayerSpawned final
{
public:
	class ADBDMenuPlayer*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnGuestPlayerSpawned) == 0x000008, "Wrong alignment on DBDMenuPlayer_OnGuestPlayerSpawned");
static_assert(sizeof(DBDMenuPlayer_OnGuestPlayerSpawned) == 0x000008, "Wrong size on DBDMenuPlayer_OnGuestPlayerSpawned");
static_assert(offsetof(DBDMenuPlayer_OnGuestPlayerSpawned, Player) == 0x000000, "Member 'DBDMenuPlayer_OnGuestPlayerSpawned::Player' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnIsReadyChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_OnIsReadyChanged final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnIsReadyChanged) == 0x000001, "Wrong alignment on DBDMenuPlayer_OnIsReadyChanged");
static_assert(sizeof(DBDMenuPlayer_OnIsReadyChanged) == 0x000001, "Wrong size on DBDMenuPlayer_OnIsReadyChanged");
static_assert(offsetof(DBDMenuPlayer_OnIsReadyChanged, IsReady) == 0x000000, "Member 'DBDMenuPlayer_OnIsReadyChanged::IsReady' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.OnLocalPlayerReadyChanged
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_OnLocalPlayerReadyChanged final
{
public:
	bool                                          IsReady;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_OnLocalPlayerReadyChanged) == 0x000001, "Wrong alignment on DBDMenuPlayer_OnLocalPlayerReadyChanged");
static_assert(sizeof(DBDMenuPlayer_OnLocalPlayerReadyChanged) == 0x000001, "Wrong size on DBDMenuPlayer_OnLocalPlayerReadyChanged");
static_assert(offsetof(DBDMenuPlayer_OnLocalPlayerReadyChanged, IsReady) == 0x000000, "Member 'DBDMenuPlayer_OnLocalPlayerReadyChanged::IsReady' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.WrappedOnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct DBDMenuPlayer_WrappedOnDestroyed final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_WrappedOnDestroyed) == 0x000008, "Wrong alignment on DBDMenuPlayer_WrappedOnDestroyed");
static_assert(sizeof(DBDMenuPlayer_WrappedOnDestroyed) == 0x000008, "Wrong size on DBDMenuPlayer_WrappedOnDestroyed");
static_assert(offsetof(DBDMenuPlayer_WrappedOnDestroyed, DestroyedActor) == 0x000000, "Member 'DBDMenuPlayer_WrappedOnDestroyed::DestroyedActor' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetBlockRotationAfterSpawningTime
// 0x0004 (0x0004 - 0x0000)
struct DBDMenuPlayer_GetBlockRotationAfterSpawningTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetBlockRotationAfterSpawningTime) == 0x000004, "Wrong alignment on DBDMenuPlayer_GetBlockRotationAfterSpawningTime");
static_assert(sizeof(DBDMenuPlayer_GetBlockRotationAfterSpawningTime) == 0x000004, "Wrong size on DBDMenuPlayer_GetBlockRotationAfterSpawningTime");
static_assert(offsetof(DBDMenuPlayer_GetBlockRotationAfterSpawningTime, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetBlockRotationAfterSpawningTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetCurrentMenu
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_GetCurrentMenu final
{
public:
	EGameFlowStep                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetCurrentMenu) == 0x000001, "Wrong alignment on DBDMenuPlayer_GetCurrentMenu");
static_assert(sizeof(DBDMenuPlayer_GetCurrentMenu) == 0x000001, "Wrong size on DBDMenuPlayer_GetCurrentMenu");
static_assert(offsetof(DBDMenuPlayer_GetCurrentMenu, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetCurrentMenu::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetHandPosition
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_GetHandPosition final
{
public:
	EItemHandPosition                             ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetHandPosition) == 0x000001, "Wrong alignment on DBDMenuPlayer_GetHandPosition");
static_assert(sizeof(DBDMenuPlayer_GetHandPosition) == 0x000001, "Wrong size on DBDMenuPlayer_GetHandPosition");
static_assert(offsetof(DBDMenuPlayer_GetHandPosition, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetHandPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetIsLocalPlayerCharacter
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_GetIsLocalPlayerCharacter final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetIsLocalPlayerCharacter) == 0x000001, "Wrong alignment on DBDMenuPlayer_GetIsLocalPlayerCharacter");
static_assert(sizeof(DBDMenuPlayer_GetIsLocalPlayerCharacter) == 0x000001, "Wrong size on DBDMenuPlayer_GetIsLocalPlayerCharacter");
static_assert(offsetof(DBDMenuPlayer_GetIsLocalPlayerCharacter, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetIsLocalPlayerCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.GetIsReady
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_GetIsReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_GetIsReady) == 0x000001, "Wrong alignment on DBDMenuPlayer_GetIsReady");
static_assert(sizeof(DBDMenuPlayer_GetIsReady) == 0x000001, "Wrong size on DBDMenuPlayer_GetIsReady");
static_assert(offsetof(DBDMenuPlayer_GetIsReady, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_GetIsReady::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.ShouldApplyPositionOffset
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_ShouldApplyPositionOffset final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_ShouldApplyPositionOffset) == 0x000001, "Wrong alignment on DBDMenuPlayer_ShouldApplyPositionOffset");
static_assert(sizeof(DBDMenuPlayer_ShouldApplyPositionOffset) == 0x000001, "Wrong size on DBDMenuPlayer_ShouldApplyPositionOffset");
static_assert(offsetof(DBDMenuPlayer_ShouldApplyPositionOffset, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_ShouldApplyPositionOffset::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDMenuPlayer.ShouldShowSpawnAnimation
// 0x0001 (0x0001 - 0x0000)
struct DBDMenuPlayer_ShouldShowSpawnAnimation final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDMenuPlayer_ShouldShowSpawnAnimation) == 0x000001, "Wrong alignment on DBDMenuPlayer_ShouldShowSpawnAnimation");
static_assert(sizeof(DBDMenuPlayer_ShouldShowSpawnAnimation) == 0x000001, "Wrong size on DBDMenuPlayer_ShouldShowSpawnAnimation");
static_assert(offsetof(DBDMenuPlayer_ShouldShowSpawnAnimation, ReturnValue) == 0x000000, "Member 'DBDMenuPlayer_ShouldShowSpawnAnimation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDProjectileUtilities.CreateProjectilePoolAdapter
// 0x0018 (0x0018 - 0x0000)
struct DBDProjectileUtilities_CreateProjectilePoolAdapter final
{
public:
	class UObject*                                Param_Outer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAuthoritativeActorPoolComponent*       Pool;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAuthoritativePoolProjectileProviderAdapter* ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDProjectileUtilities_CreateProjectilePoolAdapter) == 0x000008, "Wrong alignment on DBDProjectileUtilities_CreateProjectilePoolAdapter");
static_assert(sizeof(DBDProjectileUtilities_CreateProjectilePoolAdapter) == 0x000018, "Wrong size on DBDProjectileUtilities_CreateProjectilePoolAdapter");
static_assert(offsetof(DBDProjectileUtilities_CreateProjectilePoolAdapter, Param_Outer) == 0x000000, "Member 'DBDProjectileUtilities_CreateProjectilePoolAdapter::Param_Outer' has a wrong offset!");
static_assert(offsetof(DBDProjectileUtilities_CreateProjectilePoolAdapter, Pool) == 0x000008, "Member 'DBDProjectileUtilities_CreateProjectilePoolAdapter::Pool' has a wrong offset!");
static_assert(offsetof(DBDProjectileUtilities_CreateProjectilePoolAdapter, ReturnValue) == 0x000010, "Member 'DBDProjectileUtilities_CreateProjectilePoolAdapter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDSpringArmComponent.IgnoreActor
// 0x0010 (0x0010 - 0x0000)
struct DBDSpringArmComponent_IgnoreActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldIgnore;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDSpringArmComponent_IgnoreActor) == 0x000008, "Wrong alignment on DBDSpringArmComponent_IgnoreActor");
static_assert(sizeof(DBDSpringArmComponent_IgnoreActor) == 0x000010, "Wrong size on DBDSpringArmComponent_IgnoreActor");
static_assert(offsetof(DBDSpringArmComponent_IgnoreActor, Actor) == 0x000000, "Member 'DBDSpringArmComponent_IgnoreActor::Actor' has a wrong offset!");
static_assert(offsetof(DBDSpringArmComponent_IgnoreActor, bShouldIgnore) == 0x000008, "Member 'DBDSpringArmComponent_IgnoreActor::bShouldIgnore' has a wrong offset!");

// Function DeadByDaylight.DBDSpringArmComponent.ZoomCamera
// 0x0008 (0x0008 - 0x0000)
struct DBDSpringArmComponent_ZoomCamera final
{
public:
	float                                         ZoomCount;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomDuration;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDSpringArmComponent_ZoomCamera) == 0x000004, "Wrong alignment on DBDSpringArmComponent_ZoomCamera");
static_assert(sizeof(DBDSpringArmComponent_ZoomCamera) == 0x000008, "Wrong size on DBDSpringArmComponent_ZoomCamera");
static_assert(offsetof(DBDSpringArmComponent_ZoomCamera, ZoomCount) == 0x000000, "Member 'DBDSpringArmComponent_ZoomCamera::ZoomCount' has a wrong offset!");
static_assert(offsetof(DBDSpringArmComponent_ZoomCamera, ZoomDuration) == 0x000004, "Member 'DBDSpringArmComponent_ZoomCamera::ZoomDuration' has a wrong offset!");

// Function DeadByDaylight.DBDSpringArmComponent.ZoomCameraToDefault
// 0x0004 (0x0004 - 0x0000)
struct DBDSpringArmComponent_ZoomCameraToDefault final
{
public:
	float                                         ZoomDuration;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDSpringArmComponent_ZoomCameraToDefault) == 0x000004, "Wrong alignment on DBDSpringArmComponent_ZoomCameraToDefault");
static_assert(sizeof(DBDSpringArmComponent_ZoomCameraToDefault) == 0x000004, "Wrong size on DBDSpringArmComponent_ZoomCameraToDefault");
static_assert(offsetof(DBDSpringArmComponent_ZoomCameraToDefault, ZoomDuration) == 0x000000, "Member 'DBDSpringArmComponent_ZoomCameraToDefault::ZoomDuration' has a wrong offset!");

// Function DeadByDaylight.DBDSpringArmComponent.ZoomCameraTowardsNewTargetArmLength
// 0x0008 (0x0008 - 0x0000)
struct DBDSpringArmComponent_ZoomCameraTowardsNewTargetArmLength final
{
public:
	float                                         NewTargetArmLength;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ZoomDuration;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDSpringArmComponent_ZoomCameraTowardsNewTargetArmLength) == 0x000004, "Wrong alignment on DBDSpringArmComponent_ZoomCameraTowardsNewTargetArmLength");
static_assert(sizeof(DBDSpringArmComponent_ZoomCameraTowardsNewTargetArmLength) == 0x000008, "Wrong size on DBDSpringArmComponent_ZoomCameraTowardsNewTargetArmLength");
static_assert(offsetof(DBDSpringArmComponent_ZoomCameraTowardsNewTargetArmLength, NewTargetArmLength) == 0x000000, "Member 'DBDSpringArmComponent_ZoomCameraTowardsNewTargetArmLength::NewTargetArmLength' has a wrong offset!");
static_assert(offsetof(DBDSpringArmComponent_ZoomCameraTowardsNewTargetArmLength, ZoomDuration) == 0x000004, "Member 'DBDSpringArmComponent_ZoomCameraTowardsNewTargetArmLength::ZoomDuration' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.ResetTo
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_ResetTo final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_ResetTo) == 0x000004, "Wrong alignment on DBDTimerComponent_ResetTo");
static_assert(sizeof(DBDTimerComponent_ResetTo) == 0x000004, "Wrong size on DBDTimerComponent_ResetTo");
static_assert(offsetof(DBDTimerComponent_ResetTo, Time) == 0x000000, "Member 'DBDTimerComponent_ResetTo::Time' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.Update
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_Update) == 0x000004, "Wrong alignment on DBDTimerComponent_Update");
static_assert(sizeof(DBDTimerComponent_Update) == 0x000004, "Wrong size on DBDTimerComponent_Update");
static_assert(offsetof(DBDTimerComponent_Update, DeltaTime) == 0x000000, "Member 'DBDTimerComponent_Update::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetPercentTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetPercentTimeElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetPercentTimeElapsed) == 0x000004, "Wrong alignment on DBDTimerComponent_GetPercentTimeElapsed");
static_assert(sizeof(DBDTimerComponent_GetPercentTimeElapsed) == 0x000004, "Wrong size on DBDTimerComponent_GetPercentTimeElapsed");
static_assert(offsetof(DBDTimerComponent_GetPercentTimeElapsed, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetPercentTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetPercentTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetPercentTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetPercentTimeLeft) == 0x000004, "Wrong alignment on DBDTimerComponent_GetPercentTimeLeft");
static_assert(sizeof(DBDTimerComponent_GetPercentTimeLeft) == 0x000004, "Wrong size on DBDTimerComponent_GetPercentTimeLeft");
static_assert(offsetof(DBDTimerComponent_GetPercentTimeLeft, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetPercentTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetStartTime
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetStartTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetStartTime) == 0x000004, "Wrong alignment on DBDTimerComponent_GetStartTime");
static_assert(sizeof(DBDTimerComponent_GetStartTime) == 0x000004, "Wrong size on DBDTimerComponent_GetStartTime");
static_assert(offsetof(DBDTimerComponent_GetStartTime, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetStartTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetTimeElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetTimeElapsed) == 0x000004, "Wrong alignment on DBDTimerComponent_GetTimeElapsed");
static_assert(sizeof(DBDTimerComponent_GetTimeElapsed) == 0x000004, "Wrong size on DBDTimerComponent_GetTimeElapsed");
static_assert(offsetof(DBDTimerComponent_GetTimeElapsed, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.GetTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct DBDTimerComponent_GetTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_GetTimeLeft) == 0x000004, "Wrong alignment on DBDTimerComponent_GetTimeLeft");
static_assert(sizeof(DBDTimerComponent_GetTimeLeft) == 0x000004, "Wrong size on DBDTimerComponent_GetTimeLeft");
static_assert(offsetof(DBDTimerComponent_GetTimeLeft, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_GetTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.IsDone
// 0x0001 (0x0001 - 0x0000)
struct DBDTimerComponent_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_IsDone) == 0x000001, "Wrong alignment on DBDTimerComponent_IsDone");
static_assert(sizeof(DBDTimerComponent_IsDone) == 0x000001, "Wrong size on DBDTimerComponent_IsDone");
static_assert(offsetof(DBDTimerComponent_IsDone, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_IsDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDTimerComponent.IsOnPause
// 0x0001 (0x0001 - 0x0000)
struct DBDTimerComponent_IsOnPause final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDTimerComponent_IsOnPause) == 0x000001, "Wrong alignment on DBDTimerComponent_IsOnPause");
static_assert(sizeof(DBDTimerComponent_IsOnPause) == 0x000001, "Wrong size on DBDTimerComponent_IsOnPause");
static_assert(offsetof(DBDTimerComponent_IsOnPause, ReturnValue) == 0x000000, "Member 'DBDTimerComponent_IsOnPause::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.AddComponentToActor
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_AddComponentToActor final
{
public:
	class UClass*                                 CompClass;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CompName;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Actor;                                             // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActorComponent*                        ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_AddComponentToActor) == 0x000008, "Wrong alignment on DBDUtilities_AddComponentToActor");
static_assert(sizeof(DBDUtilities_AddComponentToActor) == 0x000028, "Wrong size on DBDUtilities_AddComponentToActor");
static_assert(offsetof(DBDUtilities_AddComponentToActor, CompClass) == 0x000000, "Member 'DBDUtilities_AddComponentToActor::CompClass' has a wrong offset!");
static_assert(offsetof(DBDUtilities_AddComponentToActor, CompName) == 0x000008, "Member 'DBDUtilities_AddComponentToActor::CompName' has a wrong offset!");
static_assert(offsetof(DBDUtilities_AddComponentToActor, Actor) == 0x000018, "Member 'DBDUtilities_AddComponentToActor::Actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_AddComponentToActor, ReturnValue) == 0x000020, "Member 'DBDUtilities_AddComponentToActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.BoxTraceAgainstActor
// 0x0138 (0x0138 - 0x0000)
struct DBDUtilities_BoxTraceAgainstActor final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UBoxComponent*                    Box;                                               // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHitResult;                                      // 0x0040(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_BoxTraceAgainstActor) == 0x000008, "Wrong alignment on DBDUtilities_BoxTraceAgainstActor");
static_assert(sizeof(DBDUtilities_BoxTraceAgainstActor) == 0x000138, "Wrong size on DBDUtilities_BoxTraceAgainstActor");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, Start) == 0x000000, "Member 'DBDUtilities_BoxTraceAgainstActor::Start' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, End) == 0x000018, "Member 'DBDUtilities_BoxTraceAgainstActor::End' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, Box) == 0x000030, "Member 'DBDUtilities_BoxTraceAgainstActor::Box' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, Actor) == 0x000038, "Member 'DBDUtilities_BoxTraceAgainstActor::Actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, OutHitResult) == 0x000040, "Member 'DBDUtilities_BoxTraceAgainstActor::OutHitResult' has a wrong offset!");
static_assert(offsetof(DBDUtilities_BoxTraceAgainstActor, ReturnValue) == 0x000130, "Member 'DBDUtilities_BoxTraceAgainstActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.DBDCapsuleTraceSingle
// 0x0158 (0x0158 - 0x0000)
struct DBDUtilities_DBDCapsuleTraceSingle final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Start;                                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HalfHeight;                                        // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             TraceChannel;                                      // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceComplex;                                     // 0x0041(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsToIgnore;                                    // 0x0048(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0060(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bIgnoreSelf;                                       // 0x0150(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0151(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_DBDCapsuleTraceSingle) == 0x000008, "Wrong alignment on DBDUtilities_DBDCapsuleTraceSingle");
static_assert(sizeof(DBDUtilities_DBDCapsuleTraceSingle) == 0x000158, "Wrong size on DBDUtilities_DBDCapsuleTraceSingle");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, WorldContextObject) == 0x000000, "Member 'DBDUtilities_DBDCapsuleTraceSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, Start) == 0x000008, "Member 'DBDUtilities_DBDCapsuleTraceSingle::Start' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, End) == 0x000020, "Member 'DBDUtilities_DBDCapsuleTraceSingle::End' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, Radius) == 0x000038, "Member 'DBDUtilities_DBDCapsuleTraceSingle::Radius' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, HalfHeight) == 0x00003C, "Member 'DBDUtilities_DBDCapsuleTraceSingle::HalfHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, TraceChannel) == 0x000040, "Member 'DBDUtilities_DBDCapsuleTraceSingle::TraceChannel' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, bTraceComplex) == 0x000041, "Member 'DBDUtilities_DBDCapsuleTraceSingle::bTraceComplex' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, ActorsToIgnore) == 0x000048, "Member 'DBDUtilities_DBDCapsuleTraceSingle::ActorsToIgnore' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, DrawDebugType) == 0x000058, "Member 'DBDUtilities_DBDCapsuleTraceSingle::DrawDebugType' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, OutHit) == 0x000060, "Member 'DBDUtilities_DBDCapsuleTraceSingle::OutHit' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, bIgnoreSelf) == 0x000150, "Member 'DBDUtilities_DBDCapsuleTraceSingle::bIgnoreSelf' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DBDCapsuleTraceSingle, ReturnValue) == 0x000151, "Member 'DBDUtilities_DBDCapsuleTraceSingle::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.DistanceFromPointToPane
// 0x0050 (0x0050 - 0x0000)
struct DBDUtilities_DistanceFromPointToPane final
{
public:
	struct FVector                                Point;                                             // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlane                                 Plane;                                             // 0x0020(0x0020)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0xC];                                       // 0x0044(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_DistanceFromPointToPane) == 0x000010, "Wrong alignment on DBDUtilities_DistanceFromPointToPane");
static_assert(sizeof(DBDUtilities_DistanceFromPointToPane) == 0x000050, "Wrong size on DBDUtilities_DistanceFromPointToPane");
static_assert(offsetof(DBDUtilities_DistanceFromPointToPane, Point) == 0x000000, "Member 'DBDUtilities_DistanceFromPointToPane::Point' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DistanceFromPointToPane, Plane) == 0x000020, "Member 'DBDUtilities_DistanceFromPointToPane::Plane' has a wrong offset!");
static_assert(offsetof(DBDUtilities_DistanceFromPointToPane, ReturnValue) == 0x000040, "Member 'DBDUtilities_DistanceFromPointToPane::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.FindFloorSingle
// 0x0120 (0x0120 - 0x0000)
struct DBDUtilities_FindFloorSingle final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaycastLength;                                     // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             OutHit;                                            // 0x0028(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0118(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_FindFloorSingle) == 0x000008, "Wrong alignment on DBDUtilities_FindFloorSingle");
static_assert(sizeof(DBDUtilities_FindFloorSingle) == 0x000120, "Wrong size on DBDUtilities_FindFloorSingle");
static_assert(offsetof(DBDUtilities_FindFloorSingle, WorldContextObject) == 0x000000, "Member 'DBDUtilities_FindFloorSingle::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindFloorSingle, Location) == 0x000008, "Member 'DBDUtilities_FindFloorSingle::Location' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindFloorSingle, RaycastLength) == 0x000020, "Member 'DBDUtilities_FindFloorSingle::RaycastLength' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindFloorSingle, OutHit) == 0x000028, "Member 'DBDUtilities_FindFloorSingle::OutHit' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindFloorSingle, ReturnValue) == 0x000118, "Member 'DBDUtilities_FindFloorSingle::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.FindParentOfClass
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_FindParentOfClass final
{
public:
	class AActor*                                 InChild;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 InClass;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_FindParentOfClass) == 0x000008, "Wrong alignment on DBDUtilities_FindParentOfClass");
static_assert(sizeof(DBDUtilities_FindParentOfClass) == 0x000018, "Wrong size on DBDUtilities_FindParentOfClass");
static_assert(offsetof(DBDUtilities_FindParentOfClass, InChild) == 0x000000, "Member 'DBDUtilities_FindParentOfClass::InChild' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindParentOfClass, InClass) == 0x000008, "Member 'DBDUtilities_FindParentOfClass::InClass' has a wrong offset!");
static_assert(offsetof(DBDUtilities_FindParentOfClass, ReturnValue) == 0x000010, "Member 'DBDUtilities_FindParentOfClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetActiveShadowSystem
// 0x0001 (0x0001 - 0x0000)
struct DBDUtilities_GetActiveShadowSystem final
{
public:
	EShadowSystem                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetActiveShadowSystem) == 0x000001, "Wrong alignment on DBDUtilities_GetActiveShadowSystem");
static_assert(sizeof(DBDUtilities_GetActiveShadowSystem) == 0x000001, "Wrong size on DBDUtilities_GetActiveShadowSystem");
static_assert(offsetof(DBDUtilities_GetActiveShadowSystem, ReturnValue) == 0x000000, "Member 'DBDUtilities_GetActiveShadowSystem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetActorOwnerName
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetActorOwnerName final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetActorOwnerName) == 0x000008, "Wrong alignment on DBDUtilities_GetActorOwnerName");
static_assert(sizeof(DBDUtilities_GetActorOwnerName) == 0x000018, "Wrong size on DBDUtilities_GetActorOwnerName");
static_assert(offsetof(DBDUtilities_GetActorOwnerName, Actor) == 0x000000, "Member 'DBDUtilities_GetActorOwnerName::Actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetActorOwnerName, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetActorOwnerName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetActorSpawners
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetActorSpawners final
{
public:
	TArray<class UActorSpawner*>                  ActorSpawners;                                     // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetActorSpawners) == 0x000008, "Wrong alignment on DBDUtilities_GetActorSpawners");
static_assert(sizeof(DBDUtilities_GetActorSpawners) == 0x000010, "Wrong size on DBDUtilities_GetActorSpawners");
static_assert(offsetof(DBDUtilities_GetActorSpawners, ActorSpawners) == 0x000000, "Member 'DBDUtilities_GetActorSpawners::ActorSpawners' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetAnimSequenceLength
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetAnimSequenceLength final
{
public:
	const class UAnimSequence*                    Sequence;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetAnimSequenceLength) == 0x000008, "Wrong alignment on DBDUtilities_GetAnimSequenceLength");
static_assert(sizeof(DBDUtilities_GetAnimSequenceLength) == 0x000010, "Wrong size on DBDUtilities_GetAnimSequenceLength");
static_assert(offsetof(DBDUtilities_GetAnimSequenceLength, Sequence) == 0x000000, "Member 'DBDUtilities_GetAnimSequenceLength::Sequence' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetAnimSequenceLength, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetAnimSequenceLength::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetBuilder
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetBuilder final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AProceduralLevelBuilder*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetBuilder) == 0x000008, "Wrong alignment on DBDUtilities_GetBuilder");
static_assert(sizeof(DBDUtilities_GetBuilder) == 0x000010, "Wrong size on DBDUtilities_GetBuilder");
static_assert(offsetof(DBDUtilities_GetBuilder, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetBuilder::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetBuilder, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetBuilder::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetClosestGenerators
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetClosestGenerators final
{
public:
	TArray<class AGenerator*>                     UnrevealedGenerators;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ClosestGeneratorsCount;                            // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGenerator*>                     ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetClosestGenerators) == 0x000008, "Wrong alignment on DBDUtilities_GetClosestGenerators");
static_assert(sizeof(DBDUtilities_GetClosestGenerators) == 0x000028, "Wrong size on DBDUtilities_GetClosestGenerators");
static_assert(offsetof(DBDUtilities_GetClosestGenerators, UnrevealedGenerators) == 0x000000, "Member 'DBDUtilities_GetClosestGenerators::UnrevealedGenerators' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestGenerators, ClosestGeneratorsCount) == 0x000010, "Member 'DBDUtilities_GetClosestGenerators::ClosestGeneratorsCount' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestGenerators, ReturnValue) == 0x000018, "Member 'DBDUtilities_GetClosestGenerators::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetClosestPointOnOrbit
// 0x0050 (0x0050 - 0x0000)
struct DBDUtilities_GetClosestPointOnOrbit final
{
public:
	struct FVector                                CenterPoint;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OrbitterPosition;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetClosestPointOnOrbit) == 0x000008, "Wrong alignment on DBDUtilities_GetClosestPointOnOrbit");
static_assert(sizeof(DBDUtilities_GetClosestPointOnOrbit) == 0x000050, "Wrong size on DBDUtilities_GetClosestPointOnOrbit");
static_assert(offsetof(DBDUtilities_GetClosestPointOnOrbit, CenterPoint) == 0x000000, "Member 'DBDUtilities_GetClosestPointOnOrbit::CenterPoint' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestPointOnOrbit, OrbitterPosition) == 0x000018, "Member 'DBDUtilities_GetClosestPointOnOrbit::OrbitterPosition' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestPointOnOrbit, Distance) == 0x000030, "Member 'DBDUtilities_GetClosestPointOnOrbit::Distance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestPointOnOrbit, ReturnValue) == 0x000038, "Member 'DBDUtilities_GetClosestPointOnOrbit::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetClosestSnapTransformOnOrbit
// 0x00A0 (0x00A0 - 0x0000)
struct DBDUtilities_GetClosestSnapTransformOnOrbit final
{
public:
	struct FVector                                CenterPoint;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OrbitterPosition;                                  // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0030(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0xC];                                       // 0x0034(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ReturnValue;                                       // 0x0040(0x0060)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetClosestSnapTransformOnOrbit) == 0x000010, "Wrong alignment on DBDUtilities_GetClosestSnapTransformOnOrbit");
static_assert(sizeof(DBDUtilities_GetClosestSnapTransformOnOrbit) == 0x0000A0, "Wrong size on DBDUtilities_GetClosestSnapTransformOnOrbit");
static_assert(offsetof(DBDUtilities_GetClosestSnapTransformOnOrbit, CenterPoint) == 0x000000, "Member 'DBDUtilities_GetClosestSnapTransformOnOrbit::CenterPoint' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestSnapTransformOnOrbit, OrbitterPosition) == 0x000018, "Member 'DBDUtilities_GetClosestSnapTransformOnOrbit::OrbitterPosition' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestSnapTransformOnOrbit, Distance) == 0x000030, "Member 'DBDUtilities_GetClosestSnapTransformOnOrbit::Distance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestSnapTransformOnOrbit, ReturnValue) == 0x000040, "Member 'DBDUtilities_GetClosestSnapTransformOnOrbit::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetClosestUnrepairedGenerator
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetClosestUnrepairedGenerator final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGenerator*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetClosestUnrepairedGenerator) == 0x000008, "Wrong alignment on DBDUtilities_GetClosestUnrepairedGenerator");
static_assert(sizeof(DBDUtilities_GetClosestUnrepairedGenerator) == 0x000010, "Wrong size on DBDUtilities_GetClosestUnrepairedGenerator");
static_assert(offsetof(DBDUtilities_GetClosestUnrepairedGenerator, Actor) == 0x000000, "Member 'DBDUtilities_GetClosestUnrepairedGenerator::Actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetClosestUnrepairedGenerator, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetClosestUnrepairedGenerator::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetComponentOwnerName
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetComponentOwnerName final
{
public:
	class UActorComponent*                        ActorComponent;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetComponentOwnerName) == 0x000008, "Wrong alignment on DBDUtilities_GetComponentOwnerName");
static_assert(sizeof(DBDUtilities_GetComponentOwnerName) == 0x000018, "Wrong size on DBDUtilities_GetComponentOwnerName");
static_assert(offsetof(DBDUtilities_GetComponentOwnerName, ActorComponent) == 0x000000, "Member 'DBDUtilities_GetComponentOwnerName::ActorComponent' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetComponentOwnerName, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetComponentOwnerName::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDBDAIPlayerController
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDBDAIPlayerController final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDAIPlayerController*                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetDBDAIPlayerController) == 0x000008, "Wrong alignment on DBDUtilities_GetDBDAIPlayerController");
static_assert(sizeof(DBDUtilities_GetDBDAIPlayerController) == 0x000010, "Wrong size on DBDUtilities_GetDBDAIPlayerController");
static_assert(offsetof(DBDUtilities_GetDBDAIPlayerController, Player) == 0x000000, "Member 'DBDUtilities_GetDBDAIPlayerController::Player' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDBDAIPlayerController, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDBDAIPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDBDGameInstance
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDBDGameInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDGameInstance*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetDBDGameInstance) == 0x000008, "Wrong alignment on DBDUtilities_GetDBDGameInstance");
static_assert(sizeof(DBDUtilities_GetDBDGameInstance) == 0x000010, "Wrong size on DBDUtilities_GetDBDGameInstance");
static_assert(offsetof(DBDUtilities_GetDBDGameInstance, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetDBDGameInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDBDGameInstance, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDBDGameInstance::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDBDGameMode
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDBDGameMode final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDGameMode*                           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetDBDGameMode) == 0x000008, "Wrong alignment on DBDUtilities_GetDBDGameMode");
static_assert(sizeof(DBDUtilities_GetDBDGameMode) == 0x000010, "Wrong size on DBDUtilities_GetDBDGameMode");
static_assert(offsetof(DBDUtilities_GetDBDGameMode, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetDBDGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDBDGameMode, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDBDGameMode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDBDGameState
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDBDGameState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDGameState*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetDBDGameState) == 0x000008, "Wrong alignment on DBDUtilities_GetDBDGameState");
static_assert(sizeof(DBDUtilities_GetDBDGameState) == 0x000010, "Wrong size on DBDUtilities_GetDBDGameState");
static_assert(offsetof(DBDUtilities_GetDBDGameState, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetDBDGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDBDGameState, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDBDGameState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetDistanceToNearestHookedSurvivor
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetDistanceToNearestHookedSurvivor final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetDistanceToNearestHookedSurvivor) == 0x000008, "Wrong alignment on DBDUtilities_GetDistanceToNearestHookedSurvivor");
static_assert(sizeof(DBDUtilities_GetDistanceToNearestHookedSurvivor) == 0x000010, "Wrong size on DBDUtilities_GetDistanceToNearestHookedSurvivor");
static_assert(offsetof(DBDUtilities_GetDistanceToNearestHookedSurvivor, Player) == 0x000000, "Member 'DBDUtilities_GetDistanceToNearestHookedSurvivor::Player' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetDistanceToNearestHookedSurvivor, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetDistanceToNearestHookedSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetEndGameTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetEndGameTunableValue final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ValueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetEndGameTunableValue) == 0x000008, "Wrong alignment on DBDUtilities_GetEndGameTunableValue");
static_assert(sizeof(DBDUtilities_GetEndGameTunableValue) == 0x000018, "Wrong size on DBDUtilities_GetEndGameTunableValue");
static_assert(offsetof(DBDUtilities_GetEndGameTunableValue, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetEndGameTunableValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetEndGameTunableValue, ValueName) == 0x000008, "Member 'DBDUtilities_GetEndGameTunableValue::ValueName' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetEndGameTunableValue, ReturnValue) == 0x000014, "Member 'DBDUtilities_GetEndGameTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetFirstActorWithTag
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetFirstActorWithTag final
{
public:
	class FName                                   Tag;                                               // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ActorsArray;                                       // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetFirstActorWithTag) == 0x000008, "Wrong alignment on DBDUtilities_GetFirstActorWithTag");
static_assert(sizeof(DBDUtilities_GetFirstActorWithTag) == 0x000028, "Wrong size on DBDUtilities_GetFirstActorWithTag");
static_assert(offsetof(DBDUtilities_GetFirstActorWithTag, Tag) == 0x000000, "Member 'DBDUtilities_GetFirstActorWithTag::Tag' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFirstActorWithTag, ActorsArray) == 0x000010, "Member 'DBDUtilities_GetFirstActorWithTag::ActorsArray' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFirstActorWithTag, ReturnValue) == 0x000020, "Member 'DBDUtilities_GetFirstActorWithTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetFloorLocationAt
// 0x0048 (0x0048 - 0x0000)
struct DBDUtilities_GetFloorLocationAt final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaycastStartHeight;                                // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaycastEndHeight;                                  // 0x0024(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComplex;                                        // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0030(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetFloorLocationAt) == 0x000008, "Wrong alignment on DBDUtilities_GetFloorLocationAt");
static_assert(sizeof(DBDUtilities_GetFloorLocationAt) == 0x000048, "Wrong size on DBDUtilities_GetFloorLocationAt");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetFloorLocationAt::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, Location) == 0x000008, "Member 'DBDUtilities_GetFloorLocationAt::Location' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, RaycastStartHeight) == 0x000020, "Member 'DBDUtilities_GetFloorLocationAt::RaycastStartHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, RaycastEndHeight) == 0x000024, "Member 'DBDUtilities_GetFloorLocationAt::RaycastEndHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, UseComplex) == 0x000028, "Member 'DBDUtilities_GetFloorLocationAt::UseComplex' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFloorLocationAt, ReturnValue) == 0x000030, "Member 'DBDUtilities_GetFloorLocationAt::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetFormattedNumberString
// 0x0020 (0x0020 - 0x0000)
struct DBDUtilities_GetFormattedNumberString final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDecimals;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDecimals;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeadingZero;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetFormattedNumberString) == 0x000008, "Wrong alignment on DBDUtilities_GetFormattedNumberString");
static_assert(sizeof(DBDUtilities_GetFormattedNumberString) == 0x000020, "Wrong size on DBDUtilities_GetFormattedNumberString");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, Value) == 0x000000, "Member 'DBDUtilities_GetFormattedNumberString::Value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, MaxDecimals) == 0x000004, "Member 'DBDUtilities_GetFormattedNumberString::MaxDecimals' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, MinDecimals) == 0x000008, "Member 'DBDUtilities_GetFormattedNumberString::MinDecimals' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, LeadingZero) == 0x00000C, "Member 'DBDUtilities_GetFormattedNumberString::LeadingZero' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberString, ReturnValue) == 0x000010, "Member 'DBDUtilities_GetFormattedNumberString::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetFormattedNumberText
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetFormattedNumberText final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxDecimals;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinDecimals;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LeadingZero;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetFormattedNumberText) == 0x000008, "Wrong alignment on DBDUtilities_GetFormattedNumberText");
static_assert(sizeof(DBDUtilities_GetFormattedNumberText) == 0x000028, "Wrong size on DBDUtilities_GetFormattedNumberText");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, Value) == 0x000000, "Member 'DBDUtilities_GetFormattedNumberText::Value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, MaxDecimals) == 0x000004, "Member 'DBDUtilities_GetFormattedNumberText::MaxDecimals' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, MinDecimals) == 0x000008, "Member 'DBDUtilities_GetFormattedNumberText::MinDecimals' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, LeadingZero) == 0x00000C, "Member 'DBDUtilities_GetFormattedNumberText::LeadingZero' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetFormattedNumberText, ReturnValue) == 0x000010, "Member 'DBDUtilities_GetFormattedNumberText::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetImpactCollisionObjectType
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetImpactCollisionObjectType final
{
public:
	const class UPrimitiveComponent*              Primitive;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetImpactCollisionObjectType) == 0x000008, "Wrong alignment on DBDUtilities_GetImpactCollisionObjectType");
static_assert(sizeof(DBDUtilities_GetImpactCollisionObjectType) == 0x000010, "Wrong size on DBDUtilities_GetImpactCollisionObjectType");
static_assert(offsetof(DBDUtilities_GetImpactCollisionObjectType, Primitive) == 0x000000, "Member 'DBDUtilities_GetImpactCollisionObjectType::Primitive' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetImpactCollisionObjectType, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetImpactCollisionObjectType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetImpactCollisionResponseContainer
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetImpactCollisionResponseContainer final
{
public:
	const class UPrimitiveComponent*              Primitive;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResponseContainer            ReturnValue;                                       // 0x0008(0x0020)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetImpactCollisionResponseContainer) == 0x000008, "Wrong alignment on DBDUtilities_GetImpactCollisionResponseContainer");
static_assert(sizeof(DBDUtilities_GetImpactCollisionResponseContainer) == 0x000028, "Wrong size on DBDUtilities_GetImpactCollisionResponseContainer");
static_assert(offsetof(DBDUtilities_GetImpactCollisionResponseContainer, Primitive) == 0x000000, "Member 'DBDUtilities_GetImpactCollisionResponseContainer::Primitive' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetImpactCollisionResponseContainer, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetImpactCollisionResponseContainer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetInventoryCount
// 0x0020 (0x0020 - 0x0000)
struct DBDUtilities_GetInventoryCount final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterIndex;                                    // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetInventoryCount) == 0x000008, "Wrong alignment on DBDUtilities_GetInventoryCount");
static_assert(sizeof(DBDUtilities_GetInventoryCount) == 0x000020, "Wrong size on DBDUtilities_GetInventoryCount");
static_assert(offsetof(DBDUtilities_GetInventoryCount, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetInventoryCount::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCount, CharacterIndex) == 0x000008, "Member 'DBDUtilities_GetInventoryCount::CharacterIndex' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCount, ItemId) == 0x00000C, "Member 'DBDUtilities_GetInventoryCount::ItemId' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCount, ReturnValue) == 0x000018, "Member 'DBDUtilities_GetInventoryCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetInventoryCountForMultipleCharacters
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetInventoryCountForMultipleCharacters final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 CharacterIndexes;                                  // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ItemId;                                            // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0024(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetInventoryCountForMultipleCharacters) == 0x000008, "Wrong alignment on DBDUtilities_GetInventoryCountForMultipleCharacters");
static_assert(sizeof(DBDUtilities_GetInventoryCountForMultipleCharacters) == 0x000028, "Wrong size on DBDUtilities_GetInventoryCountForMultipleCharacters");
static_assert(offsetof(DBDUtilities_GetInventoryCountForMultipleCharacters, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetInventoryCountForMultipleCharacters::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCountForMultipleCharacters, CharacterIndexes) == 0x000008, "Member 'DBDUtilities_GetInventoryCountForMultipleCharacters::CharacterIndexes' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCountForMultipleCharacters, ItemId) == 0x000018, "Member 'DBDUtilities_GetInventoryCountForMultipleCharacters::ItemId' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetInventoryCountForMultipleCharacters, ReturnValue) == 0x000024, "Member 'DBDUtilities_GetInventoryCountForMultipleCharacters::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocalDBDCameraManager
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocalDBDCameraManager final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayerCameraManager*                ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocalDBDCameraManager) == 0x000008, "Wrong alignment on DBDUtilities_GetLocalDBDCameraManager");
static_assert(sizeof(DBDUtilities_GetLocalDBDCameraManager) == 0x000010, "Wrong size on DBDUtilities_GetLocalDBDCameraManager");
static_assert(offsetof(DBDUtilities_GetLocalDBDCameraManager, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocalDBDCameraManager::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocalDBDCameraManager, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocalDBDCameraManager::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocalDBDPlayerController
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocalDBDPlayerController final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayerControllerBase*               ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocalDBDPlayerController) == 0x000008, "Wrong alignment on DBDUtilities_GetLocalDBDPlayerController");
static_assert(sizeof(DBDUtilities_GetLocalDBDPlayerController) == 0x000010, "Wrong size on DBDUtilities_GetLocalDBDPlayerController");
static_assert(offsetof(DBDUtilities_GetLocalDBDPlayerController, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocalDBDPlayerController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocalDBDPlayerController, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocalDBDPlayerController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyControlledCharacter
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyControlledCharacter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocallyControlledCharacter) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyControlledCharacter");
static_assert(sizeof(DBDUtilities_GetLocallyControlledCharacter) == 0x000010, "Wrong size on DBDUtilities_GetLocallyControlledCharacter");
static_assert(offsetof(DBDUtilities_GetLocallyControlledCharacter, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyControlledCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyControlledCharacter, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyControlledCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyControlledCharacterRole
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyControlledCharacterRole final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetLocallyControlledCharacterRole) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyControlledCharacterRole");
static_assert(sizeof(DBDUtilities_GetLocallyControlledCharacterRole) == 0x000010, "Wrong size on DBDUtilities_GetLocallyControlledCharacterRole");
static_assert(offsetof(DBDUtilities_GetLocallyControlledCharacterRole, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyControlledCharacterRole::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyControlledCharacterRole, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyControlledCharacterRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyControlledKiller
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyControlledKiller final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocallyControlledKiller) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyControlledKiller");
static_assert(sizeof(DBDUtilities_GetLocallyControlledKiller) == 0x000010, "Wrong size on DBDUtilities_GetLocallyControlledKiller");
static_assert(offsetof(DBDUtilities_GetLocallyControlledKiller, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyControlledKiller::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyControlledKiller, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyControlledKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyControlledSurvivor
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyControlledSurvivor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocallyControlledSurvivor) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyControlledSurvivor");
static_assert(sizeof(DBDUtilities_GetLocallyControlledSurvivor) == 0x000010, "Wrong size on DBDUtilities_GetLocallyControlledSurvivor");
static_assert(offsetof(DBDUtilities_GetLocallyControlledSurvivor, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyControlledSurvivor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyControlledSurvivor, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyControlledSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyObservedCharacter
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyObservedCharacter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLocallyObservedCharacter) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyObservedCharacter");
static_assert(sizeof(DBDUtilities_GetLocallyObservedCharacter) == 0x000010, "Wrong size on DBDUtilities_GetLocallyObservedCharacter");
static_assert(offsetof(DBDUtilities_GetLocallyObservedCharacter, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyObservedCharacter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyObservedCharacter, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyObservedCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLocallyObservedCharacterRole
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetLocallyObservedCharacterRole final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetLocallyObservedCharacterRole) == 0x000008, "Wrong alignment on DBDUtilities_GetLocallyObservedCharacterRole");
static_assert(sizeof(DBDUtilities_GetLocallyObservedCharacterRole) == 0x000010, "Wrong size on DBDUtilities_GetLocallyObservedCharacterRole");
static_assert(offsetof(DBDUtilities_GetLocallyObservedCharacterRole, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetLocallyObservedCharacterRole::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLocallyObservedCharacterRole, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetLocallyObservedCharacterRole::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetLogStringMaterialInfo
// 0x0028 (0x0028 - 0x0000)
struct DBDUtilities_GetLogStringMaterialInfo final
{
public:
	class FString                                 InStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMaterialInterface*               Root;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetLogStringMaterialInfo) == 0x000008, "Wrong alignment on DBDUtilities_GetLogStringMaterialInfo");
static_assert(sizeof(DBDUtilities_GetLogStringMaterialInfo) == 0x000028, "Wrong size on DBDUtilities_GetLogStringMaterialInfo");
static_assert(offsetof(DBDUtilities_GetLogStringMaterialInfo, InStr) == 0x000000, "Member 'DBDUtilities_GetLogStringMaterialInfo::InStr' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLogStringMaterialInfo, Root) == 0x000010, "Member 'DBDUtilities_GetLogStringMaterialInfo::Root' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetLogStringMaterialInfo, ReturnValue) == 0x000018, "Member 'DBDUtilities_GetLogStringMaterialInfo::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetMaterialHelpersAttachedToPlayerMesh
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialHelper*>                ReturnValue;                                       // 0x0008(0x0010)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh) == 0x000008, "Wrong alignment on DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh");
static_assert(sizeof(DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh) == 0x000018, "Wrong size on DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh");
static_assert(offsetof(DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh, Player) == 0x000000, "Member 'DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh::Player' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetMaterialHelpersAttachedToPlayerMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetMontageLength
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetMontageLength final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetMontageLength) == 0x000008, "Wrong alignment on DBDUtilities_GetMontageLength");
static_assert(sizeof(DBDUtilities_GetMontageLength) == 0x000010, "Wrong size on DBDUtilities_GetMontageLength");
static_assert(offsetof(DBDUtilities_GetMontageLength, Montage) == 0x000000, "Member 'DBDUtilities_GetMontageLength::Montage' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetMontageLength, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetMontageLength::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetNearbyActorsOfType
// 0x0058 (0x0058 - 0x0000)
struct DBDUtilities_GetNearbyActorsOfType final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         OutNearbyActors;                                   // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	class UClass*                                 ActorClassType;                                    // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CollisionChannel;                                  // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 IgnoreActor;                                       // 0x0048(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0050(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetNearbyActorsOfType) == 0x000008, "Wrong alignment on DBDUtilities_GetNearbyActorsOfType");
static_assert(sizeof(DBDUtilities_GetNearbyActorsOfType) == 0x000058, "Wrong size on DBDUtilities_GetNearbyActorsOfType");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, World) == 0x000000, "Member 'DBDUtilities_GetNearbyActorsOfType::World' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, Center) == 0x000008, "Member 'DBDUtilities_GetNearbyActorsOfType::Center' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, Radius) == 0x000020, "Member 'DBDUtilities_GetNearbyActorsOfType::Radius' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, OutNearbyActors) == 0x000028, "Member 'DBDUtilities_GetNearbyActorsOfType::OutNearbyActors' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, ActorClassType) == 0x000038, "Member 'DBDUtilities_GetNearbyActorsOfType::ActorClassType' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, CollisionChannel) == 0x000040, "Member 'DBDUtilities_GetNearbyActorsOfType::CollisionChannel' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, IgnoreActor) == 0x000048, "Member 'DBDUtilities_GetNearbyActorsOfType::IgnoreActor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyActorsOfType, ReturnValue) == 0x000050, "Member 'DBDUtilities_GetNearbyActorsOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetNearbyCampers
// 0x0048 (0x0048 - 0x0000)
struct DBDUtilities_GetNearbyCampers final
{
public:
	class UWorld*                                 World;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Center;                                            // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ACamperPlayer*>                  OutNearbyCampers;                                  // 0x0028(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoredCampers;                                    // 0x0038(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetNearbyCampers) == 0x000008, "Wrong alignment on DBDUtilities_GetNearbyCampers");
static_assert(sizeof(DBDUtilities_GetNearbyCampers) == 0x000048, "Wrong size on DBDUtilities_GetNearbyCampers");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, World) == 0x000000, "Member 'DBDUtilities_GetNearbyCampers::World' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, Center) == 0x000008, "Member 'DBDUtilities_GetNearbyCampers::Center' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, Radius) == 0x000020, "Member 'DBDUtilities_GetNearbyCampers::Radius' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, OutNearbyCampers) == 0x000028, "Member 'DBDUtilities_GetNearbyCampers::OutNearbyCampers' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNearbyCampers, IgnoredCampers) == 0x000038, "Member 'DBDUtilities_GetNearbyCampers::IgnoredCampers' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetNextPowerOf2
// 0x0008 (0x0008 - 0x0000)
struct DBDUtilities_GetNextPowerOf2 final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetNextPowerOf2) == 0x000004, "Wrong alignment on DBDUtilities_GetNextPowerOf2");
static_assert(sizeof(DBDUtilities_GetNextPowerOf2) == 0x000008, "Wrong size on DBDUtilities_GetNextPowerOf2");
static_assert(offsetof(DBDUtilities_GetNextPowerOf2, Value) == 0x000000, "Member 'DBDUtilities_GetNextPowerOf2::Value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetNextPowerOf2, ReturnValue) == 0x000004, "Member 'DBDUtilities_GetNextPowerOf2::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetOuterMostActor
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetOuterMostActor final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetOuterMostActor) == 0x000008, "Wrong alignment on DBDUtilities_GetOuterMostActor");
static_assert(sizeof(DBDUtilities_GetOuterMostActor) == 0x000010, "Wrong size on DBDUtilities_GetOuterMostActor");
static_assert(offsetof(DBDUtilities_GetOuterMostActor, AnimInstance) == 0x000000, "Member 'DBDUtilities_GetOuterMostActor::AnimInstance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetOuterMostActor, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetOuterMostActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetOwningCamper
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetOwningCamper final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetOwningCamper) == 0x000008, "Wrong alignment on DBDUtilities_GetOwningCamper");
static_assert(sizeof(DBDUtilities_GetOwningCamper) == 0x000010, "Wrong size on DBDUtilities_GetOwningCamper");
static_assert(offsetof(DBDUtilities_GetOwningCamper, AnimInstance) == 0x000000, "Member 'DBDUtilities_GetOwningCamper::AnimInstance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetOwningCamper, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetOwningCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetOwningDBDBasePlayer
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetOwningDBDBasePlayer final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDBasePlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetOwningDBDBasePlayer) == 0x000008, "Wrong alignment on DBDUtilities_GetOwningDBDBasePlayer");
static_assert(sizeof(DBDUtilities_GetOwningDBDBasePlayer) == 0x000010, "Wrong size on DBDUtilities_GetOwningDBDBasePlayer");
static_assert(offsetof(DBDUtilities_GetOwningDBDBasePlayer, AnimInstance) == 0x000000, "Member 'DBDUtilities_GetOwningDBDBasePlayer::AnimInstance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetOwningDBDBasePlayer, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetOwningDBDBasePlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetOwningSlasher
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetOwningSlasher final
{
public:
	const class UAnimInstance*                    AnimInstance;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetOwningSlasher) == 0x000008, "Wrong alignment on DBDUtilities_GetOwningSlasher");
static_assert(sizeof(DBDUtilities_GetOwningSlasher) == 0x000010, "Wrong size on DBDUtilities_GetOwningSlasher");
static_assert(offsetof(DBDUtilities_GetOwningSlasher, AnimInstance) == 0x000000, "Member 'DBDUtilities_GetOwningSlasher::AnimInstance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetOwningSlasher, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetOwningSlasher::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetPercentOfRange
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetPercentOfRange final
{
public:
	float                                         Val;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Min;                                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetPercentOfRange) == 0x000004, "Wrong alignment on DBDUtilities_GetPercentOfRange");
static_assert(sizeof(DBDUtilities_GetPercentOfRange) == 0x000010, "Wrong size on DBDUtilities_GetPercentOfRange");
static_assert(offsetof(DBDUtilities_GetPercentOfRange, Val) == 0x000000, "Member 'DBDUtilities_GetPercentOfRange::Val' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPercentOfRange, Min) == 0x000004, "Member 'DBDUtilities_GetPercentOfRange::Min' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPercentOfRange, Max) == 0x000008, "Member 'DBDUtilities_GetPercentOfRange::Max' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPercentOfRange, ReturnValue) == 0x00000C, "Member 'DBDUtilities_GetPercentOfRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetPlayRateForMontage
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetPlayRateForMontage final
{
public:
	class UAnimMontage*                           Montage;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetPlayRateForMontage) == 0x000008, "Wrong alignment on DBDUtilities_GetPlayRateForMontage");
static_assert(sizeof(DBDUtilities_GetPlayRateForMontage) == 0x000010, "Wrong size on DBDUtilities_GetPlayRateForMontage");
static_assert(offsetof(DBDUtilities_GetPlayRateForMontage, Montage) == 0x000000, "Member 'DBDUtilities_GetPlayRateForMontage::Montage' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPlayRateForMontage, Time) == 0x000008, "Member 'DBDUtilities_GetPlayRateForMontage::Time' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetPlayRateForMontage, ReturnValue) == 0x00000C, "Member 'DBDUtilities_GetPlayRateForMontage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetSimilarVector
// 0x0038 (0x0038 - 0x0000)
struct DBDUtilities_GetSimilarVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDeviation;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetSimilarVector) == 0x000008, "Wrong alignment on DBDUtilities_GetSimilarVector");
static_assert(sizeof(DBDUtilities_GetSimilarVector) == 0x000038, "Wrong size on DBDUtilities_GetSimilarVector");
static_assert(offsetof(DBDUtilities_GetSimilarVector, Vector) == 0x000000, "Member 'DBDUtilities_GetSimilarVector::Vector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSimilarVector, MaximumDeviation) == 0x000018, "Member 'DBDUtilities_GetSimilarVector::MaximumDeviation' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSimilarVector, ReturnValue) == 0x000020, "Member 'DBDUtilities_GetSimilarVector::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetSlasherTunableValue
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetSlasherTunableValue final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ValueName;                                         // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetSlasherTunableValue) == 0x000008, "Wrong alignment on DBDUtilities_GetSlasherTunableValue");
static_assert(sizeof(DBDUtilities_GetSlasherTunableValue) == 0x000018, "Wrong size on DBDUtilities_GetSlasherTunableValue");
static_assert(offsetof(DBDUtilities_GetSlasherTunableValue, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetSlasherTunableValue::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSlasherTunableValue, ValueName) == 0x000008, "Member 'DBDUtilities_GetSlasherTunableValue::ValueName' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSlasherTunableValue, ReturnValue) == 0x000014, "Member 'DBDUtilities_GetSlasherTunableValue::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetSquaredDistanceToKiller
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetSquaredDistanceToKiller final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetSquaredDistanceToKiller) == 0x000008, "Wrong alignment on DBDUtilities_GetSquaredDistanceToKiller");
static_assert(sizeof(DBDUtilities_GetSquaredDistanceToKiller) == 0x000010, "Wrong size on DBDUtilities_GetSquaredDistanceToKiller");
static_assert(offsetof(DBDUtilities_GetSquaredDistanceToKiller, Actor) == 0x000000, "Member 'DBDUtilities_GetSquaredDistanceToKiller::Actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetSquaredDistanceToKiller, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetSquaredDistanceToKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetTileSpawnPoints
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetTileSpawnPoints final
{
public:
	TArray<class UTileSpawnPoint*>                TileSpawnPoints;                                   // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetTileSpawnPoints) == 0x000008, "Wrong alignment on DBDUtilities_GetTileSpawnPoints");
static_assert(sizeof(DBDUtilities_GetTileSpawnPoints) == 0x000010, "Wrong size on DBDUtilities_GetTileSpawnPoints");
static_assert(offsetof(DBDUtilities_GetTileSpawnPoints, TileSpawnPoints) == 0x000000, "Member 'DBDUtilities_GetTileSpawnPoints::TileSpawnPoints' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetTotalPlaytime
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_GetTotalPlaytime final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Update;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetTotalPlaytime) == 0x000008, "Wrong alignment on DBDUtilities_GetTotalPlaytime");
static_assert(sizeof(DBDUtilities_GetTotalPlaytime) == 0x000018, "Wrong size on DBDUtilities_GetTotalPlaytime");
static_assert(offsetof(DBDUtilities_GetTotalPlaytime, WorldContextObject) == 0x000000, "Member 'DBDUtilities_GetTotalPlaytime::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetTotalPlaytime, Update) == 0x000008, "Member 'DBDUtilities_GetTotalPlaytime::Update' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetTotalPlaytime, ReturnValue) == 0x000010, "Member 'DBDUtilities_GetTotalPlaytime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetVelocityXYAngleDegrees
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_GetVelocityXYAngleDegrees final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_GetVelocityXYAngleDegrees) == 0x000008, "Wrong alignment on DBDUtilities_GetVelocityXYAngleDegrees");
static_assert(sizeof(DBDUtilities_GetVelocityXYAngleDegrees) == 0x000010, "Wrong size on DBDUtilities_GetVelocityXYAngleDegrees");
static_assert(offsetof(DBDUtilities_GetVelocityXYAngleDegrees, Actor) == 0x000000, "Member 'DBDUtilities_GetVelocityXYAngleDegrees::Actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetVelocityXYAngleDegrees, ReturnValue) == 0x000008, "Member 'DBDUtilities_GetVelocityXYAngleDegrees::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetXYVector
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilities_GetXYVector final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetXYVector) == 0x000008, "Wrong alignment on DBDUtilities_GetXYVector");
static_assert(sizeof(DBDUtilities_GetXYVector) == 0x000030, "Wrong size on DBDUtilities_GetXYVector");
static_assert(offsetof(DBDUtilities_GetXYVector, Vector) == 0x000000, "Member 'DBDUtilities_GetXYVector::Vector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetXYVector, ReturnValue) == 0x000018, "Member 'DBDUtilities_GetXYVector::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.GetYawOnly
// 0x0030 (0x0030 - 0x0000)
struct DBDUtilities_GetYawOnly final
{
public:
	struct FRotator                               Rotation;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0018(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_GetYawOnly) == 0x000008, "Wrong alignment on DBDUtilities_GetYawOnly");
static_assert(sizeof(DBDUtilities_GetYawOnly) == 0x000030, "Wrong size on DBDUtilities_GetYawOnly");
static_assert(offsetof(DBDUtilities_GetYawOnly, Rotation) == 0x000000, "Member 'DBDUtilities_GetYawOnly::Rotation' has a wrong offset!");
static_assert(offsetof(DBDUtilities_GetYawOnly, ReturnValue) == 0x000018, "Member 'DBDUtilities_GetYawOnly::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.HasFloorForward
// 0x0078 (0x0078 - 0x0000)
struct DBDUtilities_HasFloorForward final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FowardVector;                                      // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaycastStartHeight;                                // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaycastEndHeight;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutHits;                                           // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                RaycastStart;                                      // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_HasFloorForward) == 0x000008, "Wrong alignment on DBDUtilities_HasFloorForward");
static_assert(sizeof(DBDUtilities_HasFloorForward) == 0x000078, "Wrong size on DBDUtilities_HasFloorForward");
static_assert(offsetof(DBDUtilities_HasFloorForward, WorldContextObject) == 0x000000, "Member 'DBDUtilities_HasFloorForward::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, Location) == 0x000008, "Member 'DBDUtilities_HasFloorForward::Location' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, FowardVector) == 0x000020, "Member 'DBDUtilities_HasFloorForward::FowardVector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, Distance) == 0x000038, "Member 'DBDUtilities_HasFloorForward::Distance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, RaycastStartHeight) == 0x00003C, "Member 'DBDUtilities_HasFloorForward::RaycastStartHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, RaycastEndHeight) == 0x000040, "Member 'DBDUtilities_HasFloorForward::RaycastEndHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, OutHits) == 0x000048, "Member 'DBDUtilities_HasFloorForward::OutHits' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, RaycastStart) == 0x000058, "Member 'DBDUtilities_HasFloorForward::RaycastStart' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasFloorForward, ReturnValue) == 0x000070, "Member 'DBDUtilities_HasFloorForward::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.HasLineOfSightToTarget
// 0x0048 (0x0048 - 0x0000)
struct DBDUtilities_HasLineOfSightToTarget final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPosition;                                     // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetPosition;                                    // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           IgnoredActor;                                      // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComplex;                                        // 0x0040(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseDebugLogs;                                      // 0x0041(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0042(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x5];                                       // 0x0043(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_HasLineOfSightToTarget) == 0x000008, "Wrong alignment on DBDUtilities_HasLineOfSightToTarget");
static_assert(sizeof(DBDUtilities_HasLineOfSightToTarget) == 0x000048, "Wrong size on DBDUtilities_HasLineOfSightToTarget");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, WorldContextObject) == 0x000000, "Member 'DBDUtilities_HasLineOfSightToTarget::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, StartPosition) == 0x000008, "Member 'DBDUtilities_HasLineOfSightToTarget::StartPosition' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, TargetPosition) == 0x000020, "Member 'DBDUtilities_HasLineOfSightToTarget::TargetPosition' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, IgnoredActor) == 0x000038, "Member 'DBDUtilities_HasLineOfSightToTarget::IgnoredActor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, UseComplex) == 0x000040, "Member 'DBDUtilities_HasLineOfSightToTarget::UseComplex' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, UseDebugLogs) == 0x000041, "Member 'DBDUtilities_HasLineOfSightToTarget::UseDebugLogs' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasLineOfSightToTarget, ReturnValue) == 0x000042, "Member 'DBDUtilities_HasLineOfSightToTarget::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.HasWalkableSurfaceForward
// 0x0078 (0x0078 - 0x0000)
struct DBDUtilities_HasWalkableSurfaceForward final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FowardVector;                                      // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaycastStartHeight;                                // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RaycastEndHeight;                                  // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHitResult>                     OutHits;                                           // 0x0048(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                RaycastStart;                                      // 0x0058(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0070(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_HasWalkableSurfaceForward) == 0x000008, "Wrong alignment on DBDUtilities_HasWalkableSurfaceForward");
static_assert(sizeof(DBDUtilities_HasWalkableSurfaceForward) == 0x000078, "Wrong size on DBDUtilities_HasWalkableSurfaceForward");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, WorldContextObject) == 0x000000, "Member 'DBDUtilities_HasWalkableSurfaceForward::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, Location) == 0x000008, "Member 'DBDUtilities_HasWalkableSurfaceForward::Location' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, FowardVector) == 0x000020, "Member 'DBDUtilities_HasWalkableSurfaceForward::FowardVector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, Distance) == 0x000038, "Member 'DBDUtilities_HasWalkableSurfaceForward::Distance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, RaycastStartHeight) == 0x00003C, "Member 'DBDUtilities_HasWalkableSurfaceForward::RaycastStartHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, RaycastEndHeight) == 0x000040, "Member 'DBDUtilities_HasWalkableSurfaceForward::RaycastEndHeight' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, OutHits) == 0x000048, "Member 'DBDUtilities_HasWalkableSurfaceForward::OutHits' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, RaycastStart) == 0x000058, "Member 'DBDUtilities_HasWalkableSurfaceForward::RaycastStart' has a wrong offset!");
static_assert(offsetof(DBDUtilities_HasWalkableSurfaceForward, ReturnValue) == 0x000070, "Member 'DBDUtilities_HasWalkableSurfaceForward::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsClassChildOfOtherClasses
// 0x0020 (0x0020 - 0x0000)
struct DBDUtilities_IsClassChildOfOtherClasses final
{
public:
	const class UClass*                           ClassToCheck;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         OtherClasses;                                      // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsClassChildOfOtherClasses) == 0x000008, "Wrong alignment on DBDUtilities_IsClassChildOfOtherClasses");
static_assert(sizeof(DBDUtilities_IsClassChildOfOtherClasses) == 0x000020, "Wrong size on DBDUtilities_IsClassChildOfOtherClasses");
static_assert(offsetof(DBDUtilities_IsClassChildOfOtherClasses, ClassToCheck) == 0x000000, "Member 'DBDUtilities_IsClassChildOfOtherClasses::ClassToCheck' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsClassChildOfOtherClasses, OtherClasses) == 0x000008, "Member 'DBDUtilities_IsClassChildOfOtherClasses::OtherClasses' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsClassChildOfOtherClasses, ReturnValue) == 0x000018, "Member 'DBDUtilities_IsClassChildOfOtherClasses::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsInKillerTeam
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsInKillerTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsInKillerTeam) == 0x000008, "Wrong alignment on DBDUtilities_IsInKillerTeam");
static_assert(sizeof(DBDUtilities_IsInKillerTeam) == 0x000010, "Wrong size on DBDUtilities_IsInKillerTeam");
static_assert(offsetof(DBDUtilities_IsInKillerTeam, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsInKillerTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsInKillerTeam, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsInKillerTeam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsInSurvivorTeam
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsInSurvivorTeam final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsInSurvivorTeam) == 0x000008, "Wrong alignment on DBDUtilities_IsInSurvivorTeam");
static_assert(sizeof(DBDUtilities_IsInSurvivorTeam) == 0x000010, "Wrong size on DBDUtilities_IsInSurvivorTeam");
static_assert(offsetof(DBDUtilities_IsInSurvivorTeam, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsInSurvivorTeam::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsInSurvivorTeam, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsInSurvivorTeam::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsInTutorialLevel
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsInTutorialLevel final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsInTutorialLevel) == 0x000008, "Wrong alignment on DBDUtilities_IsInTutorialLevel");
static_assert(sizeof(DBDUtilities_IsInTutorialLevel) == 0x000010, "Wrong size on DBDUtilities_IsInTutorialLevel");
static_assert(offsetof(DBDUtilities_IsInTutorialLevel, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsInTutorialLevel::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsInTutorialLevel, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsInTutorialLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsLocallyObservingAKiller
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsLocallyObservingAKiller final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsLocallyObservingAKiller) == 0x000008, "Wrong alignment on DBDUtilities_IsLocallyObservingAKiller");
static_assert(sizeof(DBDUtilities_IsLocallyObservingAKiller) == 0x000010, "Wrong size on DBDUtilities_IsLocallyObservingAKiller");
static_assert(offsetof(DBDUtilities_IsLocallyObservingAKiller, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsLocallyObservingAKiller::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsLocallyObservingAKiller, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsLocallyObservingAKiller::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsLocallyObservingASurvivor
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsLocallyObservingASurvivor final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsLocallyObservingASurvivor) == 0x000008, "Wrong alignment on DBDUtilities_IsLocallyObservingASurvivor");
static_assert(sizeof(DBDUtilities_IsLocallyObservingASurvivor) == 0x000010, "Wrong size on DBDUtilities_IsLocallyObservingASurvivor");
static_assert(offsetof(DBDUtilities_IsLocallyObservingASurvivor, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsLocallyObservingASurvivor::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsLocallyObservingASurvivor, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsLocallyObservingASurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsNonViolent
// 0x0001 (0x0001 - 0x0000)
struct DBDUtilities_IsNonViolent final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_IsNonViolent) == 0x000001, "Wrong alignment on DBDUtilities_IsNonViolent");
static_assert(sizeof(DBDUtilities_IsNonViolent) == 0x000001, "Wrong size on DBDUtilities_IsNonViolent");
static_assert(offsetof(DBDUtilities_IsNonViolent, ReturnValue) == 0x000000, "Member 'DBDUtilities_IsNonViolent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsReplaceDisconnectedPlayersWithBotsActive
// 0x0001 (0x0001 - 0x0000)
struct DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive) == 0x000001, "Wrong alignment on DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive");
static_assert(sizeof(DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive) == 0x000001, "Wrong size on DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive");
static_assert(offsetof(DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive, ReturnValue) == 0x000000, "Member 'DBDUtilities_IsReplaceDisconnectedPlayersWithBotsActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsServer
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsServer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsServer) == 0x000008, "Wrong alignment on DBDUtilities_IsServer");
static_assert(sizeof(DBDUtilities_IsServer) == 0x000010, "Wrong size on DBDUtilities_IsServer");
static_assert(offsetof(DBDUtilities_IsServer, WorldContextObject) == 0x000000, "Member 'DBDUtilities_IsServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsServer, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsServer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.IsSteamPIEGame
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_IsSteamPIEGame final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_IsSteamPIEGame) == 0x000008, "Wrong alignment on DBDUtilities_IsSteamPIEGame");
static_assert(sizeof(DBDUtilities_IsSteamPIEGame) == 0x000010, "Wrong size on DBDUtilities_IsSteamPIEGame");
static_assert(offsetof(DBDUtilities_IsSteamPIEGame, ContextObject) == 0x000000, "Member 'DBDUtilities_IsSteamPIEGame::ContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_IsSteamPIEGame, ReturnValue) == 0x000008, "Member 'DBDUtilities_IsSteamPIEGame::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.LogMeshMaterialInfo
// 0x0018 (0x0018 - 0x0000)
struct DBDUtilities_LogMeshMaterialInfo final
{
public:
	class FString                                 InStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UMeshComponent*                   Root;                                              // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_LogMeshMaterialInfo) == 0x000008, "Wrong alignment on DBDUtilities_LogMeshMaterialInfo");
static_assert(sizeof(DBDUtilities_LogMeshMaterialInfo) == 0x000018, "Wrong size on DBDUtilities_LogMeshMaterialInfo");
static_assert(offsetof(DBDUtilities_LogMeshMaterialInfo, InStr) == 0x000000, "Member 'DBDUtilities_LogMeshMaterialInfo::InStr' has a wrong offset!");
static_assert(offsetof(DBDUtilities_LogMeshMaterialInfo, Root) == 0x000010, "Member 'DBDUtilities_LogMeshMaterialInfo::Root' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.LogString
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_LogString final
{
public:
	class FString                                 InStr;                                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_LogString) == 0x000008, "Wrong alignment on DBDUtilities_LogString");
static_assert(sizeof(DBDUtilities_LogString) == 0x000010, "Wrong size on DBDUtilities_LogString");
static_assert(offsetof(DBDUtilities_LogString, InStr) == 0x000000, "Member 'DBDUtilities_LogString::InStr' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.NormalizeXY
// 0x0020 (0x0020 - 0x0000)
struct DBDUtilities_NormalizeXY final
{
public:
	struct FVector                                Vector;                                            // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tolerance;                                         // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_NormalizeXY) == 0x000008, "Wrong alignment on DBDUtilities_NormalizeXY");
static_assert(sizeof(DBDUtilities_NormalizeXY) == 0x000020, "Wrong size on DBDUtilities_NormalizeXY");
static_assert(offsetof(DBDUtilities_NormalizeXY, Vector) == 0x000000, "Member 'DBDUtilities_NormalizeXY::Vector' has a wrong offset!");
static_assert(offsetof(DBDUtilities_NormalizeXY, Tolerance) == 0x000018, "Member 'DBDUtilities_NormalizeXY::Tolerance' has a wrong offset!");
static_assert(offsetof(DBDUtilities_NormalizeXY, ReturnValue) == 0x00001C, "Member 'DBDUtilities_NormalizeXY::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.PointerToInt
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_PointerToInt final
{
public:
	class UObject*                                Obj;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_PointerToInt) == 0x000008, "Wrong alignment on DBDUtilities_PointerToInt");
static_assert(sizeof(DBDUtilities_PointerToInt) == 0x000010, "Wrong size on DBDUtilities_PointerToInt");
static_assert(offsetof(DBDUtilities_PointerToInt, Obj) == 0x000000, "Member 'DBDUtilities_PointerToInt::Obj' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PointerToInt, ReturnValue) == 0x000008, "Member 'DBDUtilities_PointerToInt::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.PrintStringEmbiggened
// 0x0038 (0x0038 - 0x0000)
struct DBDUtilities_PrintStringEmbiggened final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InString;                                          // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TextColor;                                         // 0x0018(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0028(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Key;                                               // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scale;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_PrintStringEmbiggened) == 0x000008, "Wrong alignment on DBDUtilities_PrintStringEmbiggened");
static_assert(sizeof(DBDUtilities_PrintStringEmbiggened) == 0x000038, "Wrong size on DBDUtilities_PrintStringEmbiggened");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, WorldContextObject) == 0x000000, "Member 'DBDUtilities_PrintStringEmbiggened::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, InString) == 0x000008, "Member 'DBDUtilities_PrintStringEmbiggened::InString' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, TextColor) == 0x000018, "Member 'DBDUtilities_PrintStringEmbiggened::TextColor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, Duration) == 0x000028, "Member 'DBDUtilities_PrintStringEmbiggened::Duration' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, Key) == 0x00002C, "Member 'DBDUtilities_PrintStringEmbiggened::Key' has a wrong offset!");
static_assert(offsetof(DBDUtilities_PrintStringEmbiggened, Scale) == 0x000030, "Member 'DBDUtilities_PrintStringEmbiggened::Scale' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.ResolveCharacterIdFromPlayerState
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_ResolveCharacterIdFromPlayerState final
{
public:
	const class ADBDPlayerState*                  PlayerState;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_ResolveCharacterIdFromPlayerState) == 0x000008, "Wrong alignment on DBDUtilities_ResolveCharacterIdFromPlayerState");
static_assert(sizeof(DBDUtilities_ResolveCharacterIdFromPlayerState) == 0x000010, "Wrong size on DBDUtilities_ResolveCharacterIdFromPlayerState");
static_assert(offsetof(DBDUtilities_ResolveCharacterIdFromPlayerState, PlayerState) == 0x000000, "Member 'DBDUtilities_ResolveCharacterIdFromPlayerState::PlayerState' has a wrong offset!");
static_assert(offsetof(DBDUtilities_ResolveCharacterIdFromPlayerState, ReturnValue) == 0x000008, "Member 'DBDUtilities_ResolveCharacterIdFromPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.Saturate
// 0x0008 (0x0008 - 0x0000)
struct DBDUtilities_Saturate final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_Saturate) == 0x000004, "Wrong alignment on DBDUtilities_Saturate");
static_assert(sizeof(DBDUtilities_Saturate) == 0x000008, "Wrong size on DBDUtilities_Saturate");
static_assert(offsetof(DBDUtilities_Saturate, Value) == 0x000000, "Member 'DBDUtilities_Saturate::Value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_Saturate, ReturnValue) == 0x000004, "Member 'DBDUtilities_Saturate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.SetComponentCastHiddenShadow
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_SetComponentCastHiddenShadow final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastShadow;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_SetComponentCastHiddenShadow) == 0x000008, "Wrong alignment on DBDUtilities_SetComponentCastHiddenShadow");
static_assert(sizeof(DBDUtilities_SetComponentCastHiddenShadow) == 0x000010, "Wrong size on DBDUtilities_SetComponentCastHiddenShadow");
static_assert(offsetof(DBDUtilities_SetComponentCastHiddenShadow, Component) == 0x000000, "Member 'DBDUtilities_SetComponentCastHiddenShadow::Component' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SetComponentCastHiddenShadow, CastShadow) == 0x000008, "Member 'DBDUtilities_SetComponentCastHiddenShadow::CastShadow' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.SphereTraceAgainstActor
// 0x0138 (0x0138 - 0x0000)
struct DBDUtilities_SphereTraceAgainstActor final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USphereComponent*                 Sphere;                                            // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AActor*                           Actor;                                             // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHitResult;                                      // 0x0040(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0130(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x7];                                      // 0x0131(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_SphereTraceAgainstActor) == 0x000008, "Wrong alignment on DBDUtilities_SphereTraceAgainstActor");
static_assert(sizeof(DBDUtilities_SphereTraceAgainstActor) == 0x000138, "Wrong size on DBDUtilities_SphereTraceAgainstActor");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, Start) == 0x000000, "Member 'DBDUtilities_SphereTraceAgainstActor::Start' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, End) == 0x000018, "Member 'DBDUtilities_SphereTraceAgainstActor::End' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, Sphere) == 0x000030, "Member 'DBDUtilities_SphereTraceAgainstActor::Sphere' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, Actor) == 0x000038, "Member 'DBDUtilities_SphereTraceAgainstActor::Actor' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, OutHitResult) == 0x000040, "Member 'DBDUtilities_SphereTraceAgainstActor::OutHitResult' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceAgainstActor, ReturnValue) == 0x000130, "Member 'DBDUtilities_SphereTraceAgainstActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.SphereTraceSingle
// 0x0140 (0x0140 - 0x0000)
struct DBDUtilities_SphereTraceSingle final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USphereComponent*                 Sphere;                                            // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHitResult;                                      // 0x0038(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0128(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0138(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_SphereTraceSingle) == 0x000008, "Wrong alignment on DBDUtilities_SphereTraceSingle");
static_assert(sizeof(DBDUtilities_SphereTraceSingle) == 0x000140, "Wrong size on DBDUtilities_SphereTraceSingle");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, Start) == 0x000000, "Member 'DBDUtilities_SphereTraceSingle::Start' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, End) == 0x000018, "Member 'DBDUtilities_SphereTraceSingle::End' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, Sphere) == 0x000030, "Member 'DBDUtilities_SphereTraceSingle::Sphere' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, OutHitResult) == 0x000038, "Member 'DBDUtilities_SphereTraceSingle::OutHitResult' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, IgnoredActors) == 0x000128, "Member 'DBDUtilities_SphereTraceSingle::IgnoredActors' has a wrong offset!");
static_assert(offsetof(DBDUtilities_SphereTraceSingle, ReturnValue) == 0x000138, "Member 'DBDUtilities_SphereTraceSingle::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.ToAngle_negative180to180
// 0x0008 (0x0008 - 0x0000)
struct DBDUtilities_ToAngle_negative180to180 final
{
public:
	float                                         Angle;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDUtilities_ToAngle_negative180to180) == 0x000004, "Wrong alignment on DBDUtilities_ToAngle_negative180to180");
static_assert(sizeof(DBDUtilities_ToAngle_negative180to180) == 0x000008, "Wrong size on DBDUtilities_ToAngle_negative180to180");
static_assert(offsetof(DBDUtilities_ToAngle_negative180to180, Angle) == 0x000000, "Member 'DBDUtilities_ToAngle_negative180to180::Angle' has a wrong offset!");
static_assert(offsetof(DBDUtilities_ToAngle_negative180to180, ReturnValue) == 0x000004, "Member 'DBDUtilities_ToAngle_negative180to180::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.WithinRange
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_WithinRange final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_WithinRange) == 0x000004, "Wrong alignment on DBDUtilities_WithinRange");
static_assert(sizeof(DBDUtilities_WithinRange) == 0x000010, "Wrong size on DBDUtilities_WithinRange");
static_assert(offsetof(DBDUtilities_WithinRange, Min) == 0x000000, "Member 'DBDUtilities_WithinRange::Min' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRange, Max) == 0x000004, "Member 'DBDUtilities_WithinRange::Max' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRange, Value) == 0x000008, "Member 'DBDUtilities_WithinRange::Value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRange, ReturnValue) == 0x00000C, "Member 'DBDUtilities_WithinRange::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DBDUtilities.WithinRangeExclusive
// 0x0010 (0x0010 - 0x0000)
struct DBDUtilities_WithinRangeExclusive final
{
public:
	float                                         Min;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Max;                                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DBDUtilities_WithinRangeExclusive) == 0x000004, "Wrong alignment on DBDUtilities_WithinRangeExclusive");
static_assert(sizeof(DBDUtilities_WithinRangeExclusive) == 0x000010, "Wrong size on DBDUtilities_WithinRangeExclusive");
static_assert(offsetof(DBDUtilities_WithinRangeExclusive, Min) == 0x000000, "Member 'DBDUtilities_WithinRangeExclusive::Min' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRangeExclusive, Max) == 0x000004, "Member 'DBDUtilities_WithinRangeExclusive::Max' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRangeExclusive, Value) == 0x000008, "Member 'DBDUtilities_WithinRangeExclusive::Value' has a wrong offset!");
static_assert(offsetof(DBDUtilities_WithinRangeExclusive, ReturnValue) == 0x00000C, "Member 'DBDUtilities_WithinRangeExclusive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DecalSpawnerCollection.CreateDecalSpawner
// 0x0030 (0x0030 - 0x0000)
struct DecalSpawnerCollection_CreateDecalSpawner final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DecalSpawnerName;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoolSize;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnerStrategyType                          SpawnerStrateryType;                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalSpawner*                          ReturnValue;                                       // 0x0028(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecalSpawnerCollection_CreateDecalSpawner) == 0x000008, "Wrong alignment on DecalSpawnerCollection_CreateDecalSpawner");
static_assert(sizeof(DecalSpawnerCollection_CreateDecalSpawner) == 0x000030, "Wrong size on DecalSpawnerCollection_CreateDecalSpawner");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, WorldContextObject) == 0x000000, "Member 'DecalSpawnerCollection_CreateDecalSpawner::WorldContextObject' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, DecalSpawnerName) == 0x000008, "Member 'DecalSpawnerCollection_CreateDecalSpawner::DecalSpawnerName' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, DecalMaterial) == 0x000018, "Member 'DecalSpawnerCollection_CreateDecalSpawner::DecalMaterial' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, PoolSize) == 0x000020, "Member 'DecalSpawnerCollection_CreateDecalSpawner::PoolSize' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, SpawnerStrateryType) == 0x000024, "Member 'DecalSpawnerCollection_CreateDecalSpawner::SpawnerStrateryType' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_CreateDecalSpawner, ReturnValue) == 0x000028, "Member 'DecalSpawnerCollection_CreateDecalSpawner::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DecalSpawnerCollection.ReleaseDecalSpawner
// 0x000C (0x000C - 0x0000)
struct DecalSpawnerCollection_ReleaseDecalSpawner final
{
public:
	class FName                                   DecalSpawnerName;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecalSpawnerCollection_ReleaseDecalSpawner) == 0x000004, "Wrong alignment on DecalSpawnerCollection_ReleaseDecalSpawner");
static_assert(sizeof(DecalSpawnerCollection_ReleaseDecalSpawner) == 0x00000C, "Wrong size on DecalSpawnerCollection_ReleaseDecalSpawner");
static_assert(offsetof(DecalSpawnerCollection_ReleaseDecalSpawner, DecalSpawnerName) == 0x000000, "Member 'DecalSpawnerCollection_ReleaseDecalSpawner::DecalSpawnerName' has a wrong offset!");

// Function DeadByDaylight.DecalSpawnerCollection.SpawnDecalAtLocation
// 0x0078 (0x0078 - 0x0000)
struct DecalSpawnerCollection_SpawnDecalAtLocation final
{
public:
	class FName                                   DecalSpawnerName;                                  // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DecalSize;                                         // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0028(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0040(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LifeSpan;                                          // 0x0058(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DecalType;                                         // 0x005C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0068(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDDecalComponent*                     ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecalSpawnerCollection_SpawnDecalAtLocation) == 0x000008, "Wrong alignment on DecalSpawnerCollection_SpawnDecalAtLocation");
static_assert(sizeof(DecalSpawnerCollection_SpawnDecalAtLocation) == 0x000078, "Wrong size on DecalSpawnerCollection_SpawnDecalAtLocation");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, DecalSpawnerName) == 0x000000, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::DecalSpawnerName' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, DecalSize) == 0x000010, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::DecalSize' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, Location) == 0x000028, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::Location' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, Rotation) == 0x000040, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::Rotation' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, LifeSpan) == 0x000058, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::LifeSpan' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, DecalType) == 0x00005C, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::DecalType' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, SortOrder) == 0x000068, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::SortOrder' has a wrong offset!");
static_assert(offsetof(DecalSpawnerCollection_SpawnDecalAtLocation, ReturnValue) == 0x000070, "Member 'DecalSpawnerCollection_SpawnDecalAtLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DestroyBreakableDefinition.GetBreakable
// 0x0008 (0x0008 - 0x0000)
struct DestroyBreakableDefinition_GetBreakable final
{
public:
	class ABreakableBase*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DestroyBreakableDefinition_GetBreakable) == 0x000008, "Wrong alignment on DestroyBreakableDefinition_GetBreakable");
static_assert(sizeof(DestroyBreakableDefinition_GetBreakable) == 0x000008, "Wrong size on DestroyBreakableDefinition_GetBreakable");
static_assert(offsetof(DestroyBreakableDefinition_GetBreakable, ReturnValue) == 0x000000, "Member 'DestroyBreakableDefinition_GetBreakable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameSurvivorComponent.Client_StopInteraction
// 0x0010 (0x0010 - 0x0000)
struct DirectionalMinigameSurvivorComponent_Client_StopInteraction final
{
public:
	class UDirectionalMinigameComponent*          DirectionalMinigame;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionalMinigameResult                    Result;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectionalMinigameSurvivorComponent_Client_StopInteraction) == 0x000008, "Wrong alignment on DirectionalMinigameSurvivorComponent_Client_StopInteraction");
static_assert(sizeof(DirectionalMinigameSurvivorComponent_Client_StopInteraction) == 0x000010, "Wrong size on DirectionalMinigameSurvivorComponent_Client_StopInteraction");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Client_StopInteraction, DirectionalMinigame) == 0x000000, "Member 'DirectionalMinigameSurvivorComponent_Client_StopInteraction::DirectionalMinigame' has a wrong offset!");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Client_StopInteraction, Result) == 0x000008, "Member 'DirectionalMinigameSurvivorComponent_Client_StopInteraction::Result' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameSurvivorComponent.Server_CancelMinigame
// 0x0008 (0x0008 - 0x0000)
struct DirectionalMinigameSurvivorComponent_Server_CancelMinigame final
{
public:
	class UDirectionalMinigameComponent*          DirectionalMinigame;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DirectionalMinigameSurvivorComponent_Server_CancelMinigame) == 0x000008, "Wrong alignment on DirectionalMinigameSurvivorComponent_Server_CancelMinigame");
static_assert(sizeof(DirectionalMinigameSurvivorComponent_Server_CancelMinigame) == 0x000008, "Wrong size on DirectionalMinigameSurvivorComponent_Server_CancelMinigame");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Server_CancelMinigame, DirectionalMinigame) == 0x000000, "Member 'DirectionalMinigameSurvivorComponent_Server_CancelMinigame::DirectionalMinigame' has a wrong offset!");

// Function DeadByDaylight.DirectionalMinigameSurvivorComponent.Server_EnterKey
// 0x0010 (0x0010 - 0x0000)
struct DirectionalMinigameSurvivorComponent_Server_EnterKey final
{
public:
	class UDirectionalMinigameComponent*          DirectionalMinigame;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionalInputKey                          Key;                                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DirectionalMinigameSurvivorComponent_Server_EnterKey) == 0x000008, "Wrong alignment on DirectionalMinigameSurvivorComponent_Server_EnterKey");
static_assert(sizeof(DirectionalMinigameSurvivorComponent_Server_EnterKey) == 0x000010, "Wrong size on DirectionalMinigameSurvivorComponent_Server_EnterKey");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Server_EnterKey, DirectionalMinigame) == 0x000000, "Member 'DirectionalMinigameSurvivorComponent_Server_EnterKey::DirectionalMinigame' has a wrong offset!");
static_assert(offsetof(DirectionalMinigameSurvivorComponent_Server_EnterKey, Key) == 0x000008, "Member 'DirectionalMinigameSurvivorComponent_Server_EnterKey::Key' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.Multicast_SetIsInEndGameSimulation
// 0x0001 (0x0001 - 0x0000)
struct EndGameStateComponent_Multicast_SetIsInEndGameSimulation final
{
public:
	bool                                          EndGameSimulation;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_Multicast_SetIsInEndGameSimulation) == 0x000001, "Wrong alignment on EndGameStateComponent_Multicast_SetIsInEndGameSimulation");
static_assert(sizeof(EndGameStateComponent_Multicast_SetIsInEndGameSimulation) == 0x000001, "Wrong size on EndGameStateComponent_Multicast_SetIsInEndGameSimulation");
static_assert(offsetof(EndGameStateComponent_Multicast_SetIsInEndGameSimulation, EndGameSimulation) == 0x000000, "Member 'EndGameStateComponent_Multicast_SetIsInEndGameSimulation::EndGameSimulation' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.GetElapsedTimePercent
// 0x0004 (0x0004 - 0x0000)
struct EndGameStateComponent_GetElapsedTimePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_GetElapsedTimePercent) == 0x000004, "Wrong alignment on EndGameStateComponent_GetElapsedTimePercent");
static_assert(sizeof(EndGameStateComponent_GetElapsedTimePercent) == 0x000004, "Wrong size on EndGameStateComponent_GetElapsedTimePercent");
static_assert(offsetof(EndGameStateComponent_GetElapsedTimePercent, ReturnValue) == 0x000000, "Member 'EndGameStateComponent_GetElapsedTimePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.HasEndGameBegun
// 0x0001 (0x0001 - 0x0000)
struct EndGameStateComponent_HasEndGameBegun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_HasEndGameBegun) == 0x000001, "Wrong alignment on EndGameStateComponent_HasEndGameBegun");
static_assert(sizeof(EndGameStateComponent_HasEndGameBegun) == 0x000001, "Wrong size on EndGameStateComponent_HasEndGameBegun");
static_assert(offsetof(EndGameStateComponent_HasEndGameBegun, ReturnValue) == 0x000000, "Member 'EndGameStateComponent_HasEndGameBegun::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.IsEndGameOver
// 0x0001 (0x0001 - 0x0000)
struct EndGameStateComponent_IsEndGameOver final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_IsEndGameOver) == 0x000001, "Wrong alignment on EndGameStateComponent_IsEndGameOver");
static_assert(sizeof(EndGameStateComponent_IsEndGameOver) == 0x000001, "Wrong size on EndGameStateComponent_IsEndGameOver");
static_assert(offsetof(EndGameStateComponent_IsEndGameOver, ReturnValue) == 0x000000, "Member 'EndGameStateComponent_IsEndGameOver::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EndGameStateComponent.IsTimerSlowedDown
// 0x0001 (0x0001 - 0x0000)
struct EndGameStateComponent_IsTimerSlowedDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameStateComponent_IsTimerSlowedDown) == 0x000001, "Wrong alignment on EndGameStateComponent_IsTimerSlowedDown");
static_assert(sizeof(EndGameStateComponent_IsTimerSlowedDown) == 0x000001, "Wrong size on EndGameStateComponent_IsTimerSlowedDown");
static_assert(offsetof(EndGameStateComponent_IsTimerSlowedDown, ReturnValue) == 0x000000, "Member 'EndGameStateComponent_IsTimerSlowedDown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EnduranceVFXComponent.ShowHighlight
// 0x0008 (0x0008 - 0x0000)
struct EnduranceVFXComponent_ShowHighlight final
{
public:
	class UGameplayModifierContainer*             PreventKOSource;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EnduranceVFXComponent_ShowHighlight) == 0x000008, "Wrong alignment on EnduranceVFXComponent_ShowHighlight");
static_assert(sizeof(EnduranceVFXComponent_ShowHighlight) == 0x000008, "Wrong size on EnduranceVFXComponent_ShowHighlight");
static_assert(offsetof(EnduranceVFXComponent_ShowHighlight, PreventKOSource) == 0x000000, "Member 'EnduranceVFXComponent_ShowHighlight::PreventKOSource' has a wrong offset!");

// Function DeadByDaylight.Entity.CompleteSacrifice
// 0x0001 (0x0001 - 0x0000)
struct Entity_CompleteSacrifice final
{
public:
	bool                                          IsBasementHook;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Entity_CompleteSacrifice) == 0x000001, "Wrong alignment on Entity_CompleteSacrifice");
static_assert(sizeof(Entity_CompleteSacrifice) == 0x000001, "Wrong size on Entity_CompleteSacrifice");
static_assert(offsetof(Entity_CompleteSacrifice, IsBasementHook) == 0x000000, "Member 'Entity_CompleteSacrifice::IsBasementHook' has a wrong offset!");

// Function DeadByDaylight.Entity.InitEntity
// 0x0008 (0x0008 - 0x0000)
struct Entity_InitEntity final
{
public:
	class AMeatHook*                              MeatHook;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Entity_InitEntity) == 0x000008, "Wrong alignment on Entity_InitEntity");
static_assert(sizeof(Entity_InitEntity) == 0x000008, "Wrong size on Entity_InitEntity");
static_assert(offsetof(Entity_InitEntity, MeatHook) == 0x000000, "Member 'Entity_InitEntity::MeatHook' has a wrong offset!");

// Function DeadByDaylight.Entity.SetAnimationIsStruggling
// 0x0001 (0x0001 - 0x0000)
struct Entity_SetAnimationIsStruggling final
{
public:
	bool                                          IsStruggling;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Entity_SetAnimationIsStruggling) == 0x000001, "Wrong alignment on Entity_SetAnimationIsStruggling");
static_assert(sizeof(Entity_SetAnimationIsStruggling) == 0x000001, "Wrong size on Entity_SetAnimationIsStruggling");
static_assert(offsetof(Entity_SetAnimationIsStruggling, IsStruggling) == 0x000000, "Member 'Entity_SetAnimationIsStruggling::IsStruggling' has a wrong offset!");

// Function DeadByDaylight.Entity.SetAnimationStrugglePercent
// 0x0004 (0x0004 - 0x0000)
struct Entity_SetAnimationStrugglePercent final
{
public:
	float                                         Percent;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Entity_SetAnimationStrugglePercent) == 0x000004, "Wrong alignment on Entity_SetAnimationStrugglePercent");
static_assert(sizeof(Entity_SetAnimationStrugglePercent) == 0x000004, "Wrong size on Entity_SetAnimationStrugglePercent");
static_assert(offsetof(Entity_SetAnimationStrugglePercent, Percent) == 0x000000, "Member 'Entity_SetAnimationStrugglePercent::Percent' has a wrong offset!");

// Function DeadByDaylight.EscapeBlocker.OnPlayerDetectionZoneBeginOverlap
// 0x0110 (0x0110 - 0x0000)
struct EscapeBlocker_OnPlayerDetectionZoneBeginOverlap final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap) == 0x000008, "Wrong alignment on EscapeBlocker_OnPlayerDetectionZoneBeginOverlap");
static_assert(sizeof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap) == 0x000110, "Wrong size on EscapeBlocker_OnPlayerDetectionZoneBeginOverlap");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, HitComponent) == 0x000000, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::HitComponent' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, OtherActor) == 0x000008, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, OtherComp) == 0x000010, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, bFromSweep) == 0x00001C, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneBeginOverlap, SweepResult) == 0x000020, "Member 'EscapeBlocker_OnPlayerDetectionZoneBeginOverlap::SweepResult' has a wrong offset!");

// Function DeadByDaylight.EscapeBlocker.OnPlayerDetectionZoneEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct EscapeBlocker_OnPlayerDetectionZoneEndOverlap final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap) == 0x000008, "Wrong alignment on EscapeBlocker_OnPlayerDetectionZoneEndOverlap");
static_assert(sizeof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap) == 0x000020, "Wrong size on EscapeBlocker_OnPlayerDetectionZoneEndOverlap");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap, HitComponent) == 0x000000, "Member 'EscapeBlocker_OnPlayerDetectionZoneEndOverlap::HitComponent' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap, OtherActor) == 0x000008, "Member 'EscapeBlocker_OnPlayerDetectionZoneEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap, OtherComp) == 0x000010, "Member 'EscapeBlocker_OnPlayerDetectionZoneEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(EscapeBlocker_OnPlayerDetectionZoneEndOverlap, OtherBodyIndex) == 0x000018, "Member 'EscapeBlocker_OnPlayerDetectionZoneEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.EscapeBlocker.SetCamperBlocker
// 0x0008 (0x0008 - 0x0000)
struct EscapeBlocker_SetCamperBlocker final
{
public:
	class UBoxComponent*                          CamperBlocker;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBlocker_SetCamperBlocker) == 0x000008, "Wrong alignment on EscapeBlocker_SetCamperBlocker");
static_assert(sizeof(EscapeBlocker_SetCamperBlocker) == 0x000008, "Wrong size on EscapeBlocker_SetCamperBlocker");
static_assert(offsetof(EscapeBlocker_SetCamperBlocker, CamperBlocker) == 0x000000, "Member 'EscapeBlocker_SetCamperBlocker::CamperBlocker' has a wrong offset!");

// Function DeadByDaylight.EscapeBlocker.SetPlayerDetectionZone
// 0x0008 (0x0008 - 0x0000)
struct EscapeBlocker_SetPlayerDetectionZone final
{
public:
	class UBoxComponent*                          PlayerDetectionZone;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBlocker_SetPlayerDetectionZone) == 0x000008, "Wrong alignment on EscapeBlocker_SetPlayerDetectionZone");
static_assert(sizeof(EscapeBlocker_SetPlayerDetectionZone) == 0x000008, "Wrong size on EscapeBlocker_SetPlayerDetectionZone");
static_assert(offsetof(EscapeBlocker_SetPlayerDetectionZone, PlayerDetectionZone) == 0x000000, "Member 'EscapeBlocker_SetPlayerDetectionZone::PlayerDetectionZone' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetOpenEscapeInteraction
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_GetOpenEscapeInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetOpenEscapeInteraction) == 0x000008, "Wrong alignment on EscapeDoor_GetOpenEscapeInteraction");
static_assert(sizeof(EscapeDoor_GetOpenEscapeInteraction) == 0x000008, "Wrong size on EscapeDoor_GetOpenEscapeInteraction");
static_assert(offsetof(EscapeDoor_GetOpenEscapeInteraction, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetOpenEscapeInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnEscapeZoneBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnEscapeZoneBeginOverlap final
{
public:
	class AActor*                                 OverlappingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnEscapeZoneBeginOverlap) == 0x000008, "Wrong alignment on EscapeDoor_OnEscapeZoneBeginOverlap");
static_assert(sizeof(EscapeDoor_OnEscapeZoneBeginOverlap) == 0x000008, "Wrong size on EscapeDoor_OnEscapeZoneBeginOverlap");
static_assert(offsetof(EscapeDoor_OnEscapeZoneBeginOverlap, OverlappingActor) == 0x000000, "Member 'EscapeDoor_OnEscapeZoneBeginOverlap::OverlappingActor' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnEscapeZoneEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnEscapeZoneEndOverlap final
{
public:
	class AActor*                                 OverlappingActor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnEscapeZoneEndOverlap) == 0x000008, "Wrong alignment on EscapeDoor_OnEscapeZoneEndOverlap");
static_assert(sizeof(EscapeDoor_OnEscapeZoneEndOverlap) == 0x000008, "Wrong size on EscapeDoor_OnEscapeZoneEndOverlap");
static_assert(offsetof(EscapeDoor_OnEscapeZoneEndOverlap, OverlappingActor) == 0x000000, "Member 'EscapeDoor_OnEscapeZoneEndOverlap::OverlappingActor' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnExitActivationChanged
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_OnExitActivationChanged final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnExitActivationChanged) == 0x000001, "Wrong alignment on EscapeDoor_OnExitActivationChanged");
static_assert(sizeof(EscapeDoor_OnExitActivationChanged) == 0x000001, "Wrong size on EscapeDoor_OnExitActivationChanged");
static_assert(offsetof(EscapeDoor_OnExitActivationChanged, Activated) == 0x000000, "Member 'EscapeDoor_OnExitActivationChanged::Activated' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnExitGateOpened
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnExitGateOpened final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnExitGateOpened) == 0x000008, "Wrong alignment on EscapeDoor_OnExitGateOpened");
static_assert(sizeof(EscapeDoor_OnExitGateOpened) == 0x000008, "Wrong size on EscapeDoor_OnExitGateOpened");
static_assert(offsetof(EscapeDoor_OnExitGateOpened, Player) == 0x000000, "Member 'EscapeDoor_OnExitGateOpened::Player' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnExitOpenChanged
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_OnExitOpenChanged final
{
public:
	bool                                          OPENED;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnExitOpenChanged) == 0x000001, "Wrong alignment on EscapeDoor_OnExitOpenChanged");
static_assert(sizeof(EscapeDoor_OnExitOpenChanged) == 0x000001, "Wrong size on EscapeDoor_OnExitOpenChanged");
static_assert(offsetof(EscapeDoor_OnExitOpenChanged, OPENED) == 0x000000, "Member 'EscapeDoor_OnExitOpenChanged::OPENED' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnPlayerEnterExitArea
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnPlayerEnterExitArea final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnPlayerEnterExitArea) == 0x000008, "Wrong alignment on EscapeDoor_OnPlayerEnterExitArea");
static_assert(sizeof(EscapeDoor_OnPlayerEnterExitArea) == 0x000008, "Wrong size on EscapeDoor_OnPlayerEnterExitArea");
static_assert(offsetof(EscapeDoor_OnPlayerEnterExitArea, Player) == 0x000000, "Member 'EscapeDoor_OnPlayerEnterExitArea::Player' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnPlayerExitExitArea
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_OnPlayerExitExitArea final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnPlayerExitExitArea) == 0x000008, "Wrong alignment on EscapeDoor_OnPlayerExitExitArea");
static_assert(sizeof(EscapeDoor_OnPlayerExitExitArea) == 0x000008, "Wrong size on EscapeDoor_OnPlayerExitExitArea");
static_assert(offsetof(EscapeDoor_OnPlayerExitExitArea, Player) == 0x000000, "Member 'EscapeDoor_OnPlayerExitExitArea::Player' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.OnRep_Activated
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_OnRep_Activated final
{
public:
	bool                                          OldActivated;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_OnRep_Activated) == 0x000001, "Wrong alignment on EscapeDoor_OnRep_Activated");
static_assert(sizeof(EscapeDoor_OnRep_Activated) == 0x000001, "Wrong size on EscapeDoor_OnRep_Activated");
static_assert(offsetof(EscapeDoor_OnRep_Activated, OldActivated) == 0x000000, "Member 'EscapeDoor_OnRep_Activated::OldActivated' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.SetIsActivated
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_SetIsActivated final
{
public:
	bool                                          IsActivated;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_SetIsActivated) == 0x000001, "Wrong alignment on EscapeDoor_SetIsActivated");
static_assert(sizeof(EscapeDoor_SetIsActivated) == 0x000001, "Wrong size on EscapeDoor_SetIsActivated");
static_assert(offsetof(EscapeDoor_SetIsActivated, IsActivated) == 0x000000, "Member 'EscapeDoor_SetIsActivated::IsActivated' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetDoorSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_GetDoorSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetDoorSkeletalMeshComponent) == 0x000008, "Wrong alignment on EscapeDoor_GetDoorSkeletalMeshComponent");
static_assert(sizeof(EscapeDoor_GetDoorSkeletalMeshComponent) == 0x000008, "Wrong size on EscapeDoor_GetDoorSkeletalMeshComponent");
static_assert(offsetof(EscapeDoor_GetDoorSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetDoorSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetEscapeSwitchFloorLocation
// 0x0018 (0x0018 - 0x0000)
struct EscapeDoor_GetEscapeSwitchFloorLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetEscapeSwitchFloorLocation) == 0x000008, "Wrong alignment on EscapeDoor_GetEscapeSwitchFloorLocation");
static_assert(sizeof(EscapeDoor_GetEscapeSwitchFloorLocation) == 0x000018, "Wrong size on EscapeDoor_GetEscapeSwitchFloorLocation");
static_assert(offsetof(EscapeDoor_GetEscapeSwitchFloorLocation, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetEscapeSwitchFloorLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetExitArea
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_GetExitArea final
{
public:
	class UBoxComponent*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetExitArea) == 0x000008, "Wrong alignment on EscapeDoor_GetExitArea");
static_assert(sizeof(EscapeDoor_GetExitArea) == 0x000008, "Wrong size on EscapeDoor_GetExitArea");
static_assert(offsetof(EscapeDoor_GetExitArea, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetExitArea::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetIsOpen
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_GetIsOpen final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetIsOpen) == 0x000001, "Wrong alignment on EscapeDoor_GetIsOpen");
static_assert(sizeof(EscapeDoor_GetIsOpen) == 0x000001, "Wrong size on EscapeDoor_GetIsOpen");
static_assert(offsetof(EscapeDoor_GetIsOpen, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetIsOpen::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetOpenTime
// 0x0004 (0x0004 - 0x0000)
struct EscapeDoor_GetOpenTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetOpenTime) == 0x000004, "Wrong alignment on EscapeDoor_GetOpenTime");
static_assert(sizeof(EscapeDoor_GetOpenTime) == 0x000004, "Wrong size on EscapeDoor_GetOpenTime");
static_assert(offsetof(EscapeDoor_GetOpenTime, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetOpenTime::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetParadiseServerLocation
// 0x0018 (0x0018 - 0x0000)
struct EscapeDoor_GetParadiseServerLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetParadiseServerLocation) == 0x000008, "Wrong alignment on EscapeDoor_GetParadiseServerLocation");
static_assert(sizeof(EscapeDoor_GetParadiseServerLocation) == 0x000018, "Wrong size on EscapeDoor_GetParadiseServerLocation");
static_assert(offsetof(EscapeDoor_GetParadiseServerLocation, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetParadiseServerLocation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.GetSwitchSceneComponent
// 0x0008 (0x0008 - 0x0000)
struct EscapeDoor_GetSwitchSceneComponent final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_GetSwitchSceneComponent) == 0x000008, "Wrong alignment on EscapeDoor_GetSwitchSceneComponent");
static_assert(sizeof(EscapeDoor_GetSwitchSceneComponent) == 0x000008, "Wrong size on EscapeDoor_GetSwitchSceneComponent");
static_assert(offsetof(EscapeDoor_GetSwitchSceneComponent, ReturnValue) == 0x000000, "Member 'EscapeDoor_GetSwitchSceneComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.IsActivated
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_IsActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_IsActivated) == 0x000001, "Wrong alignment on EscapeDoor_IsActivated");
static_assert(sizeof(EscapeDoor_IsActivated) == 0x000001, "Wrong size on EscapeDoor_IsActivated");
static_assert(offsetof(EscapeDoor_IsActivated, ReturnValue) == 0x000000, "Member 'EscapeDoor_IsActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EscapeDoor.IsDoorSwitchBlocked
// 0x0001 (0x0001 - 0x0000)
struct EscapeDoor_IsDoorSwitchBlocked final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeDoor_IsDoorSwitchBlocked) == 0x000001, "Wrong alignment on EscapeDoor_IsDoorSwitchBlocked");
static_assert(sizeof(EscapeDoor_IsDoorSwitchBlocked) == 0x000001, "Wrong size on EscapeDoor_IsDoorSwitchBlocked");
static_assert(offsetof(EscapeDoor_IsDoorSwitchBlocked, ReturnValue) == 0x000000, "Member 'EscapeDoor_IsDoorSwitchBlocked::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EventGeneratorComponent.Authority_FireGenCompletedEventScore
// 0x0001 (0x0001 - 0x0000)
struct EventGeneratorComponent_Authority_FireGenCompletedEventScore final
{
public:
	bool                                          IsAutoCompleted;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventGeneratorComponent_Authority_FireGenCompletedEventScore) == 0x000001, "Wrong alignment on EventGeneratorComponent_Authority_FireGenCompletedEventScore");
static_assert(sizeof(EventGeneratorComponent_Authority_FireGenCompletedEventScore) == 0x000001, "Wrong size on EventGeneratorComponent_Authority_FireGenCompletedEventScore");
static_assert(offsetof(EventGeneratorComponent_Authority_FireGenCompletedEventScore, IsAutoCompleted) == 0x000000, "Member 'EventGeneratorComponent_Authority_FireGenCompletedEventScore::IsAutoCompleted' has a wrong offset!");

// Function DeadByDaylight.EventHookComponent.Authority_FireHookedScoreEvent
// 0x0008 (0x0008 - 0x0000)
struct EventHookComponent_Authority_FireHookedScoreEvent final
{
public:
	class ADBDPlayer*                             HookedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventHookComponent_Authority_FireHookedScoreEvent) == 0x000008, "Wrong alignment on EventHookComponent_Authority_FireHookedScoreEvent");
static_assert(sizeof(EventHookComponent_Authority_FireHookedScoreEvent) == 0x000008, "Wrong size on EventHookComponent_Authority_FireHookedScoreEvent");
static_assert(offsetof(EventHookComponent_Authority_FireHookedScoreEvent, HookedPlayer) == 0x000000, "Member 'EventHookComponent_Authority_FireHookedScoreEvent::HookedPlayer' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.Authority_OnPlayerDisconnect
// 0x0008 (0x0008 - 0x0000)
struct EvilWithinComponent_Authority_OnPlayerDisconnect final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_Authority_OnPlayerDisconnect) == 0x000008, "Wrong alignment on EvilWithinComponent_Authority_OnPlayerDisconnect");
static_assert(sizeof(EvilWithinComponent_Authority_OnPlayerDisconnect) == 0x000008, "Wrong size on EvilWithinComponent_Authority_OnPlayerDisconnect");
static_assert(offsetof(EvilWithinComponent_Authority_OnPlayerDisconnect, Player) == 0x000000, "Member 'EvilWithinComponent_Authority_OnPlayerDisconnect::Player' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.Authority_OnStalkPointsAdded
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_Authority_OnStalkPointsAdded final
{
public:
	float                                         StalkPoints;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_Authority_OnStalkPointsAdded) == 0x000004, "Wrong alignment on EvilWithinComponent_Authority_OnStalkPointsAdded");
static_assert(sizeof(EvilWithinComponent_Authority_OnStalkPointsAdded) == 0x000004, "Wrong size on EvilWithinComponent_Authority_OnStalkPointsAdded");
static_assert(offsetof(EvilWithinComponent_Authority_OnStalkPointsAdded, StalkPoints) == 0x000000, "Member 'EvilWithinComponent_Authority_OnStalkPointsAdded::StalkPoints' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.OnRep_CurrentTier
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_OnRep_CurrentTier final
{
public:
	int32                                         PreviousTier;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_OnRep_CurrentTier) == 0x000004, "Wrong alignment on EvilWithinComponent_OnRep_CurrentTier");
static_assert(sizeof(EvilWithinComponent_OnRep_CurrentTier) == 0x000004, "Wrong size on EvilWithinComponent_OnRep_CurrentTier");
static_assert(offsetof(EvilWithinComponent_OnRep_CurrentTier, PreviousTier) == 0x000000, "Member 'EvilWithinComponent_OnRep_CurrentTier::PreviousTier' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.CanBeStandingKilled
// 0x0010 (0x0010 - 0x0000)
struct EvilWithinComponent_CanBeStandingKilled final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EvilWithinComponent_CanBeStandingKilled) == 0x000008, "Wrong alignment on EvilWithinComponent_CanBeStandingKilled");
static_assert(sizeof(EvilWithinComponent_CanBeStandingKilled) == 0x000010, "Wrong size on EvilWithinComponent_CanBeStandingKilled");
static_assert(offsetof(EvilWithinComponent_CanBeStandingKilled, Player) == 0x000000, "Member 'EvilWithinComponent_CanBeStandingKilled::Player' has a wrong offset!");
static_assert(offsetof(EvilWithinComponent_CanBeStandingKilled, ReturnValue) == 0x000008, "Member 'EvilWithinComponent_CanBeStandingKilled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.CanStandKill
// 0x0010 (0x0010 - 0x0000)
struct EvilWithinComponent_CanStandKill final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EvilWithinComponent_CanStandKill) == 0x000008, "Wrong alignment on EvilWithinComponent_CanStandKill");
static_assert(sizeof(EvilWithinComponent_CanStandKill) == 0x000010, "Wrong size on EvilWithinComponent_CanStandKill");
static_assert(offsetof(EvilWithinComponent_CanStandKill, Player) == 0x000000, "Member 'EvilWithinComponent_CanStandKill::Player' has a wrong offset!");
static_assert(offsetof(EvilWithinComponent_CanStandKill, ReturnValue) == 0x000008, "Member 'EvilWithinComponent_CanStandKill::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.GetCurrentTier
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_GetCurrentTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_GetCurrentTier) == 0x000004, "Wrong alignment on EvilWithinComponent_GetCurrentTier");
static_assert(sizeof(EvilWithinComponent_GetCurrentTier) == 0x000004, "Wrong size on EvilWithinComponent_GetCurrentTier");
static_assert(offsetof(EvilWithinComponent_GetCurrentTier, ReturnValue) == 0x000000, "Member 'EvilWithinComponent_GetCurrentTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.GetMaxTier
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_GetMaxTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_GetMaxTier) == 0x000004, "Wrong alignment on EvilWithinComponent_GetMaxTier");
static_assert(sizeof(EvilWithinComponent_GetMaxTier) == 0x000004, "Wrong size on EvilWithinComponent_GetMaxTier");
static_assert(offsetof(EvilWithinComponent_GetMaxTier, ReturnValue) == 0x000000, "Member 'EvilWithinComponent_GetMaxTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.GetPercentStalkingPointsInCurrentTier
// 0x0004 (0x0004 - 0x0000)
struct EvilWithinComponent_GetPercentStalkingPointsInCurrentTier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_GetPercentStalkingPointsInCurrentTier) == 0x000004, "Wrong alignment on EvilWithinComponent_GetPercentStalkingPointsInCurrentTier");
static_assert(sizeof(EvilWithinComponent_GetPercentStalkingPointsInCurrentTier) == 0x000004, "Wrong size on EvilWithinComponent_GetPercentStalkingPointsInCurrentTier");
static_assert(offsetof(EvilWithinComponent_GetPercentStalkingPointsInCurrentTier, ReturnValue) == 0x000000, "Member 'EvilWithinComponent_GetPercentStalkingPointsInCurrentTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.GetRequirementForTier
// 0x0008 (0x0008 - 0x0000)
struct EvilWithinComponent_GetRequirementForTier final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_GetRequirementForTier) == 0x000004, "Wrong alignment on EvilWithinComponent_GetRequirementForTier");
static_assert(sizeof(EvilWithinComponent_GetRequirementForTier) == 0x000008, "Wrong size on EvilWithinComponent_GetRequirementForTier");
static_assert(offsetof(EvilWithinComponent_GetRequirementForTier, Tier) == 0x000000, "Member 'EvilWithinComponent_GetRequirementForTier::Tier' has a wrong offset!");
static_assert(offsetof(EvilWithinComponent_GetRequirementForTier, ReturnValue) == 0x000004, "Member 'EvilWithinComponent_GetRequirementForTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.EvilWithinComponent.IsAtLastTier
// 0x0001 (0x0001 - 0x0000)
struct EvilWithinComponent_IsAtLastTier final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EvilWithinComponent_IsAtLastTier) == 0x000001, "Wrong alignment on EvilWithinComponent_IsAtLastTier");
static_assert(sizeof(EvilWithinComponent_IsAtLastTier) == 0x000001, "Wrong size on EvilWithinComponent_IsAtLastTier");
static_assert(offsetof(EvilWithinComponent_IsAtLastTier, ReturnValue) == 0x000000, "Member 'EvilWithinComponent_IsAtLastTier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ExperimentsHelper.GetAllActive
// 0x0020 (0x0020 - 0x0000)
struct ExperimentsHelper_GetAllActive final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCombinedExperimentData>        OutData;                                           // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExperimentsHelper_GetAllActive) == 0x000008, "Wrong alignment on ExperimentsHelper_GetAllActive");
static_assert(sizeof(ExperimentsHelper_GetAllActive) == 0x000020, "Wrong size on ExperimentsHelper_GetAllActive");
static_assert(offsetof(ExperimentsHelper_GetAllActive, ContextObject) == 0x000000, "Member 'ExperimentsHelper_GetAllActive::ContextObject' has a wrong offset!");
static_assert(offsetof(ExperimentsHelper_GetAllActive, OutData) == 0x000008, "Member 'ExperimentsHelper_GetAllActive::OutData' has a wrong offset!");
static_assert(offsetof(ExperimentsHelper_GetAllActive, ReturnValue) == 0x000018, "Member 'ExperimentsHelper_GetAllActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ExperimentsHelper.GetCombinedData
// 0x0018 (0x0018 - 0x0000)
struct ExperimentsHelper_GetCombinedData final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExperimentId;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCombinedExperimentData                OutData;                                           // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExperimentsHelper_GetCombinedData) == 0x000008, "Wrong alignment on ExperimentsHelper_GetCombinedData");
static_assert(sizeof(ExperimentsHelper_GetCombinedData) == 0x000018, "Wrong size on ExperimentsHelper_GetCombinedData");
static_assert(offsetof(ExperimentsHelper_GetCombinedData, ContextObject) == 0x000000, "Member 'ExperimentsHelper_GetCombinedData::ContextObject' has a wrong offset!");
static_assert(offsetof(ExperimentsHelper_GetCombinedData, ExperimentId) == 0x000008, "Member 'ExperimentsHelper_GetCombinedData::ExperimentId' has a wrong offset!");
static_assert(offsetof(ExperimentsHelper_GetCombinedData, OutData) == 0x000014, "Member 'ExperimentsHelper_GetCombinedData::OutData' has a wrong offset!");
static_assert(offsetof(ExperimentsHelper_GetCombinedData, ReturnValue) == 0x000015, "Member 'ExperimentsHelper_GetCombinedData::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ExperimentsHelper.IsActive
// 0x0018 (0x0018 - 0x0000)
struct ExperimentsHelper_IsActive final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ExperimentId;                                      // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExperimentsHelper_IsActive) == 0x000008, "Wrong alignment on ExperimentsHelper_IsActive");
static_assert(sizeof(ExperimentsHelper_IsActive) == 0x000018, "Wrong size on ExperimentsHelper_IsActive");
static_assert(offsetof(ExperimentsHelper_IsActive, ContextObject) == 0x000000, "Member 'ExperimentsHelper_IsActive::ContextObject' has a wrong offset!");
static_assert(offsetof(ExperimentsHelper_IsActive, ExperimentId) == 0x000008, "Member 'ExperimentsHelper_IsActive::ExperimentId' has a wrong offset!");
static_assert(offsetof(ExperimentsHelper_IsActive, ReturnValue) == 0x000014, "Member 'ExperimentsHelper_IsActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ExposerCirclingComponent.SetIsCircling
// 0x0001 (0x0001 - 0x0000)
struct ExposerCirclingComponent_SetIsCircling final
{
public:
	bool                                          Circling;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExposerCirclingComponent_SetIsCircling) == 0x000001, "Wrong alignment on ExposerCirclingComponent_SetIsCircling");
static_assert(sizeof(ExposerCirclingComponent_SetIsCircling) == 0x000001, "Wrong size on ExposerCirclingComponent_SetIsCircling");
static_assert(offsetof(ExposerCirclingComponent_SetIsCircling, Circling) == 0x000000, "Member 'ExposerCirclingComponent_SetIsCircling::Circling' has a wrong offset!");

// Function DeadByDaylight.Fadeable.OnAlphaChanged
// 0x0010 (0x0010 - 0x0000)
struct Fadeable_OnAlphaChanged final
{
public:
	float                                         NewAlpha;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Fadeable_OnAlphaChanged) == 0x000008, "Wrong alignment on Fadeable_OnAlphaChanged");
static_assert(sizeof(Fadeable_OnAlphaChanged) == 0x000010, "Wrong size on Fadeable_OnAlphaChanged");
static_assert(offsetof(Fadeable_OnAlphaChanged, NewAlpha) == 0x000000, "Member 'Fadeable_OnAlphaChanged::NewAlpha' has a wrong offset!");
static_assert(offsetof(Fadeable_OnAlphaChanged, Other) == 0x000008, "Member 'Fadeable_OnAlphaChanged::Other' has a wrong offset!");

// Function DeadByDaylight.Fadeable.OnFadeBegin
// 0x0008 (0x0008 - 0x0000)
struct Fadeable_OnFadeBegin final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Fadeable_OnFadeBegin) == 0x000008, "Wrong alignment on Fadeable_OnFadeBegin");
static_assert(sizeof(Fadeable_OnFadeBegin) == 0x000008, "Wrong size on Fadeable_OnFadeBegin");
static_assert(offsetof(Fadeable_OnFadeBegin, Other) == 0x000000, "Member 'Fadeable_OnFadeBegin::Other' has a wrong offset!");

// Function DeadByDaylight.Fadeable.OnFadeEnd
// 0x0008 (0x0008 - 0x0000)
struct Fadeable_OnFadeEnd final
{
public:
	class AActor*                                 Other;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Fadeable_OnFadeEnd) == 0x000008, "Wrong alignment on Fadeable_OnFadeEnd");
static_assert(sizeof(Fadeable_OnFadeEnd) == 0x000008, "Wrong size on Fadeable_OnFadeEnd");
static_assert(offsetof(Fadeable_OnFadeEnd, Other) == 0x000000, "Member 'Fadeable_OnFadeEnd::Other' has a wrong offset!");

// Function DeadByDaylight.FadeManager.AreAnyMaterialsFaded
// 0x0001 (0x0001 - 0x0000)
struct FadeManager_AreAnyMaterialsFaded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeManager_AreAnyMaterialsFaded) == 0x000001, "Wrong alignment on FadeManager_AreAnyMaterialsFaded");
static_assert(sizeof(FadeManager_AreAnyMaterialsFaded) == 0x000001, "Wrong size on FadeManager_AreAnyMaterialsFaded");
static_assert(offsetof(FadeManager_AreAnyMaterialsFaded, ReturnValue) == 0x000000, "Member 'FadeManager_AreAnyMaterialsFaded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FadeManager.DBD_FadeAtCurrentCameraLocation
// 0x0001 (0x0001 - 0x0000)
struct FadeManager_DBD_FadeAtCurrentCameraLocation final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeManager_DBD_FadeAtCurrentCameraLocation) == 0x000001, "Wrong alignment on FadeManager_DBD_FadeAtCurrentCameraLocation");
static_assert(sizeof(FadeManager_DBD_FadeAtCurrentCameraLocation) == 0x000001, "Wrong size on FadeManager_DBD_FadeAtCurrentCameraLocation");
static_assert(offsetof(FadeManager_DBD_FadeAtCurrentCameraLocation, IsEnabled) == 0x000000, "Member 'FadeManager_DBD_FadeAtCurrentCameraLocation::IsEnabled' has a wrong offset!");

// Function DeadByDaylight.FadeManager.DBD_TurnCameraAroundPlayerWithFading
// 0x0001 (0x0001 - 0x0000)
struct FadeManager_DBD_TurnCameraAroundPlayerWithFading final
{
public:
	bool                                          IsTurning;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeManager_DBD_TurnCameraAroundPlayerWithFading) == 0x000001, "Wrong alignment on FadeManager_DBD_TurnCameraAroundPlayerWithFading");
static_assert(sizeof(FadeManager_DBD_TurnCameraAroundPlayerWithFading) == 0x000001, "Wrong size on FadeManager_DBD_TurnCameraAroundPlayerWithFading");
static_assert(offsetof(FadeManager_DBD_TurnCameraAroundPlayerWithFading, IsTurning) == 0x000000, "Member 'FadeManager_DBD_TurnCameraAroundPlayerWithFading::IsTurning' has a wrong offset!");

// Function DeadByDaylight.FadeManager.FadeAt
// 0x0020 (0x0020 - 0x0000)
struct FadeManager_FadeAt final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AdjustAudioOcclusions;                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FadeManager_FadeAt) == 0x000008, "Wrong alignment on FadeManager_FadeAt");
static_assert(sizeof(FadeManager_FadeAt) == 0x000020, "Wrong size on FadeManager_FadeAt");
static_assert(offsetof(FadeManager_FadeAt, Location) == 0x000000, "Member 'FadeManager_FadeAt::Location' has a wrong offset!");
static_assert(offsetof(FadeManager_FadeAt, AdjustAudioOcclusions) == 0x000018, "Member 'FadeManager_FadeAt::AdjustAudioOcclusions' has a wrong offset!");

// Function DeadByDaylight.FadeManager.RemoveFadeMaterials
// 0x0001 (0x0001 - 0x0000)
struct FadeManager_RemoveFadeMaterials final
{
public:
	bool                                          AdjustAudioOcclusions;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FadeManager_RemoveFadeMaterials) == 0x000001, "Wrong alignment on FadeManager_RemoveFadeMaterials");
static_assert(sizeof(FadeManager_RemoveFadeMaterials) == 0x000001, "Wrong size on FadeManager_RemoveFadeMaterials");
static_assert(offsetof(FadeManager_RemoveFadeMaterials, AdjustAudioOcclusions) == 0x000000, "Member 'FadeManager_RemoveFadeMaterials::AdjustAudioOcclusions' has a wrong offset!");

// Function DeadByDaylight.FlickeringLight.GetActiveLightComponent
// 0x0008 (0x0008 - 0x0000)
struct FlickeringLight_GetActiveLightComponent final
{
public:
	class ULocalLightComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlickeringLight_GetActiveLightComponent) == 0x000008, "Wrong alignment on FlickeringLight_GetActiveLightComponent");
static_assert(sizeof(FlickeringLight_GetActiveLightComponent) == 0x000008, "Wrong size on FlickeringLight_GetActiveLightComponent");
static_assert(offsetof(FlickeringLight_GetActiveLightComponent, ReturnValue) == 0x000000, "Member 'FlickeringLight_GetActiveLightComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FlickeringLight.GetSecondaryLightComponent
// 0x0008 (0x0008 - 0x0000)
struct FlickeringLight_GetSecondaryLightComponent final
{
public:
	class ULocalLightComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlickeringLight_GetSecondaryLightComponent) == 0x000008, "Wrong alignment on FlickeringLight_GetSecondaryLightComponent");
static_assert(sizeof(FlickeringLight_GetSecondaryLightComponent) == 0x000008, "Wrong size on FlickeringLight_GetSecondaryLightComponent");
static_assert(offsetof(FlickeringLight_GetSecondaryLightComponent, ReturnValue) == 0x000000, "Member 'FlickeringLight_GetSecondaryLightComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FlickeringLight.GetSecondaryLightVisibilty
// 0x0001 (0x0001 - 0x0000)
struct FlickeringLight_GetSecondaryLightVisibilty final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlickeringLight_GetSecondaryLightVisibilty) == 0x000001, "Wrong alignment on FlickeringLight_GetSecondaryLightVisibilty");
static_assert(sizeof(FlickeringLight_GetSecondaryLightVisibilty) == 0x000001, "Wrong size on FlickeringLight_GetSecondaryLightVisibilty");
static_assert(offsetof(FlickeringLight_GetSecondaryLightVisibilty, ReturnValue) == 0x000000, "Member 'FlickeringLight_GetSecondaryLightVisibilty::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnAcceptFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnAcceptFriendInvite final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnAcceptFriendInvite) == 0x000008, "Wrong alignment on FriendsListScreen_OnAcceptFriendInvite");
static_assert(sizeof(FriendsListScreen_OnAcceptFriendInvite) == 0x000010, "Wrong size on FriendsListScreen_OnAcceptFriendInvite");
static_assert(offsetof(FriendsListScreen_OnAcceptFriendInvite, FriendId) == 0x000000, "Member 'FriendsListScreen_OnAcceptFriendInvite::FriendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnBlockPlayer
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnBlockPlayer final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnBlockPlayer) == 0x000008, "Wrong alignment on FriendsListScreen_OnBlockPlayer");
static_assert(sizeof(FriendsListScreen_OnBlockPlayer) == 0x000010, "Wrong size on FriendsListScreen_OnBlockPlayer");
static_assert(offsetof(FriendsListScreen_OnBlockPlayer, PlayerId) == 0x000000, "Member 'FriendsListScreen_OnBlockPlayer::PlayerId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnCancelFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnCancelFriendInvite final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnCancelFriendInvite) == 0x000008, "Wrong alignment on FriendsListScreen_OnCancelFriendInvite");
static_assert(sizeof(FriendsListScreen_OnCancelFriendInvite) == 0x000010, "Wrong size on FriendsListScreen_OnCancelFriendInvite");
static_assert(offsetof(FriendsListScreen_OnCancelFriendInvite, FriendId) == 0x000000, "Member 'FriendsListScreen_OnCancelFriendInvite::FriendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnDeclineFriendInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnDeclineFriendInvite final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnDeclineFriendInvite) == 0x000008, "Wrong alignment on FriendsListScreen_OnDeclineFriendInvite");
static_assert(sizeof(FriendsListScreen_OnDeclineFriendInvite) == 0x000010, "Wrong size on FriendsListScreen_OnDeclineFriendInvite");
static_assert(offsetof(FriendsListScreen_OnDeclineFriendInvite, FriendId) == 0x000000, "Member 'FriendsListScreen_OnDeclineFriendInvite::FriendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnHideNameSelected
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnHideNameSelected final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnHideNameSelected) == 0x000008, "Wrong alignment on FriendsListScreen_OnHideNameSelected");
static_assert(sizeof(FriendsListScreen_OnHideNameSelected) == 0x000010, "Wrong size on FriendsListScreen_OnHideNameSelected");
static_assert(offsetof(FriendsListScreen_OnHideNameSelected, PlayerId) == 0x000000, "Member 'FriendsListScreen_OnHideNameSelected::PlayerId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnPartyJoinRequest
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnPartyJoinRequest final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnPartyJoinRequest) == 0x000008, "Wrong alignment on FriendsListScreen_OnPartyJoinRequest");
static_assert(sizeof(FriendsListScreen_OnPartyJoinRequest) == 0x000010, "Wrong size on FriendsListScreen_OnPartyJoinRequest");
static_assert(offsetof(FriendsListScreen_OnPartyJoinRequest, FriendId) == 0x000000, "Member 'FriendsListScreen_OnPartyJoinRequest::FriendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnRemoveFriend
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnRemoveFriend final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnRemoveFriend) == 0x000008, "Wrong alignment on FriendsListScreen_OnRemoveFriend");
static_assert(sizeof(FriendsListScreen_OnRemoveFriend) == 0x000010, "Wrong size on FriendsListScreen_OnRemoveFriend");
static_assert(offsetof(FriendsListScreen_OnRemoveFriend, FriendId) == 0x000000, "Member 'FriendsListScreen_OnRemoveFriend::FriendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnSendPartyInvite
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnSendPartyInvite final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnSendPartyInvite) == 0x000008, "Wrong alignment on FriendsListScreen_OnSendPartyInvite");
static_assert(sizeof(FriendsListScreen_OnSendPartyInvite) == 0x000010, "Wrong size on FriendsListScreen_OnSendPartyInvite");
static_assert(offsetof(FriendsListScreen_OnSendPartyInvite, FriendId) == 0x000000, "Member 'FriendsListScreen_OnSendPartyInvite::FriendId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnShowNameSelected
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnShowNameSelected final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnShowNameSelected) == 0x000008, "Wrong alignment on FriendsListScreen_OnShowNameSelected");
static_assert(sizeof(FriendsListScreen_OnShowNameSelected) == 0x000010, "Wrong size on FriendsListScreen_OnShowNameSelected");
static_assert(offsetof(FriendsListScreen_OnShowNameSelected, PlayerId) == 0x000000, "Member 'FriendsListScreen_OnShowNameSelected::PlayerId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnUnblockPlayer
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnUnblockPlayer final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnUnblockPlayer) == 0x000008, "Wrong alignment on FriendsListScreen_OnUnblockPlayer");
static_assert(sizeof(FriendsListScreen_OnUnblockPlayer) == 0x000010, "Wrong size on FriendsListScreen_OnUnblockPlayer");
static_assert(offsetof(FriendsListScreen_OnUnblockPlayer, PlayerId) == 0x000000, "Member 'FriendsListScreen_OnUnblockPlayer::PlayerId' has a wrong offset!");

// Function DeadByDaylight.FriendsListScreen.OnViewProfile
// 0x0010 (0x0010 - 0x0000)
struct FriendsListScreen_OnViewProfile final
{
public:
	class FString                                 FriendId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FriendsListScreen_OnViewProfile) == 0x000008, "Wrong alignment on FriendsListScreen_OnViewProfile");
static_assert(sizeof(FriendsListScreen_OnViewProfile) == 0x000010, "Wrong size on FriendsListScreen_OnViewProfile");
static_assert(offsetof(FriendsListScreen_OnViewProfile, FriendId) == 0x000000, "Member 'FriendsListScreen_OnViewProfile::FriendId' has a wrong offset!");

// Function DeadByDaylight.GameEventListenerCollectionComponent.ListenToGameEvent
// 0x0020 (0x0020 - 0x0000)
struct GameEventListenerCollectionComponent_ListenToGameEvent final
{
public:
	struct FGameplayTag                           EventType;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FGameplayTag& GameEventType, struct FGameEventData& GameEventData)> DelegateToBind;                                    // 0x000C(0x0014)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventListenerCollectionComponent_ListenToGameEvent) == 0x000004, "Wrong alignment on GameEventListenerCollectionComponent_ListenToGameEvent");
static_assert(sizeof(GameEventListenerCollectionComponent_ListenToGameEvent) == 0x000020, "Wrong size on GameEventListenerCollectionComponent_ListenToGameEvent");
static_assert(offsetof(GameEventListenerCollectionComponent_ListenToGameEvent, EventType) == 0x000000, "Member 'GameEventListenerCollectionComponent_ListenToGameEvent::EventType' has a wrong offset!");
static_assert(offsetof(GameEventListenerCollectionComponent_ListenToGameEvent, DelegateToBind) == 0x00000C, "Member 'GameEventListenerCollectionComponent_ListenToGameEvent::DelegateToBind' has a wrong offset!");

// Function DeadByDaylight.GameEventListenerCollectionComponent.UnlistenToGameEvent
// 0x000C (0x000C - 0x0000)
struct GameEventListenerCollectionComponent_UnlistenToGameEvent final
{
public:
	struct FGameplayTag                           EventType;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameEventListenerCollectionComponent_UnlistenToGameEvent) == 0x000004, "Wrong alignment on GameEventListenerCollectionComponent_UnlistenToGameEvent");
static_assert(sizeof(GameEventListenerCollectionComponent_UnlistenToGameEvent) == 0x00000C, "Wrong size on GameEventListenerCollectionComponent_UnlistenToGameEvent");
static_assert(offsetof(GameEventListenerCollectionComponent_UnlistenToGameEvent, EventType) == 0x000000, "Member 'GameEventListenerCollectionComponent_UnlistenToGameEvent::EventType' has a wrong offset!");

// Function DeadByDaylight.GameObjective_ActivatedGenerators.OnGeneratorActivated
// 0x0001 (0x0001 - 0x0000)
struct GameObjective_ActivatedGenerators_OnGeneratorActivated final
{
public:
	bool                                          Activated;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameObjective_ActivatedGenerators_OnGeneratorActivated) == 0x000001, "Wrong alignment on GameObjective_ActivatedGenerators_OnGeneratorActivated");
static_assert(sizeof(GameObjective_ActivatedGenerators_OnGeneratorActivated) == 0x000001, "Wrong size on GameObjective_ActivatedGenerators_OnGeneratorActivated");
static_assert(offsetof(GameObjective_ActivatedGenerators_OnGeneratorActivated, Activated) == 0x000000, "Member 'GameObjective_ActivatedGenerators_OnGeneratorActivated::Activated' has a wrong offset!");

// Function DeadByDaylight.GameObjective_ActivatedGenerators.OnRep_ActivatedCount
// 0x0004 (0x0004 - 0x0000)
struct GameObjective_ActivatedGenerators_OnRep_ActivatedCount final
{
public:
	int32                                         OldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameObjective_ActivatedGenerators_OnRep_ActivatedCount) == 0x000004, "Wrong alignment on GameObjective_ActivatedGenerators_OnRep_ActivatedCount");
static_assert(sizeof(GameObjective_ActivatedGenerators_OnRep_ActivatedCount) == 0x000004, "Wrong size on GameObjective_ActivatedGenerators_OnRep_ActivatedCount");
static_assert(offsetof(GameObjective_ActivatedGenerators_OnRep_ActivatedCount, OldCount) == 0x000000, "Member 'GameObjective_ActivatedGenerators_OnRep_ActivatedCount::OldCount' has a wrong offset!");

// Function DeadByDaylight.GameObjective_ActivatedGenerators.OnRep_RequiredCount
// 0x0004 (0x0004 - 0x0000)
struct GameObjective_ActivatedGenerators_OnRep_RequiredCount final
{
public:
	int32                                         OldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameObjective_ActivatedGenerators_OnRep_RequiredCount) == 0x000004, "Wrong alignment on GameObjective_ActivatedGenerators_OnRep_RequiredCount");
static_assert(sizeof(GameObjective_ActivatedGenerators_OnRep_RequiredCount) == 0x000004, "Wrong size on GameObjective_ActivatedGenerators_OnRep_RequiredCount");
static_assert(offsetof(GameObjective_ActivatedGenerators_OnRep_RequiredCount, OldCount) == 0x000000, "Member 'GameObjective_ActivatedGenerators_OnRep_RequiredCount::OldCount' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_ClearAllPlayerGameplayFlags
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags final
{
public:
	class ADBDPlayer*                             TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags) == 0x000008, "Wrong size on GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags, TargetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayFlags::TargetPlayer' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_ClearAllPlayerGameplayModifiers
// 0x0008 (0x0008 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers final
{
public:
	class ADBDPlayer*                             TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers) == 0x000008, "Wrong size on GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers, TargetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_ClearAllPlayerGameplayModifiers::TargetPlayer' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_ClearPlayerGameplayFlag
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag final
{
public:
	class ADBDPlayer*                             TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FlagType;                                          // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag) == 0x000018, "Wrong size on GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag, TargetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag::TargetPlayer' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag, FlagType) == 0x000008, "Member 'GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayFlag::FlagType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_ClearPlayerGameplayModifier
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier final
{
public:
	class ADBDPlayer*                             TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ModifierType;                                      // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier) == 0x000018, "Wrong size on GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier, TargetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier::TargetPlayer' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier, ModifierType) == 0x000008, "Member 'GameplayModifierFunctionLibrary_Authority_ClearPlayerGameplayModifier::ModifierType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_SetPlayerGameplayFlag
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag final
{
public:
	class ADBDPlayer*                             TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FlagType;                                          // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag) == 0x000018, "Wrong size on GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag, TargetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag::TargetPlayer' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag, FlagType) == 0x000008, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayFlag::FlagType' has a wrong offset!");

// Function DeadByDaylight.GameplayModifierFunctionLibrary.Authority_SetPlayerGameplayModifier
// 0x0018 (0x0018 - 0x0000)
struct GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier final
{
public:
	class ADBDPlayer*                             TargetPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ModifierType;                                      // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModifierValue;                                     // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier) == 0x000008, "Wrong alignment on GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier");
static_assert(sizeof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier) == 0x000018, "Wrong size on GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier, TargetPlayer) == 0x000000, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier::TargetPlayer' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier, ModifierType) == 0x000008, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier::ModifierType' has a wrong offset!");
static_assert(offsetof(GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier, ModifierValue) == 0x000014, "Member 'GameplayModifierFunctionLibrary_Authority_SetPlayerGameplayModifier::ModifierValue' has a wrong offset!");

// Function DeadByDaylight.GameplayNotificationManager.FireGameplayNotification
// 0x0060 (0x0060 - 0x0000)
struct GameplayNotificationManager_FireGameplayNotification final
{
public:
	struct FGameplayNotificationData              NotificationData;                                  // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          AddToHistory;                                      // 0x0058(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayNotificationManager_FireGameplayNotification) == 0x000008, "Wrong alignment on GameplayNotificationManager_FireGameplayNotification");
static_assert(sizeof(GameplayNotificationManager_FireGameplayNotification) == 0x000060, "Wrong size on GameplayNotificationManager_FireGameplayNotification");
static_assert(offsetof(GameplayNotificationManager_FireGameplayNotification, NotificationData) == 0x000000, "Member 'GameplayNotificationManager_FireGameplayNotification::NotificationData' has a wrong offset!");
static_assert(offsetof(GameplayNotificationManager_FireGameplayNotification, AddToHistory) == 0x000058, "Member 'GameplayNotificationManager_FireGameplayNotification::AddToHistory' has a wrong offset!");

// Function DeadByDaylight.GameplayNotificationManager.Multicast_FireGameplayNotification
// 0x0010 (0x0010 - 0x0000)
struct GameplayNotificationManager_Multicast_FireGameplayNotification final
{
public:
	const class UGameplayModifierContainer*       ModifierContainer;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AddToHistory;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GameplayNotificationManager_Multicast_FireGameplayNotification) == 0x000008, "Wrong alignment on GameplayNotificationManager_Multicast_FireGameplayNotification");
static_assert(sizeof(GameplayNotificationManager_Multicast_FireGameplayNotification) == 0x000010, "Wrong size on GameplayNotificationManager_Multicast_FireGameplayNotification");
static_assert(offsetof(GameplayNotificationManager_Multicast_FireGameplayNotification, ModifierContainer) == 0x000000, "Member 'GameplayNotificationManager_Multicast_FireGameplayNotification::ModifierContainer' has a wrong offset!");
static_assert(offsetof(GameplayNotificationManager_Multicast_FireGameplayNotification, AddToHistory) == 0x000008, "Member 'GameplayNotificationManager_Multicast_FireGameplayNotification::AddToHistory' has a wrong offset!");

// Function DeadByDaylight.GateFactory.GetGate
// 0x0010 (0x0010 - 0x0000)
struct GateFactory_GetGate final
{
public:
	EGateType                                     GateType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AGate*                                  ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GateFactory_GetGate) == 0x000008, "Wrong alignment on GateFactory_GetGate");
static_assert(sizeof(GateFactory_GetGate) == 0x000010, "Wrong size on GateFactory_GetGate");
static_assert(offsetof(GateFactory_GetGate, GateType) == 0x000000, "Member 'GateFactory_GetGate::GateType' has a wrong offset!");
static_assert(offsetof(GateFactory_GetGate, ReturnValue) == 0x000008, "Member 'GateFactory_GetGate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorEntity.PlayMontage
// 0x0028 (0x0028 - 0x0000)
struct GeneratorEntity_PlayMontage final
{
public:
	struct FAnimationMontageDescriptor            AnimMontageID;                                     // 0x0000(0x0020)(Parm, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFollower;                                        // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorEntity_PlayMontage) == 0x000008, "Wrong alignment on GeneratorEntity_PlayMontage");
static_assert(sizeof(GeneratorEntity_PlayMontage) == 0x000028, "Wrong size on GeneratorEntity_PlayMontage");
static_assert(offsetof(GeneratorEntity_PlayMontage, AnimMontageID) == 0x000000, "Member 'GeneratorEntity_PlayMontage::AnimMontageID' has a wrong offset!");
static_assert(offsetof(GeneratorEntity_PlayMontage, PlayRate) == 0x000020, "Member 'GeneratorEntity_PlayMontage::PlayRate' has a wrong offset!");
static_assert(offsetof(GeneratorEntity_PlayMontage, IsFollower) == 0x000024, "Member 'GeneratorEntity_PlayMontage::IsFollower' has a wrong offset!");

// Function DeadByDaylight.GeneratorEntity.SetAssociatedGenerator
// 0x0008 (0x0008 - 0x0000)
struct GeneratorEntity_SetAssociatedGenerator final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorEntity_SetAssociatedGenerator) == 0x000008, "Wrong alignment on GeneratorEntity_SetAssociatedGenerator");
static_assert(sizeof(GeneratorEntity_SetAssociatedGenerator) == 0x000008, "Wrong size on GeneratorEntity_SetAssociatedGenerator");
static_assert(offsetof(GeneratorEntity_SetAssociatedGenerator, Generator) == 0x000000, "Member 'GeneratorEntity_SetAssociatedGenerator::Generator' has a wrong offset!");

// Function DeadByDaylight.GeneratorEntity.SetSkeletalMeshActive
// 0x0001 (0x0001 - 0x0000)
struct GeneratorEntity_SetSkeletalMeshActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorEntity_SetSkeletalMeshActive) == 0x000001, "Wrong alignment on GeneratorEntity_SetSkeletalMeshActive");
static_assert(sizeof(GeneratorEntity_SetSkeletalMeshActive) == 0x000001, "Wrong size on GeneratorEntity_SetSkeletalMeshActive");
static_assert(offsetof(GeneratorEntity_SetSkeletalMeshActive, Active) == 0x000000, "Member 'GeneratorEntity_SetSkeletalMeshActive::Active' has a wrong offset!");

// Function DeadByDaylight.GeneratorEntity.GetMontagePlayer
// 0x0008 (0x0008 - 0x0000)
struct GeneratorEntity_GetMontagePlayer final
{
public:
	class UMontagePlayer*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorEntity_GetMontagePlayer) == 0x000008, "Wrong alignment on GeneratorEntity_GetMontagePlayer");
static_assert(sizeof(GeneratorEntity_GetMontagePlayer) == 0x000008, "Wrong size on GeneratorEntity_GetMontagePlayer");
static_assert(offsetof(GeneratorEntity_GetMontagePlayer, ReturnValue) == 0x000000, "Member 'GeneratorEntity_GetMontagePlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorOutlineUpdateStrategy.GetWhiteColor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorOutlineUpdateStrategy_GetWhiteColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorOutlineUpdateStrategy_GetWhiteColor) == 0x000004, "Wrong alignment on GeneratorOutlineUpdateStrategy_GetWhiteColor");
static_assert(sizeof(GeneratorOutlineUpdateStrategy_GetWhiteColor) == 0x000010, "Wrong size on GeneratorOutlineUpdateStrategy_GetWhiteColor");
static_assert(offsetof(GeneratorOutlineUpdateStrategy_GetWhiteColor, ReturnValue) == 0x000000, "Member 'GeneratorOutlineUpdateStrategy_GetWhiteColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.GeneratorOutlineUpdateStrategy.GetYellowColor
// 0x0010 (0x0010 - 0x0000)
struct GeneratorOutlineUpdateStrategy_GetYellowColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorOutlineUpdateStrategy_GetYellowColor) == 0x000004, "Wrong alignment on GeneratorOutlineUpdateStrategy_GetYellowColor");
static_assert(sizeof(GeneratorOutlineUpdateStrategy_GetYellowColor) == 0x000010, "Wrong size on GeneratorOutlineUpdateStrategy_GetYellowColor");
static_assert(offsetof(GeneratorOutlineUpdateStrategy_GetYellowColor, ReturnValue) == 0x000000, "Member 'GeneratorOutlineUpdateStrategy_GetYellowColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.HitValidatorComponent.Multicast_DrawDebugHit
// 0x0240 (0x0240 - 0x0000)
struct HitValidatorComponent_Multicast_DrawDebugHit final
{
public:
	struct FHitValidationReport                   Report;                                            // 0x0000(0x0240)(Parm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HitValidatorComponent_Multicast_DrawDebugHit) == 0x000010, "Wrong alignment on HitValidatorComponent_Multicast_DrawDebugHit");
static_assert(sizeof(HitValidatorComponent_Multicast_DrawDebugHit) == 0x000240, "Wrong size on HitValidatorComponent_Multicast_DrawDebugHit");
static_assert(offsetof(HitValidatorComponent_Multicast_DrawDebugHit, Report) == 0x000000, "Member 'HitValidatorComponent_Multicast_DrawDebugHit::Report' has a wrong offset!");

// Function DeadByDaylight.StoreSpecialPackSubsystem.GetSpecialPacksUpdatedDelegate
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPackSubsystem_GetSpecialPacksUpdatedDelegate final
{
public:
	FMulticastInlineDelegateProperty_             ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPackSubsystem_GetSpecialPacksUpdatedDelegate) == 0x000008, "Wrong alignment on StoreSpecialPackSubsystem_GetSpecialPacksUpdatedDelegate");
static_assert(sizeof(StoreSpecialPackSubsystem_GetSpecialPacksUpdatedDelegate) == 0x000010, "Wrong size on StoreSpecialPackSubsystem_GetSpecialPacksUpdatedDelegate");
static_assert(offsetof(StoreSpecialPackSubsystem_GetSpecialPacksUpdatedDelegate, ReturnValue) == 0x000000, "Member 'StoreSpecialPackSubsystem_GetSpecialPacksUpdatedDelegate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Authority_ConditionalVolumeBeginOverlap
// 0x0110 (0x0110 - 0x0000)
struct TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap");
static_assert(sizeof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap) == 0x000110, "Wrong size on TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, OverlappedComponent) == 0x000000, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, Other) == 0x000008, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::Other' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, OtherComp) == 0x000010, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, bFromSweep) == 0x00001C, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap, HitResult) == 0x000020, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeBeginOverlap::HitResult' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Authority_ConditionalVolumeEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap");
static_assert(sizeof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap) == 0x000020, "Wrong size on TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap, OverlappedComponent) == 0x000000, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap, Other) == 0x000008, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap::Other' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap, OtherComp) == 0x000010, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap, OtherBodyIndex) == 0x000018, "Member 'TriggerableWorldObjectComponent_Authority_ConditionalVolumeEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Authority_GuaranteedVolumeOverlap
// 0x0110 (0x0110 - 0x0000)
struct TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Other;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             HitResult;                                         // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap");
static_assert(sizeof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap) == 0x000110, "Wrong size on TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, OverlappedComponent) == 0x000000, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, Other) == 0x000008, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::Other' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, OtherComp) == 0x000010, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, OtherBodyIndex) == 0x000018, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, bFromSweep) == 0x00001C, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap, HitResult) == 0x000020, "Member 'TriggerableWorldObjectComponent_Authority_GuaranteedVolumeOverlap::HitResult' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Authority_Trigger
// 0x0020 (0x0020 - 0x0000)
struct TriggerableWorldObjectComponent_Authority_Trigger final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TriggerLocation;                                   // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_Authority_Trigger) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Authority_Trigger");
static_assert(sizeof(TriggerableWorldObjectComponent_Authority_Trigger) == 0x000020, "Wrong size on TriggerableWorldObjectComponent_Authority_Trigger");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_Trigger, Instigator) == 0x000000, "Member 'TriggerableWorldObjectComponent_Authority_Trigger::Instigator' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Authority_Trigger, TriggerLocation) == 0x000008, "Member 'TriggerableWorldObjectComponent_Authority_Trigger::TriggerLocation' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.CanPlayerTriggerConditional
// 0x0010 (0x0010 - 0x0000)
struct TriggerableWorldObjectComponent_CanPlayerTriggerConditional final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TriggerableWorldObjectComponent_CanPlayerTriggerConditional) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_CanPlayerTriggerConditional");
static_assert(sizeof(TriggerableWorldObjectComponent_CanPlayerTriggerConditional) == 0x000010, "Wrong size on TriggerableWorldObjectComponent_CanPlayerTriggerConditional");
static_assert(offsetof(TriggerableWorldObjectComponent_CanPlayerTriggerConditional, Player) == 0x000000, "Member 'TriggerableWorldObjectComponent_CanPlayerTriggerConditional::Player' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_CanPlayerTriggerConditional, ReturnValue) == 0x000008, "Member 'TriggerableWorldObjectComponent_CanPlayerTriggerConditional::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.CanPlayerTriggerGuaranteed
// 0x0010 (0x0010 - 0x0000)
struct TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed");
static_assert(sizeof(TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed) == 0x000010, "Wrong size on TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed");
static_assert(offsetof(TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed, Player) == 0x000000, "Member 'TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed::Player' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed, ReturnValue) == 0x000008, "Member 'TriggerableWorldObjectComponent_CanPlayerTriggerGuaranteed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.GetConditionalModifiers
// 0x0010 (0x0010 - 0x0000)
struct TriggerableWorldObjectComponent_GetConditionalModifiers final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutAdditive;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutMultiplicative;                                 // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_GetConditionalModifiers) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_GetConditionalModifiers");
static_assert(sizeof(TriggerableWorldObjectComponent_GetConditionalModifiers) == 0x000010, "Wrong size on TriggerableWorldObjectComponent_GetConditionalModifiers");
static_assert(offsetof(TriggerableWorldObjectComponent_GetConditionalModifiers, Player) == 0x000000, "Member 'TriggerableWorldObjectComponent_GetConditionalModifiers::Player' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_GetConditionalModifiers, OutAdditive) == 0x000008, "Member 'TriggerableWorldObjectComponent_GetConditionalModifiers::OutAdditive' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_GetConditionalModifiers, OutMultiplicative) == 0x00000C, "Member 'TriggerableWorldObjectComponent_GetConditionalModifiers::OutMultiplicative' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.Multicast_OnTriggered
// 0x0020 (0x0020 - 0x0000)
struct TriggerableWorldObjectComponent_Multicast_OnTriggered final
{
public:
	class AActor*                                 Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TriggerLocation;                                   // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_Multicast_OnTriggered) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_Multicast_OnTriggered");
static_assert(sizeof(TriggerableWorldObjectComponent_Multicast_OnTriggered) == 0x000020, "Wrong size on TriggerableWorldObjectComponent_Multicast_OnTriggered");
static_assert(offsetof(TriggerableWorldObjectComponent_Multicast_OnTriggered, Instigator) == 0x000000, "Member 'TriggerableWorldObjectComponent_Multicast_OnTriggered::Instigator' has a wrong offset!");
static_assert(offsetof(TriggerableWorldObjectComponent_Multicast_OnTriggered, TriggerLocation) == 0x000008, "Member 'TriggerableWorldObjectComponent_Multicast_OnTriggered::TriggerLocation' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.SetConditionalTriggerVolume
// 0x0008 (0x0008 - 0x0000)
struct TriggerableWorldObjectComponent_SetConditionalTriggerVolume final
{
public:
	class UPrimitiveComponent*                    Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_SetConditionalTriggerVolume) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_SetConditionalTriggerVolume");
static_assert(sizeof(TriggerableWorldObjectComponent_SetConditionalTriggerVolume) == 0x000008, "Wrong size on TriggerableWorldObjectComponent_SetConditionalTriggerVolume");
static_assert(offsetof(TriggerableWorldObjectComponent_SetConditionalTriggerVolume, Volume) == 0x000000, "Member 'TriggerableWorldObjectComponent_SetConditionalTriggerVolume::Volume' has a wrong offset!");

// Function DeadByDaylight.TriggerableWorldObjectComponent.SetGuaranteedTriggerVolume
// 0x0008 (0x0008 - 0x0000)
struct TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume final
{
public:
	class UPrimitiveComponent*                    Volume;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume) == 0x000008, "Wrong alignment on TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume");
static_assert(sizeof(TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume) == 0x000008, "Wrong size on TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume");
static_assert(offsetof(TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume, Volume) == 0x000000, "Member 'TriggerableWorldObjectComponent_SetGuaranteedTriggerVolume::Volume' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.GetGuidedState
// 0x0010 (0x0010 - 0x0000)
struct ImmobilizeUtilities_GetGuidedState final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuidedState                                  ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImmobilizeUtilities_GetGuidedState) == 0x000008, "Wrong alignment on ImmobilizeUtilities_GetGuidedState");
static_assert(sizeof(ImmobilizeUtilities_GetGuidedState) == 0x000010, "Wrong size on ImmobilizeUtilities_GetGuidedState");
static_assert(offsetof(ImmobilizeUtilities_GetGuidedState, Player) == 0x000000, "Member 'ImmobilizeUtilities_GetGuidedState::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_GetGuidedState, ReturnValue) == 0x000008, "Member 'ImmobilizeUtilities_GetGuidedState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.GetImmobilizeState
// 0x0010 (0x0010 - 0x0000)
struct ImmobilizeUtilities_GetImmobilizeState final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImmobilizedState                             ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImmobilizeUtilities_GetImmobilizeState) == 0x000008, "Wrong alignment on ImmobilizeUtilities_GetImmobilizeState");
static_assert(sizeof(ImmobilizeUtilities_GetImmobilizeState) == 0x000010, "Wrong size on ImmobilizeUtilities_GetImmobilizeState");
static_assert(offsetof(ImmobilizeUtilities_GetImmobilizeState, Player) == 0x000000, "Member 'ImmobilizeUtilities_GetImmobilizeState::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_GetImmobilizeState, ReturnValue) == 0x000008, "Member 'ImmobilizeUtilities_GetImmobilizeState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.HasGuidedState
// 0x0010 (0x0010 - 0x0000)
struct ImmobilizeUtilities_HasGuidedState final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuidedState                                  GuidedState;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImmobilizeUtilities_HasGuidedState) == 0x000008, "Wrong alignment on ImmobilizeUtilities_HasGuidedState");
static_assert(sizeof(ImmobilizeUtilities_HasGuidedState) == 0x000010, "Wrong size on ImmobilizeUtilities_HasGuidedState");
static_assert(offsetof(ImmobilizeUtilities_HasGuidedState, Player) == 0x000000, "Member 'ImmobilizeUtilities_HasGuidedState::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_HasGuidedState, GuidedState) == 0x000008, "Member 'ImmobilizeUtilities_HasGuidedState::GuidedState' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_HasGuidedState, ReturnValue) == 0x000009, "Member 'ImmobilizeUtilities_HasGuidedState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.HasImmobilizeState
// 0x0010 (0x0010 - 0x0000)
struct ImmobilizeUtilities_HasImmobilizeState final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImmobilizedState                             ImmobilizeState;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0009(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImmobilizeUtilities_HasImmobilizeState) == 0x000008, "Wrong alignment on ImmobilizeUtilities_HasImmobilizeState");
static_assert(sizeof(ImmobilizeUtilities_HasImmobilizeState) == 0x000010, "Wrong size on ImmobilizeUtilities_HasImmobilizeState");
static_assert(offsetof(ImmobilizeUtilities_HasImmobilizeState, Player) == 0x000000, "Member 'ImmobilizeUtilities_HasImmobilizeState::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_HasImmobilizeState, ImmobilizeState) == 0x000008, "Member 'ImmobilizeUtilities_HasImmobilizeState::ImmobilizeState' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_HasImmobilizeState, ReturnValue) == 0x000009, "Member 'ImmobilizeUtilities_HasImmobilizeState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.IsGuided
// 0x0010 (0x0010 - 0x0000)
struct ImmobilizeUtilities_IsGuided final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImmobilizeUtilities_IsGuided) == 0x000008, "Wrong alignment on ImmobilizeUtilities_IsGuided");
static_assert(sizeof(ImmobilizeUtilities_IsGuided) == 0x000010, "Wrong size on ImmobilizeUtilities_IsGuided");
static_assert(offsetof(ImmobilizeUtilities_IsGuided, Player) == 0x000000, "Member 'ImmobilizeUtilities_IsGuided::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_IsGuided, ReturnValue) == 0x000008, "Member 'ImmobilizeUtilities_IsGuided::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.IsGuidedByPlayer
// 0x0018 (0x0018 - 0x0000)
struct ImmobilizeUtilities_IsGuidedByPlayer final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       GuidingPlayer;                                     // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImmobilizeUtilities_IsGuidedByPlayer) == 0x000008, "Wrong alignment on ImmobilizeUtilities_IsGuidedByPlayer");
static_assert(sizeof(ImmobilizeUtilities_IsGuidedByPlayer) == 0x000018, "Wrong size on ImmobilizeUtilities_IsGuidedByPlayer");
static_assert(offsetof(ImmobilizeUtilities_IsGuidedByPlayer, Player) == 0x000000, "Member 'ImmobilizeUtilities_IsGuidedByPlayer::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_IsGuidedByPlayer, GuidingPlayer) == 0x000008, "Member 'ImmobilizeUtilities_IsGuidedByPlayer::GuidingPlayer' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_IsGuidedByPlayer, ReturnValue) == 0x000010, "Member 'ImmobilizeUtilities_IsGuidedByPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.IsImmobilized
// 0x0010 (0x0010 - 0x0000)
struct ImmobilizeUtilities_IsImmobilized final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImmobilizeUtilities_IsImmobilized) == 0x000008, "Wrong alignment on ImmobilizeUtilities_IsImmobilized");
static_assert(sizeof(ImmobilizeUtilities_IsImmobilized) == 0x000010, "Wrong size on ImmobilizeUtilities_IsImmobilized");
static_assert(offsetof(ImmobilizeUtilities_IsImmobilized, Player) == 0x000000, "Member 'ImmobilizeUtilities_IsImmobilized::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_IsImmobilized, ReturnValue) == 0x000008, "Member 'ImmobilizeUtilities_IsImmobilized::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.RemoveAllGuidingPlayers
// 0x0008 (0x0008 - 0x0000)
struct ImmobilizeUtilities_RemoveAllGuidingPlayers final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImmobilizeUtilities_RemoveAllGuidingPlayers) == 0x000008, "Wrong alignment on ImmobilizeUtilities_RemoveAllGuidingPlayers");
static_assert(sizeof(ImmobilizeUtilities_RemoveAllGuidingPlayers) == 0x000008, "Wrong size on ImmobilizeUtilities_RemoveAllGuidingPlayers");
static_assert(offsetof(ImmobilizeUtilities_RemoveAllGuidingPlayers, Player) == 0x000000, "Member 'ImmobilizeUtilities_RemoveAllGuidingPlayers::Player' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.SetImmobilizeState
// 0x0010 (0x0010 - 0x0000)
struct ImmobilizeUtilities_SetImmobilizeState final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImmobilizedState                             ImmobilizeState;                                   // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ImmobilizeUtilities_SetImmobilizeState) == 0x000008, "Wrong alignment on ImmobilizeUtilities_SetImmobilizeState");
static_assert(sizeof(ImmobilizeUtilities_SetImmobilizeState) == 0x000010, "Wrong size on ImmobilizeUtilities_SetImmobilizeState");
static_assert(offsetof(ImmobilizeUtilities_SetImmobilizeState, Player) == 0x000000, "Member 'ImmobilizeUtilities_SetImmobilizeState::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_SetImmobilizeState, ImmobilizeState) == 0x000008, "Member 'ImmobilizeUtilities_SetImmobilizeState::ImmobilizeState' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.StartGuiding
// 0x0018 (0x0018 - 0x0000)
struct ImmobilizeUtilities_StartGuiding final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGuidedState                                  GuidedState;                                       // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             GuidingPlayer;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImmobilizeUtilities_StartGuiding) == 0x000008, "Wrong alignment on ImmobilizeUtilities_StartGuiding");
static_assert(sizeof(ImmobilizeUtilities_StartGuiding) == 0x000018, "Wrong size on ImmobilizeUtilities_StartGuiding");
static_assert(offsetof(ImmobilizeUtilities_StartGuiding, Player) == 0x000000, "Member 'ImmobilizeUtilities_StartGuiding::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_StartGuiding, GuidedState) == 0x000008, "Member 'ImmobilizeUtilities_StartGuiding::GuidedState' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_StartGuiding, GuidingPlayer) == 0x000010, "Member 'ImmobilizeUtilities_StartGuiding::GuidingPlayer' has a wrong offset!");

// Function DeadByDaylight.ImmobilizeUtilities.StopGuiding
// 0x0010 (0x0010 - 0x0000)
struct ImmobilizeUtilities_StopGuiding final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             PreviouslyGuidingPlayer;                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImmobilizeUtilities_StopGuiding) == 0x000008, "Wrong alignment on ImmobilizeUtilities_StopGuiding");
static_assert(sizeof(ImmobilizeUtilities_StopGuiding) == 0x000010, "Wrong size on ImmobilizeUtilities_StopGuiding");
static_assert(offsetof(ImmobilizeUtilities_StopGuiding, Player) == 0x000000, "Member 'ImmobilizeUtilities_StopGuiding::Player' has a wrong offset!");
static_assert(offsetof(ImmobilizeUtilities_StopGuiding, PreviouslyGuidingPlayer) == 0x000008, "Member 'ImmobilizeUtilities_StopGuiding::PreviouslyGuidingPlayer' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.Authority_OnOwningInteractableBeginOrEndUse
// 0x0010 (0x0010 - 0x0000)
struct InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse final
{
public:
	bool                                          InUse;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse) == 0x000008, "Wrong alignment on InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse");
static_assert(sizeof(InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse) == 0x000010, "Wrong size on InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse");
static_assert(offsetof(InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse, InUse) == 0x000000, "Member 'InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse::InUse' has a wrong offset!");
static_assert(offsetof(InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse, InteractingPlayer) == 0x000008, "Member 'InfectedInteractableComponent_Authority_OnOwningInteractableBeginOrEndUse::InteractingPlayer' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.Multicast_DebugDisplayLifetime
// 0x0004 (0x0004 - 0x0000)
struct InfectedInteractableComponent_Multicast_DebugDisplayLifetime final
{
public:
	float                                         RemainingLifeTime;                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_Multicast_DebugDisplayLifetime) == 0x000004, "Wrong alignment on InfectedInteractableComponent_Multicast_DebugDisplayLifetime");
static_assert(sizeof(InfectedInteractableComponent_Multicast_DebugDisplayLifetime) == 0x000004, "Wrong size on InfectedInteractableComponent_Multicast_DebugDisplayLifetime");
static_assert(offsetof(InfectedInteractableComponent_Multicast_DebugDisplayLifetime, RemainingLifeTime) == 0x000000, "Member 'InfectedInteractableComponent_Multicast_DebugDisplayLifetime::RemainingLifeTime' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.OnVomitAlphaUpdate
// 0x0004 (0x0004 - 0x0000)
struct InfectedInteractableComponent_OnVomitAlphaUpdate final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_OnVomitAlphaUpdate) == 0x000004, "Wrong alignment on InfectedInteractableComponent_OnVomitAlphaUpdate");
static_assert(sizeof(InfectedInteractableComponent_OnVomitAlphaUpdate) == 0x000004, "Wrong size on InfectedInteractableComponent_OnVomitAlphaUpdate");
static_assert(offsetof(InfectedInteractableComponent_OnVomitAlphaUpdate, Alpha) == 0x000000, "Member 'InfectedInteractableComponent_OnVomitAlphaUpdate::Alpha' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.SetInteractableMeshAlpha
// 0x0004 (0x0004 - 0x0000)
struct InfectedInteractableComponent_SetInteractableMeshAlpha final
{
public:
	float                                         Alpha;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_SetInteractableMeshAlpha) == 0x000004, "Wrong alignment on InfectedInteractableComponent_SetInteractableMeshAlpha");
static_assert(sizeof(InfectedInteractableComponent_SetInteractableMeshAlpha) == 0x000004, "Wrong size on InfectedInteractableComponent_SetInteractableMeshAlpha");
static_assert(offsetof(InfectedInteractableComponent_SetInteractableMeshAlpha, Alpha) == 0x000000, "Member 'InfectedInteractableComponent_SetInteractableMeshAlpha::Alpha' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.Authority_GetEquippingPlayer
// 0x0008 (0x0008 - 0x0000)
struct InfectedInteractableComponent_Authority_GetEquippingPlayer final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_Authority_GetEquippingPlayer) == 0x000008, "Wrong alignment on InfectedInteractableComponent_Authority_GetEquippingPlayer");
static_assert(sizeof(InfectedInteractableComponent_Authority_GetEquippingPlayer) == 0x000008, "Wrong size on InfectedInteractableComponent_Authority_GetEquippingPlayer");
static_assert(offsetof(InfectedInteractableComponent_Authority_GetEquippingPlayer, ReturnValue) == 0x000000, "Member 'InfectedInteractableComponent_Authority_GetEquippingPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.Authority_IsAMaxSicknessSurvivorInteracting
// 0x0001 (0x0001 - 0x0000)
struct InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting) == 0x000001, "Wrong alignment on InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting");
static_assert(sizeof(InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting) == 0x000001, "Wrong size on InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting");
static_assert(offsetof(InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting, ReturnValue) == 0x000000, "Member 'InfectedInteractableComponent_Authority_IsAMaxSicknessSurvivorInteracting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InfectedInteractableComponent.GetOwningInteractable
// 0x0008 (0x0008 - 0x0000)
struct InfectedInteractableComponent_GetOwningInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectedInteractableComponent_GetOwningInteractable) == 0x000008, "Wrong alignment on InfectedInteractableComponent_GetOwningInteractable");
static_assert(sizeof(InfectedInteractableComponent_GetOwningInteractable) == 0x000008, "Wrong size on InfectedInteractableComponent_GetOwningInteractable");
static_assert(offsetof(InfectedInteractableComponent_GetOwningInteractable, ReturnValue) == 0x000000, "Member 'InfectedInteractableComponent_GetOwningInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.AddIgnoredActor
// 0x0008 (0x0008 - 0x0000)
struct InteractionDetectorComponent_AddIgnoredActor final
{
public:
	class AActor*                                 Ignored;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_AddIgnoredActor) == 0x000008, "Wrong alignment on InteractionDetectorComponent_AddIgnoredActor");
static_assert(sizeof(InteractionDetectorComponent_AddIgnoredActor) == 0x000008, "Wrong size on InteractionDetectorComponent_AddIgnoredActor");
static_assert(offsetof(InteractionDetectorComponent_AddIgnoredActor, Ignored) == 0x000000, "Member 'InteractionDetectorComponent_AddIgnoredActor::Ignored' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.BeginOverlapCallback
// 0x0110 (0x0110 - 0x0000)
struct InteractionDetectorComponent_BeginOverlapCallback final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_BeginOverlapCallback) == 0x000008, "Wrong alignment on InteractionDetectorComponent_BeginOverlapCallback");
static_assert(sizeof(InteractionDetectorComponent_BeginOverlapCallback) == 0x000110, "Wrong size on InteractionDetectorComponent_BeginOverlapCallback");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, HitComponent) == 0x000000, "Member 'InteractionDetectorComponent_BeginOverlapCallback::HitComponent' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, OtherActor) == 0x000008, "Member 'InteractionDetectorComponent_BeginOverlapCallback::OtherActor' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, OtherComp) == 0x000010, "Member 'InteractionDetectorComponent_BeginOverlapCallback::OtherComp' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, OtherBodyIndex) == 0x000018, "Member 'InteractionDetectorComponent_BeginOverlapCallback::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, FromSweep) == 0x00001C, "Member 'InteractionDetectorComponent_BeginOverlapCallback::FromSweep' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_BeginOverlapCallback, SweepResult) == 0x000020, "Member 'InteractionDetectorComponent_BeginOverlapCallback::SweepResult' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.EndOverlapCallback
// 0x0020 (0x0020 - 0x0000)
struct InteractionDetectorComponent_EndOverlapCallback final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionDetectorComponent_EndOverlapCallback) == 0x000008, "Wrong alignment on InteractionDetectorComponent_EndOverlapCallback");
static_assert(sizeof(InteractionDetectorComponent_EndOverlapCallback) == 0x000020, "Wrong size on InteractionDetectorComponent_EndOverlapCallback");
static_assert(offsetof(InteractionDetectorComponent_EndOverlapCallback, HitComponent) == 0x000000, "Member 'InteractionDetectorComponent_EndOverlapCallback::HitComponent' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_EndOverlapCallback, OtherActor) == 0x000008, "Member 'InteractionDetectorComponent_EndOverlapCallback::OtherActor' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_EndOverlapCallback, OtherComp) == 0x000010, "Member 'InteractionDetectorComponent_EndOverlapCallback::OtherComp' has a wrong offset!");
static_assert(offsetof(InteractionDetectorComponent_EndOverlapCallback, OtherBodyIndex) == 0x000018, "Member 'InteractionDetectorComponent_EndOverlapCallback::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.OnLocallyObservedChanged
// 0x0008 (0x0008 - 0x0000)
struct InteractionDetectorComponent_OnLocallyObservedChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_OnLocallyObservedChanged) == 0x000008, "Wrong alignment on InteractionDetectorComponent_OnLocallyObservedChanged");
static_assert(sizeof(InteractionDetectorComponent_OnLocallyObservedChanged) == 0x000008, "Wrong size on InteractionDetectorComponent_OnLocallyObservedChanged");
static_assert(offsetof(InteractionDetectorComponent_OnLocallyObservedChanged, Player) == 0x000000, "Member 'InteractionDetectorComponent_OnLocallyObservedChanged::Player' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.SetDetectionPrimitive
// 0x0008 (0x0008 - 0x0000)
struct InteractionDetectorComponent_SetDetectionPrimitive final
{
public:
	class UPrimitiveComponent*                    DetectionPrimitive;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong alignment on InteractionDetectorComponent_SetDetectionPrimitive");
static_assert(sizeof(InteractionDetectorComponent_SetDetectionPrimitive) == 0x000008, "Wrong size on InteractionDetectorComponent_SetDetectionPrimitive");
static_assert(offsetof(InteractionDetectorComponent_SetDetectionPrimitive, DetectionPrimitive) == 0x000000, "Member 'InteractionDetectorComponent_SetDetectionPrimitive::DetectionPrimitive' has a wrong offset!");

// Function DeadByDaylight.InteractionDetectorComponent.GetDetectionPrimitive
// 0x0008 (0x0008 - 0x0000)
struct InteractionDetectorComponent_GetDetectionPrimitive final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionDetectorComponent_GetDetectionPrimitive) == 0x000008, "Wrong alignment on InteractionDetectorComponent_GetDetectionPrimitive");
static_assert(sizeof(InteractionDetectorComponent_GetDetectionPrimitive) == 0x000008, "Wrong size on InteractionDetectorComponent_GetDetectionPrimitive");
static_assert(offsetof(InteractionDetectorComponent_GetDetectionPrimitive, ReturnValue) == 0x000000, "Member 'InteractionDetectorComponent_GetDetectionPrimitive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.Multicast_LockStatus
// 0x0018 (0x0018 - 0x0000)
struct Interactor_Multicast_LockStatus final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionDefinition*                 CurrentInteraction;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock;                                              // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactor_Multicast_LockStatus) == 0x000008, "Wrong alignment on Interactor_Multicast_LockStatus");
static_assert(sizeof(Interactor_Multicast_LockStatus) == 0x000018, "Wrong size on Interactor_Multicast_LockStatus");
static_assert(offsetof(Interactor_Multicast_LockStatus, Player) == 0x000000, "Member 'Interactor_Multicast_LockStatus::Player' has a wrong offset!");
static_assert(offsetof(Interactor_Multicast_LockStatus, CurrentInteraction) == 0x000008, "Member 'Interactor_Multicast_LockStatus::CurrentInteraction' has a wrong offset!");
static_assert(offsetof(Interactor_Multicast_LockStatus, Lock) == 0x000010, "Member 'Interactor_Multicast_LockStatus::Lock' has a wrong offset!");

// Function DeadByDaylight.Interactor.Multicast_ReservationStatus
// 0x0010 (0x0010 - 0x0000)
struct Interactor_Multicast_ReservationStatus final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Lock;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactor_Multicast_ReservationStatus) == 0x000008, "Wrong alignment on Interactor_Multicast_ReservationStatus");
static_assert(sizeof(Interactor_Multicast_ReservationStatus) == 0x000010, "Wrong size on Interactor_Multicast_ReservationStatus");
static_assert(offsetof(Interactor_Multicast_ReservationStatus, Player) == 0x000000, "Member 'Interactor_Multicast_ReservationStatus::Player' has a wrong offset!");
static_assert(offsetof(Interactor_Multicast_ReservationStatus, Lock) == 0x000008, "Member 'Interactor_Multicast_ReservationStatus::Lock' has a wrong offset!");

// Function DeadByDaylight.Interactor.SetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Interactor_SetIsUsable final
{
public:
	bool                                          IsUsableParam;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_SetIsUsable) == 0x000001, "Wrong alignment on Interactor_SetIsUsable");
static_assert(sizeof(Interactor_SetIsUsable) == 0x000001, "Wrong size on Interactor_SetIsUsable");
static_assert(offsetof(Interactor_SetIsUsable, IsUsableParam) == 0x000000, "Member 'Interactor_SetIsUsable::IsUsableParam' has a wrong offset!");

// Function DeadByDaylight.Interactor.Authority_GetInteractingPlayer
// 0x0008 (0x0008 - 0x0000)
struct Interactor_Authority_GetInteractingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_Authority_GetInteractingPlayer) == 0x000008, "Wrong alignment on Interactor_Authority_GetInteractingPlayer");
static_assert(sizeof(Interactor_Authority_GetInteractingPlayer) == 0x000008, "Wrong size on Interactor_Authority_GetInteractingPlayer");
static_assert(offsetof(Interactor_Authority_GetInteractingPlayer, ReturnValue) == 0x000000, "Member 'Interactor_Authority_GetInteractingPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.CanPerformInteraction
// 0x0018 (0x0018 - 0x0000)
struct Interactor_CanPerformInteraction final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           Definition;                                        // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactor_CanPerformInteraction) == 0x000008, "Wrong alignment on Interactor_CanPerformInteraction");
static_assert(sizeof(Interactor_CanPerformInteraction) == 0x000018, "Wrong size on Interactor_CanPerformInteraction");
static_assert(offsetof(Interactor_CanPerformInteraction, Player) == 0x000000, "Member 'Interactor_CanPerformInteraction::Player' has a wrong offset!");
static_assert(offsetof(Interactor_CanPerformInteraction, Definition) == 0x000008, "Member 'Interactor_CanPerformInteraction::Definition' has a wrong offset!");
static_assert(offsetof(Interactor_CanPerformInteraction, ReturnValue) == 0x000010, "Member 'Interactor_CanPerformInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetCurrentInteraction
// 0x0008 (0x0008 - 0x0000)
struct Interactor_GetCurrentInteraction final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetCurrentInteraction) == 0x000008, "Wrong alignment on Interactor_GetCurrentInteraction");
static_assert(sizeof(Interactor_GetCurrentInteraction) == 0x000008, "Wrong size on Interactor_GetCurrentInteraction");
static_assert(offsetof(Interactor_GetCurrentInteraction, ReturnValue) == 0x000000, "Member 'Interactor_GetCurrentInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetInteractable
// 0x0008 (0x0008 - 0x0000)
struct Interactor_GetInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetInteractable) == 0x000008, "Wrong alignment on Interactor_GetInteractable");
static_assert(sizeof(Interactor_GetInteractable) == 0x000008, "Wrong size on Interactor_GetInteractable");
static_assert(offsetof(Interactor_GetInteractable, ReturnValue) == 0x000000, "Member 'Interactor_GetInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetInteractingPlayerRaw
// 0x0008 (0x0008 - 0x0000)
struct Interactor_GetInteractingPlayerRaw final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetInteractingPlayerRaw) == 0x000008, "Wrong alignment on Interactor_GetInteractingPlayerRaw");
static_assert(sizeof(Interactor_GetInteractingPlayerRaw) == 0x000008, "Wrong size on Interactor_GetInteractingPlayerRaw");
static_assert(offsetof(Interactor_GetInteractingPlayerRaw, ReturnValue) == 0x000000, "Member 'Interactor_GetInteractingPlayerRaw::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetInteractionDefinitions
// 0x0010 (0x0010 - 0x0000)
struct Interactor_GetInteractionDefinitions final
{
public:
	TArray<class UInteractionDefinition*>         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetInteractionDefinitions) == 0x000008, "Wrong alignment on Interactor_GetInteractionDefinitions");
static_assert(sizeof(Interactor_GetInteractionDefinitions) == 0x000010, "Wrong size on Interactor_GetInteractionDefinitions");
static_assert(offsetof(Interactor_GetInteractionDefinitions, ReturnValue) == 0x000000, "Member 'Interactor_GetInteractionDefinitions::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.GetIsUsable
// 0x0001 (0x0001 - 0x0000)
struct Interactor_GetIsUsable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_GetIsUsable) == 0x000001, "Wrong alignment on Interactor_GetIsUsable");
static_assert(sizeof(Interactor_GetIsUsable) == 0x000001, "Wrong size on Interactor_GetIsUsable");
static_assert(offsetof(Interactor_GetIsUsable, ReturnValue) == 0x000000, "Member 'Interactor_GetIsUsable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.IsInteracting
// 0x0001 (0x0001 - 0x0000)
struct Interactor_IsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Interactor_IsInteracting) == 0x000001, "Wrong alignment on Interactor_IsInteracting");
static_assert(sizeof(Interactor_IsInteracting) == 0x000001, "Wrong size on Interactor_IsInteracting");
static_assert(offsetof(Interactor_IsInteracting, ReturnValue) == 0x000000, "Member 'Interactor_IsInteracting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Interactor.IsInterruptionPossible
// 0x0028 (0x0028 - 0x0000)
struct Interactor_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInteractionDefinition*           Definition;                                        // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UInterruptionDefinition*          Interruption;                                      // 0x0018(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Interactor_IsInterruptionPossible) == 0x000008, "Wrong alignment on Interactor_IsInterruptionPossible");
static_assert(sizeof(Interactor_IsInterruptionPossible) == 0x000028, "Wrong size on Interactor_IsInterruptionPossible");
static_assert(offsetof(Interactor_IsInterruptionPossible, Interruptor) == 0x000000, "Member 'Interactor_IsInterruptionPossible::Interruptor' has a wrong offset!");
static_assert(offsetof(Interactor_IsInterruptionPossible, Interruptee) == 0x000008, "Member 'Interactor_IsInterruptionPossible::Interruptee' has a wrong offset!");
static_assert(offsetof(Interactor_IsInterruptionPossible, Definition) == 0x000010, "Member 'Interactor_IsInterruptionPossible::Definition' has a wrong offset!");
static_assert(offsetof(Interactor_IsInterruptionPossible, Interruption) == 0x000018, "Member 'Interactor_IsInterruptionPossible::Interruption' has a wrong offset!");
static_assert(offsetof(Interactor_IsInterruptionPossible, ReturnValue) == 0x000020, "Member 'Interactor_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.OnInterruptionEnterStart
// 0x0010 (0x0010 - 0x0000)
struct InterruptionDefinition_OnInterruptionEnterStart final
{
public:
	class ADBDPlayer*                             Interruptor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Interruptee;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_OnInterruptionEnterStart) == 0x000008, "Wrong alignment on InterruptionDefinition_OnInterruptionEnterStart");
static_assert(sizeof(InterruptionDefinition_OnInterruptionEnterStart) == 0x000010, "Wrong size on InterruptionDefinition_OnInterruptionEnterStart");
static_assert(offsetof(InterruptionDefinition_OnInterruptionEnterStart, Interruptor) == 0x000000, "Member 'InterruptionDefinition_OnInterruptionEnterStart::Interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_OnInterruptionEnterStart, Interruptee) == 0x000008, "Member 'InterruptionDefinition_OnInterruptionEnterStart::Interruptee' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.OnInterruptionExitEnd
// 0x0010 (0x0010 - 0x0000)
struct InterruptionDefinition_OnInterruptionExitEnd final
{
public:
	class ADBDPlayer*                             Interruptor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Interruptee;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_OnInterruptionExitEnd) == 0x000008, "Wrong alignment on InterruptionDefinition_OnInterruptionExitEnd");
static_assert(sizeof(InterruptionDefinition_OnInterruptionExitEnd) == 0x000010, "Wrong size on InterruptionDefinition_OnInterruptionExitEnd");
static_assert(offsetof(InterruptionDefinition_OnInterruptionExitEnd, Interruptor) == 0x000000, "Member 'InterruptionDefinition_OnInterruptionExitEnd::Interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_OnInterruptionExitEnd, Interruptee) == 0x000008, "Member 'InterruptionDefinition_OnInterruptionExitEnd::Interruptee' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.OnInterruptionUpdateStart
// 0x0010 (0x0010 - 0x0000)
struct InterruptionDefinition_OnInterruptionUpdateStart final
{
public:
	class ADBDPlayer*                             Interruptor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Interruptee;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_OnInterruptionUpdateStart) == 0x000008, "Wrong alignment on InterruptionDefinition_OnInterruptionUpdateStart");
static_assert(sizeof(InterruptionDefinition_OnInterruptionUpdateStart) == 0x000010, "Wrong size on InterruptionDefinition_OnInterruptionUpdateStart");
static_assert(offsetof(InterruptionDefinition_OnInterruptionUpdateStart, Interruptor) == 0x000000, "Member 'InterruptionDefinition_OnInterruptionUpdateStart::Interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_OnInterruptionUpdateStart, Interruptee) == 0x000008, "Member 'InterruptionDefinition_OnInterruptionUpdateStart::Interruptee' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.SetInterruptorSnapPoint
// 0x0060 (0x0060 - 0x0000)
struct InterruptionDefinition_SetInterruptorSnapPoint final
{
public:
	struct FTransform                             Point;                                             // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_SetInterruptorSnapPoint) == 0x000010, "Wrong alignment on InterruptionDefinition_SetInterruptorSnapPoint");
static_assert(sizeof(InterruptionDefinition_SetInterruptorSnapPoint) == 0x000060, "Wrong size on InterruptionDefinition_SetInterruptorSnapPoint");
static_assert(offsetof(InterruptionDefinition_SetInterruptorSnapPoint, Point) == 0x000000, "Member 'InterruptionDefinition_SetInterruptorSnapPoint::Point' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.CanInterruptWhileCarrying
// 0x0001 (0x0001 - 0x0000)
struct InterruptionDefinition_CanInterruptWhileCarrying final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_CanInterruptWhileCarrying) == 0x000001, "Wrong alignment on InterruptionDefinition_CanInterruptWhileCarrying");
static_assert(sizeof(InterruptionDefinition_CanInterruptWhileCarrying) == 0x000001, "Wrong size on InterruptionDefinition_CanInterruptWhileCarrying");
static_assert(offsetof(InterruptionDefinition_CanInterruptWhileCarrying, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_CanInterruptWhileCarrying::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.GetInteractable
// 0x0008 (0x0008 - 0x0000)
struct InterruptionDefinition_GetInteractable final
{
public:
	class AInteractable*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_GetInteractable) == 0x000008, "Wrong alignment on InterruptionDefinition_GetInteractable");
static_assert(sizeof(InterruptionDefinition_GetInteractable) == 0x000008, "Wrong size on InterruptionDefinition_GetInteractable");
static_assert(offsetof(InterruptionDefinition_GetInteractable, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_GetInteractable::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.GetInteractionDefinition
// 0x0008 (0x0008 - 0x0000)
struct InterruptionDefinition_GetInteractionDefinition final
{
public:
	class UInteractionDefinition*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_GetInteractionDefinition) == 0x000008, "Wrong alignment on InterruptionDefinition_GetInteractionDefinition");
static_assert(sizeof(InterruptionDefinition_GetInteractionDefinition) == 0x000008, "Wrong size on InterruptionDefinition_GetInteractionDefinition");
static_assert(offsetof(InterruptionDefinition_GetInteractionDefinition, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_GetInteractionDefinition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.GetInterruptionSnapPointPositionForInterruptor
// 0x0028 (0x0028 - 0x0000)
struct InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor) == 0x000008, "Wrong alignment on InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor");
static_assert(sizeof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor) == 0x000028, "Wrong size on InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor, Interruptor) == 0x000000, "Member 'InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor::Interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor, Interruptee) == 0x000008, "Member 'InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor::Interruptee' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor, ReturnValue) == 0x000010, "Member 'InterruptionDefinition_GetInterruptionSnapPointPositionForInterruptor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.GetInterruptionSnapPointRotationForInterruptor
// 0x0028 (0x0028 - 0x0000)
struct InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0010(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor) == 0x000008, "Wrong alignment on InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor");
static_assert(sizeof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor) == 0x000028, "Wrong size on InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor, Interruptor) == 0x000000, "Member 'InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor::Interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor, Interruptee) == 0x000008, "Member 'InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor::Interruptee' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor, ReturnValue) == 0x000010, "Member 'InterruptionDefinition_GetInterruptionSnapPointRotationForInterruptor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.InteractionCheckHeightDelta
// 0x0018 (0x0018 - 0x0000)
struct InterruptionDefinition_InteractionCheckHeightDelta final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InterruptionDefinition_InteractionCheckHeightDelta) == 0x000008, "Wrong alignment on InterruptionDefinition_InteractionCheckHeightDelta");
static_assert(sizeof(InterruptionDefinition_InteractionCheckHeightDelta) == 0x000018, "Wrong size on InterruptionDefinition_InteractionCheckHeightDelta");
static_assert(offsetof(InterruptionDefinition_InteractionCheckHeightDelta, Interruptor) == 0x000000, "Member 'InterruptionDefinition_InteractionCheckHeightDelta::Interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_InteractionCheckHeightDelta, Interruptee) == 0x000008, "Member 'InterruptionDefinition_InteractionCheckHeightDelta::Interruptee' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_InteractionCheckHeightDelta, ReturnValue) == 0x000010, "Member 'InterruptionDefinition_InteractionCheckHeightDelta::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.IsInterruptionPossible
// 0x0018 (0x0018 - 0x0000)
struct InterruptionDefinition_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InterruptionDefinition_IsInterruptionPossible) == 0x000008, "Wrong alignment on InterruptionDefinition_IsInterruptionPossible");
static_assert(sizeof(InterruptionDefinition_IsInterruptionPossible) == 0x000018, "Wrong size on InterruptionDefinition_IsInterruptionPossible");
static_assert(offsetof(InterruptionDefinition_IsInterruptionPossible, Interruptor) == 0x000000, "Member 'InterruptionDefinition_IsInterruptionPossible::Interruptor' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_IsInterruptionPossible, Interruptee) == 0x000008, "Member 'InterruptionDefinition_IsInterruptionPossible::Interruptee' has a wrong offset!");
static_assert(offsetof(InterruptionDefinition_IsInterruptionPossible, ReturnValue) == 0x000010, "Member 'InterruptionDefinition_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.IsUsingAttack
// 0x0001 (0x0001 - 0x0000)
struct InterruptionDefinition_IsUsingAttack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_IsUsingAttack) == 0x000001, "Wrong alignment on InterruptionDefinition_IsUsingAttack");
static_assert(sizeof(InterruptionDefinition_IsUsingAttack) == 0x000001, "Wrong size on InterruptionDefinition_IsUsingAttack");
static_assert(offsetof(InterruptionDefinition_IsUsingAttack, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_IsUsingAttack::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.InterruptionDefinition.IsUsingMontageFollower
// 0x0001 (0x0001 - 0x0000)
struct InterruptionDefinition_IsUsingMontageFollower final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InterruptionDefinition_IsUsingMontageFollower) == 0x000001, "Wrong alignment on InterruptionDefinition_IsUsingMontageFollower");
static_assert(sizeof(InterruptionDefinition_IsUsingMontageFollower) == 0x000001, "Wrong size on InterruptionDefinition_IsUsingMontageFollower");
static_assert(offsetof(InterruptionDefinition_IsUsingMontageFollower, ReturnValue) == 0x000000, "Member 'InterruptionDefinition_IsUsingMontageFollower::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ItemVfx.AddNiagaraComponent
// 0x0008 (0x0008 - 0x0000)
struct ItemVfx_AddNiagaraComponent final
{
public:
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVfx_AddNiagaraComponent) == 0x000008, "Wrong alignment on ItemVfx_AddNiagaraComponent");
static_assert(sizeof(ItemVfx_AddNiagaraComponent) == 0x000008, "Wrong size on ItemVfx_AddNiagaraComponent");
static_assert(offsetof(ItemVfx_AddNiagaraComponent, NiagaraComponent) == 0x000000, "Member 'ItemVfx_AddNiagaraComponent::NiagaraComponent' has a wrong offset!");

// Function DeadByDaylight.ItemVfx.AddParticleSystemComponent
// 0x0008 (0x0008 - 0x0000)
struct ItemVfx_AddParticleSystemComponent final
{
public:
	class UParticleSystemComponent*               ParticleSystemComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVfx_AddParticleSystemComponent) == 0x000008, "Wrong alignment on ItemVfx_AddParticleSystemComponent");
static_assert(sizeof(ItemVfx_AddParticleSystemComponent) == 0x000008, "Wrong size on ItemVfx_AddParticleSystemComponent");
static_assert(offsetof(ItemVfx_AddParticleSystemComponent, ParticleSystemComponent) == 0x000000, "Member 'ItemVfx_AddParticleSystemComponent::ParticleSystemComponent' has a wrong offset!");

// Function DeadByDaylight.ItemVfx.AttachToSkeletalMesh
// 0x0008 (0x0008 - 0x0000)
struct ItemVfx_AttachToSkeletalMesh final
{
public:
	class USkeletalMeshComponent*                 SkeletonPart;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVfx_AttachToSkeletalMesh) == 0x000008, "Wrong alignment on ItemVfx_AttachToSkeletalMesh");
static_assert(sizeof(ItemVfx_AttachToSkeletalMesh) == 0x000008, "Wrong size on ItemVfx_AttachToSkeletalMesh");
static_assert(offsetof(ItemVfx_AttachToSkeletalMesh, SkeletonPart) == 0x000000, "Member 'ItemVfx_AttachToSkeletalMesh::SkeletonPart' has a wrong offset!");

// Function DeadByDaylight.ItemVfx.SpawnNiagaraSystemAttached
// 0x0078 (0x0078 - 0x0000)
struct ItemVfx_SpawnNiagaraSystemAttached final
{
public:
	class UNiagaraSystem*                         SystemTemplate;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        AttachToComponent;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachPointName;                                   // 0x0010(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachLocation                               LocationType;                                      // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoDestroy;                                       // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ENCPoolMethod                                 PoolingMethod;                                     // 0x001E(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Location;                                          // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Scale;                                             // 0x0050(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoActivate;                                      // 0x0068(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PreCullCheck;                                      // 0x0069(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AbsoluteRotation;                                  // 0x006A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideInFPV;                                         // 0x006B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemVfx_SpawnNiagaraSystemAttached) == 0x000008, "Wrong alignment on ItemVfx_SpawnNiagaraSystemAttached");
static_assert(sizeof(ItemVfx_SpawnNiagaraSystemAttached) == 0x000078, "Wrong size on ItemVfx_SpawnNiagaraSystemAttached");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, SystemTemplate) == 0x000000, "Member 'ItemVfx_SpawnNiagaraSystemAttached::SystemTemplate' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, AttachToComponent) == 0x000008, "Member 'ItemVfx_SpawnNiagaraSystemAttached::AttachToComponent' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, AttachPointName) == 0x000010, "Member 'ItemVfx_SpawnNiagaraSystemAttached::AttachPointName' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, LocationType) == 0x00001C, "Member 'ItemVfx_SpawnNiagaraSystemAttached::LocationType' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, AutoDestroy) == 0x00001D, "Member 'ItemVfx_SpawnNiagaraSystemAttached::AutoDestroy' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, PoolingMethod) == 0x00001E, "Member 'ItemVfx_SpawnNiagaraSystemAttached::PoolingMethod' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, Location) == 0x000020, "Member 'ItemVfx_SpawnNiagaraSystemAttached::Location' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, Rotation) == 0x000038, "Member 'ItemVfx_SpawnNiagaraSystemAttached::Rotation' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, Scale) == 0x000050, "Member 'ItemVfx_SpawnNiagaraSystemAttached::Scale' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, AutoActivate) == 0x000068, "Member 'ItemVfx_SpawnNiagaraSystemAttached::AutoActivate' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, PreCullCheck) == 0x000069, "Member 'ItemVfx_SpawnNiagaraSystemAttached::PreCullCheck' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, AbsoluteRotation) == 0x00006A, "Member 'ItemVfx_SpawnNiagaraSystemAttached::AbsoluteRotation' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, HideInFPV) == 0x00006B, "Member 'ItemVfx_SpawnNiagaraSystemAttached::HideInFPV' has a wrong offset!");
static_assert(offsetof(ItemVfx_SpawnNiagaraSystemAttached, ReturnValue) == 0x000070, "Member 'ItemVfx_SpawnNiagaraSystemAttached::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.ChaseTriggerKillerReactionSpecificSurvivorSFX
// 0x0008 (0x0008 - 0x0000)
struct KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX final
{
public:
	class ADBDPlayer*                             Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX");
static_assert(sizeof(KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong size on KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX");
static_assert(offsetof(KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX, Camper) == 0x000000, "Member 'KillerAudioHandlerComponent_ChaseTriggerKillerReactionSpecificSurvivorSFX::Camper' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.HitImpactOnSurvivorSFX
// 0x0010 (0x0010 - 0x0000)
struct KillerAudioHandlerComponent_HitImpactOnSurvivorSFX final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWeaponHit;                                       // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_HitImpactOnSurvivorSFX");
static_assert(sizeof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX) == 0x000010, "Wrong size on KillerAudioHandlerComponent_HitImpactOnSurvivorSFX");
static_assert(offsetof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX, Camper) == 0x000000, "Member 'KillerAudioHandlerComponent_HitImpactOnSurvivorSFX::Camper' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX, AttackType) == 0x000008, "Member 'KillerAudioHandlerComponent_HitImpactOnSurvivorSFX::AttackType' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_HitImpactOnSurvivorSFX, IsWeaponHit) == 0x000009, "Member 'KillerAudioHandlerComponent_HitImpactOnSurvivorSFX::IsWeaponHit' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.OnChaseStart
// 0x0008 (0x0008 - 0x0000)
struct KillerAudioHandlerComponent_OnChaseStart final
{
public:
	class ADBDPlayer*                             ChasedSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAudioHandlerComponent_OnChaseStart) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_OnChaseStart");
static_assert(sizeof(KillerAudioHandlerComponent_OnChaseStart) == 0x000008, "Wrong size on KillerAudioHandlerComponent_OnChaseStart");
static_assert(offsetof(KillerAudioHandlerComponent_OnChaseStart, ChasedSurvivor) == 0x000000, "Member 'KillerAudioHandlerComponent_OnChaseStart::ChasedSurvivor' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.TriggerKillerReactionSpecificSurvivorSFX
// 0x0008 (0x0008 - 0x0000)
struct KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX final
{
public:
	class ADBDPlayer*                             Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX");
static_assert(sizeof(KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX) == 0x000008, "Wrong size on KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX, Camper) == 0x000000, "Member 'KillerAudioHandlerComponent_TriggerKillerReactionSpecificSurvivorSFX::Camper' has a wrong offset!");

// Function DeadByDaylight.KillerAudioHandlerComponent.TriggerSurvivorDamageHitAudioSFX
// 0x0010 (0x0010 - 0x0000)
struct KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX final
{
public:
	class ACamperPlayer*                          Camper;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttackType                                   AttackType;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CausedKO;                                          // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWeaponHit;                                       // 0x000A(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLightHit;                                        // 0x000B(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX) == 0x000008, "Wrong alignment on KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX");
static_assert(sizeof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX) == 0x000010, "Wrong size on KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, Camper) == 0x000000, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::Camper' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, AttackType) == 0x000008, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::AttackType' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, CausedKO) == 0x000009, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::CausedKO' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, IsWeaponHit) == 0x00000A, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::IsWeaponHit' has a wrong offset!");
static_assert(offsetof(KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX, IsLightHit) == 0x00000B, "Member 'KillerAudioHandlerComponent_TriggerSurvivorDamageHitAudioSFX::IsLightHit' has a wrong offset!");

// Function DeadByDaylight.KillerIntroComponent.KillerCameraPanInUpdateNative
// 0x0004 (0x0004 - 0x0000)
struct KillerIntroComponent_KillerCameraPanInUpdateNative final
{
public:
	float                                         KillerIntroCompletedPercent;                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerIntroComponent_KillerCameraPanInUpdateNative) == 0x000004, "Wrong alignment on KillerIntroComponent_KillerCameraPanInUpdateNative");
static_assert(sizeof(KillerIntroComponent_KillerCameraPanInUpdateNative) == 0x000004, "Wrong size on KillerIntroComponent_KillerCameraPanInUpdateNative");
static_assert(offsetof(KillerIntroComponent_KillerCameraPanInUpdateNative, KillerIntroCompletedPercent) == 0x000000, "Member 'KillerIntroComponent_KillerCameraPanInUpdateNative::KillerIntroCompletedPercent' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.Authority_SetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_Authority_SetMaxTokenCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_Authority_SetMaxTokenCount) == 0x000004, "Wrong alignment on TokenCounter_Authority_SetMaxTokenCount");
static_assert(sizeof(TokenCounter_Authority_SetMaxTokenCount) == 0x000004, "Wrong size on TokenCounter_Authority_SetMaxTokenCount");
static_assert(offsetof(TokenCounter_Authority_SetMaxTokenCount, Value) == 0x000000, "Member 'TokenCounter_Authority_SetMaxTokenCount::Value' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.Authority_SetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_Authority_SetTokenCount final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_Authority_SetTokenCount) == 0x000004, "Wrong alignment on TokenCounter_Authority_SetTokenCount");
static_assert(sizeof(TokenCounter_Authority_SetTokenCount) == 0x000004, "Wrong size on TokenCounter_Authority_SetTokenCount");
static_assert(offsetof(TokenCounter_Authority_SetTokenCount, Value) == 0x000000, "Member 'TokenCounter_Authority_SetTokenCount::Value' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.OnRep_TokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_OnRep_TokenCount final
{
public:
	int32                                         OldCount;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_OnRep_TokenCount) == 0x000004, "Wrong alignment on TokenCounter_OnRep_TokenCount");
static_assert(sizeof(TokenCounter_OnRep_TokenCount) == 0x000004, "Wrong size on TokenCounter_OnRep_TokenCount");
static_assert(offsetof(TokenCounter_OnRep_TokenCount, OldCount) == 0x000000, "Member 'TokenCounter_OnRep_TokenCount::OldCount' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.GetMaxTokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_GetMaxTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_GetMaxTokenCount) == 0x000004, "Wrong alignment on TokenCounter_GetMaxTokenCount");
static_assert(sizeof(TokenCounter_GetMaxTokenCount) == 0x000004, "Wrong size on TokenCounter_GetMaxTokenCount");
static_assert(offsetof(TokenCounter_GetMaxTokenCount, ReturnValue) == 0x000000, "Member 'TokenCounter_GetMaxTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TokenCounter.GetTokenCount
// 0x0004 (0x0004 - 0x0000)
struct TokenCounter_GetTokenCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TokenCounter_GetTokenCount) == 0x000004, "Wrong alignment on TokenCounter_GetTokenCount");
static_assert(sizeof(TokenCounter_GetTokenCount) == 0x000004, "Wrong size on TokenCounter_GetTokenCount");
static_assert(offsetof(TokenCounter_GetTokenCount, ReturnValue) == 0x000000, "Member 'TokenCounter_GetTokenCount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.KillerProjectileDodgeComponent.OnKillerProjectileFinished
// 0x0008 (0x0008 - 0x0000)
struct KillerProjectileDodgeComponent_OnKillerProjectileFinished final
{
public:
	class AActor*                                 SurvivorHit;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerProjectileDodgeComponent_OnKillerProjectileFinished) == 0x000008, "Wrong alignment on KillerProjectileDodgeComponent_OnKillerProjectileFinished");
static_assert(sizeof(KillerProjectileDodgeComponent_OnKillerProjectileFinished) == 0x000008, "Wrong size on KillerProjectileDodgeComponent_OnKillerProjectileFinished");
static_assert(offsetof(KillerProjectileDodgeComponent_OnKillerProjectileFinished, SurvivorHit) == 0x000000, "Member 'KillerProjectileDodgeComponent_OnKillerProjectileFinished::SurvivorHit' has a wrong offset!");

// Function DeadByDaylight.KillerSoundCuesComponent.StartTrackingActor
// 0x0018 (0x0018 - 0x0000)
struct KillerSoundCuesComponent_StartTrackingActor final
{
public:
	class AActor*                                 ActorToStartTracking;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DistanceDataID;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillerSoundCuesComponent_StartTrackingActor) == 0x000008, "Wrong alignment on KillerSoundCuesComponent_StartTrackingActor");
static_assert(sizeof(KillerSoundCuesComponent_StartTrackingActor) == 0x000018, "Wrong size on KillerSoundCuesComponent_StartTrackingActor");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActor, ActorToStartTracking) == 0x000000, "Member 'KillerSoundCuesComponent_StartTrackingActor::ActorToStartTracking' has a wrong offset!");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActor, DistanceDataID) == 0x000008, "Member 'KillerSoundCuesComponent_StartTrackingActor::DistanceDataID' has a wrong offset!");

// Function DeadByDaylight.KillerSoundCuesComponent.StartTrackingActorWithLifetime
// 0x0018 (0x0018 - 0x0000)
struct KillerSoundCuesComponent_StartTrackingActorWithLifetime final
{
public:
	class AActor*                                 ActorToStartTracking;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DistanceDataID;                                    // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrackerLifetime;                                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerSoundCuesComponent_StartTrackingActorWithLifetime) == 0x000008, "Wrong alignment on KillerSoundCuesComponent_StartTrackingActorWithLifetime");
static_assert(sizeof(KillerSoundCuesComponent_StartTrackingActorWithLifetime) == 0x000018, "Wrong size on KillerSoundCuesComponent_StartTrackingActorWithLifetime");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActorWithLifetime, ActorToStartTracking) == 0x000000, "Member 'KillerSoundCuesComponent_StartTrackingActorWithLifetime::ActorToStartTracking' has a wrong offset!");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActorWithLifetime, DistanceDataID) == 0x000008, "Member 'KillerSoundCuesComponent_StartTrackingActorWithLifetime::DistanceDataID' has a wrong offset!");
static_assert(offsetof(KillerSoundCuesComponent_StartTrackingActorWithLifetime, TrackerLifetime) == 0x000014, "Member 'KillerSoundCuesComponent_StartTrackingActorWithLifetime::TrackerLifetime' has a wrong offset!");

// Function DeadByDaylight.KillerSoundCuesComponent.StopTrackingActor
// 0x0008 (0x0008 - 0x0000)
struct KillerSoundCuesComponent_StopTrackingActor final
{
public:
	class AActor*                                 ActorToStopTracking;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerSoundCuesComponent_StopTrackingActor) == 0x000008, "Wrong alignment on KillerSoundCuesComponent_StopTrackingActor");
static_assert(sizeof(KillerSoundCuesComponent_StopTrackingActor) == 0x000008, "Wrong size on KillerSoundCuesComponent_StopTrackingActor");
static_assert(offsetof(KillerSoundCuesComponent_StopTrackingActor, ActorToStopTracking) == 0x000000, "Member 'KillerSoundCuesComponent_StopTrackingActor::ActorToStopTracking' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.ChangeLanternState
// 0x0001 (0x0001 - 0x0000)
struct LanternInteractable_ChangeLanternState final
{
public:
	ELanternState                                 NewLanternState;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_ChangeLanternState) == 0x000001, "Wrong alignment on LanternInteractable_ChangeLanternState");
static_assert(sizeof(LanternInteractable_ChangeLanternState) == 0x000001, "Wrong size on LanternInteractable_ChangeLanternState");
static_assert(offsetof(LanternInteractable_ChangeLanternState, NewLanternState) == 0x000000, "Member 'LanternInteractable_ChangeLanternState::NewLanternState' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.CollectLight
// 0x0008 (0x0008 - 0x0000)
struct LanternInteractable_CollectLight final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_CollectLight) == 0x000008, "Wrong alignment on LanternInteractable_CollectLight");
static_assert(sizeof(LanternInteractable_CollectLight) == 0x000008, "Wrong size on LanternInteractable_CollectLight");
static_assert(offsetof(LanternInteractable_CollectLight, Player) == 0x000000, "Member 'LanternInteractable_CollectLight::Player' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.OnCamperLeavingHook
// 0x0040 (0x0040 - 0x0000)
struct LanternInteractable_OnCamperLeavingHook final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_OnCamperLeavingHook) == 0x000008, "Wrong alignment on LanternInteractable_OnCamperLeavingHook");
static_assert(sizeof(LanternInteractable_OnCamperLeavingHook) == 0x000040, "Wrong size on LanternInteractable_OnCamperLeavingHook");
static_assert(offsetof(LanternInteractable_OnCamperLeavingHook, GameEventType) == 0x000000, "Member 'LanternInteractable_OnCamperLeavingHook::GameEventType' has a wrong offset!");
static_assert(offsetof(LanternInteractable_OnCamperLeavingHook, GameEventData) == 0x000010, "Member 'LanternInteractable_OnCamperLeavingHook::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.OnCamperWasHooked
// 0x0040 (0x0040 - 0x0000)
struct LanternInteractable_OnCamperWasHooked final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_OnCamperWasHooked) == 0x000008, "Wrong alignment on LanternInteractable_OnCamperWasHooked");
static_assert(sizeof(LanternInteractable_OnCamperWasHooked) == 0x000040, "Wrong size on LanternInteractable_OnCamperWasHooked");
static_assert(offsetof(LanternInteractable_OnCamperWasHooked, GameEventType) == 0x000000, "Member 'LanternInteractable_OnCamperWasHooked::GameEventType' has a wrong offset!");
static_assert(offsetof(LanternInteractable_OnCamperWasHooked, GameEventData) == 0x000010, "Member 'LanternInteractable_OnCamperWasHooked::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.OnSlasherDestroyedLantern
// 0x0040 (0x0040 - 0x0000)
struct LanternInteractable_OnSlasherDestroyedLantern final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_OnSlasherDestroyedLantern) == 0x000008, "Wrong alignment on LanternInteractable_OnSlasherDestroyedLantern");
static_assert(sizeof(LanternInteractable_OnSlasherDestroyedLantern) == 0x000040, "Wrong size on LanternInteractable_OnSlasherDestroyedLantern");
static_assert(offsetof(LanternInteractable_OnSlasherDestroyedLantern, GameEventType) == 0x000000, "Member 'LanternInteractable_OnSlasherDestroyedLantern::GameEventType' has a wrong offset!");
static_assert(offsetof(LanternInteractable_OnSlasherDestroyedLantern, GameEventData) == 0x000010, "Member 'LanternInteractable_OnSlasherDestroyedLantern::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.SlasherDestroyLantern
// 0x0008 (0x0008 - 0x0000)
struct LanternInteractable_SlasherDestroyLantern final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_SlasherDestroyLantern) == 0x000008, "Wrong alignment on LanternInteractable_SlasherDestroyLantern");
static_assert(sizeof(LanternInteractable_SlasherDestroyLantern) == 0x000008, "Wrong size on LanternInteractable_SlasherDestroyLantern");
static_assert(offsetof(LanternInteractable_SlasherDestroyLantern, Player) == 0x000000, "Member 'LanternInteractable_SlasherDestroyLantern::Player' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.CanBeCollected
// 0x0001 (0x0001 - 0x0000)
struct LanternInteractable_CanBeCollected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_CanBeCollected) == 0x000001, "Wrong alignment on LanternInteractable_CanBeCollected");
static_assert(sizeof(LanternInteractable_CanBeCollected) == 0x000001, "Wrong size on LanternInteractable_CanBeCollected");
static_assert(offsetof(LanternInteractable_CanBeCollected, ReturnValue) == 0x000000, "Member 'LanternInteractable_CanBeCollected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.CanBeDestroyed
// 0x0001 (0x0001 - 0x0000)
struct LanternInteractable_CanBeDestroyed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_CanBeDestroyed) == 0x000001, "Wrong alignment on LanternInteractable_CanBeDestroyed");
static_assert(sizeof(LanternInteractable_CanBeDestroyed) == 0x000001, "Wrong size on LanternInteractable_CanBeDestroyed");
static_assert(offsetof(LanternInteractable_CanBeDestroyed, ReturnValue) == 0x000000, "Member 'LanternInteractable_CanBeDestroyed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LanternInteractable.GetLanternState
// 0x0001 (0x0001 - 0x0000)
struct LanternInteractable_GetLanternState final
{
public:
	ELanternState                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LanternInteractable_GetLanternState) == 0x000001, "Wrong alignment on LanternInteractable_GetLanternState");
static_assert(sizeof(LanternInteractable_GetLanternState) == 0x000001, "Wrong size on LanternInteractable_GetLanternState");
static_assert(offsetof(LanternInteractable_GetLanternState, ReturnValue) == 0x000000, "Member 'LanternInteractable_GetLanternState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WorldRunawayMeshComponent.SetShouldRunAway
// 0x0001 (0x0001 - 0x0000)
struct WorldRunawayMeshComponent_SetShouldRunAway final
{
public:
	bool                                          Should;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldRunawayMeshComponent_SetShouldRunAway) == 0x000001, "Wrong alignment on WorldRunawayMeshComponent_SetShouldRunAway");
static_assert(sizeof(WorldRunawayMeshComponent_SetShouldRunAway) == 0x000001, "Wrong size on WorldRunawayMeshComponent_SetShouldRunAway");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAway, Should) == 0x000000, "Member 'WorldRunawayMeshComponent_SetShouldRunAway::Should' has a wrong offset!");

// Function DeadByDaylight.WorldRunawayMeshComponent.SetShouldRunAwayWithDelay
// 0x0008 (0x0008 - 0x0000)
struct WorldRunawayMeshComponent_SetShouldRunAwayWithDelay final
{
public:
	bool                                          Should;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Delay;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldRunawayMeshComponent_SetShouldRunAwayWithDelay) == 0x000004, "Wrong alignment on WorldRunawayMeshComponent_SetShouldRunAwayWithDelay");
static_assert(sizeof(WorldRunawayMeshComponent_SetShouldRunAwayWithDelay) == 0x000008, "Wrong size on WorldRunawayMeshComponent_SetShouldRunAwayWithDelay");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAwayWithDelay, Should) == 0x000000, "Member 'WorldRunawayMeshComponent_SetShouldRunAwayWithDelay::Should' has a wrong offset!");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAwayWithDelay, Delay) == 0x000004, "Member 'WorldRunawayMeshComponent_SetShouldRunAwayWithDelay::Delay' has a wrong offset!");

// Function DeadByDaylight.WorldRunawayMeshComponent.SetShouldRunAwayWithRandomDelay
// 0x0008 (0x0008 - 0x0000)
struct WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay final
{
public:
	bool                                          Should;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayRange;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay) == 0x000004, "Wrong alignment on WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay");
static_assert(sizeof(WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay) == 0x000008, "Wrong size on WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay, Should) == 0x000000, "Member 'WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay::Should' has a wrong offset!");
static_assert(offsetof(WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay, DelayRange) == 0x000004, "Member 'WorldRunawayMeshComponent_SetShouldRunAwayWithRandomDelay::DelayRange' has a wrong offset!");

// Function DeadByDaylight.WorldRunawayMeshComponent.GetShouldRunAway
// 0x0001 (0x0001 - 0x0000)
struct WorldRunawayMeshComponent_GetShouldRunAway final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WorldRunawayMeshComponent_GetShouldRunAway) == 0x000001, "Wrong alignment on WorldRunawayMeshComponent_GetShouldRunAway");
static_assert(sizeof(WorldRunawayMeshComponent_GetShouldRunAway) == 0x000001, "Wrong size on WorldRunawayMeshComponent_GetShouldRunAway");
static_assert(offsetof(WorldRunawayMeshComponent_GetShouldRunAway, ReturnValue) == 0x000000, "Member 'WorldRunawayMeshComponent_GetShouldRunAway::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LevelParadise.ParadiseEntered
// 0x0058 (0x0058 - 0x0000)
struct LevelParadise_ParadiseEntered final
{
public:
	struct FParadiseData                          PlayerData;                                        // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LevelParadise_ParadiseEntered) == 0x000008, "Wrong alignment on LevelParadise_ParadiseEntered");
static_assert(sizeof(LevelParadise_ParadiseEntered) == 0x000058, "Wrong size on LevelParadise_ParadiseEntered");
static_assert(offsetof(LevelParadise_ParadiseEntered, PlayerData) == 0x000000, "Member 'LevelParadise_ParadiseEntered::PlayerData' has a wrong offset!");

// Function DeadByDaylight.LightFollower.AddFollower
// 0x0008 (0x0008 - 0x0000)
struct LightFollower_AddFollower final
{
public:
	class ULightComponent*                        Follower;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightFollower_AddFollower) == 0x000008, "Wrong alignment on LightFollower_AddFollower");
static_assert(sizeof(LightFollower_AddFollower) == 0x000008, "Wrong size on LightFollower_AddFollower");
static_assert(offsetof(LightFollower_AddFollower, Follower) == 0x000000, "Member 'LightFollower_AddFollower::Follower' has a wrong offset!");

// Function DeadByDaylight.LightFollower.SetLeader
// 0x0010 (0x0010 - 0x0000)
struct LightFollower_SetLeader final
{
public:
	class ULightComponent*                        Leader;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxIntensity;                                      // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightFollower_SetLeader) == 0x000008, "Wrong alignment on LightFollower_SetLeader");
static_assert(sizeof(LightFollower_SetLeader) == 0x000010, "Wrong size on LightFollower_SetLeader");
static_assert(offsetof(LightFollower_SetLeader, Leader) == 0x000000, "Member 'LightFollower_SetLeader::Leader' has a wrong offset!");
static_assert(offsetof(LightFollower_SetLeader, MaxIntensity) == 0x000008, "Member 'LightFollower_SetLeader::MaxIntensity' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.DBD_ModifyExposure
// 0x0004 (0x0004 - 0x0000)
struct LightingHelper_DBD_ModifyExposure final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_DBD_ModifyExposure) == 0x000004, "Wrong alignment on LightingHelper_DBD_ModifyExposure");
static_assert(sizeof(LightingHelper_DBD_ModifyExposure) == 0x000004, "Wrong size on LightingHelper_DBD_ModifyExposure");
static_assert(offsetof(LightingHelper_DBD_ModifyExposure, Value) == 0x000000, "Member 'LightingHelper_DBD_ModifyExposure::Value' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.GetASMController
// 0x0008 (0x0008 - 0x0000)
struct LightingHelper_GetASMController final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_GetASMController) == 0x000008, "Wrong alignment on LightingHelper_GetASMController");
static_assert(sizeof(LightingHelper_GetASMController) == 0x000008, "Wrong size on LightingHelper_GetASMController");
static_assert(offsetof(LightingHelper_GetASMController, ReturnValue) == 0x000000, "Member 'LightingHelper_GetASMController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.GetInitialComponentState
// 0x0018 (0x0018 - 0x0000)
struct LightingHelper_GetInitialComponentState final
{
public:
	class FName                                   ComponentName;                                     // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UActorComponent*                        ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_GetInitialComponentState) == 0x000008, "Wrong alignment on LightingHelper_GetInitialComponentState");
static_assert(sizeof(LightingHelper_GetInitialComponentState) == 0x000018, "Wrong size on LightingHelper_GetInitialComponentState");
static_assert(offsetof(LightingHelper_GetInitialComponentState, ComponentName) == 0x000000, "Member 'LightingHelper_GetInitialComponentState::ComponentName' has a wrong offset!");
static_assert(offsetof(LightingHelper_GetInitialComponentState, ReturnValue) == 0x000010, "Member 'LightingHelper_GetInitialComponentState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.GetSourceLevelLightingClass
// 0x0008 (0x0008 - 0x0000)
struct LightingHelper_GetSourceLevelLightingClass final
{
public:
	class UClass*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_GetSourceLevelLightingClass) == 0x000008, "Wrong alignment on LightingHelper_GetSourceLevelLightingClass");
static_assert(sizeof(LightingHelper_GetSourceLevelLightingClass) == 0x000008, "Wrong size on LightingHelper_GetSourceLevelLightingClass");
static_assert(offsetof(LightingHelper_GetSourceLevelLightingClass, ReturnValue) == 0x000000, "Member 'LightingHelper_GetSourceLevelLightingClass::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.GetTextureCube
// 0x0018 (0x0018 - 0x0000)
struct LightingHelper_GetTextureCube final
{
public:
	class FName                                   MapTheme;                                          // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_GetTextureCube) == 0x000008, "Wrong alignment on LightingHelper_GetTextureCube");
static_assert(sizeof(LightingHelper_GetTextureCube) == 0x000018, "Wrong size on LightingHelper_GetTextureCube");
static_assert(offsetof(LightingHelper_GetTextureCube, MapTheme) == 0x000000, "Member 'LightingHelper_GetTextureCube::MapTheme' has a wrong offset!");
static_assert(offsetof(LightingHelper_GetTextureCube, ReturnValue) == 0x000010, "Member 'LightingHelper_GetTextureCube::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LightingHelper.ToggleLightingChange
// 0x0010 (0x0010 - 0x0000)
struct LightingHelper_ToggleLightingChange final
{
public:
	bool                                          bActivateLightingChange;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ThemeName;                                         // 0x0004(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingHelper_ToggleLightingChange) == 0x000004, "Wrong alignment on LightingHelper_ToggleLightingChange");
static_assert(sizeof(LightingHelper_ToggleLightingChange) == 0x000010, "Wrong size on LightingHelper_ToggleLightingChange");
static_assert(offsetof(LightingHelper_ToggleLightingChange, bActivateLightingChange) == 0x000000, "Member 'LightingHelper_ToggleLightingChange::bActivateLightingChange' has a wrong offset!");
static_assert(offsetof(LightingHelper_ToggleLightingChange, ThemeName) == 0x000004, "Member 'LightingHelper_ToggleLightingChange::ThemeName' has a wrong offset!");

// DelegateFunction DeadByDaylight.TutorialGameMode.OnCanStartAtlantaTutorialChange__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameMode_OnCanStartAtlantaTutorialChange__DelegateSignature final
{
public:
	bool                                          CanStartTutorial;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_OnCanStartAtlantaTutorialChange__DelegateSignature) == 0x000001, "Wrong alignment on TutorialGameMode_OnCanStartAtlantaTutorialChange__DelegateSignature");
static_assert(sizeof(TutorialGameMode_OnCanStartAtlantaTutorialChange__DelegateSignature) == 0x000001, "Wrong size on TutorialGameMode_OnCanStartAtlantaTutorialChange__DelegateSignature");
static_assert(offsetof(TutorialGameMode_OnCanStartAtlantaTutorialChange__DelegateSignature, CanStartTutorial) == 0x000000, "Member 'TutorialGameMode_OnCanStartAtlantaTutorialChange__DelegateSignature::CanStartTutorial' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.SetGameObjective
// 0x0008 (0x0008 - 0x0000)
struct TutorialGameMode_SetGameObjective final
{
public:
	TSubclassOf<class AGameObjective_ActivatedGenerators> GameObjectiveClass;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_SetGameObjective) == 0x000008, "Wrong alignment on TutorialGameMode_SetGameObjective");
static_assert(sizeof(TutorialGameMode_SetGameObjective) == 0x000008, "Wrong size on TutorialGameMode_SetGameObjective");
static_assert(offsetof(TutorialGameMode_SetGameObjective, GameObjectiveClass) == 0x000000, "Member 'TutorialGameMode_SetGameObjective::GameObjectiveClass' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.GetAtlantaTutorialPlayerHudController
// 0x0008 (0x0008 - 0x0000)
struct TutorialGameMode_GetAtlantaTutorialPlayerHudController final
{
public:
	class UAtlantaTutorialPlayerHudController*    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_GetAtlantaTutorialPlayerHudController) == 0x000008, "Wrong alignment on TutorialGameMode_GetAtlantaTutorialPlayerHudController");
static_assert(sizeof(TutorialGameMode_GetAtlantaTutorialPlayerHudController) == 0x000008, "Wrong size on TutorialGameMode_GetAtlantaTutorialPlayerHudController");
static_assert(offsetof(TutorialGameMode_GetAtlantaTutorialPlayerHudController, ReturnValue) == 0x000000, "Member 'TutorialGameMode_GetAtlantaTutorialPlayerHudController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.GetTutorialHighlightController
// 0x0008 (0x0008 - 0x0000)
struct TutorialGameMode_GetTutorialHighlightController final
{
public:
	class UTutorialHighlightController*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_GetTutorialHighlightController) == 0x000008, "Wrong alignment on TutorialGameMode_GetTutorialHighlightController");
static_assert(sizeof(TutorialGameMode_GetTutorialHighlightController) == 0x000008, "Wrong size on TutorialGameMode_GetTutorialHighlightController");
static_assert(offsetof(TutorialGameMode_GetTutorialHighlightController, ReturnValue) == 0x000000, "Member 'TutorialGameMode_GetTutorialHighlightController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.GetTutorialNotificationController
// 0x0008 (0x0008 - 0x0000)
struct TutorialGameMode_GetTutorialNotificationController final
{
public:
	class UTutorialNotificationController*        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_GetTutorialNotificationController) == 0x000008, "Wrong alignment on TutorialGameMode_GetTutorialNotificationController");
static_assert(sizeof(TutorialGameMode_GetTutorialNotificationController) == 0x000008, "Wrong size on TutorialGameMode_GetTutorialNotificationController");
static_assert(offsetof(TutorialGameMode_GetTutorialNotificationController, ReturnValue) == 0x000000, "Member 'TutorialGameMode_GetTutorialNotificationController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameMode.GetTutorialObjectiveController
// 0x0008 (0x0008 - 0x0000)
struct TutorialGameMode_GetTutorialObjectiveController final
{
public:
	class UTutorialObjectiveController*           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameMode_GetTutorialObjectiveController) == 0x000008, "Wrong alignment on TutorialGameMode_GetTutorialObjectiveController");
static_assert(sizeof(TutorialGameMode_GetTutorialObjectiveController) == 0x000008, "Wrong size on TutorialGameMode_GetTutorialObjectiveController");
static_assert(offsetof(TutorialGameMode_GetTutorialObjectiveController, ReturnValue) == 0x000000, "Member 'TutorialGameMode_GetTutorialObjectiveController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LightingInterpolator.LerpHeightFog
// 0x0020 (0x0020 - 0x0000)
struct LightingInterpolator_LerpHeightFog final
{
public:
	class UExponentialHeightFogComponent*         Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UExponentialHeightFogComponent*   A;                                                 // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class UExponentialHeightFogComponent*   B;                                                 // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdBeforeSwitchingtoB;                       // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightingInterpolator_LerpHeightFog) == 0x000008, "Wrong alignment on LightingInterpolator_LerpHeightFog");
static_assert(sizeof(LightingInterpolator_LerpHeightFog) == 0x000020, "Wrong size on LightingInterpolator_LerpHeightFog");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, Target) == 0x000000, "Member 'LightingInterpolator_LerpHeightFog::Target' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, A) == 0x000008, "Member 'LightingInterpolator_LerpHeightFog::A' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, B) == 0x000010, "Member 'LightingInterpolator_LerpHeightFog::B' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, Alpha) == 0x000018, "Member 'LightingInterpolator_LerpHeightFog::Alpha' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpHeightFog, ThresholdBeforeSwitchingtoB) == 0x00001C, "Member 'LightingInterpolator_LerpHeightFog::ThresholdBeforeSwitchingtoB' has a wrong offset!");

// Function DeadByDaylight.LightingInterpolator.LerpLight
// 0x0020 (0x0020 - 0x0000)
struct LightingInterpolator_LerpLight final
{
public:
	class ULightComponent*                        Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponent*                        A;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULightComponent*                        B;                                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingInterpolator_LerpLight) == 0x000008, "Wrong alignment on LightingInterpolator_LerpLight");
static_assert(sizeof(LightingInterpolator_LerpLight) == 0x000020, "Wrong size on LightingInterpolator_LerpLight");
static_assert(offsetof(LightingInterpolator_LerpLight, Target) == 0x000000, "Member 'LightingInterpolator_LerpLight::Target' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpLight, A) == 0x000008, "Member 'LightingInterpolator_LerpLight::A' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpLight, B) == 0x000010, "Member 'LightingInterpolator_LerpLight::B' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpLight, Alpha) == 0x000018, "Member 'LightingInterpolator_LerpLight::Alpha' has a wrong offset!");

// Function DeadByDaylight.LightingInterpolator.LerpSkylight
// 0x0020 (0x0020 - 0x0000)
struct LightingInterpolator_LerpSkylight final
{
public:
	class USkyLightComponent*                     Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     A;                                                 // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     B;                                                 // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightingInterpolator_LerpSkylight) == 0x000008, "Wrong alignment on LightingInterpolator_LerpSkylight");
static_assert(sizeof(LightingInterpolator_LerpSkylight) == 0x000020, "Wrong size on LightingInterpolator_LerpSkylight");
static_assert(offsetof(LightingInterpolator_LerpSkylight, Target) == 0x000000, "Member 'LightingInterpolator_LerpSkylight::Target' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpSkylight, A) == 0x000008, "Member 'LightingInterpolator_LerpSkylight::A' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpSkylight, B) == 0x000010, "Member 'LightingInterpolator_LerpSkylight::B' has a wrong offset!");
static_assert(offsetof(LightingInterpolator_LerpSkylight, Alpha) == 0x000018, "Member 'LightingInterpolator_LerpSkylight::Alpha' has a wrong offset!");

// Function DeadByDaylight.LimitAccumulationSpawnerStrategy.SetMaxOverlapping
// 0x0004 (0x0004 - 0x0000)
struct LimitAccumulationSpawnerStrategy_SetMaxOverlapping final
{
public:
	int32                                         MaxOverlapping;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimitAccumulationSpawnerStrategy_SetMaxOverlapping) == 0x000004, "Wrong alignment on LimitAccumulationSpawnerStrategy_SetMaxOverlapping");
static_assert(sizeof(LimitAccumulationSpawnerStrategy_SetMaxOverlapping) == 0x000004, "Wrong size on LimitAccumulationSpawnerStrategy_SetMaxOverlapping");
static_assert(offsetof(LimitAccumulationSpawnerStrategy_SetMaxOverlapping, MaxOverlapping) == 0x000000, "Member 'LimitAccumulationSpawnerStrategy_SetMaxOverlapping::MaxOverlapping' has a wrong offset!");

// Function DeadByDaylight.LimitAccumulationSpawnerStrategy.SetRecycleDistancePercentage
// 0x0004 (0x0004 - 0x0000)
struct LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage final
{
public:
	float                                         RecycleDistancePercentage;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage) == 0x000004, "Wrong alignment on LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage");
static_assert(sizeof(LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage) == 0x000004, "Wrong size on LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage");
static_assert(offsetof(LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage, RecycleDistancePercentage) == 0x000000, "Member 'LimitAccumulationSpawnerStrategy_SetRecycleDistancePercentage::RecycleDistancePercentage' has a wrong offset!");

// Function DeadByDaylight.LimitAccumulationSpawnerStrategy.SetRecycleThresholdPercentage
// 0x0004 (0x0004 - 0x0000)
struct LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage final
{
public:
	float                                         RecycleThresholdPercentage;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage) == 0x000004, "Wrong alignment on LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage");
static_assert(sizeof(LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage) == 0x000004, "Wrong size on LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage");
static_assert(offsetof(LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage, RecycleThresholdPercentage) == 0x000000, "Member 'LimitAccumulationSpawnerStrategy_SetRecycleThresholdPercentage::RecycleThresholdPercentage' has a wrong offset!");

// Function DeadByDaylight.UMGScoreAlertWidget.UpdateWidget
// 0x0038 (0x0038 - 0x0000)
struct UMGScoreAlertWidget_UpdateWidget final
{
public:
	EDBDScoreCategory                             ScoreType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DefaultScoreText;                                  // 0x0020(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGScoreAlertWidget_UpdateWidget) == 0x000008, "Wrong alignment on UMGScoreAlertWidget_UpdateWidget");
static_assert(sizeof(UMGScoreAlertWidget_UpdateWidget) == 0x000038, "Wrong size on UMGScoreAlertWidget_UpdateWidget");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, ScoreType) == 0x000000, "Member 'UMGScoreAlertWidget_UpdateWidget::ScoreType' has a wrong offset!");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, Title) == 0x000008, "Member 'UMGScoreAlertWidget_UpdateWidget::Title' has a wrong offset!");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, ScoreValue) == 0x000018, "Member 'UMGScoreAlertWidget_UpdateWidget::ScoreValue' has a wrong offset!");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, Progress) == 0x00001C, "Member 'UMGScoreAlertWidget_UpdateWidget::Progress' has a wrong offset!");
static_assert(offsetof(UMGScoreAlertWidget_UpdateWidget, DefaultScoreText) == 0x000020, "Member 'UMGScoreAlertWidget_UpdateWidget::DefaultScoreText' has a wrong offset!");

// Function DeadByDaylight.LobbyLevel.OnAnimationPreviewCompleted
// 0x0068 (0x0068 - 0x0000)
struct LobbyLevel_OnAnimationPreviewCompleted final
{
public:
	class UAnimationPreviewSubsystem*             Subsystem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationPreviewRequest               Request;                                           // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          CompletedSuccessfully;                             // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LobbyLevel_OnAnimationPreviewCompleted) == 0x000008, "Wrong alignment on LobbyLevel_OnAnimationPreviewCompleted");
static_assert(sizeof(LobbyLevel_OnAnimationPreviewCompleted) == 0x000068, "Wrong size on LobbyLevel_OnAnimationPreviewCompleted");
static_assert(offsetof(LobbyLevel_OnAnimationPreviewCompleted, Subsystem) == 0x000000, "Member 'LobbyLevel_OnAnimationPreviewCompleted::Subsystem' has a wrong offset!");
static_assert(offsetof(LobbyLevel_OnAnimationPreviewCompleted, Request) == 0x000008, "Member 'LobbyLevel_OnAnimationPreviewCompleted::Request' has a wrong offset!");
static_assert(offsetof(LobbyLevel_OnAnimationPreviewCompleted, CompletedSuccessfully) == 0x000060, "Member 'LobbyLevel_OnAnimationPreviewCompleted::CompletedSuccessfully' has a wrong offset!");

// Function DeadByDaylight.LobbyLevel.OnAnimationPreviewStarted
// 0x0060 (0x0060 - 0x0000)
struct LobbyLevel_OnAnimationPreviewStarted final
{
public:
	class UAnimationPreviewSubsystem*             Subsystem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAnimationPreviewRequest               Request;                                           // 0x0008(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyLevel_OnAnimationPreviewStarted) == 0x000008, "Wrong alignment on LobbyLevel_OnAnimationPreviewStarted");
static_assert(sizeof(LobbyLevel_OnAnimationPreviewStarted) == 0x000060, "Wrong size on LobbyLevel_OnAnimationPreviewStarted");
static_assert(offsetof(LobbyLevel_OnAnimationPreviewStarted, Subsystem) == 0x000000, "Member 'LobbyLevel_OnAnimationPreviewStarted::Subsystem' has a wrong offset!");
static_assert(offsetof(LobbyLevel_OnAnimationPreviewStarted, Request) == 0x000008, "Member 'LobbyLevel_OnAnimationPreviewStarted::Request' has a wrong offset!");

// Function DeadByDaylight.UMGHtmlRichText.SetHTMLText
// 0x0010 (0x0010 - 0x0000)
struct UMGHtmlRichText_SetHTMLText final
{
public:
	class FString                                 InText;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGHtmlRichText_SetHTMLText) == 0x000008, "Wrong alignment on UMGHtmlRichText_SetHTMLText");
static_assert(sizeof(UMGHtmlRichText_SetHTMLText) == 0x000010, "Wrong size on UMGHtmlRichText_SetHTMLText");
static_assert(offsetof(UMGHtmlRichText_SetHTMLText, InText) == 0x000000, "Member 'UMGHtmlRichText_SetHTMLText::InText' has a wrong offset!");

// Function DeadByDaylight.LocalPlayerUtilities.GetFirstLocalValidHumanPlayerState
// 0x0010 (0x0010 - 0x0000)
struct LocalPlayerUtilities_GetFirstLocalValidHumanPlayerState final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayerState*                        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LocalPlayerUtilities_GetFirstLocalValidHumanPlayerState) == 0x000008, "Wrong alignment on LocalPlayerUtilities_GetFirstLocalValidHumanPlayerState");
static_assert(sizeof(LocalPlayerUtilities_GetFirstLocalValidHumanPlayerState) == 0x000010, "Wrong size on LocalPlayerUtilities_GetFirstLocalValidHumanPlayerState");
static_assert(offsetof(LocalPlayerUtilities_GetFirstLocalValidHumanPlayerState, WorldContextObject) == 0x000000, "Member 'LocalPlayerUtilities_GetFirstLocalValidHumanPlayerState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LocalPlayerUtilities_GetFirstLocalValidHumanPlayerState, ReturnValue) == 0x000008, "Member 'LocalPlayerUtilities_GetFirstLocalValidHumanPlayerState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LockerOutlineUpdateStrategy.GetRedColor
// 0x0010 (0x0010 - 0x0000)
struct LockerOutlineUpdateStrategy_GetRedColor final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LockerOutlineUpdateStrategy_GetRedColor) == 0x000004, "Wrong alignment on LockerOutlineUpdateStrategy_GetRedColor");
static_assert(sizeof(LockerOutlineUpdateStrategy_GetRedColor) == 0x000010, "Wrong size on LockerOutlineUpdateStrategy_GetRedColor");
static_assert(offsetof(LockerOutlineUpdateStrategy_GetRedColor, ReturnValue) == 0x000000, "Member 'LockerOutlineUpdateStrategy_GetRedColor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LoudNoiseHUDIndicator.AddTrackedNoise
// 0x0020 (0x0020 - 0x0000)
struct LoudNoiseHUDIndicator_AddTrackedNoise final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoudNoiseHUDIndicator_AddTrackedNoise) == 0x000008, "Wrong alignment on LoudNoiseHUDIndicator_AddTrackedNoise");
static_assert(sizeof(LoudNoiseHUDIndicator_AddTrackedNoise) == 0x000020, "Wrong size on LoudNoiseHUDIndicator_AddTrackedNoise");
static_assert(offsetof(LoudNoiseHUDIndicator_AddTrackedNoise, Location) == 0x000000, "Member 'LoudNoiseHUDIndicator_AddTrackedNoise::Location' has a wrong offset!");
static_assert(offsetof(LoudNoiseHUDIndicator_AddTrackedNoise, Duration) == 0x000018, "Member 'LoudNoiseHUDIndicator_AddTrackedNoise::Duration' has a wrong offset!");

// Function DeadByDaylight.LoudNoiseNotifier.CanSeeLoudNoise
// 0x0028 (0x0028 - 0x0000)
struct LoudNoiseNotifier_CanSeeLoudNoise final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoudNoiseNotifier_CanSeeLoudNoise) == 0x000008, "Wrong alignment on LoudNoiseNotifier_CanSeeLoudNoise");
static_assert(sizeof(LoudNoiseNotifier_CanSeeLoudNoise) == 0x000028, "Wrong size on LoudNoiseNotifier_CanSeeLoudNoise");
static_assert(offsetof(LoudNoiseNotifier_CanSeeLoudNoise, WorldContextObject) == 0x000000, "Member 'LoudNoiseNotifier_CanSeeLoudNoise::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_CanSeeLoudNoise, Location) == 0x000008, "Member 'LoudNoiseNotifier_CanSeeLoudNoise::Location' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_CanSeeLoudNoise, ReturnValue) == 0x000020, "Member 'LoudNoiseNotifier_CanSeeLoudNoise::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.LoudNoiseNotifier.Fire
// 0x0040 (0x0040 - 0x0000)
struct LoudNoiseNotifier_Fire final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldTrack;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudibleRange;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             InstigatingPlayer;                                 // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsQuickAction;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeceivingNoise;                                  // 0x0039(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoudNoiseNotifier_Fire) == 0x000008, "Wrong alignment on LoudNoiseNotifier_Fire");
static_assert(sizeof(LoudNoiseNotifier_Fire) == 0x000040, "Wrong size on LoudNoiseNotifier_Fire");
static_assert(offsetof(LoudNoiseNotifier_Fire, WorldContextObject) == 0x000000, "Member 'LoudNoiseNotifier_Fire::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, Instigator) == 0x000008, "Member 'LoudNoiseNotifier_Fire::Instigator' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, Location) == 0x000010, "Member 'LoudNoiseNotifier_Fire::Location' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, ShouldTrack) == 0x000028, "Member 'LoudNoiseNotifier_Fire::ShouldTrack' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, AudibleRange) == 0x00002C, "Member 'LoudNoiseNotifier_Fire::AudibleRange' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, InstigatingPlayer) == 0x000030, "Member 'LoudNoiseNotifier_Fire::InstigatingPlayer' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, IsQuickAction) == 0x000038, "Member 'LoudNoiseNotifier_Fire::IsQuickAction' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_Fire, IsDeceivingNoise) == 0x000039, "Member 'LoudNoiseNotifier_Fire::IsDeceivingNoise' has a wrong offset!");

// Function DeadByDaylight.LoudNoiseNotifier.FireWithTimeBudgeter
// 0x0040 (0x0040 - 0x0000)
struct LoudNoiseNotifier_FireWithTimeBudgeter final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldTrack;                                       // 0x0028(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudibleRange;                                      // 0x002C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             InstigatingPlayer;                                 // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsQuickAction;                                     // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoudNoiseNotifier_FireWithTimeBudgeter) == 0x000008, "Wrong alignment on LoudNoiseNotifier_FireWithTimeBudgeter");
static_assert(sizeof(LoudNoiseNotifier_FireWithTimeBudgeter) == 0x000040, "Wrong size on LoudNoiseNotifier_FireWithTimeBudgeter");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, WorldContextObject) == 0x000000, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::WorldContextObject' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, Instigator) == 0x000008, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::Instigator' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, Location) == 0x000010, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::Location' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, ShouldTrack) == 0x000028, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::ShouldTrack' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, AudibleRange) == 0x00002C, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::AudibleRange' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, InstigatingPlayer) == 0x000030, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::InstigatingPlayer' has a wrong offset!");
static_assert(offsetof(LoudNoiseNotifier_FireWithTimeBudgeter, IsQuickAction) == 0x000038, "Member 'LoudNoiseNotifier_FireWithTimeBudgeter::IsQuickAction' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnCamperEscape
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_Authority_OnCamperEscape final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnCamperEscape) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnCamperEscape");
static_assert(sizeof(LunarEventComponent_Authority_OnCamperEscape) == 0x000040, "Wrong size on LunarEventComponent_Authority_OnCamperEscape");
static_assert(offsetof(LunarEventComponent_Authority_OnCamperEscape, GameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnCamperEscape::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnCamperEscape, GameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnCamperEscape::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnCamperLostLantern
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_Authority_OnCamperLostLantern final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnCamperLostLantern) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnCamperLostLantern");
static_assert(sizeof(LunarEventComponent_Authority_OnCamperLostLantern) == 0x000040, "Wrong size on LunarEventComponent_Authority_OnCamperLostLantern");
static_assert(offsetof(LunarEventComponent_Authority_OnCamperLostLantern, GameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnCamperLostLantern::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnCamperLostLantern, GameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnCamperLostLantern::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnDestroyCamperLightGameEvent
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_Authority_OnDestroyCamperLightGameEvent final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnDestroyCamperLightGameEvent) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnDestroyCamperLightGameEvent");
static_assert(sizeof(LunarEventComponent_Authority_OnDestroyCamperLightGameEvent) == 0x000040, "Wrong size on LunarEventComponent_Authority_OnDestroyCamperLightGameEvent");
static_assert(offsetof(LunarEventComponent_Authority_OnDestroyCamperLightGameEvent, GameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnDestroyCamperLightGameEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnDestroyCamperLightGameEvent, GameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnDestroyCamperLightGameEvent::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnFixGenerator
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_Authority_OnFixGenerator final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnFixGenerator) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnFixGenerator");
static_assert(sizeof(LunarEventComponent_Authority_OnFixGenerator) == 0x000040, "Wrong size on LunarEventComponent_Authority_OnFixGenerator");
static_assert(offsetof(LunarEventComponent_Authority_OnFixGenerator, GameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnFixGenerator::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnFixGenerator, GameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnFixGenerator::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnPickupLantern
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_Authority_OnPickupLantern final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnPickupLantern) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnPickupLantern");
static_assert(sizeof(LunarEventComponent_Authority_OnPickupLantern) == 0x000040, "Wrong size on LunarEventComponent_Authority_OnPickupLantern");
static_assert(offsetof(LunarEventComponent_Authority_OnPickupLantern, GameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnPickupLantern::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnPickupLantern, GameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnPickupLantern::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnPlayerLeaveGame
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_Authority_OnPlayerLeaveGame final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnPlayerLeaveGame) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnPlayerLeaveGame");
static_assert(sizeof(LunarEventComponent_Authority_OnPlayerLeaveGame) == 0x000040, "Wrong size on LunarEventComponent_Authority_OnPlayerLeaveGame");
static_assert(offsetof(LunarEventComponent_Authority_OnPlayerLeaveGame, GameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnPlayerLeaveGame::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnPlayerLeaveGame, GameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnPlayerLeaveGame::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Authority_OnSlasherDestroysLantern
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_Authority_OnSlasherDestroysLantern final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Authority_OnSlasherDestroysLantern) == 0x000008, "Wrong alignment on LunarEventComponent_Authority_OnSlasherDestroysLantern");
static_assert(sizeof(LunarEventComponent_Authority_OnSlasherDestroysLantern) == 0x000040, "Wrong size on LunarEventComponent_Authority_OnSlasherDestroysLantern");
static_assert(offsetof(LunarEventComponent_Authority_OnSlasherDestroysLantern, GameEventType) == 0x000000, "Member 'LunarEventComponent_Authority_OnSlasherDestroysLantern::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Authority_OnSlasherDestroysLantern, GameEventData) == 0x000010, "Member 'LunarEventComponent_Authority_OnSlasherDestroysLantern::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Local_OnCamperEscape
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_Local_OnCamperEscape final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Local_OnCamperEscape) == 0x000008, "Wrong alignment on LunarEventComponent_Local_OnCamperEscape");
static_assert(sizeof(LunarEventComponent_Local_OnCamperEscape) == 0x000040, "Wrong size on LunarEventComponent_Local_OnCamperEscape");
static_assert(offsetof(LunarEventComponent_Local_OnCamperEscape, GameEventType) == 0x000000, "Member 'LunarEventComponent_Local_OnCamperEscape::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Local_OnCamperEscape, GameEventData) == 0x000010, "Member 'LunarEventComponent_Local_OnCamperEscape::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Local_OnCamperLostLantern
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_Local_OnCamperLostLantern final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Local_OnCamperLostLantern) == 0x000008, "Wrong alignment on LunarEventComponent_Local_OnCamperLostLantern");
static_assert(sizeof(LunarEventComponent_Local_OnCamperLostLantern) == 0x000040, "Wrong size on LunarEventComponent_Local_OnCamperLostLantern");
static_assert(offsetof(LunarEventComponent_Local_OnCamperLostLantern, GameEventType) == 0x000000, "Member 'LunarEventComponent_Local_OnCamperLostLantern::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_Local_OnCamperLostLantern, GameEventData) == 0x000010, "Member 'LunarEventComponent_Local_OnCamperLostLantern::GameEventData' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.Multicast_ResetLanternLight
// 0x0008 (0x0008 - 0x0000)
struct LunarEventComponent_Multicast_ResetLanternLight final
{
public:
	class ALanternInteractable*                   LanternInteractable;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_Multicast_ResetLanternLight) == 0x000008, "Wrong alignment on LunarEventComponent_Multicast_ResetLanternLight");
static_assert(sizeof(LunarEventComponent_Multicast_ResetLanternLight) == 0x000008, "Wrong size on LunarEventComponent_Multicast_ResetLanternLight");
static_assert(offsetof(LunarEventComponent_Multicast_ResetLanternLight, LanternInteractable) == 0x000000, "Member 'LunarEventComponent_Multicast_ResetLanternLight::LanternInteractable' has a wrong offset!");

// Function DeadByDaylight.LunarEventComponent.OnFinishedPlaying
// 0x0040 (0x0040 - 0x0000)
struct LunarEventComponent_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LunarEventComponent_OnFinishedPlaying) == 0x000008, "Wrong alignment on LunarEventComponent_OnFinishedPlaying");
static_assert(sizeof(LunarEventComponent_OnFinishedPlaying) == 0x000040, "Wrong size on LunarEventComponent_OnFinishedPlaying");
static_assert(offsetof(LunarEventComponent_OnFinishedPlaying, GameEventType) == 0x000000, "Member 'LunarEventComponent_OnFinishedPlaying::GameEventType' has a wrong offset!");
static_assert(offsetof(LunarEventComponent_OnFinishedPlaying, GameEventData) == 0x000010, "Member 'LunarEventComponent_OnFinishedPlaying::GameEventData' has a wrong offset!");

// Function DeadByDaylight.MagicFountain.IsCorrupted
// 0x0001 (0x0001 - 0x0000)
struct MagicFountain_IsCorrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MagicFountain_IsCorrupted) == 0x000001, "Wrong alignment on MagicFountain_IsCorrupted");
static_assert(sizeof(MagicFountain_IsCorrupted) == 0x000001, "Wrong size on MagicFountain_IsCorrupted");
static_assert(offsetof(MagicFountain_IsCorrupted, ReturnValue) == 0x000000, "Member 'MagicFountain_IsCorrupted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorComponent.Multicast_SetDetectionEnabled
// 0x0001 (0x0001 - 0x0000)
struct MapActorComponent_Multicast_SetDetectionEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorComponent_Multicast_SetDetectionEnabled) == 0x000001, "Wrong alignment on MapActorComponent_Multicast_SetDetectionEnabled");
static_assert(sizeof(MapActorComponent_Multicast_SetDetectionEnabled) == 0x000001, "Wrong size on MapActorComponent_Multicast_SetDetectionEnabled");
static_assert(offsetof(MapActorComponent_Multicast_SetDetectionEnabled, Enabled) == 0x000000, "Member 'MapActorComponent_Multicast_SetDetectionEnabled::Enabled' has a wrong offset!");

// Function DeadByDaylight.MapActorComponent.GetDetectionEnabled
// 0x0001 (0x0001 - 0x0000)
struct MapActorComponent_GetDetectionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorComponent_GetDetectionEnabled) == 0x000001, "Wrong alignment on MapActorComponent_GetDetectionEnabled");
static_assert(sizeof(MapActorComponent_GetDetectionEnabled) == 0x000001, "Wrong size on MapActorComponent_GetDetectionEnabled");
static_assert(offsetof(MapActorComponent_GetDetectionEnabled, ReturnValue) == 0x000000, "Member 'MapActorComponent_GetDetectionEnabled::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorComponent.IsKnownBy
// 0x0010 (0x0010 - 0x0000)
struct MapActorComponent_IsKnownBy final
{
public:
	const class ADBDPlayer*                       Character;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MapActorComponent_IsKnownBy) == 0x000008, "Wrong alignment on MapActorComponent_IsKnownBy");
static_assert(sizeof(MapActorComponent_IsKnownBy) == 0x000010, "Wrong size on MapActorComponent_IsKnownBy");
static_assert(offsetof(MapActorComponent_IsKnownBy, Character) == 0x000000, "Member 'MapActorComponent_IsKnownBy::Character' has a wrong offset!");
static_assert(offsetof(MapActorComponent_IsKnownBy, ReturnValue) == 0x000008, "Member 'MapActorComponent_IsKnownBy::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorDB.CopyListMinusCategories
// 0x0030 (0x0030 - 0x0000)
struct MapActorDB_CopyListMinusCategories final
{
public:
	TArray<EMapActorCategory>                     Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EMapActorCategory>                     CategoriesToRemove;                                // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EMapActorCategory>                     ReturnValue;                                       // 0x0020(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDB_CopyListMinusCategories) == 0x000008, "Wrong alignment on MapActorDB_CopyListMinusCategories");
static_assert(sizeof(MapActorDB_CopyListMinusCategories) == 0x000030, "Wrong size on MapActorDB_CopyListMinusCategories");
static_assert(offsetof(MapActorDB_CopyListMinusCategories, Categories) == 0x000000, "Member 'MapActorDB_CopyListMinusCategories::Categories' has a wrong offset!");
static_assert(offsetof(MapActorDB_CopyListMinusCategories, CategoriesToRemove) == 0x000010, "Member 'MapActorDB_CopyListMinusCategories::CategoriesToRemove' has a wrong offset!");
static_assert(offsetof(MapActorDB_CopyListMinusCategories, ReturnValue) == 0x000020, "Member 'MapActorDB_CopyListMinusCategories::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorDB.GetRandom
// 0x0010 (0x0010 - 0x0000)
struct MapActorDB_GetRandom final
{
public:
	EMapActorCategory                             Category;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDB_GetRandom) == 0x000008, "Wrong alignment on MapActorDB_GetRandom");
static_assert(sizeof(MapActorDB_GetRandom) == 0x000010, "Wrong size on MapActorDB_GetRandom");
static_assert(offsetof(MapActorDB_GetRandom, Category) == 0x000000, "Member 'MapActorDB_GetRandom::Category' has a wrong offset!");
static_assert(offsetof(MapActorDB_GetRandom, ReturnValue) == 0x000008, "Member 'MapActorDB_GetRandom::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MapActorDB.GetUniqueRandom
// 0x0028 (0x0028 - 0x0000)
struct MapActorDB_GetUniqueRandom final
{
public:
	TArray<EMapActorCategory>                     Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MapActorDB_GetUniqueRandom) == 0x000008, "Wrong alignment on MapActorDB_GetUniqueRandom");
static_assert(sizeof(MapActorDB_GetUniqueRandom) == 0x000028, "Wrong size on MapActorDB_GetUniqueRandom");
static_assert(offsetof(MapActorDB_GetUniqueRandom, Categories) == 0x000000, "Member 'MapActorDB_GetUniqueRandom::Categories' has a wrong offset!");
static_assert(offsetof(MapActorDB_GetUniqueRandom, Count) == 0x000010, "Member 'MapActorDB_GetUniqueRandom::Count' has a wrong offset!");
static_assert(offsetof(MapActorDB_GetUniqueRandom, ReturnValue) == 0x000018, "Member 'MapActorDB_GetUniqueRandom::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SectionnedChargeableComponent.GetSectionChargeRemaining
// 0x0004 (0x0004 - 0x0000)
struct SectionnedChargeableComponent_GetSectionChargeRemaining final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SectionnedChargeableComponent_GetSectionChargeRemaining) == 0x000004, "Wrong alignment on SectionnedChargeableComponent_GetSectionChargeRemaining");
static_assert(sizeof(SectionnedChargeableComponent_GetSectionChargeRemaining) == 0x000004, "Wrong size on SectionnedChargeableComponent_GetSectionChargeRemaining");
static_assert(offsetof(SectionnedChargeableComponent_GetSectionChargeRemaining, ReturnValue) == 0x000000, "Member 'SectionnedChargeableComponent_GetSectionChargeRemaining::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Authority_SetHookedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_Authority_SetHookedSurvivor final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Authority_SetHookedSurvivor) == 0x000008, "Wrong alignment on MeatHook_Authority_SetHookedSurvivor");
static_assert(sizeof(MeatHook_Authority_SetHookedSurvivor) == 0x000008, "Wrong size on MeatHook_Authority_SetHookedSurvivor");
static_assert(offsetof(MeatHook_Authority_SetHookedSurvivor, Survivor) == 0x000000, "Member 'MeatHook_Authority_SetHookedSurvivor::Survivor' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Authority_SetIsBrokenFromUnhook
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_Authority_SetIsBrokenFromUnhook final
{
public:
	bool                                          IsBrokenFromUnhook;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             HookBreaker;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideBaseHookRespawnDuration;                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_Authority_SetIsBrokenFromUnhook) == 0x000008, "Wrong alignment on MeatHook_Authority_SetIsBrokenFromUnhook");
static_assert(sizeof(MeatHook_Authority_SetIsBrokenFromUnhook) == 0x000018, "Wrong size on MeatHook_Authority_SetIsBrokenFromUnhook");
static_assert(offsetof(MeatHook_Authority_SetIsBrokenFromUnhook, IsBrokenFromUnhook) == 0x000000, "Member 'MeatHook_Authority_SetIsBrokenFromUnhook::IsBrokenFromUnhook' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsBrokenFromUnhook, HookBreaker) == 0x000008, "Member 'MeatHook_Authority_SetIsBrokenFromUnhook::HookBreaker' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsBrokenFromUnhook, OverrideBaseHookRespawnDuration) == 0x000010, "Member 'MeatHook_Authority_SetIsBrokenFromUnhook::OverrideBaseHookRespawnDuration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Authority_SetIsSabotaged
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_Authority_SetIsSabotaged final
{
public:
	bool                                          IsSabotaged;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Saboteur;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCamperHookRespawnDurationModifiers;             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideBaseHookRespawnDuration;                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Authority_SetIsSabotaged) == 0x000008, "Wrong alignment on MeatHook_Authority_SetIsSabotaged");
static_assert(sizeof(MeatHook_Authority_SetIsSabotaged) == 0x000018, "Wrong size on MeatHook_Authority_SetIsSabotaged");
static_assert(offsetof(MeatHook_Authority_SetIsSabotaged, IsSabotaged) == 0x000000, "Member 'MeatHook_Authority_SetIsSabotaged::IsSabotaged' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsSabotaged, Saboteur) == 0x000008, "Member 'MeatHook_Authority_SetIsSabotaged::Saboteur' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsSabotaged, UseCamperHookRespawnDurationModifiers) == 0x000010, "Member 'MeatHook_Authority_SetIsSabotaged::UseCamperHookRespawnDurationModifiers' has a wrong offset!");
static_assert(offsetof(MeatHook_Authority_SetIsSabotaged, OverrideBaseHookRespawnDuration) == 0x000014, "Member 'MeatHook_Authority_SetIsSabotaged::OverrideBaseHookRespawnDuration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Authority_SetIsSacrificed
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_Authority_SetIsSacrificed final
{
public:
	bool                                          IsSacrificed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Authority_SetIsSacrificed) == 0x000001, "Wrong alignment on MeatHook_Authority_SetIsSacrificed");
static_assert(sizeof(MeatHook_Authority_SetIsSacrificed) == 0x000001, "Wrong size on MeatHook_Authority_SetIsSacrificed");
static_assert(offsetof(MeatHook_Authority_SetIsSacrificed, IsSacrificed) == 0x000000, "Member 'MeatHook_Authority_SetIsSacrificed::IsSacrificed' has a wrong offset!");

// Function DeadByDaylight.MeatHook.BroadcastUnhook
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_BroadcastUnhook final
{
public:
	class ADBDPlayer*                             Rescuer;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_BroadcastUnhook) == 0x000008, "Wrong alignment on MeatHook_BroadcastUnhook");
static_assert(sizeof(MeatHook_BroadcastUnhook) == 0x000008, "Wrong size on MeatHook_BroadcastUnhook");
static_assert(offsetof(MeatHook_BroadcastUnhook, Rescuer) == 0x000000, "Member 'MeatHook_BroadcastUnhook::Rescuer' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Local_MoveSurvivorToHook
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_Local_MoveSurvivorToHook final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_Local_MoveSurvivorToHook) == 0x000008, "Wrong alignment on MeatHook_Local_MoveSurvivorToHook");
static_assert(sizeof(MeatHook_Local_MoveSurvivorToHook) == 0x000010, "Wrong size on MeatHook_Local_MoveSurvivorToHook");
static_assert(offsetof(MeatHook_Local_MoveSurvivorToHook, Survivor) == 0x000000, "Member 'MeatHook_Local_MoveSurvivorToHook::Survivor' has a wrong offset!");
static_assert(offsetof(MeatHook_Local_MoveSurvivorToHook, Duration) == 0x000008, "Member 'MeatHook_Local_MoveSurvivorToHook::Duration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_EscapeAttemptResult
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_Multicast_EscapeAttemptResult final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Result;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_Multicast_EscapeAttemptResult) == 0x000008, "Wrong alignment on MeatHook_Multicast_EscapeAttemptResult");
static_assert(sizeof(MeatHook_Multicast_EscapeAttemptResult) == 0x000010, "Wrong size on MeatHook_Multicast_EscapeAttemptResult");
static_assert(offsetof(MeatHook_Multicast_EscapeAttemptResult, Player) == 0x000000, "Member 'MeatHook_Multicast_EscapeAttemptResult::Player' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_EscapeAttemptResult, Result) == 0x000008, "Member 'MeatHook_Multicast_EscapeAttemptResult::Result' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_SetHookedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_Multicast_SetHookedSurvivor final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Multicast_SetHookedSurvivor) == 0x000008, "Wrong alignment on MeatHook_Multicast_SetHookedSurvivor");
static_assert(sizeof(MeatHook_Multicast_SetHookedSurvivor) == 0x000008, "Wrong size on MeatHook_Multicast_SetHookedSurvivor");
static_assert(offsetof(MeatHook_Multicast_SetHookedSurvivor, Survivor) == 0x000000, "Member 'MeatHook_Multicast_SetHookedSurvivor::Survivor' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_SetIsBrokenFromUnhook
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_Multicast_SetIsBrokenFromUnhook final
{
public:
	bool                                          SetIsBrokendFromUnhook;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             HookBreaker;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverrideBaseHookRespawnDuration;                   // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_Multicast_SetIsBrokenFromUnhook) == 0x000008, "Wrong alignment on MeatHook_Multicast_SetIsBrokenFromUnhook");
static_assert(sizeof(MeatHook_Multicast_SetIsBrokenFromUnhook) == 0x000018, "Wrong size on MeatHook_Multicast_SetIsBrokenFromUnhook");
static_assert(offsetof(MeatHook_Multicast_SetIsBrokenFromUnhook, SetIsBrokendFromUnhook) == 0x000000, "Member 'MeatHook_Multicast_SetIsBrokenFromUnhook::SetIsBrokendFromUnhook' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsBrokenFromUnhook, HookBreaker) == 0x000008, "Member 'MeatHook_Multicast_SetIsBrokenFromUnhook::HookBreaker' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsBrokenFromUnhook, OverrideBaseHookRespawnDuration) == 0x000010, "Member 'MeatHook_Multicast_SetIsBrokenFromUnhook::OverrideBaseHookRespawnDuration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_SetIsSabotaged
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_Multicast_SetIsSabotaged final
{
public:
	bool                                          SetIsSabotaged;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             HookBreaker;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseCamperHookRespawnDurationModifiers;             // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverrideBaseHookRespawnDuration;                   // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Multicast_SetIsSabotaged) == 0x000008, "Wrong alignment on MeatHook_Multicast_SetIsSabotaged");
static_assert(sizeof(MeatHook_Multicast_SetIsSabotaged) == 0x000018, "Wrong size on MeatHook_Multicast_SetIsSabotaged");
static_assert(offsetof(MeatHook_Multicast_SetIsSabotaged, SetIsSabotaged) == 0x000000, "Member 'MeatHook_Multicast_SetIsSabotaged::SetIsSabotaged' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsSabotaged, HookBreaker) == 0x000008, "Member 'MeatHook_Multicast_SetIsSabotaged::HookBreaker' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsSabotaged, UseCamperHookRespawnDurationModifiers) == 0x000010, "Member 'MeatHook_Multicast_SetIsSabotaged::UseCamperHookRespawnDurationModifiers' has a wrong offset!");
static_assert(offsetof(MeatHook_Multicast_SetIsSabotaged, OverrideBaseHookRespawnDuration) == 0x000014, "Member 'MeatHook_Multicast_SetIsSabotaged::OverrideBaseHookRespawnDuration' has a wrong offset!");

// Function DeadByDaylight.MeatHook.Multicast_SetIsSacrificed
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_Multicast_SetIsSacrificed final
{
public:
	bool                                          IsSacrificed;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_Multicast_SetIsSacrificed) == 0x000001, "Wrong alignment on MeatHook_Multicast_SetIsSacrificed");
static_assert(sizeof(MeatHook_Multicast_SetIsSacrificed) == 0x000001, "Wrong size on MeatHook_Multicast_SetIsSacrificed");
static_assert(offsetof(MeatHook_Multicast_SetIsSacrificed, IsSacrificed) == 0x000000, "Member 'MeatHook_Multicast_SetIsSacrificed::IsSacrificed' has a wrong offset!");

// Function DeadByDaylight.MeatHook.OnHookedSurvivorChanged
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_OnHookedSurvivorChanged final
{
public:
	class ACamperPlayer*                          before;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          After;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_OnHookedSurvivorChanged) == 0x000008, "Wrong alignment on MeatHook_OnHookedSurvivorChanged");
static_assert(sizeof(MeatHook_OnHookedSurvivorChanged) == 0x000010, "Wrong size on MeatHook_OnHookedSurvivorChanged");
static_assert(offsetof(MeatHook_OnHookedSurvivorChanged, before) == 0x000000, "Member 'MeatHook_OnHookedSurvivorChanged::before' has a wrong offset!");
static_assert(offsetof(MeatHook_OnHookedSurvivorChanged, After) == 0x000008, "Member 'MeatHook_OnHookedSurvivorChanged::After' has a wrong offset!");

// Function DeadByDaylight.MeatHook.OnStartPushingPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_OnStartPushingPlayer final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_OnStartPushingPlayer) == 0x000008, "Wrong alignment on MeatHook_OnStartPushingPlayer");
static_assert(sizeof(MeatHook_OnStartPushingPlayer) == 0x000008, "Wrong size on MeatHook_OnStartPushingPlayer");
static_assert(offsetof(MeatHook_OnStartPushingPlayer, Character) == 0x000000, "Member 'MeatHook_OnStartPushingPlayer::Character' has a wrong offset!");

// Function DeadByDaylight.MeatHook.OnStopPushingPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_OnStopPushingPlayer final
{
public:
	class ACharacter*                             Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_OnStopPushingPlayer) == 0x000008, "Wrong alignment on MeatHook_OnStopPushingPlayer");
static_assert(sizeof(MeatHook_OnStopPushingPlayer) == 0x000008, "Wrong size on MeatHook_OnStopPushingPlayer");
static_assert(offsetof(MeatHook_OnStopPushingPlayer, Character) == 0x000000, "Member 'MeatHook_OnStopPushingPlayer::Character' has a wrong offset!");

// Function DeadByDaylight.MeatHook.OnTickStruggle
// 0x0004 (0x0004 - 0x0000)
struct MeatHook_OnTickStruggle final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_OnTickStruggle) == 0x000004, "Wrong alignment on MeatHook_OnTickStruggle");
static_assert(sizeof(MeatHook_OnTickStruggle) == 0x000004, "Wrong size on MeatHook_OnTickStruggle");
static_assert(offsetof(MeatHook_OnTickStruggle, DeltaTime) == 0x000000, "Member 'MeatHook_OnTickStruggle::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.MeatHook.SetEntity
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_SetEntity final
{
public:
	class AEntity*                                Entity;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_SetEntity) == 0x000008, "Wrong alignment on MeatHook_SetEntity");
static_assert(sizeof(MeatHook_SetEntity) == 0x000008, "Wrong size on MeatHook_SetEntity");
static_assert(offsetof(MeatHook_SetEntity, Entity) == 0x000000, "Member 'MeatHook_SetEntity::Entity' has a wrong offset!");

// Function DeadByDaylight.MeatHook.SetInteractingPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_SetInteractingPlayer final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_SetInteractingPlayer) == 0x000008, "Wrong alignment on MeatHook_SetInteractingPlayer");
static_assert(sizeof(MeatHook_SetInteractingPlayer) == 0x000008, "Wrong size on MeatHook_SetInteractingPlayer");
static_assert(offsetof(MeatHook_SetInteractingPlayer, InteractingPlayer) == 0x000000, "Member 'MeatHook_SetInteractingPlayer::InteractingPlayer' has a wrong offset!");

// Function DeadByDaylight.MeatHook.SetIsBeingSabotaged
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_SetIsBeingSabotaged final
{
public:
	bool                                          IsBeingSabotaged;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_SetIsBeingSabotaged) == 0x000001, "Wrong alignment on MeatHook_SetIsBeingSabotaged");
static_assert(sizeof(MeatHook_SetIsBeingSabotaged) == 0x000001, "Wrong size on MeatHook_SetIsBeingSabotaged");
static_assert(offsetof(MeatHook_SetIsBeingSabotaged, IsBeingSabotaged) == 0x000000, "Member 'MeatHook_SetIsBeingSabotaged::IsBeingSabotaged' has a wrong offset!");

// Function DeadByDaylight.MeatHook.SetMapActor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_SetMapActor final
{
public:
	class UMapActorComponent*                     Value;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_SetMapActor) == 0x000008, "Wrong alignment on MeatHook_SetMapActor");
static_assert(sizeof(MeatHook_SetMapActor) == 0x000008, "Wrong size on MeatHook_SetMapActor");
static_assert(offsetof(MeatHook_SetMapActor, Value) == 0x000000, "Member 'MeatHook_SetMapActor::Value' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanBeSabotaged
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_CanBeSabotaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_CanBeSabotaged) == 0x000001, "Wrong alignment on MeatHook_CanBeSabotaged");
static_assert(sizeof(MeatHook_CanBeSabotaged) == 0x000001, "Wrong size on MeatHook_CanBeSabotaged");
static_assert(offsetof(MeatHook_CanBeSabotaged, ReturnValue) == 0x000000, "Member 'MeatHook_CanBeSabotaged::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanHookSurvivor
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_CanHookSurvivor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_CanHookSurvivor) == 0x000001, "Wrong alignment on MeatHook_CanHookSurvivor");
static_assert(sizeof(MeatHook_CanHookSurvivor) == 0x000001, "Wrong size on MeatHook_CanHookSurvivor");
static_assert(offsetof(MeatHook_CanHookSurvivor, ReturnValue) == 0x000000, "Member 'MeatHook_CanHookSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanSurvivorAttemptEscape
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_CanSurvivorAttemptEscape final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_CanSurvivorAttemptEscape) == 0x000008, "Wrong alignment on MeatHook_CanSurvivorAttemptEscape");
static_assert(sizeof(MeatHook_CanSurvivorAttemptEscape) == 0x000010, "Wrong size on MeatHook_CanSurvivorAttemptEscape");
static_assert(offsetof(MeatHook_CanSurvivorAttemptEscape, Survivor) == 0x000000, "Member 'MeatHook_CanSurvivorAttemptEscape::Survivor' has a wrong offset!");
static_assert(offsetof(MeatHook_CanSurvivorAttemptEscape, ReturnValue) == 0x000008, "Member 'MeatHook_CanSurvivorAttemptEscape::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanSurvivorStruggle
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_CanSurvivorStruggle final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_CanSurvivorStruggle) == 0x000008, "Wrong alignment on MeatHook_CanSurvivorStruggle");
static_assert(sizeof(MeatHook_CanSurvivorStruggle) == 0x000010, "Wrong size on MeatHook_CanSurvivorStruggle");
static_assert(offsetof(MeatHook_CanSurvivorStruggle, Survivor) == 0x000000, "Member 'MeatHook_CanSurvivorStruggle::Survivor' has a wrong offset!");
static_assert(offsetof(MeatHook_CanSurvivorStruggle, ReturnValue) == 0x000008, "Member 'MeatHook_CanSurvivorStruggle::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.CanUnhookSurvivor
// 0x0010 (0x0010 - 0x0000)
struct MeatHook_CanUnhookSurvivor final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MeatHook_CanUnhookSurvivor) == 0x000008, "Wrong alignment on MeatHook_CanUnhookSurvivor");
static_assert(sizeof(MeatHook_CanUnhookSurvivor) == 0x000010, "Wrong size on MeatHook_CanUnhookSurvivor");
static_assert(offsetof(MeatHook_CanUnhookSurvivor, Survivor) == 0x000000, "Member 'MeatHook_CanUnhookSurvivor::Survivor' has a wrong offset!");
static_assert(offsetof(MeatHook_CanUnhookSurvivor, ReturnValue) == 0x000008, "Member 'MeatHook_CanUnhookSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.DebugHookedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_DebugHookedSurvivor final
{
public:
	class ACamperPlayer*                          ExpectedSurvivor;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_DebugHookedSurvivor) == 0x000008, "Wrong alignment on MeatHook_DebugHookedSurvivor");
static_assert(sizeof(MeatHook_DebugHookedSurvivor) == 0x000008, "Wrong size on MeatHook_DebugHookedSurvivor");
static_assert(offsetof(MeatHook_DebugHookedSurvivor, ExpectedSurvivor) == 0x000000, "Member 'MeatHook_DebugHookedSurvivor::ExpectedSurvivor' has a wrong offset!");

// Function DeadByDaylight.MeatHook.FireHookSoundEvent
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_FireHookSoundEvent final
{
public:
	class FName                                   NoiseRangeTunable;                                 // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class ADBDPlayer*                       SoundInstigator;                                   // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_FireHookSoundEvent) == 0x000008, "Wrong alignment on MeatHook_FireHookSoundEvent");
static_assert(sizeof(MeatHook_FireHookSoundEvent) == 0x000018, "Wrong size on MeatHook_FireHookSoundEvent");
static_assert(offsetof(MeatHook_FireHookSoundEvent, NoiseRangeTunable) == 0x000000, "Member 'MeatHook_FireHookSoundEvent::NoiseRangeTunable' has a wrong offset!");
static_assert(offsetof(MeatHook_FireHookSoundEvent, SoundInstigator) == 0x000010, "Member 'MeatHook_FireHookSoundEvent::SoundInstigator' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetCamperHookedSnapTransform
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetCamperHookedSnapTransform final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetCamperHookedSnapTransform) == 0x000008, "Wrong alignment on MeatHook_GetCamperHookedSnapTransform");
static_assert(sizeof(MeatHook_GetCamperHookedSnapTransform) == 0x000008, "Wrong size on MeatHook_GetCamperHookedSnapTransform");
static_assert(offsetof(MeatHook_GetCamperHookedSnapTransform, ReturnValue) == 0x000000, "Member 'MeatHook_GetCamperHookedSnapTransform::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetCamperUnkookFocalPointTransform
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetCamperUnkookFocalPointTransform final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetCamperUnkookFocalPointTransform) == 0x000008, "Wrong alignment on MeatHook_GetCamperUnkookFocalPointTransform");
static_assert(sizeof(MeatHook_GetCamperUnkookFocalPointTransform) == 0x000008, "Wrong size on MeatHook_GetCamperUnkookFocalPointTransform");
static_assert(offsetof(MeatHook_GetCamperUnkookFocalPointTransform, ReturnValue) == 0x000000, "Member 'MeatHook_GetCamperUnkookFocalPointTransform::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetCharacterPusher
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetCharacterPusher final
{
public:
	class UCharacterPusherComponent*              ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetCharacterPusher) == 0x000008, "Wrong alignment on MeatHook_GetCharacterPusher");
static_assert(sizeof(MeatHook_GetCharacterPusher) == 0x000008, "Wrong size on MeatHook_GetCharacterPusher");
static_assert(offsetof(MeatHook_GetCharacterPusher, ReturnValue) == 0x000000, "Member 'MeatHook_GetCharacterPusher::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetEscapeHookInteraction
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetEscapeHookInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetEscapeHookInteraction) == 0x000008, "Wrong alignment on MeatHook_GetEscapeHookInteraction");
static_assert(sizeof(MeatHook_GetEscapeHookInteraction) == 0x000008, "Wrong size on MeatHook_GetEscapeHookInteraction");
static_assert(offsetof(MeatHook_GetEscapeHookInteraction, ReturnValue) == 0x000000, "Member 'MeatHook_GetEscapeHookInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetHookableComponentOfHookedActor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetHookableComponentOfHookedActor final
{
public:
	class UHookableComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetHookableComponentOfHookedActor) == 0x000008, "Wrong alignment on MeatHook_GetHookableComponentOfHookedActor");
static_assert(sizeof(MeatHook_GetHookableComponentOfHookedActor) == 0x000008, "Wrong size on MeatHook_GetHookableComponentOfHookedActor");
static_assert(offsetof(MeatHook_GetHookableComponentOfHookedActor, ReturnValue) == 0x000000, "Member 'MeatHook_GetHookableComponentOfHookedActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetHookedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetHookedSurvivor final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetHookedSurvivor) == 0x000008, "Wrong alignment on MeatHook_GetHookedSurvivor");
static_assert(sizeof(MeatHook_GetHookedSurvivor) == 0x000008, "Wrong size on MeatHook_GetHookedSurvivor");
static_assert(offsetof(MeatHook_GetHookedSurvivor, ReturnValue) == 0x000000, "Member 'MeatHook_GetHookedSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetHookPosition
// 0x0018 (0x0018 - 0x0000)
struct MeatHook_GetHookPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetHookPosition) == 0x000008, "Wrong alignment on MeatHook_GetHookPosition");
static_assert(sizeof(MeatHook_GetHookPosition) == 0x000018, "Wrong size on MeatHook_GetHookPosition");
static_assert(offsetof(MeatHook_GetHookPosition, ReturnValue) == 0x000000, "Member 'MeatHook_GetHookPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetInteractingPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetInteractingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetInteractingPlayer) == 0x000008, "Wrong alignment on MeatHook_GetInteractingPlayer");
static_assert(sizeof(MeatHook_GetInteractingPlayer) == 0x000008, "Wrong size on MeatHook_GetInteractingPlayer");
static_assert(offsetof(MeatHook_GetInteractingPlayer, ReturnValue) == 0x000000, "Member 'MeatHook_GetInteractingPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetInteractorPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetInteractorPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetInteractorPrimitiveComponent) == 0x000008, "Wrong alignment on MeatHook_GetInteractorPrimitiveComponent");
static_assert(sizeof(MeatHook_GetInteractorPrimitiveComponent) == 0x000008, "Wrong size on MeatHook_GetInteractorPrimitiveComponent");
static_assert(offsetof(MeatHook_GetInteractorPrimitiveComponent, ReturnValue) == 0x000000, "Member 'MeatHook_GetInteractorPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetInteractorZoneComponent
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetInteractorZoneComponent final
{
public:
	class UBoxComponent*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetInteractorZoneComponent) == 0x000008, "Wrong alignment on MeatHook_GetInteractorZoneComponent");
static_assert(sizeof(MeatHook_GetInteractorZoneComponent) == 0x000008, "Wrong size on MeatHook_GetInteractorZoneComponent");
static_assert(offsetof(MeatHook_GetInteractorZoneComponent, ReturnValue) == 0x000000, "Member 'MeatHook_GetInteractorZoneComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetIsBroken
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_GetIsBroken final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetIsBroken) == 0x000001, "Wrong alignment on MeatHook_GetIsBroken");
static_assert(sizeof(MeatHook_GetIsBroken) == 0x000001, "Wrong size on MeatHook_GetIsBroken");
static_assert(offsetof(MeatHook_GetIsBroken, ReturnValue) == 0x000000, "Member 'MeatHook_GetIsBroken::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetIsInBasement
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_GetIsInBasement final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetIsInBasement) == 0x000001, "Wrong alignment on MeatHook_GetIsInBasement");
static_assert(sizeof(MeatHook_GetIsInBasement) == 0x000001, "Wrong size on MeatHook_GetIsInBasement");
static_assert(offsetof(MeatHook_GetIsInBasement, ReturnValue) == 0x000000, "Member 'MeatHook_GetIsInBasement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetIsSabotaged
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_GetIsSabotaged final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetIsSabotaged) == 0x000001, "Wrong alignment on MeatHook_GetIsSabotaged");
static_assert(sizeof(MeatHook_GetIsSabotaged) == 0x000001, "Wrong size on MeatHook_GetIsSabotaged");
static_assert(offsetof(MeatHook_GetIsSabotaged, ReturnValue) == 0x000000, "Member 'MeatHook_GetIsSabotaged::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetIsSacrificed
// 0x0001 (0x0001 - 0x0000)
struct MeatHook_GetIsSacrificed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetIsSacrificed) == 0x000001, "Wrong alignment on MeatHook_GetIsSacrificed");
static_assert(sizeof(MeatHook_GetIsSacrificed) == 0x000001, "Wrong size on MeatHook_GetIsSacrificed");
static_assert(offsetof(MeatHook_GetIsSacrificed, ReturnValue) == 0x000000, "Member 'MeatHook_GetIsSacrificed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetMainInteractor
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetMainInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetMainInteractor) == 0x000008, "Wrong alignment on MeatHook_GetMainInteractor");
static_assert(sizeof(MeatHook_GetMainInteractor) == 0x000008, "Wrong size on MeatHook_GetMainInteractor");
static_assert(offsetof(MeatHook_GetMainInteractor, ReturnValue) == 0x000000, "Member 'MeatHook_GetMainInteractor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetMeatHookAkAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetMeatHookAkAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetMeatHookAkAudioComponent) == 0x000008, "Wrong alignment on MeatHook_GetMeatHookAkAudioComponent");
static_assert(sizeof(MeatHook_GetMeatHookAkAudioComponent) == 0x000008, "Wrong size on MeatHook_GetMeatHookAkAudioComponent");
static_assert(offsetof(MeatHook_GetMeatHookAkAudioComponent, ReturnValue) == 0x000000, "Member 'MeatHook_GetMeatHookAkAudioComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetMontagePlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetMontagePlayer final
{
public:
	class UMontagePlayer*                         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetMontagePlayer) == 0x000008, "Wrong alignment on MeatHook_GetMontagePlayer");
static_assert(sizeof(MeatHook_GetMontagePlayer) == 0x000008, "Wrong size on MeatHook_GetMontagePlayer");
static_assert(offsetof(MeatHook_GetMontagePlayer, ReturnValue) == 0x000000, "Member 'MeatHook_GetMontagePlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetSabotageHookRespawnDuration
// 0x0004 (0x0004 - 0x0000)
struct MeatHook_GetSabotageHookRespawnDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetSabotageHookRespawnDuration) == 0x000004, "Wrong alignment on MeatHook_GetSabotageHookRespawnDuration");
static_assert(sizeof(MeatHook_GetSabotageHookRespawnDuration) == 0x000004, "Wrong size on MeatHook_GetSabotageHookRespawnDuration");
static_assert(offsetof(MeatHook_GetSabotageHookRespawnDuration, ReturnValue) == 0x000000, "Member 'MeatHook_GetSabotageHookRespawnDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetSaboteurPlayer
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetSaboteurPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetSaboteurPlayer) == 0x000008, "Wrong alignment on MeatHook_GetSaboteurPlayer");
static_assert(sizeof(MeatHook_GetSaboteurPlayer) == 0x000008, "Wrong size on MeatHook_GetSaboteurPlayer");
static_assert(offsetof(MeatHook_GetSaboteurPlayer, ReturnValue) == 0x000000, "Member 'MeatHook_GetSaboteurPlayer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetStrugglePercent
// 0x0004 (0x0004 - 0x0000)
struct MeatHook_GetStrugglePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetStrugglePercent) == 0x000004, "Wrong alignment on MeatHook_GetStrugglePercent");
static_assert(sizeof(MeatHook_GetStrugglePercent) == 0x000004, "Wrong size on MeatHook_GetStrugglePercent");
static_assert(offsetof(MeatHook_GetStrugglePercent, ReturnValue) == 0x000000, "Member 'MeatHook_GetStrugglePercent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetStruggleThreshold
// 0x0004 (0x0004 - 0x0000)
struct MeatHook_GetStruggleThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetStruggleThreshold) == 0x000004, "Wrong alignment on MeatHook_GetStruggleThreshold");
static_assert(sizeof(MeatHook_GetStruggleThreshold) == 0x000004, "Wrong size on MeatHook_GetStruggleThreshold");
static_assert(offsetof(MeatHook_GetStruggleThreshold, ReturnValue) == 0x000000, "Member 'MeatHook_GetStruggleThreshold::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetUnhookInMontageDescriptor
// 0x0020 (0x0020 - 0x0000)
struct MeatHook_GetUnhookInMontageDescriptor final
{
public:
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetUnhookInMontageDescriptor) == 0x000008, "Wrong alignment on MeatHook_GetUnhookInMontageDescriptor");
static_assert(sizeof(MeatHook_GetUnhookInMontageDescriptor) == 0x000020, "Wrong size on MeatHook_GetUnhookInMontageDescriptor");
static_assert(offsetof(MeatHook_GetUnhookInMontageDescriptor, ReturnValue) == 0x000000, "Member 'MeatHook_GetUnhookInMontageDescriptor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetUnhookInteraction
// 0x0008 (0x0008 - 0x0000)
struct MeatHook_GetUnhookInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetUnhookInteraction) == 0x000008, "Wrong alignment on MeatHook_GetUnhookInteraction");
static_assert(sizeof(MeatHook_GetUnhookInteraction) == 0x000008, "Wrong size on MeatHook_GetUnhookInteraction");
static_assert(offsetof(MeatHook_GetUnhookInteraction, ReturnValue) == 0x000000, "Member 'MeatHook_GetUnhookInteraction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MeatHook.GetUnhookOutMontageDescriptor
// 0x0020 (0x0020 - 0x0000)
struct MeatHook_GetUnhookOutMontageDescriptor final
{
public:
	struct FAnimationMontageDescriptor            ReturnValue;                                       // 0x0000(0x0020)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHook_GetUnhookOutMontageDescriptor) == 0x000008, "Wrong alignment on MeatHook_GetUnhookOutMontageDescriptor");
static_assert(sizeof(MeatHook_GetUnhookOutMontageDescriptor) == 0x000020, "Wrong size on MeatHook_GetUnhookOutMontageDescriptor");
static_assert(offsetof(MeatHook_GetUnhookOutMontageDescriptor, ReturnValue) == 0x000000, "Member 'MeatHook_GetUnhookOutMontageDescriptor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraActor.CanTransition
// 0x0001 (0x0001 - 0x0000)
struct MenuCameraActor_CanTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraActor_CanTransition) == 0x000001, "Wrong alignment on MenuCameraActor_CanTransition");
static_assert(sizeof(MenuCameraActor_CanTransition) == 0x000001, "Wrong size on MenuCameraActor_CanTransition");
static_assert(offsetof(MenuCameraActor_CanTransition, ReturnValue) == 0x000000, "Member 'MenuCameraActor_CanTransition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraActor.K2_TransitionFinished
// 0x0001 (0x0001 - 0x0000)
struct MenuCameraActor_K2_TransitionFinished final
{
public:
	EDBDCameraViewType                            View;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraActor_K2_TransitionFinished) == 0x000001, "Wrong alignment on MenuCameraActor_K2_TransitionFinished");
static_assert(sizeof(MenuCameraActor_K2_TransitionFinished) == 0x000001, "Wrong size on MenuCameraActor_K2_TransitionFinished");
static_assert(offsetof(MenuCameraActor_K2_TransitionFinished, View) == 0x000000, "Member 'MenuCameraActor_K2_TransitionFinished::View' has a wrong offset!");

// Function DeadByDaylight.MenuCameraActor.K2_TransitionStarted
// 0x0001 (0x0001 - 0x0000)
struct MenuCameraActor_K2_TransitionStarted final
{
public:
	EDBDCameraViewType                            View;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraActor_K2_TransitionStarted) == 0x000001, "Wrong alignment on MenuCameraActor_K2_TransitionStarted");
static_assert(sizeof(MenuCameraActor_K2_TransitionStarted) == 0x000001, "Wrong size on MenuCameraActor_K2_TransitionStarted");
static_assert(offsetof(MenuCameraActor_K2_TransitionStarted, View) == 0x000000, "Member 'MenuCameraActor_K2_TransitionStarted::View' has a wrong offset!");

// Function DeadByDaylight.MenuCameraActor.GetActiveView
// 0x0001 (0x0001 - 0x0000)
struct MenuCameraActor_GetActiveView final
{
public:
	EDBDCameraViewType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraActor_GetActiveView) == 0x000001, "Wrong alignment on MenuCameraActor_GetActiveView");
static_assert(sizeof(MenuCameraActor_GetActiveView) == 0x000001, "Wrong size on MenuCameraActor_GetActiveView");
static_assert(offsetof(MenuCameraActor_GetActiveView, ReturnValue) == 0x000000, "Member 'MenuCameraActor_GetActiveView::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraActor.GetTransitionInitView
// 0x0040 (0x0040 - 0x0000)
struct MenuCameraActor_GetTransitionInitView final
{
public:
	struct FMenuCameraView                        ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraActor_GetTransitionInitView) == 0x000008, "Wrong alignment on MenuCameraActor_GetTransitionInitView");
static_assert(sizeof(MenuCameraActor_GetTransitionInitView) == 0x000040, "Wrong size on MenuCameraActor_GetTransitionInitView");
static_assert(offsetof(MenuCameraActor_GetTransitionInitView, ReturnValue) == 0x000000, "Member 'MenuCameraActor_GetTransitionInitView::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraActor.GetTransitionTargetView
// 0x0040 (0x0040 - 0x0000)
struct MenuCameraActor_GetTransitionTargetView final
{
public:
	struct FMenuCameraView                        ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraActor_GetTransitionTargetView) == 0x000008, "Wrong alignment on MenuCameraActor_GetTransitionTargetView");
static_assert(sizeof(MenuCameraActor_GetTransitionTargetView) == 0x000040, "Wrong size on MenuCameraActor_GetTransitionTargetView");
static_assert(offsetof(MenuCameraActor_GetTransitionTargetView, ReturnValue) == 0x000000, "Member 'MenuCameraActor_GetTransitionTargetView::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraActor.TransitionInProgress
// 0x0001 (0x0001 - 0x0000)
struct MenuCameraActor_TransitionInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraActor_TransitionInProgress) == 0x000001, "Wrong alignment on MenuCameraActor_TransitionInProgress");
static_assert(sizeof(MenuCameraActor_TransitionInProgress) == 0x000001, "Wrong size on MenuCameraActor_TransitionInProgress");
static_assert(offsetof(MenuCameraActor_TransitionInProgress, ReturnValue) == 0x000000, "Member 'MenuCameraActor_TransitionInProgress::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraSystem.Transition
// 0x0024 (0x0024 - 0x0000)
struct MenuCameraSystem_Transition final
{
public:
	struct FMenuCameraTransitionParams            Params_0;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0020(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MenuCameraSystem_Transition) == 0x000004, "Wrong alignment on MenuCameraSystem_Transition");
static_assert(sizeof(MenuCameraSystem_Transition) == 0x000024, "Wrong size on MenuCameraSystem_Transition");
static_assert(offsetof(MenuCameraSystem_Transition, Params_0) == 0x000000, "Member 'MenuCameraSystem_Transition::Params_0' has a wrong offset!");
static_assert(offsetof(MenuCameraSystem_Transition, ReturnValue) == 0x000020, "Member 'MenuCameraSystem_Transition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraSystem.CanTransition
// 0x0001 (0x0001 - 0x0000)
struct MenuCameraSystem_CanTransition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraSystem_CanTransition) == 0x000001, "Wrong alignment on MenuCameraSystem_CanTransition");
static_assert(sizeof(MenuCameraSystem_CanTransition) == 0x000001, "Wrong size on MenuCameraSystem_CanTransition");
static_assert(offsetof(MenuCameraSystem_CanTransition, ReturnValue) == 0x000000, "Member 'MenuCameraSystem_CanTransition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraSystem.GetActiveViewType
// 0x0001 (0x0001 - 0x0000)
struct MenuCameraSystem_GetActiveViewType final
{
public:
	EDBDCameraViewType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraSystem_GetActiveViewType) == 0x000001, "Wrong alignment on MenuCameraSystem_GetActiveViewType");
static_assert(sizeof(MenuCameraSystem_GetActiveViewType) == 0x000001, "Wrong size on MenuCameraSystem_GetActiveViewType");
static_assert(offsetof(MenuCameraSystem_GetActiveViewType, ReturnValue) == 0x000000, "Member 'MenuCameraSystem_GetActiveViewType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraSystem.GetCamera
// 0x0008 (0x0008 - 0x0000)
struct MenuCameraSystem_GetCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraSystem_GetCamera) == 0x000008, "Wrong alignment on MenuCameraSystem_GetCamera");
static_assert(sizeof(MenuCameraSystem_GetCamera) == 0x000008, "Wrong size on MenuCameraSystem_GetCamera");
static_assert(offsetof(MenuCameraSystem_GetCamera, ReturnValue) == 0x000000, "Member 'MenuCameraSystem_GetCamera::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraSystem.GetCurrentCameraViewType
// 0x0001 (0x0001 - 0x0000)
struct MenuCameraSystem_GetCurrentCameraViewType final
{
public:
	EDBDCameraViewType                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraSystem_GetCurrentCameraViewType) == 0x000001, "Wrong alignment on MenuCameraSystem_GetCurrentCameraViewType");
static_assert(sizeof(MenuCameraSystem_GetCurrentCameraViewType) == 0x000001, "Wrong size on MenuCameraSystem_GetCurrentCameraViewType");
static_assert(offsetof(MenuCameraSystem_GetCurrentCameraViewType, ReturnValue) == 0x000000, "Member 'MenuCameraSystem_GetCurrentCameraViewType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraSystem.GetTransitionInitView
// 0x0040 (0x0040 - 0x0000)
struct MenuCameraSystem_GetTransitionInitView final
{
public:
	struct FMenuCameraView                        ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraSystem_GetTransitionInitView) == 0x000008, "Wrong alignment on MenuCameraSystem_GetTransitionInitView");
static_assert(sizeof(MenuCameraSystem_GetTransitionInitView) == 0x000040, "Wrong size on MenuCameraSystem_GetTransitionInitView");
static_assert(offsetof(MenuCameraSystem_GetTransitionInitView, ReturnValue) == 0x000000, "Member 'MenuCameraSystem_GetTransitionInitView::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraSystem.GetTransitionTargetView
// 0x0040 (0x0040 - 0x0000)
struct MenuCameraSystem_GetTransitionTargetView final
{
public:
	struct FMenuCameraView                        ReturnValue;                                       // 0x0000(0x0040)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraSystem_GetTransitionTargetView) == 0x000008, "Wrong alignment on MenuCameraSystem_GetTransitionTargetView");
static_assert(sizeof(MenuCameraSystem_GetTransitionTargetView) == 0x000040, "Wrong size on MenuCameraSystem_GetTransitionTargetView");
static_assert(offsetof(MenuCameraSystem_GetTransitionTargetView, ReturnValue) == 0x000000, "Member 'MenuCameraSystem_GetTransitionTargetView::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuCameraSystem.IsTransitionInProgress
// 0x0001 (0x0001 - 0x0000)
struct MenuCameraSystem_IsTransitionInProgress final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuCameraSystem_IsTransitionInProgress) == 0x000001, "Wrong alignment on MenuCameraSystem_IsTransitionInProgress");
static_assert(sizeof(MenuCameraSystem_IsTransitionInProgress) == 0x000001, "Wrong size on MenuCameraSystem_IsTransitionInProgress");
static_assert(offsetof(MenuCameraSystem_IsTransitionInProgress, ReturnValue) == 0x000000, "Member 'MenuCameraSystem_IsTransitionInProgress::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuMeatHook.OnCharmsUpdated
// 0x0010 (0x0010 - 0x0000)
struct MenuMeatHook_OnCharmsUpdated final
{
public:
	TArray<struct FCharmIdSlot>                   CharmIDs;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuMeatHook_OnCharmsUpdated) == 0x000008, "Wrong alignment on MenuMeatHook_OnCharmsUpdated");
static_assert(sizeof(MenuMeatHook_OnCharmsUpdated) == 0x000010, "Wrong size on MenuMeatHook_OnCharmsUpdated");
static_assert(offsetof(MenuMeatHook_OnCharmsUpdated, CharmIDs) == 0x000000, "Member 'MenuMeatHook_OnCharmsUpdated::CharmIDs' has a wrong offset!");

// Function DeadByDaylight.MenuUtilities.AreAllGuestCharactersReady
// 0x0001 (0x0001 - 0x0000)
struct MenuUtilities_AreAllGuestCharactersReady final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuUtilities_AreAllGuestCharactersReady) == 0x000001, "Wrong alignment on MenuUtilities_AreAllGuestCharactersReady");
static_assert(sizeof(MenuUtilities_AreAllGuestCharactersReady) == 0x000001, "Wrong size on MenuUtilities_AreAllGuestCharactersReady");
static_assert(offsetof(MenuUtilities_AreAllGuestCharactersReady, ReturnValue) == 0x000000, "Member 'MenuUtilities_AreAllGuestCharactersReady::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuUtilities.GetAllMenuCharacters
// 0x0010 (0x0010 - 0x0000)
struct MenuUtilities_GetAllMenuCharacters final
{
public:
	TArray<class ADBDMenuPlayer*>                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuUtilities_GetAllMenuCharacters) == 0x000008, "Wrong alignment on MenuUtilities_GetAllMenuCharacters");
static_assert(sizeof(MenuUtilities_GetAllMenuCharacters) == 0x000010, "Wrong size on MenuUtilities_GetAllMenuCharacters");
static_assert(offsetof(MenuUtilities_GetAllMenuCharacters, ReturnValue) == 0x000000, "Member 'MenuUtilities_GetAllMenuCharacters::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuUtilities.GetLocalPlayerCharacter
// 0x0010 (0x0010 - 0x0000)
struct MenuUtilities_GetLocalPlayerCharacter final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDMenuPlayer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuUtilities_GetLocalPlayerCharacter) == 0x000008, "Wrong alignment on MenuUtilities_GetLocalPlayerCharacter");
static_assert(sizeof(MenuUtilities_GetLocalPlayerCharacter) == 0x000010, "Wrong size on MenuUtilities_GetLocalPlayerCharacter");
static_assert(offsetof(MenuUtilities_GetLocalPlayerCharacter, ContextObject) == 0x000000, "Member 'MenuUtilities_GetLocalPlayerCharacter::ContextObject' has a wrong offset!");
static_assert(offsetof(MenuUtilities_GetLocalPlayerCharacter, ReturnValue) == 0x000008, "Member 'MenuUtilities_GetLocalPlayerCharacter::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MenuUtilities.GetMenuCameraSystem
// 0x0010 (0x0010 - 0x0000)
struct MenuUtilities_GetMenuCameraSystem final
{
public:
	const class UObject*                          ContextObject;                                     // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMenuCameraSystem*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MenuUtilities_GetMenuCameraSystem) == 0x000008, "Wrong alignment on MenuUtilities_GetMenuCameraSystem");
static_assert(sizeof(MenuUtilities_GetMenuCameraSystem) == 0x000010, "Wrong size on MenuUtilities_GetMenuCameraSystem");
static_assert(offsetof(MenuUtilities_GetMenuCameraSystem, ContextObject) == 0x000000, "Member 'MenuUtilities_GetMenuCameraSystem::ContextObject' has a wrong offset!");
static_assert(offsetof(MenuUtilities_GetMenuCameraSystem, ReturnValue) == 0x000008, "Member 'MenuUtilities_GetMenuCameraSystem::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.MoriableComponent.OnMoriFinished
// 0x0001 (0x0001 - 0x0000)
struct MoriableComponent_OnMoriFinished final
{
public:
	bool                                          HasBeenKilledByMori;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoriableComponent_OnMoriFinished) == 0x000001, "Wrong alignment on MoriableComponent_OnMoriFinished");
static_assert(sizeof(MoriableComponent_OnMoriFinished) == 0x000001, "Wrong size on MoriableComponent_OnMoriFinished");
static_assert(offsetof(MoriableComponent_OnMoriFinished, HasBeenKilledByMori) == 0x000000, "Member 'MoriableComponent_OnMoriFinished::HasBeenKilledByMori' has a wrong offset!");

// Function DeadByDaylight.MoriComponent.OnMoriChargeCompleted
// 0x0008 (0x0008 - 0x0000)
struct MoriComponent_OnMoriChargeCompleted final
{
public:
	class ACamperPlayer*                          SurvivorTarget;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MoriComponent_OnMoriChargeCompleted) == 0x000008, "Wrong alignment on MoriComponent_OnMoriChargeCompleted");
static_assert(sizeof(MoriComponent_OnMoriChargeCompleted) == 0x000008, "Wrong size on MoriComponent_OnMoriChargeCompleted");
static_assert(offsetof(MoriComponent_OnMoriChargeCompleted, SurvivorTarget) == 0x000000, "Member 'MoriComponent_OnMoriChargeCompleted::SurvivorTarget' has a wrong offset!");

// Function DeadByDaylight.MultipleLightsFader.SetAffectedLights
// 0x0010 (0x0010 - 0x0000)
struct MultipleLightsFader_SetAffectedLights final
{
public:
	TArray<class ULightComponent*>                AffectedLights;                                    // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultipleLightsFader_SetAffectedLights) == 0x000008, "Wrong alignment on MultipleLightsFader_SetAffectedLights");
static_assert(sizeof(MultipleLightsFader_SetAffectedLights) == 0x000010, "Wrong size on MultipleLightsFader_SetAffectedLights");
static_assert(offsetof(MultipleLightsFader_SetAffectedLights, AffectedLights) == 0x000000, "Member 'MultipleLightsFader_SetAffectedLights::AffectedLights' has a wrong offset!");

// Function DeadByDaylight.MysteryBoxSubsystem.OnNextClaimTimeTimerElapsed
// 0x0010 (0x0010 - 0x0000)
struct MysteryBoxSubsystem_OnNextClaimTimeTimerElapsed final
{
public:
	class FString                                 Campaign;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MysteryBoxSubsystem_OnNextClaimTimeTimerElapsed) == 0x000008, "Wrong alignment on MysteryBoxSubsystem_OnNextClaimTimeTimerElapsed");
static_assert(sizeof(MysteryBoxSubsystem_OnNextClaimTimeTimerElapsed) == 0x000010, "Wrong size on MysteryBoxSubsystem_OnNextClaimTimeTimerElapsed");
static_assert(offsetof(MysteryBoxSubsystem_OnNextClaimTimeTimerElapsed, Campaign) == 0x000000, "Member 'MysteryBoxSubsystem_OnNextClaimTimeTimerElapsed::Campaign' has a wrong offset!");

// Function DeadByDaylight.MysteryBoxSubsystem.OnTimeTravel
// 0x0018 (0x0018 - 0x0000)
struct MysteryBoxSubsystem_OnTimeTravel final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Date;                                              // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MysteryBoxSubsystem_OnTimeTravel) == 0x000008, "Wrong alignment on MysteryBoxSubsystem_OnTimeTravel");
static_assert(sizeof(MysteryBoxSubsystem_OnTimeTravel) == 0x000018, "Wrong size on MysteryBoxSubsystem_OnTimeTravel");
static_assert(offsetof(MysteryBoxSubsystem_OnTimeTravel, Success) == 0x000000, "Member 'MysteryBoxSubsystem_OnTimeTravel::Success' has a wrong offset!");
static_assert(offsetof(MysteryBoxSubsystem_OnTimeTravel, Date) == 0x000008, "Member 'MysteryBoxSubsystem_OnTimeTravel::Date' has a wrong offset!");

// Function DeadByDaylight.NatAudioAmbienceBox.OnBeginOverlapAudioAmbience
// 0x0110 (0x0110 - 0x0000)
struct NatAudioAmbienceBox_OnBeginOverlapAudioAmbience final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience) == 0x000008, "Wrong alignment on NatAudioAmbienceBox_OnBeginOverlapAudioAmbience");
static_assert(sizeof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience) == 0x000110, "Wrong size on NatAudioAmbienceBox_OnBeginOverlapAudioAmbience");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, OverlappedComponent) == 0x000000, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, OtherActor) == 0x000008, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::OtherActor' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, OtherComp) == 0x000010, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::OtherComp' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, OtherBodyIndex) == 0x000018, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, bFromSweep) == 0x00001C, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::bFromSweep' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnBeginOverlapAudioAmbience, SweepResult) == 0x000020, "Member 'NatAudioAmbienceBox_OnBeginOverlapAudioAmbience::SweepResult' has a wrong offset!");

// Function DeadByDaylight.NatAudioAmbienceBox.OnEndOverlapAudioAmbience
// 0x0020 (0x0020 - 0x0000)
struct NatAudioAmbienceBox_OnEndOverlapAudioAmbience final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience) == 0x000008, "Wrong alignment on NatAudioAmbienceBox_OnEndOverlapAudioAmbience");
static_assert(sizeof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience) == 0x000020, "Wrong size on NatAudioAmbienceBox_OnEndOverlapAudioAmbience");
static_assert(offsetof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience, OverlappedComponent) == 0x000000, "Member 'NatAudioAmbienceBox_OnEndOverlapAudioAmbience::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience, OtherActor) == 0x000008, "Member 'NatAudioAmbienceBox_OnEndOverlapAudioAmbience::OtherActor' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience, OtherComp) == 0x000010, "Member 'NatAudioAmbienceBox_OnEndOverlapAudioAmbience::OtherComp' has a wrong offset!");
static_assert(offsetof(NatAudioAmbienceBox_OnEndOverlapAudioAmbience, OtherBodyIndex) == 0x000018, "Member 'NatAudioAmbienceBox_OnEndOverlapAudioAmbience::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.NatAudioCustomMesh.OnBeginOverlapAudioMesh
// 0x0110 (0x0110 - 0x0000)
struct NatAudioCustomMesh_OnBeginOverlapAudioMesh final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(NatAudioCustomMesh_OnBeginOverlapAudioMesh) == 0x000008, "Wrong alignment on NatAudioCustomMesh_OnBeginOverlapAudioMesh");
static_assert(sizeof(NatAudioCustomMesh_OnBeginOverlapAudioMesh) == 0x000110, "Wrong size on NatAudioCustomMesh_OnBeginOverlapAudioMesh");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, OverlappedComponent) == 0x000000, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, OtherActor) == 0x000008, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::OtherActor' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, OtherComp) == 0x000010, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::OtherComp' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, OtherBodyIndex) == 0x000018, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, bFromSweep) == 0x00001C, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::bFromSweep' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnBeginOverlapAudioMesh, SweepResult) == 0x000020, "Member 'NatAudioCustomMesh_OnBeginOverlapAudioMesh::SweepResult' has a wrong offset!");

// Function DeadByDaylight.NatAudioCustomMesh.OnEndOverlapAudioMesh
// 0x0020 (0x0020 - 0x0000)
struct NatAudioCustomMesh_OnEndOverlapAudioMesh final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NatAudioCustomMesh_OnEndOverlapAudioMesh) == 0x000008, "Wrong alignment on NatAudioCustomMesh_OnEndOverlapAudioMesh");
static_assert(sizeof(NatAudioCustomMesh_OnEndOverlapAudioMesh) == 0x000020, "Wrong size on NatAudioCustomMesh_OnEndOverlapAudioMesh");
static_assert(offsetof(NatAudioCustomMesh_OnEndOverlapAudioMesh, OverlappedComponent) == 0x000000, "Member 'NatAudioCustomMesh_OnEndOverlapAudioMesh::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnEndOverlapAudioMesh, OtherActor) == 0x000008, "Member 'NatAudioCustomMesh_OnEndOverlapAudioMesh::OtherActor' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnEndOverlapAudioMesh, OtherComp) == 0x000010, "Member 'NatAudioCustomMesh_OnEndOverlapAudioMesh::OtherComp' has a wrong offset!");
static_assert(offsetof(NatAudioCustomMesh_OnEndOverlapAudioMesh, OtherBodyIndex) == 0x000018, "Member 'NatAudioCustomMesh_OnEndOverlapAudioMesh::OtherBodyIndex' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.OnPlayerBeingStalkedChanged
// 0x0001 (0x0001 - 0x0000)
struct StalkerComponent_OnPlayerBeingStalkedChanged final
{
public:
	bool                                          IsBeingStalked;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_OnPlayerBeingStalkedChanged) == 0x000001, "Wrong alignment on StalkerComponent_OnPlayerBeingStalkedChanged");
static_assert(sizeof(StalkerComponent_OnPlayerBeingStalkedChanged) == 0x000001, "Wrong size on StalkerComponent_OnPlayerBeingStalkedChanged");
static_assert(offsetof(StalkerComponent_OnPlayerBeingStalkedChanged, IsBeingStalked) == 0x000000, "Member 'StalkerComponent_OnPlayerBeingStalkedChanged::IsBeingStalked' has a wrong offset!");

// DelegateFunction DeadByDaylight.StalkerComponent.OnStalkPointsAdded__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct StalkerComponent_OnStalkPointsAdded__DelegateSignature final
{
public:
	float                                         StalkPoints;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_OnStalkPointsAdded__DelegateSignature) == 0x000004, "Wrong alignment on StalkerComponent_OnStalkPointsAdded__DelegateSignature");
static_assert(sizeof(StalkerComponent_OnStalkPointsAdded__DelegateSignature) == 0x000004, "Wrong size on StalkerComponent_OnStalkPointsAdded__DelegateSignature");
static_assert(offsetof(StalkerComponent_OnStalkPointsAdded__DelegateSignature, StalkPoints) == 0x000000, "Member 'StalkerComponent_OnStalkPointsAdded__DelegateSignature::StalkPoints' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.CanStalk
// 0x0001 (0x0001 - 0x0000)
struct StalkerComponent_CanStalk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_CanStalk) == 0x000001, "Wrong alignment on StalkerComponent_CanStalk");
static_assert(sizeof(StalkerComponent_CanStalk) == 0x000001, "Wrong size on StalkerComponent_CanStalk");
static_assert(offsetof(StalkerComponent_CanStalk, ReturnValue) == 0x000000, "Member 'StalkerComponent_CanStalk::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.GetMaxStalkingPoints
// 0x0004 (0x0004 - 0x0000)
struct StalkerComponent_GetMaxStalkingPoints final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_GetMaxStalkingPoints) == 0x000004, "Wrong alignment on StalkerComponent_GetMaxStalkingPoints");
static_assert(sizeof(StalkerComponent_GetMaxStalkingPoints) == 0x000004, "Wrong size on StalkerComponent_GetMaxStalkingPoints");
static_assert(offsetof(StalkerComponent_GetMaxStalkingPoints, ReturnValue) == 0x000000, "Member 'StalkerComponent_GetMaxStalkingPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.GetPercentStalkingPoints
// 0x0004 (0x0004 - 0x0000)
struct StalkerComponent_GetPercentStalkingPoints final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_GetPercentStalkingPoints) == 0x000004, "Wrong alignment on StalkerComponent_GetPercentStalkingPoints");
static_assert(sizeof(StalkerComponent_GetPercentStalkingPoints) == 0x000004, "Wrong size on StalkerComponent_GetPercentStalkingPoints");
static_assert(offsetof(StalkerComponent_GetPercentStalkingPoints, ReturnValue) == 0x000000, "Member 'StalkerComponent_GetPercentStalkingPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.GetScoreMultiplier
// 0x0004 (0x0004 - 0x0000)
struct StalkerComponent_GetScoreMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_GetScoreMultiplier) == 0x000004, "Wrong alignment on StalkerComponent_GetScoreMultiplier");
static_assert(sizeof(StalkerComponent_GetScoreMultiplier) == 0x000004, "Wrong size on StalkerComponent_GetScoreMultiplier");
static_assert(offsetof(StalkerComponent_GetScoreMultiplier, ReturnValue) == 0x000000, "Member 'StalkerComponent_GetScoreMultiplier::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.GetTotalStalkingPoints
// 0x0004 (0x0004 - 0x0000)
struct StalkerComponent_GetTotalStalkingPoints final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_GetTotalStalkingPoints) == 0x000004, "Wrong alignment on StalkerComponent_GetTotalStalkingPoints");
static_assert(sizeof(StalkerComponent_GetTotalStalkingPoints) == 0x000004, "Wrong size on StalkerComponent_GetTotalStalkingPoints");
static_assert(offsetof(StalkerComponent_GetTotalStalkingPoints, ReturnValue) == 0x000000, "Member 'StalkerComponent_GetTotalStalkingPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.HasMaxStalkPoints
// 0x0001 (0x0001 - 0x0000)
struct StalkerComponent_HasMaxStalkPoints final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_HasMaxStalkPoints) == 0x000001, "Wrong alignment on StalkerComponent_HasMaxStalkPoints");
static_assert(sizeof(StalkerComponent_HasMaxStalkPoints) == 0x000001, "Wrong size on StalkerComponent_HasMaxStalkPoints");
static_assert(offsetof(StalkerComponent_HasMaxStalkPoints, ReturnValue) == 0x000000, "Member 'StalkerComponent_HasMaxStalkPoints::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StalkerComponent.IsStalkingSomeone
// 0x0001 (0x0001 - 0x0000)
struct StalkerComponent_IsStalkingSomeone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StalkerComponent_IsStalkingSomeone) == 0x000001, "Wrong alignment on StalkerComponent_IsStalkingSomeone");
static_assert(sizeof(StalkerComponent_IsStalkingSomeone) == 0x000001, "Wrong size on StalkerComponent_IsStalkingSomeone");
static_assert(offsetof(StalkerComponent_IsStalkingSomeone, ReturnValue) == 0x000000, "Member 'StalkerComponent_IsStalkingSomeone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnAddPlayerClick
// 0x0004 (0x0004 - 0x0000)
struct NavigationScreen_OnAddPlayerClick final
{
public:
	int32                                         buttonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnAddPlayerClick) == 0x000004, "Wrong alignment on NavigationScreen_OnAddPlayerClick");
static_assert(sizeof(NavigationScreen_OnAddPlayerClick) == 0x000004, "Wrong size on NavigationScreen_OnAddPlayerClick");
static_assert(offsetof(NavigationScreen_OnAddPlayerClick, buttonId) == 0x000000, "Member 'NavigationScreen_OnAddPlayerClick::buttonId' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnBankClick
// 0x0004 (0x0004 - 0x0000)
struct NavigationScreen_OnBankClick final
{
public:
	int32                                         CurrencyTypeInt;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnBankClick) == 0x000004, "Wrong alignment on NavigationScreen_OnBankClick");
static_assert(sizeof(NavigationScreen_OnBankClick) == 0x000004, "Wrong size on NavigationScreen_OnBankClick");
static_assert(offsetof(NavigationScreen_OnBankClick, CurrencyTypeInt) == 0x000000, "Member 'NavigationScreen_OnBankClick::CurrencyTypeInt' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnCharacterSwapArrowClick
// 0x0001 (0x0001 - 0x0000)
struct NavigationScreen_OnCharacterSwapArrowClick final
{
public:
	bool                                          IsNext;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnCharacterSwapArrowClick) == 0x000001, "Wrong alignment on NavigationScreen_OnCharacterSwapArrowClick");
static_assert(sizeof(NavigationScreen_OnCharacterSwapArrowClick) == 0x000001, "Wrong size on NavigationScreen_OnCharacterSwapArrowClick");
static_assert(offsetof(NavigationScreen_OnCharacterSwapArrowClick, IsNext) == 0x000000, "Member 'NavigationScreen_OnCharacterSwapArrowClick::IsNext' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnChatInputMouseOver
// 0x0001 (0x0001 - 0x0000)
struct NavigationScreen_OnChatInputMouseOver final
{
public:
	bool                                          IsMouseOver;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnChatInputMouseOver) == 0x000001, "Wrong alignment on NavigationScreen_OnChatInputMouseOver");
static_assert(sizeof(NavigationScreen_OnChatInputMouseOver) == 0x000001, "Wrong size on NavigationScreen_OnChatInputMouseOver");
static_assert(offsetof(NavigationScreen_OnChatInputMouseOver, IsMouseOver) == 0x000000, "Member 'NavigationScreen_OnChatInputMouseOver::IsMouseOver' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnPerkPreviewPerkSlotClicked
// 0x0004 (0x0004 - 0x0000)
struct NavigationScreen_OnPerkPreviewPerkSlotClicked final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnPerkPreviewPerkSlotClicked) == 0x000004, "Wrong alignment on NavigationScreen_OnPerkPreviewPerkSlotClicked");
static_assert(sizeof(NavigationScreen_OnPerkPreviewPerkSlotClicked) == 0x000004, "Wrong size on NavigationScreen_OnPerkPreviewPerkSlotClicked");
static_assert(offsetof(NavigationScreen_OnPerkPreviewPerkSlotClicked, SlotIndex) == 0x000000, "Member 'NavigationScreen_OnPerkPreviewPerkSlotClicked::SlotIndex' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnPlayerInfoClick
// 0x0004 (0x0004 - 0x0000)
struct NavigationScreen_OnPlayerInfoClick final
{
public:
	int32                                         PlayerId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnPlayerInfoClick) == 0x000004, "Wrong alignment on NavigationScreen_OnPlayerInfoClick");
static_assert(sizeof(NavigationScreen_OnPlayerInfoClick) == 0x000004, "Wrong size on NavigationScreen_OnPlayerInfoClick");
static_assert(offsetof(NavigationScreen_OnPlayerInfoClick, PlayerId) == 0x000000, "Member 'NavigationScreen_OnPlayerInfoClick::PlayerId' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnPlayerOptionSelected
// 0x0028 (0x0028 - 0x0000)
struct NavigationScreen_OnPlayerOptionSelected final
{
public:
	class FString                                 KrakenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Option;                                            // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NavigationScreen_OnPlayerOptionSelected) == 0x000008, "Wrong alignment on NavigationScreen_OnPlayerOptionSelected");
static_assert(sizeof(NavigationScreen_OnPlayerOptionSelected) == 0x000028, "Wrong size on NavigationScreen_OnPlayerOptionSelected");
static_assert(offsetof(NavigationScreen_OnPlayerOptionSelected, KrakenId) == 0x000000, "Member 'NavigationScreen_OnPlayerOptionSelected::KrakenId' has a wrong offset!");
static_assert(offsetof(NavigationScreen_OnPlayerOptionSelected, PlayerId) == 0x000010, "Member 'NavigationScreen_OnPlayerOptionSelected::PlayerId' has a wrong offset!");
static_assert(offsetof(NavigationScreen_OnPlayerOptionSelected, Option) == 0x000020, "Member 'NavigationScreen_OnPlayerOptionSelected::Option' has a wrong offset!");

// Function DeadByDaylight.NavigationScreen.OnSendChatMsgButtonClick
// 0x0010 (0x0010 - 0x0000)
struct NavigationScreen_OnSendChatMsgButtonClick final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationScreen_OnSendChatMsgButtonClick) == 0x000008, "Wrong alignment on NavigationScreen_OnSendChatMsgButtonClick");
static_assert(sizeof(NavigationScreen_OnSendChatMsgButtonClick) == 0x000010, "Wrong size on NavigationScreen_OnSendChatMsgButtonClick");
static_assert(offsetof(NavigationScreen_OnSendChatMsgButtonClick, Message) == 0x000000, "Member 'NavigationScreen_OnSendChatMsgButtonClick::Message' has a wrong offset!");

// Function DeadByDaylight.NavigationStateComponent.OnControllerChanged
// 0x0018 (0x0018 - 0x0000)
struct NavigationStateComponent_OnControllerChanged final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            OldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            NewController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationStateComponent_OnControllerChanged) == 0x000008, "Wrong alignment on NavigationStateComponent_OnControllerChanged");
static_assert(sizeof(NavigationStateComponent_OnControllerChanged) == 0x000018, "Wrong size on NavigationStateComponent_OnControllerChanged");
static_assert(offsetof(NavigationStateComponent_OnControllerChanged, Pawn) == 0x000000, "Member 'NavigationStateComponent_OnControllerChanged::Pawn' has a wrong offset!");
static_assert(offsetof(NavigationStateComponent_OnControllerChanged, OldController) == 0x000008, "Member 'NavigationStateComponent_OnControllerChanged::OldController' has a wrong offset!");
static_assert(offsetof(NavigationStateComponent_OnControllerChanged, NewController) == 0x000010, "Member 'NavigationStateComponent_OnControllerChanged::NewController' has a wrong offset!");

// Function DeadByDaylight.NavigationStateComponent.OnRep_GuidedState
// 0x0018 (0x0018 - 0x0000)
struct NavigationStateComponent_OnRep_GuidedState final
{
public:
	struct FGuidingInfo                           PreviousState;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationStateComponent_OnRep_GuidedState) == 0x000008, "Wrong alignment on NavigationStateComponent_OnRep_GuidedState");
static_assert(sizeof(NavigationStateComponent_OnRep_GuidedState) == 0x000018, "Wrong size on NavigationStateComponent_OnRep_GuidedState");
static_assert(offsetof(NavigationStateComponent_OnRep_GuidedState, PreviousState) == 0x000000, "Member 'NavigationStateComponent_OnRep_GuidedState::PreviousState' has a wrong offset!");

// Function DeadByDaylight.NavigationStateComponent.OnRep_ImmobilizedState
// 0x0001 (0x0001 - 0x0000)
struct NavigationStateComponent_OnRep_ImmobilizedState final
{
public:
	EImmobilizedState                             PreviousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavigationStateComponent_OnRep_ImmobilizedState) == 0x000001, "Wrong alignment on NavigationStateComponent_OnRep_ImmobilizedState");
static_assert(sizeof(NavigationStateComponent_OnRep_ImmobilizedState) == 0x000001, "Wrong size on NavigationStateComponent_OnRep_ImmobilizedState");
static_assert(offsetof(NavigationStateComponent_OnRep_ImmobilizedState, PreviousState) == 0x000000, "Member 'NavigationStateComponent_OnRep_ImmobilizedState::PreviousState' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.ChangeAnimationClass
// 0x0008 (0x0008 - 0x0000)
struct OfferingCard_ChangeAnimationClass final
{
public:
	TSubclassOf<class UOfferingCardAnim>          AnimationClass;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_ChangeAnimationClass) == 0x000008, "Wrong alignment on OfferingCard_ChangeAnimationClass");
static_assert(sizeof(OfferingCard_ChangeAnimationClass) == 0x000008, "Wrong size on OfferingCard_ChangeAnimationClass");
static_assert(offsetof(OfferingCard_ChangeAnimationClass, AnimationClass) == 0x000000, "Member 'OfferingCard_ChangeAnimationClass::AnimationClass' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.ChangeState
// 0x0001 (0x0001 - 0x0000)
struct OfferingCard_ChangeState final
{
public:
	EOfferingAnimState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_ChangeState) == 0x000001, "Wrong alignment on OfferingCard_ChangeState");
static_assert(sizeof(OfferingCard_ChangeState) == 0x000001, "Wrong size on OfferingCard_ChangeState");
static_assert(offsetof(OfferingCard_ChangeState, State) == 0x000000, "Member 'OfferingCard_ChangeState::State' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.HandleStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OfferingCard_HandleStateChanged final
{
public:
	EOfferingAnimState                            State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_HandleStateChanged) == 0x000001, "Wrong alignment on OfferingCard_HandleStateChanged");
static_assert(sizeof(OfferingCard_HandleStateChanged) == 0x000001, "Wrong size on OfferingCard_HandleStateChanged");
static_assert(offsetof(OfferingCard_HandleStateChanged, State) == 0x000000, "Member 'OfferingCard_HandleStateChanged::State' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.GetCardAnimation
// 0x0008 (0x0008 - 0x0000)
struct OfferingCard_GetCardAnimation final
{
public:
	class UOfferingCardAnim*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_GetCardAnimation) == 0x000008, "Wrong alignment on OfferingCard_GetCardAnimation");
static_assert(sizeof(OfferingCard_GetCardAnimation) == 0x000008, "Wrong size on OfferingCard_GetCardAnimation");
static_assert(offsetof(OfferingCard_GetCardAnimation, ReturnValue) == 0x000000, "Member 'OfferingCard_GetCardAnimation::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.GetState
// 0x0001 (0x0001 - 0x0000)
struct OfferingCard_GetState final
{
public:
	EOfferingAnimState                            ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_GetState) == 0x000001, "Wrong alignment on OfferingCard_GetState");
static_assert(sizeof(OfferingCard_GetState) == 0x000001, "Wrong size on OfferingCard_GetState");
static_assert(offsetof(OfferingCard_GetState, ReturnValue) == 0x000000, "Member 'OfferingCard_GetState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingCard.IsRevealed
// 0x0001 (0x0001 - 0x0000)
struct OfferingCard_IsRevealed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingCard_IsRevealed) == 0x000001, "Wrong alignment on OfferingCard_IsRevealed");
static_assert(sizeof(OfferingCard_IsRevealed) == 0x000001, "Wrong size on OfferingCard_IsRevealed");
static_assert(offsetof(OfferingCard_IsRevealed, ReturnValue) == 0x000000, "Member 'OfferingCard_IsRevealed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingSequenceManager.HandleSequenceStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OfferingSequenceManager_HandleSequenceStateChanged final
{
public:
	EOfferingSequenceState                        State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingSequenceManager_HandleSequenceStateChanged) == 0x000001, "Wrong alignment on OfferingSequenceManager_HandleSequenceStateChanged");
static_assert(sizeof(OfferingSequenceManager_HandleSequenceStateChanged) == 0x000001, "Wrong size on OfferingSequenceManager_HandleSequenceStateChanged");
static_assert(offsetof(OfferingSequenceManager_HandleSequenceStateChanged, State) == 0x000000, "Member 'OfferingSequenceManager_HandleSequenceStateChanged::State' has a wrong offset!");

// Function DeadByDaylight.OfferingSequenceManager.ContainsDefaultCard
// 0x0001 (0x0001 - 0x0000)
struct OfferingSequenceManager_ContainsDefaultCard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingSequenceManager_ContainsDefaultCard) == 0x000001, "Wrong alignment on OfferingSequenceManager_ContainsDefaultCard");
static_assert(sizeof(OfferingSequenceManager_ContainsDefaultCard) == 0x000001, "Wrong size on OfferingSequenceManager_ContainsDefaultCard");
static_assert(offsetof(OfferingSequenceManager_ContainsDefaultCard, ReturnValue) == 0x000000, "Member 'OfferingSequenceManager_ContainsDefaultCard::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingSequenceManager.ContainsEventCard
// 0x0001 (0x0001 - 0x0000)
struct OfferingSequenceManager_ContainsEventCard final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingSequenceManager_ContainsEventCard) == 0x000001, "Wrong alignment on OfferingSequenceManager_ContainsEventCard");
static_assert(sizeof(OfferingSequenceManager_ContainsEventCard) == 0x000001, "Wrong size on OfferingSequenceManager_ContainsEventCard");
static_assert(offsetof(OfferingSequenceManager_ContainsEventCard, ReturnValue) == 0x000000, "Member 'OfferingSequenceManager_ContainsEventCard::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingSequenceManager.GetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct OfferingSequenceManager_GetCurrentState final
{
public:
	EOfferingSequenceState                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingSequenceManager_GetCurrentState) == 0x000001, "Wrong alignment on OfferingSequenceManager_GetCurrentState");
static_assert(sizeof(OfferingSequenceManager_GetCurrentState) == 0x000001, "Wrong size on OfferingSequenceManager_GetCurrentState");
static_assert(offsetof(OfferingSequenceManager_GetCurrentState, ReturnValue) == 0x000000, "Member 'OfferingSequenceManager_GetCurrentState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingUtilities.HasItemLossProtection
// 0x0010 (0x0010 - 0x0000)
struct OfferingUtilities_HasItemLossProtection final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingUtilities_HasItemLossProtection) == 0x000008, "Wrong alignment on OfferingUtilities_HasItemLossProtection");
static_assert(sizeof(OfferingUtilities_HasItemLossProtection) == 0x000010, "Wrong size on OfferingUtilities_HasItemLossProtection");
static_assert(offsetof(OfferingUtilities_HasItemLossProtection, Player) == 0x000000, "Member 'OfferingUtilities_HasItemLossProtection::Player' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_HasItemLossProtection, ReturnValue) == 0x000008, "Member 'OfferingUtilities_HasItemLossProtection::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingUtilities.HasOfferingOfType
// 0x0018 (0x0018 - 0x0000)
struct OfferingUtilities_HasOfferingOfType final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOfferingEffectType                           OfferingEffectType;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PlayerId;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingUtilities_HasOfferingOfType) == 0x000008, "Wrong alignment on OfferingUtilities_HasOfferingOfType");
static_assert(sizeof(OfferingUtilities_HasOfferingOfType) == 0x000018, "Wrong size on OfferingUtilities_HasOfferingOfType");
static_assert(offsetof(OfferingUtilities_HasOfferingOfType, WorldContextObject) == 0x000000, "Member 'OfferingUtilities_HasOfferingOfType::WorldContextObject' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_HasOfferingOfType, OfferingEffectType) == 0x000008, "Member 'OfferingUtilities_HasOfferingOfType::OfferingEffectType' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_HasOfferingOfType, PlayerId) == 0x00000C, "Member 'OfferingUtilities_HasOfferingOfType::PlayerId' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_HasOfferingOfType, ReturnValue) == 0x000010, "Member 'OfferingUtilities_HasOfferingOfType::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OfferingUtilities.IsPlayerEquippedWithOfferingWithTag
// 0x0018 (0x0018 - 0x0000)
struct OfferingUtilities_IsPlayerEquippedWithOfferingWithTag final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OfferingTag;                                       // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag) == 0x000008, "Wrong alignment on OfferingUtilities_IsPlayerEquippedWithOfferingWithTag");
static_assert(sizeof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag) == 0x000018, "Wrong size on OfferingUtilities_IsPlayerEquippedWithOfferingWithTag");
static_assert(offsetof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag, Player) == 0x000000, "Member 'OfferingUtilities_IsPlayerEquippedWithOfferingWithTag::Player' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag, OfferingTag) == 0x000008, "Member 'OfferingUtilities_IsPlayerEquippedWithOfferingWithTag::OfferingTag' has a wrong offset!");
static_assert(offsetof(OfferingUtilities_IsPlayerEquippedWithOfferingWithTag, ReturnValue) == 0x000014, "Member 'OfferingUtilities_IsPlayerEquippedWithOfferingWithTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.AddStateTag
// 0x0020 (0x0020 - 0x0000)
struct StateTagUtilities_AddStateTag final
{
public:
	TScriptInterface<class IObjectStateProvider>  ObjectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_AddStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_AddStateTag");
static_assert(sizeof(StateTagUtilities_AddStateTag) == 0x000020, "Wrong size on StateTagUtilities_AddStateTag");
static_assert(offsetof(StateTagUtilities_AddStateTag, ObjectStateProvider) == 0x000000, "Member 'StateTagUtilities_AddStateTag::ObjectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_AddStateTag, Tag) == 0x000010, "Member 'StateTagUtilities_AddStateTag::Tag' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.AddStateTagToPlayer
// 0x0018 (0x0018 - 0x0000)
struct StateTagUtilities_AddStateTagToPlayer final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_AddStateTagToPlayer) == 0x000008, "Wrong alignment on StateTagUtilities_AddStateTagToPlayer");
static_assert(sizeof(StateTagUtilities_AddStateTagToPlayer) == 0x000018, "Wrong size on StateTagUtilities_AddStateTagToPlayer");
static_assert(offsetof(StateTagUtilities_AddStateTagToPlayer, Player) == 0x000000, "Member 'StateTagUtilities_AddStateTagToPlayer::Player' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_AddStateTagToPlayer, Tag) == 0x000008, "Member 'StateTagUtilities_AddStateTagToPlayer::Tag' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.AddTagWithSource
// 0x0028 (0x0028 - 0x0000)
struct StateTagUtilities_AddTagWithSource final
{
public:
	TScriptInterface<class IObjectStateProvider>  ObjectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Source;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTagUtilities_AddTagWithSource) == 0x000008, "Wrong alignment on StateTagUtilities_AddTagWithSource");
static_assert(sizeof(StateTagUtilities_AddTagWithSource) == 0x000028, "Wrong size on StateTagUtilities_AddTagWithSource");
static_assert(offsetof(StateTagUtilities_AddTagWithSource, ObjectStateProvider) == 0x000000, "Member 'StateTagUtilities_AddTagWithSource::ObjectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_AddTagWithSource, Tag) == 0x000010, "Member 'StateTagUtilities_AddTagWithSource::Tag' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_AddTagWithSource, Source) == 0x000020, "Member 'StateTagUtilities_AddTagWithSource::Source' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.CurrentInteractionHasAnyStateTag
// 0x0030 (0x0030 - 0x0000)
struct StateTagUtilities_CurrentInteractionHasAnyStateTag final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0008(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_CurrentInteractionHasAnyStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_CurrentInteractionHasAnyStateTag");
static_assert(sizeof(StateTagUtilities_CurrentInteractionHasAnyStateTag) == 0x000030, "Wrong size on StateTagUtilities_CurrentInteractionHasAnyStateTag");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasAnyStateTag, Player) == 0x000000, "Member 'StateTagUtilities_CurrentInteractionHasAnyStateTag::Player' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasAnyStateTag, Tags) == 0x000008, "Member 'StateTagUtilities_CurrentInteractionHasAnyStateTag::Tags' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasAnyStateTag, ReturnValue) == 0x000028, "Member 'StateTagUtilities_CurrentInteractionHasAnyStateTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.CurrentInteractionHasStateTag
// 0x0018 (0x0018 - 0x0000)
struct StateTagUtilities_CurrentInteractionHasStateTag final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_CurrentInteractionHasStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_CurrentInteractionHasStateTag");
static_assert(sizeof(StateTagUtilities_CurrentInteractionHasStateTag) == 0x000018, "Wrong size on StateTagUtilities_CurrentInteractionHasStateTag");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasStateTag, Player) == 0x000000, "Member 'StateTagUtilities_CurrentInteractionHasStateTag::Player' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasStateTag, Tag) == 0x000008, "Member 'StateTagUtilities_CurrentInteractionHasStateTag::Tag' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_CurrentInteractionHasStateTag, ReturnValue) == 0x000014, "Member 'StateTagUtilities_CurrentInteractionHasStateTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.HasAnyStateTags
// 0x0038 (0x0038 - 0x0000)
struct StateTagUtilities_HasAnyStateTags final
{
public:
	TScriptInterface<class IObjectStateProvider>  ObjectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Tags;                                              // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0030(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_HasAnyStateTags) == 0x000008, "Wrong alignment on StateTagUtilities_HasAnyStateTags");
static_assert(sizeof(StateTagUtilities_HasAnyStateTags) == 0x000038, "Wrong size on StateTagUtilities_HasAnyStateTags");
static_assert(offsetof(StateTagUtilities_HasAnyStateTags, ObjectStateProvider) == 0x000000, "Member 'StateTagUtilities_HasAnyStateTags::ObjectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_HasAnyStateTags, Tags) == 0x000010, "Member 'StateTagUtilities_HasAnyStateTags::Tags' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_HasAnyStateTags, ReturnValue) == 0x000030, "Member 'StateTagUtilities_HasAnyStateTags::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.HasStateTag
// 0x0020 (0x0020 - 0x0000)
struct StateTagUtilities_HasStateTag final
{
public:
	TScriptInterface<class IObjectStateProvider>  ObjectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_HasStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_HasStateTag");
static_assert(sizeof(StateTagUtilities_HasStateTag) == 0x000020, "Wrong size on StateTagUtilities_HasStateTag");
static_assert(offsetof(StateTagUtilities_HasStateTag, ObjectStateProvider) == 0x000000, "Member 'StateTagUtilities_HasStateTag::ObjectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_HasStateTag, Tag) == 0x000010, "Member 'StateTagUtilities_HasStateTag::Tag' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_HasStateTag, ReturnValue) == 0x00001C, "Member 'StateTagUtilities_HasStateTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.InteractionHasStateTag
// 0x0018 (0x0018 - 0x0000)
struct StateTagUtilities_InteractionHasStateTag final
{
public:
	const class UInteractionDefinition*           Interaction;                                       // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_InteractionHasStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_InteractionHasStateTag");
static_assert(sizeof(StateTagUtilities_InteractionHasStateTag) == 0x000018, "Wrong size on StateTagUtilities_InteractionHasStateTag");
static_assert(offsetof(StateTagUtilities_InteractionHasStateTag, Interaction) == 0x000000, "Member 'StateTagUtilities_InteractionHasStateTag::Interaction' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_InteractionHasStateTag, Tag) == 0x000008, "Member 'StateTagUtilities_InteractionHasStateTag::Tag' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_InteractionHasStateTag, ReturnValue) == 0x000014, "Member 'StateTagUtilities_InteractionHasStateTag::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.RemoveStateTag
// 0x0020 (0x0020 - 0x0000)
struct StateTagUtilities_RemoveStateTag final
{
public:
	TScriptInterface<class IObjectStateProvider>  ObjectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_RemoveStateTag) == 0x000008, "Wrong alignment on StateTagUtilities_RemoveStateTag");
static_assert(sizeof(StateTagUtilities_RemoveStateTag) == 0x000020, "Wrong size on StateTagUtilities_RemoveStateTag");
static_assert(offsetof(StateTagUtilities_RemoveStateTag, ObjectStateProvider) == 0x000000, "Member 'StateTagUtilities_RemoveStateTag::ObjectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_RemoveStateTag, Tag) == 0x000010, "Member 'StateTagUtilities_RemoveStateTag::Tag' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.RemoveStateTagToPlayer
// 0x0018 (0x0018 - 0x0000)
struct StateTagUtilities_RemoveStateTagToPlayer final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StateTagUtilities_RemoveStateTagToPlayer) == 0x000008, "Wrong alignment on StateTagUtilities_RemoveStateTagToPlayer");
static_assert(sizeof(StateTagUtilities_RemoveStateTagToPlayer) == 0x000018, "Wrong size on StateTagUtilities_RemoveStateTagToPlayer");
static_assert(offsetof(StateTagUtilities_RemoveStateTagToPlayer, Player) == 0x000000, "Member 'StateTagUtilities_RemoveStateTagToPlayer::Player' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_RemoveStateTagToPlayer, Tag) == 0x000008, "Member 'StateTagUtilities_RemoveStateTagToPlayer::Tag' has a wrong offset!");

// Function DeadByDaylight.StateTagUtilities.RemoveTagWithSource
// 0x0028 (0x0028 - 0x0000)
struct StateTagUtilities_RemoveTagWithSource final
{
public:
	TScriptInterface<class IObjectStateProvider>  ObjectStateProvider;                               // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class UObject*                          Source;                                            // 0x0020(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StateTagUtilities_RemoveTagWithSource) == 0x000008, "Wrong alignment on StateTagUtilities_RemoveTagWithSource");
static_assert(sizeof(StateTagUtilities_RemoveTagWithSource) == 0x000028, "Wrong size on StateTagUtilities_RemoveTagWithSource");
static_assert(offsetof(StateTagUtilities_RemoveTagWithSource, ObjectStateProvider) == 0x000000, "Member 'StateTagUtilities_RemoveTagWithSource::ObjectStateProvider' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_RemoveTagWithSource, Tag) == 0x000010, "Member 'StateTagUtilities_RemoveTagWithSource::Tag' has a wrong offset!");
static_assert(offsetof(StateTagUtilities_RemoveTagWithSource, Source) == 0x000020, "Member 'StateTagUtilities_RemoveTagWithSource::Source' has a wrong offset!");

// Function DeadByDaylight.OfflineLobbyLevel.CheckDestroyingPawns
// 0x0008 (0x0008 - 0x0000)
struct OfflineLobbyLevel_CheckDestroyingPawns final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfflineLobbyLevel_CheckDestroyingPawns) == 0x000008, "Wrong alignment on OfflineLobbyLevel_CheckDestroyingPawns");
static_assert(sizeof(OfflineLobbyLevel_CheckDestroyingPawns) == 0x000008, "Wrong size on OfflineLobbyLevel_CheckDestroyingPawns");
static_assert(offsetof(OfflineLobbyLevel_CheckDestroyingPawns, DestroyedActor) == 0x000000, "Member 'OfflineLobbyLevel_CheckDestroyingPawns::DestroyedActor' has a wrong offset!");

// Function DeadByDaylight.OfflineLobbyLevel.OnCharacterSpawned
// 0x0008 (0x0008 - 0x0000)
struct OfflineLobbyLevel_OnCharacterSpawned final
{
public:
	class ADBDMenuPlayer*                         Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfflineLobbyLevel_OnCharacterSpawned) == 0x000008, "Wrong alignment on OfflineLobbyLevel_OnCharacterSpawned");
static_assert(sizeof(OfflineLobbyLevel_OnCharacterSpawned) == 0x000008, "Wrong size on OfflineLobbyLevel_OnCharacterSpawned");
static_assert(offsetof(OfflineLobbyLevel_OnCharacterSpawned, Player) == 0x000000, "Member 'OfflineLobbyLevel_OnCharacterSpawned::Player' has a wrong offset!");

// Function DeadByDaylight.OfflineLobbyLevel.OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct OfflineLobbyLevel_OnStateChanged final
{
public:
	EOfflineLobbyState                            LobbyState;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfflineLobbyLevel_OnStateChanged) == 0x000001, "Wrong alignment on OfflineLobbyLevel_OnStateChanged");
static_assert(sizeof(OfflineLobbyLevel_OnStateChanged) == 0x000001, "Wrong size on OfflineLobbyLevel_OnStateChanged");
static_assert(offsetof(OfflineLobbyLevel_OnStateChanged, LobbyState) == 0x000000, "Member 'OfflineLobbyLevel_OnStateChanged::LobbyState' has a wrong offset!");

// Function DeadByDaylight.SurvivorBloodFXComponent.SpawnBloodSpurts
// 0x0008 (0x0008 - 0x0000)
struct SurvivorBloodFXComponent_SpawnBloodSpurts final
{
public:
	class UNiagaraComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorBloodFXComponent_SpawnBloodSpurts) == 0x000008, "Wrong alignment on SurvivorBloodFXComponent_SpawnBloodSpurts");
static_assert(sizeof(SurvivorBloodFXComponent_SpawnBloodSpurts) == 0x000008, "Wrong size on SurvivorBloodFXComponent_SpawnBloodSpurts");
static_assert(offsetof(SurvivorBloodFXComponent_SpawnBloodSpurts, ReturnValue) == 0x000000, "Member 'SurvivorBloodFXComponent_SpawnBloodSpurts::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.OutOfSightMeshRotator.SetMeshesToRotate
// 0x0010 (0x0010 - 0x0000)
struct OutOfSightMeshRotator_SetMeshesToRotate final
{
public:
	TArray<class UMeshComponent*>                 MeshesToRotate;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(OutOfSightMeshRotator_SetMeshesToRotate) == 0x000008, "Wrong alignment on OutOfSightMeshRotator_SetMeshesToRotate");
static_assert(sizeof(OutOfSightMeshRotator_SetMeshesToRotate) == 0x000010, "Wrong size on OutOfSightMeshRotator_SetMeshesToRotate");
static_assert(offsetof(OutOfSightMeshRotator_SetMeshesToRotate, MeshesToRotate) == 0x000000, "Member 'OutOfSightMeshRotator_SetMeshesToRotate::MeshesToRotate' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnAimAssistClick
// 0x0001 (0x0001 - 0x0000)
struct OverlayMenuScreen_OnAimAssistClick final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnAimAssistClick) == 0x000001, "Wrong alignment on OverlayMenuScreen_OnAimAssistClick");
static_assert(sizeof(OverlayMenuScreen_OnAimAssistClick) == 0x000001, "Wrong size on OverlayMenuScreen_OnAimAssistClick");
static_assert(offsetof(OverlayMenuScreen_OnAimAssistClick, Value) == 0x000000, "Member 'OverlayMenuScreen_OnAimAssistClick::Value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnAtlantaSettingButtonClick
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnAtlantaSettingButtonClick final
{
public:
	int32                                         buttonId;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnAtlantaSettingButtonClick) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnAtlantaSettingButtonClick");
static_assert(sizeof(OverlayMenuScreen_OnAtlantaSettingButtonClick) == 0x000004, "Wrong size on OverlayMenuScreen_OnAtlantaSettingButtonClick");
static_assert(offsetof(OverlayMenuScreen_OnAtlantaSettingButtonClick, buttonId) == 0x000000, "Member 'OverlayMenuScreen_OnAtlantaSettingButtonClick::buttonId' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnKillerCameraSensitivityChanged
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnKillerCameraSensitivityChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnKillerCameraSensitivityChanged) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnKillerCameraSensitivityChanged");
static_assert(sizeof(OverlayMenuScreen_OnKillerCameraSensitivityChanged) == 0x000004, "Wrong size on OverlayMenuScreen_OnKillerCameraSensitivityChanged");
static_assert(offsetof(OverlayMenuScreen_OnKillerCameraSensitivityChanged, Value) == 0x000000, "Member 'OverlayMenuScreen_OnKillerCameraSensitivityChanged::Value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnLanguageChange
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnLanguageChange final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnLanguageChange) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnLanguageChange");
static_assert(sizeof(OverlayMenuScreen_OnLanguageChange) == 0x000004, "Wrong size on OverlayMenuScreen_OnLanguageChange");
static_assert(offsetof(OverlayMenuScreen_OnLanguageChange, Value) == 0x000000, "Member 'OverlayMenuScreen_OnLanguageChange::Value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnPlayerInfoClick
// 0x0010 (0x0010 - 0x0000)
struct OverlayMenuScreen_OnPlayerInfoClick final
{
public:
	class FString                                 PlayerId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnPlayerInfoClick) == 0x000008, "Wrong alignment on OverlayMenuScreen_OnPlayerInfoClick");
static_assert(sizeof(OverlayMenuScreen_OnPlayerInfoClick) == 0x000010, "Wrong size on OverlayMenuScreen_OnPlayerInfoClick");
static_assert(offsetof(OverlayMenuScreen_OnPlayerInfoClick, PlayerId) == 0x000000, "Member 'OverlayMenuScreen_OnPlayerInfoClick::PlayerId' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnRequestKeyBindingInput
// 0x0018 (0x0018 - 0x0000)
struct OverlayMenuScreen_OnRequestKeyBindingInput final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Key;                                               // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnRequestKeyBindingInput) == 0x000008, "Wrong alignment on OverlayMenuScreen_OnRequestKeyBindingInput");
static_assert(sizeof(OverlayMenuScreen_OnRequestKeyBindingInput) == 0x000018, "Wrong size on OverlayMenuScreen_OnRequestKeyBindingInput");
static_assert(offsetof(OverlayMenuScreen_OnRequestKeyBindingInput, ID) == 0x000000, "Member 'OverlayMenuScreen_OnRequestKeyBindingInput::ID' has a wrong offset!");
static_assert(offsetof(OverlayMenuScreen_OnRequestKeyBindingInput, Key) == 0x000008, "Member 'OverlayMenuScreen_OnRequestKeyBindingInput::Key' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSelectTab
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnSelectTab final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnSelectTab) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSelectTab");
static_assert(sizeof(OverlayMenuScreen_OnSelectTab) == 0x000004, "Wrong size on OverlayMenuScreen_OnSelectTab");
static_assert(offsetof(OverlayMenuScreen_OnSelectTab, TabIndex) == 0x000000, "Member 'OverlayMenuScreen_OnSelectTab::TabIndex' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSettingsOptionButtonClicked
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnSettingsOptionButtonClicked final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnSettingsOptionButtonClicked) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSettingsOptionButtonClicked");
static_assert(sizeof(OverlayMenuScreen_OnSettingsOptionButtonClicked) == 0x000004, "Wrong size on OverlayMenuScreen_OnSettingsOptionButtonClicked");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionButtonClicked, ID) == 0x000000, "Member 'OverlayMenuScreen_OnSettingsOptionButtonClicked::ID' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSettingsOptionCheckboxSelected
// 0x0008 (0x0008 - 0x0000)
struct OverlayMenuScreen_OnSettingsOptionCheckboxSelected final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSelected;                                        // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OverlayMenuScreen_OnSettingsOptionCheckboxSelected) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSettingsOptionCheckboxSelected");
static_assert(sizeof(OverlayMenuScreen_OnSettingsOptionCheckboxSelected) == 0x000008, "Wrong size on OverlayMenuScreen_OnSettingsOptionCheckboxSelected");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionCheckboxSelected, ID) == 0x000000, "Member 'OverlayMenuScreen_OnSettingsOptionCheckboxSelected::ID' has a wrong offset!");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionCheckboxSelected, IsSelected) == 0x000004, "Member 'OverlayMenuScreen_OnSettingsOptionCheckboxSelected::IsSelected' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSettingsOptionIntValueChanged
// 0x0008 (0x0008 - 0x0000)
struct OverlayMenuScreen_OnSettingsOptionIntValueChanged final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnSettingsOptionIntValueChanged) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSettingsOptionIntValueChanged");
static_assert(sizeof(OverlayMenuScreen_OnSettingsOptionIntValueChanged) == 0x000008, "Wrong size on OverlayMenuScreen_OnSettingsOptionIntValueChanged");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionIntValueChanged, ID) == 0x000000, "Member 'OverlayMenuScreen_OnSettingsOptionIntValueChanged::ID' has a wrong offset!");
static_assert(offsetof(OverlayMenuScreen_OnSettingsOptionIntValueChanged, Value) == 0x000004, "Member 'OverlayMenuScreen_OnSettingsOptionIntValueChanged::Value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.OnSurvivorCameraSensitivityChanged
// 0x0004 (0x0004 - 0x0000)
struct OverlayMenuScreen_OnSurvivorCameraSensitivityChanged final
{
public:
	int32                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_OnSurvivorCameraSensitivityChanged) == 0x000004, "Wrong alignment on OverlayMenuScreen_OnSurvivorCameraSensitivityChanged");
static_assert(sizeof(OverlayMenuScreen_OnSurvivorCameraSensitivityChanged) == 0x000004, "Wrong size on OverlayMenuScreen_OnSurvivorCameraSensitivityChanged");
static_assert(offsetof(OverlayMenuScreen_OnSurvivorCameraSensitivityChanged, Value) == 0x000000, "Member 'OverlayMenuScreen_OnSurvivorCameraSensitivityChanged::Value' has a wrong offset!");

// Function DeadByDaylight.OverlayMenuScreen.SetGameType
// 0x0002 (0x0002 - 0x0000)
struct OverlayMenuScreen_SetGameType final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInCustomMatchManagerMode;                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OverlayMenuScreen_SetGameType) == 0x000001, "Wrong alignment on OverlayMenuScreen_SetGameType");
static_assert(sizeof(OverlayMenuScreen_SetGameType) == 0x000002, "Wrong size on OverlayMenuScreen_SetGameType");
static_assert(offsetof(OverlayMenuScreen_SetGameType, GameType) == 0x000000, "Member 'OverlayMenuScreen_SetGameType::GameType' has a wrong offset!");
static_assert(offsetof(OverlayMenuScreen_SetGameType, IsInCustomMatchManagerMode) == 0x000001, "Member 'OverlayMenuScreen_SetGameType::IsInCustomMatchManagerMode' has a wrong offset!");

// Function DeadByDaylight.Pallet.Authority_OnOverlapPushBox
// 0x0110 (0x0110 - 0x0000)
struct Pallet_Authority_OnOverlapPushBox final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_Authority_OnOverlapPushBox) == 0x000008, "Wrong alignment on Pallet_Authority_OnOverlapPushBox");
static_assert(sizeof(Pallet_Authority_OnOverlapPushBox) == 0x000110, "Wrong size on Pallet_Authority_OnOverlapPushBox");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, OverlappedComponent) == 0x000000, "Member 'Pallet_Authority_OnOverlapPushBox::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, OtherActor) == 0x000008, "Member 'Pallet_Authority_OnOverlapPushBox::OtherActor' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, OtherComp) == 0x000010, "Member 'Pallet_Authority_OnOverlapPushBox::OtherComp' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, OtherBodyIndex) == 0x000018, "Member 'Pallet_Authority_OnOverlapPushBox::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, bFromSweep) == 0x00001C, "Member 'Pallet_Authority_OnOverlapPushBox::bFromSweep' has a wrong offset!");
static_assert(offsetof(Pallet_Authority_OnOverlapPushBox, SweepResult) == 0x000020, "Member 'Pallet_Authority_OnOverlapPushBox::SweepResult' has a wrong offset!");

// Function DeadByDaylight.Pallet.BP_ExplodePallet
// 0x0008 (0x0008 - 0x0000)
struct Pallet_BP_ExplodePallet final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_BP_ExplodePallet) == 0x000008, "Wrong alignment on Pallet_BP_ExplodePallet");
static_assert(sizeof(Pallet_BP_ExplodePallet) == 0x000008, "Wrong size on Pallet_BP_ExplodePallet");
static_assert(offsetof(Pallet_BP_ExplodePallet, Player) == 0x000000, "Member 'Pallet_BP_ExplodePallet::Player' has a wrong offset!");

// Function DeadByDaylight.Pallet.EntityExplodePallet
// 0x0008 (0x0008 - 0x0000)
struct Pallet_EntityExplodePallet final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_EntityExplodePallet) == 0x000008, "Wrong alignment on Pallet_EntityExplodePallet");
static_assert(sizeof(Pallet_EntityExplodePallet) == 0x000008, "Wrong size on Pallet_EntityExplodePallet");
static_assert(offsetof(Pallet_EntityExplodePallet, Player) == 0x000000, "Member 'Pallet_EntityExplodePallet::Player' has a wrong offset!");

// Function DeadByDaylight.Pallet.ExplodePallet
// 0x0010 (0x0010 - 0x0000)
struct Pallet_ExplodePallet final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KickPallet;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Pallet_ExplodePallet) == 0x000008, "Wrong alignment on Pallet_ExplodePallet");
static_assert(sizeof(Pallet_ExplodePallet) == 0x000010, "Wrong size on Pallet_ExplodePallet");
static_assert(offsetof(Pallet_ExplodePallet, Player) == 0x000000, "Member 'Pallet_ExplodePallet::Player' has a wrong offset!");
static_assert(offsetof(Pallet_ExplodePallet, KickPallet) == 0x000008, "Member 'Pallet_ExplodePallet::KickPallet' has a wrong offset!");

// Function DeadByDaylight.Pallet.ExplodeStunPallet
// 0x0008 (0x0008 - 0x0000)
struct Pallet_ExplodeStunPallet final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_ExplodeStunPallet) == 0x000008, "Wrong alignment on Pallet_ExplodeStunPallet");
static_assert(sizeof(Pallet_ExplodeStunPallet) == 0x000008, "Wrong size on Pallet_ExplodeStunPallet");
static_assert(offsetof(Pallet_ExplodeStunPallet, Player) == 0x000000, "Member 'Pallet_ExplodeStunPallet::Player' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetZoneForRestrictedPlacement
// 0x0008 (0x0008 - 0x0000)
struct Pallet_GetZoneForRestrictedPlacement final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetZoneForRestrictedPlacement) == 0x000008, "Wrong alignment on Pallet_GetZoneForRestrictedPlacement");
static_assert(sizeof(Pallet_GetZoneForRestrictedPlacement) == 0x000008, "Wrong size on Pallet_GetZoneForRestrictedPlacement");
static_assert(offsetof(Pallet_GetZoneForRestrictedPlacement, ReturnValue) == 0x000000, "Member 'Pallet_GetZoneForRestrictedPlacement::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.Multicast_ExplodePallet
// 0x0010 (0x0010 - 0x0000)
struct Pallet_Multicast_ExplodePallet final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          byEntity;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Pallet_Multicast_ExplodePallet) == 0x000008, "Wrong alignment on Pallet_Multicast_ExplodePallet");
static_assert(sizeof(Pallet_Multicast_ExplodePallet) == 0x000010, "Wrong size on Pallet_Multicast_ExplodePallet");
static_assert(offsetof(Pallet_Multicast_ExplodePallet, Player) == 0x000000, "Member 'Pallet_Multicast_ExplodePallet::Player' has a wrong offset!");
static_assert(offsetof(Pallet_Multicast_ExplodePallet, byEntity) == 0x000008, "Member 'Pallet_Multicast_ExplodePallet::byEntity' has a wrong offset!");

// Function DeadByDaylight.Pallet.Multicast_StunActor
// 0x0018 (0x0018 - 0x0000)
struct Pallet_Multicast_StunActor final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          Survivor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StunBreakPallet;                                   // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Pallet_Multicast_StunActor) == 0x000008, "Wrong alignment on Pallet_Multicast_StunActor");
static_assert(sizeof(Pallet_Multicast_StunActor) == 0x000018, "Wrong size on Pallet_Multicast_StunActor");
static_assert(offsetof(Pallet_Multicast_StunActor, Actor) == 0x000000, "Member 'Pallet_Multicast_StunActor::Actor' has a wrong offset!");
static_assert(offsetof(Pallet_Multicast_StunActor, Survivor) == 0x000008, "Member 'Pallet_Multicast_StunActor::Survivor' has a wrong offset!");
static_assert(offsetof(Pallet_Multicast_StunActor, StunBreakPallet) == 0x000010, "Member 'Pallet_Multicast_StunActor::StunBreakPallet' has a wrong offset!");

// DelegateFunction DeadByDaylight.Pallet.OnPalletStateChangedCosmetic__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct Pallet_OnPalletStateChangedCosmetic__DelegateSignature final
{
public:
	EPalletState                                  NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_OnPalletStateChangedCosmetic__DelegateSignature) == 0x000001, "Wrong alignment on Pallet_OnPalletStateChangedCosmetic__DelegateSignature");
static_assert(sizeof(Pallet_OnPalletStateChangedCosmetic__DelegateSignature) == 0x000001, "Wrong size on Pallet_OnPalletStateChangedCosmetic__DelegateSignature");
static_assert(offsetof(Pallet_OnPalletStateChangedCosmetic__DelegateSignature, NewState) == 0x000000, "Member 'Pallet_OnPalletStateChangedCosmetic__DelegateSignature::NewState' has a wrong offset!");

// Function DeadByDaylight.Pallet.OnStunOverlap
// 0x0110 (0x0110 - 0x0000)
struct Pallet_OnStunOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_OnStunOverlap) == 0x000008, "Wrong alignment on Pallet_OnStunOverlap");
static_assert(sizeof(Pallet_OnStunOverlap) == 0x000110, "Wrong size on Pallet_OnStunOverlap");
static_assert(offsetof(Pallet_OnStunOverlap, OverlappedComponent) == 0x000000, "Member 'Pallet_OnStunOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, OtherActor) == 0x000008, "Member 'Pallet_OnStunOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, OtherComp) == 0x000010, "Member 'Pallet_OnStunOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, OtherBodyIndex) == 0x000018, "Member 'Pallet_OnStunOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, bFromSweep) == 0x00001C, "Member 'Pallet_OnStunOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(Pallet_OnStunOverlap, SweepResult) == 0x000020, "Member 'Pallet_OnStunOverlap::SweepResult' has a wrong offset!");

// Function DeadByDaylight.Pallet.PullDown
// 0x0010 (0x0010 - 0x0000)
struct Pallet_PullDown final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPalletPushSettings                    PushSettings;                                      // 0x0008(0x0002)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	EPalletStunZoneSideStrategy                   StunZoneSideStrategy;                              // 0x000A(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Pallet_PullDown) == 0x000008, "Wrong alignment on Pallet_PullDown");
static_assert(sizeof(Pallet_PullDown) == 0x000010, "Wrong size on Pallet_PullDown");
static_assert(offsetof(Pallet_PullDown, Player) == 0x000000, "Member 'Pallet_PullDown::Player' has a wrong offset!");
static_assert(offsetof(Pallet_PullDown, PushSettings) == 0x000008, "Member 'Pallet_PullDown::PushSettings' has a wrong offset!");
static_assert(offsetof(Pallet_PullDown, StunZoneSideStrategy) == 0x00000A, "Member 'Pallet_PullDown::StunZoneSideStrategy' has a wrong offset!");

// Function DeadByDaylight.Pallet.SetPalletState
// 0x0001 (0x0001 - 0x0000)
struct Pallet_SetPalletState final
{
public:
	EPalletState                                  State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_SetPalletState) == 0x000001, "Wrong alignment on Pallet_SetPalletState");
static_assert(sizeof(Pallet_SetPalletState) == 0x000001, "Wrong size on Pallet_SetPalletState");
static_assert(offsetof(Pallet_SetPalletState, State) == 0x000000, "Member 'Pallet_SetPalletState::State' has a wrong offset!");

// Function DeadByDaylight.Pallet.SetPendingDestruction
// 0x0001 (0x0001 - 0x0000)
struct Pallet_SetPendingDestruction final
{
public:
	bool                                          IsPendingDestruction;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_SetPendingDestruction) == 0x000001, "Wrong alignment on Pallet_SetPendingDestruction");
static_assert(sizeof(Pallet_SetPendingDestruction) == 0x000001, "Wrong size on Pallet_SetPendingDestruction");
static_assert(offsetof(Pallet_SetPendingDestruction, IsPendingDestruction) == 0x000000, "Member 'Pallet_SetPendingDestruction::IsPendingDestruction' has a wrong offset!");

// Function DeadByDaylight.Pallet.CanPulldown
// 0x0028 (0x0028 - 0x0000)
struct Pallet_CanPulldown final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                InteractionAxis;                                   // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStationary;                                      // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0021(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Pallet_CanPulldown) == 0x000008, "Wrong alignment on Pallet_CanPulldown");
static_assert(sizeof(Pallet_CanPulldown) == 0x000028, "Wrong size on Pallet_CanPulldown");
static_assert(offsetof(Pallet_CanPulldown, Player) == 0x000000, "Member 'Pallet_CanPulldown::Player' has a wrong offset!");
static_assert(offsetof(Pallet_CanPulldown, InteractionAxis) == 0x000008, "Member 'Pallet_CanPulldown::InteractionAxis' has a wrong offset!");
static_assert(offsetof(Pallet_CanPulldown, IsStationary) == 0x000020, "Member 'Pallet_CanPulldown::IsStationary' has a wrong offset!");
static_assert(offsetof(Pallet_CanPulldown, ReturnValue) == 0x000021, "Member 'Pallet_CanPulldown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetDestructibleAreaPrimitiveComponents
// 0x0010 (0x0010 - 0x0000)
struct Pallet_GetDestructibleAreaPrimitiveComponents final
{
public:
	TArray<class UPrimitiveComponent*>            Prims;                                             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetDestructibleAreaPrimitiveComponents) == 0x000008, "Wrong alignment on Pallet_GetDestructibleAreaPrimitiveComponents");
static_assert(sizeof(Pallet_GetDestructibleAreaPrimitiveComponents) == 0x000010, "Wrong size on Pallet_GetDestructibleAreaPrimitiveComponents");
static_assert(offsetof(Pallet_GetDestructibleAreaPrimitiveComponents, Prims) == 0x000000, "Member 'Pallet_GetDestructibleAreaPrimitiveComponents::Prims' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetFallDuration
// 0x0004 (0x0004 - 0x0000)
struct Pallet_GetFallDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetFallDuration) == 0x000004, "Wrong alignment on Pallet_GetFallDuration");
static_assert(sizeof(Pallet_GetFallDuration) == 0x000004, "Wrong size on Pallet_GetFallDuration");
static_assert(offsetof(Pallet_GetFallDuration, ReturnValue) == 0x000000, "Member 'Pallet_GetFallDuration::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetIsDreamPallet
// 0x0001 (0x0001 - 0x0000)
struct Pallet_GetIsDreamPallet final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetIsDreamPallet) == 0x000001, "Wrong alignment on Pallet_GetIsDreamPallet");
static_assert(sizeof(Pallet_GetIsDreamPallet) == 0x000001, "Wrong size on Pallet_GetIsDreamPallet");
static_assert(offsetof(Pallet_GetIsDreamPallet, ReturnValue) == 0x000000, "Member 'Pallet_GetIsDreamPallet::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetIsFragile
// 0x0001 (0x0001 - 0x0000)
struct Pallet_GetIsFragile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetIsFragile) == 0x000001, "Wrong alignment on Pallet_GetIsFragile");
static_assert(sizeof(Pallet_GetIsFragile) == 0x000001, "Wrong size on Pallet_GetIsFragile");
static_assert(offsetof(Pallet_GetIsFragile, ReturnValue) == 0x000000, "Member 'Pallet_GetIsFragile::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetIsPulledDown
// 0x0001 (0x0001 - 0x0000)
struct Pallet_GetIsPulledDown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetIsPulledDown) == 0x000001, "Wrong alignment on Pallet_GetIsPulledDown");
static_assert(sizeof(Pallet_GetIsPulledDown) == 0x000001, "Wrong size on Pallet_GetIsPulledDown");
static_assert(offsetof(Pallet_GetIsPulledDown, ReturnValue) == 0x000000, "Member 'Pallet_GetIsPulledDown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetPalletSkeletalMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct Pallet_GetPalletSkeletalMeshComponent final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetPalletSkeletalMeshComponent) == 0x000008, "Wrong alignment on Pallet_GetPalletSkeletalMeshComponent");
static_assert(sizeof(Pallet_GetPalletSkeletalMeshComponent) == 0x000008, "Wrong size on Pallet_GetPalletSkeletalMeshComponent");
static_assert(offsetof(Pallet_GetPalletSkeletalMeshComponent, ReturnValue) == 0x000000, "Member 'Pallet_GetPalletSkeletalMeshComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.GetPlayerDoingPulldown
// 0x0008 (0x0008 - 0x0000)
struct Pallet_GetPlayerDoingPulldown final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_GetPlayerDoingPulldown) == 0x000008, "Wrong alignment on Pallet_GetPlayerDoingPulldown");
static_assert(sizeof(Pallet_GetPlayerDoingPulldown) == 0x000008, "Wrong size on Pallet_GetPlayerDoingPulldown");
static_assert(offsetof(Pallet_GetPlayerDoingPulldown, ReturnValue) == 0x000000, "Member 'Pallet_GetPlayerDoingPulldown::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.IsDestroyedByEntity
// 0x0001 (0x0001 - 0x0000)
struct Pallet_IsDestroyedByEntity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_IsDestroyedByEntity) == 0x000001, "Wrong alignment on Pallet_IsDestroyedByEntity");
static_assert(sizeof(Pallet_IsDestroyedByEntity) == 0x000001, "Wrong size on Pallet_IsDestroyedByEntity");
static_assert(offsetof(Pallet_IsDestroyedByEntity, ReturnValue) == 0x000000, "Member 'Pallet_IsDestroyedByEntity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.IsPendingDestruction
// 0x0001 (0x0001 - 0x0000)
struct Pallet_IsPendingDestruction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_IsPendingDestruction) == 0x000001, "Wrong alignment on Pallet_IsPendingDestruction");
static_assert(sizeof(Pallet_IsPendingDestruction) == 0x000001, "Wrong size on Pallet_IsPendingDestruction");
static_assert(offsetof(Pallet_IsPendingDestruction, ReturnValue) == 0x000000, "Member 'Pallet_IsPendingDestruction::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Pallet.IsPulldownBlockedByEntity
// 0x0001 (0x0001 - 0x0000)
struct Pallet_IsPulldownBlockedByEntity final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pallet_IsPulldownBlockedByEntity) == 0x000001, "Wrong alignment on Pallet_IsPulldownBlockedByEntity");
static_assert(sizeof(Pallet_IsPulldownBlockedByEntity) == 0x000001, "Wrong size on Pallet_IsPulldownBlockedByEntity");
static_assert(offsetof(Pallet_IsPulldownBlockedByEntity, ReturnValue) == 0x000000, "Member 'Pallet_IsPulldownBlockedByEntity::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.GetAudioEventNameFromLocalizedTextId
// 0x0020 (0x0020 - 0x0000)
struct SubtitlesManager_GetAudioEventNameFromLocalizedTextId final
{
public:
	class FString                                 TextId;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesManager_GetAudioEventNameFromLocalizedTextId) == 0x000008, "Wrong alignment on SubtitlesManager_GetAudioEventNameFromLocalizedTextId");
static_assert(sizeof(SubtitlesManager_GetAudioEventNameFromLocalizedTextId) == 0x000020, "Wrong size on SubtitlesManager_GetAudioEventNameFromLocalizedTextId");
static_assert(offsetof(SubtitlesManager_GetAudioEventNameFromLocalizedTextId, TextId) == 0x000000, "Member 'SubtitlesManager_GetAudioEventNameFromLocalizedTextId::TextId' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_GetAudioEventNameFromLocalizedTextId, ReturnValue) == 0x000010, "Member 'SubtitlesManager_GetAudioEventNameFromLocalizedTextId::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.GetForcedAudioOrDialogLine
// 0x0010 (0x0010 - 0x0000)
struct SubtitlesManager_GetForcedAudioOrDialogLine final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesManager_GetForcedAudioOrDialogLine) == 0x000008, "Wrong alignment on SubtitlesManager_GetForcedAudioOrDialogLine");
static_assert(sizeof(SubtitlesManager_GetForcedAudioOrDialogLine) == 0x000010, "Wrong size on SubtitlesManager_GetForcedAudioOrDialogLine");
static_assert(offsetof(SubtitlesManager_GetForcedAudioOrDialogLine, ReturnValue) == 0x000000, "Member 'SubtitlesManager_GetForcedAudioOrDialogLine::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.HasAnimNotifyPlayedForThisMatch
// 0x0018 (0x0018 - 0x0000)
struct SubtitlesManager_HasAnimNotifyPlayedForThisMatch final
{
public:
	class FString                                 AnimNotify;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesManager_HasAnimNotifyPlayedForThisMatch) == 0x000008, "Wrong alignment on SubtitlesManager_HasAnimNotifyPlayedForThisMatch");
static_assert(sizeof(SubtitlesManager_HasAnimNotifyPlayedForThisMatch) == 0x000018, "Wrong size on SubtitlesManager_HasAnimNotifyPlayedForThisMatch");
static_assert(offsetof(SubtitlesManager_HasAnimNotifyPlayedForThisMatch, AnimNotify) == 0x000000, "Member 'SubtitlesManager_HasAnimNotifyPlayedForThisMatch::AnimNotify' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_HasAnimNotifyPlayedForThisMatch, ReturnValue) == 0x000010, "Member 'SubtitlesManager_HasAnimNotifyPlayedForThisMatch::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.IsDebuggingSubtitles
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesManager_IsDebuggingSubtitles final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesManager_IsDebuggingSubtitles) == 0x000001, "Wrong alignment on SubtitlesManager_IsDebuggingSubtitles");
static_assert(sizeof(SubtitlesManager_IsDebuggingSubtitles) == 0x000001, "Wrong size on SubtitlesManager_IsDebuggingSubtitles");
static_assert(offsetof(SubtitlesManager_IsDebuggingSubtitles, ReturnValue) == 0x000000, "Member 'SubtitlesManager_IsDebuggingSubtitles::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.Post2DAkEventWithSubtitles
// 0x0020 (0x0020 - 0x0000)
struct SubtitlesManager_Post2DAkEventWithSubtitles final
{
public:
	TArray<struct FAkEventWithSubtitle>           AkEventRandomizer;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkEventPlayed;                                     // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesManager_Post2DAkEventWithSubtitles) == 0x000008, "Wrong alignment on SubtitlesManager_Post2DAkEventWithSubtitles");
static_assert(sizeof(SubtitlesManager_Post2DAkEventWithSubtitles) == 0x000020, "Wrong size on SubtitlesManager_Post2DAkEventWithSubtitles");
static_assert(offsetof(SubtitlesManager_Post2DAkEventWithSubtitles, AkEventRandomizer) == 0x000000, "Member 'SubtitlesManager_Post2DAkEventWithSubtitles::AkEventRandomizer' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_Post2DAkEventWithSubtitles, AkEventPlayed) == 0x000010, "Member 'SubtitlesManager_Post2DAkEventWithSubtitles::AkEventPlayed' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_Post2DAkEventWithSubtitles, ReturnValue) == 0x000018, "Member 'SubtitlesManager_Post2DAkEventWithSubtitles::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.PostAkEventWithSubtitles
// 0x0048 (0x0048 - 0x0000)
struct SubtitlesManager_PostAkEventWithSubtitles final
{
public:
	class UAkGameObject*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAkEventWithSubtitle>           AkEventRandomizer;                                 // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         MaxSubtitleDistance;                               // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CallbackMask;                                      // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostEventCallback;                                 // 0x0020(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkEventPlayed;                                     // 0x0038(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SubtitlesManager_PostAkEventWithSubtitles) == 0x000008, "Wrong alignment on SubtitlesManager_PostAkEventWithSubtitles");
static_assert(sizeof(SubtitlesManager_PostAkEventWithSubtitles) == 0x000048, "Wrong size on SubtitlesManager_PostAkEventWithSubtitles");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, Target) == 0x000000, "Member 'SubtitlesManager_PostAkEventWithSubtitles::Target' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, AkEventRandomizer) == 0x000008, "Member 'SubtitlesManager_PostAkEventWithSubtitles::AkEventRandomizer' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, MaxSubtitleDistance) == 0x000018, "Member 'SubtitlesManager_PostAkEventWithSubtitles::MaxSubtitleDistance' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, CallbackMask) == 0x00001C, "Member 'SubtitlesManager_PostAkEventWithSubtitles::CallbackMask' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, PostEventCallback) == 0x000020, "Member 'SubtitlesManager_PostAkEventWithSubtitles::PostEventCallback' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, AkEventPlayed) == 0x000038, "Member 'SubtitlesManager_PostAkEventWithSubtitles::AkEventPlayed' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_PostAkEventWithSubtitles, ReturnValue) == 0x000040, "Member 'SubtitlesManager_PostAkEventWithSubtitles::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.RecordAnimNotifyPlayedForThisMatch
// 0x0010 (0x0010 - 0x0000)
struct SubtitlesManager_RecordAnimNotifyPlayedForThisMatch final
{
public:
	class FString                                 AnimNotify;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesManager_RecordAnimNotifyPlayedForThisMatch) == 0x000008, "Wrong alignment on SubtitlesManager_RecordAnimNotifyPlayedForThisMatch");
static_assert(sizeof(SubtitlesManager_RecordAnimNotifyPlayedForThisMatch) == 0x000010, "Wrong size on SubtitlesManager_RecordAnimNotifyPlayedForThisMatch");
static_assert(offsetof(SubtitlesManager_RecordAnimNotifyPlayedForThisMatch, AnimNotify) == 0x000000, "Member 'SubtitlesManager_RecordAnimNotifyPlayedForThisMatch::AnimNotify' has a wrong offset!");

// Function DeadByDaylight.SubtitlesManager.On3DEventCallback
// 0x0010 (0x0010 - 0x0000)
struct SubtitlesManager_On3DEventCallback final
{
public:
	EAkCallbackType                               CallbackType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkCallbackInfo*                        CallbackInfo;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesManager_On3DEventCallback) == 0x000008, "Wrong alignment on SubtitlesManager_On3DEventCallback");
static_assert(sizeof(SubtitlesManager_On3DEventCallback) == 0x000010, "Wrong size on SubtitlesManager_On3DEventCallback");
static_assert(offsetof(SubtitlesManager_On3DEventCallback, CallbackType) == 0x000000, "Member 'SubtitlesManager_On3DEventCallback::CallbackType' has a wrong offset!");
static_assert(offsetof(SubtitlesManager_On3DEventCallback, CallbackInfo) == 0x000008, "Member 'SubtitlesManager_On3DEventCallback::CallbackInfo' has a wrong offset!");

// Function DeadByDaylight.PalletPulldownBlockerComponent.Multicast_PalletPulldownBlockedHideCosmetic
// 0x0008 (0x0008 - 0x0000)
struct PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic final
{
public:
	class UObject*                                PalletToUnblock;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic) == 0x000008, "Wrong alignment on PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic");
static_assert(sizeof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic) == 0x000008, "Wrong size on PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic");
static_assert(offsetof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic, PalletToUnblock) == 0x000000, "Member 'PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedHideCosmetic::PalletToUnblock' has a wrong offset!");

// Function DeadByDaylight.PalletPulldownBlockerComponent.Multicast_PalletPulldownBlockedShowCosmetic
// 0x0008 (0x0008 - 0x0000)
struct PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic final
{
public:
	class UObject*                                PalletToBlock;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic) == 0x000008, "Wrong alignment on PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic");
static_assert(sizeof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic) == 0x000008, "Wrong size on PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic");
static_assert(offsetof(PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic, PalletToBlock) == 0x000000, "Member 'PalletPulldownBlockerComponent_Multicast_PalletPulldownBlockedShowCosmetic::PalletToBlock' has a wrong offset!");

// Function DeadByDaylight.PalletPulldownBlockerComponent.OnRep_PalletToBlock
// 0x0008 (0x0008 - 0x0000)
struct PalletPulldownBlockerComponent_OnRep_PalletToBlock final
{
public:
	class UObject*                                OldPalletToBlock;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletPulldownBlockerComponent_OnRep_PalletToBlock) == 0x000008, "Wrong alignment on PalletPulldownBlockerComponent_OnRep_PalletToBlock");
static_assert(sizeof(PalletPulldownBlockerComponent_OnRep_PalletToBlock) == 0x000008, "Wrong size on PalletPulldownBlockerComponent_OnRep_PalletToBlock");
static_assert(offsetof(PalletPulldownBlockerComponent_OnRep_PalletToBlock, OldPalletToBlock) == 0x000000, "Member 'PalletPulldownBlockerComponent_OnRep_PalletToBlock::OldPalletToBlock' has a wrong offset!");

// Function DeadByDaylight.PalletUtilities.GetDreamPalletBP
// 0x0040 (0x0040 - 0x0000)
struct PalletUtilities_GetDreamPalletBP final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletUtilities_GetDreamPalletBP) == 0x000008, "Wrong alignment on PalletUtilities_GetDreamPalletBP");
static_assert(sizeof(PalletUtilities_GetDreamPalletBP) == 0x000040, "Wrong size on PalletUtilities_GetDreamPalletBP");
static_assert(offsetof(PalletUtilities_GetDreamPalletBP, WorldContextObject) == 0x000000, "Member 'PalletUtilities_GetDreamPalletBP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PalletUtilities_GetDreamPalletBP, ReturnValue) == 0x000008, "Member 'PalletUtilities_GetDreamPalletBP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PalletUtilities.GetIllusionaryPalletStaticMesh
// 0x0040 (0x0040 - 0x0000)
struct PalletUtilities_GetIllusionaryPalletStaticMesh final
{
public:
	const class UObject*                          WorldContextObjec;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UStaticMesh>             ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletUtilities_GetIllusionaryPalletStaticMesh) == 0x000008, "Wrong alignment on PalletUtilities_GetIllusionaryPalletStaticMesh");
static_assert(sizeof(PalletUtilities_GetIllusionaryPalletStaticMesh) == 0x000040, "Wrong size on PalletUtilities_GetIllusionaryPalletStaticMesh");
static_assert(offsetof(PalletUtilities_GetIllusionaryPalletStaticMesh, WorldContextObjec) == 0x000000, "Member 'PalletUtilities_GetIllusionaryPalletStaticMesh::WorldContextObjec' has a wrong offset!");
static_assert(offsetof(PalletUtilities_GetIllusionaryPalletStaticMesh, ReturnValue) == 0x000008, "Member 'PalletUtilities_GetIllusionaryPalletStaticMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PalletUtilities.GetPalletTrackerBP
// 0x0040 (0x0040 - 0x0000)
struct PalletUtilities_GetPalletTrackerBP final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0008(0x0038)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PalletUtilities_GetPalletTrackerBP) == 0x000008, "Wrong alignment on PalletUtilities_GetPalletTrackerBP");
static_assert(sizeof(PalletUtilities_GetPalletTrackerBP) == 0x000040, "Wrong size on PalletUtilities_GetPalletTrackerBP");
static_assert(offsetof(PalletUtilities_GetPalletTrackerBP, WorldContextObject) == 0x000000, "Member 'PalletUtilities_GetPalletTrackerBP::WorldContextObject' has a wrong offset!");
static_assert(offsetof(PalletUtilities_GetPalletTrackerBP, ReturnValue) == 0x000008, "Member 'PalletUtilities_GetPalletTrackerBP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnAvailableItemClicked
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnAvailableItemClicked final
{
public:
	int32                                         ClickedItemIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnAvailableItemClicked) == 0x000004, "Wrong alignment on PanelScreen_OnAvailableItemClicked");
static_assert(sizeof(PanelScreen_OnAvailableItemClicked) == 0x000004, "Wrong size on PanelScreen_OnAvailableItemClicked");
static_assert(offsetof(PanelScreen_OnAvailableItemClicked, ClickedItemIndex) == 0x000000, "Member 'PanelScreen_OnAvailableItemClicked::ClickedItemIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnAvailableItemsSortingChange
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnAvailableItemsSortingChange final
{
public:
	int32                                         NewSorting;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnAvailableItemsSortingChange) == 0x000004, "Wrong alignment on PanelScreen_OnAvailableItemsSortingChange");
static_assert(sizeof(PanelScreen_OnAvailableItemsSortingChange) == 0x000004, "Wrong size on PanelScreen_OnAvailableItemsSortingChange");
static_assert(offsetof(PanelScreen_OnAvailableItemsSortingChange, NewSorting) == 0x000000, "Member 'PanelScreen_OnAvailableItemsSortingChange::NewSorting' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnCharacterSlotButtonClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnCharacterSlotButtonClick final
{
public:
	int32                                         CharacterIndex;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnCharacterSlotButtonClick) == 0x000004, "Wrong alignment on PanelScreen_OnCharacterSlotButtonClick");
static_assert(sizeof(PanelScreen_OnCharacterSlotButtonClick) == 0x000004, "Wrong size on PanelScreen_OnCharacterSlotButtonClick");
static_assert(offsetof(PanelScreen_OnCharacterSlotButtonClick, CharacterIndex) == 0x000000, "Member 'PanelScreen_OnCharacterSlotButtonClick::CharacterIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnConfirmCollectSelectedNode
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnConfirmCollectSelectedNode final
{
public:
	int32                                         CharacterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnConfirmCollectSelectedNode) == 0x000004, "Wrong alignment on PanelScreen_OnConfirmCollectSelectedNode");
static_assert(sizeof(PanelScreen_OnConfirmCollectSelectedNode) == 0x000004, "Wrong size on PanelScreen_OnConfirmCollectSelectedNode");
static_assert(offsetof(PanelScreen_OnConfirmCollectSelectedNode, CharacterId) == 0x000000, "Member 'PanelScreen_OnConfirmCollectSelectedNode::CharacterId' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnCustomizationPresetClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnCustomizationPresetClick final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnCustomizationPresetClick) == 0x000004, "Wrong alignment on PanelScreen_OnCustomizationPresetClick");
static_assert(sizeof(PanelScreen_OnCustomizationPresetClick) == 0x000004, "Wrong size on PanelScreen_OnCustomizationPresetClick");
static_assert(offsetof(PanelScreen_OnCustomizationPresetClick, Param_Index) == 0x000000, "Member 'PanelScreen_OnCustomizationPresetClick::Param_Index' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnEquipableSlotClicked
// 0x0008 (0x0008 - 0x0000)
struct PanelScreen_OnEquipableSlotClicked final
{
public:
	int32                                         ClickedSlotCategory;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClickedSlotIndex;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnEquipableSlotClicked) == 0x000004, "Wrong alignment on PanelScreen_OnEquipableSlotClicked");
static_assert(sizeof(PanelScreen_OnEquipableSlotClicked) == 0x000008, "Wrong size on PanelScreen_OnEquipableSlotClicked");
static_assert(offsetof(PanelScreen_OnEquipableSlotClicked, ClickedSlotCategory) == 0x000000, "Member 'PanelScreen_OnEquipableSlotClicked::ClickedSlotCategory' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnEquipableSlotClicked, ClickedSlotIndex) == 0x000004, "Member 'PanelScreen_OnEquipableSlotClicked::ClickedSlotIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnItemSelected
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnItemSelected final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnItemSelected) == 0x000004, "Wrong alignment on PanelScreen_OnItemSelected");
static_assert(sizeof(PanelScreen_OnItemSelected) == 0x000004, "Wrong size on PanelScreen_OnItemSelected");
static_assert(offsetof(PanelScreen_OnItemSelected, ItemIndex) == 0x000000, "Member 'PanelScreen_OnItemSelected::ItemIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnItemUnselected
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnItemUnselected final
{
public:
	int32                                         ItemIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnItemUnselected) == 0x000004, "Wrong alignment on PanelScreen_OnItemUnselected");
static_assert(sizeof(PanelScreen_OnItemUnselected) == 0x000004, "Wrong size on PanelScreen_OnItemUnselected");
static_assert(offsetof(PanelScreen_OnItemUnselected, ItemIndex) == 0x000000, "Member 'PanelScreen_OnItemUnselected::ItemIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnLoadoutPresetClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnLoadoutPresetClick final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnLoadoutPresetClick) == 0x000004, "Wrong alignment on PanelScreen_OnLoadoutPresetClick");
static_assert(sizeof(PanelScreen_OnLoadoutPresetClick) == 0x000004, "Wrong size on PanelScreen_OnLoadoutPresetClick");
static_assert(offsetof(PanelScreen_OnLoadoutPresetClick, Param_Index) == 0x000000, "Member 'PanelScreen_OnLoadoutPresetClick::Param_Index' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnLoadoutSlotButtonClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnLoadoutSlotButtonClick final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnLoadoutSlotButtonClick) == 0x000004, "Wrong alignment on PanelScreen_OnLoadoutSlotButtonClick");
static_assert(sizeof(PanelScreen_OnLoadoutSlotButtonClick) == 0x000004, "Wrong size on PanelScreen_OnLoadoutSlotButtonClick");
static_assert(offsetof(PanelScreen_OnLoadoutSlotButtonClick, SlotIndex) == 0x000000, "Member 'PanelScreen_OnLoadoutSlotButtonClick::SlotIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnPrestigeUp
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnPrestigeUp final
{
public:
	int32                                         CharacterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnPrestigeUp) == 0x000004, "Wrong alignment on PanelScreen_OnPrestigeUp");
static_assert(sizeof(PanelScreen_OnPrestigeUp) == 0x000004, "Wrong size on PanelScreen_OnPrestigeUp");
static_assert(offsetof(PanelScreen_OnPrestigeUp, CharacterId) == 0x000000, "Member 'PanelScreen_OnPrestigeUp::CharacterId' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnRegenerateButtonClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnRegenerateButtonClick final
{
public:
	int32                                         CharacterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnRegenerateButtonClick) == 0x000004, "Wrong alignment on PanelScreen_OnRegenerateButtonClick");
static_assert(sizeof(PanelScreen_OnRegenerateButtonClick) == 0x000004, "Wrong size on PanelScreen_OnRegenerateButtonClick");
static_assert(offsetof(PanelScreen_OnRegenerateButtonClick, CharacterId) == 0x000000, "Member 'PanelScreen_OnRegenerateButtonClick::CharacterId' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnReservedBloodPoints
// 0x000C (0x000C - 0x0000)
struct PanelScreen_OnReservedBloodPoints final
{
public:
	int32                                         CharacterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodPoints;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FullCost;                                          // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PanelScreen_OnReservedBloodPoints) == 0x000004, "Wrong alignment on PanelScreen_OnReservedBloodPoints");
static_assert(sizeof(PanelScreen_OnReservedBloodPoints) == 0x00000C, "Wrong size on PanelScreen_OnReservedBloodPoints");
static_assert(offsetof(PanelScreen_OnReservedBloodPoints, CharacterId) == 0x000000, "Member 'PanelScreen_OnReservedBloodPoints::CharacterId' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnReservedBloodPoints, BloodPoints) == 0x000004, "Member 'PanelScreen_OnReservedBloodPoints::BloodPoints' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnReservedBloodPoints, FullCost) == 0x000008, "Member 'PanelScreen_OnReservedBloodPoints::FullCost' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnRotateCharacter
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnRotateCharacter final
{
public:
	float                                         MouseDistanceChange;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnRotateCharacter) == 0x000004, "Wrong alignment on PanelScreen_OnRotateCharacter");
static_assert(sizeof(PanelScreen_OnRotateCharacter) == 0x000004, "Wrong size on PanelScreen_OnRotateCharacter");
static_assert(offsetof(PanelScreen_OnRotateCharacter, MouseDistanceChange) == 0x000000, "Member 'PanelScreen_OnRotateCharacter::MouseDistanceChange' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnSelectedEquipableSlotZoomChange
// 0x0001 (0x0001 - 0x0000)
struct PanelScreen_OnSelectedEquipableSlotZoomChange final
{
public:
	bool                                          ZoomIn;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnSelectedEquipableSlotZoomChange) == 0x000001, "Wrong alignment on PanelScreen_OnSelectedEquipableSlotZoomChange");
static_assert(sizeof(PanelScreen_OnSelectedEquipableSlotZoomChange) == 0x000001, "Wrong size on PanelScreen_OnSelectedEquipableSlotZoomChange");
static_assert(offsetof(PanelScreen_OnSelectedEquipableSlotZoomChange, ZoomIn) == 0x000000, "Member 'PanelScreen_OnSelectedEquipableSlotZoomChange::ZoomIn' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnSequenceStepCompleted
// 0x0008 (0x0008 - 0x0000)
struct PanelScreen_OnSequenceStepCompleted final
{
public:
	int32                                         CharacterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnSequenceStepCompleted) == 0x000004, "Wrong alignment on PanelScreen_OnSequenceStepCompleted");
static_assert(sizeof(PanelScreen_OnSequenceStepCompleted) == 0x000008, "Wrong size on PanelScreen_OnSequenceStepCompleted");
static_assert(offsetof(PanelScreen_OnSequenceStepCompleted, CharacterId) == 0x000000, "Member 'PanelScreen_OnSequenceStepCompleted::CharacterId' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnSequenceStepCompleted, ID) == 0x000004, "Member 'PanelScreen_OnSequenceStepCompleted::ID' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnSideTabButtonClick
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnSideTabButtonClick final
{
public:
	int32                                         TabIndex;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnSideTabButtonClick) == 0x000004, "Wrong alignment on PanelScreen_OnSideTabButtonClick");
static_assert(sizeof(PanelScreen_OnSideTabButtonClick) == 0x000004, "Wrong size on PanelScreen_OnSideTabButtonClick");
static_assert(offsetof(PanelScreen_OnSideTabButtonClick, TabIndex) == 0x000000, "Member 'PanelScreen_OnSideTabButtonClick::TabIndex' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnWebBuilt
// 0x0008 (0x0008 - 0x0000)
struct PanelScreen_OnWebBuilt final
{
public:
	int32                                         CharacterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEmpty;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PanelScreen_OnWebBuilt) == 0x000004, "Wrong alignment on PanelScreen_OnWebBuilt");
static_assert(sizeof(PanelScreen_OnWebBuilt) == 0x000008, "Wrong size on PanelScreen_OnWebBuilt");
static_assert(offsetof(PanelScreen_OnWebBuilt, CharacterId) == 0x000000, "Member 'PanelScreen_OnWebBuilt::CharacterId' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnWebBuilt, IsEmpty) == 0x000004, "Member 'PanelScreen_OnWebBuilt::IsEmpty' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnWebNodeHovered
// 0x0004 (0x0004 - 0x0000)
struct PanelScreen_OnWebNodeHovered final
{
public:
	int32                                         ID;                                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnWebNodeHovered) == 0x000004, "Wrong alignment on PanelScreen_OnWebNodeHovered");
static_assert(sizeof(PanelScreen_OnWebNodeHovered) == 0x000004, "Wrong size on PanelScreen_OnWebNodeHovered");
static_assert(offsetof(PanelScreen_OnWebNodeHovered, ID) == 0x000000, "Member 'PanelScreen_OnWebNodeHovered::ID' has a wrong offset!");

// Function DeadByDaylight.PanelScreen.OnWebNodeSelected
// 0x000C (0x000C - 0x0000)
struct PanelScreen_OnWebNodeSelected final
{
public:
	int32                                         CharacterId;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ID;                                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NodeDepth;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PanelScreen_OnWebNodeSelected) == 0x000004, "Wrong alignment on PanelScreen_OnWebNodeSelected");
static_assert(sizeof(PanelScreen_OnWebNodeSelected) == 0x00000C, "Wrong size on PanelScreen_OnWebNodeSelected");
static_assert(offsetof(PanelScreen_OnWebNodeSelected, CharacterId) == 0x000000, "Member 'PanelScreen_OnWebNodeSelected::CharacterId' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnWebNodeSelected, ID) == 0x000004, "Member 'PanelScreen_OnWebNodeSelected::ID' has a wrong offset!");
static_assert(offsetof(PanelScreen_OnWebNodeSelected, NodeDepth) == 0x000008, "Member 'PanelScreen_OnWebNodeSelected::NodeDepth' has a wrong offset!");

// Function DeadByDaylight.PawnAudioManager.ForcePawnAudioPriority
// 0x0010 (0x0010 - 0x0000)
struct PawnAudioManager_ForcePawnAudioPriority final
{
public:
	class ADBDBasePlayer*                         Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PawnAudioManager_ForcePawnAudioPriority) == 0x000008, "Wrong alignment on PawnAudioManager_ForcePawnAudioPriority");
static_assert(sizeof(PawnAudioManager_ForcePawnAudioPriority) == 0x000010, "Wrong size on PawnAudioManager_ForcePawnAudioPriority");
static_assert(offsetof(PawnAudioManager_ForcePawnAudioPriority, Pawn) == 0x000000, "Member 'PawnAudioManager_ForcePawnAudioPriority::Pawn' has a wrong offset!");
static_assert(offsetof(PawnAudioManager_ForcePawnAudioPriority, ReturnValue) == 0x000008, "Member 'PawnAudioManager_ForcePawnAudioPriority::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PawnAudioManager.IsPawnCurrentlyActive
// 0x0010 (0x0010 - 0x0000)
struct PawnAudioManager_IsPawnCurrentlyActive final
{
public:
	class ADBDBasePlayer*                         Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PawnAudioManager_IsPawnCurrentlyActive) == 0x000008, "Wrong alignment on PawnAudioManager_IsPawnCurrentlyActive");
static_assert(sizeof(PawnAudioManager_IsPawnCurrentlyActive) == 0x000010, "Wrong size on PawnAudioManager_IsPawnCurrentlyActive");
static_assert(offsetof(PawnAudioManager_IsPawnCurrentlyActive, Pawn) == 0x000000, "Member 'PawnAudioManager_IsPawnCurrentlyActive::Pawn' has a wrong offset!");
static_assert(offsetof(PawnAudioManager_IsPawnCurrentlyActive, ReturnValue) == 0x000008, "Member 'PawnAudioManager_IsPawnCurrentlyActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PawnAudioManager.PostAudioEventIfPawnCurrent
// 0x0018 (0x0018 - 0x0000)
struct PawnAudioManager_PostAudioEventIfPawnCurrent final
{
public:
	class ADBDBasePlayer*                         Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PawnAudioManager_PostAudioEventIfPawnCurrent) == 0x000008, "Wrong alignment on PawnAudioManager_PostAudioEventIfPawnCurrent");
static_assert(sizeof(PawnAudioManager_PostAudioEventIfPawnCurrent) == 0x000018, "Wrong size on PawnAudioManager_PostAudioEventIfPawnCurrent");
static_assert(offsetof(PawnAudioManager_PostAudioEventIfPawnCurrent, Pawn) == 0x000000, "Member 'PawnAudioManager_PostAudioEventIfPawnCurrent::Pawn' has a wrong offset!");
static_assert(offsetof(PawnAudioManager_PostAudioEventIfPawnCurrent, AudioEvent) == 0x000008, "Member 'PawnAudioManager_PostAudioEventIfPawnCurrent::AudioEvent' has a wrong offset!");
static_assert(offsetof(PawnAudioManager_PostAudioEventIfPawnCurrent, ReturnValue) == 0x000010, "Member 'PawnAudioManager_PostAudioEventIfPawnCurrent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PawnAudioManager.RegisterSlasherPawnAudio
// 0x0030 (0x0030 - 0x0000)
struct PawnAudioManager_RegisterSlasherPawnAudio final
{
public:
	class ADBDBasePlayer*                         SlasherPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnAudioEnabled;                                    // 0x0008(0x0014)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             OnAudioDisabled;                                   // 0x001C(0x0014)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnAudioManager_RegisterSlasherPawnAudio) == 0x000008, "Wrong alignment on PawnAudioManager_RegisterSlasherPawnAudio");
static_assert(sizeof(PawnAudioManager_RegisterSlasherPawnAudio) == 0x000030, "Wrong size on PawnAudioManager_RegisterSlasherPawnAudio");
static_assert(offsetof(PawnAudioManager_RegisterSlasherPawnAudio, SlasherPawn) == 0x000000, "Member 'PawnAudioManager_RegisterSlasherPawnAudio::SlasherPawn' has a wrong offset!");
static_assert(offsetof(PawnAudioManager_RegisterSlasherPawnAudio, OnAudioEnabled) == 0x000008, "Member 'PawnAudioManager_RegisterSlasherPawnAudio::OnAudioEnabled' has a wrong offset!");
static_assert(offsetof(PawnAudioManager_RegisterSlasherPawnAudio, OnAudioDisabled) == 0x00001C, "Member 'PawnAudioManager_RegisterSlasherPawnAudio::OnAudioDisabled' has a wrong offset!");

// Function DeadByDaylight.PawnAudioManager.UnregisterSlasherPawnAudio
// 0x0008 (0x0008 - 0x0000)
struct PawnAudioManager_UnregisterSlasherPawnAudio final
{
public:
	class ADBDBasePlayer*                         SlasherPawn;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PawnAudioManager_UnregisterSlasherPawnAudio) == 0x000008, "Wrong alignment on PawnAudioManager_UnregisterSlasherPawnAudio");
static_assert(sizeof(PawnAudioManager_UnregisterSlasherPawnAudio) == 0x000008, "Wrong size on PawnAudioManager_UnregisterSlasherPawnAudio");
static_assert(offsetof(PawnAudioManager_UnregisterSlasherPawnAudio, SlasherPawn) == 0x000000, "Member 'PawnAudioManager_UnregisterSlasherPawnAudio::SlasherPawn' has a wrong offset!");

// Function DeadByDaylight.PerkCollectionComponent.OnRep_Array
// 0x0010 (0x0010 - 0x0000)
struct PerkCollectionComponent_OnRep_Array final
{
public:
	TArray<class UPerk*>                          OldArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkCollectionComponent_OnRep_Array) == 0x000008, "Wrong alignment on PerkCollectionComponent_OnRep_Array");
static_assert(sizeof(PerkCollectionComponent_OnRep_Array) == 0x000010, "Wrong size on PerkCollectionComponent_OnRep_Array");
static_assert(offsetof(PerkCollectionComponent_OnRep_Array, OldArray) == 0x000000, "Member 'PerkCollectionComponent_OnRep_Array::OldArray' has a wrong offset!");

// DelegateFunction DeadByDaylight.PerkTrappableComponent.OnTrapAddedOrRemoved__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct PerkTrappableComponent_OnTrapAddedOrRemoved__DelegateSignature final
{
public:
	ETrapType                                     TrapType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkTrappableComponent_OnTrapAddedOrRemoved__DelegateSignature) == 0x000001, "Wrong alignment on PerkTrappableComponent_OnTrapAddedOrRemoved__DelegateSignature");
static_assert(sizeof(PerkTrappableComponent_OnTrapAddedOrRemoved__DelegateSignature) == 0x000001, "Wrong size on PerkTrappableComponent_OnTrapAddedOrRemoved__DelegateSignature");
static_assert(offsetof(PerkTrappableComponent_OnTrapAddedOrRemoved__DelegateSignature, TrapType) == 0x000000, "Member 'PerkTrappableComponent_OnTrapAddedOrRemoved__DelegateSignature::TrapType' has a wrong offset!");

// Function DeadByDaylight.PerkTrappableComponent.HasAnyTrap
// 0x0001 (0x0001 - 0x0000)
struct PerkTrappableComponent_HasAnyTrap final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkTrappableComponent_HasAnyTrap) == 0x000001, "Wrong alignment on PerkTrappableComponent_HasAnyTrap");
static_assert(sizeof(PerkTrappableComponent_HasAnyTrap) == 0x000001, "Wrong size on PerkTrappableComponent_HasAnyTrap");
static_assert(offsetof(PerkTrappableComponent_HasAnyTrap, ReturnValue) == 0x000000, "Member 'PerkTrappableComponent_HasAnyTrap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerkTrappableComponent.HasTrap
// 0x0002 (0x0002 - 0x0000)
struct PerkTrappableComponent_HasTrap final
{
public:
	ETrapType                                     TrapType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkTrappableComponent_HasTrap) == 0x000001, "Wrong alignment on PerkTrappableComponent_HasTrap");
static_assert(sizeof(PerkTrappableComponent_HasTrap) == 0x000002, "Wrong size on PerkTrappableComponent_HasTrap");
static_assert(offsetof(PerkTrappableComponent_HasTrap, TrapType) == 0x000000, "Member 'PerkTrappableComponent_HasTrap::TrapType' has a wrong offset!");
static_assert(offsetof(PerkTrappableComponent_HasTrap, ReturnValue) == 0x000001, "Member 'PerkTrappableComponent_HasTrap::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerspectiveEffectActivator.IsEffectActive
// 0x0010 (0x0010 - 0x0000)
struct PerspectiveEffectActivator_IsEffectActive final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerspectiveEffectActivator_IsEffectActive) == 0x000004, "Wrong alignment on PerspectiveEffectActivator_IsEffectActive");
static_assert(sizeof(PerspectiveEffectActivator_IsEffectActive) == 0x000010, "Wrong size on PerspectiveEffectActivator_IsEffectActive");
static_assert(offsetof(PerspectiveEffectActivator_IsEffectActive, EffectName) == 0x000000, "Member 'PerspectiveEffectActivator_IsEffectActive::EffectName' has a wrong offset!");
static_assert(offsetof(PerspectiveEffectActivator_IsEffectActive, ReturnValue) == 0x00000C, "Member 'PerspectiveEffectActivator_IsEffectActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PerspectiveEffectActivator.RegisterEffect
// 0x0028 (0x0028 - 0x0000)
struct PerspectiveEffectActivator_RegisterEffect final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerspectiveEffectData                 EffectData;                                        // 0x000C(0x001C)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveEffectActivator_RegisterEffect) == 0x000004, "Wrong alignment on PerspectiveEffectActivator_RegisterEffect");
static_assert(sizeof(PerspectiveEffectActivator_RegisterEffect) == 0x000028, "Wrong size on PerspectiveEffectActivator_RegisterEffect");
static_assert(offsetof(PerspectiveEffectActivator_RegisterEffect, EffectName) == 0x000000, "Member 'PerspectiveEffectActivator_RegisterEffect::EffectName' has a wrong offset!");
static_assert(offsetof(PerspectiveEffectActivator_RegisterEffect, EffectData) == 0x00000C, "Member 'PerspectiveEffectActivator_RegisterEffect::EffectData' has a wrong offset!");

// Function DeadByDaylight.PerspectiveEffectActivator.SetWantsActive
// 0x0010 (0x0010 - 0x0000)
struct PerspectiveEffectActivator_SetWantsActive final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WantsActive;                                       // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerspectiveEffectActivator_SetWantsActive) == 0x000004, "Wrong alignment on PerspectiveEffectActivator_SetWantsActive");
static_assert(sizeof(PerspectiveEffectActivator_SetWantsActive) == 0x000010, "Wrong size on PerspectiveEffectActivator_SetWantsActive");
static_assert(offsetof(PerspectiveEffectActivator_SetWantsActive, EffectName) == 0x000000, "Member 'PerspectiveEffectActivator_SetWantsActive::EffectName' has a wrong offset!");
static_assert(offsetof(PerspectiveEffectActivator_SetWantsActive, WantsActive) == 0x00000C, "Member 'PerspectiveEffectActivator_SetWantsActive::WantsActive' has a wrong offset!");

// Function DeadByDaylight.PerspectiveEffectActivator.UnregisterEffect
// 0x000C (0x000C - 0x0000)
struct PerspectiveEffectActivator_UnregisterEffect final
{
public:
	class FName                                   EffectName;                                        // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerspectiveEffectActivator_UnregisterEffect) == 0x000004, "Wrong alignment on PerspectiveEffectActivator_UnregisterEffect");
static_assert(sizeof(PerspectiveEffectActivator_UnregisterEffect) == 0x00000C, "Wrong size on PerspectiveEffectActivator_UnregisterEffect");
static_assert(offsetof(PerspectiveEffectActivator_UnregisterEffect, EffectName) == 0x000000, "Member 'PerspectiveEffectActivator_UnregisterEffect::EffectName' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.Authority_AddSicknessToPlayer
// 0x0010 (0x0010 - 0x0000)
struct PlagueUtilities_Authority_AddSicknessToPlayer final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SicknessToAdd;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlagueUtilities_Authority_AddSicknessToPlayer) == 0x000008, "Wrong alignment on PlagueUtilities_Authority_AddSicknessToPlayer");
static_assert(sizeof(PlagueUtilities_Authority_AddSicknessToPlayer) == 0x000010, "Wrong size on PlagueUtilities_Authority_AddSicknessToPlayer");
static_assert(offsetof(PlagueUtilities_Authority_AddSicknessToPlayer, Player) == 0x000000, "Member 'PlagueUtilities_Authority_AddSicknessToPlayer::Player' has a wrong offset!");
static_assert(offsetof(PlagueUtilities_Authority_AddSicknessToPlayer, SicknessToAdd) == 0x000008, "Member 'PlagueUtilities_Authority_AddSicknessToPlayer::SicknessToAdd' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.GetPlagueEffect
// 0x0010 (0x0010 - 0x0000)
struct PlagueUtilities_GetPlagueEffect final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USurvivorPlagueEffect*                  ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlagueUtilities_GetPlagueEffect) == 0x000008, "Wrong alignment on PlagueUtilities_GetPlagueEffect");
static_assert(sizeof(PlagueUtilities_GetPlagueEffect) == 0x000010, "Wrong size on PlagueUtilities_GetPlagueEffect");
static_assert(offsetof(PlagueUtilities_GetPlagueEffect, Player) == 0x000000, "Member 'PlagueUtilities_GetPlagueEffect::Player' has a wrong offset!");
static_assert(offsetof(PlagueUtilities_GetPlagueEffect, ReturnValue) == 0x000008, "Member 'PlagueUtilities_GetPlagueEffect::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.HasMaxLevelSickness
// 0x0010 (0x0010 - 0x0000)
struct PlagueUtilities_HasMaxLevelSickness final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlagueUtilities_HasMaxLevelSickness) == 0x000008, "Wrong alignment on PlagueUtilities_HasMaxLevelSickness");
static_assert(sizeof(PlagueUtilities_HasMaxLevelSickness) == 0x000010, "Wrong size on PlagueUtilities_HasMaxLevelSickness");
static_assert(offsetof(PlagueUtilities_HasMaxLevelSickness, Player) == 0x000000, "Member 'PlagueUtilities_HasMaxLevelSickness::Player' has a wrong offset!");
static_assert(offsetof(PlagueUtilities_HasMaxLevelSickness, ReturnValue) == 0x000008, "Member 'PlagueUtilities_HasMaxLevelSickness::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.IsInfected
// 0x0010 (0x0010 - 0x0000)
struct PlagueUtilities_IsInfected final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlagueUtilities_IsInfected) == 0x000008, "Wrong alignment on PlagueUtilities_IsInfected");
static_assert(sizeof(PlagueUtilities_IsInfected) == 0x000010, "Wrong size on PlagueUtilities_IsInfected");
static_assert(offsetof(PlagueUtilities_IsInfected, Player) == 0x000000, "Member 'PlagueUtilities_IsInfected::Player' has a wrong offset!");
static_assert(offsetof(PlagueUtilities_IsInfected, ReturnValue) == 0x000008, "Member 'PlagueUtilities_IsInfected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlagueUtilities.IsPlagueDebugModeActive
// 0x0001 (0x0001 - 0x0000)
struct PlagueUtilities_IsPlagueDebugModeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlagueUtilities_IsPlagueDebugModeActive) == 0x000001, "Wrong alignment on PlagueUtilities_IsPlagueDebugModeActive");
static_assert(sizeof(PlagueUtilities_IsPlagueDebugModeActive) == 0x000001, "Wrong size on PlagueUtilities_IsPlagueDebugModeActive");
static_assert(offsetof(PlagueUtilities_IsPlagueDebugModeActive, ReturnValue) == 0x000000, "Member 'PlagueUtilities_IsPlagueDebugModeActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.PlayerInGameAssetPreloadState.Server_SetPreloadCompleted
// 0x0010 (0x0010 - 0x0000)
struct PlayerInGameAssetPreloadState_Server_SetPreloadCompleted final
{
public:
	class FString                                 PreloadInfo;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerInGameAssetPreloadState_Server_SetPreloadCompleted) == 0x000008, "Wrong alignment on PlayerInGameAssetPreloadState_Server_SetPreloadCompleted");
static_assert(sizeof(PlayerInGameAssetPreloadState_Server_SetPreloadCompleted) == 0x000010, "Wrong size on PlayerInGameAssetPreloadState_Server_SetPreloadCompleted");
static_assert(offsetof(PlayerInGameAssetPreloadState_Server_SetPreloadCompleted, PreloadInfo) == 0x000000, "Member 'PlayerInGameAssetPreloadState_Server_SetPreloadCompleted::PreloadInfo' has a wrong offset!");

// Function DeadByDaylight.PlayerLockerStateComponent.Authority_OnSurvivorEndPlay
// 0x0010 (0x0010 - 0x0000)
struct PlayerLockerStateComponent_Authority_OnSurvivorEndPlay final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEndPlayReason                                EndPlayReason;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerLockerStateComponent_Authority_OnSurvivorEndPlay) == 0x000008, "Wrong alignment on PlayerLockerStateComponent_Authority_OnSurvivorEndPlay");
static_assert(sizeof(PlayerLockerStateComponent_Authority_OnSurvivorEndPlay) == 0x000010, "Wrong size on PlayerLockerStateComponent_Authority_OnSurvivorEndPlay");
static_assert(offsetof(PlayerLockerStateComponent_Authority_OnSurvivorEndPlay, Actor) == 0x000000, "Member 'PlayerLockerStateComponent_Authority_OnSurvivorEndPlay::Actor' has a wrong offset!");
static_assert(offsetof(PlayerLockerStateComponent_Authority_OnSurvivorEndPlay, EndPlayReason) == 0x000008, "Member 'PlayerLockerStateComponent_Authority_OnSurvivorEndPlay::EndPlayReason' has a wrong offset!");

// Function DeadByDaylight.PlayerLockerStateComponent.Multicast_EjectSurvivor
// 0x0008 (0x0008 - 0x0000)
struct PlayerLockerStateComponent_Multicast_EjectSurvivor final
{
public:
	class ALocker*                                Locker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLockerStateComponent_Multicast_EjectSurvivor) == 0x000008, "Wrong alignment on PlayerLockerStateComponent_Multicast_EjectSurvivor");
static_assert(sizeof(PlayerLockerStateComponent_Multicast_EjectSurvivor) == 0x000008, "Wrong size on PlayerLockerStateComponent_Multicast_EjectSurvivor");
static_assert(offsetof(PlayerLockerStateComponent_Multicast_EjectSurvivor, Locker) == 0x000000, "Member 'PlayerLockerStateComponent_Multicast_EjectSurvivor::Locker' has a wrong offset!");

// Function DeadByDaylight.PlayerLockerStateComponent.OnSurvivorHealthChanged
// 0x0002 (0x0002 - 0x0000)
struct PlayerLockerStateComponent_OnSurvivorHealthChanged final
{
public:
	ECamperDamageState                            before;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            After;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerLockerStateComponent_OnSurvivorHealthChanged) == 0x000001, "Wrong alignment on PlayerLockerStateComponent_OnSurvivorHealthChanged");
static_assert(sizeof(PlayerLockerStateComponent_OnSurvivorHealthChanged) == 0x000002, "Wrong size on PlayerLockerStateComponent_OnSurvivorHealthChanged");
static_assert(offsetof(PlayerLockerStateComponent_OnSurvivorHealthChanged, before) == 0x000000, "Member 'PlayerLockerStateComponent_OnSurvivorHealthChanged::before' has a wrong offset!");
static_assert(offsetof(PlayerLockerStateComponent_OnSurvivorHealthChanged, After) == 0x000001, "Member 'PlayerLockerStateComponent_OnSurvivorHealthChanged::After' has a wrong offset!");

// Function DeadByDaylight.PlayerPerspectiveComponent.OnPawnControllerChanged
// 0x0018 (0x0018 - 0x0000)
struct PlayerPerspectiveComponent_OnPawnControllerChanged final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            OldController;                                     // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            NewController;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerPerspectiveComponent_OnPawnControllerChanged) == 0x000008, "Wrong alignment on PlayerPerspectiveComponent_OnPawnControllerChanged");
static_assert(sizeof(PlayerPerspectiveComponent_OnPawnControllerChanged) == 0x000018, "Wrong size on PlayerPerspectiveComponent_OnPawnControllerChanged");
static_assert(offsetof(PlayerPerspectiveComponent_OnPawnControllerChanged, Pawn) == 0x000000, "Member 'PlayerPerspectiveComponent_OnPawnControllerChanged::Pawn' has a wrong offset!");
static_assert(offsetof(PlayerPerspectiveComponent_OnPawnControllerChanged, OldController) == 0x000008, "Member 'PlayerPerspectiveComponent_OnPawnControllerChanged::OldController' has a wrong offset!");
static_assert(offsetof(PlayerPerspectiveComponent_OnPawnControllerChanged, NewController) == 0x000010, "Member 'PlayerPerspectiveComponent_OnPawnControllerChanged::NewController' has a wrong offset!");

// Function DeadByDaylight.PlayerPerspectiveComponent.IsLocallyObserved
// 0x0001 (0x0001 - 0x0000)
struct PlayerPerspectiveComponent_IsLocallyObserved final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerPerspectiveComponent_IsLocallyObserved) == 0x000001, "Wrong alignment on PlayerPerspectiveComponent_IsLocallyObserved");
static_assert(sizeof(PlayerPerspectiveComponent_IsLocallyObserved) == 0x000001, "Wrong size on PlayerPerspectiveComponent_IsLocallyObserved");
static_assert(offsetof(PlayerPerspectiveComponent_IsLocallyObserved, ReturnValue) == 0x000000, "Member 'PlayerPerspectiveComponent_IsLocallyObserved::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.UIController.DrawBlockingArea
// 0x0048 (0x0048 - 0x0000)
struct UIController_DrawBlockingArea final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGeometry                              Geometry;                                          // 0x0010(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_DrawBlockingArea) == 0x000008, "Wrong alignment on UIController_DrawBlockingArea");
static_assert(sizeof(UIController_DrawBlockingArea) == 0x000048, "Wrong size on UIController_DrawBlockingArea");
static_assert(offsetof(UIController_DrawBlockingArea, ID) == 0x000000, "Member 'UIController_DrawBlockingArea::ID' has a wrong offset!");
static_assert(offsetof(UIController_DrawBlockingArea, Geometry) == 0x000010, "Member 'UIController_DrawBlockingArea::Geometry' has a wrong offset!");

// Function DeadByDaylight.UIController.RemoveBlockingArea
// 0x0010 (0x0010 - 0x0000)
struct UIController_RemoveBlockingArea final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIController_RemoveBlockingArea) == 0x000008, "Wrong alignment on UIController_RemoveBlockingArea");
static_assert(sizeof(UIController_RemoveBlockingArea) == 0x000010, "Wrong size on UIController_RemoveBlockingArea");
static_assert(offsetof(UIController_RemoveBlockingArea, ID) == 0x000000, "Member 'UIController_RemoveBlockingArea::ID' has a wrong offset!");

// Function DeadByDaylight.PostProcessUpdate.PostProcessToggle
// 0x0001 (0x0001 - 0x0000)
struct PostProcessUpdate_PostProcessToggle final
{
public:
	bool                                          Toggle;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PostProcessUpdate_PostProcessToggle) == 0x000001, "Wrong alignment on PostProcessUpdate_PostProcessToggle");
static_assert(sizeof(PostProcessUpdate_PostProcessToggle) == 0x000001, "Wrong size on PostProcessUpdate_PostProcessToggle");
static_assert(offsetof(PostProcessUpdate_PostProcessToggle, Toggle) == 0x000000, "Member 'PostProcessUpdate_PostProcessToggle::Toggle' has a wrong offset!");

// DelegateFunction DeadByDaylight.TutorialGameState.OnCurrentTutorialStepChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_OnCurrentTutorialStepChanged__DelegateSignature final
{
public:
	ETutorialStep                                 Step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_OnCurrentTutorialStepChanged__DelegateSignature) == 0x000001, "Wrong alignment on TutorialGameState_OnCurrentTutorialStepChanged__DelegateSignature");
static_assert(sizeof(TutorialGameState_OnCurrentTutorialStepChanged__DelegateSignature) == 0x000001, "Wrong size on TutorialGameState_OnCurrentTutorialStepChanged__DelegateSignature");
static_assert(offsetof(TutorialGameState_OnCurrentTutorialStepChanged__DelegateSignature, Step) == 0x000000, "Member 'TutorialGameState_OnCurrentTutorialStepChanged__DelegateSignature::Step' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.SetCurrentTutorialStep
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_SetCurrentTutorialStep final
{
public:
	ETutorialStep                                 Step;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_SetCurrentTutorialStep) == 0x000001, "Wrong alignment on TutorialGameState_SetCurrentTutorialStep");
static_assert(sizeof(TutorialGameState_SetCurrentTutorialStep) == 0x000001, "Wrong size on TutorialGameState_SetCurrentTutorialStep");
static_assert(offsetof(TutorialGameState_SetCurrentTutorialStep, Step) == 0x000000, "Member 'TutorialGameState_SetCurrentTutorialStep::Step' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.SetForcedHatchVisibility
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_SetForcedHatchVisibility final
{
public:
	bool                                          Param_IsHatchVisible;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_SetForcedHatchVisibility) == 0x000001, "Wrong alignment on TutorialGameState_SetForcedHatchVisibility");
static_assert(sizeof(TutorialGameState_SetForcedHatchVisibility) == 0x000001, "Wrong size on TutorialGameState_SetForcedHatchVisibility");
static_assert(offsetof(TutorialGameState_SetForcedHatchVisibility, Param_IsHatchVisible) == 0x000000, "Member 'TutorialGameState_SetForcedHatchVisibility::Param_IsHatchVisible' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.GetCurrentTutorialStep
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_GetCurrentTutorialStep final
{
public:
	ETutorialStep                                 ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_GetCurrentTutorialStep) == 0x000001, "Wrong alignment on TutorialGameState_GetCurrentTutorialStep");
static_assert(sizeof(TutorialGameState_GetCurrentTutorialStep) == 0x000001, "Wrong size on TutorialGameState_GetCurrentTutorialStep");
static_assert(offsetof(TutorialGameState_GetCurrentTutorialStep, ReturnValue) == 0x000000, "Member 'TutorialGameState_GetCurrentTutorialStep::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.IsTutorialStarted
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_IsTutorialStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_IsTutorialStarted) == 0x000001, "Wrong alignment on TutorialGameState_IsTutorialStarted");
static_assert(sizeof(TutorialGameState_IsTutorialStarted) == 0x000001, "Wrong size on TutorialGameState_IsTutorialStarted");
static_assert(offsetof(TutorialGameState_IsTutorialStarted, ReturnValue) == 0x000000, "Member 'TutorialGameState_IsTutorialStarted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialGameState.SetEscapeRequirementsVisibility
// 0x0001 (0x0001 - 0x0000)
struct TutorialGameState_SetEscapeRequirementsVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialGameState_SetEscapeRequirementsVisibility) == 0x000001, "Wrong alignment on TutorialGameState_SetEscapeRequirementsVisibility");
static_assert(sizeof(TutorialGameState_SetEscapeRequirementsVisibility) == 0x000001, "Wrong size on TutorialGameState_SetEscapeRequirementsVisibility");
static_assert(offsetof(TutorialGameState_SetEscapeRequirementsVisibility, IsVisible) == 0x000000, "Member 'TutorialGameState_SetEscapeRequirementsVisibility::IsVisible' has a wrong offset!");

// Function DeadByDaylight.ProceduralLevelBuilder.ApplyMist
// 0x0004 (0x0004 - 0x0000)
struct ProceduralLevelBuilder_ApplyMist final
{
public:
	float                                         Modifier;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralLevelBuilder_ApplyMist) == 0x000004, "Wrong alignment on ProceduralLevelBuilder_ApplyMist");
static_assert(sizeof(ProceduralLevelBuilder_ApplyMist) == 0x000004, "Wrong size on ProceduralLevelBuilder_ApplyMist");
static_assert(offsetof(ProceduralLevelBuilder_ApplyMist, Modifier) == 0x000000, "Member 'ProceduralLevelBuilder_ApplyMist::Modifier' has a wrong offset!");

// Function DeadByDaylight.ProceduralLevelBuilder.Multicast_DebugShareGenerationData
// 0x0038 (0x0038 - 0x0000)
struct ProceduralLevelBuilder_Multicast_DebugShareGenerationData final
{
public:
	struct FGenerationParams                      UsedParams;                                        // 0x0000(0x0038)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralLevelBuilder_Multicast_DebugShareGenerationData) == 0x000008, "Wrong alignment on ProceduralLevelBuilder_Multicast_DebugShareGenerationData");
static_assert(sizeof(ProceduralLevelBuilder_Multicast_DebugShareGenerationData) == 0x000038, "Wrong size on ProceduralLevelBuilder_Multicast_DebugShareGenerationData");
static_assert(offsetof(ProceduralLevelBuilder_Multicast_DebugShareGenerationData, UsedParams) == 0x000000, "Member 'ProceduralLevelBuilder_Multicast_DebugShareGenerationData::UsedParams' has a wrong offset!");

// Function DeadByDaylight.ProceduralLevelBuilder.SpawnActor
// 0x0018 (0x0018 - 0x0000)
struct ProceduralLevelBuilder_SpawnActor final
{
public:
	class UClass*                                 ActorClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETileSpawnPointType                           SpawnPointType;                                    // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProceduralLevelBuilder_SpawnActor) == 0x000008, "Wrong alignment on ProceduralLevelBuilder_SpawnActor");
static_assert(sizeof(ProceduralLevelBuilder_SpawnActor) == 0x000018, "Wrong size on ProceduralLevelBuilder_SpawnActor");
static_assert(offsetof(ProceduralLevelBuilder_SpawnActor, ActorClass) == 0x000000, "Member 'ProceduralLevelBuilder_SpawnActor::ActorClass' has a wrong offset!");
static_assert(offsetof(ProceduralLevelBuilder_SpawnActor, SpawnPointType) == 0x000008, "Member 'ProceduralLevelBuilder_SpawnActor::SpawnPointType' has a wrong offset!");
static_assert(offsetof(ProceduralLevelBuilder_SpawnActor, ReturnValue) == 0x000010, "Member 'ProceduralLevelBuilder_SpawnActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TimerGate.AddTime
// 0x0004 (0x0004 - 0x0000)
struct TimerGate_AddTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_AddTime) == 0x000004, "Wrong alignment on TimerGate_AddTime");
static_assert(sizeof(TimerGate_AddTime) == 0x000004, "Wrong size on TimerGate_AddTime");
static_assert(offsetof(TimerGate_AddTime, Time) == 0x000000, "Member 'TimerGate_AddTime::Time' has a wrong offset!");

// Function DeadByDaylight.TimerGate.RemoveTime
// 0x0004 (0x0004 - 0x0000)
struct TimerGate_RemoveTime final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_RemoveTime) == 0x000004, "Wrong alignment on TimerGate_RemoveTime");
static_assert(sizeof(TimerGate_RemoveTime) == 0x000004, "Wrong size on TimerGate_RemoveTime");
static_assert(offsetof(TimerGate_RemoveTime, Time) == 0x000000, "Member 'TimerGate_RemoveTime::Time' has a wrong offset!");

// Function DeadByDaylight.TimerGate.Rushed
// 0x0001 (0x0001 - 0x0000)
struct TimerGate_Rushed final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_Rushed) == 0x000001, "Wrong alignment on TimerGate_Rushed");
static_assert(sizeof(TimerGate_Rushed) == 0x000001, "Wrong size on TimerGate_Rushed");
static_assert(offsetof(TimerGate_Rushed, Success) == 0x000000, "Member 'TimerGate_Rushed::Success' has a wrong offset!");

// Function DeadByDaylight.TimerGate.SetValues
// 0x000C (0x000C - 0x0000)
struct TimerGate_SetValues final
{
public:
	float                                         TimerDuration;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushGain;                                          // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RushBlockDuration;                                 // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_SetValues) == 0x000004, "Wrong alignment on TimerGate_SetValues");
static_assert(sizeof(TimerGate_SetValues) == 0x00000C, "Wrong size on TimerGate_SetValues");
static_assert(offsetof(TimerGate_SetValues, TimerDuration) == 0x000000, "Member 'TimerGate_SetValues::TimerDuration' has a wrong offset!");
static_assert(offsetof(TimerGate_SetValues, RushGain) == 0x000004, "Member 'TimerGate_SetValues::RushGain' has a wrong offset!");
static_assert(offsetof(TimerGate_SetValues, RushBlockDuration) == 0x000008, "Member 'TimerGate_SetValues::RushBlockDuration' has a wrong offset!");

// Function DeadByDaylight.TimerGate.Update
// 0x0004 (0x0004 - 0x0000)
struct TimerGate_Update final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerGate_Update) == 0x000004, "Wrong alignment on TimerGate_Update");
static_assert(sizeof(TimerGate_Update) == 0x000004, "Wrong size on TimerGate_Update");
static_assert(offsetof(TimerGate_Update, DeltaTime) == 0x000000, "Member 'TimerGate_Update::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.RBTOutlineUpdateStrategy.IsRevealedToLocalPlayer_BP
// 0x0010 (0x0010 - 0x0000)
struct RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP) == 0x000008, "Wrong alignment on RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP");
static_assert(sizeof(RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP) == 0x000010, "Wrong size on RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP");
static_assert(offsetof(RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP, Player) == 0x000000, "Member 'RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP::Player' has a wrong offset!");
static_assert(offsetof(RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP, ReturnValue) == 0x000008, "Member 'RBTOutlineUpdateStrategy_IsRevealedToLocalPlayer_BP::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.RecoverInteractableDefinition.IsKillerInteracting
// 0x0001 (0x0001 - 0x0000)
struct RecoverInteractableDefinition_IsKillerInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecoverInteractableDefinition_IsKillerInteracting) == 0x000001, "Wrong alignment on RecoverInteractableDefinition_IsKillerInteracting");
static_assert(sizeof(RecoverInteractableDefinition_IsKillerInteracting) == 0x000001, "Wrong size on RecoverInteractableDefinition_IsKillerInteracting");
static_assert(offsetof(RecoverInteractableDefinition_IsKillerInteracting, ReturnValue) == 0x000000, "Member 'RecoverInteractableDefinition_IsKillerInteracting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.AttachSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_AttachSurvivor final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_AttachSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_AttachSurvivor");
static_assert(sizeof(ReverseBearTrap_AttachSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_AttachSurvivor");
static_assert(offsetof(ReverseBearTrap_AttachSurvivor, Survivor) == 0x000000, "Member 'ReverseBearTrap_AttachSurvivor::Survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.Authority_GenerateAttemptsNeeded
// 0x000C (0x000C - 0x0000)
struct ReverseBearTrap_Authority_GenerateAttemptsNeeded final
{
public:
	int32                                         RemainingAttemptsTotal;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemainingRBTs;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumRemovers;                                       // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_Authority_GenerateAttemptsNeeded) == 0x000004, "Wrong alignment on ReverseBearTrap_Authority_GenerateAttemptsNeeded");
static_assert(sizeof(ReverseBearTrap_Authority_GenerateAttemptsNeeded) == 0x00000C, "Wrong size on ReverseBearTrap_Authority_GenerateAttemptsNeeded");
static_assert(offsetof(ReverseBearTrap_Authority_GenerateAttemptsNeeded, RemainingAttemptsTotal) == 0x000000, "Member 'ReverseBearTrap_Authority_GenerateAttemptsNeeded::RemainingAttemptsTotal' has a wrong offset!");
static_assert(offsetof(ReverseBearTrap_Authority_GenerateAttemptsNeeded, RemainingRBTs) == 0x000004, "Member 'ReverseBearTrap_Authority_GenerateAttemptsNeeded::RemainingRBTs' has a wrong offset!");
static_assert(offsetof(ReverseBearTrap_Authority_GenerateAttemptsNeeded, NumRemovers) == 0x000008, "Member 'ReverseBearTrap_Authority_GenerateAttemptsNeeded::NumRemovers' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.Authority_OnGeneratorRepaired
// 0x0040 (0x0040 - 0x0000)
struct ReverseBearTrap_Authority_OnGeneratorRepaired final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_Authority_OnGeneratorRepaired) == 0x000008, "Wrong alignment on ReverseBearTrap_Authority_OnGeneratorRepaired");
static_assert(sizeof(ReverseBearTrap_Authority_OnGeneratorRepaired) == 0x000040, "Wrong size on ReverseBearTrap_Authority_OnGeneratorRepaired");
static_assert(offsetof(ReverseBearTrap_Authority_OnGeneratorRepaired, GameEventType) == 0x000000, "Member 'ReverseBearTrap_Authority_OnGeneratorRepaired::GameEventType' has a wrong offset!");
static_assert(offsetof(ReverseBearTrap_Authority_OnGeneratorRepaired, GameEventData) == 0x000010, "Member 'ReverseBearTrap_Authority_OnGeneratorRepaired::GameEventData' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.Authority_SetKeyID
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_Authority_SetKeyID final
{
public:
	int32                                         KeyId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_Authority_SetKeyID) == 0x000004, "Wrong alignment on ReverseBearTrap_Authority_SetKeyID");
static_assert(sizeof(ReverseBearTrap_Authority_SetKeyID) == 0x000004, "Wrong size on ReverseBearTrap_Authority_SetKeyID");
static_assert(offsetof(ReverseBearTrap_Authority_SetKeyID, KeyId) == 0x000000, "Member 'ReverseBearTrap_Authority_SetKeyID::KeyId' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.DetachSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_DetachSurvivor final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_DetachSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_DetachSurvivor");
static_assert(sizeof(ReverseBearTrap_DetachSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_DetachSurvivor");
static_assert(offsetof(ReverseBearTrap_DetachSurvivor, Survivor) == 0x000000, "Member 'ReverseBearTrap_DetachSurvivor::Survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.FastForwardExecutionTimer
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_FastForwardExecutionTimer final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_FastForwardExecutionTimer) == 0x000004, "Wrong alignment on ReverseBearTrap_FastForwardExecutionTimer");
static_assert(sizeof(ReverseBearTrap_FastForwardExecutionTimer) == 0x000004, "Wrong size on ReverseBearTrap_FastForwardExecutionTimer");
static_assert(offsetof(ReverseBearTrap_FastForwardExecutionTimer, DeltaTime) == 0x000000, "Member 'ReverseBearTrap_FastForwardExecutionTimer::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.NotifyDetachStarted
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_NotifyDetachStarted final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_NotifyDetachStarted) == 0x000008, "Wrong alignment on ReverseBearTrap_NotifyDetachStarted");
static_assert(sizeof(ReverseBearTrap_NotifyDetachStarted) == 0x000008, "Wrong size on ReverseBearTrap_NotifyDetachStarted");
static_assert(offsetof(ReverseBearTrap_NotifyDetachStarted, Survivor) == 0x000000, "Member 'ReverseBearTrap_NotifyDetachStarted::Survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.NotifyOnAttachSurvivorBegin
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_NotifyOnAttachSurvivorBegin final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_NotifyOnAttachSurvivorBegin) == 0x000008, "Wrong alignment on ReverseBearTrap_NotifyOnAttachSurvivorBegin");
static_assert(sizeof(ReverseBearTrap_NotifyOnAttachSurvivorBegin) == 0x000008, "Wrong size on ReverseBearTrap_NotifyOnAttachSurvivorBegin");
static_assert(offsetof(ReverseBearTrap_NotifyOnAttachSurvivorBegin, Survivor) == 0x000000, "Member 'ReverseBearTrap_NotifyOnAttachSurvivorBegin::Survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.OnAttachSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_OnAttachSurvivor final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_OnAttachSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_OnAttachSurvivor");
static_assert(sizeof(ReverseBearTrap_OnAttachSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_OnAttachSurvivor");
static_assert(offsetof(ReverseBearTrap_OnAttachSurvivor, Survivor) == 0x000000, "Member 'ReverseBearTrap_OnAttachSurvivor::Survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.OnAttachSurvivorBegin
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_OnAttachSurvivorBegin final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_OnAttachSurvivorBegin) == 0x000008, "Wrong alignment on ReverseBearTrap_OnAttachSurvivorBegin");
static_assert(sizeof(ReverseBearTrap_OnAttachSurvivorBegin) == 0x000008, "Wrong size on ReverseBearTrap_OnAttachSurvivorBegin");
static_assert(offsetof(ReverseBearTrap_OnAttachSurvivorBegin, Survivor) == 0x000000, "Member 'ReverseBearTrap_OnAttachSurvivorBegin::Survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.OnDetachSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_OnDetachSurvivor final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_OnDetachSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_OnDetachSurvivor");
static_assert(sizeof(ReverseBearTrap_OnDetachSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_OnDetachSurvivor");
static_assert(offsetof(ReverseBearTrap_OnDetachSurvivor, Survivor) == 0x000000, "Member 'ReverseBearTrap_OnDetachSurvivor::Survivor' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.OnWarningLevelChanged
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_OnWarningLevelChanged final
{
public:
	int32                                         PreviousWarningLevel;                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentWarningLevel;                               // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_OnWarningLevelChanged) == 0x000004, "Wrong alignment on ReverseBearTrap_OnWarningLevelChanged");
static_assert(sizeof(ReverseBearTrap_OnWarningLevelChanged) == 0x000008, "Wrong size on ReverseBearTrap_OnWarningLevelChanged");
static_assert(offsetof(ReverseBearTrap_OnWarningLevelChanged, PreviousWarningLevel) == 0x000000, "Member 'ReverseBearTrap_OnWarningLevelChanged::PreviousWarningLevel' has a wrong offset!");
static_assert(offsetof(ReverseBearTrap_OnWarningLevelChanged, CurrentWarningLevel) == 0x000004, "Member 'ReverseBearTrap_OnWarningLevelChanged::CurrentWarningLevel' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.ResetExecutionTimer
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_ResetExecutionTimer final
{
public:
	float                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_ResetExecutionTimer) == 0x000004, "Wrong alignment on ReverseBearTrap_ResetExecutionTimer");
static_assert(sizeof(ReverseBearTrap_ResetExecutionTimer) == 0x000004, "Wrong size on ReverseBearTrap_ResetExecutionTimer");
static_assert(offsetof(ReverseBearTrap_ResetExecutionTimer, Time) == 0x000000, "Member 'ReverseBearTrap_ResetExecutionTimer::Time' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.SetGateClosedAtAttachment
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_SetGateClosedAtAttachment final
{
public:
	bool                                          CLOSED;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_SetGateClosedAtAttachment) == 0x000001, "Wrong alignment on ReverseBearTrap_SetGateClosedAtAttachment");
static_assert(sizeof(ReverseBearTrap_SetGateClosedAtAttachment) == 0x000001, "Wrong size on ReverseBearTrap_SetGateClosedAtAttachment");
static_assert(offsetof(ReverseBearTrap_SetGateClosedAtAttachment, CLOSED) == 0x000000, "Member 'ReverseBearTrap_SetGateClosedAtAttachment::CLOSED' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.SetVisible
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_SetVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_SetVisible) == 0x000001, "Wrong alignment on ReverseBearTrap_SetVisible");
static_assert(sizeof(ReverseBearTrap_SetVisible) == 0x000001, "Wrong size on ReverseBearTrap_SetVisible");
static_assert(offsetof(ReverseBearTrap_SetVisible, Visible) == 0x000000, "Member 'ReverseBearTrap_SetVisible::Visible' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.CanExecute
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_CanExecute final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_CanExecute) == 0x000001, "Wrong alignment on ReverseBearTrap_CanExecute");
static_assert(sizeof(ReverseBearTrap_CanExecute) == 0x000001, "Wrong size on ReverseBearTrap_CanExecute");
static_assert(offsetof(ReverseBearTrap_CanExecute, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_CanExecute::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetAttachedSurvivor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrap_GetAttachedSurvivor final
{
public:
	class ACamperPlayer*                          ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetAttachedSurvivor) == 0x000008, "Wrong alignment on ReverseBearTrap_GetAttachedSurvivor");
static_assert(sizeof(ReverseBearTrap_GetAttachedSurvivor) == 0x000008, "Wrong size on ReverseBearTrap_GetAttachedSurvivor");
static_assert(offsetof(ReverseBearTrap_GetAttachedSurvivor, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetAttachedSurvivor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetAttemptsMade
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetAttemptsMade final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetAttemptsMade) == 0x000004, "Wrong alignment on ReverseBearTrap_GetAttemptsMade");
static_assert(sizeof(ReverseBearTrap_GetAttemptsMade) == 0x000004, "Wrong size on ReverseBearTrap_GetAttemptsMade");
static_assert(offsetof(ReverseBearTrap_GetAttemptsMade, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetAttemptsMade::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetAttemptsNeeded
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetAttemptsNeeded final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetAttemptsNeeded) == 0x000004, "Wrong alignment on ReverseBearTrap_GetAttemptsNeeded");
static_assert(sizeof(ReverseBearTrap_GetAttemptsNeeded) == 0x000004, "Wrong size on ReverseBearTrap_GetAttemptsNeeded");
static_assert(offsetof(ReverseBearTrap_GetAttemptsNeeded, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetAttemptsNeeded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetExecutionTimerPercentTimeElapsed
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetExecutionTimerPercentTimeElapsed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetExecutionTimerPercentTimeElapsed) == 0x000004, "Wrong alignment on ReverseBearTrap_GetExecutionTimerPercentTimeElapsed");
static_assert(sizeof(ReverseBearTrap_GetExecutionTimerPercentTimeElapsed) == 0x000004, "Wrong size on ReverseBearTrap_GetExecutionTimerPercentTimeElapsed");
static_assert(offsetof(ReverseBearTrap_GetExecutionTimerPercentTimeElapsed, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetExecutionTimerPercentTimeElapsed::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetExecutionTimerTimeLeft
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetExecutionTimerTimeLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetExecutionTimerTimeLeft) == 0x000004, "Wrong alignment on ReverseBearTrap_GetExecutionTimerTimeLeft");
static_assert(sizeof(ReverseBearTrap_GetExecutionTimerTimeLeft) == 0x000004, "Wrong size on ReverseBearTrap_GetExecutionTimerTimeLeft");
static_assert(offsetof(ReverseBearTrap_GetExecutionTimerTimeLeft, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetExecutionTimerTimeLeft::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetExitGatesPoweredAfterAttachment
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_GetExitGatesPoweredAfterAttachment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetExitGatesPoweredAfterAttachment) == 0x000001, "Wrong alignment on ReverseBearTrap_GetExitGatesPoweredAfterAttachment");
static_assert(sizeof(ReverseBearTrap_GetExitGatesPoweredAfterAttachment) == 0x000001, "Wrong size on ReverseBearTrap_GetExitGatesPoweredAfterAttachment");
static_assert(offsetof(ReverseBearTrap_GetExitGatesPoweredAfterAttachment, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetExitGatesPoweredAfterAttachment::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetGeneratorFixedAfterAttachment
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_GetGeneratorFixedAfterAttachment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetGeneratorFixedAfterAttachment) == 0x000001, "Wrong alignment on ReverseBearTrap_GetGeneratorFixedAfterAttachment");
static_assert(sizeof(ReverseBearTrap_GetGeneratorFixedAfterAttachment) == 0x000001, "Wrong size on ReverseBearTrap_GetGeneratorFixedAfterAttachment");
static_assert(offsetof(ReverseBearTrap_GetGeneratorFixedAfterAttachment, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetGeneratorFixedAfterAttachment::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetKeyID
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetKeyID final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetKeyID) == 0x000004, "Wrong alignment on ReverseBearTrap_GetKeyID");
static_assert(sizeof(ReverseBearTrap_GetKeyID) == 0x000004, "Wrong size on ReverseBearTrap_GetKeyID");
static_assert(offsetof(ReverseBearTrap_GetKeyID, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetKeyID::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetWarningLevel
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrap_GetWarningLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetWarningLevel) == 0x000004, "Wrong alignment on ReverseBearTrap_GetWarningLevel");
static_assert(sizeof(ReverseBearTrap_GetWarningLevel) == 0x000004, "Wrong size on ReverseBearTrap_GetWarningLevel");
static_assert(offsetof(ReverseBearTrap_GetWarningLevel, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetWarningLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.GetWasGateClosedAtAttachment
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_GetWasGateClosedAtAttachment final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_GetWasGateClosedAtAttachment) == 0x000001, "Wrong alignment on ReverseBearTrap_GetWasGateClosedAtAttachment");
static_assert(sizeof(ReverseBearTrap_GetWasGateClosedAtAttachment) == 0x000001, "Wrong size on ReverseBearTrap_GetWasGateClosedAtAttachment");
static_assert(offsetof(ReverseBearTrap_GetWasGateClosedAtAttachment, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_GetWasGateClosedAtAttachment::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.HasDetachStarted
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_HasDetachStarted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_HasDetachStarted) == 0x000001, "Wrong alignment on ReverseBearTrap_HasDetachStarted");
static_assert(sizeof(ReverseBearTrap_HasDetachStarted) == 0x000001, "Wrong size on ReverseBearTrap_HasDetachStarted");
static_assert(offsetof(ReverseBearTrap_HasDetachStarted, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_HasDetachStarted::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.IsExecutionTimerActive
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_IsExecutionTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_IsExecutionTimerActive) == 0x000001, "Wrong alignment on ReverseBearTrap_IsExecutionTimerActive");
static_assert(sizeof(ReverseBearTrap_IsExecutionTimerActive) == 0x000001, "Wrong size on ReverseBearTrap_IsExecutionTimerActive");
static_assert(offsetof(ReverseBearTrap_IsExecutionTimerActive, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_IsExecutionTimerActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.IsExecutionTimerDone
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_IsExecutionTimerDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_IsExecutionTimerDone) == 0x000001, "Wrong alignment on ReverseBearTrap_IsExecutionTimerDone");
static_assert(sizeof(ReverseBearTrap_IsExecutionTimerDone) == 0x000001, "Wrong size on ReverseBearTrap_IsExecutionTimerDone");
static_assert(offsetof(ReverseBearTrap_IsExecutionTimerDone, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_IsExecutionTimerDone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.IsInWarningZone
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_IsInWarningZone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_IsInWarningZone) == 0x000001, "Wrong alignment on ReverseBearTrap_IsInWarningZone");
static_assert(sizeof(ReverseBearTrap_IsInWarningZone) == 0x000001, "Wrong size on ReverseBearTrap_IsInWarningZone");
static_assert(offsetof(ReverseBearTrap_IsInWarningZone, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_IsInWarningZone::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.IsRBTActivated
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_IsRBTActivated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_IsRBTActivated) == 0x000001, "Wrong alignment on ReverseBearTrap_IsRBTActivated");
static_assert(sizeof(ReverseBearTrap_IsRBTActivated) == 0x000001, "Wrong size on ReverseBearTrap_IsRBTActivated");
static_assert(offsetof(ReverseBearTrap_IsRBTActivated, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_IsRBTActivated::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrap.ShouldUpdateExecutionTimer
// 0x0001 (0x0001 - 0x0000)
struct ReverseBearTrap_ShouldUpdateExecutionTimer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrap_ShouldUpdateExecutionTimer) == 0x000001, "Wrong alignment on ReverseBearTrap_ShouldUpdateExecutionTimer");
static_assert(sizeof(ReverseBearTrap_ShouldUpdateExecutionTimer) == 0x000001, "Wrong size on ReverseBearTrap_ShouldUpdateExecutionTimer");
static_assert(offsetof(ReverseBearTrap_ShouldUpdateExecutionTimer, ReturnValue) == 0x000000, "Member 'ReverseBearTrap_ShouldUpdateExecutionTimer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.AddKey
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrapRemover_AddKey final
{
public:
	int32                                         KeyId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_AddKey) == 0x000004, "Wrong alignment on ReverseBearTrapRemover_AddKey");
static_assert(sizeof(ReverseBearTrapRemover_AddKey) == 0x000004, "Wrong size on ReverseBearTrapRemover_AddKey");
static_assert(offsetof(ReverseBearTrapRemover_AddKey, KeyId) == 0x000000, "Member 'ReverseBearTrapRemover_AddKey::KeyId' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.AddSearchedKey
// 0x0004 (0x0004 - 0x0000)
struct ReverseBearTrapRemover_AddSearchedKey final
{
public:
	int32                                         KeyId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_AddSearchedKey) == 0x000004, "Wrong alignment on ReverseBearTrapRemover_AddSearchedKey");
static_assert(sizeof(ReverseBearTrapRemover_AddSearchedKey) == 0x000004, "Wrong size on ReverseBearTrapRemover_AddSearchedKey");
static_assert(offsetof(ReverseBearTrapRemover_AddSearchedKey, KeyId) == 0x000000, "Member 'ReverseBearTrapRemover_AddSearchedKey::KeyId' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.GetAttachedRBT
// 0x0010 (0x0010 - 0x0000)
struct ReverseBearTrapRemover_GetAttachedRBT final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReverseBearTrap*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_GetAttachedRBT) == 0x000008, "Wrong alignment on ReverseBearTrapRemover_GetAttachedRBT");
static_assert(sizeof(ReverseBearTrapRemover_GetAttachedRBT) == 0x000010, "Wrong size on ReverseBearTrapRemover_GetAttachedRBT");
static_assert(offsetof(ReverseBearTrapRemover_GetAttachedRBT, Player) == 0x000000, "Member 'ReverseBearTrapRemover_GetAttachedRBT::Player' has a wrong offset!");
static_assert(offsetof(ReverseBearTrapRemover_GetAttachedRBT, ReturnValue) == 0x000008, "Member 'ReverseBearTrapRemover_GetAttachedRBT::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.GetInteractorPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrapRemover_GetInteractorPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_GetInteractorPrimitiveComponent) == 0x000008, "Wrong alignment on ReverseBearTrapRemover_GetInteractorPrimitiveComponent");
static_assert(sizeof(ReverseBearTrapRemover_GetInteractorPrimitiveComponent) == 0x000008, "Wrong size on ReverseBearTrapRemover_GetInteractorPrimitiveComponent");
static_assert(offsetof(ReverseBearTrapRemover_GetInteractorPrimitiveComponent, ReturnValue) == 0x000000, "Member 'ReverseBearTrapRemover_GetInteractorPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.GetMapActor
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrapRemover_GetMapActor final
{
public:
	class UMapActorComponent*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapRemover_GetMapActor) == 0x000008, "Wrong alignment on ReverseBearTrapRemover_GetMapActor");
static_assert(sizeof(ReverseBearTrapRemover_GetMapActor) == 0x000008, "Wrong size on ReverseBearTrapRemover_GetMapActor");
static_assert(offsetof(ReverseBearTrapRemover_GetMapActor, ReturnValue) == 0x000000, "Member 'ReverseBearTrapRemover_GetMapActor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.HasKey
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrapRemover_HasKey final
{
public:
	int32                                         KeyId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ReverseBearTrapRemover_HasKey) == 0x000004, "Wrong alignment on ReverseBearTrapRemover_HasKey");
static_assert(sizeof(ReverseBearTrapRemover_HasKey) == 0x000008, "Wrong size on ReverseBearTrapRemover_HasKey");
static_assert(offsetof(ReverseBearTrapRemover_HasKey, KeyId) == 0x000000, "Member 'ReverseBearTrapRemover_HasKey::KeyId' has a wrong offset!");
static_assert(offsetof(ReverseBearTrapRemover_HasKey, ReturnValue) == 0x000004, "Member 'ReverseBearTrapRemover_HasKey::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapRemover.HasSearchedForKey
// 0x0008 (0x0008 - 0x0000)
struct ReverseBearTrapRemover_HasSearchedForKey final
{
public:
	int32                                         KeyId;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ReverseBearTrapRemover_HasSearchedForKey) == 0x000004, "Wrong alignment on ReverseBearTrapRemover_HasSearchedForKey");
static_assert(sizeof(ReverseBearTrapRemover_HasSearchedForKey) == 0x000008, "Wrong size on ReverseBearTrapRemover_HasSearchedForKey");
static_assert(offsetof(ReverseBearTrapRemover_HasSearchedForKey, KeyId) == 0x000000, "Member 'ReverseBearTrapRemover_HasSearchedForKey::KeyId' has a wrong offset!");
static_assert(offsetof(ReverseBearTrapRemover_HasSearchedForKey, ReturnValue) == 0x000004, "Member 'ReverseBearTrapRemover_HasSearchedForKey::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ReverseBearTrapUtilities.GetAttachedRBT
// 0x0010 (0x0010 - 0x0000)
struct ReverseBearTrapUtilities_GetAttachedRBT final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AReverseBearTrap*                       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReverseBearTrapUtilities_GetAttachedRBT) == 0x000008, "Wrong alignment on ReverseBearTrapUtilities_GetAttachedRBT");
static_assert(sizeof(ReverseBearTrapUtilities_GetAttachedRBT) == 0x000010, "Wrong size on ReverseBearTrapUtilities_GetAttachedRBT");
static_assert(offsetof(ReverseBearTrapUtilities_GetAttachedRBT, Player) == 0x000000, "Member 'ReverseBearTrapUtilities_GetAttachedRBT::Player' has a wrong offset!");
static_assert(offsetof(ReverseBearTrapUtilities_GetAttachedRBT, ReturnValue) == 0x000008, "Member 'ReverseBearTrapUtilities_GetAttachedRBT::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SlashableActivationSourceCollection.AddSource
// 0x0008 (0x0008 - 0x0000)
struct SlashableActivationSourceCollection_AddSource final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlashableActivationSourceCollection_AddSource) == 0x000008, "Wrong alignment on SlashableActivationSourceCollection_AddSource");
static_assert(sizeof(SlashableActivationSourceCollection_AddSource) == 0x000008, "Wrong size on SlashableActivationSourceCollection_AddSource");
static_assert(offsetof(SlashableActivationSourceCollection_AddSource, Source) == 0x000000, "Member 'SlashableActivationSourceCollection_AddSource::Source' has a wrong offset!");

// Function DeadByDaylight.SlashableActivationSourceCollection.ForceActivate
// 0x0008 (0x0008 - 0x0000)
struct SlashableActivationSourceCollection_ForceActivate final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlashableActivationSourceCollection_ForceActivate) == 0x000008, "Wrong alignment on SlashableActivationSourceCollection_ForceActivate");
static_assert(sizeof(SlashableActivationSourceCollection_ForceActivate) == 0x000008, "Wrong size on SlashableActivationSourceCollection_ForceActivate");
static_assert(offsetof(SlashableActivationSourceCollection_ForceActivate, WorldContextObject) == 0x000000, "Member 'SlashableActivationSourceCollection_ForceActivate::WorldContextObject' has a wrong offset!");

// Function DeadByDaylight.SlashableActivationSourceCollection.RemoveSource
// 0x0008 (0x0008 - 0x0000)
struct SlashableActivationSourceCollection_RemoveSource final
{
public:
	class UObject*                                Source;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlashableActivationSourceCollection_RemoveSource) == 0x000008, "Wrong alignment on SlashableActivationSourceCollection_RemoveSource");
static_assert(sizeof(SlashableActivationSourceCollection_RemoveSource) == 0x000008, "Wrong size on SlashableActivationSourceCollection_RemoveSource");
static_assert(offsetof(SlashableActivationSourceCollection_RemoveSource, Source) == 0x000000, "Member 'SlashableActivationSourceCollection_RemoveSource::Source' has a wrong offset!");

// Function DeadByDaylight.RootMovie.AddCursorBlockingWidget
// 0x0020 (0x0020 - 0x0000)
struct RootMovie_AddCursorBlockingWidget final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Width;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_AddCursorBlockingWidget) == 0x000008, "Wrong alignment on RootMovie_AddCursorBlockingWidget");
static_assert(sizeof(RootMovie_AddCursorBlockingWidget) == 0x000020, "Wrong size on RootMovie_AddCursorBlockingWidget");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, ID) == 0x000000, "Member 'RootMovie_AddCursorBlockingWidget::ID' has a wrong offset!");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, X) == 0x000010, "Member 'RootMovie_AddCursorBlockingWidget::X' has a wrong offset!");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, Y) == 0x000014, "Member 'RootMovie_AddCursorBlockingWidget::Y' has a wrong offset!");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, Width) == 0x000018, "Member 'RootMovie_AddCursorBlockingWidget::Width' has a wrong offset!");
static_assert(offsetof(RootMovie_AddCursorBlockingWidget, Height) == 0x00001C, "Member 'RootMovie_AddCursorBlockingWidget::Height' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OnAssert
// 0x0018 (0x0018 - 0x0000)
struct RootMovie_OnAssert final
{
public:
	int32                                         Type;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OnAssert) == 0x000008, "Wrong alignment on RootMovie_OnAssert");
static_assert(sizeof(RootMovie_OnAssert) == 0x000018, "Wrong size on RootMovie_OnAssert");
static_assert(offsetof(RootMovie_OnAssert, Type) == 0x000000, "Member 'RootMovie_OnAssert::Type' has a wrong offset!");
static_assert(offsetof(RootMovie_OnAssert, Message) == 0x000008, "Member 'RootMovie_OnAssert::Message' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OnScreenEnter
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_OnScreenEnter final
{
public:
	class FString                                 ScreenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OnScreenEnter) == 0x000008, "Wrong alignment on RootMovie_OnScreenEnter");
static_assert(sizeof(RootMovie_OnScreenEnter) == 0x000010, "Wrong size on RootMovie_OnScreenEnter");
static_assert(offsetof(RootMovie_OnScreenEnter, ScreenId) == 0x000000, "Member 'RootMovie_OnScreenEnter::ScreenId' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OnScreenLeave
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_OnScreenLeave final
{
public:
	class FString                                 ScreenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OnScreenLeave) == 0x000008, "Wrong alignment on RootMovie_OnScreenLeave");
static_assert(sizeof(RootMovie_OnScreenLeave) == 0x000010, "Wrong size on RootMovie_OnScreenLeave");
static_assert(offsetof(RootMovie_OnScreenLeave, ScreenId) == 0x000000, "Member 'RootMovie_OnScreenLeave::ScreenId' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OnScreenReady
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_OnScreenReady final
{
public:
	class FString                                 ScreenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OnScreenReady) == 0x000008, "Wrong alignment on RootMovie_OnScreenReady");
static_assert(sizeof(RootMovie_OnScreenReady) == 0x000010, "Wrong size on RootMovie_OnScreenReady");
static_assert(offsetof(RootMovie_OnScreenReady, ScreenId) == 0x000000, "Member 'RootMovie_OnScreenReady::ScreenId' has a wrong offset!");

// Function DeadByDaylight.RootMovie.OpenLinkInBrowser
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_OpenLinkInBrowser final
{
public:
	class FString                                 LinkAddress;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_OpenLinkInBrowser) == 0x000008, "Wrong alignment on RootMovie_OpenLinkInBrowser");
static_assert(sizeof(RootMovie_OpenLinkInBrowser) == 0x000010, "Wrong size on RootMovie_OpenLinkInBrowser");
static_assert(offsetof(RootMovie_OpenLinkInBrowser, LinkAddress) == 0x000000, "Member 'RootMovie_OpenLinkInBrowser::LinkAddress' has a wrong offset!");

// Function DeadByDaylight.RootMovie.PlaySound
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_PlaySound final
{
public:
	class FString                                 SoundId;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_PlaySound) == 0x000008, "Wrong alignment on RootMovie_PlaySound");
static_assert(sizeof(RootMovie_PlaySound) == 0x000010, "Wrong size on RootMovie_PlaySound");
static_assert(offsetof(RootMovie_PlaySound, SoundId) == 0x000000, "Member 'RootMovie_PlaySound::SoundId' has a wrong offset!");

// Function DeadByDaylight.RootMovie.RegisterScreenControl
// 0x0008 (0x0008 - 0x0000)
struct RootMovie_RegisterScreenControl final
{
public:
	class UGFxObject*                             FlashObj;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_RegisterScreenControl) == 0x000008, "Wrong alignment on RootMovie_RegisterScreenControl");
static_assert(sizeof(RootMovie_RegisterScreenControl) == 0x000008, "Wrong size on RootMovie_RegisterScreenControl");
static_assert(offsetof(RootMovie_RegisterScreenControl, FlashObj) == 0x000000, "Member 'RootMovie_RegisterScreenControl::FlashObj' has a wrong offset!");

// Function DeadByDaylight.RootMovie.RegisterUIControl
// 0x0008 (0x0008 - 0x0000)
struct RootMovie_RegisterUIControl final
{
public:
	class UGFxObject*                             FlashObj;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_RegisterUIControl) == 0x000008, "Wrong alignment on RootMovie_RegisterUIControl");
static_assert(sizeof(RootMovie_RegisterUIControl) == 0x000008, "Wrong size on RootMovie_RegisterUIControl");
static_assert(offsetof(RootMovie_RegisterUIControl, FlashObj) == 0x000000, "Member 'RootMovie_RegisterUIControl::FlashObj' has a wrong offset!");

// Function DeadByDaylight.RootMovie.RegisterView
// 0x0018 (0x0018 - 0x0000)
struct RootMovie_RegisterView final
{
public:
	class FString                                 ScreenId;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGFxObject*                             ScreenObject;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_RegisterView) == 0x000008, "Wrong alignment on RootMovie_RegisterView");
static_assert(sizeof(RootMovie_RegisterView) == 0x000018, "Wrong size on RootMovie_RegisterView");
static_assert(offsetof(RootMovie_RegisterView, ScreenId) == 0x000000, "Member 'RootMovie_RegisterView::ScreenId' has a wrong offset!");
static_assert(offsetof(RootMovie_RegisterView, ScreenObject) == 0x000010, "Member 'RootMovie_RegisterView::ScreenObject' has a wrong offset!");

// Function DeadByDaylight.RootMovie.RemoveCursorBlockingWidget
// 0x0010 (0x0010 - 0x0000)
struct RootMovie_RemoveCursorBlockingWidget final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_RemoveCursorBlockingWidget) == 0x000008, "Wrong alignment on RootMovie_RemoveCursorBlockingWidget");
static_assert(sizeof(RootMovie_RemoveCursorBlockingWidget) == 0x000010, "Wrong size on RootMovie_RemoveCursorBlockingWidget");
static_assert(offsetof(RootMovie_RemoveCursorBlockingWidget, ID) == 0x000000, "Member 'RootMovie_RemoveCursorBlockingWidget::ID' has a wrong offset!");

// Function DeadByDaylight.RootMovie.SetCursorAsSticky
// 0x0008 (0x0008 - 0x0000)
struct RootMovie_SetCursorAsSticky final
{
public:
	bool                                          IsSticky;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LockVertical;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LockHorizontal;                                    // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StickinessOverride;                                // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RootMovie_SetCursorAsSticky) == 0x000004, "Wrong alignment on RootMovie_SetCursorAsSticky");
static_assert(sizeof(RootMovie_SetCursorAsSticky) == 0x000008, "Wrong size on RootMovie_SetCursorAsSticky");
static_assert(offsetof(RootMovie_SetCursorAsSticky, IsSticky) == 0x000000, "Member 'RootMovie_SetCursorAsSticky::IsSticky' has a wrong offset!");
static_assert(offsetof(RootMovie_SetCursorAsSticky, LockVertical) == 0x000001, "Member 'RootMovie_SetCursorAsSticky::LockVertical' has a wrong offset!");
static_assert(offsetof(RootMovie_SetCursorAsSticky, LockHorizontal) == 0x000002, "Member 'RootMovie_SetCursorAsSticky::LockHorizontal' has a wrong offset!");
static_assert(offsetof(RootMovie_SetCursorAsSticky, StickinessOverride) == 0x000004, "Member 'RootMovie_SetCursorAsSticky::StickinessOverride' has a wrong offset!");

// Function DeadByDaylight.UMGDragWidget_HudEditor.SetOnSelection
// 0x0001 (0x0001 - 0x0000)
struct UMGDragWidget_HudEditor_SetOnSelection final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDragWidget_HudEditor_SetOnSelection) == 0x000001, "Wrong alignment on UMGDragWidget_HudEditor_SetOnSelection");
static_assert(sizeof(UMGDragWidget_HudEditor_SetOnSelection) == 0x000001, "Wrong size on UMGDragWidget_HudEditor_SetOnSelection");
static_assert(offsetof(UMGDragWidget_HudEditor_SetOnSelection, IsSelected) == 0x000000, "Member 'UMGDragWidget_HudEditor_SetOnSelection::IsSelected' has a wrong offset!");

// Function DeadByDaylight.UMGDragWidget_HudEditor.GetCustomWrapper
// 0x0008 (0x0008 - 0x0000)
struct UMGDragWidget_HudEditor_GetCustomWrapper final
{
public:
	class UCustomWidgetWrapper_HudEditor*         ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UMGDragWidget_HudEditor_GetCustomWrapper) == 0x000008, "Wrong alignment on UMGDragWidget_HudEditor_GetCustomWrapper");
static_assert(sizeof(UMGDragWidget_HudEditor_GetCustomWrapper) == 0x000008, "Wrong size on UMGDragWidget_HudEditor_GetCustomWrapper");
static_assert(offsetof(UMGDragWidget_HudEditor_GetCustomWrapper, ReturnValue) == 0x000000, "Member 'UMGDragWidget_HudEditor_GetCustomWrapper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ScreamComponent_OnDamageStateChanged final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            NewDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreamComponent_OnDamageStateChanged) == 0x000001, "Wrong alignment on ScreamComponent_OnDamageStateChanged");
static_assert(sizeof(ScreamComponent_OnDamageStateChanged) == 0x000002, "Wrong size on ScreamComponent_OnDamageStateChanged");
static_assert(offsetof(ScreamComponent_OnDamageStateChanged, OldDamageState) == 0x000000, "Member 'ScreamComponent_OnDamageStateChanged::OldDamageState' has a wrong offset!");
static_assert(offsetof(ScreamComponent_OnDamageStateChanged, NewDamageState) == 0x000001, "Member 'ScreamComponent_OnDamageStateChanged::NewDamageState' has a wrong offset!");

// DelegateFunction DeadByDaylight.ScreamComponent.ScreamRevealOwner__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct ScreamComponent_ScreamRevealOwner__DelegateSignature final
{
public:
	float                                         ScreamRevealDuration;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SpawnBubbleIndicator;                              // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreamComponent_ScreamRevealOwner__DelegateSignature) == 0x000004, "Wrong alignment on ScreamComponent_ScreamRevealOwner__DelegateSignature");
static_assert(sizeof(ScreamComponent_ScreamRevealOwner__DelegateSignature) == 0x000008, "Wrong size on ScreamComponent_ScreamRevealOwner__DelegateSignature");
static_assert(offsetof(ScreamComponent_ScreamRevealOwner__DelegateSignature, ScreamRevealDuration) == 0x000000, "Member 'ScreamComponent_ScreamRevealOwner__DelegateSignature::ScreamRevealDuration' has a wrong offset!");
static_assert(offsetof(ScreamComponent_ScreamRevealOwner__DelegateSignature, SpawnBubbleIndicator) == 0x000004, "Member 'ScreamComponent_ScreamRevealOwner__DelegateSignature::SpawnBubbleIndicator' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.TriggerScreamEventsAndAndAnimationIfPossible
// 0x0038 (0x0038 - 0x0000)
struct ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible final
{
public:
	bool                                          FireLoudNoiseEvent;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMontagePlaybackDefinition             MontageDefinition;                                 // 0x0008(0x0028)(Parm, NativeAccessSpecifierPublic)
	float                                         AudibleRange;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible) == 0x000008, "Wrong alignment on ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible");
static_assert(sizeof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible) == 0x000038, "Wrong size on ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible, FireLoudNoiseEvent) == 0x000000, "Member 'ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible::FireLoudNoiseEvent' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible, MontageDefinition) == 0x000008, "Member 'ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible::MontageDefinition' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible, AudibleRange) == 0x000030, "Member 'ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible::AudibleRange' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible, ReturnValue) == 0x000034, "Member 'ScreamComponent_TriggerScreamEventsAndAndAnimationIfPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.TriggerScreamEventsIfPossible
// 0x000C (0x000C - 0x0000)
struct ScreamComponent_TriggerScreamEventsIfPossible final
{
public:
	bool                                          FireLoudNoiseEvent;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AudibleRange;                                      // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreamComponent_TriggerScreamEventsIfPossible) == 0x000004, "Wrong alignment on ScreamComponent_TriggerScreamEventsIfPossible");
static_assert(sizeof(ScreamComponent_TriggerScreamEventsIfPossible) == 0x00000C, "Wrong size on ScreamComponent_TriggerScreamEventsIfPossible");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsIfPossible, FireLoudNoiseEvent) == 0x000000, "Member 'ScreamComponent_TriggerScreamEventsIfPossible::FireLoudNoiseEvent' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsIfPossible, AudibleRange) == 0x000004, "Member 'ScreamComponent_TriggerScreamEventsIfPossible::AudibleRange' has a wrong offset!");
static_assert(offsetof(ScreamComponent_TriggerScreamEventsIfPossible, ReturnValue) == 0x000008, "Member 'ScreamComponent_TriggerScreamEventsIfPossible::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.CanScream
// 0x0001 (0x0001 - 0x0000)
struct ScreamComponent_CanScream final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreamComponent_CanScream) == 0x000001, "Wrong alignment on ScreamComponent_CanScream");
static_assert(sizeof(ScreamComponent_CanScream) == 0x000001, "Wrong size on ScreamComponent_CanScream");
static_assert(offsetof(ScreamComponent_CanScream, ReturnValue) == 0x000000, "Member 'ScreamComponent_CanScream::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.GetCanScreamAndPreventNextScreamIfNeeded
// 0x0001 (0x0001 - 0x0000)
struct ScreamComponent_GetCanScreamAndPreventNextScreamIfNeeded final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreamComponent_GetCanScreamAndPreventNextScreamIfNeeded) == 0x000001, "Wrong alignment on ScreamComponent_GetCanScreamAndPreventNextScreamIfNeeded");
static_assert(sizeof(ScreamComponent_GetCanScreamAndPreventNextScreamIfNeeded) == 0x000001, "Wrong size on ScreamComponent_GetCanScreamAndPreventNextScreamIfNeeded");
static_assert(offsetof(ScreamComponent_GetCanScreamAndPreventNextScreamIfNeeded, ReturnValue) == 0x000000, "Member 'ScreamComponent_GetCanScreamAndPreventNextScreamIfNeeded::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreamComponent.ScreamRevealOwner
// 0x0008 (0x0008 - 0x0000)
struct ScreamComponent_ScreamRevealOwner final
{
public:
	bool                                          SpawnBubbleIndicator;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ScreamRevealDuration;                              // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreamComponent_ScreamRevealOwner) == 0x000004, "Wrong alignment on ScreamComponent_ScreamRevealOwner");
static_assert(sizeof(ScreamComponent_ScreamRevealOwner) == 0x000008, "Wrong size on ScreamComponent_ScreamRevealOwner");
static_assert(offsetof(ScreamComponent_ScreamRevealOwner, SpawnBubbleIndicator) == 0x000000, "Member 'ScreamComponent_ScreamRevealOwner::SpawnBubbleIndicator' has a wrong offset!");
static_assert(offsetof(ScreamComponent_ScreamRevealOwner, ScreamRevealDuration) == 0x000004, "Member 'ScreamComponent_ScreamRevealOwner::ScreamRevealDuration' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostBatchItems
// 0x0010 (0x0010 - 0x0000)
struct ScreenshotToolHook_PostBatchItems final
{
public:
	TArray<struct FCharacterToolItemData>         Items;                                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostBatchItems) == 0x000008, "Wrong alignment on ScreenshotToolHook_PostBatchItems");
static_assert(sizeof(ScreenshotToolHook_PostBatchItems) == 0x000010, "Wrong size on ScreenshotToolHook_PostBatchItems");
static_assert(offsetof(ScreenshotToolHook_PostBatchItems, Items) == 0x000000, "Member 'ScreenshotToolHook_PostBatchItems::Items' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostSpawnCharacter
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PostSpawnCharacter final
{
public:
	class ADBDMenuPlayer*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostSpawnCharacter) == 0x000008, "Wrong alignment on ScreenshotToolHook_PostSpawnCharacter");
static_assert(sizeof(ScreenshotToolHook_PostSpawnCharacter) == 0x000008, "Wrong size on ScreenshotToolHook_PostSpawnCharacter");
static_assert(offsetof(ScreenshotToolHook_PostSpawnCharacter, Character) == 0x000000, "Member 'ScreenshotToolHook_PostSpawnCharacter::Character' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostSpawnCharm
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PostSpawnCharm final
{
public:
	class ACharm*                                 Charm;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostSpawnCharm) == 0x000008, "Wrong alignment on ScreenshotToolHook_PostSpawnCharm");
static_assert(sizeof(ScreenshotToolHook_PostSpawnCharm) == 0x000008, "Wrong size on ScreenshotToolHook_PostSpawnCharm");
static_assert(offsetof(ScreenshotToolHook_PostSpawnCharm, Charm) == 0x000000, "Member 'ScreenshotToolHook_PostSpawnCharm::Charm' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostStateChanged
// 0x0002 (0x0002 - 0x0000)
struct ScreenshotToolHook_PostStateChanged final
{
public:
	EScreenshotToolState                          PreviousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScreenshotToolState                          CurrentState;                                      // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostStateChanged) == 0x000001, "Wrong alignment on ScreenshotToolHook_PostStateChanged");
static_assert(sizeof(ScreenshotToolHook_PostStateChanged) == 0x000002, "Wrong size on ScreenshotToolHook_PostStateChanged");
static_assert(offsetof(ScreenshotToolHook_PostStateChanged, PreviousState) == 0x000000, "Member 'ScreenshotToolHook_PostStateChanged::PreviousState' has a wrong offset!");
static_assert(offsetof(ScreenshotToolHook_PostStateChanged, CurrentState) == 0x000001, "Member 'ScreenshotToolHook_PostStateChanged::CurrentState' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostTakeItemScreenshot
// 0x0014 (0x0014 - 0x0000)
struct ScreenshotToolHook_PostTakeItemScreenshot final
{
public:
	struct FCharacterToolItemData                 Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreenshotToolHook_PostTakeItemScreenshot) == 0x000004, "Wrong alignment on ScreenshotToolHook_PostTakeItemScreenshot");
static_assert(sizeof(ScreenshotToolHook_PostTakeItemScreenshot) == 0x000014, "Wrong size on ScreenshotToolHook_PostTakeItemScreenshot");
static_assert(offsetof(ScreenshotToolHook_PostTakeItemScreenshot, Item) == 0x000000, "Member 'ScreenshotToolHook_PostTakeItemScreenshot::Item' has a wrong offset!");
static_assert(offsetof(ScreenshotToolHook_PostTakeItemScreenshot, Success) == 0x000010, "Member 'ScreenshotToolHook_PostTakeItemScreenshot::Success' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PostUpdateCharacter
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PostUpdateCharacter final
{
public:
	class ADBDMenuPlayer*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PostUpdateCharacter) == 0x000008, "Wrong alignment on ScreenshotToolHook_PostUpdateCharacter");
static_assert(sizeof(ScreenshotToolHook_PostUpdateCharacter) == 0x000008, "Wrong size on ScreenshotToolHook_PostUpdateCharacter");
static_assert(offsetof(ScreenshotToolHook_PostUpdateCharacter, Character) == 0x000000, "Member 'ScreenshotToolHook_PostUpdateCharacter::Character' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreDestroyCharacter
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PreDestroyCharacter final
{
public:
	class ADBDMenuPlayer*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PreDestroyCharacter) == 0x000008, "Wrong alignment on ScreenshotToolHook_PreDestroyCharacter");
static_assert(sizeof(ScreenshotToolHook_PreDestroyCharacter) == 0x000008, "Wrong size on ScreenshotToolHook_PreDestroyCharacter");
static_assert(offsetof(ScreenshotToolHook_PreDestroyCharacter, Character) == 0x000000, "Member 'ScreenshotToolHook_PreDestroyCharacter::Character' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreDestroyCharm
// 0x0008 (0x0008 - 0x0000)
struct ScreenshotToolHook_PreDestroyCharm final
{
public:
	class ACharm*                                 Charm;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PreDestroyCharm) == 0x000008, "Wrong alignment on ScreenshotToolHook_PreDestroyCharm");
static_assert(sizeof(ScreenshotToolHook_PreDestroyCharm) == 0x000008, "Wrong size on ScreenshotToolHook_PreDestroyCharm");
static_assert(offsetof(ScreenshotToolHook_PreDestroyCharm, Charm) == 0x000000, "Member 'ScreenshotToolHook_PreDestroyCharm::Charm' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreSpawnCharacter
// 0x0010 (0x0010 - 0x0000)
struct ScreenshotToolHook_PreSpawnCharacter final
{
public:
	class ADBDMenuPlayer*                         Character;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCharacterToolSpawnParameters          SpawnParams;                                       // 0x0008(0x0003)(Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ScreenshotToolHook_PreSpawnCharacter) == 0x000008, "Wrong alignment on ScreenshotToolHook_PreSpawnCharacter");
static_assert(sizeof(ScreenshotToolHook_PreSpawnCharacter) == 0x000010, "Wrong size on ScreenshotToolHook_PreSpawnCharacter");
static_assert(offsetof(ScreenshotToolHook_PreSpawnCharacter, Character) == 0x000000, "Member 'ScreenshotToolHook_PreSpawnCharacter::Character' has a wrong offset!");
static_assert(offsetof(ScreenshotToolHook_PreSpawnCharacter, SpawnParams) == 0x000008, "Member 'ScreenshotToolHook_PreSpawnCharacter::SpawnParams' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreSpawnCharm
// 0x0440 (0x0440 - 0x0000)
struct ScreenshotToolHook_PreSpawnCharm final
{
public:
	struct FCustomizationItemData                 Item;                                              // 0x0000(0x0440)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PreSpawnCharm) == 0x000008, "Wrong alignment on ScreenshotToolHook_PreSpawnCharm");
static_assert(sizeof(ScreenshotToolHook_PreSpawnCharm) == 0x000440, "Wrong size on ScreenshotToolHook_PreSpawnCharm");
static_assert(offsetof(ScreenshotToolHook_PreSpawnCharm, Item) == 0x000000, "Member 'ScreenshotToolHook_PreSpawnCharm::Item' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.PreTakeItemScreenshot
// 0x0010 (0x0010 - 0x0000)
struct ScreenshotToolHook_PreTakeItemScreenshot final
{
public:
	struct FCharacterToolItemData                 Item;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_PreTakeItemScreenshot) == 0x000004, "Wrong alignment on ScreenshotToolHook_PreTakeItemScreenshot");
static_assert(sizeof(ScreenshotToolHook_PreTakeItemScreenshot) == 0x000010, "Wrong size on ScreenshotToolHook_PreTakeItemScreenshot");
static_assert(offsetof(ScreenshotToolHook_PreTakeItemScreenshot, Item) == 0x000000, "Member 'ScreenshotToolHook_PreTakeItemScreenshot::Item' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.ScreenshotBeginPlay
// 0x0001 (0x0001 - 0x0000)
struct ScreenshotToolHook_ScreenshotBeginPlay final
{
public:
	bool                                          IsPIE;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_ScreenshotBeginPlay) == 0x000001, "Wrong alignment on ScreenshotToolHook_ScreenshotBeginPlay");
static_assert(sizeof(ScreenshotToolHook_ScreenshotBeginPlay) == 0x000001, "Wrong size on ScreenshotToolHook_ScreenshotBeginPlay");
static_assert(offsetof(ScreenshotToolHook_ScreenshotBeginPlay, IsPIE) == 0x000000, "Member 'ScreenshotToolHook_ScreenshotBeginPlay::IsPIE' has a wrong offset!");

// Function DeadByDaylight.ScreenshotToolHook.IsPIEOnly
// 0x0001 (0x0001 - 0x0000)
struct ScreenshotToolHook_IsPIEOnly final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenshotToolHook_IsPIEOnly) == 0x000001, "Wrong alignment on ScreenshotToolHook_IsPIEOnly");
static_assert(sizeof(ScreenshotToolHook_IsPIEOnly) == 0x000001, "Wrong size on ScreenshotToolHook_IsPIEOnly");
static_assert(offsetof(ScreenshotToolHook_IsPIEOnly, ReturnValue) == 0x000000, "Member 'ScreenshotToolHook_IsPIEOnly::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreenSpaceLocationComponent.GetCurrentResolution
// 0x0010 (0x0010 - 0x0000)
struct ScreenSpaceLocationComponent_GetCurrentResolution final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenSpaceLocationComponent_GetCurrentResolution) == 0x000008, "Wrong alignment on ScreenSpaceLocationComponent_GetCurrentResolution");
static_assert(sizeof(ScreenSpaceLocationComponent_GetCurrentResolution) == 0x000010, "Wrong size on ScreenSpaceLocationComponent_GetCurrentResolution");
static_assert(offsetof(ScreenSpaceLocationComponent_GetCurrentResolution, ReturnValue) == 0x000000, "Member 'ScreenSpaceLocationComponent_GetCurrentResolution::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ScreenSpaceLocationComponent.HasValidPosition
// 0x0001 (0x0001 - 0x0000)
struct ScreenSpaceLocationComponent_HasValidPosition final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenSpaceLocationComponent_HasValidPosition) == 0x000001, "Wrong alignment on ScreenSpaceLocationComponent_HasValidPosition");
static_assert(sizeof(ScreenSpaceLocationComponent_HasValidPosition) == 0x000001, "Wrong size on ScreenSpaceLocationComponent_HasValidPosition");
static_assert(offsetof(ScreenSpaceLocationComponent_HasValidPosition, ReturnValue) == 0x000000, "Member 'ScreenSpaceLocationComponent_HasValidPosition::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SeancePerformerComponent.Cosmetic_OnStoppedInteracting
// 0x0001 (0x0001 - 0x0000)
struct SeancePerformerComponent_Cosmetic_OnStoppedInteracting final
{
public:
	bool                                          Interrupted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeancePerformerComponent_Cosmetic_OnStoppedInteracting) == 0x000001, "Wrong alignment on SeancePerformerComponent_Cosmetic_OnStoppedInteracting");
static_assert(sizeof(SeancePerformerComponent_Cosmetic_OnStoppedInteracting) == 0x000001, "Wrong size on SeancePerformerComponent_Cosmetic_OnStoppedInteracting");
static_assert(offsetof(SeancePerformerComponent_Cosmetic_OnStoppedInteracting, Interrupted) == 0x000000, "Member 'SeancePerformerComponent_Cosmetic_OnStoppedInteracting::Interrupted' has a wrong offset!");

// Function DeadByDaylight.SeanceRitualSpot.Authority_OnChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct SeanceRitualSpot_Authority_OnChargeApplied final
{
public:
	float                                         IndividualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeanceRitualSpot_Authority_OnChargeApplied) == 0x000008, "Wrong alignment on SeanceRitualSpot_Authority_OnChargeApplied");
static_assert(sizeof(SeanceRitualSpot_Authority_OnChargeApplied) == 0x000018, "Wrong size on SeanceRitualSpot_Authority_OnChargeApplied");
static_assert(offsetof(SeanceRitualSpot_Authority_OnChargeApplied, IndividualChargeAmount) == 0x000000, "Member 'SeanceRitualSpot_Authority_OnChargeApplied::IndividualChargeAmount' has a wrong offset!");
static_assert(offsetof(SeanceRitualSpot_Authority_OnChargeApplied, TotalChargeAmount) == 0x000004, "Member 'SeanceRitualSpot_Authority_OnChargeApplied::TotalChargeAmount' has a wrong offset!");
static_assert(offsetof(SeanceRitualSpot_Authority_OnChargeApplied, ChargeInstigator) == 0x000008, "Member 'SeanceRitualSpot_Authority_OnChargeApplied::ChargeInstigator' has a wrong offset!");
static_assert(offsetof(SeanceRitualSpot_Authority_OnChargeApplied, WasCoop) == 0x000010, "Member 'SeanceRitualSpot_Authority_OnChargeApplied::WasCoop' has a wrong offset!");
static_assert(offsetof(SeanceRitualSpot_Authority_OnChargeApplied, DeltaTime) == 0x000014, "Member 'SeanceRitualSpot_Authority_OnChargeApplied::DeltaTime' has a wrong offset!");

// Function DeadByDaylight.SeanceRitualSpot.Authority_OnPerformRitualChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged) == 0x000008, "Wrong alignment on SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged");
static_assert(sizeof(SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged) == 0x000010, "Wrong size on SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged");
static_assert(offsetof(SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged, ChargeableComponent) == 0x000000, "Member 'SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged, PercentCompletionChange) == 0x000008, "Member 'SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged, TotalPercentComplete) == 0x00000C, "Member 'SeanceRitualSpot_Authority_OnPerformRitualChargePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.SeanceRitualSpot.Cosmetic_OnInteractionUpdate
// 0x0010 (0x0010 - 0x0000)
struct SeanceRitualSpot_Cosmetic_OnInteractionUpdate final
{
public:
	const class ADBDPlayer*                       InteractingPlayer;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargePercent;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeanceRitualSpot_Cosmetic_OnInteractionUpdate) == 0x000008, "Wrong alignment on SeanceRitualSpot_Cosmetic_OnInteractionUpdate");
static_assert(sizeof(SeanceRitualSpot_Cosmetic_OnInteractionUpdate) == 0x000010, "Wrong size on SeanceRitualSpot_Cosmetic_OnInteractionUpdate");
static_assert(offsetof(SeanceRitualSpot_Cosmetic_OnInteractionUpdate, InteractingPlayer) == 0x000000, "Member 'SeanceRitualSpot_Cosmetic_OnInteractionUpdate::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(SeanceRitualSpot_Cosmetic_OnInteractionUpdate, ChargePercent) == 0x000008, "Member 'SeanceRitualSpot_Cosmetic_OnInteractionUpdate::ChargePercent' has a wrong offset!");

// Function DeadByDaylight.SeanceRitualSpot.Cosmetic_OnStartedInteracting
// 0x0010 (0x0010 - 0x0000)
struct SeanceRitualSpot_Cosmetic_OnStartedInteracting final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOriginator;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SeanceRitualSpot_Cosmetic_OnStartedInteracting) == 0x000008, "Wrong alignment on SeanceRitualSpot_Cosmetic_OnStartedInteracting");
static_assert(sizeof(SeanceRitualSpot_Cosmetic_OnStartedInteracting) == 0x000010, "Wrong size on SeanceRitualSpot_Cosmetic_OnStartedInteracting");
static_assert(offsetof(SeanceRitualSpot_Cosmetic_OnStartedInteracting, InteractingPlayer) == 0x000000, "Member 'SeanceRitualSpot_Cosmetic_OnStartedInteracting::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(SeanceRitualSpot_Cosmetic_OnStartedInteracting, IsOriginator) == 0x000008, "Member 'SeanceRitualSpot_Cosmetic_OnStartedInteracting::IsOriginator' has a wrong offset!");

// Function DeadByDaylight.SeanceRitualSpot.Cosmetic_OnStoppedInteracting
// 0x0001 (0x0001 - 0x0000)
struct SeanceRitualSpot_Cosmetic_OnStoppedInteracting final
{
public:
	bool                                          Interrupted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeanceRitualSpot_Cosmetic_OnStoppedInteracting) == 0x000001, "Wrong alignment on SeanceRitualSpot_Cosmetic_OnStoppedInteracting");
static_assert(sizeof(SeanceRitualSpot_Cosmetic_OnStoppedInteracting) == 0x000001, "Wrong size on SeanceRitualSpot_Cosmetic_OnStoppedInteracting");
static_assert(offsetof(SeanceRitualSpot_Cosmetic_OnStoppedInteracting, Interrupted) == 0x000000, "Member 'SeanceRitualSpot_Cosmetic_OnStoppedInteracting::Interrupted' has a wrong offset!");

// Function DeadByDaylight.SeanceRitualSpot.Multicast_OnSeanceCompleted
// 0x0008 (0x0008 - 0x0000)
struct SeanceRitualSpot_Multicast_OnSeanceCompleted final
{
public:
	class ACamperPlayer*                          Originator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeanceRitualSpot_Multicast_OnSeanceCompleted) == 0x000008, "Wrong alignment on SeanceRitualSpot_Multicast_OnSeanceCompleted");
static_assert(sizeof(SeanceRitualSpot_Multicast_OnSeanceCompleted) == 0x000008, "Wrong size on SeanceRitualSpot_Multicast_OnSeanceCompleted");
static_assert(offsetof(SeanceRitualSpot_Multicast_OnSeanceCompleted, Originator) == 0x000000, "Member 'SeanceRitualSpot_Multicast_OnSeanceCompleted::Originator' has a wrong offset!");

// Function DeadByDaylight.SeanceRitualSpot.OnFinishedRitual
// 0x0001 (0x0001 - 0x0000)
struct SeanceRitualSpot_OnFinishedRitual final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeanceRitualSpot_OnFinishedRitual) == 0x000001, "Wrong alignment on SeanceRitualSpot_OnFinishedRitual");
static_assert(sizeof(SeanceRitualSpot_OnFinishedRitual) == 0x000001, "Wrong size on SeanceRitualSpot_OnFinishedRitual");
static_assert(offsetof(SeanceRitualSpot_OnFinishedRitual, ReturnValue) == 0x000000, "Member 'SeanceRitualSpot_OnFinishedRitual::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SeanceRitualSpot.GetRitualPerformers
// 0x0010 (0x0010 - 0x0000)
struct SeanceRitualSpot_GetRitualPerformers final
{
public:
	TArray<class ACamperPlayer*>                  ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SeanceRitualSpot_GetRitualPerformers) == 0x000008, "Wrong alignment on SeanceRitualSpot_GetRitualPerformers");
static_assert(sizeof(SeanceRitualSpot_GetRitualPerformers) == 0x000010, "Wrong size on SeanceRitualSpot_GetRitualPerformers");
static_assert(offsetof(SeanceRitualSpot_GetRitualPerformers, ReturnValue) == 0x000000, "Member 'SeanceRitualSpot_GetRitualPerformers::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SkillCollectionComponent.OnRep_Array
// 0x0010 (0x0010 - 0x0000)
struct SkillCollectionComponent_OnRep_Array final
{
public:
	TArray<class USkill*>                         OldArray;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCollectionComponent_OnRep_Array) == 0x000008, "Wrong alignment on SkillCollectionComponent_OnRep_Array");
static_assert(sizeof(SkillCollectionComponent_OnRep_Array) == 0x000010, "Wrong size on SkillCollectionComponent_OnRep_Array");
static_assert(offsetof(SkillCollectionComponent_OnRep_Array, OldArray) == 0x000000, "Member 'SkillCollectionComponent_OnRep_Array::OldArray' has a wrong offset!");

// Function DeadByDaylight.SlasherAnimInstance.SetIsCrouched
// 0x0001 (0x0001 - 0x0000)
struct SlasherAnimInstance_SetIsCrouched final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SlasherAnimInstance_SetIsCrouched) == 0x000001, "Wrong alignment on SlasherAnimInstance_SetIsCrouched");
static_assert(sizeof(SlasherAnimInstance_SetIsCrouched) == 0x000001, "Wrong size on SlasherAnimInstance_SetIsCrouched");
static_assert(offsetof(SlasherAnimInstance_SetIsCrouched, Value) == 0x000000, "Member 'SlasherAnimInstance_SetIsCrouched::Value' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetCurrentMainSpecialEvent
// 0x0440 (0x0440 - 0x0000)
struct Specialeventmanager_GetCurrentMainSpecialEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCombinedSpecialEventData              OutSpecialEventData;                               // 0x0008(0x0430)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0438(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetCurrentMainSpecialEvent) == 0x000008, "Wrong alignment on Specialeventmanager_GetCurrentMainSpecialEvent");
static_assert(sizeof(Specialeventmanager_GetCurrentMainSpecialEvent) == 0x000440, "Wrong size on Specialeventmanager_GetCurrentMainSpecialEvent");
static_assert(offsetof(Specialeventmanager_GetCurrentMainSpecialEvent, WorldContextObject) == 0x000000, "Member 'Specialeventmanager_GetCurrentMainSpecialEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetCurrentMainSpecialEvent, OutSpecialEventData) == 0x000008, "Member 'Specialeventmanager_GetCurrentMainSpecialEvent::OutSpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetCurrentMainSpecialEvent, ReturnValue) == 0x000438, "Member 'Specialeventmanager_GetCurrentMainSpecialEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetCurrentSpecialEvent
// 0x0440 (0x0440 - 0x0000)
struct Specialeventmanager_GetCurrentSpecialEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCombinedSpecialEventData              OutSpecialEventData;                               // 0x0008(0x0430)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0438(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_439[0x7];                                      // 0x0439(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetCurrentSpecialEvent) == 0x000008, "Wrong alignment on Specialeventmanager_GetCurrentSpecialEvent");
static_assert(sizeof(Specialeventmanager_GetCurrentSpecialEvent) == 0x000440, "Wrong size on Specialeventmanager_GetCurrentSpecialEvent");
static_assert(offsetof(Specialeventmanager_GetCurrentSpecialEvent, WorldContextObject) == 0x000000, "Member 'Specialeventmanager_GetCurrentSpecialEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetCurrentSpecialEvent, OutSpecialEventData) == 0x000008, "Member 'Specialeventmanager_GetCurrentSpecialEvent::OutSpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetCurrentSpecialEvent, ReturnValue) == 0x000438, "Member 'Specialeventmanager_GetCurrentSpecialEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetEventMainEndDate
// 0x0020 (0x0020 - 0x0000)
struct Specialeventmanager_GetEventMainEndDate final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              OutDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetEventMainEndDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetEventMainEndDate");
static_assert(sizeof(Specialeventmanager_GetEventMainEndDate) == 0x000020, "Wrong size on Specialeventmanager_GetEventMainEndDate");
static_assert(offsetof(Specialeventmanager_GetEventMainEndDate, EventID) == 0x000000, "Member 'Specialeventmanager_GetEventMainEndDate::EventID' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventMainEndDate, OutDate) == 0x000010, "Member 'Specialeventmanager_GetEventMainEndDate::OutDate' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventMainEndDate, ReturnValue) == 0x000018, "Member 'Specialeventmanager_GetEventMainEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetEventPostEndDate
// 0x0020 (0x0020 - 0x0000)
struct Specialeventmanager_GetEventPostEndDate final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              OutDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetEventPostEndDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetEventPostEndDate");
static_assert(sizeof(Specialeventmanager_GetEventPostEndDate) == 0x000020, "Wrong size on Specialeventmanager_GetEventPostEndDate");
static_assert(offsetof(Specialeventmanager_GetEventPostEndDate, EventID) == 0x000000, "Member 'Specialeventmanager_GetEventPostEndDate::EventID' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventPostEndDate, OutDate) == 0x000010, "Member 'Specialeventmanager_GetEventPostEndDate::OutDate' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventPostEndDate, ReturnValue) == 0x000018, "Member 'Specialeventmanager_GetEventPostEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetEventStartDate
// 0x0020 (0x0020 - 0x0000)
struct Specialeventmanager_GetEventStartDate final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              OutDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetEventStartDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetEventStartDate");
static_assert(sizeof(Specialeventmanager_GetEventStartDate) == 0x000020, "Wrong size on Specialeventmanager_GetEventStartDate");
static_assert(offsetof(Specialeventmanager_GetEventStartDate, EventID) == 0x000000, "Member 'Specialeventmanager_GetEventStartDate::EventID' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventStartDate, OutDate) == 0x000010, "Member 'Specialeventmanager_GetEventStartDate::OutDate' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventStartDate, ReturnValue) == 0x000018, "Member 'Specialeventmanager_GetEventStartDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetEventTimeSinceStartDate
// 0x0020 (0x0020 - 0x0000)
struct Specialeventmanager_GetEventTimeSinceStartDate final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OutDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetEventTimeSinceStartDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetEventTimeSinceStartDate");
static_assert(sizeof(Specialeventmanager_GetEventTimeSinceStartDate) == 0x000020, "Wrong size on Specialeventmanager_GetEventTimeSinceStartDate");
static_assert(offsetof(Specialeventmanager_GetEventTimeSinceStartDate, EventID) == 0x000000, "Member 'Specialeventmanager_GetEventTimeSinceStartDate::EventID' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventTimeSinceStartDate, OutDate) == 0x000010, "Member 'Specialeventmanager_GetEventTimeSinceStartDate::OutDate' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventTimeSinceStartDate, ReturnValue) == 0x000018, "Member 'Specialeventmanager_GetEventTimeSinceStartDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetEventTimeTillMainEndDate
// 0x0020 (0x0020 - 0x0000)
struct Specialeventmanager_GetEventTimeTillMainEndDate final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OutDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetEventTimeTillMainEndDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetEventTimeTillMainEndDate");
static_assert(sizeof(Specialeventmanager_GetEventTimeTillMainEndDate) == 0x000020, "Wrong size on Specialeventmanager_GetEventTimeTillMainEndDate");
static_assert(offsetof(Specialeventmanager_GetEventTimeTillMainEndDate, EventID) == 0x000000, "Member 'Specialeventmanager_GetEventTimeTillMainEndDate::EventID' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventTimeTillMainEndDate, OutDate) == 0x000010, "Member 'Specialeventmanager_GetEventTimeTillMainEndDate::OutDate' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventTimeTillMainEndDate, ReturnValue) == 0x000018, "Member 'Specialeventmanager_GetEventTimeTillMainEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetEventTimeTillPostEndDate
// 0x0020 (0x0020 - 0x0000)
struct Specialeventmanager_GetEventTimeTillPostEndDate final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimespan                              OutDate;                                           // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetEventTimeTillPostEndDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetEventTimeTillPostEndDate");
static_assert(sizeof(Specialeventmanager_GetEventTimeTillPostEndDate) == 0x000020, "Wrong size on Specialeventmanager_GetEventTimeTillPostEndDate");
static_assert(offsetof(Specialeventmanager_GetEventTimeTillPostEndDate, EventID) == 0x000000, "Member 'Specialeventmanager_GetEventTimeTillPostEndDate::EventID' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventTimeTillPostEndDate, OutDate) == 0x000010, "Member 'Specialeventmanager_GetEventTimeTillPostEndDate::OutDate' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetEventTimeTillPostEndDate, ReturnValue) == 0x000018, "Member 'Specialeventmanager_GetEventTimeTillPostEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetMainEndDate
// 0x0438 (0x0438 - 0x0000)
struct Specialeventmanager_GetMainEndDate final
{
public:
	struct FCombinedSpecialEventData              SpecialEventData;                                  // 0x0000(0x0430)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0430(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Specialeventmanager_GetMainEndDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetMainEndDate");
static_assert(sizeof(Specialeventmanager_GetMainEndDate) == 0x000438, "Wrong size on Specialeventmanager_GetMainEndDate");
static_assert(offsetof(Specialeventmanager_GetMainEndDate, SpecialEventData) == 0x000000, "Member 'Specialeventmanager_GetMainEndDate::SpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetMainEndDate, ReturnValue) == 0x000430, "Member 'Specialeventmanager_GetMainEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetPostEndDate
// 0x0438 (0x0438 - 0x0000)
struct Specialeventmanager_GetPostEndDate final
{
public:
	struct FCombinedSpecialEventData              SpecialEventData;                                  // 0x0000(0x0430)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0430(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Specialeventmanager_GetPostEndDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetPostEndDate");
static_assert(sizeof(Specialeventmanager_GetPostEndDate) == 0x000438, "Wrong size on Specialeventmanager_GetPostEndDate");
static_assert(offsetof(Specialeventmanager_GetPostEndDate, SpecialEventData) == 0x000000, "Member 'Specialeventmanager_GetPostEndDate::SpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetPostEndDate, ReturnValue) == 0x000430, "Member 'Specialeventmanager_GetPostEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetSpecialEvent
// 0x0450 (0x0450 - 0x0000)
struct Specialeventmanager_GetSpecialEvent final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventID;                                           // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombinedSpecialEventData              OutSpecialEventData;                               // 0x0018(0x0430)(Parm, OutParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0448(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetSpecialEvent) == 0x000008, "Wrong alignment on Specialeventmanager_GetSpecialEvent");
static_assert(sizeof(Specialeventmanager_GetSpecialEvent) == 0x000450, "Wrong size on Specialeventmanager_GetSpecialEvent");
static_assert(offsetof(Specialeventmanager_GetSpecialEvent, WorldContextObject) == 0x000000, "Member 'Specialeventmanager_GetSpecialEvent::WorldContextObject' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetSpecialEvent, EventID) == 0x000008, "Member 'Specialeventmanager_GetSpecialEvent::EventID' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetSpecialEvent, OutSpecialEventData) == 0x000018, "Member 'Specialeventmanager_GetSpecialEvent::OutSpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetSpecialEvent, ReturnValue) == 0x000448, "Member 'Specialeventmanager_GetSpecialEvent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetStartDate
// 0x0438 (0x0438 - 0x0000)
struct Specialeventmanager_GetStartDate final
{
public:
	struct FCombinedSpecialEventData              SpecialEventData;                                  // 0x0000(0x0430)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FDateTime                              ReturnValue;                                       // 0x0430(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Specialeventmanager_GetStartDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetStartDate");
static_assert(sizeof(Specialeventmanager_GetStartDate) == 0x000438, "Wrong size on Specialeventmanager_GetStartDate");
static_assert(offsetof(Specialeventmanager_GetStartDate, SpecialEventData) == 0x000000, "Member 'Specialeventmanager_GetStartDate::SpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetStartDate, ReturnValue) == 0x000430, "Member 'Specialeventmanager_GetStartDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetStatus
// 0x0438 (0x0438 - 0x0000)
struct Specialeventmanager_GetStatus final
{
public:
	struct FCombinedSpecialEventData              SpecialEventData;                                  // 0x0000(0x0430)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	ESpecialEventStatus                           ReturnValue;                                       // 0x0430(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_431[0x7];                                      // 0x0431(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Specialeventmanager_GetStatus) == 0x000008, "Wrong alignment on Specialeventmanager_GetStatus");
static_assert(sizeof(Specialeventmanager_GetStatus) == 0x000438, "Wrong size on Specialeventmanager_GetStatus");
static_assert(offsetof(Specialeventmanager_GetStatus, SpecialEventData) == 0x000000, "Member 'Specialeventmanager_GetStatus::SpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetStatus, ReturnValue) == 0x000430, "Member 'Specialeventmanager_GetStatus::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetTimeSinceStartDate
// 0x0438 (0x0438 - 0x0000)
struct Specialeventmanager_GetTimeSinceStartDate final
{
public:
	struct FCombinedSpecialEventData              SpecialEventData;                                  // 0x0000(0x0430)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0430(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Specialeventmanager_GetTimeSinceStartDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetTimeSinceStartDate");
static_assert(sizeof(Specialeventmanager_GetTimeSinceStartDate) == 0x000438, "Wrong size on Specialeventmanager_GetTimeSinceStartDate");
static_assert(offsetof(Specialeventmanager_GetTimeSinceStartDate, SpecialEventData) == 0x000000, "Member 'Specialeventmanager_GetTimeSinceStartDate::SpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetTimeSinceStartDate, ReturnValue) == 0x000430, "Member 'Specialeventmanager_GetTimeSinceStartDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetTimeTillMainEndDate
// 0x0438 (0x0438 - 0x0000)
struct Specialeventmanager_GetTimeTillMainEndDate final
{
public:
	struct FCombinedSpecialEventData              SpecialEventData;                                  // 0x0000(0x0430)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0430(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Specialeventmanager_GetTimeTillMainEndDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetTimeTillMainEndDate");
static_assert(sizeof(Specialeventmanager_GetTimeTillMainEndDate) == 0x000438, "Wrong size on Specialeventmanager_GetTimeTillMainEndDate");
static_assert(offsetof(Specialeventmanager_GetTimeTillMainEndDate, SpecialEventData) == 0x000000, "Member 'Specialeventmanager_GetTimeTillMainEndDate::SpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetTimeTillMainEndDate, ReturnValue) == 0x000430, "Member 'Specialeventmanager_GetTimeTillMainEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.specialeventmanager.GetTimeTillPostEndDate
// 0x0438 (0x0438 - 0x0000)
struct Specialeventmanager_GetTimeTillPostEndDate final
{
public:
	struct FCombinedSpecialEventData              SpecialEventData;                                  // 0x0000(0x0430)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimespan                              ReturnValue;                                       // 0x0430(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Specialeventmanager_GetTimeTillPostEndDate) == 0x000008, "Wrong alignment on Specialeventmanager_GetTimeTillPostEndDate");
static_assert(sizeof(Specialeventmanager_GetTimeTillPostEndDate) == 0x000438, "Wrong size on Specialeventmanager_GetTimeTillPostEndDate");
static_assert(offsetof(Specialeventmanager_GetTimeTillPostEndDate, SpecialEventData) == 0x000000, "Member 'Specialeventmanager_GetTimeTillPostEndDate::SpecialEventData' has a wrong offset!");
static_assert(offsetof(Specialeventmanager_GetTimeTillPostEndDate, ReturnValue) == 0x000430, "Member 'Specialeventmanager_GetTimeTillPostEndDate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SplashScreen.SetVersionText
// 0x0010 (0x0010 - 0x0000)
struct SplashScreen_SetVersionText final
{
public:
	class FString                                 VersionText;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplashScreen_SetVersionText) == 0x000008, "Wrong alignment on SplashScreen_SetVersionText");
static_assert(sizeof(SplashScreen_SetVersionText) == 0x000010, "Wrong size on SplashScreen_SetVersionText");
static_assert(offsetof(SplashScreen_SetVersionText, VersionText) == 0x000000, "Member 'SplashScreen_SetVersionText::VersionText' has a wrong offset!");

// Function DeadByDaylight.SplashScreen.ShowSpecialEventVisual
// 0x0060 (0x0060 - 0x0000)
struct SplashScreen_ShowSpecialEventVisual final
{
public:
	struct FSpecialEventUIInfo                    EventInfo;                                         // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplashScreen_ShowSpecialEventVisual) == 0x000008, "Wrong alignment on SplashScreen_ShowSpecialEventVisual");
static_assert(sizeof(SplashScreen_ShowSpecialEventVisual) == 0x000060, "Wrong size on SplashScreen_ShowSpecialEventVisual");
static_assert(offsetof(SplashScreen_ShowSpecialEventVisual, EventInfo) == 0x000000, "Member 'SplashScreen_ShowSpecialEventVisual::EventInfo' has a wrong offset!");

// Function DeadByDaylight.SplashScreen.UpdateLoadingProgression
// 0x0010 (0x0010 - 0x0000)
struct SplashScreen_UpdateLoadingProgression final
{
public:
	class FString                                 LoadingProgression;                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SplashScreen_UpdateLoadingProgression) == 0x000008, "Wrong alignment on SplashScreen_UpdateLoadingProgression");
static_assert(sizeof(SplashScreen_UpdateLoadingProgression) == 0x000010, "Wrong size on SplashScreen_UpdateLoadingProgression");
static_assert(offsetof(SplashScreen_UpdateLoadingProgression, LoadingProgression) == 0x000000, "Member 'SplashScreen_UpdateLoadingProgression::LoadingProgression' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.Authority_OnCamperEscape
// 0x0040 (0x0040 - 0x0000)
struct SurvivorActivityIndicatorComponent_Authority_OnCamperEscape final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorActivityIndicatorComponent_Authority_OnCamperEscape) == 0x000008, "Wrong alignment on SurvivorActivityIndicatorComponent_Authority_OnCamperEscape");
static_assert(sizeof(SurvivorActivityIndicatorComponent_Authority_OnCamperEscape) == 0x000040, "Wrong size on SurvivorActivityIndicatorComponent_Authority_OnCamperEscape");
static_assert(offsetof(SurvivorActivityIndicatorComponent_Authority_OnCamperEscape, GameplayTag) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_Authority_OnCamperEscape::GameplayTag' has a wrong offset!");
static_assert(offsetof(SurvivorActivityIndicatorComponent_Authority_OnCamperEscape, GameEventData) == 0x000010, "Member 'SurvivorActivityIndicatorComponent_Authority_OnCamperEscape::GameEventData' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.HandleStartActivityIfStillInEffect
// 0x0028 (0x0028 - 0x0000)
struct SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect final
{
public:
	struct FSurvivorActivity                      ActivityViewInfo;                                  // 0x0000(0x0028)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect) == 0x000008, "Wrong alignment on SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect");
static_assert(sizeof(SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect) == 0x000028, "Wrong size on SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect");
static_assert(offsetof(SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect, ActivityViewInfo) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_HandleStartActivityIfStillInEffect::ActivityViewInfo' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.OnChargeableProgressChanged
// 0x0010 (0x0010 - 0x0000)
struct SurvivorActivityIndicatorComponent_OnChargeableProgressChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SurvivorActivityIndicatorComponent_OnChargeableProgressChanged) == 0x000008, "Wrong alignment on SurvivorActivityIndicatorComponent_OnChargeableProgressChanged");
static_assert(sizeof(SurvivorActivityIndicatorComponent_OnChargeableProgressChanged) == 0x000010, "Wrong size on SurvivorActivityIndicatorComponent_OnChargeableProgressChanged");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnChargeableProgressChanged, ChargeableComponent) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_OnChargeableProgressChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnChargeableProgressChanged, TotalPercentComplete) == 0x000008, "Member 'SurvivorActivityIndicatorComponent_OnChargeableProgressChanged::TotalPercentComplete' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct SurvivorActivityIndicatorComponent_OnDamageStateChanged final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            CurrentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorActivityIndicatorComponent_OnDamageStateChanged) == 0x000001, "Wrong alignment on SurvivorActivityIndicatorComponent_OnDamageStateChanged");
static_assert(sizeof(SurvivorActivityIndicatorComponent_OnDamageStateChanged) == 0x000002, "Wrong size on SurvivorActivityIndicatorComponent_OnDamageStateChanged");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnDamageStateChanged, OldDamageState) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_OnDamageStateChanged::OldDamageState' has a wrong offset!");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnDamageStateChanged, CurrentDamageState) == 0x000001, "Member 'SurvivorActivityIndicatorComponent_OnDamageStateChanged::CurrentDamageState' has a wrong offset!");

// Function DeadByDaylight.SurvivorActivityIndicatorComponent.OnPlayerPickedUp
// 0x0008 (0x0008 - 0x0000)
struct SurvivorActivityIndicatorComponent_OnPlayerPickedUp final
{
public:
	class ADBDPlayer*                             Picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorActivityIndicatorComponent_OnPlayerPickedUp) == 0x000008, "Wrong alignment on SurvivorActivityIndicatorComponent_OnPlayerPickedUp");
static_assert(sizeof(SurvivorActivityIndicatorComponent_OnPlayerPickedUp) == 0x000008, "Wrong size on SurvivorActivityIndicatorComponent_OnPlayerPickedUp");
static_assert(offsetof(SurvivorActivityIndicatorComponent_OnPlayerPickedUp, Picker) == 0x000000, "Member 'SurvivorActivityIndicatorComponent_OnPlayerPickedUp::Picker' has a wrong offset!");

// Function DeadByDaylight.SurvivorDisconnectionComponent.Authority_OnPlayerDisconnected
// 0x0008 (0x0008 - 0x0000)
struct SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected) == 0x000008, "Wrong alignment on SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected");
static_assert(sizeof(SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected) == 0x000008, "Wrong size on SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected");
static_assert(offsetof(SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected, Player) == 0x000000, "Member 'SurvivorDisconnectionComponent_Authority_OnPlayerDisconnected::Player' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Authority_AddSickness
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_Authority_AddSickness final
{
public:
	float                                         SicknessToAdd;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Authority_AddSickness) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_Authority_AddSickness");
static_assert(sizeof(SurvivorPlagueEffect_Authority_AddSickness) == 0x000004, "Wrong size on SurvivorPlagueEffect_Authority_AddSickness");
static_assert(offsetof(SurvivorPlagueEffect_Authority_AddSickness, SicknessToAdd) == 0x000000, "Member 'SurvivorPlagueEffect_Authority_AddSickness::SicknessToAdd' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Authority_InfectInteractable
// 0x0008 (0x0008 - 0x0000)
struct SurvivorPlagueEffect_Authority_InfectInteractable final
{
public:
	class AInteractable*                          Interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Authority_InfectInteractable) == 0x000008, "Wrong alignment on SurvivorPlagueEffect_Authority_InfectInteractable");
static_assert(sizeof(SurvivorPlagueEffect_Authority_InfectInteractable) == 0x000008, "Wrong size on SurvivorPlagueEffect_Authority_InfectInteractable");
static_assert(offsetof(SurvivorPlagueEffect_Authority_InfectInteractable, Interactable) == 0x000000, "Member 'SurvivorPlagueEffect_Authority_InfectInteractable::Interactable' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Authority_OnHitByVomitProjectile
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_Authority_OnHitByVomitProjectile final
{
public:
	float                                         SicknessToAdd;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Authority_OnHitByVomitProjectile) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_Authority_OnHitByVomitProjectile");
static_assert(sizeof(SurvivorPlagueEffect_Authority_OnHitByVomitProjectile) == 0x000004, "Wrong size on SurvivorPlagueEffect_Authority_OnHitByVomitProjectile");
static_assert(offsetof(SurvivorPlagueEffect_Authority_OnHitByVomitProjectile, SicknessToAdd) == 0x000000, "Member 'SurvivorPlagueEffect_Authority_OnHitByVomitProjectile::SicknessToAdd' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Authority_ResetSickness
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_Authority_ResetSickness final
{
public:
	float                                         NewSickness;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Authority_ResetSickness) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_Authority_ResetSickness");
static_assert(sizeof(SurvivorPlagueEffect_Authority_ResetSickness) == 0x000004, "Wrong size on SurvivorPlagueEffect_Authority_ResetSickness");
static_assert(offsetof(SurvivorPlagueEffect_Authority_ResetSickness, NewSickness) == 0x000000, "Member 'SurvivorPlagueEffect_Authority_ResetSickness::NewSickness' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Multicast_AddOnScreenDebugMessage
// 0x0020 (0x0020 - 0x0000)
struct SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage final
{
public:
	uint64                                        Key;                                               // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 DisplayColor;                                      // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DebugMessage;                                      // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage) == 0x000008, "Wrong alignment on SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage");
static_assert(sizeof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage) == 0x000020, "Wrong size on SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage, Key) == 0x000000, "Member 'SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage::Key' has a wrong offset!");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage, Duration) == 0x000008, "Member 'SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage::Duration' has a wrong offset!");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage, DisplayColor) == 0x00000C, "Member 'SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage::DisplayColor' has a wrong offset!");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage, DebugMessage) == 0x000010, "Member 'SurvivorPlagueEffect_Multicast_AddOnScreenDebugMessage::DebugMessage' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.Multicast_OnSicknessChanged
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_Multicast_OnSicknessChanged final
{
public:
	float                                         NewSickness;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_Multicast_OnSicknessChanged) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_Multicast_OnSicknessChanged");
static_assert(sizeof(SurvivorPlagueEffect_Multicast_OnSicknessChanged) == 0x000004, "Wrong size on SurvivorPlagueEffect_Multicast_OnSicknessChanged");
static_assert(offsetof(SurvivorPlagueEffect_Multicast_OnSicknessChanged, NewSickness) == 0x000000, "Member 'SurvivorPlagueEffect_Multicast_OnSicknessChanged::NewSickness' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.OnHitByVomit
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_OnHitByVomit final
{
public:
	bool                                          IsSuperVomit;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_OnHitByVomit) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_OnHitByVomit");
static_assert(sizeof(SurvivorPlagueEffect_OnHitByVomit) == 0x000001, "Wrong size on SurvivorPlagueEffect_OnHitByVomit");
static_assert(offsetof(SurvivorPlagueEffect_OnHitByVomit, IsSuperVomit) == 0x000000, "Member 'SurvivorPlagueEffect_OnHitByVomit::IsSuperVomit' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.OnSicknessChanged_Aesthetic
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_OnSicknessChanged_Aesthetic final
{
public:
	float                                         NewSickness;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_OnSicknessChanged_Aesthetic) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_OnSicknessChanged_Aesthetic");
static_assert(sizeof(SurvivorPlagueEffect_OnSicknessChanged_Aesthetic) == 0x000004, "Wrong size on SurvivorPlagueEffect_OnSicknessChanged_Aesthetic");
static_assert(offsetof(SurvivorPlagueEffect_OnSicknessChanged_Aesthetic, NewSickness) == 0x000000, "Member 'SurvivorPlagueEffect_OnSicknessChanged_Aesthetic::NewSickness' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.OnSurvivorDisguisedOrUndisguised
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_OnSurvivorDisguisedOrUndisguised final
{
public:
	bool                                          IsDisguised;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_OnSurvivorDisguisedOrUndisguised) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_OnSurvivorDisguisedOrUndisguised");
static_assert(sizeof(SurvivorPlagueEffect_OnSurvivorDisguisedOrUndisguised) == 0x000001, "Wrong size on SurvivorPlagueEffect_OnSurvivorDisguisedOrUndisguised");
static_assert(offsetof(SurvivorPlagueEffect_OnSurvivorDisguisedOrUndisguised, IsDisguised) == 0x000000, "Member 'SurvivorPlagueEffect_OnSurvivorDisguisedOrUndisguised::IsDisguised' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetMaxSicknessLevel
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_GetMaxSicknessLevel final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetMaxSicknessLevel) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_GetMaxSicknessLevel");
static_assert(sizeof(SurvivorPlagueEffect_GetMaxSicknessLevel) == 0x000001, "Wrong size on SurvivorPlagueEffect_GetMaxSicknessLevel");
static_assert(offsetof(SurvivorPlagueEffect_GetMaxSicknessLevel, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetMaxSicknessLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetSicknessAmount
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_GetSicknessAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetSicknessAmount) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_GetSicknessAmount");
static_assert(sizeof(SurvivorPlagueEffect_GetSicknessAmount) == 0x000004, "Wrong size on SurvivorPlagueEffect_GetSicknessAmount");
static_assert(offsetof(SurvivorPlagueEffect_GetSicknessAmount, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetSicknessAmount::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetSicknessLevel
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_GetSicknessLevel final
{
public:
	uint8                                         ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetSicknessLevel) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_GetSicknessLevel");
static_assert(sizeof(SurvivorPlagueEffect_GetSicknessLevel) == 0x000001, "Wrong size on SurvivorPlagueEffect_GetSicknessLevel");
static_assert(offsetof(SurvivorPlagueEffect_GetSicknessLevel, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetSicknessLevel::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetSicknessPercentage
// 0x0004 (0x0004 - 0x0000)
struct SurvivorPlagueEffect_GetSicknessPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetSicknessPercentage) == 0x000004, "Wrong alignment on SurvivorPlagueEffect_GetSicknessPercentage");
static_assert(sizeof(SurvivorPlagueEffect_GetSicknessPercentage) == 0x000004, "Wrong size on SurvivorPlagueEffect_GetSicknessPercentage");
static_assert(offsetof(SurvivorPlagueEffect_GetSicknessPercentage, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetSicknessPercentage::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.GetSicknessThresholds
// 0x0010 (0x0010 - 0x0000)
struct SurvivorPlagueEffect_GetSicknessThresholds final
{
public:
	TArray<float>                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_GetSicknessThresholds) == 0x000008, "Wrong alignment on SurvivorPlagueEffect_GetSicknessThresholds");
static_assert(sizeof(SurvivorPlagueEffect_GetSicknessThresholds) == 0x000010, "Wrong size on SurvivorPlagueEffect_GetSicknessThresholds");
static_assert(offsetof(SurvivorPlagueEffect_GetSicknessThresholds, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_GetSicknessThresholds::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.HasMaxLevelSickness
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_HasMaxLevelSickness final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_HasMaxLevelSickness) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_HasMaxLevelSickness");
static_assert(sizeof(SurvivorPlagueEffect_HasMaxLevelSickness) == 0x000001, "Wrong size on SurvivorPlagueEffect_HasMaxLevelSickness");
static_assert(offsetof(SurvivorPlagueEffect_HasMaxLevelSickness, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_HasMaxLevelSickness::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.IsDebugModeActive
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_IsDebugModeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_IsDebugModeActive) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_IsDebugModeActive");
static_assert(sizeof(SurvivorPlagueEffect_IsDebugModeActive) == 0x000001, "Wrong size on SurvivorPlagueEffect_IsDebugModeActive");
static_assert(offsetof(SurvivorPlagueEffect_IsDebugModeActive, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_IsDebugModeActive::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.SurvivorPlagueEffect.IsInfected
// 0x0001 (0x0001 - 0x0000)
struct SurvivorPlagueEffect_IsInfected final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorPlagueEffect_IsInfected) == 0x000001, "Wrong alignment on SurvivorPlagueEffect_IsInfected");
static_assert(sizeof(SurvivorPlagueEffect_IsInfected) == 0x000001, "Wrong size on SurvivorPlagueEffect_IsInfected");
static_assert(offsetof(SurvivorPlagueEffect_IsInfected, ReturnValue) == 0x000000, "Member 'SurvivorPlagueEffect_IsInfected::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TallyScreen.OnRateMatch
// 0x0004 (0x0004 - 0x0000)
struct TallyScreen_OnRateMatch final
{
public:
	int32                                         RateValue;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScreen_OnRateMatch) == 0x000004, "Wrong alignment on TallyScreen_OnRateMatch");
static_assert(sizeof(TallyScreen_OnRateMatch) == 0x000004, "Wrong size on TallyScreen_OnRateMatch");
static_assert(offsetof(TallyScreen_OnRateMatch, RateValue) == 0x000000, "Member 'TallyScreen_OnRateMatch::RateValue' has a wrong offset!");

// Function DeadByDaylight.TallyScreen.OnUpdateUMGTallyScoreboardVisibility
// 0x0001 (0x0001 - 0x0000)
struct TallyScreen_OnUpdateUMGTallyScoreboardVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScreen_OnUpdateUMGTallyScoreboardVisibility) == 0x000001, "Wrong alignment on TallyScreen_OnUpdateUMGTallyScoreboardVisibility");
static_assert(sizeof(TallyScreen_OnUpdateUMGTallyScoreboardVisibility) == 0x000001, "Wrong size on TallyScreen_OnUpdateUMGTallyScoreboardVisibility");
static_assert(offsetof(TallyScreen_OnUpdateUMGTallyScoreboardVisibility, IsVisible) == 0x000000, "Member 'TallyScreen_OnUpdateUMGTallyScoreboardVisibility::IsVisible' has a wrong offset!");

// Function DeadByDaylight.ToolBoxInterface.GetChargerComponent
// 0x0008 (0x0008 - 0x0000)
struct ToolBoxInterface_GetChargerComponent final
{
public:
	class UChargerComponent*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToolBoxInterface_GetChargerComponent) == 0x000008, "Wrong alignment on ToolBoxInterface_GetChargerComponent");
static_assert(sizeof(ToolBoxInterface_GetChargerComponent) == 0x000008, "Wrong size on ToolBoxInterface_GetChargerComponent");
static_assert(offsetof(ToolBoxInterface_GetChargerComponent, ReturnValue) == 0x000000, "Member 'ToolBoxInterface_GetChargerComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TrapChemicalBomb.GetPallet
// 0x0008 (0x0008 - 0x0000)
struct TrapChemicalBomb_GetPallet final
{
public:
	class APallet*                                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapChemicalBomb_GetPallet) == 0x000008, "Wrong alignment on TrapChemicalBomb_GetPallet");
static_assert(sizeof(TrapChemicalBomb_GetPallet) == 0x000008, "Wrong size on TrapChemicalBomb_GetPallet");
static_assert(offsetof(TrapChemicalBomb_GetPallet, ReturnValue) == 0x000000, "Member 'TrapChemicalBomb_GetPallet::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TrapChemicalBomb.GetState
// 0x0001 (0x0001 - 0x0000)
struct TrapChemicalBomb_GetState final
{
public:
	ETrapBombState                                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapChemicalBomb_GetState) == 0x000001, "Wrong alignment on TrapChemicalBomb_GetState");
static_assert(sizeof(TrapChemicalBomb_GetState) == 0x000001, "Wrong size on TrapChemicalBomb_GetState");
static_assert(offsetof(TrapChemicalBomb_GetState, ReturnValue) == 0x000000, "Member 'TrapChemicalBomb_GetState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TrapChemicalBomb.GetTrapPlacer
// 0x0008 (0x0008 - 0x0000)
struct TrapChemicalBomb_GetTrapPlacer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TrapChemicalBomb_GetTrapPlacer) == 0x000008, "Wrong alignment on TrapChemicalBomb_GetTrapPlacer");
static_assert(sizeof(TrapChemicalBomb_GetTrapPlacer) == 0x000008, "Wrong size on TrapChemicalBomb_GetTrapPlacer");
static_assert(offsetof(TrapChemicalBomb_GetTrapPlacer, ReturnValue) == 0x000000, "Member 'TrapChemicalBomb_GetTrapPlacer::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialGameMode
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialGameMode final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATutorialGameMode*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialGameMode) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialGameMode");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialGameMode) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialGameMode");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialGameMode, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialGameMode::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialGameMode, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialGameMode::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialGameState
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialGameState final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATutorialGameState*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialGameState) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialGameState");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialGameState) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialGameState");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialGameState, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialGameState::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialGameState, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialGameState::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialHighlightController
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialHighlightController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTutorialHighlightController*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialHighlightController) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialHighlightController");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialHighlightController) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialHighlightController");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialHighlightController, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialHighlightController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialHighlightController, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialHighlightController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialNotificationController
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialNotificationController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTutorialNotificationController*        ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialNotificationController) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialNotificationController");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialNotificationController) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialNotificationController");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialNotificationController, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialNotificationController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialNotificationController, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialNotificationController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.GetTutorialObjectiveController
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_GetTutorialObjectiveController final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTutorialObjectiveController*           ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialFunctionLibrary_GetTutorialObjectiveController) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_GetTutorialObjectiveController");
static_assert(sizeof(TutorialFunctionLibrary_GetTutorialObjectiveController) == 0x000010, "Wrong size on TutorialFunctionLibrary_GetTutorialObjectiveController");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialObjectiveController, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_GetTutorialObjectiveController::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_GetTutorialObjectiveController, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_GetTutorialObjectiveController::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialFunctionLibrary.IsInTutorial
// 0x0010 (0x0010 - 0x0000)
struct TutorialFunctionLibrary_IsInTutorial final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialFunctionLibrary_IsInTutorial) == 0x000008, "Wrong alignment on TutorialFunctionLibrary_IsInTutorial");
static_assert(sizeof(TutorialFunctionLibrary_IsInTutorial) == 0x000010, "Wrong size on TutorialFunctionLibrary_IsInTutorial");
static_assert(offsetof(TutorialFunctionLibrary_IsInTutorial, WorldContextObject) == 0x000000, "Member 'TutorialFunctionLibrary_IsInTutorial::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialFunctionLibrary_IsInTutorial, ReturnValue) == 0x000008, "Member 'TutorialFunctionLibrary_IsInTutorial::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.TutorialHighlightController.SetHudComponentHighlight
// 0x0002 (0x0002 - 0x0000)
struct TutorialHighlightController_SetHudComponentHighlight final
{
public:
	EHudComponent                                 HudComponent;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Show;                                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialHighlightController_SetHudComponentHighlight) == 0x000001, "Wrong alignment on TutorialHighlightController_SetHudComponentHighlight");
static_assert(sizeof(TutorialHighlightController_SetHudComponentHighlight) == 0x000002, "Wrong size on TutorialHighlightController_SetHudComponentHighlight");
static_assert(offsetof(TutorialHighlightController_SetHudComponentHighlight, HudComponent) == 0x000000, "Member 'TutorialHighlightController_SetHudComponentHighlight::HudComponent' has a wrong offset!");
static_assert(offsetof(TutorialHighlightController_SetHudComponentHighlight, Show) == 0x000001, "Member 'TutorialHighlightController_SetHudComponentHighlight::Show' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.AddObjective
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_AddObjective final
{
public:
	class FName                                   ObjectiveId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_AddObjective) == 0x000004, "Wrong alignment on TutorialLevel_AddObjective");
static_assert(sizeof(TutorialLevel_AddObjective) == 0x00000C, "Wrong size on TutorialLevel_AddObjective");
static_assert(offsetof(TutorialLevel_AddObjective, ObjectiveId) == 0x000000, "Member 'TutorialLevel_AddObjective::ObjectiveId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.CompleteObjective
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_CompleteObjective final
{
public:
	class FName                                   ObjectiveId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_CompleteObjective) == 0x000004, "Wrong alignment on TutorialLevel_CompleteObjective");
static_assert(sizeof(TutorialLevel_CompleteObjective) == 0x00000C, "Wrong size on TutorialLevel_CompleteObjective");
static_assert(offsetof(TutorialLevel_CompleteObjective, ObjectiveId) == 0x000000, "Member 'TutorialLevel_CompleteObjective::ObjectiveId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.DisplayBlockingNotification
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_DisplayBlockingNotification final
{
public:
	class FName                                   NotificationId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_DisplayBlockingNotification) == 0x000004, "Wrong alignment on TutorialLevel_DisplayBlockingNotification");
static_assert(sizeof(TutorialLevel_DisplayBlockingNotification) == 0x00000C, "Wrong size on TutorialLevel_DisplayBlockingNotification");
static_assert(offsetof(TutorialLevel_DisplayBlockingNotification, NotificationId) == 0x000000, "Member 'TutorialLevel_DisplayBlockingNotification::NotificationId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.DisplayNotification
// 0x0010 (0x0010 - 0x0000)
struct TutorialLevel_DisplayNotification final
{
public:
	class FName                                   NotificationId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_DisplayNotification) == 0x000004, "Wrong alignment on TutorialLevel_DisplayNotification");
static_assert(sizeof(TutorialLevel_DisplayNotification) == 0x000010, "Wrong size on TutorialLevel_DisplayNotification");
static_assert(offsetof(TutorialLevel_DisplayNotification, NotificationId) == 0x000000, "Member 'TutorialLevel_DisplayNotification::NotificationId' has a wrong offset!");
static_assert(offsetof(TutorialLevel_DisplayNotification, Time) == 0x00000C, "Member 'TutorialLevel_DisplayNotification::Time' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.HandleNotificationDismissed
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_HandleNotificationDismissed final
{
public:
	class FName                                   NotificationId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_HandleNotificationDismissed) == 0x000004, "Wrong alignment on TutorialLevel_HandleNotificationDismissed");
static_assert(sizeof(TutorialLevel_HandleNotificationDismissed) == 0x00000C, "Wrong size on TutorialLevel_HandleNotificationDismissed");
static_assert(offsetof(TutorialLevel_HandleNotificationDismissed, NotificationId) == 0x000000, "Member 'TutorialLevel_HandleNotificationDismissed::NotificationId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.OnNotificationDismissed
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_OnNotificationDismissed final
{
public:
	class FName                                   NotificationId;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_OnNotificationDismissed) == 0x000004, "Wrong alignment on TutorialLevel_OnNotificationDismissed");
static_assert(sizeof(TutorialLevel_OnNotificationDismissed) == 0x00000C, "Wrong size on TutorialLevel_OnNotificationDismissed");
static_assert(offsetof(TutorialLevel_OnNotificationDismissed, NotificationId) == 0x000000, "Member 'TutorialLevel_OnNotificationDismissed::NotificationId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.OnTutorialStepUpdated
// 0x0001 (0x0001 - 0x0000)
struct TutorialLevel_OnTutorialStepUpdated final
{
public:
	ETutorialStep                                 TutorialStep;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_OnTutorialStepUpdated) == 0x000001, "Wrong alignment on TutorialLevel_OnTutorialStepUpdated");
static_assert(sizeof(TutorialLevel_OnTutorialStepUpdated) == 0x000001, "Wrong size on TutorialLevel_OnTutorialStepUpdated");
static_assert(offsetof(TutorialLevel_OnTutorialStepUpdated, TutorialStep) == 0x000000, "Member 'TutorialLevel_OnTutorialStepUpdated::TutorialStep' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.RemoveObjective
// 0x000C (0x000C - 0x0000)
struct TutorialLevel_RemoveObjective final
{
public:
	class FName                                   ObjectiveId;                                       // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_RemoveObjective) == 0x000004, "Wrong alignment on TutorialLevel_RemoveObjective");
static_assert(sizeof(TutorialLevel_RemoveObjective) == 0x00000C, "Wrong size on TutorialLevel_RemoveObjective");
static_assert(offsetof(TutorialLevel_RemoveObjective, ObjectiveId) == 0x000000, "Member 'TutorialLevel_RemoveObjective::ObjectiveId' has a wrong offset!");

// Function DeadByDaylight.TutorialLevel.SetHandledTutorialStep
// 0x0001 (0x0001 - 0x0000)
struct TutorialLevel_SetHandledTutorialStep final
{
public:
	ETutorialStep                                 TutorialStep;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialLevel_SetHandledTutorialStep) == 0x000001, "Wrong alignment on TutorialLevel_SetHandledTutorialStep");
static_assert(sizeof(TutorialLevel_SetHandledTutorialStep) == 0x000001, "Wrong size on TutorialLevel_SetHandledTutorialStep");
static_assert(offsetof(TutorialLevel_SetHandledTutorialStep, TutorialStep) == 0x000000, "Member 'TutorialLevel_SetHandledTutorialStep::TutorialStep' has a wrong offset!");

// Function DeadByDaylight.TutorialNotificationController.HideNotification
// 0x0001 (0x0001 - 0x0000)
struct TutorialNotificationController_HideNotification final
{
public:
	bool                                          RemoveAllCachedNotifs;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialNotificationController_HideNotification) == 0x000001, "Wrong alignment on TutorialNotificationController_HideNotification");
static_assert(sizeof(TutorialNotificationController_HideNotification) == 0x000001, "Wrong size on TutorialNotificationController_HideNotification");
static_assert(offsetof(TutorialNotificationController_HideNotification, RemoveAllCachedNotifs) == 0x000000, "Member 'TutorialNotificationController_HideNotification::RemoveAllCachedNotifs' has a wrong offset!");

// DelegateFunction DeadByDaylight.TutorialNotificationController.OnBlockingNotificationDismissedEvent__DelegateSignature
// 0x000C (0x000C - 0x0000)
struct TutorialNotificationController_OnBlockingNotificationDismissedEvent__DelegateSignature final
{
public:
	class FName                                   TutorialNotificationId;                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialNotificationController_OnBlockingNotificationDismissedEvent__DelegateSignature) == 0x000004, "Wrong alignment on TutorialNotificationController_OnBlockingNotificationDismissedEvent__DelegateSignature");
static_assert(sizeof(TutorialNotificationController_OnBlockingNotificationDismissedEvent__DelegateSignature) == 0x00000C, "Wrong size on TutorialNotificationController_OnBlockingNotificationDismissedEvent__DelegateSignature");
static_assert(offsetof(TutorialNotificationController_OnBlockingNotificationDismissedEvent__DelegateSignature, TutorialNotificationId) == 0x000000, "Member 'TutorialNotificationController_OnBlockingNotificationDismissedEvent__DelegateSignature::TutorialNotificationId' has a wrong offset!");

// Function DeadByDaylight.TutorialNotificationController.ShowBlockingNotification
// 0x000C (0x000C - 0x0000)
struct TutorialNotificationController_ShowBlockingNotification final
{
public:
	class FName                                   TutorialNotificationId;                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialNotificationController_ShowBlockingNotification) == 0x000004, "Wrong alignment on TutorialNotificationController_ShowBlockingNotification");
static_assert(sizeof(TutorialNotificationController_ShowBlockingNotification) == 0x00000C, "Wrong size on TutorialNotificationController_ShowBlockingNotification");
static_assert(offsetof(TutorialNotificationController_ShowBlockingNotification, TutorialNotificationId) == 0x000000, "Member 'TutorialNotificationController_ShowBlockingNotification::TutorialNotificationId' has a wrong offset!");

// Function DeadByDaylight.TutorialNotificationController.ShowNotification
// 0x0010 (0x0010 - 0x0000)
struct TutorialNotificationController_ShowNotification final
{
public:
	class FName                                   TutorialNotificationId;                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialNotificationController_ShowNotification) == 0x000004, "Wrong alignment on TutorialNotificationController_ShowNotification");
static_assert(sizeof(TutorialNotificationController_ShowNotification) == 0x000010, "Wrong size on TutorialNotificationController_ShowNotification");
static_assert(offsetof(TutorialNotificationController_ShowNotification, TutorialNotificationId) == 0x000000, "Member 'TutorialNotificationController_ShowNotification::TutorialNotificationId' has a wrong offset!");
static_assert(offsetof(TutorialNotificationController_ShowNotification, Duration) == 0x00000C, "Member 'TutorialNotificationController_ShowNotification::Duration' has a wrong offset!");

// Function DeadByDaylight.TutorialsUtilities.DestroyAI
// 0x0008 (0x0008 - 0x0000)
struct TutorialsUtilities_DestroyAI final
{
public:
	class AAIController*                          AIController;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialsUtilities_DestroyAI) == 0x000008, "Wrong alignment on TutorialsUtilities_DestroyAI");
static_assert(sizeof(TutorialsUtilities_DestroyAI) == 0x000008, "Wrong size on TutorialsUtilities_DestroyAI");
static_assert(offsetof(TutorialsUtilities_DestroyAI, AIController) == 0x000000, "Member 'TutorialsUtilities_DestroyAI::AIController' has a wrong offset!");

// Function DeadByDaylight.TutorialsUtilities.GetTutorialsUtilities
// 0x0010 (0x0010 - 0x0000)
struct TutorialsUtilities_GetTutorialsUtilities final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ATutorialsUtilities*                    ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialsUtilities_GetTutorialsUtilities) == 0x000008, "Wrong alignment on TutorialsUtilities_GetTutorialsUtilities");
static_assert(sizeof(TutorialsUtilities_GetTutorialsUtilities) == 0x000010, "Wrong size on TutorialsUtilities_GetTutorialsUtilities");
static_assert(offsetof(TutorialsUtilities_GetTutorialsUtilities, WorldContextObject) == 0x000000, "Member 'TutorialsUtilities_GetTutorialsUtilities::WorldContextObject' has a wrong offset!");
static_assert(offsetof(TutorialsUtilities_GetTutorialsUtilities, ReturnValue) == 0x000008, "Member 'TutorialsUtilities_GetTutorialsUtilities::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.AnimationWidget.SetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct AnimationWidget_SetPlayRate final
{
public:
	float                                         Rate;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationWidget_SetPlayRate) == 0x000004, "Wrong alignment on AnimationWidget_SetPlayRate");
static_assert(sizeof(AnimationWidget_SetPlayRate) == 0x000004, "Wrong size on AnimationWidget_SetPlayRate");
static_assert(offsetof(AnimationWidget_SetPlayRate, Rate) == 0x000000, "Member 'AnimationWidget_SetPlayRate::Rate' has a wrong offset!");

// Function DeadByDaylight.AnimationWidget.GetPlayRate
// 0x0004 (0x0004 - 0x0000)
struct AnimationWidget_GetPlayRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnimationWidget_GetPlayRate) == 0x000004, "Wrong alignment on AnimationWidget_GetPlayRate");
static_assert(sizeof(AnimationWidget_GetPlayRate) == 0x000004, "Wrong size on AnimationWidget_GetPlayRate");
static_assert(offsetof(AnimationWidget_GetPlayRate, ReturnValue) == 0x000000, "Member 'AnimationWidget_GetPlayRate::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.VaultableComponent.OnChaseEnded
// 0x0010 (0x0010 - 0x0000)
struct VaultableComponent_OnChaseEnded final
{
public:
	class ADBDPlayer*                             Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseTimer;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VaultableComponent_OnChaseEnded) == 0x000008, "Wrong alignment on VaultableComponent_OnChaseEnded");
static_assert(sizeof(VaultableComponent_OnChaseEnded) == 0x000010, "Wrong size on VaultableComponent_OnChaseEnded");
static_assert(offsetof(VaultableComponent_OnChaseEnded, Survivor) == 0x000000, "Member 'VaultableComponent_OnChaseEnded::Survivor' has a wrong offset!");
static_assert(offsetof(VaultableComponent_OnChaseEnded, ChaseTimer) == 0x000008, "Member 'VaultableComponent_OnChaseEnded::ChaseTimer' has a wrong offset!");

// Function DeadByDaylight.VaultableComponent.SignalVault
// 0x0010 (0x0010 - 0x0000)
struct VaultableComponent_SignalVault final
{
public:
	class ADBDPlayer*                             Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionTime;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VaultableComponent_SignalVault) == 0x000008, "Wrong alignment on VaultableComponent_SignalVault");
static_assert(sizeof(VaultableComponent_SignalVault) == 0x000010, "Wrong size on VaultableComponent_SignalVault");
static_assert(offsetof(VaultableComponent_SignalVault, Survivor) == 0x000000, "Member 'VaultableComponent_SignalVault::Survivor' has a wrong offset!");
static_assert(offsetof(VaultableComponent_SignalVault, InteractionTime) == 0x000008, "Member 'VaultableComponent_SignalVault::InteractionTime' has a wrong offset!");

// Function DeadByDaylight.WakerObject.BindToCamperDreamStateChanged
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_BindToCamperDreamStateChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_BindToCamperDreamStateChanged) == 0x000008, "Wrong alignment on WakerObject_BindToCamperDreamStateChanged");
static_assert(sizeof(WakerObject_BindToCamperDreamStateChanged) == 0x000008, "Wrong size on WakerObject_BindToCamperDreamStateChanged");
static_assert(offsetof(WakerObject_BindToCamperDreamStateChanged, Player) == 0x000000, "Member 'WakerObject_BindToCamperDreamStateChanged::Player' has a wrong offset!");

// Function DeadByDaylight.WakerObject.OnAnyCamperDreamStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WakerObject_OnAnyCamperDreamStateChanged final
{
public:
	bool                                          IsInDreamworld;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocallyObservedChanged;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_OnAnyCamperDreamStateChanged) == 0x000001, "Wrong alignment on WakerObject_OnAnyCamperDreamStateChanged");
static_assert(sizeof(WakerObject_OnAnyCamperDreamStateChanged) == 0x000002, "Wrong size on WakerObject_OnAnyCamperDreamStateChanged");
static_assert(offsetof(WakerObject_OnAnyCamperDreamStateChanged, IsInDreamworld) == 0x000000, "Member 'WakerObject_OnAnyCamperDreamStateChanged::IsInDreamworld' has a wrong offset!");
static_assert(offsetof(WakerObject_OnAnyCamperDreamStateChanged, LocallyObservedChanged) == 0x000001, "Member 'WakerObject_OnAnyCamperDreamStateChanged::LocallyObservedChanged' has a wrong offset!");

// Function DeadByDaylight.WakerObject.OnLinkedCamperDreamStateChanged
// 0x0002 (0x0002 - 0x0000)
struct WakerObject_OnLinkedCamperDreamStateChanged final
{
public:
	bool                                          IsInDreamworld;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocallyObservedChanged;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_OnLinkedCamperDreamStateChanged) == 0x000001, "Wrong alignment on WakerObject_OnLinkedCamperDreamStateChanged");
static_assert(sizeof(WakerObject_OnLinkedCamperDreamStateChanged) == 0x000002, "Wrong size on WakerObject_OnLinkedCamperDreamStateChanged");
static_assert(offsetof(WakerObject_OnLinkedCamperDreamStateChanged, IsInDreamworld) == 0x000000, "Member 'WakerObject_OnLinkedCamperDreamStateChanged::IsInDreamworld' has a wrong offset!");
static_assert(offsetof(WakerObject_OnLinkedCamperDreamStateChanged, LocallyObservedChanged) == 0x000001, "Member 'WakerObject_OnLinkedCamperDreamStateChanged::LocallyObservedChanged' has a wrong offset!");

// Function DeadByDaylight.WakerObject.OnNewLinkedCamper
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_OnNewLinkedCamper final
{
public:
	class UCamperDreamworldComponent*             DreamworldComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_OnNewLinkedCamper) == 0x000008, "Wrong alignment on WakerObject_OnNewLinkedCamper");
static_assert(sizeof(WakerObject_OnNewLinkedCamper) == 0x000008, "Wrong size on WakerObject_OnNewLinkedCamper");
static_assert(offsetof(WakerObject_OnNewLinkedCamper, DreamworldComponent) == 0x000000, "Member 'WakerObject_OnNewLinkedCamper::DreamworldComponent' has a wrong offset!");

// Function DeadByDaylight.WakerObject.OnRep_LinkedCamperChanged
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_OnRep_LinkedCamperChanged final
{
public:
	class UCamperDreamworldComponent*             Previous;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_OnRep_LinkedCamperChanged) == 0x000008, "Wrong alignment on WakerObject_OnRep_LinkedCamperChanged");
static_assert(sizeof(WakerObject_OnRep_LinkedCamperChanged) == 0x000008, "Wrong size on WakerObject_OnRep_LinkedCamperChanged");
static_assert(offsetof(WakerObject_OnRep_LinkedCamperChanged, Previous) == 0x000000, "Member 'WakerObject_OnRep_LinkedCamperChanged::Previous' has a wrong offset!");

// Function DeadByDaylight.WakerObject.SetChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_SetChargeComplete final
{
public:
	bool                                          Complete;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_SetChargeComplete) == 0x000001, "Wrong alignment on WakerObject_SetChargeComplete");
static_assert(sizeof(WakerObject_SetChargeComplete) == 0x000001, "Wrong size on WakerObject_SetChargeComplete");
static_assert(offsetof(WakerObject_SetChargeComplete, Complete) == 0x000000, "Member 'WakerObject_SetChargeComplete::Complete' has a wrong offset!");

// Function DeadByDaylight.WakerObject.CanWakeUpCamper
// 0x0010 (0x0010 - 0x0000)
struct WakerObject_CanWakeUpCamper final
{
public:
	const class ADBDPlayer*                       Camper;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WakerObject_CanWakeUpCamper) == 0x000008, "Wrong alignment on WakerObject_CanWakeUpCamper");
static_assert(sizeof(WakerObject_CanWakeUpCamper) == 0x000010, "Wrong size on WakerObject_CanWakeUpCamper");
static_assert(offsetof(WakerObject_CanWakeUpCamper, Camper) == 0x000000, "Member 'WakerObject_CanWakeUpCamper::Camper' has a wrong offset!");
static_assert(offsetof(WakerObject_CanWakeUpCamper, ReturnValue) == 0x000008, "Member 'WakerObject_CanWakeUpCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetChargeComplete
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_GetChargeComplete final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetChargeComplete) == 0x000001, "Wrong alignment on WakerObject_GetChargeComplete");
static_assert(sizeof(WakerObject_GetChargeComplete) == 0x000001, "Wrong size on WakerObject_GetChargeComplete");
static_assert(offsetof(WakerObject_GetChargeComplete, ReturnValue) == 0x000000, "Member 'WakerObject_GetChargeComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetInteractionPercentComplete
// 0x0004 (0x0004 - 0x0000)
struct WakerObject_GetInteractionPercentComplete final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetInteractionPercentComplete) == 0x000004, "Wrong alignment on WakerObject_GetInteractionPercentComplete");
static_assert(sizeof(WakerObject_GetInteractionPercentComplete) == 0x000004, "Wrong size on WakerObject_GetInteractionPercentComplete");
static_assert(offsetof(WakerObject_GetInteractionPercentComplete, ReturnValue) == 0x000000, "Member 'WakerObject_GetInteractionPercentComplete::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetInteractorPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_GetInteractorPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetInteractorPrimitiveComponent) == 0x000008, "Wrong alignment on WakerObject_GetInteractorPrimitiveComponent");
static_assert(sizeof(WakerObject_GetInteractorPrimitiveComponent) == 0x000008, "Wrong size on WakerObject_GetInteractorPrimitiveComponent");
static_assert(offsetof(WakerObject_GetInteractorPrimitiveComponent, ReturnValue) == 0x000000, "Member 'WakerObject_GetInteractorPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetIsInteracting
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_GetIsInteracting final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetIsInteracting) == 0x000001, "Wrong alignment on WakerObject_GetIsInteracting");
static_assert(sizeof(WakerObject_GetIsInteracting) == 0x000001, "Wrong size on WakerObject_GetIsInteracting");
static_assert(offsetof(WakerObject_GetIsInteracting, ReturnValue) == 0x000000, "Member 'WakerObject_GetIsInteracting::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.GetMesh
// 0x0008 (0x0008 - 0x0000)
struct WakerObject_GetMesh final
{
public:
	class USkeletalMeshComponent*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_GetMesh) == 0x000008, "Wrong alignment on WakerObject_GetMesh");
static_assert(sizeof(WakerObject_GetMesh) == 0x000008, "Wrong size on WakerObject_GetMesh");
static_assert(offsetof(WakerObject_GetMesh, ReturnValue) == 0x000000, "Member 'WakerObject_GetMesh::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.HasLinkedCamper
// 0x0001 (0x0001 - 0x0000)
struct WakerObject_HasLinkedCamper final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WakerObject_HasLinkedCamper) == 0x000001, "Wrong alignment on WakerObject_HasLinkedCamper");
static_assert(sizeof(WakerObject_HasLinkedCamper) == 0x000001, "Wrong size on WakerObject_HasLinkedCamper");
static_assert(offsetof(WakerObject_HasLinkedCamper, ReturnValue) == 0x000000, "Member 'WakerObject_HasLinkedCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.WakerObject.IsLinkedToCamper
// 0x0010 (0x0010 - 0x0000)
struct WakerObject_IsLinkedToCamper final
{
public:
	const class ADBDPlayer*                       Camper;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(WakerObject_IsLinkedToCamper) == 0x000008, "Wrong alignment on WakerObject_IsLinkedToCamper");
static_assert(sizeof(WakerObject_IsLinkedToCamper) == 0x000010, "Wrong size on WakerObject_IsLinkedToCamper");
static_assert(offsetof(WakerObject_IsLinkedToCamper, Camper) == 0x000000, "Member 'WakerObject_IsLinkedToCamper::Camper' has a wrong offset!");
static_assert(offsetof(WakerObject_IsLinkedToCamper, ReturnValue) == 0x000008, "Member 'WakerObject_IsLinkedToCamper::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.Window.Authority_OnVaultInternal
// 0x0010 (0x0010 - 0x0000)
struct Window_Authority_OnVaultInternal final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanBlockVault;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Window_Authority_OnVaultInternal) == 0x000008, "Wrong alignment on Window_Authority_OnVaultInternal");
static_assert(sizeof(Window_Authority_OnVaultInternal) == 0x000010, "Wrong size on Window_Authority_OnVaultInternal");
static_assert(offsetof(Window_Authority_OnVaultInternal, Player) == 0x000000, "Member 'Window_Authority_OnVaultInternal::Player' has a wrong offset!");
static_assert(offsetof(Window_Authority_OnVaultInternal, CanBlockVault) == 0x000008, "Member 'Window_Authority_OnVaultInternal::CanBlockVault' has a wrong offset!");

// Function DeadByDaylight.Window.Authority_SetBlockedByLevel
// 0x0001 (0x0001 - 0x0000)
struct Window_Authority_SetBlockedByLevel final
{
public:
	bool                                          IsBlockedByLevel;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_Authority_SetBlockedByLevel) == 0x000001, "Wrong alignment on Window_Authority_SetBlockedByLevel");
static_assert(sizeof(Window_Authority_SetBlockedByLevel) == 0x000001, "Wrong size on Window_Authority_SetBlockedByLevel");
static_assert(offsetof(Window_Authority_SetBlockedByLevel, IsBlockedByLevel) == 0x000000, "Member 'Window_Authority_SetBlockedByLevel::IsBlockedByLevel' has a wrong offset!");

// Function DeadByDaylight.Window.NotifyOnFastVault
// 0x0010 (0x0010 - 0x0000)
struct Window_NotifyOnFastVault final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionDefinition*                 Interaction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_NotifyOnFastVault) == 0x000008, "Wrong alignment on Window_NotifyOnFastVault");
static_assert(sizeof(Window_NotifyOnFastVault) == 0x000010, "Wrong size on Window_NotifyOnFastVault");
static_assert(offsetof(Window_NotifyOnFastVault, Player) == 0x000000, "Member 'Window_NotifyOnFastVault::Player' has a wrong offset!");
static_assert(offsetof(Window_NotifyOnFastVault, Interaction) == 0x000008, "Member 'Window_NotifyOnFastVault::Interaction' has a wrong offset!");

// Function DeadByDaylight.Window.OnFastVault
// 0x0010 (0x0010 - 0x0000)
struct Window_OnFastVault final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractionDefinition*                 Interaction;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Window_OnFastVault) == 0x000008, "Wrong alignment on Window_OnFastVault");
static_assert(sizeof(Window_OnFastVault) == 0x000010, "Wrong size on Window_OnFastVault");
static_assert(offsetof(Window_OnFastVault, Player) == 0x000000, "Member 'Window_OnFastVault::Player' has a wrong offset!");
static_assert(offsetof(Window_OnFastVault, Interaction) == 0x000008, "Member 'Window_OnFastVault::Interaction' has a wrong offset!");

// Function DeadByDaylight.Window.IsWindowVaultBlockedFor
// 0x0010 (0x0010 - 0x0000)
struct Window_IsWindowVaultBlockedFor final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Window_IsWindowVaultBlockedFor) == 0x000008, "Wrong alignment on Window_IsWindowVaultBlockedFor");
static_assert(sizeof(Window_IsWindowVaultBlockedFor) == 0x000010, "Wrong size on Window_IsWindowVaultBlockedFor");
static_assert(offsetof(Window_IsWindowVaultBlockedFor, Player) == 0x000000, "Member 'Window_IsWindowVaultBlockedFor::Player' has a wrong offset!");
static_assert(offsetof(Window_IsWindowVaultBlockedFor, ReturnValue) == 0x000008, "Member 'Window_IsWindowVaultBlockedFor::ReturnValue' has a wrong offset!");

// Function DeadByDaylight.ZoneDetectorComponent.OnOverlapEnter
// 0x0110 (0x0110 - 0x0000)
struct ZoneDetectorComponent_OnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZoneDetectorComponent_OnOverlapEnter) == 0x000008, "Wrong alignment on ZoneDetectorComponent_OnOverlapEnter");
static_assert(sizeof(ZoneDetectorComponent_OnOverlapEnter) == 0x000110, "Wrong size on ZoneDetectorComponent_OnOverlapEnter");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, HitComponent) == 0x000000, "Member 'ZoneDetectorComponent_OnOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, OtherActor) == 0x000008, "Member 'ZoneDetectorComponent_OnOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, OtherComp) == 0x000010, "Member 'ZoneDetectorComponent_OnOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'ZoneDetectorComponent_OnOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, bFromSweep) == 0x00001C, "Member 'ZoneDetectorComponent_OnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapEnter, SweepResult) == 0x000020, "Member 'ZoneDetectorComponent_OnOverlapEnter::SweepResult' has a wrong offset!");

// Function DeadByDaylight.ZoneDetectorComponent.OnOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct ZoneDetectorComponent_OnOverlapExit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ZoneDetectorComponent_OnOverlapExit) == 0x000008, "Wrong alignment on ZoneDetectorComponent_OnOverlapExit");
static_assert(sizeof(ZoneDetectorComponent_OnOverlapExit) == 0x000020, "Wrong size on ZoneDetectorComponent_OnOverlapExit");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapExit, HitComponent) == 0x000000, "Member 'ZoneDetectorComponent_OnOverlapExit::HitComponent' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapExit, OtherActor) == 0x000008, "Member 'ZoneDetectorComponent_OnOverlapExit::OtherActor' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapExit, OtherComp) == 0x000010, "Member 'ZoneDetectorComponent_OnOverlapExit::OtherComp' has a wrong offset!");
static_assert(offsetof(ZoneDetectorComponent_OnOverlapExit, OtherBodyIndex) == 0x000018, "Member 'ZoneDetectorComponent_OnOverlapExit::OtherBodyIndex' has a wrong offset!");

}

