#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Onboarding

#include "Basic.hpp"

#include "DataTableUtilities_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK
{

// Enum Onboarding.EOnboardingModeList
// NumValues: 0x0004
enum class EOnboardingModeList : uint8
{
	DefaultMode                              = 0,
	MenuForced                               = 1,
	TutorialForced                           = 2,
	EOnboardingModeList_MAX                  = 3,
};

// ScriptStruct Onboarding.OnboardingBotMatchDefinition
// 0x0058 (0x0070 - 0x0018)
struct FOnboardingBotMatchDefinition final : public FDBDTableRowBaseWithId
{
public:
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   DefaultMapId;                                      // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultSurvivorId;                                 // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultKillerId;                                   // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DefaultBotsId;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnboardingBotMatchDefinition) == 0x000008, "Wrong alignment on FOnboardingBotMatchDefinition");
static_assert(sizeof(FOnboardingBotMatchDefinition) == 0x000070, "Wrong size on FOnboardingBotMatchDefinition");
static_assert(offsetof(FOnboardingBotMatchDefinition, DisplayName) == 0x000018, "Member 'FOnboardingBotMatchDefinition::DisplayName' has a wrong offset!");
static_assert(offsetof(FOnboardingBotMatchDefinition, Description) == 0x000030, "Member 'FOnboardingBotMatchDefinition::Description' has a wrong offset!");
static_assert(offsetof(FOnboardingBotMatchDefinition, DefaultMapId) == 0x000048, "Member 'FOnboardingBotMatchDefinition::DefaultMapId' has a wrong offset!");
static_assert(offsetof(FOnboardingBotMatchDefinition, DefaultSurvivorId) == 0x000054, "Member 'FOnboardingBotMatchDefinition::DefaultSurvivorId' has a wrong offset!");
static_assert(offsetof(FOnboardingBotMatchDefinition, DefaultKillerId) == 0x000058, "Member 'FOnboardingBotMatchDefinition::DefaultKillerId' has a wrong offset!");
static_assert(offsetof(FOnboardingBotMatchDefinition, DefaultBotsId) == 0x000060, "Member 'FOnboardingBotMatchDefinition::DefaultBotsId' has a wrong offset!");

// ScriptStruct Onboarding.OnboardingTutorialDefinition
// 0x00B8 (0x00D0 - 0x0018)
struct FOnboardingTutorialDefinition final : public FDBDTableRowBaseWithId
{
public:
	class FText                                   DisplayName;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   CompletedDisplayName;                              // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   CompletedDescription;                              // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EOnboardingTutorialType                       TutorialType;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnboardingTutorialButtonStyle                ButtonStyle;                                       // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x6];                                       // 0x007A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LevelId;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0090(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DefaultCharacterId;                                // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOnboardingTutorialDefinition) == 0x000008, "Wrong alignment on FOnboardingTutorialDefinition");
static_assert(sizeof(FOnboardingTutorialDefinition) == 0x0000D0, "Wrong size on FOnboardingTutorialDefinition");
static_assert(offsetof(FOnboardingTutorialDefinition, DisplayName) == 0x000018, "Member 'FOnboardingTutorialDefinition::DisplayName' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialDefinition, CompletedDisplayName) == 0x000030, "Member 'FOnboardingTutorialDefinition::CompletedDisplayName' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialDefinition, Description) == 0x000048, "Member 'FOnboardingTutorialDefinition::Description' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialDefinition, CompletedDescription) == 0x000060, "Member 'FOnboardingTutorialDefinition::CompletedDescription' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialDefinition, TutorialType) == 0x000078, "Member 'FOnboardingTutorialDefinition::TutorialType' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialDefinition, ButtonStyle) == 0x000079, "Member 'FOnboardingTutorialDefinition::ButtonStyle' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialDefinition, LevelId) == 0x000080, "Member 'FOnboardingTutorialDefinition::LevelId' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialDefinition, Icon) == 0x000090, "Member 'FOnboardingTutorialDefinition::Icon' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialDefinition, DefaultCharacterId) == 0x0000C8, "Member 'FOnboardingTutorialDefinition::DefaultCharacterId' has a wrong offset!");

// ScriptStruct Onboarding.SecretBotMatchLoadoutDefinition
// 0x0028 (0x0030 - 0x0008)
struct FSecretBotMatchLoadoutDefinition final : public FDBDTableRowBase
{
public:
	uint8                                         BotRank;                                           // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadoutItemType                              ItemEquipped;                                      // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   ItemRarity;                                        // 0x000A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NbAddons;                                          // 0x000B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   AddonsRarity;                                      // 0x000C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   OfferingRarity;                                    // 0x000D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NbGenericPerks;                                    // 0x000E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         NbCharacterSpecificPerks;                          // 0x000F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 PerkTiersList;                                     // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 CharactersIndexList;                               // 0x0020(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecretBotMatchLoadoutDefinition) == 0x000008, "Wrong alignment on FSecretBotMatchLoadoutDefinition");
static_assert(sizeof(FSecretBotMatchLoadoutDefinition) == 0x000030, "Wrong size on FSecretBotMatchLoadoutDefinition");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, BotRank) == 0x000008, "Member 'FSecretBotMatchLoadoutDefinition::BotRank' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, ItemEquipped) == 0x000009, "Member 'FSecretBotMatchLoadoutDefinition::ItemEquipped' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, ItemRarity) == 0x00000A, "Member 'FSecretBotMatchLoadoutDefinition::ItemRarity' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, NbAddons) == 0x00000B, "Member 'FSecretBotMatchLoadoutDefinition::NbAddons' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, AddonsRarity) == 0x00000C, "Member 'FSecretBotMatchLoadoutDefinition::AddonsRarity' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, OfferingRarity) == 0x00000D, "Member 'FSecretBotMatchLoadoutDefinition::OfferingRarity' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, NbGenericPerks) == 0x00000E, "Member 'FSecretBotMatchLoadoutDefinition::NbGenericPerks' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, NbCharacterSpecificPerks) == 0x00000F, "Member 'FSecretBotMatchLoadoutDefinition::NbCharacterSpecificPerks' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, PerkTiersList) == 0x000010, "Member 'FSecretBotMatchLoadoutDefinition::PerkTiersList' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchLoadoutDefinition, CharactersIndexList) == 0x000020, "Member 'FSecretBotMatchLoadoutDefinition::CharactersIndexList' has a wrong offset!");

// ScriptStruct Onboarding.SecretBotMatchNamesDefinition
// 0x0020 (0x0028 - 0x0008)
struct FSecretBotMatchNamesDefinition final : public FDBDTableRowBase
{
public:
	uint8                                         ID;                                                // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Name;                                              // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSecretBotMatchNamesDefinition) == 0x000008, "Wrong alignment on FSecretBotMatchNamesDefinition");
static_assert(sizeof(FSecretBotMatchNamesDefinition) == 0x000028, "Wrong size on FSecretBotMatchNamesDefinition");
static_assert(offsetof(FSecretBotMatchNamesDefinition, ID) == 0x000008, "Member 'FSecretBotMatchNamesDefinition::ID' has a wrong offset!");
static_assert(offsetof(FSecretBotMatchNamesDefinition, Name) == 0x000010, "Member 'FSecretBotMatchNamesDefinition::Name' has a wrong offset!");

}

