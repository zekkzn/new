#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheNightmare

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TheNightmare.NightmareCheatComponent.DBD_AllowWakeUpAtAnyClock
// 0x0001 (0x0001 - 0x0000)
struct NightmareCheatComponent_DBD_AllowWakeUpAtAnyClock final
{
public:
	bool                                          Allow;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NightmareCheatComponent_DBD_AllowWakeUpAtAnyClock) == 0x000001, "Wrong alignment on NightmareCheatComponent_DBD_AllowWakeUpAtAnyClock");
static_assert(sizeof(NightmareCheatComponent_DBD_AllowWakeUpAtAnyClock) == 0x000001, "Wrong size on NightmareCheatComponent_DBD_AllowWakeUpAtAnyClock");
static_assert(offsetof(NightmareCheatComponent_DBD_AllowWakeUpAtAnyClock, Allow) == 0x000000, "Member 'NightmareCheatComponent_DBD_AllowWakeUpAtAnyClock::Allow' has a wrong offset!");

// Function TheNightmare.BloodWarden.GetPerkLevelSpikeDurationsAtLevel
// 0x0004 (0x0004 - 0x0000)
struct BloodWarden_GetPerkLevelSpikeDurationsAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodWarden_GetPerkLevelSpikeDurationsAtLevel) == 0x000004, "Wrong alignment on BloodWarden_GetPerkLevelSpikeDurationsAtLevel");
static_assert(sizeof(BloodWarden_GetPerkLevelSpikeDurationsAtLevel) == 0x000004, "Wrong size on BloodWarden_GetPerkLevelSpikeDurationsAtLevel");
static_assert(offsetof(BloodWarden_GetPerkLevelSpikeDurationsAtLevel, ReturnValue) == 0x000000, "Member 'BloodWarden_GetPerkLevelSpikeDurationsAtLevel::ReturnValue' has a wrong offset!");

// Function TheNightmare.GeneratorDreamworldComponent.Cosmetic_OnPlayerFailSkillCheck
// 0x0008 (0x0008 - 0x0000)
struct GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck) == 0x000008, "Wrong alignment on GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck");
static_assert(sizeof(GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck) == 0x000008, "Wrong size on GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck");
static_assert(offsetof(GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck, Player) == 0x000000, "Member 'GeneratorDreamworldComponent_Cosmetic_OnPlayerFailSkillCheck::Player' has a wrong offset!");

// Function TheNightmare.GeneratorDreamworldComponent.OnRepairSkillCheckFailed
// 0x0018 (0x0018 - 0x0000)
struct GeneratorDreamworldComponent_OnRepairSkillCheckFailed final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeChange;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed) == 0x000008, "Wrong alignment on GeneratorDreamworldComponent_OnRepairSkillCheckFailed");
static_assert(sizeof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed) == 0x000018, "Wrong size on GeneratorDreamworldComponent_OnRepairSkillCheckFailed");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, Success) == 0x000000, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::Success' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, Bonus) == 0x000001, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::Bonus' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, Player) == 0x000008, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::Player' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, TriggerLoudNoise) == 0x000010, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::TriggerLoudNoise' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, HadInput) == 0x000011, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::HadInput' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, Type) == 0x000012, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::Type' has a wrong offset!");
static_assert(offsetof(GeneratorDreamworldComponent_OnRepairSkillCheckFailed, ChargeChange) == 0x000014, "Member 'GeneratorDreamworldComponent_OnRepairSkillCheckFailed::ChargeChange' has a wrong offset!");

// Function TheNightmare.DreamSnareEffect.OnActorBeginOverlap
// 0x0010 (0x0010 - 0x0000)
struct DreamSnareEffect_OnActorBeginOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamSnareEffect_OnActorBeginOverlap) == 0x000008, "Wrong alignment on DreamSnareEffect_OnActorBeginOverlap");
static_assert(sizeof(DreamSnareEffect_OnActorBeginOverlap) == 0x000010, "Wrong size on DreamSnareEffect_OnActorBeginOverlap");
static_assert(offsetof(DreamSnareEffect_OnActorBeginOverlap, OverlappedActor) == 0x000000, "Member 'DreamSnareEffect_OnActorBeginOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(DreamSnareEffect_OnActorBeginOverlap, OtherActor) == 0x000008, "Member 'DreamSnareEffect_OnActorBeginOverlap::OtherActor' has a wrong offset!");

// Function TheNightmare.DreamSnareEffect.OnActorEndOverlap
// 0x0010 (0x0010 - 0x0000)
struct DreamSnareEffect_OnActorEndOverlap final
{
public:
	class AActor*                                 OverlappedActor;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DreamSnareEffect_OnActorEndOverlap) == 0x000008, "Wrong alignment on DreamSnareEffect_OnActorEndOverlap");
static_assert(sizeof(DreamSnareEffect_OnActorEndOverlap) == 0x000010, "Wrong size on DreamSnareEffect_OnActorEndOverlap");
static_assert(offsetof(DreamSnareEffect_OnActorEndOverlap, OverlappedActor) == 0x000000, "Member 'DreamSnareEffect_OnActorEndOverlap::OverlappedActor' has a wrong offset!");
static_assert(offsetof(DreamSnareEffect_OnActorEndOverlap, OtherActor) == 0x000008, "Member 'DreamSnareEffect_OnActorEndOverlap::OtherActor' has a wrong offset!");

// Function TheNightmare.FireUp.GetSpeedBonusAtLevel
// 0x0004 (0x0004 - 0x0000)
struct FireUp_GetSpeedBonusAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireUp_GetSpeedBonusAtLevel) == 0x000004, "Wrong alignment on FireUp_GetSpeedBonusAtLevel");
static_assert(sizeof(FireUp_GetSpeedBonusAtLevel) == 0x000004, "Wrong size on FireUp_GetSpeedBonusAtLevel");
static_assert(offsetof(FireUp_GetSpeedBonusAtLevel, ReturnValue) == 0x000000, "Member 'FireUp_GetSpeedBonusAtLevel::ReturnValue' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.Authority_StartTeleportCooldown
// 0x0001 (0x0001 - 0x0000)
struct GeneratorTeleportInteraction_Authority_StartTeleportCooldown final
{
public:
	bool                                          Teleported;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_Authority_StartTeleportCooldown) == 0x000001, "Wrong alignment on GeneratorTeleportInteraction_Authority_StartTeleportCooldown");
static_assert(sizeof(GeneratorTeleportInteraction_Authority_StartTeleportCooldown) == 0x000001, "Wrong size on GeneratorTeleportInteraction_Authority_StartTeleportCooldown");
static_assert(offsetof(GeneratorTeleportInteraction_Authority_StartTeleportCooldown, Teleported) == 0x000000, "Member 'GeneratorTeleportInteraction_Authority_StartTeleportCooldown::Teleported' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.Authority_TeleportPlayerToGenerator
// 0x0018 (0x0018 - 0x0000)
struct GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator final
{
public:
	class ADBDPlayer*                             PlayerToTeleport;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGenerator*                             Generator;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator) == 0x000008, "Wrong alignment on GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator");
static_assert(sizeof(GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator) == 0x000018, "Wrong size on GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator");
static_assert(offsetof(GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator, PlayerToTeleport) == 0x000000, "Member 'GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator::PlayerToTeleport' has a wrong offset!");
static_assert(offsetof(GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator, Generator) == 0x000008, "Member 'GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator::Generator' has a wrong offset!");
static_assert(offsetof(GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator, ReturnValue) == 0x000010, "Member 'GeneratorTeleportInteraction_Authority_TeleportPlayerToGenerator::ReturnValue' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.InitializeTunableValues
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTeleportInteraction_InitializeTunableValues final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_InitializeTunableValues) == 0x000008, "Wrong alignment on GeneratorTeleportInteraction_InitializeTunableValues");
static_assert(sizeof(GeneratorTeleportInteraction_InitializeTunableValues) == 0x000008, "Wrong size on GeneratorTeleportInteraction_InitializeTunableValues");
static_assert(offsetof(GeneratorTeleportInteraction_InitializeTunableValues, Killer) == 0x000000, "Member 'GeneratorTeleportInteraction_InitializeTunableValues::Killer' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.Multicast_OnTeleportLocationChosen
// 0x0070 (0x0070 - 0x0000)
struct GeneratorTeleportInteraction_Multicast_OnTeleportLocationChosen final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Location;                                          // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_Multicast_OnTeleportLocationChosen) == 0x000010, "Wrong alignment on GeneratorTeleportInteraction_Multicast_OnTeleportLocationChosen");
static_assert(sizeof(GeneratorTeleportInteraction_Multicast_OnTeleportLocationChosen) == 0x000070, "Wrong size on GeneratorTeleportInteraction_Multicast_OnTeleportLocationChosen");
static_assert(offsetof(GeneratorTeleportInteraction_Multicast_OnTeleportLocationChosen, Generator) == 0x000000, "Member 'GeneratorTeleportInteraction_Multicast_OnTeleportLocationChosen::Generator' has a wrong offset!");
static_assert(offsetof(GeneratorTeleportInteraction_Multicast_OnTeleportLocationChosen, Location) == 0x000010, "Member 'GeneratorTeleportInteraction_Multicast_OnTeleportLocationChosen::Location' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.Multicast_TeleportPlayer
// 0x0030 (0x0030 - 0x0000)
struct GeneratorTeleportInteraction_Multicast_TeleportPlayer final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_Multicast_TeleportPlayer) == 0x000008, "Wrong alignment on GeneratorTeleportInteraction_Multicast_TeleportPlayer");
static_assert(sizeof(GeneratorTeleportInteraction_Multicast_TeleportPlayer) == 0x000030, "Wrong size on GeneratorTeleportInteraction_Multicast_TeleportPlayer");
static_assert(offsetof(GeneratorTeleportInteraction_Multicast_TeleportPlayer, Location) == 0x000000, "Member 'GeneratorTeleportInteraction_Multicast_TeleportPlayer::Location' has a wrong offset!");
static_assert(offsetof(GeneratorTeleportInteraction_Multicast_TeleportPlayer, Rotation) == 0x000018, "Member 'GeneratorTeleportInteraction_Multicast_TeleportPlayer::Rotation' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.OnLocallySelectedGeneratorSet
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTeleportInteraction_OnLocallySelectedGeneratorSet final
{
public:
	class AGenerator*                             SelectedGenerator;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_OnLocallySelectedGeneratorSet) == 0x000008, "Wrong alignment on GeneratorTeleportInteraction_OnLocallySelectedGeneratorSet");
static_assert(sizeof(GeneratorTeleportInteraction_OnLocallySelectedGeneratorSet) == 0x000008, "Wrong size on GeneratorTeleportInteraction_OnLocallySelectedGeneratorSet");
static_assert(offsetof(GeneratorTeleportInteraction_OnLocallySelectedGeneratorSet, SelectedGenerator) == 0x000000, "Member 'GeneratorTeleportInteraction_OnLocallySelectedGeneratorSet::SelectedGenerator' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.OnSelectedGeneratorSet
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTeleportInteraction_OnSelectedGeneratorSet final
{
public:
	class AGenerator*                             SelectedGenerator;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_OnSelectedGeneratorSet) == 0x000008, "Wrong alignment on GeneratorTeleportInteraction_OnSelectedGeneratorSet");
static_assert(sizeof(GeneratorTeleportInteraction_OnSelectedGeneratorSet) == 0x000008, "Wrong size on GeneratorTeleportInteraction_OnSelectedGeneratorSet");
static_assert(offsetof(GeneratorTeleportInteraction_OnSelectedGeneratorSet, SelectedGenerator) == 0x000000, "Member 'GeneratorTeleportInteraction_OnSelectedGeneratorSet::SelectedGenerator' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.OnTeleported
// 0x0060 (0x0060 - 0x0000)
struct GeneratorTeleportInteraction_OnTeleported final
{
public:
	struct FTransform                             TransformBeforeTeleport;                           // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_OnTeleported) == 0x000010, "Wrong alignment on GeneratorTeleportInteraction_OnTeleported");
static_assert(sizeof(GeneratorTeleportInteraction_OnTeleported) == 0x000060, "Wrong size on GeneratorTeleportInteraction_OnTeleported");
static_assert(offsetof(GeneratorTeleportInteraction_OnTeleported, TransformBeforeTeleport) == 0x000000, "Member 'GeneratorTeleportInteraction_OnTeleported::TransformBeforeTeleport' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.OnTeleportLocationChosen
// 0x0070 (0x0070 - 0x0000)
struct GeneratorTeleportInteraction_OnTeleportLocationChosen final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x8];                                        // 0x0008(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Location;                                          // 0x0010(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_OnTeleportLocationChosen) == 0x000010, "Wrong alignment on GeneratorTeleportInteraction_OnTeleportLocationChosen");
static_assert(sizeof(GeneratorTeleportInteraction_OnTeleportLocationChosen) == 0x000070, "Wrong size on GeneratorTeleportInteraction_OnTeleportLocationChosen");
static_assert(offsetof(GeneratorTeleportInteraction_OnTeleportLocationChosen, Generator) == 0x000000, "Member 'GeneratorTeleportInteraction_OnTeleportLocationChosen::Generator' has a wrong offset!");
static_assert(offsetof(GeneratorTeleportInteraction_OnTeleportLocationChosen, Location) == 0x000010, "Member 'GeneratorTeleportInteraction_OnTeleportLocationChosen::Location' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.Server_SetSelectedGenerator
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTeleportInteraction_Server_SetSelectedGenerator final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_Server_SetSelectedGenerator) == 0x000008, "Wrong alignment on GeneratorTeleportInteraction_Server_SetSelectedGenerator");
static_assert(sizeof(GeneratorTeleportInteraction_Server_SetSelectedGenerator) == 0x000008, "Wrong size on GeneratorTeleportInteraction_Server_SetSelectedGenerator");
static_assert(offsetof(GeneratorTeleportInteraction_Server_SetSelectedGenerator, Generator) == 0x000000, "Member 'GeneratorTeleportInteraction_Server_SetSelectedGenerator::Generator' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.CanTeleportAtGenerator
// 0x0010 (0x0010 - 0x0000)
struct GeneratorTeleportInteraction_CanTeleportAtGenerator final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GeneratorTeleportInteraction_CanTeleportAtGenerator) == 0x000008, "Wrong alignment on GeneratorTeleportInteraction_CanTeleportAtGenerator");
static_assert(sizeof(GeneratorTeleportInteraction_CanTeleportAtGenerator) == 0x000010, "Wrong size on GeneratorTeleportInteraction_CanTeleportAtGenerator");
static_assert(offsetof(GeneratorTeleportInteraction_CanTeleportAtGenerator, Generator) == 0x000000, "Member 'GeneratorTeleportInteraction_CanTeleportAtGenerator::Generator' has a wrong offset!");
static_assert(offsetof(GeneratorTeleportInteraction_CanTeleportAtGenerator, ReturnValue) == 0x000008, "Member 'GeneratorTeleportInteraction_CanTeleportAtGenerator::ReturnValue' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.GetInlineGenerator
// 0x0010 (0x0010 - 0x0000)
struct GeneratorTeleportInteraction_GetInlineGenerator final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AGenerator*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_GetInlineGenerator) == 0x000008, "Wrong alignment on GeneratorTeleportInteraction_GetInlineGenerator");
static_assert(sizeof(GeneratorTeleportInteraction_GetInlineGenerator) == 0x000010, "Wrong size on GeneratorTeleportInteraction_GetInlineGenerator");
static_assert(offsetof(GeneratorTeleportInteraction_GetInlineGenerator, Player) == 0x000000, "Member 'GeneratorTeleportInteraction_GetInlineGenerator::Player' has a wrong offset!");
static_assert(offsetof(GeneratorTeleportInteraction_GetInlineGenerator, ReturnValue) == 0x000008, "Member 'GeneratorTeleportInteraction_GetInlineGenerator::ReturnValue' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.GetOwningPlayer
// 0x0008 (0x0008 - 0x0000)
struct GeneratorTeleportInteraction_GetOwningPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_GetOwningPlayer) == 0x000008, "Wrong alignment on GeneratorTeleportInteraction_GetOwningPlayer");
static_assert(sizeof(GeneratorTeleportInteraction_GetOwningPlayer) == 0x000008, "Wrong size on GeneratorTeleportInteraction_GetOwningPlayer");
static_assert(offsetof(GeneratorTeleportInteraction_GetOwningPlayer, ReturnValue) == 0x000000, "Member 'GeneratorTeleportInteraction_GetOwningPlayer::ReturnValue' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.HasTeleportFailed
// 0x0001 (0x0001 - 0x0000)
struct GeneratorTeleportInteraction_HasTeleportFailed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_HasTeleportFailed) == 0x000001, "Wrong alignment on GeneratorTeleportInteraction_HasTeleportFailed");
static_assert(sizeof(GeneratorTeleportInteraction_HasTeleportFailed) == 0x000001, "Wrong size on GeneratorTeleportInteraction_HasTeleportFailed");
static_assert(offsetof(GeneratorTeleportInteraction_HasTeleportFailed, ReturnValue) == 0x000000, "Member 'GeneratorTeleportInteraction_HasTeleportFailed::ReturnValue' has a wrong offset!");

// Function TheNightmare.GeneratorTeleportInteraction.IsTeleportAvailable
// 0x0001 (0x0001 - 0x0000)
struct GeneratorTeleportInteraction_IsTeleportAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorTeleportInteraction_IsTeleportAvailable) == 0x000001, "Wrong alignment on GeneratorTeleportInteraction_IsTeleportAvailable");
static_assert(sizeof(GeneratorTeleportInteraction_IsTeleportAvailable) == 0x000001, "Wrong size on GeneratorTeleportInteraction_IsTeleportAvailable");
static_assert(offsetof(GeneratorTeleportInteraction_IsTeleportAvailable, ReturnValue) == 0x000000, "Member 'GeneratorTeleportInteraction_IsTeleportAvailable::ReturnValue' has a wrong offset!");

// Function TheNightmare.PlaceDreamPalletInteraction.InitializeTunableValues
// 0x0008 (0x0008 - 0x0000)
struct PlaceDreamPalletInteraction_InitializeTunableValues final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlaceDreamPalletInteraction_InitializeTunableValues) == 0x000008, "Wrong alignment on PlaceDreamPalletInteraction_InitializeTunableValues");
static_assert(sizeof(PlaceDreamPalletInteraction_InitializeTunableValues) == 0x000008, "Wrong size on PlaceDreamPalletInteraction_InitializeTunableValues");
static_assert(offsetof(PlaceDreamPalletInteraction_InitializeTunableValues, Killer) == 0x000000, "Member 'PlaceDreamPalletInteraction_InitializeTunableValues::Killer' has a wrong offset!");

// Function TheNightmare.PlaceDreamPalletInteraction.SpawnDreamPallet
// 0x0008 (0x0008 - 0x0000)
struct PlaceDreamPalletInteraction_SpawnDreamPallet final
{
public:
	class APalletTracker*                         TrackerAtLocation;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlaceDreamPalletInteraction_SpawnDreamPallet) == 0x000008, "Wrong alignment on PlaceDreamPalletInteraction_SpawnDreamPallet");
static_assert(sizeof(PlaceDreamPalletInteraction_SpawnDreamPallet) == 0x000008, "Wrong size on PlaceDreamPalletInteraction_SpawnDreamPallet");
static_assert(offsetof(PlaceDreamPalletInteraction_SpawnDreamPallet, TrackerAtLocation) == 0x000000, "Member 'PlaceDreamPalletInteraction_SpawnDreamPallet::TrackerAtLocation' has a wrong offset!");

// Function TheNightmare.PlaceDreamPalletInteraction.CanSpawnDreamPalletAtTracker
// 0x0010 (0x0010 - 0x0000)
struct PlaceDreamPalletInteraction_CanSpawnDreamPalletAtTracker final
{
public:
	class APalletTracker*                         Tracker;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlaceDreamPalletInteraction_CanSpawnDreamPalletAtTracker) == 0x000008, "Wrong alignment on PlaceDreamPalletInteraction_CanSpawnDreamPalletAtTracker");
static_assert(sizeof(PlaceDreamPalletInteraction_CanSpawnDreamPalletAtTracker) == 0x000010, "Wrong size on PlaceDreamPalletInteraction_CanSpawnDreamPalletAtTracker");
static_assert(offsetof(PlaceDreamPalletInteraction_CanSpawnDreamPalletAtTracker, Tracker) == 0x000000, "Member 'PlaceDreamPalletInteraction_CanSpawnDreamPalletAtTracker::Tracker' has a wrong offset!");
static_assert(offsetof(PlaceDreamPalletInteraction_CanSpawnDreamPalletAtTracker, ReturnValue) == 0x000008, "Member 'PlaceDreamPalletInteraction_CanSpawnDreamPalletAtTracker::ReturnValue' has a wrong offset!");

// Function TheNightmare.PlaceDreamPalletInteraction.GetTargetedPallet
// 0x0008 (0x0008 - 0x0000)
struct PlaceDreamPalletInteraction_GetTargetedPallet final
{
public:
	class APalletTracker*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlaceDreamPalletInteraction_GetTargetedPallet) == 0x000008, "Wrong alignment on PlaceDreamPalletInteraction_GetTargetedPallet");
static_assert(sizeof(PlaceDreamPalletInteraction_GetTargetedPallet) == 0x000008, "Wrong size on PlaceDreamPalletInteraction_GetTargetedPallet");
static_assert(offsetof(PlaceDreamPalletInteraction_GetTargetedPallet, ReturnValue) == 0x000000, "Member 'PlaceDreamPalletInteraction_GetTargetedPallet::ReturnValue' has a wrong offset!");

// Function TheNightmare.RememberMe.DidLoseHealthState
// 0x0010 (0x0010 - 0x0000)
struct RememberMe_DidLoseHealthState final
{
public:
	const class AActor*                           DamagedActor;                                      // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OldHealthStateCount;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RememberMe_DidLoseHealthState) == 0x000008, "Wrong alignment on RememberMe_DidLoseHealthState");
static_assert(sizeof(RememberMe_DidLoseHealthState) == 0x000010, "Wrong size on RememberMe_DidLoseHealthState");
static_assert(offsetof(RememberMe_DidLoseHealthState, DamagedActor) == 0x000000, "Member 'RememberMe_DidLoseHealthState::DamagedActor' has a wrong offset!");
static_assert(offsetof(RememberMe_DidLoseHealthState, OldHealthStateCount) == 0x000008, "Member 'RememberMe_DidLoseHealthState::OldHealthStateCount' has a wrong offset!");
static_assert(offsetof(RememberMe_DidLoseHealthState, ReturnValue) == 0x00000C, "Member 'RememberMe_DidLoseHealthState::ReturnValue' has a wrong offset!");

// Function TheNightmare.SetDreamSnareInteraction.GetTrapDistanceFromControlRotation
// 0x0004 (0x0004 - 0x0000)
struct SetDreamSnareInteraction_GetTrapDistanceFromControlRotation final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SetDreamSnareInteraction_GetTrapDistanceFromControlRotation) == 0x000004, "Wrong alignment on SetDreamSnareInteraction_GetTrapDistanceFromControlRotation");
static_assert(sizeof(SetDreamSnareInteraction_GetTrapDistanceFromControlRotation) == 0x000004, "Wrong size on SetDreamSnareInteraction_GetTrapDistanceFromControlRotation");
static_assert(offsetof(SetDreamSnareInteraction_GetTrapDistanceFromControlRotation, ReturnValue) == 0x000000, "Member 'SetDreamSnareInteraction_GetTrapDistanceFromControlRotation::ReturnValue' has a wrong offset!");

// Function TheNightmare.SetDreamSnareInteraction.HasCancelledDreamSnare
// 0x0001 (0x0001 - 0x0000)
struct SetDreamSnareInteraction_HasCancelledDreamSnare final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SetDreamSnareInteraction_HasCancelledDreamSnare) == 0x000001, "Wrong alignment on SetDreamSnareInteraction_HasCancelledDreamSnare");
static_assert(sizeof(SetDreamSnareInteraction_HasCancelledDreamSnare) == 0x000001, "Wrong size on SetDreamSnareInteraction_HasCancelledDreamSnare");
static_assert(offsetof(SetDreamSnareInteraction_HasCancelledDreamSnare, ReturnValue) == 0x000000, "Member 'SetDreamSnareInteraction_HasCancelledDreamSnare::ReturnValue' has a wrong offset!");

// Function TheNightmare.TheNightmareUtilities.GetDreamSnareStatusEffect
// 0x0010 (0x0010 - 0x0000)
struct TheNightmareUtilities_GetDreamSnareStatusEffect final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDreamSnareEffect*                      ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheNightmareUtilities_GetDreamSnareStatusEffect) == 0x000008, "Wrong alignment on TheNightmareUtilities_GetDreamSnareStatusEffect");
static_assert(sizeof(TheNightmareUtilities_GetDreamSnareStatusEffect) == 0x000010, "Wrong size on TheNightmareUtilities_GetDreamSnareStatusEffect");
static_assert(offsetof(TheNightmareUtilities_GetDreamSnareStatusEffect, Player) == 0x000000, "Member 'TheNightmareUtilities_GetDreamSnareStatusEffect::Player' has a wrong offset!");
static_assert(offsetof(TheNightmareUtilities_GetDreamSnareStatusEffect, ReturnValue) == 0x000008, "Member 'TheNightmareUtilities_GetDreamSnareStatusEffect::ReturnValue' has a wrong offset!");

}

