#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK29

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "StatSystem_structs.hpp"


namespace SDK
{

// Enum TheK29.EK29SurvivorInteractionBlockReason
// NumValues: 0x0004
enum class EK29SurvivorInteractionBlockReason : uint8
{
	BeingRushed                              = 0,
	BeingThrown                              = 1,
	BeingSmashed                             = 2,
	EK29SurvivorInteractionBlockReason_MAX   = 3,
};

// Enum TheK29.EK29RushPhase
// NumValues: 0x0009
enum class EK29RushPhase : uint8
{
	EndingInteraction                        = 0,
	Charging                                 = 1,
	Rushing                                  = 2,
	Bouncing                                 = 3,
	BetweenRushes                            = 4,
	IntoGrabbingSurvivor                     = 5,
	GrabbingSurvivor                         = 6,
	SmashSurvivor                            = 7,
	EK29RushPhase_MAX                        = 8,
};

// ScriptStruct TheK29.K29GuidedMovementSettings
// 0x0068 (0x0068 - 0x0000)
struct FK29GuidedMovementSettings final
{
public:
	class ADBDPlayer*                             MovingActor;                                       // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                StartPosition;                                     // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForwardDirection;                                  // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHeight;                                     // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleCenterHeightOffset;                         // 0x003C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleRadius;                                     // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimumRequiredDistance;                           // 0x0044(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDuration;                                   // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MovementSpeedInCmPerSecond;                        // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCarryingSurvivor;                                // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         IgnoredActors;                                     // 0x0058(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK29GuidedMovementSettings) == 0x000008, "Wrong alignment on FK29GuidedMovementSettings");
static_assert(sizeof(FK29GuidedMovementSettings) == 0x000068, "Wrong size on FK29GuidedMovementSettings");
static_assert(offsetof(FK29GuidedMovementSettings, MovingActor) == 0x000000, "Member 'FK29GuidedMovementSettings::MovingActor' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, StartPosition) == 0x000008, "Member 'FK29GuidedMovementSettings::StartPosition' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, ForwardDirection) == 0x000020, "Member 'FK29GuidedMovementSettings::ForwardDirection' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, CapsuleHeight) == 0x000038, "Member 'FK29GuidedMovementSettings::CapsuleHeight' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, CapsuleCenterHeightOffset) == 0x00003C, "Member 'FK29GuidedMovementSettings::CapsuleCenterHeightOffset' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, CapsuleRadius) == 0x000040, "Member 'FK29GuidedMovementSettings::CapsuleRadius' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, MinimumRequiredDistance) == 0x000044, "Member 'FK29GuidedMovementSettings::MinimumRequiredDistance' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, MaximumDuration) == 0x000048, "Member 'FK29GuidedMovementSettings::MaximumDuration' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, MovementSpeedInCmPerSecond) == 0x00004C, "Member 'FK29GuidedMovementSettings::MovementSpeedInCmPerSecond' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, IsCarryingSurvivor) == 0x000050, "Member 'FK29GuidedMovementSettings::IsCarryingSurvivor' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementSettings, IgnoredActors) == 0x000058, "Member 'FK29GuidedMovementSettings::IgnoredActors' has a wrong offset!");

// ScriptStruct TheK29.K29GuidedMovementInstance
// 0x0088 (0x0088 - 0x0000)
struct FK29GuidedMovementInstance final
{
public:
	float                                         MovementDuration;                                  // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartingPosition;                                  // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                EndingPosition;                                    // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ForwardDirection;                                  // 0x0038(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                XYForwardDirection;                                // 0x0050(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndInImpact;                                       // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EndAtLedge;                                        // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartingTime;                                      // 0x006C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndingTime;                                        // 0x0070(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        MovementCurve;                                     // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK29GuidedMovementInstance) == 0x000008, "Wrong alignment on FK29GuidedMovementInstance");
static_assert(sizeof(FK29GuidedMovementInstance) == 0x000088, "Wrong size on FK29GuidedMovementInstance");
static_assert(offsetof(FK29GuidedMovementInstance, MovementDuration) == 0x000000, "Member 'FK29GuidedMovementInstance::MovementDuration' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementInstance, StartingPosition) == 0x000008, "Member 'FK29GuidedMovementInstance::StartingPosition' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementInstance, EndingPosition) == 0x000020, "Member 'FK29GuidedMovementInstance::EndingPosition' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementInstance, ForwardDirection) == 0x000038, "Member 'FK29GuidedMovementInstance::ForwardDirection' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementInstance, XYForwardDirection) == 0x000050, "Member 'FK29GuidedMovementInstance::XYForwardDirection' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementInstance, EndInImpact) == 0x000068, "Member 'FK29GuidedMovementInstance::EndInImpact' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementInstance, EndAtLedge) == 0x000069, "Member 'FK29GuidedMovementInstance::EndAtLedge' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementInstance, StartingTime) == 0x00006C, "Member 'FK29GuidedMovementInstance::StartingTime' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementInstance, EndingTime) == 0x000070, "Member 'FK29GuidedMovementInstance::EndingTime' has a wrong offset!");
static_assert(offsetof(FK29GuidedMovementInstance, MovementCurve) == 0x000078, "Member 'FK29GuidedMovementInstance::MovementCurve' has a wrong offset!");

// ScriptStruct TheK29.K29FloorDetectionResult
// 0x0002 (0x0002 - 0x0000)
struct FK29FloorDetectionResult final
{
public:
	uint8                                         Pad_0[0x2];                                        // 0x0000(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK29FloorDetectionResult) == 0x000001, "Wrong alignment on FK29FloorDetectionResult");
static_assert(sizeof(FK29FloorDetectionResult) == 0x000002, "Wrong size on FK29FloorDetectionResult");

// ScriptStruct TheK29.K29SurvivorStatus
// 0x0060 (0x0060 - 0x0000)
struct FK29SurvivorStatus final
{
public:
	bool                                          IsGrabbedByPower;                                  // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastTimeGrabbedByPower;                            // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          OwningSurvivor;                                    // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InfectionLevel;                                    // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimesCuredByHeal;                                  // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInfected;                                        // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInfectionActive;                                 // 0x0019(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UChargeableInteractionDefinition*       UseInfectionRemoverInteractionSelf;                // 0x0020(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChargeableInteractionDefinition*       UseInfectionRemoverInteractionOther;               // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChargeableComponent*                   UseInfectionRemoverChargeable;                     // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AreInfectionRemoverInteractionsInitialized;        // 0x0038(0x0001)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UK29SurvivorCarriableComponent*         CarriableComponent;                                // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK29SurvivorThrowableComponent*         ThrowableComponent;                                // 0x0048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EK29SurvivorInteractionBlockReason>    InteractionBlockReasons;                           // 0x0050(0x0010)(ZeroConstructor, Transient, RepSkip, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK29SurvivorStatus) == 0x000008, "Wrong alignment on FK29SurvivorStatus");
static_assert(sizeof(FK29SurvivorStatus) == 0x000060, "Wrong size on FK29SurvivorStatus");
static_assert(offsetof(FK29SurvivorStatus, IsGrabbedByPower) == 0x000000, "Member 'FK29SurvivorStatus::IsGrabbedByPower' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, LastTimeGrabbedByPower) == 0x000004, "Member 'FK29SurvivorStatus::LastTimeGrabbedByPower' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, OwningSurvivor) == 0x000008, "Member 'FK29SurvivorStatus::OwningSurvivor' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, InfectionLevel) == 0x000010, "Member 'FK29SurvivorStatus::InfectionLevel' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, TimesCuredByHeal) == 0x000014, "Member 'FK29SurvivorStatus::TimesCuredByHeal' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, IsInfected) == 0x000018, "Member 'FK29SurvivorStatus::IsInfected' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, IsInfectionActive) == 0x000019, "Member 'FK29SurvivorStatus::IsInfectionActive' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, UseInfectionRemoverInteractionSelf) == 0x000020, "Member 'FK29SurvivorStatus::UseInfectionRemoverInteractionSelf' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, UseInfectionRemoverInteractionOther) == 0x000028, "Member 'FK29SurvivorStatus::UseInfectionRemoverInteractionOther' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, UseInfectionRemoverChargeable) == 0x000030, "Member 'FK29SurvivorStatus::UseInfectionRemoverChargeable' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, AreInfectionRemoverInteractionsInitialized) == 0x000038, "Member 'FK29SurvivorStatus::AreInfectionRemoverInteractionsInitialized' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, CarriableComponent) == 0x000040, "Member 'FK29SurvivorStatus::CarriableComponent' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, ThrowableComponent) == 0x000048, "Member 'FK29SurvivorStatus::ThrowableComponent' has a wrong offset!");
static_assert(offsetof(FK29SurvivorStatus, InteractionBlockReasons) == 0x000050, "Member 'FK29SurvivorStatus::InteractionBlockReasons' has a wrong offset!");

// ScriptStruct TheK29.K29RushMovementSpeedSetting
// 0x0110 (0x0110 - 0x0000)
struct FK29RushMovementSpeedSetting final
{
public:
	bool                                          InUse;                                             // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SpeedCurve;                                        // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   PitchTurnRateMultiplier;                           // 0x0010(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   YawTurnRateLimit;                                  // 0x0038(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   YawTurnRateMultiplier;                             // 0x0060(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FTunableStat                           Duration;                                          // 0x0088(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          IsMovementAllowed;                                 // 0x0108(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK29RushMovementSpeedSetting) == 0x000008, "Wrong alignment on FK29RushMovementSpeedSetting");
static_assert(sizeof(FK29RushMovementSpeedSetting) == 0x000110, "Wrong size on FK29RushMovementSpeedSetting");
static_assert(offsetof(FK29RushMovementSpeedSetting, InUse) == 0x000000, "Member 'FK29RushMovementSpeedSetting::InUse' has a wrong offset!");
static_assert(offsetof(FK29RushMovementSpeedSetting, SpeedCurve) == 0x000008, "Member 'FK29RushMovementSpeedSetting::SpeedCurve' has a wrong offset!");
static_assert(offsetof(FK29RushMovementSpeedSetting, PitchTurnRateMultiplier) == 0x000010, "Member 'FK29RushMovementSpeedSetting::PitchTurnRateMultiplier' has a wrong offset!");
static_assert(offsetof(FK29RushMovementSpeedSetting, YawTurnRateLimit) == 0x000038, "Member 'FK29RushMovementSpeedSetting::YawTurnRateLimit' has a wrong offset!");
static_assert(offsetof(FK29RushMovementSpeedSetting, YawTurnRateMultiplier) == 0x000060, "Member 'FK29RushMovementSpeedSetting::YawTurnRateMultiplier' has a wrong offset!");
static_assert(offsetof(FK29RushMovementSpeedSetting, Duration) == 0x000088, "Member 'FK29RushMovementSpeedSetting::Duration' has a wrong offset!");
static_assert(offsetof(FK29RushMovementSpeedSetting, IsMovementAllowed) == 0x000108, "Member 'FK29RushMovementSpeedSetting::IsMovementAllowed' has a wrong offset!");

}

