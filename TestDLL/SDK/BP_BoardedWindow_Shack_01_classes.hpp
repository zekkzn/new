#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_BoardedWindow_Shack_01

#include "Basic.hpp"

#include "BP_BaseBlocker_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_BoardedWindow_Shack_01.BP_BoardedWindow_Shack_01_C
// 0x0030 (0x02D8 - 0x02A8)
class ABP_BoardedWindow_Shack_01_C final : public ABP_BaseBlocker_C
{
public:
	class UBoxComponent*                          Box4;                                              // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box3;                                              // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box2;                                              // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box1;                                              // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_BoardedWindow05;                                // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Box;                                               // 0x02D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_BoardedWindow_Shack_01_C">();
	}
	static class ABP_BoardedWindow_Shack_01_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_BoardedWindow_Shack_01_C>();
	}
};
static_assert(alignof(ABP_BoardedWindow_Shack_01_C) == 0x000008, "Wrong alignment on ABP_BoardedWindow_Shack_01_C");
static_assert(sizeof(ABP_BoardedWindow_Shack_01_C) == 0x0002D8, "Wrong size on ABP_BoardedWindow_Shack_01_C");
static_assert(offsetof(ABP_BoardedWindow_Shack_01_C, Box4) == 0x0002A8, "Member 'ABP_BoardedWindow_Shack_01_C::Box4' has a wrong offset!");
static_assert(offsetof(ABP_BoardedWindow_Shack_01_C, Box3) == 0x0002B0, "Member 'ABP_BoardedWindow_Shack_01_C::Box3' has a wrong offset!");
static_assert(offsetof(ABP_BoardedWindow_Shack_01_C, Box2) == 0x0002B8, "Member 'ABP_BoardedWindow_Shack_01_C::Box2' has a wrong offset!");
static_assert(offsetof(ABP_BoardedWindow_Shack_01_C, Box1) == 0x0002C0, "Member 'ABP_BoardedWindow_Shack_01_C::Box1' has a wrong offset!");
static_assert(offsetof(ABP_BoardedWindow_Shack_01_C, SM_BoardedWindow05) == 0x0002C8, "Member 'ABP_BoardedWindow_Shack_01_C::SM_BoardedWindow05' has a wrong offset!");
static_assert(offsetof(ABP_BoardedWindow_Shack_01_C, Box) == 0x0002D0, "Member 'ABP_BoardedWindow_Shack_01_C::Box' has a wrong offset!");

}

