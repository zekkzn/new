#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDCompetence

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "StatSystem_structs.hpp"


namespace SDK::Params
{

// Function DBDCompetence.HighestLevelAndClosestEffectCondition.InitEffectArrays
// 0x0024 (0x0024 - 0x0000)
struct HighestLevelAndClosestEffectCondition_InitEffectArrays final
{
public:
	class FName                                   EffectIDLevel1;                                    // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectIDLevel2;                                    // 0x000C(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EffectIDLevel3;                                    // 0x0018(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighestLevelAndClosestEffectCondition_InitEffectArrays) == 0x000004, "Wrong alignment on HighestLevelAndClosestEffectCondition_InitEffectArrays");
static_assert(sizeof(HighestLevelAndClosestEffectCondition_InitEffectArrays) == 0x000024, "Wrong size on HighestLevelAndClosestEffectCondition_InitEffectArrays");
static_assert(offsetof(HighestLevelAndClosestEffectCondition_InitEffectArrays, EffectIDLevel1) == 0x000000, "Member 'HighestLevelAndClosestEffectCondition_InitEffectArrays::EffectIDLevel1' has a wrong offset!");
static_assert(offsetof(HighestLevelAndClosestEffectCondition_InitEffectArrays, EffectIDLevel2) == 0x00000C, "Member 'HighestLevelAndClosestEffectCondition_InitEffectArrays::EffectIDLevel2' has a wrong offset!");
static_assert(offsetof(HighestLevelAndClosestEffectCondition_InitEffectArrays, EffectIDLevel3) == 0x000018, "Member 'HighestLevelAndClosestEffectCondition_InitEffectArrays::EffectIDLevel3' has a wrong offset!");

// Function DBDCompetence.HighestLevelAndClosestEffectCondition.SetCurrentEffectLevel
// 0x0004 (0x0004 - 0x0000)
struct HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel) == 0x000004, "Wrong alignment on HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel");
static_assert(sizeof(HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel) == 0x000004, "Wrong size on HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel");
static_assert(offsetof(HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel, Level) == 0x000000, "Member 'HighestLevelAndClosestEffectCondition_SetCurrentEffectLevel::Level' has a wrong offset!");

// Function DBDCompetence.IsHighestLevelAndClosestOriginatingEffect.OnStatusEffectAddedOrRemoved
// 0x0010 (0x0010 - 0x0000)
struct IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved final
{
public:
	class UStatusEffect*                          Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Valid;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved) == 0x000008, "Wrong alignment on IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved");
static_assert(sizeof(IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved) == 0x000010, "Wrong size on IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved");
static_assert(offsetof(IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved, Effect) == 0x000000, "Member 'IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved::Effect' has a wrong offset!");
static_assert(offsetof(IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved, Valid) == 0x000008, "Member 'IsHighestLevelAndClosestOriginatingEffect_OnStatusEffectAddedOrRemoved::Valid' has a wrong offset!");

// Function DBDCompetence.HexPerk.Authority_RevealCurseToAllSurvivors
// 0x0001 (0x0001 - 0x0000)
struct HexPerk_Authority_RevealCurseToAllSurvivors final
{
public:
	bool                                          Revealed;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexPerk_Authority_RevealCurseToAllSurvivors) == 0x000001, "Wrong alignment on HexPerk_Authority_RevealCurseToAllSurvivors");
static_assert(sizeof(HexPerk_Authority_RevealCurseToAllSurvivors) == 0x000001, "Wrong size on HexPerk_Authority_RevealCurseToAllSurvivors");
static_assert(offsetof(HexPerk_Authority_RevealCurseToAllSurvivors, Revealed) == 0x000000, "Member 'HexPerk_Authority_RevealCurseToAllSurvivors::Revealed' has a wrong offset!");

// Function DBDCompetence.HexPerk.Authority_SetCurseRevealedToPlayer
// 0x0010 (0x0010 - 0x0000)
struct HexPerk_Authority_SetCurseRevealedToPlayer final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Revealed;                                          // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HexPerk_Authority_SetCurseRevealedToPlayer) == 0x000008, "Wrong alignment on HexPerk_Authority_SetCurseRevealedToPlayer");
static_assert(sizeof(HexPerk_Authority_SetCurseRevealedToPlayer) == 0x000010, "Wrong size on HexPerk_Authority_SetCurseRevealedToPlayer");
static_assert(offsetof(HexPerk_Authority_SetCurseRevealedToPlayer, Player) == 0x000000, "Member 'HexPerk_Authority_SetCurseRevealedToPlayer::Player' has a wrong offset!");
static_assert(offsetof(HexPerk_Authority_SetCurseRevealedToPlayer, Revealed) == 0x000008, "Member 'HexPerk_Authority_SetCurseRevealedToPlayer::Revealed' has a wrong offset!");

// Function DBDCompetence.HexPerk.IsCurseRevealedToPlayer
// 0x0010 (0x0010 - 0x0000)
struct HexPerk_IsCurseRevealedToPlayer final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HexPerk_IsCurseRevealedToPlayer) == 0x000008, "Wrong alignment on HexPerk_IsCurseRevealedToPlayer");
static_assert(sizeof(HexPerk_IsCurseRevealedToPlayer) == 0x000010, "Wrong size on HexPerk_IsCurseRevealedToPlayer");
static_assert(offsetof(HexPerk_IsCurseRevealedToPlayer, Player) == 0x000000, "Member 'HexPerk_IsCurseRevealedToPlayer::Player' has a wrong offset!");
static_assert(offsetof(HexPerk_IsCurseRevealedToPlayer, ReturnValue) == 0x000008, "Member 'HexPerk_IsCurseRevealedToPlayer::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DyingLight.OnObsessionChanged
// 0x0010 (0x0010 - 0x0000)
struct DyingLight_OnObsessionChanged final
{
public:
	class ACamperPlayer*                          NewObsession;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          PreviousObsession;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DyingLight_OnObsessionChanged) == 0x000008, "Wrong alignment on DyingLight_OnObsessionChanged");
static_assert(sizeof(DyingLight_OnObsessionChanged) == 0x000010, "Wrong size on DyingLight_OnObsessionChanged");
static_assert(offsetof(DyingLight_OnObsessionChanged, NewObsession) == 0x000000, "Member 'DyingLight_OnObsessionChanged::NewObsession' has a wrong offset!");
static_assert(offsetof(DyingLight_OnObsessionChanged, PreviousObsession) == 0x000008, "Member 'DyingLight_OnObsessionChanged::PreviousObsession' has a wrong offset!");

// Function DBDCompetence.DyingLight.GetActionSpeedPenaltyPerTokenAtLevel
// 0x0004 (0x0004 - 0x0000)
struct DyingLight_GetActionSpeedPenaltyPerTokenAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DyingLight_GetActionSpeedPenaltyPerTokenAtLevel) == 0x000004, "Wrong alignment on DyingLight_GetActionSpeedPenaltyPerTokenAtLevel");
static_assert(sizeof(DyingLight_GetActionSpeedPenaltyPerTokenAtLevel) == 0x000004, "Wrong size on DyingLight_GetActionSpeedPenaltyPerTokenAtLevel");
static_assert(offsetof(DyingLight_GetActionSpeedPenaltyPerTokenAtLevel, ReturnValue) == 0x000000, "Member 'DyingLight_GetActionSpeedPenaltyPerTokenAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DyingLight.GetObsessionActionSpeedBonus
// 0x0004 (0x0004 - 0x0000)
struct DyingLight_GetObsessionActionSpeedBonus final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DyingLight_GetObsessionActionSpeedBonus) == 0x000004, "Wrong alignment on DyingLight_GetObsessionActionSpeedBonus");
static_assert(sizeof(DyingLight_GetObsessionActionSpeedBonus) == 0x000004, "Wrong size on DyingLight_GetObsessionActionSpeedBonus");
static_assert(offsetof(DyingLight_GetObsessionActionSpeedBonus, ReturnValue) == 0x000000, "Member 'DyingLight_GetObsessionActionSpeedBonus::ReturnValue' has a wrong offset!");

// Function DBDCompetence.OnEventBaseAddon.OnEventFired
// 0x0030 (0x0030 - 0x0000)
struct OnEventBaseAddon_OnEventFired final
{
public:
	struct FGameEventData                         GameEventData;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnEventBaseAddon_OnEventFired) == 0x000008, "Wrong alignment on OnEventBaseAddon_OnEventFired");
static_assert(sizeof(OnEventBaseAddon_OnEventFired) == 0x000030, "Wrong size on OnEventBaseAddon_OnEventFired");
static_assert(offsetof(OnEventBaseAddon_OnEventFired, GameEventData) == 0x000000, "Member 'OnEventBaseAddon_OnEventFired::GameEventData' has a wrong offset!");

// Function DBDCompetence.BaseLingeringStatusEffect.SetLingerDuration
// 0x0004 (0x0004 - 0x0000)
struct BaseLingeringStatusEffect_SetLingerDuration final
{
public:
	float                                         LingerDuration;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseLingeringStatusEffect_SetLingerDuration) == 0x000004, "Wrong alignment on BaseLingeringStatusEffect_SetLingerDuration");
static_assert(sizeof(BaseLingeringStatusEffect_SetLingerDuration) == 0x000004, "Wrong size on BaseLingeringStatusEffect_SetLingerDuration");
static_assert(offsetof(BaseLingeringStatusEffect_SetLingerDuration, LingerDuration) == 0x000000, "Member 'BaseLingeringStatusEffect_SetLingerDuration::LingerDuration' has a wrong offset!");

// Function DBDCompetence.KindredPerk.GetKillerAuraRevealRangeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct KindredPerk_GetKillerAuraRevealRangeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KindredPerk_GetKillerAuraRevealRangeAtLevel) == 0x000004, "Wrong alignment on KindredPerk_GetKillerAuraRevealRangeAtLevel");
static_assert(sizeof(KindredPerk_GetKillerAuraRevealRangeAtLevel) == 0x000004, "Wrong size on KindredPerk_GetKillerAuraRevealRangeAtLevel");
static_assert(offsetof(KindredPerk_GetKillerAuraRevealRangeAtLevel, ReturnValue) == 0x000000, "Member 'KindredPerk_GetKillerAuraRevealRangeAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Adrenaline.Multicast_DispatchAdrenalineEvents
// 0x0008 (0x0008 - 0x0000)
struct Adrenaline_Multicast_DispatchAdrenalineEvents final
{
public:
	bool                                          IsHealthy;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HealAmount;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Adrenaline_Multicast_DispatchAdrenalineEvents) == 0x000004, "Wrong alignment on Adrenaline_Multicast_DispatchAdrenalineEvents");
static_assert(sizeof(Adrenaline_Multicast_DispatchAdrenalineEvents) == 0x000008, "Wrong size on Adrenaline_Multicast_DispatchAdrenalineEvents");
static_assert(offsetof(Adrenaline_Multicast_DispatchAdrenalineEvents, IsHealthy) == 0x000000, "Member 'Adrenaline_Multicast_DispatchAdrenalineEvents::IsHealthy' has a wrong offset!");
static_assert(offsetof(Adrenaline_Multicast_DispatchAdrenalineEvents, HealAmount) == 0x000004, "Member 'Adrenaline_Multicast_DispatchAdrenalineEvents::HealAmount' has a wrong offset!");

// Function DBDCompetence.Adrenaline.GetExhaustionDuration
// 0x0004 (0x0004 - 0x0000)
struct Adrenaline_GetExhaustionDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Adrenaline_GetExhaustionDuration) == 0x000004, "Wrong alignment on Adrenaline_GetExhaustionDuration");
static_assert(sizeof(Adrenaline_GetExhaustionDuration) == 0x000004, "Wrong size on Adrenaline_GetExhaustionDuration");
static_assert(offsetof(Adrenaline_GetExhaustionDuration, ReturnValue) == 0x000000, "Member 'Adrenaline_GetExhaustionDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HideSurvivorVFXForKillerEffect.HideVFX
// 0x0001 (0x0001 - 0x0000)
struct HideSurvivorVFXForKillerEffect_HideVFX final
{
public:
	bool                                          Hide;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideSurvivorVFXForKillerEffect_HideVFX) == 0x000001, "Wrong alignment on HideSurvivorVFXForKillerEffect_HideVFX");
static_assert(sizeof(HideSurvivorVFXForKillerEffect_HideVFX) == 0x000001, "Wrong size on HideSurvivorVFXForKillerEffect_HideVFX");
static_assert(offsetof(HideSurvivorVFXForKillerEffect_HideVFX, Hide) == 0x000000, "Member 'HideSurvivorVFXForKillerEffect_HideVFX::Hide' has a wrong offset!");

// Function DBDCompetence.AnyActorPairQueryRangeIsTrue.OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct AnyActorPairQueryRangeIsTrue_OnInRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnyActorPairQueryRangeIsTrue_OnInRangeChanged) == 0x000001, "Wrong alignment on AnyActorPairQueryRangeIsTrue_OnInRangeChanged");
static_assert(sizeof(AnyActorPairQueryRangeIsTrue_OnInRangeChanged) == 0x000001, "Wrong size on AnyActorPairQueryRangeIsTrue_OnInRangeChanged");
static_assert(offsetof(AnyActorPairQueryRangeIsTrue_OnInRangeChanged, InRange) == 0x000000, "Member 'AnyActorPairQueryRangeIsTrue_OnInRangeChanged::InRange' has a wrong offset!");

// Function DBDCompetence.BlessedStatusEffect.Authority_OnSurvivorRemovedFromGame
// 0x0008 (0x0008 - 0x0000)
struct BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame) == 0x000008, "Wrong alignment on BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame");
static_assert(sizeof(BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame) == 0x000008, "Wrong size on BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame");
static_assert(offsetof(BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame, Survivor) == 0x000000, "Member 'BlessedStatusEffect_Authority_OnSurvivorRemovedFromGame::Survivor' has a wrong offset!");

// Function DBDCompetence.BlessedStatusEffect.GetBoonTotemBlessingRange
// 0x0004 (0x0004 - 0x0000)
struct BlessedStatusEffect_GetBoonTotemBlessingRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlessedStatusEffect_GetBoonTotemBlessingRange) == 0x000004, "Wrong alignment on BlessedStatusEffect_GetBoonTotemBlessingRange");
static_assert(sizeof(BlessedStatusEffect_GetBoonTotemBlessingRange) == 0x000004, "Wrong size on BlessedStatusEffect_GetBoonTotemBlessingRange");
static_assert(offsetof(BlessedStatusEffect_GetBoonTotemBlessingRange, ReturnValue) == 0x000000, "Member 'BlessedStatusEffect_GetBoonTotemBlessingRange::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BlessedStatusEffect.GetBoundTotem
// 0x0008 (0x0008 - 0x0000)
struct BlessedStatusEffect_GetBoundTotem final
{
public:
	class ATotem*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlessedStatusEffect_GetBoundTotem) == 0x000008, "Wrong alignment on BlessedStatusEffect_GetBoundTotem");
static_assert(sizeof(BlessedStatusEffect_GetBoundTotem) == 0x000008, "Wrong size on BlessedStatusEffect_GetBoundTotem");
static_assert(offsetof(BlessedStatusEffect_GetBoundTotem, ReturnValue) == 0x000000, "Member 'BlessedStatusEffect_GetBoundTotem::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ThrillingTremors.GetCooldownAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ThrillingTremors_GetCooldownAtLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrillingTremors_GetCooldownAtLevel) == 0x000004, "Wrong alignment on ThrillingTremors_GetCooldownAtLevel");
static_assert(sizeof(ThrillingTremors_GetCooldownAtLevel) == 0x000004, "Wrong size on ThrillingTremors_GetCooldownAtLevel");
static_assert(offsetof(ThrillingTremors_GetCooldownAtLevel, ReturnValue) == 0x000000, "Member 'ThrillingTremors_GetCooldownAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ThrillingTremors.GetDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ThrillingTremors_GetDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ThrillingTremors_GetDurationAtLevel) == 0x000004, "Wrong alignment on ThrillingTremors_GetDurationAtLevel");
static_assert(sizeof(ThrillingTremors_GetDurationAtLevel) == 0x000004, "Wrong size on ThrillingTremors_GetDurationAtLevel");
static_assert(offsetof(ThrillingTremors_GetDurationAtLevel, ReturnValue) == 0x000000, "Member 'ThrillingTremors_GetDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerformingInteraction.SetInteractionSemantics
// 0x0020 (0x0020 - 0x0000)
struct IsPlayerPerformingInteraction_SetInteractionSemantics final
{
public:
	struct FGameplayTagContainer                  InteractionSemantics;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerformingInteraction_SetInteractionSemantics) == 0x000008, "Wrong alignment on IsPlayerPerformingInteraction_SetInteractionSemantics");
static_assert(sizeof(IsPlayerPerformingInteraction_SetInteractionSemantics) == 0x000020, "Wrong size on IsPlayerPerformingInteraction_SetInteractionSemantics");
static_assert(offsetof(IsPlayerPerformingInteraction_SetInteractionSemantics, InteractionSemantics) == 0x000000, "Member 'IsPlayerPerformingInteraction_SetInteractionSemantics::InteractionSemantics' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerformingInteraction.UpdateIsTrue
// 0x0008 (0x0008 - 0x0000)
struct IsPlayerPerformingInteraction_UpdateIsTrue final
{
public:
	class UInteractionDefinition*                 InteractionDefinition;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerformingInteraction_UpdateIsTrue) == 0x000008, "Wrong alignment on IsPlayerPerformingInteraction_UpdateIsTrue");
static_assert(sizeof(IsPlayerPerformingInteraction_UpdateIsTrue) == 0x000008, "Wrong size on IsPlayerPerformingInteraction_UpdateIsTrue");
static_assert(offsetof(IsPlayerPerformingInteraction_UpdateIsTrue, InteractionDefinition) == 0x000000, "Member 'IsPlayerPerformingInteraction_UpdateIsTrue::InteractionDefinition' has a wrong offset!");

// Function DBDCompetence.Tinkerer.Authority_OnGeneratorChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct Tinkerer_Authority_OnGeneratorChargePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_Authority_OnGeneratorChargePercentChanged) == 0x000008, "Wrong alignment on Tinkerer_Authority_OnGeneratorChargePercentChanged");
static_assert(sizeof(Tinkerer_Authority_OnGeneratorChargePercentChanged) == 0x000010, "Wrong size on Tinkerer_Authority_OnGeneratorChargePercentChanged");
static_assert(offsetof(Tinkerer_Authority_OnGeneratorChargePercentChanged, ChargeableComponent) == 0x000000, "Member 'Tinkerer_Authority_OnGeneratorChargePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(Tinkerer_Authority_OnGeneratorChargePercentChanged, PercentCompletionChange) == 0x000008, "Member 'Tinkerer_Authority_OnGeneratorChargePercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(Tinkerer_Authority_OnGeneratorChargePercentChanged, TotalPercentComplete) == 0x00000C, "Member 'Tinkerer_Authority_OnGeneratorChargePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function DBDCompetence.Tinkerer.Authority_OnGeneratorReachedThreshold
// 0x0008 (0x0008 - 0x0000)
struct Tinkerer_Authority_OnGeneratorReachedThreshold final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_Authority_OnGeneratorReachedThreshold) == 0x000008, "Wrong alignment on Tinkerer_Authority_OnGeneratorReachedThreshold");
static_assert(sizeof(Tinkerer_Authority_OnGeneratorReachedThreshold) == 0x000008, "Wrong size on Tinkerer_Authority_OnGeneratorReachedThreshold");
static_assert(offsetof(Tinkerer_Authority_OnGeneratorReachedThreshold, Generator) == 0x000000, "Member 'Tinkerer_Authority_OnGeneratorReachedThreshold::Generator' has a wrong offset!");

// Function DBDCompetence.Tinkerer.Authority_OnUndetectableAttackSuccessNearActiveGenerator
// 0x0010 (0x0010 - 0x0000)
struct Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator final
{
public:
	class ADBDPlayer*                             Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator) == 0x000008, "Wrong alignment on Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator");
static_assert(sizeof(Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator) == 0x000010, "Wrong size on Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator");
static_assert(offsetof(Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator, Instigator) == 0x000000, "Member 'Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator::Instigator' has a wrong offset!");
static_assert(offsetof(Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator, Target) == 0x000008, "Member 'Tinkerer_Authority_OnUndetectableAttackSuccessNearActiveGenerator::Target' has a wrong offset!");

// Function DBDCompetence.Tinkerer.Authority_OnUndetectableGeneratorInterrupt
// 0x0010 (0x0010 - 0x0000)
struct Tinkerer_Authority_OnUndetectableGeneratorInterrupt final
{
public:
	class ADBDPlayer*                             Instigator;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Target;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_Authority_OnUndetectableGeneratorInterrupt) == 0x000008, "Wrong alignment on Tinkerer_Authority_OnUndetectableGeneratorInterrupt");
static_assert(sizeof(Tinkerer_Authority_OnUndetectableGeneratorInterrupt) == 0x000010, "Wrong size on Tinkerer_Authority_OnUndetectableGeneratorInterrupt");
static_assert(offsetof(Tinkerer_Authority_OnUndetectableGeneratorInterrupt, Instigator) == 0x000000, "Member 'Tinkerer_Authority_OnUndetectableGeneratorInterrupt::Instigator' has a wrong offset!");
static_assert(offsetof(Tinkerer_Authority_OnUndetectableGeneratorInterrupt, Target) == 0x000008, "Member 'Tinkerer_Authority_OnUndetectableGeneratorInterrupt::Target' has a wrong offset!");

// Function DBDCompetence.Tinkerer.GetActivationTimeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Tinkerer_GetActivationTimeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_GetActivationTimeAtLevel) == 0x000004, "Wrong alignment on Tinkerer_GetActivationTimeAtLevel");
static_assert(sizeof(Tinkerer_GetActivationTimeAtLevel) == 0x000004, "Wrong size on Tinkerer_GetActivationTimeAtLevel");
static_assert(offsetof(Tinkerer_GetActivationTimeAtLevel, ReturnValue) == 0x000000, "Member 'Tinkerer_GetActivationTimeAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Tinkerer.GetTriggerThreshold
// 0x0004 (0x0004 - 0x0000)
struct Tinkerer_GetTriggerThreshold final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Tinkerer_GetTriggerThreshold) == 0x000004, "Wrong alignment on Tinkerer_GetTriggerThreshold");
static_assert(sizeof(Tinkerer_GetTriggerThreshold) == 0x000004, "Wrong size on Tinkerer_GetTriggerThreshold");
static_assert(offsetof(Tinkerer_GetTriggerThreshold, ReturnValue) == 0x000000, "Member 'Tinkerer_GetTriggerThreshold::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DejaVu.GetActionSpeedsAtLevel
// 0x0004 (0x0004 - 0x0000)
struct DejaVu_GetActionSpeedsAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DejaVu_GetActionSpeedsAtLevel) == 0x000004, "Wrong alignment on DejaVu_GetActionSpeedsAtLevel");
static_assert(sizeof(DejaVu_GetActionSpeedsAtLevel) == 0x000004, "Wrong size on DejaVu_GetActionSpeedsAtLevel");
static_assert(offsetof(DejaVu_GetActionSpeedsAtLevel, ReturnValue) == 0x000000, "Member 'DejaVu_GetActionSpeedsAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.TheMettleOfMan.GetRevealOutsideRangeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct TheMettleOfMan_GetRevealOutsideRangeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheMettleOfMan_GetRevealOutsideRangeAtLevel) == 0x000004, "Wrong alignment on TheMettleOfMan_GetRevealOutsideRangeAtLevel");
static_assert(sizeof(TheMettleOfMan_GetRevealOutsideRangeAtLevel) == 0x000004, "Wrong size on TheMettleOfMan_GetRevealOutsideRangeAtLevel");
static_assert(offsetof(TheMettleOfMan_GetRevealOutsideRangeAtLevel, ReturnValue) == 0x000000, "Member 'TheMettleOfMan_GetRevealOutsideRangeAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.Multicast_SetTriggerOnNextPickup
// 0x0001 (0x0001 - 0x0000)
struct DecisiveStrike_Multicast_SetTriggerOnNextPickup final
{
public:
	bool                                          TriggerOnNextPickup;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_Multicast_SetTriggerOnNextPickup) == 0x000001, "Wrong alignment on DecisiveStrike_Multicast_SetTriggerOnNextPickup");
static_assert(sizeof(DecisiveStrike_Multicast_SetTriggerOnNextPickup) == 0x000001, "Wrong size on DecisiveStrike_Multicast_SetTriggerOnNextPickup");
static_assert(offsetof(DecisiveStrike_Multicast_SetTriggerOnNextPickup, TriggerOnNextPickup) == 0x000000, "Member 'DecisiveStrike_Multicast_SetTriggerOnNextPickup::TriggerOnNextPickup' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.OnOwnerPickedUp
// 0x0008 (0x0008 - 0x0000)
struct DecisiveStrike_OnOwnerPickedUp final
{
public:
	class ADBDPlayer*                             Picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_OnOwnerPickedUp) == 0x000008, "Wrong alignment on DecisiveStrike_OnOwnerPickedUp");
static_assert(sizeof(DecisiveStrike_OnOwnerPickedUp) == 0x000008, "Wrong size on DecisiveStrike_OnOwnerPickedUp");
static_assert(offsetof(DecisiveStrike_OnOwnerPickedUp, Picker) == 0x000000, "Member 'DecisiveStrike_OnOwnerPickedUp::Picker' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.OnPickUpEnded
// 0x0008 (0x0008 - 0x0000)
struct DecisiveStrike_OnPickUpEnded final
{
public:
	class ADBDPlayer*                             Picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_OnPickUpEnded) == 0x000008, "Wrong alignment on DecisiveStrike_OnPickUpEnded");
static_assert(sizeof(DecisiveStrike_OnPickUpEnded) == 0x000008, "Wrong size on DecisiveStrike_OnPickUpEnded");
static_assert(offsetof(DecisiveStrike_OnPickUpEnded, Picker) == 0x000000, "Member 'DecisiveStrike_OnPickUpEnded::Picker' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.OnSkillCheck
// 0x0010 (0x0010 - 0x0000)
struct DecisiveStrike_OnSkillCheck final
{
public:
	bool                                          HadInput;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x0003(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_OnSkillCheck) == 0x000008, "Wrong alignment on DecisiveStrike_OnSkillCheck");
static_assert(sizeof(DecisiveStrike_OnSkillCheck) == 0x000010, "Wrong size on DecisiveStrike_OnSkillCheck");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, HadInput) == 0x000000, "Member 'DecisiveStrike_OnSkillCheck::HadInput' has a wrong offset!");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, Success) == 0x000001, "Member 'DecisiveStrike_OnSkillCheck::Success' has a wrong offset!");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, Bonus) == 0x000002, "Member 'DecisiveStrike_OnSkillCheck::Bonus' has a wrong offset!");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, Type) == 0x000003, "Member 'DecisiveStrike_OnSkillCheck::Type' has a wrong offset!");
static_assert(offsetof(DecisiveStrike_OnSkillCheck, Player) == 0x000008, "Member 'DecisiveStrike_OnSkillCheck::Player' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.Server_SetTriggerOnNextPickup
// 0x0001 (0x0001 - 0x0000)
struct DecisiveStrike_Server_SetTriggerOnNextPickup final
{
public:
	bool                                          TriggerOnNextPickup;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_Server_SetTriggerOnNextPickup) == 0x000001, "Wrong alignment on DecisiveStrike_Server_SetTriggerOnNextPickup");
static_assert(sizeof(DecisiveStrike_Server_SetTriggerOnNextPickup) == 0x000001, "Wrong size on DecisiveStrike_Server_SetTriggerOnNextPickup");
static_assert(offsetof(DecisiveStrike_Server_SetTriggerOnNextPickup, TriggerOnNextPickup) == 0x000000, "Member 'DecisiveStrike_Server_SetTriggerOnNextPickup::TriggerOnNextPickup' has a wrong offset!");

// Function DBDCompetence.DecisiveStrike.GetDurationAfterUnhook
// 0x0004 (0x0004 - 0x0000)
struct DecisiveStrike_GetDurationAfterUnhook final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DecisiveStrike_GetDurationAfterUnhook) == 0x000004, "Wrong alignment on DecisiveStrike_GetDurationAfterUnhook");
static_assert(sizeof(DecisiveStrike_GetDurationAfterUnhook) == 0x000004, "Wrong size on DecisiveStrike_GetDurationAfterUnhook");
static_assert(offsetof(DecisiveStrike_GetDurationAfterUnhook, ReturnValue) == 0x000000, "Member 'DecisiveStrike_GetDurationAfterUnhook::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BoonPerk.Authority_OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct BoonPerk_Authority_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BoonPerk_Authority_OnSurvivorRemoved) == 0x000008, "Wrong alignment on BoonPerk_Authority_OnSurvivorRemoved");
static_assert(sizeof(BoonPerk_Authority_OnSurvivorRemoved) == 0x000008, "Wrong size on BoonPerk_Authority_OnSurvivorRemoved");
static_assert(offsetof(BoonPerk_Authority_OnSurvivorRemoved, Survivor) == 0x000000, "Member 'BoonPerk_Authority_OnSurvivorRemoved::Survivor' has a wrong offset!");

// Function DBDCompetence.DarkSense.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct DarkSense_Authority_OnInRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkSense_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on DarkSense_Authority_OnInRangeChanged");
static_assert(sizeof(DarkSense_Authority_OnInRangeChanged) == 0x000001, "Wrong size on DarkSense_Authority_OnInRangeChanged");
static_assert(offsetof(DarkSense_Authority_OnInRangeChanged, InRange) == 0x000000, "Member 'DarkSense_Authority_OnInRangeChanged::InRange' has a wrong offset!");

// Function DBDCompetence.DarkSense.GetDarkSenseRevealRange
// 0x0004 (0x0004 - 0x0000)
struct DarkSense_GetDarkSenseRevealRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkSense_GetDarkSenseRevealRange) == 0x000004, "Wrong alignment on DarkSense_GetDarkSenseRevealRange");
static_assert(sizeof(DarkSense_GetDarkSenseRevealRange) == 0x000004, "Wrong size on DarkSense_GetDarkSenseRevealRange");
static_assert(offsetof(DarkSense_GetDarkSenseRevealRange, ReturnValue) == 0x000000, "Member 'DarkSense_GetDarkSenseRevealRange::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DarkSense.GetKillerRevealDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct DarkSense_GetKillerRevealDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DarkSense_GetKillerRevealDurationAtLevel) == 0x000004, "Wrong alignment on DarkSense_GetKillerRevealDurationAtLevel");
static_assert(sizeof(DarkSense_GetKillerRevealDurationAtLevel) == 0x000004, "Wrong size on DarkSense_GetKillerRevealDurationAtLevel");
static_assert(offsetof(DarkSense_GetKillerRevealDurationAtLevel, ReturnValue) == 0x000000, "Member 'DarkSense_GetKillerRevealDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.PlayersInRangePerk.GetPerkRange
// 0x0004 (0x0004 - 0x0000)
struct PlayersInRangePerk_GetPerkRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayersInRangePerk_GetPerkRange) == 0x000004, "Wrong alignment on PlayersInRangePerk_GetPerkRange");
static_assert(sizeof(PlayersInRangePerk_GetPerkRange) == 0x000004, "Wrong size on PlayersInRangePerk_GetPerkRange");
static_assert(offsetof(PlayersInRangePerk_GetPerkRange, ReturnValue) == 0x000000, "Member 'PlayersInRangePerk_GetPerkRange::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HemorrhageStatusEffect.Authority_OnSurvivorHealed
// 0x0018 (0x0018 - 0x0000)
struct HemorrhageStatusEffect_Authority_OnSurvivorHealed final
{
public:
	struct FCamperHealResult                      HealResult;                                        // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HemorrhageStatusEffect_Authority_OnSurvivorHealed) == 0x000008, "Wrong alignment on HemorrhageStatusEffect_Authority_OnSurvivorHealed");
static_assert(sizeof(HemorrhageStatusEffect_Authority_OnSurvivorHealed) == 0x000018, "Wrong size on HemorrhageStatusEffect_Authority_OnSurvivorHealed");
static_assert(offsetof(HemorrhageStatusEffect_Authority_OnSurvivorHealed, HealResult) == 0x000000, "Member 'HemorrhageStatusEffect_Authority_OnSurvivorHealed::HealResult' has a wrong offset!");

// Function DBDCompetence.HemorrhageStatusEffect.OnStoppedHealing
// 0x0010 (0x0010 - 0x0000)
struct HemorrhageStatusEffect_OnStoppedHealing final
{
public:
	const class ADBDPlayer*                       Instigator;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Target;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HemorrhageStatusEffect_OnStoppedHealing) == 0x000008, "Wrong alignment on HemorrhageStatusEffect_OnStoppedHealing");
static_assert(sizeof(HemorrhageStatusEffect_OnStoppedHealing) == 0x000010, "Wrong size on HemorrhageStatusEffect_OnStoppedHealing");
static_assert(offsetof(HemorrhageStatusEffect_OnStoppedHealing, Instigator) == 0x000000, "Member 'HemorrhageStatusEffect_OnStoppedHealing::Instigator' has a wrong offset!");
static_assert(offsetof(HemorrhageStatusEffect_OnStoppedHealing, Target) == 0x000008, "Member 'HemorrhageStatusEffect_OnStoppedHealing::Target' has a wrong offset!");

// Function DBDCompetence.IsBestProveThyselfEffectInRange.OnInRangeChanged
// 0x0010 (0x0010 - 0x0000)
struct IsBestProveThyselfEffectInRange_OnInRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UProveThyselfEffect*                    ProveThyselfEffect;                                // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsBestProveThyselfEffectInRange_OnInRangeChanged) == 0x000008, "Wrong alignment on IsBestProveThyselfEffectInRange_OnInRangeChanged");
static_assert(sizeof(IsBestProveThyselfEffectInRange_OnInRangeChanged) == 0x000010, "Wrong size on IsBestProveThyselfEffectInRange_OnInRangeChanged");
static_assert(offsetof(IsBestProveThyselfEffectInRange_OnInRangeChanged, InRange) == 0x000000, "Member 'IsBestProveThyselfEffectInRange_OnInRangeChanged::InRange' has a wrong offset!");
static_assert(offsetof(IsBestProveThyselfEffectInRange_OnInRangeChanged, ProveThyselfEffect) == 0x000008, "Member 'IsBestProveThyselfEffectInRange_OnInRangeChanged::ProveThyselfEffect' has a wrong offset!");

// Function DBDCompetence.InfectiousFright.RevealSurvivorLocation
// 0x0008 (0x0008 - 0x0000)
struct InfectiousFright_RevealSurvivorLocation final
{
public:
	class ACamperPlayer*                          Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InfectiousFright_RevealSurvivorLocation) == 0x000008, "Wrong alignment on InfectiousFright_RevealSurvivorLocation");
static_assert(sizeof(InfectiousFright_RevealSurvivorLocation) == 0x000008, "Wrong size on InfectiousFright_RevealSurvivorLocation");
static_assert(offsetof(InfectiousFright_RevealSurvivorLocation, Target) == 0x000000, "Member 'InfectiousFright_RevealSurvivorLocation::Target' has a wrong offset!");

// Function DBDCompetence.CruelConfinement.GetBlockDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct CruelConfinement_GetBlockDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CruelConfinement_GetBlockDurationAtLevel) == 0x000004, "Wrong alignment on CruelConfinement_GetBlockDurationAtLevel");
static_assert(sizeof(CruelConfinement_GetBlockDurationAtLevel) == 0x000004, "Wrong size on CruelConfinement_GetBlockDurationAtLevel");
static_assert(offsetof(CruelConfinement_GetBlockDurationAtLevel, ReturnValue) == 0x000000, "Member 'CruelConfinement_GetBlockDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.IsInRangeOfOriginatingPlayer.OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct IsInRangeOfOriginatingPlayer_OnInRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsInRangeOfOriginatingPlayer_OnInRangeChanged) == 0x000001, "Wrong alignment on IsInRangeOfOriginatingPlayer_OnInRangeChanged");
static_assert(sizeof(IsInRangeOfOriginatingPlayer_OnInRangeChanged) == 0x000001, "Wrong size on IsInRangeOfOriginatingPlayer_OnInRangeChanged");
static_assert(offsetof(IsInRangeOfOriginatingPlayer_OnInRangeChanged, InRange) == 0x000000, "Member 'IsInRangeOfOriginatingPlayer_OnInRangeChanged::InRange' has a wrong offset!");

// Function DBDCompetence.IsPlayerLookingAtKillerCondition.OnPawnControllerChanged
// 0x0010 (0x0010 - 0x0000)
struct IsPlayerLookingAtKillerCondition_OnPawnControllerChanged final
{
public:
	class APawn*                                  Pawn;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AController*                            Controller;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerLookingAtKillerCondition_OnPawnControllerChanged) == 0x000008, "Wrong alignment on IsPlayerLookingAtKillerCondition_OnPawnControllerChanged");
static_assert(sizeof(IsPlayerLookingAtKillerCondition_OnPawnControllerChanged) == 0x000010, "Wrong size on IsPlayerLookingAtKillerCondition_OnPawnControllerChanged");
static_assert(offsetof(IsPlayerLookingAtKillerCondition_OnPawnControllerChanged, Pawn) == 0x000000, "Member 'IsPlayerLookingAtKillerCondition_OnPawnControllerChanged::Pawn' has a wrong offset!");
static_assert(offsetof(IsPlayerLookingAtKillerCondition_OnPawnControllerChanged, Controller) == 0x000008, "Member 'IsPlayerLookingAtKillerCondition_OnPawnControllerChanged::Controller' has a wrong offset!");

// Function DBDCompetence.IsPlayerLookingAtKillerCondition.OnRep_IsLookingTowards
// 0x0001 (0x0001 - 0x0000)
struct IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards final
{
public:
	bool                                          IsLookingTowards;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards) == 0x000001, "Wrong alignment on IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards");
static_assert(sizeof(IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards) == 0x000001, "Wrong size on IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards");
static_assert(offsetof(IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards, IsLookingTowards) == 0x000000, "Member 'IsPlayerLookingAtKillerCondition_OnRep_IsLookingTowards::IsLookingTowards' has a wrong offset!");

// Function DBDCompetence.AddStatusEffectAction.Multicast_ExecuteSubActions
// 0x0030 (0x0030 - 0x0000)
struct AddStatusEffectAction_Multicast_ExecuteSubActions final
{
public:
	struct FGameEventData                         GameEventData;                                     // 0x0000(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AddStatusEffectAction_Multicast_ExecuteSubActions) == 0x000008, "Wrong alignment on AddStatusEffectAction_Multicast_ExecuteSubActions");
static_assert(sizeof(AddStatusEffectAction_Multicast_ExecuteSubActions) == 0x000030, "Wrong size on AddStatusEffectAction_Multicast_ExecuteSubActions");
static_assert(offsetof(AddStatusEffectAction_Multicast_ExecuteSubActions, GameEventData) == 0x000000, "Member 'AddStatusEffectAction_Multicast_ExecuteSubActions::GameEventData' has a wrong offset!");

// Function DBDCompetence.BaseIsPlayerPerformingInteraction.SetInteractionSemantics
// 0x0020 (0x0020 - 0x0000)
struct BaseIsPlayerPerformingInteraction_SetInteractionSemantics final
{
public:
	struct FGameplayTagContainer                  InteractionSemantics;                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseIsPlayerPerformingInteraction_SetInteractionSemantics) == 0x000008, "Wrong alignment on BaseIsPlayerPerformingInteraction_SetInteractionSemantics");
static_assert(sizeof(BaseIsPlayerPerformingInteraction_SetInteractionSemantics) == 0x000020, "Wrong size on BaseIsPlayerPerformingInteraction_SetInteractionSemantics");
static_assert(offsetof(BaseIsPlayerPerformingInteraction_SetInteractionSemantics, InteractionSemantics) == 0x000000, "Member 'BaseIsPlayerPerformingInteraction_SetInteractionSemantics::InteractionSemantics' has a wrong offset!");

// Function DBDCompetence.BaseIsPlayerPerformingInteraction.UpdateIsTrue
// 0x0008 (0x0008 - 0x0000)
struct BaseIsPlayerPerformingInteraction_UpdateIsTrue final
{
public:
	class UInteractionDefinition*                 InteractionDefinition;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseIsPlayerPerformingInteraction_UpdateIsTrue) == 0x000008, "Wrong alignment on BaseIsPlayerPerformingInteraction_UpdateIsTrue");
static_assert(sizeof(BaseIsPlayerPerformingInteraction_UpdateIsTrue) == 0x000008, "Wrong size on BaseIsPlayerPerformingInteraction_UpdateIsTrue");
static_assert(offsetof(BaseIsPlayerPerformingInteraction_UpdateIsTrue, InteractionDefinition) == 0x000000, "Member 'BaseIsPlayerPerformingInteraction_UpdateIsTrue::InteractionDefinition' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectableChargeStateChange
// 0x0001 (0x0001 - 0x0000)
struct IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange final
{
public:
	bool                                          Empty;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange) == 0x000001, "Wrong alignment on IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange");
static_assert(sizeof(IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange) == 0x000001, "Wrong size on IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange");
static_assert(offsetof(IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange, Empty) == 0x000000, "Member 'IsPlayerPerformingItemInteraction_OnCollectableChargeStateChange::Empty' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectableDropped
// 0x0001 (0x0001 - 0x0000)
struct IsPlayerPerformingItemInteraction_OnCollectableDropped final
{
public:
	EItemDropType                                 DropType;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerformingItemInteraction_OnCollectableDropped) == 0x000001, "Wrong alignment on IsPlayerPerformingItemInteraction_OnCollectableDropped");
static_assert(sizeof(IsPlayerPerformingItemInteraction_OnCollectableDropped) == 0x000001, "Wrong size on IsPlayerPerformingItemInteraction_OnCollectableDropped");
static_assert(offsetof(IsPlayerPerformingItemInteraction_OnCollectableDropped, DropType) == 0x000000, "Member 'IsPlayerPerformingItemInteraction_OnCollectableDropped::DropType' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerformingItemInteraction.OnCollectablePickedUp
// 0x0008 (0x0008 - 0x0000)
struct IsPlayerPerformingItemInteraction_OnCollectablePickedUp final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerformingItemInteraction_OnCollectablePickedUp) == 0x000008, "Wrong alignment on IsPlayerPerformingItemInteraction_OnCollectablePickedUp");
static_assert(sizeof(IsPlayerPerformingItemInteraction_OnCollectablePickedUp) == 0x000008, "Wrong size on IsPlayerPerformingItemInteraction_OnCollectablePickedUp");
static_assert(offsetof(IsPlayerPerformingItemInteraction_OnCollectablePickedUp, Player) == 0x000000, "Member 'IsPlayerPerformingItemInteraction_OnCollectablePickedUp::Player' has a wrong offset!");

// Function DBDCompetence.AllowSelfRecoverAction.Authority_OnHealProgress
// 0x0018 (0x0018 - 0x0000)
struct AllowSelfRecoverAction_Authority_OnHealProgress final
{
public:
	float                                         IndividualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AllowSelfRecoverAction_Authority_OnHealProgress) == 0x000008, "Wrong alignment on AllowSelfRecoverAction_Authority_OnHealProgress");
static_assert(sizeof(AllowSelfRecoverAction_Authority_OnHealProgress) == 0x000018, "Wrong size on AllowSelfRecoverAction_Authority_OnHealProgress");
static_assert(offsetof(AllowSelfRecoverAction_Authority_OnHealProgress, IndividualChargeAmount) == 0x000000, "Member 'AllowSelfRecoverAction_Authority_OnHealProgress::IndividualChargeAmount' has a wrong offset!");
static_assert(offsetof(AllowSelfRecoverAction_Authority_OnHealProgress, TotalChargeAmount) == 0x000004, "Member 'AllowSelfRecoverAction_Authority_OnHealProgress::TotalChargeAmount' has a wrong offset!");
static_assert(offsetof(AllowSelfRecoverAction_Authority_OnHealProgress, ChargeInstigator) == 0x000008, "Member 'AllowSelfRecoverAction_Authority_OnHealProgress::ChargeInstigator' has a wrong offset!");
static_assert(offsetof(AllowSelfRecoverAction_Authority_OnHealProgress, WasCoop) == 0x000010, "Member 'AllowSelfRecoverAction_Authority_OnHealProgress::WasCoop' has a wrong offset!");
static_assert(offsetof(AllowSelfRecoverAction_Authority_OnHealProgress, DeltaTime) == 0x000014, "Member 'AllowSelfRecoverAction_Authority_OnHealProgress::DeltaTime' has a wrong offset!");

// Function DBDCompetence.AnyMeansNecessary.Authority_OnPalletPulledUp
// 0x0040 (0x0040 - 0x0000)
struct AnyMeansNecessary_Authority_OnPalletPulledUp final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnyMeansNecessary_Authority_OnPalletPulledUp) == 0x000008, "Wrong alignment on AnyMeansNecessary_Authority_OnPalletPulledUp");
static_assert(sizeof(AnyMeansNecessary_Authority_OnPalletPulledUp) == 0x000040, "Wrong size on AnyMeansNecessary_Authority_OnPalletPulledUp");
static_assert(offsetof(AnyMeansNecessary_Authority_OnPalletPulledUp, GameplayTag) == 0x000000, "Member 'AnyMeansNecessary_Authority_OnPalletPulledUp::GameplayTag' has a wrong offset!");
static_assert(offsetof(AnyMeansNecessary_Authority_OnPalletPulledUp, GameEventData) == 0x000010, "Member 'AnyMeansNecessary_Authority_OnPalletPulledUp::GameEventData' has a wrong offset!");

// Function DBDCompetence.AnySurvivorHasObjectState.OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct AnySurvivorHasObjectState_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnySurvivorHasObjectState_OnSurvivorAdded) == 0x000008, "Wrong alignment on AnySurvivorHasObjectState_OnSurvivorAdded");
static_assert(sizeof(AnySurvivorHasObjectState_OnSurvivorAdded) == 0x000008, "Wrong size on AnySurvivorHasObjectState_OnSurvivorAdded");
static_assert(offsetof(AnySurvivorHasObjectState_OnSurvivorAdded, Survivor) == 0x000000, "Member 'AnySurvivorHasObjectState_OnSurvivorAdded::Survivor' has a wrong offset!");

// Function DBDCompetence.AnySurvivorHasObjectState.OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct AnySurvivorHasObjectState_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AnySurvivorHasObjectState_OnSurvivorRemoved) == 0x000008, "Wrong alignment on AnySurvivorHasObjectState_OnSurvivorRemoved");
static_assert(sizeof(AnySurvivorHasObjectState_OnSurvivorRemoved) == 0x000008, "Wrong size on AnySurvivorHasObjectState_OnSurvivorRemoved");
static_assert(offsetof(AnySurvivorHasObjectState_OnSurvivorRemoved, Survivor) == 0x000000, "Member 'AnySurvivorHasObjectState_OnSurvivorRemoved::Survivor' has a wrong offset!");

// Function DBDCompetence.Babysitter.GetCooldownTimeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Babysitter_GetCooldownTimeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Babysitter_GetCooldownTimeAtLevel) == 0x000004, "Wrong alignment on Babysitter_GetCooldownTimeAtLevel");
static_assert(sizeof(Babysitter_GetCooldownTimeAtLevel) == 0x000004, "Wrong size on Babysitter_GetCooldownTimeAtLevel");
static_assert(offsetof(Babysitter_GetCooldownTimeAtLevel, ReturnValue) == 0x000000, "Member 'Babysitter_GetCooldownTimeAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Babysitter.GetHasteEffectAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Babysitter_GetHasteEffectAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Babysitter_GetHasteEffectAtLevel) == 0x000004, "Wrong alignment on Babysitter_GetHasteEffectAtLevel");
static_assert(sizeof(Babysitter_GetHasteEffectAtLevel) == 0x000004, "Wrong size on Babysitter_GetHasteEffectAtLevel");
static_assert(offsetof(Babysitter_GetHasteEffectAtLevel, ReturnValue) == 0x000000, "Member 'Babysitter_GetHasteEffectAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Babysitter.GetScratchMarkHidingTimeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Babysitter_GetScratchMarkHidingTimeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Babysitter_GetScratchMarkHidingTimeAtLevel) == 0x000004, "Wrong alignment on Babysitter_GetScratchMarkHidingTimeAtLevel");
static_assert(sizeof(Babysitter_GetScratchMarkHidingTimeAtLevel) == 0x000004, "Wrong size on Babysitter_GetScratchMarkHidingTimeAtLevel");
static_assert(offsetof(Babysitter_GetScratchMarkHidingTimeAtLevel, ReturnValue) == 0x000000, "Member 'Babysitter_GetScratchMarkHidingTimeAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Babysitter.GetShowAuraTimeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Babysitter_GetShowAuraTimeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Babysitter_GetShowAuraTimeAtLevel) == 0x000004, "Wrong alignment on Babysitter_GetShowAuraTimeAtLevel");
static_assert(sizeof(Babysitter_GetShowAuraTimeAtLevel) == 0x000004, "Wrong size on Babysitter_GetShowAuraTimeAtLevel");
static_assert(offsetof(Babysitter_GetShowAuraTimeAtLevel, ReturnValue) == 0x000000, "Member 'Babysitter_GetShowAuraTimeAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BetterTogether.GetRevealDistance
// 0x0004 (0x0004 - 0x0000)
struct BetterTogether_GetRevealDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BetterTogether_GetRevealDistance) == 0x000004, "Wrong alignment on BetterTogether_GetRevealDistance");
static_assert(sizeof(BetterTogether_GetRevealDistance) == 0x000004, "Wrong size on BetterTogether_GetRevealDistance");
static_assert(offsetof(BetterTogether_GetRevealDistance, ReturnValue) == 0x000000, "Member 'BetterTogether_GetRevealDistance::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BetterTogether.OnStartedGeneratorRepair
// 0x0040 (0x0040 - 0x0000)
struct BetterTogether_OnStartedGeneratorRepair final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BetterTogether_OnStartedGeneratorRepair) == 0x000008, "Wrong alignment on BetterTogether_OnStartedGeneratorRepair");
static_assert(sizeof(BetterTogether_OnStartedGeneratorRepair) == 0x000040, "Wrong size on BetterTogether_OnStartedGeneratorRepair");
static_assert(offsetof(BetterTogether_OnStartedGeneratorRepair, GameplayTag) == 0x000000, "Member 'BetterTogether_OnStartedGeneratorRepair::GameplayTag' has a wrong offset!");
static_assert(offsetof(BetterTogether_OnStartedGeneratorRepair, GameEventData) == 0x000010, "Member 'BetterTogether_OnStartedGeneratorRepair::GameEventData' has a wrong offset!");

// Function DBDCompetence.BloodEcho.GetStatusEffectDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct BloodEcho_GetStatusEffectDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodEcho_GetStatusEffectDurationAtLevel) == 0x000004, "Wrong alignment on BloodEcho_GetStatusEffectDurationAtLevel");
static_assert(sizeof(BloodEcho_GetStatusEffectDurationAtLevel) == 0x000004, "Wrong size on BloodEcho_GetStatusEffectDurationAtLevel");
static_assert(offsetof(BloodEcho_GetStatusEffectDurationAtLevel, ReturnValue) == 0x000000, "Member 'BloodEcho_GetStatusEffectDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Breakout.Authority_ImposeWiggleStatusEffect
// 0x0008 (0x0008 - 0x0000)
struct Breakout_Authority_ImposeWiggleStatusEffect final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakout_Authority_ImposeWiggleStatusEffect) == 0x000008, "Wrong alignment on Breakout_Authority_ImposeWiggleStatusEffect");
static_assert(sizeof(Breakout_Authority_ImposeWiggleStatusEffect) == 0x000008, "Wrong size on Breakout_Authority_ImposeWiggleStatusEffect");
static_assert(offsetof(Breakout_Authority_ImposeWiggleStatusEffect, Survivor) == 0x000000, "Member 'Breakout_Authority_ImposeWiggleStatusEffect::Survivor' has a wrong offset!");

// Function DBDCompetence.Breakout.Authority_OnRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct Breakout_Authority_OnRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakout_Authority_OnRangeChanged) == 0x000001, "Wrong alignment on Breakout_Authority_OnRangeChanged");
static_assert(sizeof(Breakout_Authority_OnRangeChanged) == 0x000001, "Wrong size on Breakout_Authority_OnRangeChanged");
static_assert(offsetof(Breakout_Authority_OnRangeChanged, InRange) == 0x000000, "Member 'Breakout_Authority_OnRangeChanged::InRange' has a wrong offset!");

// Function DBDCompetence.Breakout.OnSlasherSet
// 0x0008 (0x0008 - 0x0000)
struct Breakout_OnSlasherSet final
{
public:
	class ASlasherPlayer*                         Slasher;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakout_OnSlasherSet) == 0x000008, "Wrong alignment on Breakout_OnSlasherSet");
static_assert(sizeof(Breakout_OnSlasherSet) == 0x000008, "Wrong size on Breakout_OnSlasherSet");
static_assert(offsetof(Breakout_OnSlasherSet, Slasher) == 0x000000, "Member 'Breakout_OnSlasherSet::Slasher' has a wrong offset!");

// Function DBDCompetence.Breakout.GetHasteEffectAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Breakout_GetHasteEffectAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakout_GetHasteEffectAtLevel) == 0x000004, "Wrong alignment on Breakout_GetHasteEffectAtLevel");
static_assert(sizeof(Breakout_GetHasteEffectAtLevel) == 0x000004, "Wrong size on Breakout_GetHasteEffectAtLevel");
static_assert(offsetof(Breakout_GetHasteEffectAtLevel, ReturnValue) == 0x000000, "Member 'Breakout_GetHasteEffectAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Breakout.GetSurvivorDistanceMax
// 0x0004 (0x0004 - 0x0000)
struct Breakout_GetSurvivorDistanceMax final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakout_GetSurvivorDistanceMax) == 0x000004, "Wrong alignment on Breakout_GetSurvivorDistanceMax");
static_assert(sizeof(Breakout_GetSurvivorDistanceMax) == 0x000004, "Wrong size on Breakout_GetSurvivorDistanceMax");
static_assert(offsetof(Breakout_GetSurvivorDistanceMax, ReturnValue) == 0x000000, "Member 'Breakout_GetSurvivorDistanceMax::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Breakout.GetWiggleEffect
// 0x0004 (0x0004 - 0x0000)
struct Breakout_GetWiggleEffect final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Breakout_GetWiggleEffect) == 0x000004, "Wrong alignment on Breakout_GetWiggleEffect");
static_assert(sizeof(Breakout_GetWiggleEffect) == 0x000004, "Wrong size on Breakout_GetWiggleEffect");
static_assert(offsetof(Breakout_GetWiggleEffect, ReturnValue) == 0x000000, "Member 'Breakout_GetWiggleEffect::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BuckleUp.GetHasteValue
// 0x0004 (0x0004 - 0x0000)
struct BuckleUp_GetHasteValue final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuckleUp_GetHasteValue) == 0x000004, "Wrong alignment on BuckleUp_GetHasteValue");
static_assert(sizeof(BuckleUp_GetHasteValue) == 0x000004, "Wrong size on BuckleUp_GetHasteValue");
static_assert(offsetof(BuckleUp_GetHasteValue, ReturnValue) == 0x000000, "Member 'BuckleUp_GetHasteValue::ReturnValue' has a wrong offset!");

// Function DBDCompetence.BuckleUp.GetPerkDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct BuckleUp_GetPerkDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BuckleUp_GetPerkDurationAtLevel) == 0x000004, "Wrong alignment on BuckleUp_GetPerkDurationAtLevel");
static_assert(sizeof(BuckleUp_GetPerkDurationAtLevel) == 0x000004, "Wrong size on BuckleUp_GetPerkDurationAtLevel");
static_assert(offsetof(BuckleUp_GetPerkDurationAtLevel, ReturnValue) == 0x000000, "Member 'BuckleUp_GetPerkDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.CorruptIntervention.GetGeneratorBlockDuration
// 0x0004 (0x0004 - 0x0000)
struct CorruptIntervention_GetGeneratorBlockDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CorruptIntervention_GetGeneratorBlockDuration) == 0x000004, "Wrong alignment on CorruptIntervention_GetGeneratorBlockDuration");
static_assert(sizeof(CorruptIntervention_GetGeneratorBlockDuration) == 0x000004, "Wrong size on CorruptIntervention_GetGeneratorBlockDuration");
static_assert(offsetof(CorruptIntervention_GetGeneratorBlockDuration, ReturnValue) == 0x000000, "Member 'CorruptIntervention_GetGeneratorBlockDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Coulrophobia.GetHealPenaltyAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Coulrophobia_GetHealPenaltyAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Coulrophobia_GetHealPenaltyAtLevel) == 0x000004, "Wrong alignment on Coulrophobia_GetHealPenaltyAtLevel");
static_assert(sizeof(Coulrophobia_GetHealPenaltyAtLevel) == 0x000004, "Wrong size on Coulrophobia_GetHealPenaltyAtLevel");
static_assert(offsetof(Coulrophobia_GetHealPenaltyAtLevel, ReturnValue) == 0x000000, "Member 'Coulrophobia_GetHealPenaltyAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DBDConditionFactory.CreateImposedStatusEffectCondition
// 0x0028 (0x0028 - 0x0000)
struct DBDConditionFactory_CreateImposedStatusEffectCondition final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UImposedStatusEffectCondition> ConditionType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UStatusEffect>              ClassType;                                         // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImposedStatusEffectCondition*          ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDConditionFactory_CreateImposedStatusEffectCondition) == 0x000008, "Wrong alignment on DBDConditionFactory_CreateImposedStatusEffectCondition");
static_assert(sizeof(DBDConditionFactory_CreateImposedStatusEffectCondition) == 0x000028, "Wrong size on DBDConditionFactory_CreateImposedStatusEffectCondition");
static_assert(offsetof(DBDConditionFactory_CreateImposedStatusEffectCondition, ConditionReceiver) == 0x000000, "Member 'DBDConditionFactory_CreateImposedStatusEffectCondition::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_CreateImposedStatusEffectCondition, ConditionType) == 0x000010, "Member 'DBDConditionFactory_CreateImposedStatusEffectCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_CreateImposedStatusEffectCondition, ClassType) == 0x000018, "Member 'DBDConditionFactory_CreateImposedStatusEffectCondition::ClassType' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_CreateImposedStatusEffectCondition, ReturnValue) == 0x000020, "Member 'DBDConditionFactory_CreateImposedStatusEffectCondition::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DBDConditionFactory.DoesPerkHaveToken
// 0x0020 (0x0020 - 0x0000)
struct DBDConditionFactory_DoesPerkHaveToken final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPerk*                                  Perk;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDoesPerkHaveToken*                     ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDConditionFactory_DoesPerkHaveToken) == 0x000008, "Wrong alignment on DBDConditionFactory_DoesPerkHaveToken");
static_assert(sizeof(DBDConditionFactory_DoesPerkHaveToken) == 0x000020, "Wrong size on DBDConditionFactory_DoesPerkHaveToken");
static_assert(offsetof(DBDConditionFactory_DoesPerkHaveToken, ConditionReceiver) == 0x000000, "Member 'DBDConditionFactory_DoesPerkHaveToken::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_DoesPerkHaveToken, Perk) == 0x000010, "Member 'DBDConditionFactory_DoesPerkHaveToken::Perk' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_DoesPerkHaveToken, ReturnValue) == 0x000018, "Member 'DBDConditionFactory_DoesPerkHaveToken::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DBDConditionFactory.HasTimerElapsedWhileConditionWasTrue
// 0x0020 (0x0020 - 0x0000)
struct DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimerObject*                           Timer;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimerElapsedCondition*                 ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue) == 0x000008, "Wrong alignment on DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue");
static_assert(sizeof(DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue) == 0x000020, "Wrong size on DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue");
static_assert(offsetof(DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue, ConditionReceiver) == 0x000000, "Member 'DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue, Timer) == 0x000010, "Member 'DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue::Timer' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue, ReturnValue) == 0x000018, "Member 'DBDConditionFactory_HasTimerElapsedWhileConditionWasTrue::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DBDConditionFactory.IsPlayerPerformingInteraction
// 0x0038 (0x0038 - 0x0000)
struct DBDConditionFactory_IsPlayerPerformingInteraction final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InteractionSemantics;                              // 0x0010(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UIsPlayerPerformingInteraction*         ReturnValue;                                       // 0x0030(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDConditionFactory_IsPlayerPerformingInteraction) == 0x000008, "Wrong alignment on DBDConditionFactory_IsPlayerPerformingInteraction");
static_assert(sizeof(DBDConditionFactory_IsPlayerPerformingInteraction) == 0x000038, "Wrong size on DBDConditionFactory_IsPlayerPerformingInteraction");
static_assert(offsetof(DBDConditionFactory_IsPlayerPerformingInteraction, ConditionReceiver) == 0x000000, "Member 'DBDConditionFactory_IsPlayerPerformingInteraction::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_IsPlayerPerformingInteraction, InteractionSemantics) == 0x000010, "Member 'DBDConditionFactory_IsPlayerPerformingInteraction::InteractionSemantics' has a wrong offset!");
static_assert(offsetof(DBDConditionFactory_IsPlayerPerformingInteraction, ReturnValue) == 0x000030, "Member 'DBDConditionFactory_IsPlayerPerformingInteraction::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DelayedHealEffect.Authority_OnOwningCamperHealthChanged
// 0x0002 (0x0002 - 0x0000)
struct DelayedHealEffect_Authority_OnOwningCamperHealthChanged final
{
public:
	ECamperDamageState                            before;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            After;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelayedHealEffect_Authority_OnOwningCamperHealthChanged) == 0x000001, "Wrong alignment on DelayedHealEffect_Authority_OnOwningCamperHealthChanged");
static_assert(sizeof(DelayedHealEffect_Authority_OnOwningCamperHealthChanged) == 0x000002, "Wrong size on DelayedHealEffect_Authority_OnOwningCamperHealthChanged");
static_assert(offsetof(DelayedHealEffect_Authority_OnOwningCamperHealthChanged, before) == 0x000000, "Member 'DelayedHealEffect_Authority_OnOwningCamperHealthChanged::before' has a wrong offset!");
static_assert(offsetof(DelayedHealEffect_Authority_OnOwningCamperHealthChanged, After) == 0x000001, "Member 'DelayedHealEffect_Authority_OnOwningCamperHealthChanged::After' has a wrong offset!");

// Function DBDCompetence.DelayedHealEffect.Authority_OnOwningCamperPickedUp
// 0x0008 (0x0008 - 0x0000)
struct DelayedHealEffect_Authority_OnOwningCamperPickedUp final
{
public:
	class ADBDPlayer*                             Picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DelayedHealEffect_Authority_OnOwningCamperPickedUp) == 0x000008, "Wrong alignment on DelayedHealEffect_Authority_OnOwningCamperPickedUp");
static_assert(sizeof(DelayedHealEffect_Authority_OnOwningCamperPickedUp) == 0x000008, "Wrong size on DelayedHealEffect_Authority_OnOwningCamperPickedUp");
static_assert(offsetof(DelayedHealEffect_Authority_OnOwningCamperPickedUp, Picker) == 0x000000, "Member 'DelayedHealEffect_Authority_OnOwningCamperPickedUp::Picker' has a wrong offset!");

// Function DBDCompetence.DiminishingReturnBaseEffect.Authority_OnOriginatingEffectApplicableChanged
// 0x0010 (0x0010 - 0x0000)
struct DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged final
{
public:
	class UGameplayModifierContainer*             GameplayModifierContainer;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_IsApplicable;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged) == 0x000008, "Wrong alignment on DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged");
static_assert(sizeof(DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged) == 0x000010, "Wrong size on DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged");
static_assert(offsetof(DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged, GameplayModifierContainer) == 0x000000, "Member 'DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged::GameplayModifierContainer' has a wrong offset!");
static_assert(offsetof(DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged, Param_IsApplicable) == 0x000008, "Member 'DiminishingReturnBaseEffect_Authority_OnOriginatingEffectApplicableChanged::Param_IsApplicable' has a wrong offset!");

// Function DBDCompetence.DiminishingReturnBaseEffect.Cosmetic_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct DiminishingReturnBaseEffect_Cosmetic_OnInRangeChanged final
{
public:
	bool                                          IsInRange;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiminishingReturnBaseEffect_Cosmetic_OnInRangeChanged) == 0x000001, "Wrong alignment on DiminishingReturnBaseEffect_Cosmetic_OnInRangeChanged");
static_assert(sizeof(DiminishingReturnBaseEffect_Cosmetic_OnInRangeChanged) == 0x000001, "Wrong size on DiminishingReturnBaseEffect_Cosmetic_OnInRangeChanged");
static_assert(offsetof(DiminishingReturnBaseEffect_Cosmetic_OnInRangeChanged, IsInRange) == 0x000000, "Member 'DiminishingReturnBaseEffect_Cosmetic_OnInRangeChanged::IsInRange' has a wrong offset!");

// Function DBDCompetence.DiminishingReturnBaseEffect.OnRep_OriginatingPlayersApplyingEffect
// 0x0010 (0x0010 - 0x0000)
struct DiminishingReturnBaseEffect_OnRep_OriginatingPlayersApplyingEffect final
{
public:
	TArray<class ADBDPlayer*>                     PreviousOriginatingPlayersApplyingEffect;          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiminishingReturnBaseEffect_OnRep_OriginatingPlayersApplyingEffect) == 0x000008, "Wrong alignment on DiminishingReturnBaseEffect_OnRep_OriginatingPlayersApplyingEffect");
static_assert(sizeof(DiminishingReturnBaseEffect_OnRep_OriginatingPlayersApplyingEffect) == 0x000010, "Wrong size on DiminishingReturnBaseEffect_OnRep_OriginatingPlayersApplyingEffect");
static_assert(offsetof(DiminishingReturnBaseEffect_OnRep_OriginatingPlayersApplyingEffect, PreviousOriginatingPlayersApplyingEffect) == 0x000000, "Member 'DiminishingReturnBaseEffect_OnRep_OriginatingPlayersApplyingEffect::PreviousOriginatingPlayersApplyingEffect' has a wrong offset!");

// Function DBDCompetence.Distortion.AuraBlockCanBeActive
// 0x0001 (0x0001 - 0x0000)
struct Distortion_AuraBlockCanBeActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Distortion_AuraBlockCanBeActive) == 0x000001, "Wrong alignment on Distortion_AuraBlockCanBeActive");
static_assert(sizeof(Distortion_AuraBlockCanBeActive) == 0x000001, "Wrong size on Distortion_AuraBlockCanBeActive");
static_assert(offsetof(Distortion_AuraBlockCanBeActive, ReturnValue) == 0x000000, "Member 'Distortion_AuraBlockCanBeActive::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Distortion.GetActivationDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Distortion_GetActivationDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Distortion_GetActivationDurationAtLevel) == 0x000004, "Wrong alignment on Distortion_GetActivationDurationAtLevel");
static_assert(sizeof(Distortion_GetActivationDurationAtLevel) == 0x000004, "Wrong size on Distortion_GetActivationDurationAtLevel");
static_assert(offsetof(Distortion_GetActivationDurationAtLevel, ReturnValue) == 0x000000, "Member 'Distortion_GetActivationDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Distortion.GetRegainTokenDurationTimer
// 0x0004 (0x0004 - 0x0000)
struct Distortion_GetRegainTokenDurationTimer final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Distortion_GetRegainTokenDurationTimer) == 0x000004, "Wrong alignment on Distortion_GetRegainTokenDurationTimer");
static_assert(sizeof(Distortion_GetRegainTokenDurationTimer) == 0x000004, "Wrong size on Distortion_GetRegainTokenDurationTimer");
static_assert(offsetof(Distortion_GetRegainTokenDurationTimer, ReturnValue) == 0x000000, "Member 'Distortion_GetRegainTokenDurationTimer::ReturnValue' has a wrong offset!");

// Function DBDCompetence.DoesPerkHaveToken.SetPerk
// 0x0008 (0x0008 - 0x0000)
struct DoesPerkHaveToken_SetPerk final
{
public:
	class UPerk*                                  Perk;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoesPerkHaveToken_SetPerk) == 0x000008, "Wrong alignment on DoesPerkHaveToken_SetPerk");
static_assert(sizeof(DoesPerkHaveToken_SetPerk) == 0x000008, "Wrong size on DoesPerkHaveToken_SetPerk");
static_assert(offsetof(DoesPerkHaveToken_SetPerk, Perk) == 0x000000, "Member 'DoesPerkHaveToken_SetPerk::Perk' has a wrong offset!");

// Function DBDCompetence.FlipFlop.Authority_OnPickedUp
// 0x0008 (0x0008 - 0x0000)
struct FlipFlop_Authority_OnPickedUp final
{
public:
	class ADBDPlayer*                             Picker;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlipFlop_Authority_OnPickedUp) == 0x000008, "Wrong alignment on FlipFlop_Authority_OnPickedUp");
static_assert(sizeof(FlipFlop_Authority_OnPickedUp) == 0x000008, "Wrong size on FlipFlop_Authority_OnPickedUp");
static_assert(offsetof(FlipFlop_Authority_OnPickedUp, Picker) == 0x000000, "Member 'FlipFlop_Authority_OnPickedUp::Picker' has a wrong offset!");

// Function DBDCompetence.FlipFlop.GetMaxWiggleProgressionAtLevel
// 0x0004 (0x0004 - 0x0000)
struct FlipFlop_GetMaxWiggleProgressionAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlipFlop_GetMaxWiggleProgressionAtLevel) == 0x000004, "Wrong alignment on FlipFlop_GetMaxWiggleProgressionAtLevel");
static_assert(sizeof(FlipFlop_GetMaxWiggleProgressionAtLevel) == 0x000004, "Wrong size on FlipFlop_GetMaxWiggleProgressionAtLevel");
static_assert(offsetof(FlipFlop_GetMaxWiggleProgressionAtLevel, ReturnValue) == 0x000000, "Member 'FlipFlop_GetMaxWiggleProgressionAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.FlipFlop.GetRecoveryProgressionAtLevel
// 0x0004 (0x0004 - 0x0000)
struct FlipFlop_GetRecoveryProgressionAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlipFlop_GetRecoveryProgressionAtLevel) == 0x000004, "Wrong alignment on FlipFlop_GetRecoveryProgressionAtLevel");
static_assert(sizeof(FlipFlop_GetRecoveryProgressionAtLevel) == 0x000004, "Wrong size on FlipFlop_GetRecoveryProgressionAtLevel");
static_assert(offsetof(FlipFlop_GetRecoveryProgressionAtLevel, ReturnValue) == 0x000000, "Member 'FlipFlop_GetRecoveryProgressionAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.FurtiveChase.GetHasteStatusEffectPercent
// 0x0004 (0x0004 - 0x0000)
struct FurtiveChase_GetHasteStatusEffectPercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FurtiveChase_GetHasteStatusEffectPercent) == 0x000004, "Wrong alignment on FurtiveChase_GetHasteStatusEffectPercent");
static_assert(sizeof(FurtiveChase_GetHasteStatusEffectPercent) == 0x000004, "Wrong size on FurtiveChase_GetHasteStatusEffectPercent");
static_assert(offsetof(FurtiveChase_GetHasteStatusEffectPercent, ReturnValue) == 0x000000, "Member 'FurtiveChase_GetHasteStatusEffectPercent::ReturnValue' has a wrong offset!");

// Function DBDCompetence.FurtiveChase.GetUndetectableAndHasteStatusEffectDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct FurtiveChase_GetUndetectableAndHasteStatusEffectDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FurtiveChase_GetUndetectableAndHasteStatusEffectDurationAtLevel) == 0x000004, "Wrong alignment on FurtiveChase_GetUndetectableAndHasteStatusEffectDurationAtLevel");
static_assert(sizeof(FurtiveChase_GetUndetectableAndHasteStatusEffectDurationAtLevel) == 0x000004, "Wrong size on FurtiveChase_GetUndetectableAndHasteStatusEffectDurationAtLevel");
static_assert(offsetof(FurtiveChase_GetUndetectableAndHasteStatusEffectDurationAtLevel, ReturnValue) == 0x000000, "Member 'FurtiveChase_GetUndetectableAndHasteStatusEffectDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HasItemOfTypeEquippedNoCharge.OnItemChargeStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HasItemOfTypeEquippedNoCharge_OnItemChargeStateChanged final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasItemOfTypeEquippedNoCharge_OnItemChargeStateChanged) == 0x000001, "Wrong alignment on HasItemOfTypeEquippedNoCharge_OnItemChargeStateChanged");
static_assert(sizeof(HasItemOfTypeEquippedNoCharge_OnItemChargeStateChanged) == 0x000001, "Wrong size on HasItemOfTypeEquippedNoCharge_OnItemChargeStateChanged");
static_assert(offsetof(HasItemOfTypeEquippedNoCharge_OnItemChargeStateChanged, IsEmpty) == 0x000000, "Member 'HasItemOfTypeEquippedNoCharge_OnItemChargeStateChanged::IsEmpty' has a wrong offset!");

// Function DBDCompetence.HasItemOfTypeInInventoryNoCharge.OnItemChargeStateChanged
// 0x0001 (0x0001 - 0x0000)
struct HasItemOfTypeInInventoryNoCharge_OnItemChargeStateChanged final
{
public:
	bool                                          IsEmpty;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasItemOfTypeInInventoryNoCharge_OnItemChargeStateChanged) == 0x000001, "Wrong alignment on HasItemOfTypeInInventoryNoCharge_OnItemChargeStateChanged");
static_assert(sizeof(HasItemOfTypeInInventoryNoCharge_OnItemChargeStateChanged) == 0x000001, "Wrong size on HasItemOfTypeInInventoryNoCharge_OnItemChargeStateChanged");
static_assert(offsetof(HasItemOfTypeInInventoryNoCharge_OnItemChargeStateChanged, IsEmpty) == 0x000000, "Member 'HasItemOfTypeInInventoryNoCharge_OnItemChargeStateChanged::IsEmpty' has a wrong offset!");

// Function DBDCompetence.HasPlayerReachedWiggleFillPercentCondition.Authority_OnOwnerWiggleChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged) == 0x000008, "Wrong alignment on HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged");
static_assert(sizeof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged) == 0x000010, "Wrong size on HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged");
static_assert(offsetof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged, ChargeableComponent) == 0x000000, "Member 'HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged, PercentCompletionChange) == 0x000008, "Member 'HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged, TotalPercentComplete) == 0x00000C, "Member 'HasPlayerReachedWiggleFillPercentCondition_Authority_OnOwnerWiggleChargePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function DBDCompetence.HeadOn.Multicast_TriggerStunOnActor
// 0x0010 (0x0010 - 0x0000)
struct HeadOn_Multicast_TriggerStunOnActor final
{
public:
	class UObject*                                StunnableInterfaceUObject;                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Stunner;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadOn_Multicast_TriggerStunOnActor) == 0x000008, "Wrong alignment on HeadOn_Multicast_TriggerStunOnActor");
static_assert(sizeof(HeadOn_Multicast_TriggerStunOnActor) == 0x000010, "Wrong size on HeadOn_Multicast_TriggerStunOnActor");
static_assert(offsetof(HeadOn_Multicast_TriggerStunOnActor, StunnableInterfaceUObject) == 0x000000, "Member 'HeadOn_Multicast_TriggerStunOnActor::StunnableInterfaceUObject' has a wrong offset!");
static_assert(offsetof(HeadOn_Multicast_TriggerStunOnActor, Stunner) == 0x000008, "Member 'HeadOn_Multicast_TriggerStunOnActor::Stunner' has a wrong offset!");

// Function DBDCompetence.HeadOn.OnPawnOverlapEnter
// 0x0110 (0x0110 - 0x0000)
struct HeadOn_OnPawnOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadOn_OnPawnOverlapEnter) == 0x000008, "Wrong alignment on HeadOn_OnPawnOverlapEnter");
static_assert(sizeof(HeadOn_OnPawnOverlapEnter) == 0x000110, "Wrong size on HeadOn_OnPawnOverlapEnter");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, HitComponent) == 0x000000, "Member 'HeadOn_OnPawnOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, OtherActor) == 0x000008, "Member 'HeadOn_OnPawnOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, OtherComp) == 0x000010, "Member 'HeadOn_OnPawnOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'HeadOn_OnPawnOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, bFromSweep) == 0x00001C, "Member 'HeadOn_OnPawnOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapEnter, SweepResult) == 0x000020, "Member 'HeadOn_OnPawnOverlapEnter::SweepResult' has a wrong offset!");

// Function DBDCompetence.HeadOn.OnPawnOverlapExit
// 0x0020 (0x0020 - 0x0000)
struct HeadOn_OnPawnOverlapExit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HeadOn_OnPawnOverlapExit) == 0x000008, "Wrong alignment on HeadOn_OnPawnOverlapExit");
static_assert(sizeof(HeadOn_OnPawnOverlapExit) == 0x000020, "Wrong size on HeadOn_OnPawnOverlapExit");
static_assert(offsetof(HeadOn_OnPawnOverlapExit, HitComponent) == 0x000000, "Member 'HeadOn_OnPawnOverlapExit::HitComponent' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapExit, OtherActor) == 0x000008, "Member 'HeadOn_OnPawnOverlapExit::OtherActor' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapExit, OtherComp) == 0x000010, "Member 'HeadOn_OnPawnOverlapExit::OtherComp' has a wrong offset!");
static_assert(offsetof(HeadOn_OnPawnOverlapExit, OtherBodyIndex) == 0x000018, "Member 'HeadOn_OnPawnOverlapExit::OtherBodyIndex' has a wrong offset!");

// Function DBDCompetence.HeadOn.CanApplyHeadOnInteraction
// 0x0001 (0x0001 - 0x0000)
struct HeadOn_CanApplyHeadOnInteraction final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadOn_CanApplyHeadOnInteraction) == 0x000001, "Wrong alignment on HeadOn_CanApplyHeadOnInteraction");
static_assert(sizeof(HeadOn_CanApplyHeadOnInteraction) == 0x000001, "Wrong size on HeadOn_CanApplyHeadOnInteraction");
static_assert(offsetof(HeadOn_CanApplyHeadOnInteraction, ReturnValue) == 0x000000, "Member 'HeadOn_CanApplyHeadOnInteraction::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HeadOn.GetHideDuration
// 0x0004 (0x0004 - 0x0000)
struct HeadOn_GetHideDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HeadOn_GetHideDuration) == 0x000004, "Wrong alignment on HeadOn_GetHideDuration");
static_assert(sizeof(HeadOn_GetHideDuration) == 0x000004, "Wrong size on HeadOn_GetHideDuration");
static_assert(offsetof(HeadOn_GetHideDuration, ReturnValue) == 0x000000, "Member 'HeadOn_GetHideDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HexDevourHope.GetMoveSpeedIncrement
// 0x0008 (0x0008 - 0x0000)
struct HexDevourHope_GetMoveSpeedIncrement final
{
public:
	int32                                         PerkLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexDevourHope_GetMoveSpeedIncrement) == 0x000004, "Wrong alignment on HexDevourHope_GetMoveSpeedIncrement");
static_assert(sizeof(HexDevourHope_GetMoveSpeedIncrement) == 0x000008, "Wrong size on HexDevourHope_GetMoveSpeedIncrement");
static_assert(offsetof(HexDevourHope_GetMoveSpeedIncrement, PerkLevel) == 0x000000, "Member 'HexDevourHope_GetMoveSpeedIncrement::PerkLevel' has a wrong offset!");
static_assert(offsetof(HexDevourHope_GetMoveSpeedIncrement, ReturnValue) == 0x000004, "Member 'HexDevourHope_GetMoveSpeedIncrement::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HexDevourHope.GetRangeFromUnhookedSurvivorNeeded
// 0x0008 (0x0008 - 0x0000)
struct HexDevourHope_GetRangeFromUnhookedSurvivorNeeded final
{
public:
	int32                                         PerkLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexDevourHope_GetRangeFromUnhookedSurvivorNeeded) == 0x000004, "Wrong alignment on HexDevourHope_GetRangeFromUnhookedSurvivorNeeded");
static_assert(sizeof(HexDevourHope_GetRangeFromUnhookedSurvivorNeeded) == 0x000008, "Wrong size on HexDevourHope_GetRangeFromUnhookedSurvivorNeeded");
static_assert(offsetof(HexDevourHope_GetRangeFromUnhookedSurvivorNeeded, PerkLevel) == 0x000000, "Member 'HexDevourHope_GetRangeFromUnhookedSurvivorNeeded::PerkLevel' has a wrong offset!");
static_assert(offsetof(HexDevourHope_GetRangeFromUnhookedSurvivorNeeded, ReturnValue) == 0x000004, "Member 'HexDevourHope_GetRangeFromUnhookedSurvivorNeeded::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HexHauntedGround.GetExposedDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct HexHauntedGround_GetExposedDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexHauntedGround_GetExposedDurationAtLevel) == 0x000004, "Wrong alignment on HexHauntedGround_GetExposedDurationAtLevel");
static_assert(sizeof(HexHauntedGround_GetExposedDurationAtLevel) == 0x000004, "Wrong size on HexHauntedGround_GetExposedDurationAtLevel");
static_assert(offsetof(HexHauntedGround_GetExposedDurationAtLevel, ReturnValue) == 0x000000, "Member 'HexHauntedGround_GetExposedDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HexNoOneEscapesDeath.GetHasteAtLevel
// 0x0004 (0x0004 - 0x0000)
struct HexNoOneEscapesDeath_GetHasteAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexNoOneEscapesDeath_GetHasteAtLevel) == 0x000004, "Wrong alignment on HexNoOneEscapesDeath_GetHasteAtLevel");
static_assert(sizeof(HexNoOneEscapesDeath_GetHasteAtLevel) == 0x000004, "Wrong size on HexNoOneEscapesDeath_GetHasteAtLevel");
static_assert(offsetof(HexNoOneEscapesDeath_GetHasteAtLevel, ReturnValue) == 0x000000, "Member 'HexNoOneEscapesDeath_GetHasteAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HexRuin.GetRegressionModifierByLevel
// 0x0008 (0x0008 - 0x0000)
struct HexRuin_GetRegressionModifierByLevel final
{
public:
	int32                                         PerkLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexRuin_GetRegressionModifierByLevel) == 0x000004, "Wrong alignment on HexRuin_GetRegressionModifierByLevel");
static_assert(sizeof(HexRuin_GetRegressionModifierByLevel) == 0x000008, "Wrong size on HexRuin_GetRegressionModifierByLevel");
static_assert(offsetof(HexRuin_GetRegressionModifierByLevel, PerkLevel) == 0x000000, "Member 'HexRuin_GetRegressionModifierByLevel::PerkLevel' has a wrong offset!");
static_assert(offsetof(HexRuin_GetRegressionModifierByLevel, ReturnValue) == 0x000004, "Member 'HexRuin_GetRegressionModifierByLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HexThrillOfTheHuntStatusEffect.GetSpeedPenaltyPercents
// 0x0008 (0x0008 - 0x0000)
struct HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents final
{
public:
	int32                                         TierLevel;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents) == 0x000004, "Wrong alignment on HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents");
static_assert(sizeof(HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents) == 0x000008, "Wrong size on HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents");
static_assert(offsetof(HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents, TierLevel) == 0x000000, "Member 'HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents::TierLevel' has a wrong offset!");
static_assert(offsetof(HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents, ReturnValue) == 0x000004, "Member 'HexThrillOfTheHuntStatusEffect_GetSpeedPenaltyPercents::ReturnValue' has a wrong offset!");

// Function DBDCompetence.HopePerk.GetHasteEffectAtLevel
// 0x0004 (0x0004 - 0x0000)
struct HopePerk_GetHasteEffectAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HopePerk_GetHasteEffectAtLevel) == 0x000004, "Wrong alignment on HopePerk_GetHasteEffectAtLevel");
static_assert(sizeof(HopePerk_GetHasteEffectAtLevel) == 0x000004, "Wrong size on HopePerk_GetHasteEffectAtLevel");
static_assert(offsetof(HopePerk_GetHasteEffectAtLevel, ReturnValue) == 0x000000, "Member 'HopePerk_GetHasteEffectAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ImAllEars.GetCooldownAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ImAllEars_GetCooldownAtLevel final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImAllEars_GetCooldownAtLevel) == 0x000004, "Wrong alignment on ImAllEars_GetCooldownAtLevel");
static_assert(sizeof(ImAllEars_GetCooldownAtLevel) == 0x000004, "Wrong size on ImAllEars_GetCooldownAtLevel");
static_assert(offsetof(ImAllEars_GetCooldownAtLevel, ReturnValue) == 0x000000, "Member 'ImAllEars_GetCooldownAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ImAllEars.GetDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct ImAllEars_GetDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImAllEars_GetDurationAtLevel) == 0x000004, "Wrong alignment on ImAllEars_GetDurationAtLevel");
static_assert(sizeof(ImAllEars_GetDurationAtLevel) == 0x000004, "Wrong size on ImAllEars_GetDurationAtLevel");
static_assert(offsetof(ImAllEars_GetDurationAtLevel, ReturnValue) == 0x000000, "Member 'ImAllEars_GetDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ImAllEars.Server_OnCamperLoudNoise
// 0x0040 (0x0040 - 0x0000)
struct ImAllEars_Server_OnCamperLoudNoise final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImAllEars_Server_OnCamperLoudNoise) == 0x000008, "Wrong alignment on ImAllEars_Server_OnCamperLoudNoise");
static_assert(sizeof(ImAllEars_Server_OnCamperLoudNoise) == 0x000040, "Wrong size on ImAllEars_Server_OnCamperLoudNoise");
static_assert(offsetof(ImAllEars_Server_OnCamperLoudNoise, GameplayTag) == 0x000000, "Member 'ImAllEars_Server_OnCamperLoudNoise::GameplayTag' has a wrong offset!");
static_assert(offsetof(ImAllEars_Server_OnCamperLoudNoise, GameEventData) == 0x000010, "Member 'ImAllEars_Server_OnCamperLoudNoise::GameEventData' has a wrong offset!");

// Function DBDCompetence.ImposeStatusEffectOnMultiEventAddon.Authority_OnEventFired
// 0x0040 (0x0040 - 0x0000)
struct ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired final
{
public:
	struct FGameplayTag                           GameEventTag;                                      // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired) == 0x000008, "Wrong alignment on ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired");
static_assert(sizeof(ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired) == 0x000040, "Wrong size on ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired");
static_assert(offsetof(ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired, GameEventTag) == 0x000000, "Member 'ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired::GameEventTag' has a wrong offset!");
static_assert(offsetof(ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired, GameEventData) == 0x000010, "Member 'ImposeStatusEffectOnMultiEventAddon_Authority_OnEventFired::GameEventData' has a wrong offset!");

// Function DBDCompetence.InnerStrength.Authority_OnPlayerImmobilizeStateChanged
// 0x0002 (0x0002 - 0x0000)
struct InnerStrength_Authority_OnPlayerImmobilizeStateChanged final
{
public:
	EImmobilizedState                             OldImmobilizeState;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EImmobilizedState                             NewImmobilizeState;                                // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InnerStrength_Authority_OnPlayerImmobilizeStateChanged) == 0x000001, "Wrong alignment on InnerStrength_Authority_OnPlayerImmobilizeStateChanged");
static_assert(sizeof(InnerStrength_Authority_OnPlayerImmobilizeStateChanged) == 0x000002, "Wrong size on InnerStrength_Authority_OnPlayerImmobilizeStateChanged");
static_assert(offsetof(InnerStrength_Authority_OnPlayerImmobilizeStateChanged, OldImmobilizeState) == 0x000000, "Member 'InnerStrength_Authority_OnPlayerImmobilizeStateChanged::OldImmobilizeState' has a wrong offset!");
static_assert(offsetof(InnerStrength_Authority_OnPlayerImmobilizeStateChanged, NewImmobilizeState) == 0x000001, "Member 'InnerStrength_Authority_OnPlayerImmobilizeStateChanged::NewImmobilizeState' has a wrong offset!");

// Function DBDCompetence.InnerStrength.GetHideDuration
// 0x0004 (0x0004 - 0x0000)
struct InnerStrength_GetHideDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InnerStrength_GetHideDuration) == 0x000004, "Wrong alignment on InnerStrength_GetHideDuration");
static_assert(sizeof(InnerStrength_GetHideDuration) == 0x000004, "Wrong size on InnerStrength_GetHideDuration");
static_assert(offsetof(InnerStrength_GetHideDuration, ReturnValue) == 0x000000, "Member 'InnerStrength_GetHideDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Insidious.GetStillnessRequiredAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Insidious_GetStillnessRequiredAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Insidious_GetStillnessRequiredAtLevel) == 0x000004, "Wrong alignment on Insidious_GetStillnessRequiredAtLevel");
static_assert(sizeof(Insidious_GetStillnessRequiredAtLevel) == 0x000004, "Wrong size on Insidious_GetStillnessRequiredAtLevel");
static_assert(offsetof(Insidious_GetStillnessRequiredAtLevel, ReturnValue) == 0x000000, "Member 'Insidious_GetStillnessRequiredAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.IsChasingInjuredSurvivor.OnChasedSurvivorDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged final
{
public:
	ECamperDamageState                            OldState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            NewState;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged) == 0x000001, "Wrong alignment on IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged");
static_assert(sizeof(IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged) == 0x000002, "Wrong size on IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged");
static_assert(offsetof(IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged, OldState) == 0x000000, "Member 'IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged, NewState) == 0x000001, "Member 'IsChasingInjuredSurvivor_OnChasedSurvivorDamageStateChanged::NewState' has a wrong offset!");

// Function DBDCompetence.IsChasingInjuredSurvivor.OnChaseEnd
// 0x0010 (0x0010 - 0x0000)
struct IsChasingInjuredSurvivor_OnChaseEnd final
{
public:
	class ADBDPlayer*                             ChasedSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IsChasingInjuredSurvivor_OnChaseEnd) == 0x000008, "Wrong alignment on IsChasingInjuredSurvivor_OnChaseEnd");
static_assert(sizeof(IsChasingInjuredSurvivor_OnChaseEnd) == 0x000010, "Wrong size on IsChasingInjuredSurvivor_OnChaseEnd");
static_assert(offsetof(IsChasingInjuredSurvivor_OnChaseEnd, ChasedSurvivor) == 0x000000, "Member 'IsChasingInjuredSurvivor_OnChaseEnd::ChasedSurvivor' has a wrong offset!");
static_assert(offsetof(IsChasingInjuredSurvivor_OnChaseEnd, ChaseTime) == 0x000008, "Member 'IsChasingInjuredSurvivor_OnChaseEnd::ChaseTime' has a wrong offset!");

// Function DBDCompetence.IsChasingInjuredSurvivor.OnChaseStart
// 0x0008 (0x0008 - 0x0000)
struct IsChasingInjuredSurvivor_OnChaseStart final
{
public:
	class ADBDPlayer*                             ChasedSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsChasingInjuredSurvivor_OnChaseStart) == 0x000008, "Wrong alignment on IsChasingInjuredSurvivor_OnChaseStart");
static_assert(sizeof(IsChasingInjuredSurvivor_OnChaseStart) == 0x000008, "Wrong size on IsChasingInjuredSurvivor_OnChaseStart");
static_assert(offsetof(IsChasingInjuredSurvivor_OnChaseStart, ChasedSurvivor) == 0x000000, "Member 'IsChasingInjuredSurvivor_OnChaseStart::ChasedSurvivor' has a wrong offset!");

// Function DBDCompetence.IsHighestTierOriginatingPerk.OnStatusEffectAddedOrRemoved
// 0x0010 (0x0010 - 0x0000)
struct IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved final
{
public:
	class UStatusEffect*                          Effect;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Valid;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved) == 0x000008, "Wrong alignment on IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved");
static_assert(sizeof(IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved) == 0x000010, "Wrong size on IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved");
static_assert(offsetof(IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved, Effect) == 0x000000, "Member 'IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved::Effect' has a wrong offset!");
static_assert(offsetof(IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved, Valid) == 0x000008, "Member 'IsHighestTierOriginatingPerk_OnStatusEffectAddedOrRemoved::Valid' has a wrong offset!");

// Function DBDCompetence.IsHighestTierOriginatingPerk.OnStatusEffectApplicableChanged
// 0x0010 (0x0010 - 0x0000)
struct IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged final
{
public:
	class UGameplayModifierContainer*             GameplayModifierContainer;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsApplicable;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged) == 0x000008, "Wrong alignment on IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged");
static_assert(sizeof(IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged) == 0x000010, "Wrong size on IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged");
static_assert(offsetof(IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged, GameplayModifierContainer) == 0x000000, "Member 'IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged::GameplayModifierContainer' has a wrong offset!");
static_assert(offsetof(IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged, IsApplicable) == 0x000008, "Member 'IsHighestTierOriginatingPerk_OnStatusEffectApplicableChanged::IsApplicable' has a wrong offset!");

// Function DBDCompetence.IsOriginatingPerkBoundToTotems.Init
// 0x0008 (0x0008 - 0x0000)
struct IsOriginatingPerkBoundToTotems_Init final
{
public:
	EComparisonOperation                          ComparisonOperator;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotemCount;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsOriginatingPerkBoundToTotems_Init) == 0x000004, "Wrong alignment on IsOriginatingPerkBoundToTotems_Init");
static_assert(sizeof(IsOriginatingPerkBoundToTotems_Init) == 0x000008, "Wrong size on IsOriginatingPerkBoundToTotems_Init");
static_assert(offsetof(IsOriginatingPerkBoundToTotems_Init, ComparisonOperator) == 0x000000, "Member 'IsOriginatingPerkBoundToTotems_Init::ComparisonOperator' has a wrong offset!");
static_assert(offsetof(IsOriginatingPerkBoundToTotems_Init, TotemCount) == 0x000004, "Member 'IsOriginatingPerkBoundToTotems_Init::TotemCount' has a wrong offset!");

// Function DBDCompetence.IsPlayerPerfInteractionWithNoItem.OnCollectableChargeStateChange
// 0x0001 (0x0001 - 0x0000)
struct IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange final
{
public:
	bool                                          Empty;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange) == 0x000001, "Wrong alignment on IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange");
static_assert(sizeof(IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange) == 0x000001, "Wrong size on IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange");
static_assert(offsetof(IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange, Empty) == 0x000000, "Member 'IsPlayerPerfInteractionWithNoItem_OnCollectableChargeStateChange::Empty' has a wrong offset!");

// Function DBDCompetence.IsPlayerRunningAndMoving.OnRunningAndMovingChanged
// 0x0001 (0x0001 - 0x0000)
struct IsPlayerRunningAndMoving_OnRunningAndMovingChanged final
{
public:
	bool                                          IsRunningAndMoving;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsPlayerRunningAndMoving_OnRunningAndMovingChanged) == 0x000001, "Wrong alignment on IsPlayerRunningAndMoving_OnRunningAndMovingChanged");
static_assert(sizeof(IsPlayerRunningAndMoving_OnRunningAndMovingChanged) == 0x000001, "Wrong size on IsPlayerRunningAndMoving_OnRunningAndMovingChanged");
static_assert(offsetof(IsPlayerRunningAndMoving_OnRunningAndMovingChanged, IsRunningAndMoving) == 0x000000, "Member 'IsPlayerRunningAndMoving_OnRunningAndMovingChanged::IsRunningAndMoving' has a wrong offset!");

// Function DBDCompetence.KillerSubjectProvider.RegisterWhenKillerSet
// 0x0008 (0x0008 - 0x0000)
struct KillerSubjectProvider_RegisterWhenKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerSubjectProvider_RegisterWhenKillerSet) == 0x000008, "Wrong alignment on KillerSubjectProvider_RegisterWhenKillerSet");
static_assert(sizeof(KillerSubjectProvider_RegisterWhenKillerSet) == 0x000008, "Wrong size on KillerSubjectProvider_RegisterWhenKillerSet");
static_assert(offsetof(KillerSubjectProvider_RegisterWhenKillerSet, Killer) == 0x000000, "Member 'KillerSubjectProvider_RegisterWhenKillerSet::Killer' has a wrong offset!");

// Function DBDCompetence.LingeringBlessedStatusEffect.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct LingeringBlessedStatusEffect_Authority_OnInRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LingeringBlessedStatusEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on LingeringBlessedStatusEffect_Authority_OnInRangeChanged");
static_assert(sizeof(LingeringBlessedStatusEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong size on LingeringBlessedStatusEffect_Authority_OnInRangeChanged");
static_assert(offsetof(LingeringBlessedStatusEffect_Authority_OnInRangeChanged, InRange) == 0x000000, "Member 'LingeringBlessedStatusEffect_Authority_OnInRangeChanged::InRange' has a wrong offset!");

// Function DBDCompetence.LingeringBlessedStatusEffect.SetLingerDuration
// 0x0004 (0x0004 - 0x0000)
struct LingeringBlessedStatusEffect_SetLingerDuration final
{
public:
	float                                         LingerDuration;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LingeringBlessedStatusEffect_SetLingerDuration) == 0x000004, "Wrong alignment on LingeringBlessedStatusEffect_SetLingerDuration");
static_assert(sizeof(LingeringBlessedStatusEffect_SetLingerDuration) == 0x000004, "Wrong size on LingeringBlessedStatusEffect_SetLingerDuration");
static_assert(offsetof(LingeringBlessedStatusEffect_SetLingerDuration, LingerDuration) == 0x000000, "Member 'LingeringBlessedStatusEffect_SetLingerDuration::LingerDuration' has a wrong offset!");

// Function DBDCompetence.LuckyBreak.Authority_OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct LuckyBreak_Authority_OnDamageStateChanged final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            CurrentDamageState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuckyBreak_Authority_OnDamageStateChanged) == 0x000001, "Wrong alignment on LuckyBreak_Authority_OnDamageStateChanged");
static_assert(sizeof(LuckyBreak_Authority_OnDamageStateChanged) == 0x000002, "Wrong size on LuckyBreak_Authority_OnDamageStateChanged");
static_assert(offsetof(LuckyBreak_Authority_OnDamageStateChanged, OldDamageState) == 0x000000, "Member 'LuckyBreak_Authority_OnDamageStateChanged::OldDamageState' has a wrong offset!");
static_assert(offsetof(LuckyBreak_Authority_OnDamageStateChanged, CurrentDamageState) == 0x000001, "Member 'LuckyBreak_Authority_OnDamageStateChanged::CurrentDamageState' has a wrong offset!");

// Function DBDCompetence.LuckyBreak.GetHealingTimeToActivationTimeRatio
// 0x0004 (0x0004 - 0x0000)
struct LuckyBreak_GetHealingTimeToActivationTimeRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuckyBreak_GetHealingTimeToActivationTimeRatio) == 0x000004, "Wrong alignment on LuckyBreak_GetHealingTimeToActivationTimeRatio");
static_assert(sizeof(LuckyBreak_GetHealingTimeToActivationTimeRatio) == 0x000004, "Wrong size on LuckyBreak_GetHealingTimeToActivationTimeRatio");
static_assert(offsetof(LuckyBreak_GetHealingTimeToActivationTimeRatio, ReturnValue) == 0x000000, "Member 'LuckyBreak_GetHealingTimeToActivationTimeRatio::ReturnValue' has a wrong offset!");

// Function DBDCompetence.LuckyBreak.GetMaxActivationTimeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct LuckyBreak_GetMaxActivationTimeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuckyBreak_GetMaxActivationTimeAtLevel) == 0x000004, "Wrong alignment on LuckyBreak_GetMaxActivationTimeAtLevel");
static_assert(sizeof(LuckyBreak_GetMaxActivationTimeAtLevel) == 0x000004, "Wrong size on LuckyBreak_GetMaxActivationTimeAtLevel");
static_assert(offsetof(LuckyBreak_GetMaxActivationTimeAtLevel, ReturnValue) == 0x000000, "Member 'LuckyBreak_GetMaxActivationTimeAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.LuckyBreak.GetMinActivationTime
// 0x0004 (0x0004 - 0x0000)
struct LuckyBreak_GetMinActivationTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LuckyBreak_GetMinActivationTime) == 0x000004, "Wrong alignment on LuckyBreak_GetMinActivationTime");
static_assert(sizeof(LuckyBreak_GetMinActivationTime) == 0x000004, "Wrong size on LuckyBreak_GetMinActivationTime");
static_assert(offsetof(LuckyBreak_GetMinActivationTime, ReturnValue) == 0x000000, "Member 'LuckyBreak_GetMinActivationTime::ReturnValue' has a wrong offset!");

// Function DBDCompetence.MakeYourChoice.Cosmetic_OnTriggerEffectVFX
// 0x0008 (0x0008 - 0x0000)
struct MakeYourChoice_Cosmetic_OnTriggerEffectVFX final
{
public:
	const class ACamperPlayer*                    Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MakeYourChoice_Cosmetic_OnTriggerEffectVFX) == 0x000008, "Wrong alignment on MakeYourChoice_Cosmetic_OnTriggerEffectVFX");
static_assert(sizeof(MakeYourChoice_Cosmetic_OnTriggerEffectVFX) == 0x000008, "Wrong size on MakeYourChoice_Cosmetic_OnTriggerEffectVFX");
static_assert(offsetof(MakeYourChoice_Cosmetic_OnTriggerEffectVFX, Player) == 0x000000, "Member 'MakeYourChoice_Cosmetic_OnTriggerEffectVFX::Player' has a wrong offset!");

// Function DBDCompetence.MakeYourChoice.Multicast_TriggerEffectAppliedVFX
// 0x0008 (0x0008 - 0x0000)
struct MakeYourChoice_Multicast_TriggerEffectAppliedVFX final
{
public:
	const class ACamperPlayer*                    Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MakeYourChoice_Multicast_TriggerEffectAppliedVFX) == 0x000008, "Wrong alignment on MakeYourChoice_Multicast_TriggerEffectAppliedVFX");
static_assert(sizeof(MakeYourChoice_Multicast_TriggerEffectAppliedVFX) == 0x000008, "Wrong size on MakeYourChoice_Multicast_TriggerEffectAppliedVFX");
static_assert(offsetof(MakeYourChoice_Multicast_TriggerEffectAppliedVFX, Player) == 0x000000, "Member 'MakeYourChoice_Multicast_TriggerEffectAppliedVFX::Player' has a wrong offset!");

// Function DBDCompetence.MakeYourChoice.GetMinimumHookedSurvivorDistance
// 0x0004 (0x0004 - 0x0000)
struct MakeYourChoice_GetMinimumHookedSurvivorDistance final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MakeYourChoice_GetMinimumHookedSurvivorDistance) == 0x000004, "Wrong alignment on MakeYourChoice_GetMinimumHookedSurvivorDistance");
static_assert(sizeof(MakeYourChoice_GetMinimumHookedSurvivorDistance) == 0x000004, "Wrong size on MakeYourChoice_GetMinimumHookedSurvivorDistance");
static_assert(offsetof(MakeYourChoice_GetMinimumHookedSurvivorDistance, ReturnValue) == 0x000000, "Member 'MakeYourChoice_GetMinimumHookedSurvivorDistance::ReturnValue' has a wrong offset!");

// Function DBDCompetence.MindBreaker.GetEffectDurationAfterRepairAtLevel
// 0x0004 (0x0004 - 0x0000)
struct MindBreaker_GetEffectDurationAfterRepairAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MindBreaker_GetEffectDurationAfterRepairAtLevel) == 0x000004, "Wrong alignment on MindBreaker_GetEffectDurationAfterRepairAtLevel");
static_assert(sizeof(MindBreaker_GetEffectDurationAfterRepairAtLevel) == 0x000004, "Wrong size on MindBreaker_GetEffectDurationAfterRepairAtLevel");
static_assert(offsetof(MindBreaker_GetEffectDurationAfterRepairAtLevel, ReturnValue) == 0x000000, "Member 'MindBreaker_GetEffectDurationAfterRepairAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.MonstrousShrine.Authority_OnSurvivorHookedOnScourgeHook
// 0x0030 (0x0030 - 0x0000)
struct MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook final
{
public:
	struct FGameEventData                         GameEventData;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook) == 0x000008, "Wrong alignment on MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook");
static_assert(sizeof(MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook) == 0x000030, "Wrong size on MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook");
static_assert(offsetof(MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook, GameEventData) == 0x000000, "Member 'MonstrousShrine_Authority_OnSurvivorHookedOnScourgeHook::GameEventData' has a wrong offset!");

// Function DBDCompetence.MonstrousShrine.Authority_OnSurvivorUnhookedOnScourgeHook
// 0x0030 (0x0030 - 0x0000)
struct MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook final
{
public:
	struct FGameEventData                         GameEventData;                                     // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook) == 0x000008, "Wrong alignment on MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook");
static_assert(sizeof(MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook) == 0x000030, "Wrong size on MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook");
static_assert(offsetof(MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook, GameEventData) == 0x000000, "Member 'MonstrousShrine_Authority_OnSurvivorUnhookedOnScourgeHook::GameEventData' has a wrong offset!");

// Function DBDCompetence.MonstrousShrine.GetFasterDrainPercentageAtLevel
// 0x0004 (0x0004 - 0x0000)
struct MonstrousShrine_GetFasterDrainPercentageAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MonstrousShrine_GetFasterDrainPercentageAtLevel) == 0x000004, "Wrong alignment on MonstrousShrine_GetFasterDrainPercentageAtLevel");
static_assert(sizeof(MonstrousShrine_GetFasterDrainPercentageAtLevel) == 0x000004, "Wrong size on MonstrousShrine_GetFasterDrainPercentageAtLevel");
static_assert(offsetof(MonstrousShrine_GetFasterDrainPercentageAtLevel, ReturnValue) == 0x000000, "Member 'MonstrousShrine_GetFasterDrainPercentageAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.NoOneLeftBehind.Authority_OnExitGatePoweredApplicableChanged
// 0x0010 (0x0010 - 0x0000)
struct NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged final
{
public:
	class UGameplayModifierContainer*             Container;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged) == 0x000008, "Wrong alignment on NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged");
static_assert(sizeof(NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged) == 0x000010, "Wrong size on NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged");
static_assert(offsetof(NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged, Container) == 0x000000, "Member 'NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged::Container' has a wrong offset!");
static_assert(offsetof(NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged, Active) == 0x000008, "Member 'NoOneLeftBehind_Authority_OnExitGatePoweredApplicableChanged::Active' has a wrong offset!");

// Function DBDCompetence.NoOneLeftBehind.GetActionSpeedModifierValueAtLevel
// 0x0004 (0x0004 - 0x0000)
struct NoOneLeftBehind_GetActionSpeedModifierValueAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoOneLeftBehind_GetActionSpeedModifierValueAtLevel) == 0x000004, "Wrong alignment on NoOneLeftBehind_GetActionSpeedModifierValueAtLevel");
static_assert(sizeof(NoOneLeftBehind_GetActionSpeedModifierValueAtLevel) == 0x000004, "Wrong size on NoOneLeftBehind_GetActionSpeedModifierValueAtLevel");
static_assert(offsetof(NoOneLeftBehind_GetActionSpeedModifierValueAtLevel, ReturnValue) == 0x000000, "Member 'NoOneLeftBehind_GetActionSpeedModifierValueAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.NoOneLeftBehind.GetMovementSpeedDuration
// 0x0004 (0x0004 - 0x0000)
struct NoOneLeftBehind_GetMovementSpeedDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoOneLeftBehind_GetMovementSpeedDuration) == 0x000004, "Wrong alignment on NoOneLeftBehind_GetMovementSpeedDuration");
static_assert(sizeof(NoOneLeftBehind_GetMovementSpeedDuration) == 0x000004, "Wrong size on NoOneLeftBehind_GetMovementSpeedDuration");
static_assert(offsetof(NoOneLeftBehind_GetMovementSpeedDuration, ReturnValue) == 0x000000, "Member 'NoOneLeftBehind_GetMovementSpeedDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.NoOneLeftBehind.GetMovementSpeedPercentage
// 0x0004 (0x0004 - 0x0000)
struct NoOneLeftBehind_GetMovementSpeedPercentage final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NoOneLeftBehind_GetMovementSpeedPercentage) == 0x000004, "Wrong alignment on NoOneLeftBehind_GetMovementSpeedPercentage");
static_assert(sizeof(NoOneLeftBehind_GetMovementSpeedPercentage) == 0x000004, "Wrong size on NoOneLeftBehind_GetMovementSpeedPercentage");
static_assert(offsetof(NoOneLeftBehind_GetMovementSpeedPercentage, ReturnValue) == 0x000000, "Member 'NoOneLeftBehind_GetMovementSpeedPercentage::ReturnValue' has a wrong offset!");

// Function DBDCompetence.OwningPlayerHasStatusEffectOfClass.SetClassTypeToMatch
// 0x0008 (0x0008 - 0x0000)
struct OwningPlayerHasStatusEffectOfClass_SetClassTypeToMatch final
{
public:
	TSubclassOf<class UStatusEffect>              ClassType;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OwningPlayerHasStatusEffectOfClass_SetClassTypeToMatch) == 0x000008, "Wrong alignment on OwningPlayerHasStatusEffectOfClass_SetClassTypeToMatch");
static_assert(sizeof(OwningPlayerHasStatusEffectOfClass_SetClassTypeToMatch) == 0x000008, "Wrong size on OwningPlayerHasStatusEffectOfClass_SetClassTypeToMatch");
static_assert(offsetof(OwningPlayerHasStatusEffectOfClass_SetClassTypeToMatch, ClassType) == 0x000000, "Member 'OwningPlayerHasStatusEffectOfClass_SetClassTypeToMatch::ClassType' has a wrong offset!");

// Function DBDCompetence.PharmacyPerk.GetSearchSpeedAtLevel
// 0x0004 (0x0004 - 0x0000)
struct PharmacyPerk_GetSearchSpeedAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PharmacyPerk_GetSearchSpeedAtLevel) == 0x000004, "Wrong alignment on PharmacyPerk_GetSearchSpeedAtLevel");
static_assert(sizeof(PharmacyPerk_GetSearchSpeedAtLevel) == 0x000004, "Wrong size on PharmacyPerk_GetSearchSpeedAtLevel");
static_assert(offsetof(PharmacyPerk_GetSearchSpeedAtLevel, ReturnValue) == 0x000000, "Member 'PharmacyPerk_GetSearchSpeedAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.PlayWithYourFood.Authority_OnChaseEnded
// 0x0010 (0x0010 - 0x0000)
struct PlayWithYourFood_Authority_OnChaseEnded final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayWithYourFood_Authority_OnChaseEnded) == 0x000008, "Wrong alignment on PlayWithYourFood_Authority_OnChaseEnded");
static_assert(sizeof(PlayWithYourFood_Authority_OnChaseEnded) == 0x000010, "Wrong size on PlayWithYourFood_Authority_OnChaseEnded");
static_assert(offsetof(PlayWithYourFood_Authority_OnChaseEnded, Player) == 0x000000, "Member 'PlayWithYourFood_Authority_OnChaseEnded::Player' has a wrong offset!");
static_assert(offsetof(PlayWithYourFood_Authority_OnChaseEnded, ChaseTime) == 0x000008, "Member 'PlayWithYourFood_Authority_OnChaseEnded::ChaseTime' has a wrong offset!");

// Function DBDCompetence.PlayWithYourFood.GetChargeGainedCooldown
// 0x0004 (0x0004 - 0x0000)
struct PlayWithYourFood_GetChargeGainedCooldown final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayWithYourFood_GetChargeGainedCooldown) == 0x000004, "Wrong alignment on PlayWithYourFood_GetChargeGainedCooldown");
static_assert(sizeof(PlayWithYourFood_GetChargeGainedCooldown) == 0x000004, "Wrong size on PlayWithYourFood_GetChargeGainedCooldown");
static_assert(offsetof(PlayWithYourFood_GetChargeGainedCooldown, ReturnValue) == 0x000000, "Member 'PlayWithYourFood_GetChargeGainedCooldown::ReturnValue' has a wrong offset!");

// Function DBDCompetence.PlayWithYourFood.GetMovementSpeedPercentBuffAtLevel
// 0x0004 (0x0004 - 0x0000)
struct PlayWithYourFood_GetMovementSpeedPercentBuffAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayWithYourFood_GetMovementSpeedPercentBuffAtLevel) == 0x000004, "Wrong alignment on PlayWithYourFood_GetMovementSpeedPercentBuffAtLevel");
static_assert(sizeof(PlayWithYourFood_GetMovementSpeedPercentBuffAtLevel) == 0x000004, "Wrong size on PlayWithYourFood_GetMovementSpeedPercentBuffAtLevel");
static_assert(offsetof(PlayWithYourFood_GetMovementSpeedPercentBuffAtLevel, ReturnValue) == 0x000000, "Member 'PlayWithYourFood_GetMovementSpeedPercentBuffAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Poised.GetRevealKillerAuraDuration
// 0x0004 (0x0004 - 0x0000)
struct Poised_GetRevealKillerAuraDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Poised_GetRevealKillerAuraDuration) == 0x000004, "Wrong alignment on Poised_GetRevealKillerAuraDuration");
static_assert(sizeof(Poised_GetRevealKillerAuraDuration) == 0x000004, "Wrong size on Poised_GetRevealKillerAuraDuration");
static_assert(offsetof(Poised_GetRevealKillerAuraDuration, ReturnValue) == 0x000000, "Member 'Poised_GetRevealKillerAuraDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Poised.GetSuppressFootstepsDuration
// 0x0004 (0x0004 - 0x0000)
struct Poised_GetSuppressFootstepsDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Poised_GetSuppressFootstepsDuration) == 0x000004, "Wrong alignment on Poised_GetSuppressFootstepsDuration");
static_assert(sizeof(Poised_GetSuppressFootstepsDuration) == 0x000004, "Wrong size on Poised_GetSuppressFootstepsDuration");
static_assert(offsetof(Poised_GetSuppressFootstepsDuration, ReturnValue) == 0x000000, "Member 'Poised_GetSuppressFootstepsDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Premonition.GetPerkEffectRange
// 0x0004 (0x0004 - 0x0000)
struct Premonition_GetPerkEffectRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Premonition_GetPerkEffectRange) == 0x000004, "Wrong alignment on Premonition_GetPerkEffectRange");
static_assert(sizeof(Premonition_GetPerkEffectRange) == 0x000004, "Wrong size on Premonition_GetPerkEffectRange");
static_assert(offsetof(Premonition_GetPerkEffectRange, ReturnValue) == 0x000000, "Member 'Premonition_GetPerkEffectRange::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Premonition.GetPerkFrequencyAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Premonition_GetPerkFrequencyAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Premonition_GetPerkFrequencyAtLevel) == 0x000004, "Wrong alignment on Premonition_GetPerkFrequencyAtLevel");
static_assert(sizeof(Premonition_GetPerkFrequencyAtLevel) == 0x000004, "Wrong size on Premonition_GetPerkFrequencyAtLevel");
static_assert(offsetof(Premonition_GetPerkFrequencyAtLevel, ReturnValue) == 0x000000, "Member 'Premonition_GetPerkFrequencyAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.ProveThyself.OnSurvivorInOwnerRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct ProveThyself_OnSurvivorInOwnerRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProveThyself_OnSurvivorInOwnerRangeChanged) == 0x000001, "Wrong alignment on ProveThyself_OnSurvivorInOwnerRangeChanged");
static_assert(sizeof(ProveThyself_OnSurvivorInOwnerRangeChanged) == 0x000001, "Wrong size on ProveThyself_OnSurvivorInOwnerRangeChanged");
static_assert(offsetof(ProveThyself_OnSurvivorInOwnerRangeChanged, InRange) == 0x000000, "Member 'ProveThyself_OnSurvivorInOwnerRangeChanged::InRange' has a wrong offset!");

// Function DBDCompetence.RemoveOnOriginatingSurvivorGoneStatusEffect.Authority_OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved) == 0x000008, "Wrong alignment on RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved");
static_assert(sizeof(RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved) == 0x000008, "Wrong size on RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved");
static_assert(offsetof(RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved, Survivor) == 0x000000, "Member 'RemoveOnOriginatingSurvivorGoneStatusEffect_Authority_OnSurvivorRemoved::Survivor' has a wrong offset!");

// Function DBDCompetence.ProveThyselfEffect.OnInRangeOfOriginatorChanged
// 0x0010 (0x0010 - 0x0000)
struct ProveThyselfEffect_OnInRangeOfOriginatorChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          Survivor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProveThyselfEffect_OnInRangeOfOriginatorChanged) == 0x000008, "Wrong alignment on ProveThyselfEffect_OnInRangeOfOriginatorChanged");
static_assert(sizeof(ProveThyselfEffect_OnInRangeOfOriginatorChanged) == 0x000010, "Wrong size on ProveThyselfEffect_OnInRangeOfOriginatorChanged");
static_assert(offsetof(ProveThyselfEffect_OnInRangeOfOriginatorChanged, InRange) == 0x000000, "Member 'ProveThyselfEffect_OnInRangeOfOriginatorChanged::InRange' has a wrong offset!");
static_assert(offsetof(ProveThyselfEffect_OnInRangeOfOriginatorChanged, Survivor) == 0x000008, "Member 'ProveThyselfEffect_OnInRangeOfOriginatorChanged::Survivor' has a wrong offset!");

// Function DBDCompetence.QuickAndQuiet.GetCooldownDurationSecondsAtLevel
// 0x0004 (0x0004 - 0x0000)
struct QuickAndQuiet_GetCooldownDurationSecondsAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuickAndQuiet_GetCooldownDurationSecondsAtLevel) == 0x000004, "Wrong alignment on QuickAndQuiet_GetCooldownDurationSecondsAtLevel");
static_assert(sizeof(QuickAndQuiet_GetCooldownDurationSecondsAtLevel) == 0x000004, "Wrong size on QuickAndQuiet_GetCooldownDurationSecondsAtLevel");
static_assert(offsetof(QuickAndQuiet_GetCooldownDurationSecondsAtLevel, ReturnValue) == 0x000000, "Member 'QuickAndQuiet_GetCooldownDurationSecondsAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Saboteur.GetCooldownDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Saboteur_GetCooldownDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Saboteur_GetCooldownDurationAtLevel) == 0x000004, "Wrong alignment on Saboteur_GetCooldownDurationAtLevel");
static_assert(sizeof(Saboteur_GetCooldownDurationAtLevel) == 0x000004, "Wrong size on Saboteur_GetCooldownDurationAtLevel");
static_assert(offsetof(Saboteur_GetCooldownDurationAtLevel, ReturnValue) == 0x000000, "Member 'Saboteur_GetCooldownDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Saboteur.GetRevealHookDistanceAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Saboteur_GetRevealHookDistanceAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Saboteur_GetRevealHookDistanceAtLevel) == 0x000004, "Wrong alignment on Saboteur_GetRevealHookDistanceAtLevel");
static_assert(sizeof(Saboteur_GetRevealHookDistanceAtLevel) == 0x000004, "Wrong size on Saboteur_GetRevealHookDistanceAtLevel");
static_assert(offsetof(Saboteur_GetRevealHookDistanceAtLevel, ReturnValue) == 0x000000, "Member 'Saboteur_GetRevealHookDistanceAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Saboteur.GetScourgeHooksAuraColour
// 0x0010 (0x0010 - 0x0000)
struct Saboteur_GetScourgeHooksAuraColour final
{
public:
	struct FLinearColor                           ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Saboteur_GetScourgeHooksAuraColour) == 0x000004, "Wrong alignment on Saboteur_GetScourgeHooksAuraColour");
static_assert(sizeof(Saboteur_GetScourgeHooksAuraColour) == 0x000010, "Wrong size on Saboteur_GetScourgeHooksAuraColour");
static_assert(offsetof(Saboteur_GetScourgeHooksAuraColour, ReturnValue) == 0x000000, "Member 'Saboteur_GetScourgeHooksAuraColour::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SecondWind.Authority_OnHealProgress
// 0x0018 (0x0018 - 0x0000)
struct SecondWind_Authority_OnHealProgress final
{
public:
	float                                         IndividualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecondWind_Authority_OnHealProgress) == 0x000008, "Wrong alignment on SecondWind_Authority_OnHealProgress");
static_assert(sizeof(SecondWind_Authority_OnHealProgress) == 0x000018, "Wrong size on SecondWind_Authority_OnHealProgress");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, IndividualChargeAmount) == 0x000000, "Member 'SecondWind_Authority_OnHealProgress::IndividualChargeAmount' has a wrong offset!");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, TotalChargeAmount) == 0x000004, "Member 'SecondWind_Authority_OnHealProgress::TotalChargeAmount' has a wrong offset!");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, ChargeInstigator) == 0x000008, "Member 'SecondWind_Authority_OnHealProgress::ChargeInstigator' has a wrong offset!");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, WasCoop) == 0x000010, "Member 'SecondWind_Authority_OnHealProgress::WasCoop' has a wrong offset!");
static_assert(offsetof(SecondWind_Authority_OnHealProgress, DeltaTime) == 0x000014, "Member 'SecondWind_Authority_OnHealProgress::DeltaTime' has a wrong offset!");

// Function DBDCompetence.SecondWind.GetDurationOfHealAtLevel
// 0x0004 (0x0004 - 0x0000)
struct SecondWind_GetDurationOfHealAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecondWind_GetDurationOfHealAtLevel) == 0x000004, "Wrong alignment on SecondWind_GetDurationOfHealAtLevel");
static_assert(sizeof(SecondWind_GetDurationOfHealAtLevel) == 0x000004, "Wrong size on SecondWind_GetDurationOfHealAtLevel");
static_assert(offsetof(SecondWind_GetDurationOfHealAtLevel, ReturnValue) == 0x000000, "Member 'SecondWind_GetDurationOfHealAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SecondWind.GetNumberOfHealStateToHealToActivateAtLevel
// 0x0004 (0x0004 - 0x0000)
struct SecondWind_GetNumberOfHealStateToHealToActivateAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SecondWind_GetNumberOfHealStateToHealToActivateAtLevel) == 0x000004, "Wrong alignment on SecondWind_GetNumberOfHealStateToHealToActivateAtLevel");
static_assert(sizeof(SecondWind_GetNumberOfHealStateToHealToActivateAtLevel) == 0x000004, "Wrong size on SecondWind_GetNumberOfHealStateToHealToActivateAtLevel");
static_assert(offsetof(SecondWind_GetNumberOfHealStateToHealToActivateAtLevel, ReturnValue) == 0x000000, "Member 'SecondWind_GetNumberOfHealStateToHealToActivateAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SelfRecoverSkill.Authority_OnHealProgress
// 0x0018 (0x0018 - 0x0000)
struct SelfRecoverSkill_Authority_OnHealProgress final
{
public:
	float                                         IndividualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SelfRecoverSkill_Authority_OnHealProgress) == 0x000008, "Wrong alignment on SelfRecoverSkill_Authority_OnHealProgress");
static_assert(sizeof(SelfRecoverSkill_Authority_OnHealProgress) == 0x000018, "Wrong size on SelfRecoverSkill_Authority_OnHealProgress");
static_assert(offsetof(SelfRecoverSkill_Authority_OnHealProgress, IndividualChargeAmount) == 0x000000, "Member 'SelfRecoverSkill_Authority_OnHealProgress::IndividualChargeAmount' has a wrong offset!");
static_assert(offsetof(SelfRecoverSkill_Authority_OnHealProgress, TotalChargeAmount) == 0x000004, "Member 'SelfRecoverSkill_Authority_OnHealProgress::TotalChargeAmount' has a wrong offset!");
static_assert(offsetof(SelfRecoverSkill_Authority_OnHealProgress, ChargeInstigator) == 0x000008, "Member 'SelfRecoverSkill_Authority_OnHealProgress::ChargeInstigator' has a wrong offset!");
static_assert(offsetof(SelfRecoverSkill_Authority_OnHealProgress, WasCoop) == 0x000010, "Member 'SelfRecoverSkill_Authority_OnHealProgress::WasCoop' has a wrong offset!");
static_assert(offsetof(SelfRecoverSkill_Authority_OnHealProgress, DeltaTime) == 0x000014, "Member 'SelfRecoverSkill_Authority_OnHealProgress::DeltaTime' has a wrong offset!");

// Function DBDCompetence.SmallGame.Authority_SetTotemDetected
// 0x0001 (0x0001 - 0x0000)
struct SmallGame_Authority_SetTotemDetected final
{
public:
	bool                                          Value;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmallGame_Authority_SetTotemDetected) == 0x000001, "Wrong alignment on SmallGame_Authority_SetTotemDetected");
static_assert(sizeof(SmallGame_Authority_SetTotemDetected) == 0x000001, "Wrong size on SmallGame_Authority_SetTotemDetected");
static_assert(offsetof(SmallGame_Authority_SetTotemDetected, Value) == 0x000000, "Member 'SmallGame_Authority_SetTotemDetected::Value' has a wrong offset!");

// Function DBDCompetence.SmallGame.GetDetectionConeAngle
// 0x0004 (0x0004 - 0x0000)
struct SmallGame_GetDetectionConeAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SmallGame_GetDetectionConeAngle) == 0x000004, "Wrong alignment on SmallGame_GetDetectionConeAngle");
static_assert(sizeof(SmallGame_GetDetectionConeAngle) == 0x000004, "Wrong size on SmallGame_GetDetectionConeAngle");
static_assert(offsetof(SmallGame_GetDetectionConeAngle, ReturnValue) == 0x000000, "Member 'SmallGame_GetDetectionConeAngle::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SoleSurvivor.Authority_OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct SoleSurvivor_Authority_OnSurvivorAdded final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SoleSurvivor_Authority_OnSurvivorAdded) == 0x000008, "Wrong alignment on SoleSurvivor_Authority_OnSurvivorAdded");
static_assert(sizeof(SoleSurvivor_Authority_OnSurvivorAdded) == 0x000008, "Wrong size on SoleSurvivor_Authority_OnSurvivorAdded");
static_assert(offsetof(SoleSurvivor_Authority_OnSurvivorAdded, Survivor) == 0x000000, "Member 'SoleSurvivor_Authority_OnSurvivorAdded::Survivor' has a wrong offset!");

// Function DBDCompetence.Solidarity.Authority_OnHealthChargeApplied
// 0x0018 (0x0018 - 0x0000)
struct Solidarity_Authority_OnHealthChargeApplied final
{
public:
	float                                         IndividualChargeAmount;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalChargeAmount;                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 ChargeInstigator;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasCoop;                                           // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DeltaTime;                                         // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Solidarity_Authority_OnHealthChargeApplied) == 0x000008, "Wrong alignment on Solidarity_Authority_OnHealthChargeApplied");
static_assert(sizeof(Solidarity_Authority_OnHealthChargeApplied) == 0x000018, "Wrong size on Solidarity_Authority_OnHealthChargeApplied");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, IndividualChargeAmount) == 0x000000, "Member 'Solidarity_Authority_OnHealthChargeApplied::IndividualChargeAmount' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, TotalChargeAmount) == 0x000004, "Member 'Solidarity_Authority_OnHealthChargeApplied::TotalChargeAmount' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, ChargeInstigator) == 0x000008, "Member 'Solidarity_Authority_OnHealthChargeApplied::ChargeInstigator' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, WasCoop) == 0x000010, "Member 'Solidarity_Authority_OnHealthChargeApplied::WasCoop' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnHealthChargeApplied, DeltaTime) == 0x000014, "Member 'Solidarity_Authority_OnHealthChargeApplied::DeltaTime' has a wrong offset!");

// Function DBDCompetence.Solidarity.Authority_OnSkillCheckResponse
// 0x0018 (0x0018 - 0x0000)
struct Solidarity_Authority_OnSkillCheckResponse final
{
public:
	bool                                          Success;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Bonus;                                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerLoudNoise;                                  // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HadInput;                                          // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESkillCheckCustomType                         Type;                                              // 0x0012(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13[0x1];                                       // 0x0013(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeChange;                                      // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Solidarity_Authority_OnSkillCheckResponse) == 0x000008, "Wrong alignment on Solidarity_Authority_OnSkillCheckResponse");
static_assert(sizeof(Solidarity_Authority_OnSkillCheckResponse) == 0x000018, "Wrong size on Solidarity_Authority_OnSkillCheckResponse");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, Success) == 0x000000, "Member 'Solidarity_Authority_OnSkillCheckResponse::Success' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, Bonus) == 0x000001, "Member 'Solidarity_Authority_OnSkillCheckResponse::Bonus' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, Player) == 0x000008, "Member 'Solidarity_Authority_OnSkillCheckResponse::Player' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, TriggerLoudNoise) == 0x000010, "Member 'Solidarity_Authority_OnSkillCheckResponse::TriggerLoudNoise' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, HadInput) == 0x000011, "Member 'Solidarity_Authority_OnSkillCheckResponse::HadInput' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, Type) == 0x000012, "Member 'Solidarity_Authority_OnSkillCheckResponse::Type' has a wrong offset!");
static_assert(offsetof(Solidarity_Authority_OnSkillCheckResponse, ChargeChange) == 0x000014, "Member 'Solidarity_Authority_OnSkillCheckResponse::ChargeChange' has a wrong offset!");

// Function DBDCompetence.SpawningEffectOnGameEventPerk.GetCustomParameterOfStatusEffectAtLevel
// 0x0004 (0x0004 - 0x0000)
struct SpawningEffectOnGameEventPerk_GetCustomParameterOfStatusEffectAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawningEffectOnGameEventPerk_GetCustomParameterOfStatusEffectAtLevel) == 0x000004, "Wrong alignment on SpawningEffectOnGameEventPerk_GetCustomParameterOfStatusEffectAtLevel");
static_assert(sizeof(SpawningEffectOnGameEventPerk_GetCustomParameterOfStatusEffectAtLevel) == 0x000004, "Wrong size on SpawningEffectOnGameEventPerk_GetCustomParameterOfStatusEffectAtLevel");
static_assert(offsetof(SpawningEffectOnGameEventPerk_GetCustomParameterOfStatusEffectAtLevel, ReturnValue) == 0x000000, "Member 'SpawningEffectOnGameEventPerk_GetCustomParameterOfStatusEffectAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpawningEffectOnGameEventPerk.GetLifetimeOfStatusEffectAtLevel
// 0x0004 (0x0004 - 0x0000)
struct SpawningEffectOnGameEventPerk_GetLifetimeOfStatusEffectAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpawningEffectOnGameEventPerk_GetLifetimeOfStatusEffectAtLevel) == 0x000004, "Wrong alignment on SpawningEffectOnGameEventPerk_GetLifetimeOfStatusEffectAtLevel");
static_assert(sizeof(SpawningEffectOnGameEventPerk_GetLifetimeOfStatusEffectAtLevel) == 0x000004, "Wrong size on SpawningEffectOnGameEventPerk_GetLifetimeOfStatusEffectAtLevel");
static_assert(offsetof(SpawningEffectOnGameEventPerk_GetLifetimeOfStatusEffectAtLevel, ReturnValue) == 0x000000, "Member 'SpawningEffectOnGameEventPerk_GetLifetimeOfStatusEffectAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpiesFromTheShadows.GetCooldownDuration
// 0x0004 (0x0004 - 0x0000)
struct SpiesFromTheShadows_GetCooldownDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpiesFromTheShadows_GetCooldownDuration) == 0x000004, "Wrong alignment on SpiesFromTheShadows_GetCooldownDuration");
static_assert(sizeof(SpiesFromTheShadows_GetCooldownDuration) == 0x000004, "Wrong size on SpiesFromTheShadows_GetCooldownDuration");
static_assert(offsetof(SpiesFromTheShadows_GetCooldownDuration, ReturnValue) == 0x000000, "Member 'SpiesFromTheShadows_GetCooldownDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_Authority_OnInRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on SpineChillPerk_Authority_OnInRangeChanged");
static_assert(sizeof(SpineChillPerk_Authority_OnInRangeChanged) == 0x000001, "Wrong size on SpineChillPerk_Authority_OnInRangeChanged");
static_assert(offsetof(SpineChillPerk_Authority_OnInRangeChanged, InRange) == 0x000000, "Member 'SpineChillPerk_Authority_OnInRangeChanged::InRange' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.Authority_OnIsInLineOfSightChanged
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_Authority_OnIsInLineOfSightChanged final
{
public:
	bool                                          IsInLineOfSight;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_Authority_OnIsInLineOfSightChanged) == 0x000001, "Wrong alignment on SpineChillPerk_Authority_OnIsInLineOfSightChanged");
static_assert(sizeof(SpineChillPerk_Authority_OnIsInLineOfSightChanged) == 0x000001, "Wrong size on SpineChillPerk_Authority_OnIsInLineOfSightChanged");
static_assert(offsetof(SpineChillPerk_Authority_OnIsInLineOfSightChanged, IsInLineOfSight) == 0x000000, "Member 'SpineChillPerk_Authority_OnIsInLineOfSightChanged::IsInLineOfSight' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.Authority_OnIsLookingTowardsChanged
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_Authority_OnIsLookingTowardsChanged final
{
public:
	bool                                          Param_IsLookingTowards;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_Authority_OnIsLookingTowardsChanged) == 0x000001, "Wrong alignment on SpineChillPerk_Authority_OnIsLookingTowardsChanged");
static_assert(sizeof(SpineChillPerk_Authority_OnIsLookingTowardsChanged) == 0x000001, "Wrong size on SpineChillPerk_Authority_OnIsLookingTowardsChanged");
static_assert(offsetof(SpineChillPerk_Authority_OnIsLookingTowardsChanged, Param_IsLookingTowards) == 0x000000, "Member 'SpineChillPerk_Authority_OnIsLookingTowardsChanged::Param_IsLookingTowards' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.GetLingerDuration
// 0x0004 (0x0004 - 0x0000)
struct SpineChillPerk_GetLingerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_GetLingerDuration) == 0x000004, "Wrong alignment on SpineChillPerk_GetLingerDuration");
static_assert(sizeof(SpineChillPerk_GetLingerDuration) == 0x000004, "Wrong size on SpineChillPerk_GetLingerDuration");
static_assert(offsetof(SpineChillPerk_GetLingerDuration, ReturnValue) == 0x000000, "Member 'SpineChillPerk_GetLingerDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.GetRange
// 0x0004 (0x0004 - 0x0000)
struct SpineChillPerk_GetRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_GetRange) == 0x000004, "Wrong alignment on SpineChillPerk_GetRange");
static_assert(sizeof(SpineChillPerk_GetRange) == 0x000004, "Wrong size on SpineChillPerk_GetRange");
static_assert(offsetof(SpineChillPerk_GetRange, ReturnValue) == 0x000000, "Member 'SpineChillPerk_GetRange::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.HasLineOfSight
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_HasLineOfSight final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_HasLineOfSight) == 0x000001, "Wrong alignment on SpineChillPerk_HasLineOfSight");
static_assert(sizeof(SpineChillPerk_HasLineOfSight) == 0x000001, "Wrong size on SpineChillPerk_HasLineOfSight");
static_assert(offsetof(SpineChillPerk_HasLineOfSight, ReturnValue) == 0x000000, "Member 'SpineChillPerk_HasLineOfSight::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.IsInRange
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_IsInRange final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_IsInRange) == 0x000001, "Wrong alignment on SpineChillPerk_IsInRange");
static_assert(sizeof(SpineChillPerk_IsInRange) == 0x000001, "Wrong size on SpineChillPerk_IsInRange");
static_assert(offsetof(SpineChillPerk_IsInRange, ReturnValue) == 0x000000, "Member 'SpineChillPerk_IsInRange::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SpineChillPerk.IsLookingTowards
// 0x0001 (0x0001 - 0x0000)
struct SpineChillPerk_IsLookingTowards final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpineChillPerk_IsLookingTowards) == 0x000001, "Wrong alignment on SpineChillPerk_IsLookingTowards");
static_assert(sizeof(SpineChillPerk_IsLookingTowards) == 0x000001, "Wrong size on SpineChillPerk_IsLookingTowards");
static_assert(offsetof(SpineChillPerk_IsLookingTowards, ReturnValue) == 0x000000, "Member 'SpineChillPerk_IsLookingTowards::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SprintBurst.Authority_OnIsRunningAndMovingChanged
// 0x0001 (0x0001 - 0x0000)
struct SprintBurst_Authority_OnIsRunningAndMovingChanged final
{
public:
	bool                                          IsRunningAndMoving;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SprintBurst_Authority_OnIsRunningAndMovingChanged) == 0x000001, "Wrong alignment on SprintBurst_Authority_OnIsRunningAndMovingChanged");
static_assert(sizeof(SprintBurst_Authority_OnIsRunningAndMovingChanged) == 0x000001, "Wrong size on SprintBurst_Authority_OnIsRunningAndMovingChanged");
static_assert(offsetof(SprintBurst_Authority_OnIsRunningAndMovingChanged, IsRunningAndMoving) == 0x000000, "Member 'SprintBurst_Authority_OnIsRunningAndMovingChanged::IsRunningAndMoving' has a wrong offset!");

// Function DBDCompetence.SprintBurst.Authority_OnPerkFlagsChanged
// 0x0010 (0x0010 - 0x0000)
struct SprintBurst_Authority_OnPerkFlagsChanged final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAdded;                                           // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SprintBurst_Authority_OnPerkFlagsChanged) == 0x000004, "Wrong alignment on SprintBurst_Authority_OnPerkFlagsChanged");
static_assert(sizeof(SprintBurst_Authority_OnPerkFlagsChanged) == 0x000010, "Wrong size on SprintBurst_Authority_OnPerkFlagsChanged");
static_assert(offsetof(SprintBurst_Authority_OnPerkFlagsChanged, GameplayTag) == 0x000000, "Member 'SprintBurst_Authority_OnPerkFlagsChanged::GameplayTag' has a wrong offset!");
static_assert(offsetof(SprintBurst_Authority_OnPerkFlagsChanged, IsAdded) == 0x00000C, "Member 'SprintBurst_Authority_OnPerkFlagsChanged::IsAdded' has a wrong offset!");

// Function DBDCompetence.SprintBurst.GetExhaustedDuration
// 0x0004 (0x0004 - 0x0000)
struct SprintBurst_GetExhaustedDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SprintBurst_GetExhaustedDuration) == 0x000004, "Wrong alignment on SprintBurst_GetExhaustedDuration");
static_assert(sizeof(SprintBurst_GetExhaustedDuration) == 0x000004, "Wrong size on SprintBurst_GetExhaustedDuration");
static_assert(offsetof(SprintBurst_GetExhaustedDuration, ReturnValue) == 0x000000, "Member 'SprintBurst_GetExhaustedDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.SprintBurst.GetSprintDuration
// 0x0004 (0x0004 - 0x0000)
struct SprintBurst_GetSprintDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SprintBurst_GetSprintDuration) == 0x000004, "Wrong alignment on SprintBurst_GetSprintDuration");
static_assert(sizeof(SprintBurst_GetSprintDuration) == 0x000004, "Wrong size on SprintBurst_GetSprintDuration");
static_assert(offsetof(SprintBurst_GetSprintDuration, ReturnValue) == 0x000000, "Member 'SprintBurst_GetSprintDuration::ReturnValue' has a wrong offset!");

// Function DBDCompetence.StakeOutPerk.GetMaxTokensAtLevel
// 0x0004 (0x0004 - 0x0000)
struct StakeOutPerk_GetMaxTokensAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StakeOutPerk_GetMaxTokensAtLevel) == 0x000004, "Wrong alignment on StakeOutPerk_GetMaxTokensAtLevel");
static_assert(sizeof(StakeOutPerk_GetMaxTokensAtLevel) == 0x000004, "Wrong size on StakeOutPerk_GetMaxTokensAtLevel");
static_assert(offsetof(StakeOutPerk_GetMaxTokensAtLevel, ReturnValue) == 0x000000, "Member 'StakeOutPerk_GetMaxTokensAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.StakeOutPerk.GetTokenChargeTime
// 0x0004 (0x0004 - 0x0000)
struct StakeOutPerk_GetTokenChargeTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StakeOutPerk_GetTokenChargeTime) == 0x000004, "Wrong alignment on StakeOutPerk_GetTokenChargeTime");
static_assert(sizeof(StakeOutPerk_GetTokenChargeTime) == 0x000004, "Wrong size on StakeOutPerk_GetTokenChargeTime");
static_assert(offsetof(StakeOutPerk_GetTokenChargeTime, ReturnValue) == 0x000000, "Member 'StakeOutPerk_GetTokenChargeTime::ReturnValue' has a wrong offset!");

// Function DBDCompetence.StatsSystemUtilities.GetStatValueBP
// 0x0088 (0x0088 - 0x0000)
struct StatsSystemUtilities_GetStatValueBP final
{
public:
	struct FTunableStat                           TheStat;                                           // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0080(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StatsSystemUtilities_GetStatValueBP) == 0x000008, "Wrong alignment on StatsSystemUtilities_GetStatValueBP");
static_assert(sizeof(StatsSystemUtilities_GetStatValueBP) == 0x000088, "Wrong size on StatsSystemUtilities_GetStatValueBP");
static_assert(offsetof(StatsSystemUtilities_GetStatValueBP, TheStat) == 0x000000, "Member 'StatsSystemUtilities_GetStatValueBP::TheStat' has a wrong offset!");
static_assert(offsetof(StatsSystemUtilities_GetStatValueBP, ReturnValue) == 0x000080, "Member 'StatsSystemUtilities_GetStatValueBP::ReturnValue' has a wrong offset!");

// Function DBDCompetence.StatsSystemUtilities.InitStatBP
// 0x0090 (0x0090 - 0x0000)
struct StatsSystemUtilities_InitStatBP final
{
public:
	struct FTunableStat                           TheStat;                                           // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	TScriptInterface<class IModifierProvider>     ModifierProvider;                                  // 0x0080(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatsSystemUtilities_InitStatBP) == 0x000008, "Wrong alignment on StatsSystemUtilities_InitStatBP");
static_assert(sizeof(StatsSystemUtilities_InitStatBP) == 0x000090, "Wrong size on StatsSystemUtilities_InitStatBP");
static_assert(offsetof(StatsSystemUtilities_InitStatBP, TheStat) == 0x000000, "Member 'StatsSystemUtilities_InitStatBP::TheStat' has a wrong offset!");
static_assert(offsetof(StatsSystemUtilities_InitStatBP, ModifierProvider) == 0x000080, "Member 'StatsSystemUtilities_InitStatBP::ModifierProvider' has a wrong offset!");

// Function DBDCompetence.Surge.GetCooldownDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Surge_GetCooldownDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Surge_GetCooldownDurationAtLevel) == 0x000004, "Wrong alignment on Surge_GetCooldownDurationAtLevel");
static_assert(sizeof(Surge_GetCooldownDurationAtLevel) == 0x000004, "Wrong size on Surge_GetCooldownDurationAtLevel");
static_assert(offsetof(Surge_GetCooldownDurationAtLevel, ReturnValue) == 0x000000, "Member 'Surge_GetCooldownDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Surge.GetHasCooldown
// 0x0001 (0x0001 - 0x0000)
struct Surge_GetHasCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Surge_GetHasCooldown) == 0x000001, "Wrong alignment on Surge_GetHasCooldown");
static_assert(sizeof(Surge_GetHasCooldown) == 0x000001, "Wrong size on Surge_GetHasCooldown");
static_assert(offsetof(Surge_GetHasCooldown, ReturnValue) == 0x000000, "Member 'Surge_GetHasCooldown::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Surge.GetInstantRegressionAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Surge_GetInstantRegressionAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Surge_GetInstantRegressionAtLevel) == 0x000004, "Wrong alignment on Surge_GetInstantRegressionAtLevel");
static_assert(sizeof(Surge_GetInstantRegressionAtLevel) == 0x000004, "Wrong size on Surge_GetInstantRegressionAtLevel");
static_assert(offsetof(Surge_GetInstantRegressionAtLevel, ReturnValue) == 0x000000, "Member 'Surge_GetInstantRegressionAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Surge.GetZoneRadius
// 0x0004 (0x0004 - 0x0000)
struct Surge_GetZoneRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Surge_GetZoneRadius) == 0x000004, "Wrong alignment on Surge_GetZoneRadius");
static_assert(sizeof(Surge_GetZoneRadius) == 0x000004, "Wrong size on Surge_GetZoneRadius");
static_assert(offsetof(Surge_GetZoneRadius, ReturnValue) == 0x000000, "Member 'Surge_GetZoneRadius::ReturnValue' has a wrong offset!");

// Function DBDCompetence.WellMakeIt.Authority_OnUnHook
// 0x0040 (0x0040 - 0x0000)
struct WellMakeIt_Authority_OnUnHook final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(WellMakeIt_Authority_OnUnHook) == 0x000008, "Wrong alignment on WellMakeIt_Authority_OnUnHook");
static_assert(sizeof(WellMakeIt_Authority_OnUnHook) == 0x000040, "Wrong size on WellMakeIt_Authority_OnUnHook");
static_assert(offsetof(WellMakeIt_Authority_OnUnHook, GameEventType) == 0x000000, "Member 'WellMakeIt_Authority_OnUnHook::GameEventType' has a wrong offset!");
static_assert(offsetof(WellMakeIt_Authority_OnUnHook, GameEventData) == 0x000010, "Member 'WellMakeIt_Authority_OnUnHook::GameEventData' has a wrong offset!");

// Function DBDCompetence.WellMakeIt.GetHealingSpeed
// 0x0004 (0x0004 - 0x0000)
struct WellMakeIt_GetHealingSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WellMakeIt_GetHealingSpeed) == 0x000004, "Wrong alignment on WellMakeIt_GetHealingSpeed");
static_assert(sizeof(WellMakeIt_GetHealingSpeed) == 0x000004, "Wrong size on WellMakeIt_GetHealingSpeed");
static_assert(offsetof(WellMakeIt_GetHealingSpeed, ReturnValue) == 0x000000, "Member 'WellMakeIt_GetHealingSpeed::ReturnValue' has a wrong offset!");

// Function DBDCompetence.WellMakeIt.GetPerkDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct WellMakeIt_GetPerkDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WellMakeIt_GetPerkDurationAtLevel) == 0x000004, "Wrong alignment on WellMakeIt_GetPerkDurationAtLevel");
static_assert(sizeof(WellMakeIt_GetPerkDurationAtLevel) == 0x000004, "Wrong size on WellMakeIt_GetPerkDurationAtLevel");
static_assert(offsetof(WellMakeIt_GetPerkDurationAtLevel, ReturnValue) == 0x000000, "Member 'WellMakeIt_GetPerkDurationAtLevel::ReturnValue' has a wrong offset!");

// Function DBDCompetence.Whispers.Multicast_FireAudioEvent
// 0x0004 (0x0004 - 0x0000)
struct Whispers_Multicast_FireAudioEvent final
{
public:
	int32                                         SurvivorsInRange;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Whispers_Multicast_FireAudioEvent) == 0x000004, "Wrong alignment on Whispers_Multicast_FireAudioEvent");
static_assert(sizeof(Whispers_Multicast_FireAudioEvent) == 0x000004, "Wrong size on Whispers_Multicast_FireAudioEvent");
static_assert(offsetof(Whispers_Multicast_FireAudioEvent, SurvivorsInRange) == 0x000000, "Member 'Whispers_Multicast_FireAudioEvent::SurvivorsInRange' has a wrong offset!");

// Function DBDCompetence.YamaokaFamilyCrest.RevealSurvivor
// 0x0008 (0x0008 - 0x0000)
struct YamaokaFamilyCrest_RevealSurvivor final
{
public:
	class ACamperPlayer*                          SurvivorToReveal;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(YamaokaFamilyCrest_RevealSurvivor) == 0x000008, "Wrong alignment on YamaokaFamilyCrest_RevealSurvivor");
static_assert(sizeof(YamaokaFamilyCrest_RevealSurvivor) == 0x000008, "Wrong size on YamaokaFamilyCrest_RevealSurvivor");
static_assert(offsetof(YamaokaFamilyCrest_RevealSurvivor, SurvivorToReveal) == 0x000000, "Member 'YamaokaFamilyCrest_RevealSurvivor::SurvivorToReveal' has a wrong offset!");

// Function DBDCompetence.ZanshinTactics.GetSurvivorAuraRevealDuration
// 0x0004 (0x0004 - 0x0000)
struct ZanshinTactics_GetSurvivorAuraRevealDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ZanshinTactics_GetSurvivorAuraRevealDuration) == 0x000004, "Wrong alignment on ZanshinTactics_GetSurvivorAuraRevealDuration");
static_assert(sizeof(ZanshinTactics_GetSurvivorAuraRevealDuration) == 0x000004, "Wrong size on ZanshinTactics_GetSurvivorAuraRevealDuration");
static_assert(offsetof(ZanshinTactics_GetSurvivorAuraRevealDuration, ReturnValue) == 0x000000, "Member 'ZanshinTactics_GetSurvivorAuraRevealDuration::ReturnValue' has a wrong offset!");

}

