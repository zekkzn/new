#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GraphicsExtensions

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "GraphicsExtensions_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class GraphicsExtensions.GMAdaptiveShadowMapAtlas
// 0x00B8 (0x00E8 - 0x0030)
class UGMAdaptiveShadowMapAtlas final : public UObject
{
public:
	uint8                                         Pad_30[0xB8];                                      // 0x0030(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapAtlas">();
	}
	static class UGMAdaptiveShadowMapAtlas* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapAtlas>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapAtlas) == 0x000008, "Wrong alignment on UGMAdaptiveShadowMapAtlas");
static_assert(sizeof(UGMAdaptiveShadowMapAtlas) == 0x0000E8, "Wrong size on UGMAdaptiveShadowMapAtlas");

// Class GraphicsExtensions.GMAdaptiveShadowMapController
// 0x0098 (0x00C8 - 0x0030)
class UGMAdaptiveShadowMapController final : public UObject
{
public:
	class UGMAdaptiveShadowMapAtlas*              _atlas;                                            // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     _lightFunctionMaterial;                            // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UGMAdaptiveShadowMapSource*>     _shadowMapSourceList;                              // 0x0040(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UGMAdaptiveShadowMapSource*>     _shadowMapSourceActivatedList;                     // 0x0050(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x68];                                      // 0x0060(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapController">();
	}
	static class UGMAdaptiveShadowMapController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapController>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapController) == 0x000008, "Wrong alignment on UGMAdaptiveShadowMapController");
static_assert(sizeof(UGMAdaptiveShadowMapController) == 0x0000C8, "Wrong size on UGMAdaptiveShadowMapController");
static_assert(offsetof(UGMAdaptiveShadowMapController, _atlas) == 0x000030, "Member 'UGMAdaptiveShadowMapController::_atlas' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapController, _lightFunctionMaterial) == 0x000038, "Member 'UGMAdaptiveShadowMapController::_lightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapController, _shadowMapSourceList) == 0x000040, "Member 'UGMAdaptiveShadowMapController::_shadowMapSourceList' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapController, _shadowMapSourceActivatedList) == 0x000050, "Member 'UGMAdaptiveShadowMapController::_shadowMapSourceActivatedList' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapControllerComponent
// 0x01F0 (0x04B0 - 0x02C0)
class UGMAdaptiveShadowMapControllerComponent final : public USceneComponent
{
public:
	struct FBHVRPerDetailModeInt                  TileSize;                                          // 0x02C0(0x00A0)(Edit, NativeAccessSpecifierPublic)
	int32                                         TileCountX;                                        // 0x0360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileCountY;                                        // 0x0364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntPoint                              GridSize;                                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratedTilesPerFrame;                            // 0x0370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_374[0x4];                                      // 0x0374(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBHVRPerDetailModeInt                  MaxPreallocatedTilesPerFrame;                      // 0x0378(0x00A0)(Edit, NativeAccessSpecifierPublic)
	bool                                          bSupportsDirectionalLights;                        // 0x0418(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSupportsSpotLights;                               // 0x0419(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41A[0x6];                                      // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x0420(0x0008)(Edit, ZeroConstructor, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CullShadowIfPixelSizeLessThan;                     // 0x0428(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviewOnly;                                      // 0x042C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42D[0x13];                                     // 0x042D(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	class UGMAdaptiveShadowMapAtlas*              _atlas;                                            // 0x0440(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGMAdaptiveShadowMapController*         _controller;                                       // 0x0448(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UGMAdaptiveShadowMapSourceComponent*, class UGMAdaptiveShadowMapSource*> _shadowMapSources;                                 // 0x0450(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               _lightFunctionMaterialInstance;                    // 0x04A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0x8];                                      // 0x04A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DumpDebugInfo();
	int32 GetTileCountX();
	int32 GetTileCountY();
	int32 GetTileSize();
	bool IsControllerDonePreallocatingTiles();
	void RebuildAllAtlases();
	void RebuildAtlas();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapControllerComponent">();
	}
	static class UGMAdaptiveShadowMapControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapControllerComponent>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapControllerComponent) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapControllerComponent");
static_assert(sizeof(UGMAdaptiveShadowMapControllerComponent) == 0x0004B0, "Wrong size on UGMAdaptiveShadowMapControllerComponent");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, TileSize) == 0x0002C0, "Member 'UGMAdaptiveShadowMapControllerComponent::TileSize' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, TileCountX) == 0x000360, "Member 'UGMAdaptiveShadowMapControllerComponent::TileCountX' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, TileCountY) == 0x000364, "Member 'UGMAdaptiveShadowMapControllerComponent::TileCountY' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, GridSize) == 0x000368, "Member 'UGMAdaptiveShadowMapControllerComponent::GridSize' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, GeneratedTilesPerFrame) == 0x000370, "Member 'UGMAdaptiveShadowMapControllerComponent::GeneratedTilesPerFrame' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, MaxPreallocatedTilesPerFrame) == 0x000378, "Member 'UGMAdaptiveShadowMapControllerComponent::MaxPreallocatedTilesPerFrame' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, bSupportsDirectionalLights) == 0x000418, "Member 'UGMAdaptiveShadowMapControllerComponent::bSupportsDirectionalLights' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, bSupportsSpotLights) == 0x000419, "Member 'UGMAdaptiveShadowMapControllerComponent::bSupportsSpotLights' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, LightFunctionMaterial) == 0x000420, "Member 'UGMAdaptiveShadowMapControllerComponent::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, CullShadowIfPixelSizeLessThan) == 0x000428, "Member 'UGMAdaptiveShadowMapControllerComponent::CullShadowIfPixelSizeLessThan' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, bPreviewOnly) == 0x00042C, "Member 'UGMAdaptiveShadowMapControllerComponent::bPreviewOnly' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, _atlas) == 0x000440, "Member 'UGMAdaptiveShadowMapControllerComponent::_atlas' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, _controller) == 0x000448, "Member 'UGMAdaptiveShadowMapControllerComponent::_controller' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, _shadowMapSources) == 0x000450, "Member 'UGMAdaptiveShadowMapControllerComponent::_shadowMapSources' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapControllerComponent, _lightFunctionMaterialInstance) == 0x0004A0, "Member 'UGMAdaptiveShadowMapControllerComponent::_lightFunctionMaterialInstance' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSource
// 0x0490 (0x04C0 - 0x0030)
#pragma pack(push, 0x1)
class alignas(0x10) UGMAdaptiveShadowMapSource : public UObject
{
public:
	class UGMAdaptiveShadowMapAtlas*              _atlas;                                            // 0x0030(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULightComponent*                        _lightComponent;                                   // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x478];                                     // 0x0040(0x0478)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSource">();
	}
	static class UGMAdaptiveShadowMapSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapSource>();
	}
};
#pragma pack(pop)
static_assert(alignof(UGMAdaptiveShadowMapSource) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapSource");
static_assert(sizeof(UGMAdaptiveShadowMapSource) == 0x0004C0, "Wrong size on UGMAdaptiveShadowMapSource");
static_assert(offsetof(UGMAdaptiveShadowMapSource, _atlas) == 0x000030, "Member 'UGMAdaptiveShadowMapSource::_atlas' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSource, _lightComponent) == 0x000038, "Member 'UGMAdaptiveShadowMapSource::_lightComponent' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSourceComponent
// 0x0020 (0x02E0 - 0x02C0)
class UGMAdaptiveShadowMapSourceComponent final : public USceneComponent
{
public:
	bool                                          bUseAutoRadius;                                    // 0x02C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x02C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthMin;                                          // 0x02C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthMax;                                          // 0x02CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Levels;                                            // 0x02D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreGeneratedLevels;                                // 0x02D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D8[0x8];                                      // 0x02D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLightRadiusWithBounds(const struct FVector& BoundingSphereCenter, float BoundingSphereRadius);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSourceComponent">();
	}
	static class UGMAdaptiveShadowMapSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapSourceComponent>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapSourceComponent) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapSourceComponent");
static_assert(sizeof(UGMAdaptiveShadowMapSourceComponent) == 0x0002E0, "Wrong size on UGMAdaptiveShadowMapSourceComponent");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, bUseAutoRadius) == 0x0002C0, "Member 'UGMAdaptiveShadowMapSourceComponent::bUseAutoRadius' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, Radius) == 0x0002C4, "Member 'UGMAdaptiveShadowMapSourceComponent::Radius' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, DepthMin) == 0x0002C8, "Member 'UGMAdaptiveShadowMapSourceComponent::DepthMin' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, DepthMax) == 0x0002CC, "Member 'UGMAdaptiveShadowMapSourceComponent::DepthMax' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, Levels) == 0x0002D0, "Member 'UGMAdaptiveShadowMapSourceComponent::Levels' has a wrong offset!");
static_assert(offsetof(UGMAdaptiveShadowMapSourceComponent, PreGeneratedLevels) == 0x0002D4, "Member 'UGMAdaptiveShadowMapSourceComponent::PreGeneratedLevels' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSourceComponentSpawner
// 0x0010 (0x02B0 - 0x02A0)
class AGMAdaptiveShadowMapSourceComponentSpawner final : public AActor
{
public:
	bool                                          bCreateASMSourceComponentOnBeginPlay;              // 0x02A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveCastForCinematicOnlyFlagOnLights;           // 0x02A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveLightFunctionMaterialOnLights;              // 0x02A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A3[0x1];                                      // 0x02A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumLevelPerSource;                                 // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPreGeneratedLevelPerSource;                     // 0x02A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreviewOnly;                                      // 0x02AC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AD[0x3];                                      // 0x02AD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSourceComponentSpawner">();
	}
	static class AGMAdaptiveShadowMapSourceComponentSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGMAdaptiveShadowMapSourceComponentSpawner>();
	}
};
static_assert(alignof(AGMAdaptiveShadowMapSourceComponentSpawner) == 0x000008, "Wrong alignment on AGMAdaptiveShadowMapSourceComponentSpawner");
static_assert(sizeof(AGMAdaptiveShadowMapSourceComponentSpawner) == 0x0002B0, "Wrong size on AGMAdaptiveShadowMapSourceComponentSpawner");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, bCreateASMSourceComponentOnBeginPlay) == 0x0002A0, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::bCreateASMSourceComponentOnBeginPlay' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, bRemoveCastForCinematicOnlyFlagOnLights) == 0x0002A1, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::bRemoveCastForCinematicOnlyFlagOnLights' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, bRemoveLightFunctionMaterialOnLights) == 0x0002A2, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::bRemoveLightFunctionMaterialOnLights' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, NumLevelPerSource) == 0x0002A4, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::NumLevelPerSource' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, NumPreGeneratedLevelPerSource) == 0x0002A8, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::NumPreGeneratedLevelPerSource' has a wrong offset!");
static_assert(offsetof(AGMAdaptiveShadowMapSourceComponentSpawner, bPreviewOnly) == 0x0002AC, "Member 'AGMAdaptiveShadowMapSourceComponentSpawner::bPreviewOnly' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSourceDirectional
// 0x0090 (0x0550 - 0x04C0)
class UGMAdaptiveShadowMapSourceDirectional final : public UGMAdaptiveShadowMapSource
{
public:
	class UDirectionalLightComponent*             _directionalLightComponent;                        // 0x04B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C0[0x90];                                     // 0x04C0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSourceDirectional">();
	}
	static class UGMAdaptiveShadowMapSourceDirectional* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapSourceDirectional>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapSourceDirectional) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapSourceDirectional");
static_assert(sizeof(UGMAdaptiveShadowMapSourceDirectional) == 0x000550, "Wrong size on UGMAdaptiveShadowMapSourceDirectional");
static_assert(offsetof(UGMAdaptiveShadowMapSourceDirectional, _directionalLightComponent) == 0x0004B8, "Member 'UGMAdaptiveShadowMapSourceDirectional::_directionalLightComponent' has a wrong offset!");

// Class GraphicsExtensions.GMAdaptiveShadowMapSourceSpot
// 0x00A0 (0x0560 - 0x04C0)
class UGMAdaptiveShadowMapSourceSpot final : public UGMAdaptiveShadowMapSource
{
public:
	class USpotLightComponent*                    _spotLightComponent;                               // 0x04B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C0[0xA0];                                     // 0x04C0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAdaptiveShadowMapSourceSpot">();
	}
	static class UGMAdaptiveShadowMapSourceSpot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAdaptiveShadowMapSourceSpot>();
	}
};
static_assert(alignof(UGMAdaptiveShadowMapSourceSpot) == 0x000010, "Wrong alignment on UGMAdaptiveShadowMapSourceSpot");
static_assert(sizeof(UGMAdaptiveShadowMapSourceSpot) == 0x000560, "Wrong size on UGMAdaptiveShadowMapSourceSpot");
static_assert(offsetof(UGMAdaptiveShadowMapSourceSpot, _spotLightComponent) == 0x0004B8, "Member 'UGMAdaptiveShadowMapSourceSpot::_spotLightComponent' has a wrong offset!");

// Class GraphicsExtensions.AmbianceManagerSettings
// 0x0040 (0x0088 - 0x0048)
class UAmbianceManagerSettings final : public UDeveloperSettings
{
public:
	TSoftObjectPtr<class UMaterialParameterCollection> _ambianceManagerMPC;                               // 0x0048(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          _allowAmbianceManagerActorSpawn;                   // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbianceManagerSettings">();
	}
	static class UAmbianceManagerSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbianceManagerSettings>();
	}
};
static_assert(alignof(UAmbianceManagerSettings) == 0x000008, "Wrong alignment on UAmbianceManagerSettings");
static_assert(sizeof(UAmbianceManagerSettings) == 0x000088, "Wrong size on UAmbianceManagerSettings");
static_assert(offsetof(UAmbianceManagerSettings, _ambianceManagerMPC) == 0x000048, "Member 'UAmbianceManagerSettings::_ambianceManagerMPC' has a wrong offset!");
static_assert(offsetof(UAmbianceManagerSettings, _allowAmbianceManagerActorSpawn) == 0x000080, "Member 'UAmbianceManagerSettings::_allowAmbianceManagerActorSpawn' has a wrong offset!");

// Class GraphicsExtensions.GMAmbianceManagerActor
// 0x0038 (0x02D8 - 0x02A0)
class AGMAmbianceManagerActor final : public AActor
{
public:
	class UPostProcessComponent*                  PostProcessVolume;                                 // 0x02A0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkyLightComponent*                     SkyLight;                                          // 0x02A8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x02B0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   SkyDome;                                           // 0x02B8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDBDCullDistanceVolumeComponent*        DBDCullDistanceVolume;                             // 0x02C0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDirectionalLightComponent*             DirectionalLight;                                  // 0x02C8(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGMAdaptiveShadowMapSourceComponent*    AdaptiveShadowMapSource;                           // 0x02D0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAmbianceManagerActor">();
	}
	static class AGMAmbianceManagerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGMAmbianceManagerActor>();
	}
};
static_assert(alignof(AGMAmbianceManagerActor) == 0x000008, "Wrong alignment on AGMAmbianceManagerActor");
static_assert(sizeof(AGMAmbianceManagerActor) == 0x0002D8, "Wrong size on AGMAmbianceManagerActor");
static_assert(offsetof(AGMAmbianceManagerActor, PostProcessVolume) == 0x0002A0, "Member 'AGMAmbianceManagerActor::PostProcessVolume' has a wrong offset!");
static_assert(offsetof(AGMAmbianceManagerActor, SkyLight) == 0x0002A8, "Member 'AGMAmbianceManagerActor::SkyLight' has a wrong offset!");
static_assert(offsetof(AGMAmbianceManagerActor, HeightFog) == 0x0002B0, "Member 'AGMAmbianceManagerActor::HeightFog' has a wrong offset!");
static_assert(offsetof(AGMAmbianceManagerActor, SkyDome) == 0x0002B8, "Member 'AGMAmbianceManagerActor::SkyDome' has a wrong offset!");
static_assert(offsetof(AGMAmbianceManagerActor, DBDCullDistanceVolume) == 0x0002C0, "Member 'AGMAmbianceManagerActor::DBDCullDistanceVolume' has a wrong offset!");
static_assert(offsetof(AGMAmbianceManagerActor, DirectionalLight) == 0x0002C8, "Member 'AGMAmbianceManagerActor::DirectionalLight' has a wrong offset!");
static_assert(offsetof(AGMAmbianceManagerActor, AdaptiveShadowMapSource) == 0x0002D0, "Member 'AGMAmbianceManagerActor::AdaptiveShadowMapSource' has a wrong offset!");

// Class GraphicsExtensions.GMAmbianceManager
// 0x15C8 (0x1610 - 0x0048)
class alignas(0x10) UGMAmbianceManager final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_48[0x15B8];                                    // 0x0048(0x15B8)(Fixing Size After Last Property [ Dumper-7 ])
	class AGMAmbianceManagerActor*                _ambianceManagerActor;                             // 0x1600(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1608[0x8];                                     // 0x1608(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAmbiance(class UAmbianceManagerDataAsset* AssetToLoad, bool OverrideTransition, float Duration, class UCurveFloat* Curve, const struct FGameplayTag& Tag);
	void DeinitializeManager();
	void InitializeManager(class UDataTable* InPriorityTable);
	void RemoveAmbiance(const class UAmbianceManagerDataAsset* AssetToLoad, bool OverrideTransition, float Duration, class UCurveFloat* Curve);

	bool IsManagerInitialized() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMAmbianceManager">();
	}
	static class UGMAmbianceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMAmbianceManager>();
	}
};
static_assert(alignof(UGMAmbianceManager) == 0x000010, "Wrong alignment on UGMAmbianceManager");
static_assert(sizeof(UGMAmbianceManager) == 0x001610, "Wrong size on UGMAmbianceManager");
static_assert(offsetof(UGMAmbianceManager, _ambianceManagerActor) == 0x001600, "Member 'UGMAmbianceManager::_ambianceManagerActor' has a wrong offset!");

// Class GraphicsExtensions.AmbianceManagerDataAsset
// 0x0718 (0x0750 - 0x0038)
class UAmbianceManagerDataAsset final : public UPrimaryDataAsset
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAmbianceManagerParams                 AmbianceManagerParams;                             // 0x0040(0x0710)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbianceManagerDataAsset">();
	}
	static class UAmbianceManagerDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbianceManagerDataAsset>();
	}
};
static_assert(alignof(UAmbianceManagerDataAsset) == 0x000010, "Wrong alignment on UAmbianceManagerDataAsset");
static_assert(sizeof(UAmbianceManagerDataAsset) == 0x000750, "Wrong size on UAmbianceManagerDataAsset");
static_assert(offsetof(UAmbianceManagerDataAsset, AmbianceManagerParams) == 0x000040, "Member 'UAmbianceManagerDataAsset::AmbianceManagerParams' has a wrong offset!");

// Class GraphicsExtensions.GMShadowDepthCapture
// 0x0270 (0x02A0 - 0x0030)
class alignas(0x10) UGMShadowDepthCapture final : public UObject
{
public:
	class ULightComponent*                        _lightComponent;                                   // 0x0030(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTextureRenderTarget2D*                 _depthTarget;                                      // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x260];                                     // 0x0040(0x0260)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMShadowDepthCapture">();
	}
	static class UGMShadowDepthCapture* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMShadowDepthCapture>();
	}
};
static_assert(alignof(UGMShadowDepthCapture) == 0x000010, "Wrong alignment on UGMShadowDepthCapture");
static_assert(sizeof(UGMShadowDepthCapture) == 0x0002A0, "Wrong size on UGMShadowDepthCapture");
static_assert(offsetof(UGMShadowDepthCapture, _lightComponent) == 0x000030, "Member 'UGMShadowDepthCapture::_lightComponent' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCapture, _depthTarget) == 0x000038, "Member 'UGMShadowDepthCapture::_depthTarget' has a wrong offset!");

// Class GraphicsExtensions.GMShadowDepthCaptureComponent
// 0x0070 (0x0330 - 0x02C0)
class UGMShadowDepthCaptureComponent final : public USceneComponent
{
public:
	int32                                         DepthTargetWidth;                                  // 0x02C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DepthTargetHeight;                                 // 0x02C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 DepthTarget;                                       // 0x02C8(0x0008)(Edit, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureDynamicPrimitives;                         // 0x02D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureStaticPrimitives;                          // 0x02D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureEveryFrame;                                // 0x02D2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureOnlyIfVisibleFromCamera;                   // 0x02D3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCaptureObjectsWithBlockingCollisionVisibility;    // 0x02D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EShadowDepthLODSelection                      LODSelection;                                      // 0x02D5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D6[0x2];                                      // 0x02D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinPrimitivePixelDiameterBeforeCulling;            // 0x02D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2DC[0x4];                                      // 0x02DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ShadowClipRegion;                                  // 0x02E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterConeAngle;                                    // 0x0300(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowNearPlaneOffset;                             // 0x0304(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationRadius;                                 // 0x0308(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastTranslucentShadowsAsOpaque;                   // 0x030C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30D[0x3];                                      // 0x030D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDrawDistance;                                   // 0x0310(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_314[0x4];                                      // 0x0314(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGMShadowDepthCapture*                  _shadowDepthCapture;                               // 0x0318(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USpotLightComponent*                    _spotLightComponent;                               // 0x0320(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_328[0x8];                                      // 0x0328(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequestCaptureUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GMShadowDepthCaptureComponent">();
	}
	static class UGMShadowDepthCaptureComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGMShadowDepthCaptureComponent>();
	}
};
static_assert(alignof(UGMShadowDepthCaptureComponent) == 0x000010, "Wrong alignment on UGMShadowDepthCaptureComponent");
static_assert(sizeof(UGMShadowDepthCaptureComponent) == 0x000330, "Wrong size on UGMShadowDepthCaptureComponent");
static_assert(offsetof(UGMShadowDepthCaptureComponent, DepthTargetWidth) == 0x0002C0, "Member 'UGMShadowDepthCaptureComponent::DepthTargetWidth' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, DepthTargetHeight) == 0x0002C4, "Member 'UGMShadowDepthCaptureComponent::DepthTargetHeight' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, DepthTarget) == 0x0002C8, "Member 'UGMShadowDepthCaptureComponent::DepthTarget' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureDynamicPrimitives) == 0x0002D0, "Member 'UGMShadowDepthCaptureComponent::bCaptureDynamicPrimitives' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureStaticPrimitives) == 0x0002D1, "Member 'UGMShadowDepthCaptureComponent::bCaptureStaticPrimitives' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureEveryFrame) == 0x0002D2, "Member 'UGMShadowDepthCaptureComponent::bCaptureEveryFrame' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureOnlyIfVisibleFromCamera) == 0x0002D3, "Member 'UGMShadowDepthCaptureComponent::bCaptureOnlyIfVisibleFromCamera' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCaptureObjectsWithBlockingCollisionVisibility) == 0x0002D4, "Member 'UGMShadowDepthCaptureComponent::bCaptureObjectsWithBlockingCollisionVisibility' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, LODSelection) == 0x0002D5, "Member 'UGMShadowDepthCaptureComponent::LODSelection' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, MinPrimitivePixelDiameterBeforeCulling) == 0x0002D8, "Member 'UGMShadowDepthCaptureComponent::MinPrimitivePixelDiameterBeforeCulling' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, ShadowClipRegion) == 0x0002E0, "Member 'UGMShadowDepthCaptureComponent::ShadowClipRegion' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, OuterConeAngle) == 0x000300, "Member 'UGMShadowDepthCaptureComponent::OuterConeAngle' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, ShadowNearPlaneOffset) == 0x000304, "Member 'UGMShadowDepthCaptureComponent::ShadowNearPlaneOffset' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, AttenuationRadius) == 0x000308, "Member 'UGMShadowDepthCaptureComponent::AttenuationRadius' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, bCastTranslucentShadowsAsOpaque) == 0x00030C, "Member 'UGMShadowDepthCaptureComponent::bCastTranslucentShadowsAsOpaque' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, MaxDrawDistance) == 0x000310, "Member 'UGMShadowDepthCaptureComponent::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, _shadowDepthCapture) == 0x000318, "Member 'UGMShadowDepthCaptureComponent::_shadowDepthCapture' has a wrong offset!");
static_assert(offsetof(UGMShadowDepthCaptureComponent, _spotLightComponent) == 0x000320, "Member 'UGMShadowDepthCaptureComponent::_spotLightComponent' has a wrong offset!");

}

