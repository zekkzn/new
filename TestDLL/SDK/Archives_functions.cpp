#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Archives

#include "Basic.hpp"

#include "Archives_classes.hpp"
#include "Archives_parameters.hpp"


namespace SDK
{

// Function Archives.BloodPointsQEEvaluator.OnGameStatsCalculated
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UBloodPointsQEEvaluator::OnGameStatsCalculated(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BloodPointsQEEvaluator", "OnGameStatsCalculated");

	Params::BloodPointsQEEvaluator_OnGameStatsCalculated Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.AfterExitOpenQEEvaluator.OnExitGateOpened
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UAfterExitOpenQEEvaluator::OnExitGateOpened(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AfterExitOpenQEEvaluator", "OnExitGateOpened");

	Params::AfterExitOpenQEEvaluator_OnExitGateOpened Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ChaseInBasementQEEvaluator.OnChaseEnd
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UChaseInBasementQEEvaluator::OnChaseEnd(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChaseInBasementQEEvaluator", "OnChaseEnd");

	Params::ChaseInBasementQEEvaluator_OnChaseEnd Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ChaseInBasementQEEvaluator.OnChaseStart
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UChaseInBasementQEEvaluator::OnChaseStart(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChaseInBasementQEEvaluator", "OnChaseStart");

	Params::ChaseInBasementQEEvaluator_OnChaseStart Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ChaseInBasementQEEvaluator.OnEscapeChase
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UChaseInBasementQEEvaluator::OnEscapeChase(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChaseInBasementQEEvaluator", "OnEscapeChase");

	Params::ChaseInBasementQEEvaluator_OnEscapeChase Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ContextualQuestUtilities.PlayerHasAssociatedQuest
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ADBDPlayer*                       Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SpecialBehaviourId                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UContextualQuestUtilities::PlayerHasAssociatedQuest(const class ADBDPlayer* Player, const class FName SpecialBehaviourId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ContextualQuestUtilities", "PlayerHasAssociatedQuest");

	Params::ContextualQuestUtilities_PlayerHasAssociatedQuest Parms{};

	Parms.Player = Player;
	Parms.SpecialBehaviourId = SpecialBehaviourId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.ContextualQuestUtilities.PlayerHasToCompleteAssociatedQuest
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ADBDPlayer*                       Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SpecialBehaviourId                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UContextualQuestUtilities::PlayerHasToCompleteAssociatedQuest(const class ADBDPlayer* Player, const class FName SpecialBehaviourId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("ContextualQuestUtilities", "PlayerHasToCompleteAssociatedQuest");

	Params::ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest Parms{};

	Parms.Player = Player;
	Parms.SpecialBehaviourId = SpecialBehaviourId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.DoBeforeEscapeQEEvaluator.OnEscaped
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDoBeforeEscapeQEEvaluator::OnEscaped(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoBeforeEscapeQEEvaluator", "OnEscaped");

	Params::DoBeforeEscapeQEEvaluator_OnEscaped Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.DoBeforeHookQEEvaluator.OnHooked
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDoBeforeHookQEEvaluator::OnHooked(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DoBeforeHookQEEvaluator", "OnHooked");

	Params::DoBeforeHookQEEvaluator_OnHooked Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.DuringEndGameCollapseQEEvaluator.OnEndGameCollapseStart
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDuringEndGameCollapseQEEvaluator::OnEndGameCollapseStart(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DuringEndGameCollapseQEEvaluator", "OnEndGameCollapseStart");

	Params::DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.EarnEmblemQualityQEEvaluator.OnFinishedPlaying
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UEarnEmblemQualityQEEvaluator::OnFinishedPlaying(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EarnEmblemQualityQEEvaluator", "OnFinishedPlaying");

	Params::EarnEmblemQualityQEEvaluator_OnFinishedPlaying Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.EndOfGameQEEvaluator.OnFinishedPlaying
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UEndOfGameQEEvaluator::OnFinishedPlaying(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EndOfGameQEEvaluator", "OnFinishedPlaying");

	Params::EndOfGameQEEvaluator_OnFinishedPlaying Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.EscapeBasementItemQEEvaluator.OnItemCollectedFromChest
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UEscapeBasementItemQEEvaluator::OnItemCollectedFromChest(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EscapeBasementItemQEEvaluator", "OnItemCollectedFromChest");

	Params::EscapeBasementItemQEEvaluator_OnItemCollectedFromChest Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.EscapeBasementItemQEEvaluator.OnTargetEscapeFromTrial
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UEscapeBasementItemQEEvaluator::OnTargetEscapeFromTrial(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EscapeBasementItemQEEvaluator", "OnTargetEscapeFromTrial");

	Params::EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.WhiteGlyphSurfaceComponent.Multicast_TeleportGlyph
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UWhiteGlyphSurfaceComponent::Multicast_TeleportGlyph(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WhiteGlyphSurfaceComponent", "Multicast_TeleportGlyph");

	Params::WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.WhiteGlyphSurfaceComponent.GetOwningGlyph
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGlyph*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGlyph* UWhiteGlyphSurfaceComponent::GetOwningGlyph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WhiteGlyphSurfaceComponent", "GetOwningGlyph");

	Params::WhiteGlyphSurfaceComponent_GetOwningGlyph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.ExtendItemChargesQEEvaluator.OnItemAdded
// (Final, Native, Private)
// Parameters:
// class ACollectable*                     AddedItem                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInventoryType                          InventoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TWeakObjectPtr<class ADBDPlayer>        Player                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExtendItemChargesQEEvaluator::OnItemAdded(class ACollectable* AddedItem, EInventoryType InventoryType, TWeakObjectPtr<class ADBDPlayer> Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendItemChargesQEEvaluator", "OnItemAdded");

	Params::ExtendItemChargesQEEvaluator_OnItemAdded Parms{};

	Parms.AddedItem = AddedItem;
	Parms.InventoryType = InventoryType;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ExtendItemChargesQEEvaluator.OnItemChargeChanged
// (Final, Native, Private)
// Parameters:
// float                                   PreviousCharge                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   CurrentCharge                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TWeakObjectPtr<class ADBDPlayer>        ItemUser                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TWeakObjectPtr<class ACollectable>      Item                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExtendItemChargesQEEvaluator::OnItemChargeChanged(const float PreviousCharge, const float CurrentCharge, TWeakObjectPtr<class ADBDPlayer> ItemUser, TWeakObjectPtr<class ACollectable> Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendItemChargesQEEvaluator", "OnItemChargeChanged");

	Params::ExtendItemChargesQEEvaluator_OnItemChargeChanged Parms{};

	Parms.PreviousCharge = PreviousCharge;
	Parms.CurrentCharge = CurrentCharge;
	Parms.ItemUser = ItemUser;
	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ExtendItemChargesQEEvaluator.OnItemEmpty
// (Final, Native, Private)
// Parameters:
// TWeakObjectPtr<class ADBDPlayer>        ItemUser                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExtendItemChargesQEEvaluator::OnItemEmpty(TWeakObjectPtr<class ADBDPlayer> ItemUser)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendItemChargesQEEvaluator", "OnItemEmpty");

	Params::ExtendItemChargesQEEvaluator_OnItemEmpty Parms{};

	Parms.ItemUser = ItemUser;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ExtendItemChargesQEEvaluator.OnItemRemoved
// (Final, Native, Private, Const)
// Parameters:
// class ACollectable*                     RemovedItem                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInventoryType                          InventoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExtendItemChargesQEEvaluator::OnItemRemoved(class ACollectable* RemovedItem, EInventoryType InventoryType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendItemChargesQEEvaluator", "OnItemRemoved");

	Params::ExtendItemChargesQEEvaluator_OnItemRemoved Parms{};

	Parms.RemovedItem = RemovedItem;
	Parms.InventoryType = InventoryType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ExtendItemChargesQEEvaluator.OnSurvivorRemoved
// (Final, Native, Private, Const)
// Parameters:
// class ACamperPlayer*                    RemovedPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UExtendItemChargesQEEvaluator::OnSurvivorRemoved(class ACamperPlayer* RemovedPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExtendItemChargesQEEvaluator", "OnSurvivorRemoved");

	Params::ExtendItemChargesQEEvaluator_OnSurvivorRemoved Parms{};

	Parms.RemovedPlayer = RemovedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.FragileObjectComponent.Authority_OnCamperRemoved
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    RemovedPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFragileObjectComponent::Authority_OnCamperRemoved(class ACamperPlayer* RemovedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FragileObjectComponent", "Authority_OnCamperRemoved");

	Params::FragileObjectComponent_Authority_OnCamperRemoved Parms{};

	Parms.RemovedPlayer = RemovedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.FragileObjectComponent.DBD_RepairFragileObject
// (Final, Exec, Native, Private)

void UFragileObjectComponent::DBD_RepairFragileObject()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FragileObjectComponent", "DBD_RepairFragileObject");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Archives.FragileObjectComponent.OnFragileObjectStateChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UFragileObjectComponent::OnFragileObjectStateChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FragileObjectComponent", "OnFragileObjectStateChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Archives.FragileObjectComponent.GetPreviousCollector
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADBDPlayer*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADBDPlayer* UFragileObjectComponent::GetPreviousCollector() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FragileObjectComponent", "GetPreviousCollector");

	Params::FragileObjectComponent_GetPreviousCollector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.FragileObjectComponent.IsRepaired
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UFragileObjectComponent::IsRepaired() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FragileObjectComponent", "IsRepaired");

	Params::FragileObjectComponent_IsRepaired Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.FragileObjectComponent.OnRep_Repaired
// (Final, Native, Private, Const)

void UFragileObjectComponent::OnRep_Repaired() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FragileObjectComponent", "OnRep_Repaired");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Archives.WhiteGlyphBasementComponent.OnReadyForInteractionDelegate__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UWhiteGlyphBasementComponent::OnReadyForInteractionDelegate__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WhiteGlyphBasementComponent", "OnReadyForInteractionDelegate__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Archives.WhiteGlyphBasementComponent.GetOwningGlyph
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGlyph*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGlyph* UWhiteGlyphBasementComponent::GetOwningGlyph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WhiteGlyphBasementComponent", "GetOwningGlyph");

	Params::WhiteGlyphBasementComponent_GetOwningGlyph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.Glyph.Authority_OnInteractionCompleted
// (BlueprintAuthorityOnly, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       InteractingPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGlyph::Authority_OnInteractionCompleted(class ADBDPlayer* InteractingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "Authority_OnInteractionCompleted");

	Params::Glyph_Authority_OnInteractionCompleted Parms{};

	Parms.InteractingPlayer = InteractingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Archives.Glyph.Authority_OnIntroCompleted
// (Final, Native, Private)

void AGlyph::Authority_OnIntroCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "Authority_OnIntroCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.Glyph.Authority_OnPlayerBreachedRangeThreshold
// (Final, Native, Private)
// Parameters:
// bool                                    IsWithinRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TrackedActor                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGlyph::Authority_OnPlayerBreachedRangeThreshold(bool IsWithinRange, const class AActor* TrackedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "Authority_OnPlayerBreachedRangeThreshold");

	Params::Glyph_Authority_OnPlayerBreachedRangeThreshold Parms{};

	Parms.IsWithinRange = IsWithinRange;
	Parms.TrackedActor = TrackedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.Glyph.Authority_TrackPlayerWithBehaviourID
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       DBDPlayer                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGlyph::Authority_TrackPlayerWithBehaviourID(class ADBDPlayer* DBDPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "Authority_TrackPlayerWithBehaviourID");

	Params::Glyph_Authority_TrackPlayerWithBehaviourID Parms{};

	Parms.DBDPlayer = DBDPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.Glyph.Cosmetic_OnGlyphVisibilityChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       InteractingPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGlyph::Cosmetic_OnGlyphVisibilityChanged(class ADBDPlayer* InteractingPlayer, bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "Cosmetic_OnGlyphVisibilityChanged");

	Params::Glyph_Cosmetic_OnGlyphVisibilityChanged Parms{};

	Parms.InteractingPlayer = InteractingPlayer;
	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Archives.Glyph.Cosmetic_OnInteractionCompleted
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       InteractingPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGlyph::Cosmetic_OnInteractionCompleted(class ADBDPlayer* InteractingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "Cosmetic_OnInteractionCompleted");

	Params::Glyph_Cosmetic_OnInteractionCompleted Parms{};

	Parms.InteractingPlayer = InteractingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Archives.Glyph.Cosmetic_OnStartedInteracting
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       InteractingPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InteractionDuration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AGlyph::Cosmetic_OnStartedInteracting(class ADBDPlayer* InteractingPlayer, float InteractionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "Cosmetic_OnStartedInteracting");

	Params::Glyph_Cosmetic_OnStartedInteracting Parms{};

	Parms.InteractingPlayer = InteractingPlayer;
	Parms.InteractionDuration = InteractionDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Archives.Glyph.Cosmetic_OnStoppedInteracting
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void AGlyph::Cosmetic_OnStoppedInteracting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "Cosmetic_OnStoppedInteracting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Archives.Glyph.DoesLocalPlayerHaveVisibility
// (Final, Native, Protected, BlueprintCallable, BlueprintPure)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGlyph::DoesLocalPlayerHaveVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "DoesLocalPlayerHaveVisibility");

	Params::Glyph_DoesLocalPlayerHaveVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.Glyph.OnRep_PlayersWithVisibility
// (Final, Native, Protected)

void AGlyph::OnRep_PlayersWithVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "OnRep_PlayersWithVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.Glyph.IsPlayerOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADBDPlayer*                       Player                                                 (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AGlyph::IsPlayerOwner(const class ADBDPlayer* Player) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Glyph", "IsPlayerOwner");

	Params::Glyph_IsPlayerOwner Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.GreenGlyphActivatorComponent.Authority_EndGameScenarioBegins
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGreenGlyphActivatorComponent::Authority_EndGameScenarioBegins(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GreenGlyphActivatorComponent", "Authority_EndGameScenarioBegins");

	Params::GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.GreenGlyphActivatorComponent.Authority_OnActivateGlyphEvents
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGreenGlyphActivatorComponent::Authority_OnActivateGlyphEvents(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GreenGlyphActivatorComponent", "Authority_OnActivateGlyphEvents");

	Params::GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.GreenGlyphActivatorComponent.DBD_ShowAuraGreenGlyphsActive
// (Final, Exec, Native, Private)
// Parameters:
// bool                                    Enabled                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGreenGlyphActivatorComponent::DBD_ShowAuraGreenGlyphsActive(const bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GreenGlyphActivatorComponent", "DBD_ShowAuraGreenGlyphsActive");

	Params::GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.GreenGlyphComponent.Multicast_Cheat_ShowAuraGreenGlyphActive
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bForceShowAura                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGreenGlyphComponent::Multicast_Cheat_ShowAuraGreenGlyphActive(bool Enabled, bool bForceShowAura)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GreenGlyphComponent", "Multicast_Cheat_ShowAuraGreenGlyphActive");

	Params::GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive Parms{};

	Parms.Enabled = Enabled;
	Parms.bForceShowAura = bForceShowAura;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.GreenGlyphComponent.OnRep_SetShouldOutlineBeActive
// (Final, Native, Private)

void UGreenGlyphComponent::OnRep_SetShouldOutlineBeActive()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GreenGlyphComponent", "OnRep_SetShouldOutlineBeActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.HasInteractedMapTrackedInteractorQEEvaluator.OnActorTrackedByMap
// (Final, Native, Private)
// Parameters:
// class UActorKnowledgeCollection*        KnowledgeCollection                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           NewActor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHasInteractedMapTrackedInteractorQEEvaluator::OnActorTrackedByMap(class UActorKnowledgeCollection* KnowledgeCollection, class AActor* NewActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HasInteractedMapTrackedInteractorQEEvaluator", "OnActorTrackedByMap");

	Params::HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap Parms{};

	Parms.KnowledgeCollection = KnowledgeCollection;
	Parms.NewActor = NewActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.HasInteractedMapTrackedInteractorQEEvaluator.OnLevelReadyToPlay
// (Final, Native, Private)

void UHasInteractedMapTrackedInteractorQEEvaluator::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HasInteractedMapTrackedInteractorQEEvaluator", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.NearKillerQEEvaluator.OnRangeChanged
// (Final, Native, Protected)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNearKillerQEEvaluator::OnRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NearKillerQEEvaluator", "OnRangeChanged");

	Params::NearKillerQEEvaluator_OnRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.HideNearKillerQEEvaluator.OnCamperBreakFreeFromHarpoon
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHideNearKillerQEEvaluator::OnCamperBreakFreeFromHarpoon(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideNearKillerQEEvaluator", "OnCamperBreakFreeFromHarpoon");

	Params::HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.HideNearKillerQEEvaluator.OnChaseEnd
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       ChasedSurvivor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChaseTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHideNearKillerQEEvaluator::OnChaseEnd(class ADBDPlayer* ChasedSurvivor, float ChaseTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideNearKillerQEEvaluator", "OnChaseEnd");

	Params::HideNearKillerQEEvaluator_OnChaseEnd Parms{};

	Parms.ChasedSurvivor = ChasedSurvivor;
	Parms.ChaseTime = ChaseTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.HideNearKillerQEEvaluator.OnChaseStart
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       ChasedSurvivor                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHideNearKillerQEEvaluator::OnChaseStart(class ADBDPlayer* ChasedSurvivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideNearKillerQEEvaluator", "OnChaseStart");

	Params::HideNearKillerQEEvaluator_OnChaseStart Parms{};

	Parms.ChasedSurvivor = ChasedSurvivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.HideNearKillerQEEvaluator.OnFinishedPlaying
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHideNearKillerQEEvaluator::OnFinishedPlaying(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideNearKillerQEEvaluator", "OnFinishedPlaying");

	Params::HideNearKillerQEEvaluator_OnFinishedPlaying Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.HideNearKillerQEEvaluator.OnHarpoonHit
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHideNearKillerQEEvaluator::OnHarpoonHit(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideNearKillerQEEvaluator", "OnHarpoonHit");

	Params::HideNearKillerQEEvaluator_OnHarpoonHit Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.HideNearKillerQEEvaluator.OnSlashHarpoonedCamper
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UHideNearKillerQEEvaluator::OnSlashHarpoonedCamper(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HideNearKillerQEEvaluator", "OnSlashHarpoonedCamper");

	Params::HideNearKillerQEEvaluator_OnSlashHarpoonedCamper Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.MaxEventCountQEEvaluator.OnDecrementEventCount
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMaxEventCountQEEvaluator::OnDecrementEventCount(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaxEventCountQEEvaluator", "OnDecrementEventCount");

	Params::MaxEventCountQEEvaluator_OnDecrementEventCount Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.MaxEventCountQEEvaluator.OnIncrementEventCount
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMaxEventCountQEEvaluator::OnIncrementEventCount(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaxEventCountQEEvaluator", "OnIncrementEventCount");

	Params::MaxEventCountQEEvaluator_OnIncrementEventCount Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.MaxEventCountQEEvaluator.OnStopEventCount
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMaxEventCountQEEvaluator::OnStopEventCount(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MaxEventCountQEEvaluator", "OnStopEventCount");

	Params::MaxEventCountQEEvaluator_OnStopEventCount Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.SurvivorHookSameTimeQEEvaluator.OnSurvivorHooked
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USurvivorHookSameTimeQEEvaluator::OnSurvivorHooked(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorHookSameTimeQEEvaluator", "OnSurvivorHooked");

	Params::SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.SurvivorHookSameTimeQEEvaluator.OnSurvivorUnhooked
// (Native, Protected, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USurvivorHookSameTimeQEEvaluator::OnSurvivorUnhooked(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorHookSameTimeQEEvaluator", "OnSurvivorUnhooked");

	Params::SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.InLockerNearKillerQEEvaluator.OnClosetHideEnter
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UInLockerNearKillerQEEvaluator::OnClosetHideEnter(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InLockerNearKillerQEEvaluator", "OnClosetHideEnter");

	Params::InLockerNearKillerQEEvaluator_OnClosetHideEnter Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.InLockerNearKillerQEEvaluator.OnClosetHideExit
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UInLockerNearKillerQEEvaluator::OnClosetHideExit(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InLockerNearKillerQEEvaluator", "OnClosetHideExit");

	Params::InLockerNearKillerQEEvaluator_OnClosetHideExit Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ItemConsumedQEEvaluator.OnItemConsumed
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UItemConsumedQEEvaluator::OnItemConsumed(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemConsumedQEEvaluator", "OnItemConsumed");

	Params::ItemConsumedQEEvaluator_OnItemConsumed Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.ItemUsedQEEvaluator.OnItemUsed
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UItemUsedQEEvaluator::OnItemUsed(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemUsedQEEvaluator", "OnItemUsed");

	Params::ItemUsedQEEvaluator_OnItemUsed Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.LivingSurvivorsCountQEEvaluator.OnSurvivorAdded
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    SurvivorAdded                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULivingSurvivorsCountQEEvaluator::OnSurvivorAdded(class ACamperPlayer* SurvivorAdded)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LivingSurvivorsCountQEEvaluator", "OnSurvivorAdded");

	Params::LivingSurvivorsCountQEEvaluator_OnSurvivorAdded Parms{};

	Parms.SurvivorAdded = SurvivorAdded;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.LivingSurvivorsCountQEEvaluator.OnSurvivorRemoved
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    SurvivorRemoved                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULivingSurvivorsCountQEEvaluator::OnSurvivorRemoved(class ACamperPlayer* SurvivorRemoved)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LivingSurvivorsCountQEEvaluator", "OnSurvivorRemoved");

	Params::LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved Parms{};

	Parms.SurvivorRemoved = SurvivorRemoved;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Archives.NearTrackedActorComponent.OnIsWithinRangeChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    IsWithinRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TrackedActor                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNearTrackedActorComponent::OnIsWithinRangeChanged__DelegateSignature(bool IsWithinRange, const class AActor* TrackedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NearTrackedActorComponent", "OnIsWithinRangeChanged__DelegateSignature");

	Params::NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature Parms{};

	Parms.IsWithinRange = IsWithinRange;
	Parms.TrackedActor = TrackedActor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Archives.NearTrackedActorComponent.SetDistanceThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNearTrackedActorComponent::SetDistanceThreshold(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NearTrackedActorComponent", "SetDistanceThreshold");

	Params::NearTrackedActorComponent_SetDistanceThreshold Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.NearTrackedActorComponent.StartTrackingActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNearTrackedActorComponent::StartTrackingActor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NearTrackedActorComponent", "StartTrackingActor");

	Params::NearTrackedActorComponent_StartTrackingActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.NearTrackedActorComponent.StopTrackingActor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UNearTrackedActorComponent::StopTrackingActor(const class AActor* Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NearTrackedActorComponent", "StopTrackingActor");

	Params::NearTrackedActorComponent_StopTrackingActor Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.NearTrackedActorComponent.IsActorWithinRange
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AActor*                           Actor                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNearTrackedActorComponent::IsActorWithinRange(const class AActor* Actor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NearTrackedActorComponent", "IsActorWithinRange");

	Params::NearTrackedActorComponent_IsActorWithinRange Parms{};

	Parms.Actor = Actor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.OrangeGlyphComponent.Cosmetic_ApplyNegativeEffects
// (Final, BlueprintCosmetic, Native, Private)
// Parameters:
// class ADBDPlayer*                       AffectedPlayer                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOrangeGlyphComponent::Cosmetic_ApplyNegativeEffects(class ADBDPlayer* AffectedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OrangeGlyphComponent", "Cosmetic_ApplyNegativeEffects");

	Params::OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects Parms{};

	Parms.AffectedPlayer = AffectedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.Authority_OnDamageStateChanged
// (Final, Native, Private)
// Parameters:
// ECamperDamageState                      OldDamageState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECamperDamageState                      NewDamageState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPinkGlyphComponent::Authority_OnDamageStateChanged(ECamperDamageState OldDamageState, ECamperDamageState NewDamageState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "Authority_OnDamageStateChanged");

	Params::PinkGlyphComponent_Authority_OnDamageStateChanged Parms{};

	Parms.OldDamageState = OldDamageState;
	Parms.NewDamageState = NewDamageState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.Authority_OnLevelReadyToPlay
// (Final, Native, Private)

void UPinkGlyphComponent::Authority_OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "Authority_OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.Authority_OnPlayerBreachedRangeThreshold
// (Final, Native, Private)
// Parameters:
// bool                                    IsWithinRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TrackedActor                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPinkGlyphComponent::Authority_OnPlayerBreachedRangeThreshold(bool IsWithinRange, const class AActor* TrackedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "Authority_OnPlayerBreachedRangeThreshold");

	Params::PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold Parms{};

	Parms.IsWithinRange = IsWithinRange;
	Parms.TrackedActor = TrackedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.Authority_OnSurvivorInMovementRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPinkGlyphComponent::Authority_OnSurvivorInMovementRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "Authority_OnSurvivorInMovementRangeChanged");

	Params::PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.Authority_TeleportGlyph
// (Final, Native, Private)

void UPinkGlyphComponent::Authority_TeleportGlyph()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "Authority_TeleportGlyph");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.Multicast_EnterGlyphRange
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UPinkGlyphComponent::Multicast_EnterGlyphRange()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "Multicast_EnterGlyphRange");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.Multicast_IsFullyMarkedSurvivor
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UPinkGlyphComponent::Multicast_IsFullyMarkedSurvivor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "Multicast_IsFullyMarkedSurvivor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.Multicast_StartGlyphPreTeleport
// (Net, NetReliable, Native, Event, NetMulticast, Protected)

void UPinkGlyphComponent::Multicast_StartGlyphPreTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "Multicast_StartGlyphPreTeleport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.Multicast_TeleportGlyph
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPinkGlyphComponent::Multicast_TeleportGlyph(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "Multicast_TeleportGlyph");

	Params::PinkGlyphComponent_Multicast_TeleportGlyph Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Archives.PinkGlyphComponent.OnGlyphEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UPinkGlyphComponent::OnGlyphEvent__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "OnGlyphEvent__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction Archives.PinkGlyphComponent.OnMarkProgressChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPinkGlyphComponent::OnMarkProgressChanged__DelegateSignature(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "OnMarkProgressChanged__DelegateSignature");

	Params::PinkGlyphComponent_OnMarkProgressChanged__DelegateSignature Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Archives.PinkGlyphComponent.OnRep_MarkedProgress
// (Final, Native, Private)

void UPinkGlyphComponent::OnRep_MarkedProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "OnRep_MarkedProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.IsMarking
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPinkGlyphComponent::IsMarking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "IsMarking");

	Params::PinkGlyphComponent_IsMarking Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.PinkGlyphComponent.OnRep_HasLineOfSightToSurvivor
// (Final, Native, Private, Const)

void UPinkGlyphComponent::OnRep_HasLineOfSightToSurvivor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "OnRep_HasLineOfSightToSurvivor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.OnRep_IsMarking
// (Final, Native, Private, Const)

void UPinkGlyphComponent::OnRep_IsMarking() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "OnRep_IsMarking");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PinkGlyphComponent.OnRep_IsPinkGlyphActive
// (Final, Native, Private, Const)

void UPinkGlyphComponent::OnRep_IsPinkGlyphActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PinkGlyphComponent", "OnRep_IsPinkGlyphActive");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PreventExitGateOpenQEEvaluator.OnExitGateOpened
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UPreventExitGateOpenQEEvaluator::OnExitGateOpened(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PreventExitGateOpenQEEvaluator", "OnExitGateOpened");

	Params::PreventExitGateOpenQEEvaluator_OnExitGateOpened Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PurpleGlyphComponent.Authority_AbortMove
// (Final, Native, Public, BlueprintCallable)

void UPurpleGlyphComponent::Authority_AbortMove()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "Authority_AbortMove");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PurpleGlyphComponent.Authority_AbortMoveWithDeceleration
// (Final, Native, Public, BlueprintCallable)

void UPurpleGlyphComponent::Authority_AbortMoveWithDeceleration()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "Authority_AbortMoveWithDeceleration");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PurpleGlyphComponent.Authority_GetNextLocation
// (Final, Native, Private, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UPurpleGlyphComponent::Authority_GetNextLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "Authority_GetNextLocation");

	Params::PurpleGlyphComponent_Authority_GetNextLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.PurpleGlyphComponent.Authority_MoveTo
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPurpleGlyphComponent::Authority_MoveTo(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "Authority_MoveTo");

	Params::PurpleGlyphComponent_Authority_MoveTo Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PurpleGlyphComponent.Authority_StartMoveWithAcceleration
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          GoalLocation                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPurpleGlyphComponent::Authority_StartMoveWithAcceleration(const struct FVector& GoalLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "Authority_StartMoveWithAcceleration");

	Params::PurpleGlyphComponent_Authority_StartMoveWithAcceleration Parms{};

	Parms.GoalLocation = std::move(GoalLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PurpleGlyphComponent.GetTrackedPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ADBDPlayer*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADBDPlayer* UPurpleGlyphComponent::GetTrackedPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "GetTrackedPlayer");

	Params::PurpleGlyphComponent_GetTrackedPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.PurpleGlyphComponent.OnLevelReadyToPlay
// (Final, Native, Private)

void UPurpleGlyphComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.PurpleGlyphComponent.ResumeGlyphMovement
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseAcceleration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPurpleGlyphComponent::ResumeGlyphMovement(bool UseAcceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "ResumeGlyphMovement");

	Params::PurpleGlyphComponent_ResumeGlyphMovement Parms{};

	Parms.UseAcceleration = UseAcceleration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Archives.PurpleGlyphComponent.StartGlyphMovement
// (Event, Public, BlueprintCallable, BlueprintEvent)

void UPurpleGlyphComponent::StartGlyphMovement()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "StartGlyphMovement");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Archives.PurpleGlyphComponent.StopGlyphMovement
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    UseDeceleration                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPurpleGlyphComponent::StopGlyphMovement(bool UseDeceleration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "StopGlyphMovement");

	Params::PurpleGlyphComponent_StopGlyphMovement Parms{};

	Parms.UseDeceleration = UseDeceleration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Archives.PurpleGlyphComponent.GetOwningGlyph
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGlyph*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGlyph* UPurpleGlyphComponent::GetOwningGlyph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PurpleGlyphComponent", "GetOwningGlyph");

	Params::PurpleGlyphComponent_GetOwningGlyph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.QuestEventsHandler.DBD_InGameAddProgressionToCurrentQuest
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestEventsHandler::DBD_InGameAddProgressionToCurrentQuest(const int32 Amount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEventsHandler", "DBD_InGameAddProgressionToCurrentQuest");

	Params::QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest Parms{};

	Parms.Amount = Amount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.QuestEventsHandler.DBD_ShowInGameCurrentQuestInfos
// (Final, Exec, Native, Public)

void UQuestEventsHandler::DBD_ShowInGameCurrentQuestInfos()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEventsHandler", "DBD_ShowInGameCurrentQuestInfos");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.QuestEventsHandler.OnFinishedPlaying
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UQuestEventsHandler::OnFinishedPlaying(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEventsHandler", "OnFinishedPlaying");

	Params::QuestEventsHandler_OnFinishedPlaying Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.QuestEventsHandler.OnGameEnded
// (Final, Native, Private)
// Parameters:
// EEndGameReason                          Reason                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestEventsHandler::OnGameEnded(EEndGameReason Reason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEventsHandler", "OnGameEnded");

	Params::QuestEventsHandler_OnGameEnded Parms{};

	Parms.Reason = Reason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.QuestEventsHandler.OnPlayerGameStateChanged
// (Final, Native, Private)
// Parameters:
// class ADBDPlayerState*                  PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EGameState                              GameState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestEventsHandler::OnPlayerGameStateChanged(class ADBDPlayerState* PlayerState, EGameState GameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("QuestEventsHandler", "OnPlayerGameStateChanged");

	Params::QuestEventsHandler_OnPlayerGameStateChanged Parms{};

	Parms.PlayerState = PlayerState;
	Parms.GameState = GameState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.QuestEventsHandlerUtilities.InitializeQuestEventHandler
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UQuestEventsHandler*              QuestEventsHandler                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UQuestEventsHandlerUtilities::InitializeQuestEventHandler(class UQuestEventsHandler* QuestEventsHandler)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("QuestEventsHandlerUtilities", "InitializeQuestEventHandler");

	Params::QuestEventsHandlerUtilities_InitializeQuestEventHandler Parms{};

	Parms.QuestEventsHandler = QuestEventsHandler;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.SearchItemRarityQEEvaluator.OnItemSpawnedFromChest
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USearchItemRarityQEEvaluator::OnItemSpawnedFromChest(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SearchItemRarityQEEvaluator", "OnItemSpawnedFromChest");

	Params::SearchItemRarityQEEvaluator_OnItemSpawnedFromChest Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.WhiteGlyphSpawnerComponent.Authority_OnLevelReadyToPlay
// (Final, Native, Private)

void UWhiteGlyphSpawnerComponent::Authority_OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WhiteGlyphSpawnerComponent", "Authority_OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.WhiteGlyphSpawnerComponent.GetOwningGlyph
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGlyph*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGlyph* UWhiteGlyphSpawnerComponent::GetOwningGlyph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WhiteGlyphSpawnerComponent", "GetOwningGlyph");

	Params::WhiteGlyphSpawnerComponent_GetOwningGlyph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.YellowGlyphComponent.Authority_TeleportGlyph
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   MaxNumberOfTries                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UYellowGlyphComponent::Authority_TeleportGlyph(int32 MaxNumberOfTries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YellowGlyphComponent", "Authority_TeleportGlyph");

	Params::YellowGlyphComponent_Authority_TeleportGlyph Parms{};

	Parms.MaxNumberOfTries = MaxNumberOfTries;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Archives.YellowGlyphComponent.Multicast_TeleportGlyph
// (Net, NetReliable, Native, Event, NetMulticast, Protected, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UYellowGlyphComponent::Multicast_TeleportGlyph(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YellowGlyphComponent", "Multicast_TeleportGlyph");

	Params::YellowGlyphComponent_Multicast_TeleportGlyph Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Archives.YellowGlyphComponent.OnLevelReadyToPlay
// (Final, Native, Private)

void UYellowGlyphComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YellowGlyphComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Archives.YellowGlyphComponent.StartGlyphPostTeleportVFX
// (Event, Protected, BlueprintEvent)

void UYellowGlyphComponent::StartGlyphPostTeleportVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YellowGlyphComponent", "StartGlyphPostTeleportVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Archives.YellowGlyphComponent.StartGlyphPreTeleportVFX
// (Event, Protected, BlueprintEvent)

void UYellowGlyphComponent::StartGlyphPreTeleportVFX()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YellowGlyphComponent", "StartGlyphPreTeleportVFX");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Archives.YellowGlyphComponent.GetOwningGlyph
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AGlyph*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AGlyph* UYellowGlyphComponent::GetOwningGlyph() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("YellowGlyphComponent", "GetOwningGlyph");

	Params::YellowGlyphComponent_GetOwningGlyph Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

