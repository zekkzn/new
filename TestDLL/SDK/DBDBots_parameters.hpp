#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDBots

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"


namespace SDK::Params
{

// Function DBDBots.DBDAIBTController.OnPawnBump
// 0x0118 (0x0118 - 0x0000)
struct DBDAIBTController_OnPawnBump final
{
public:
	class AActor*                                 SelfActor;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0010(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0028(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIBTController_OnPawnBump) == 0x000008, "Wrong alignment on DBDAIBTController_OnPawnBump");
static_assert(sizeof(DBDAIBTController_OnPawnBump) == 0x000118, "Wrong size on DBDAIBTController_OnPawnBump");
static_assert(offsetof(DBDAIBTController_OnPawnBump, SelfActor) == 0x000000, "Member 'DBDAIBTController_OnPawnBump::SelfActor' has a wrong offset!");
static_assert(offsetof(DBDAIBTController_OnPawnBump, OtherActor) == 0x000008, "Member 'DBDAIBTController_OnPawnBump::OtherActor' has a wrong offset!");
static_assert(offsetof(DBDAIBTController_OnPawnBump, NormalImpulse) == 0x000010, "Member 'DBDAIBTController_OnPawnBump::NormalImpulse' has a wrong offset!");
static_assert(offsetof(DBDAIBTController_OnPawnBump, Hit) == 0x000028, "Member 'DBDAIBTController_OnPawnBump::Hit' has a wrong offset!");

// Function DBDBots.AISkill_DirectionalMinigame.OnMinigameEnd
// 0x0001 (0x0001 - 0x0000)
struct AISkill_DirectionalMinigame_OnMinigameEnd final
{
public:
	EDirectionalMinigameResult                    Result;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AISkill_DirectionalMinigame_OnMinigameEnd) == 0x000001, "Wrong alignment on AISkill_DirectionalMinigame_OnMinigameEnd");
static_assert(sizeof(AISkill_DirectionalMinigame_OnMinigameEnd) == 0x000001, "Wrong size on AISkill_DirectionalMinigame_OnMinigameEnd");
static_assert(offsetof(AISkill_DirectionalMinigame_OnMinigameEnd, Result) == 0x000000, "Member 'AISkill_DirectionalMinigame_OnMinigameEnd::Result' has a wrong offset!");

// Function DBDBots.AISkill_DirectionalMinigame.OnMinigameStart
// 0x0018 (0x0018 - 0x0000)
struct AISkill_DirectionalMinigame_OnMinigameStart final
{
public:
	TArray<EDirectionalInputKey>                  Sequence;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CurrentIndex;                                      // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AISkill_DirectionalMinigame_OnMinigameStart) == 0x000008, "Wrong alignment on AISkill_DirectionalMinigame_OnMinigameStart");
static_assert(sizeof(AISkill_DirectionalMinigame_OnMinigameStart) == 0x000018, "Wrong size on AISkill_DirectionalMinigame_OnMinigameStart");
static_assert(offsetof(AISkill_DirectionalMinigame_OnMinigameStart, Sequence) == 0x000000, "Member 'AISkill_DirectionalMinigame_OnMinigameStart::Sequence' has a wrong offset!");
static_assert(offsetof(AISkill_DirectionalMinigame_OnMinigameStart, CurrentIndex) == 0x000010, "Member 'AISkill_DirectionalMinigame_OnMinigameStart::CurrentIndex' has a wrong offset!");

// Function DBDBots.DBDAIStateComponent.OnSpecialAttackEventDispatched
// 0x0040 (0x0040 - 0x0000)
struct DBDAIStateComponent_OnSpecialAttackEventDispatched final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIStateComponent_OnSpecialAttackEventDispatched) == 0x000008, "Wrong alignment on DBDAIStateComponent_OnSpecialAttackEventDispatched");
static_assert(sizeof(DBDAIStateComponent_OnSpecialAttackEventDispatched) == 0x000040, "Wrong size on DBDAIStateComponent_OnSpecialAttackEventDispatched");
static_assert(offsetof(DBDAIStateComponent_OnSpecialAttackEventDispatched, GameEventType) == 0x000000, "Member 'DBDAIStateComponent_OnSpecialAttackEventDispatched::GameEventType' has a wrong offset!");
static_assert(offsetof(DBDAIStateComponent_OnSpecialAttackEventDispatched, GameEventData) == 0x000010, "Member 'DBDAIStateComponent_OnSpecialAttackEventDispatched::GameEventData' has a wrong offset!");

// Function DBDBots.DBDAIStateComponent.OnStartAimingEventDispatched
// 0x0040 (0x0040 - 0x0000)
struct DBDAIStateComponent_OnStartAimingEventDispatched final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIStateComponent_OnStartAimingEventDispatched) == 0x000008, "Wrong alignment on DBDAIStateComponent_OnStartAimingEventDispatched");
static_assert(sizeof(DBDAIStateComponent_OnStartAimingEventDispatched) == 0x000040, "Wrong size on DBDAIStateComponent_OnStartAimingEventDispatched");
static_assert(offsetof(DBDAIStateComponent_OnStartAimingEventDispatched, GameEventType) == 0x000000, "Member 'DBDAIStateComponent_OnStartAimingEventDispatched::GameEventType' has a wrong offset!");
static_assert(offsetof(DBDAIStateComponent_OnStartAimingEventDispatched, GameEventData) == 0x000010, "Member 'DBDAIStateComponent_OnStartAimingEventDispatched::GameEventData' has a wrong offset!");

// Function DBDBots.DBDAIStateComponent.OnUniqueGameplayEvent
// 0x0018 (0x0018 - 0x0000)
struct DBDAIStateComponent_OnUniqueGameplayEvent final
{
public:
	EDBDScoreTypes                                EventType;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Amount;                                            // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Target;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDAIStateComponent_OnUniqueGameplayEvent) == 0x000008, "Wrong alignment on DBDAIStateComponent_OnUniqueGameplayEvent");
static_assert(sizeof(DBDAIStateComponent_OnUniqueGameplayEvent) == 0x000018, "Wrong size on DBDAIStateComponent_OnUniqueGameplayEvent");
static_assert(offsetof(DBDAIStateComponent_OnUniqueGameplayEvent, EventType) == 0x000000, "Member 'DBDAIStateComponent_OnUniqueGameplayEvent::EventType' has a wrong offset!");
static_assert(offsetof(DBDAIStateComponent_OnUniqueGameplayEvent, Amount) == 0x000004, "Member 'DBDAIStateComponent_OnUniqueGameplayEvent::Amount' has a wrong offset!");
static_assert(offsetof(DBDAIStateComponent_OnUniqueGameplayEvent, Instigator) == 0x000008, "Member 'DBDAIStateComponent_OnUniqueGameplayEvent::Instigator' has a wrong offset!");
static_assert(offsetof(DBDAIStateComponent_OnUniqueGameplayEvent, Target) == 0x000010, "Member 'DBDAIStateComponent_OnUniqueGameplayEvent::Target' has a wrong offset!");

// Function DBDBots.NavLinkProxy_Base.OnSmartLinkReachedCallback
// 0x0020 (0x0020 - 0x0000)
struct NavLinkProxy_Base_OnSmartLinkReachedCallback final
{
public:
	class AActor*                                 MovingActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DestinationPoint;                                  // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NavLinkProxy_Base_OnSmartLinkReachedCallback) == 0x000008, "Wrong alignment on NavLinkProxy_Base_OnSmartLinkReachedCallback");
static_assert(sizeof(NavLinkProxy_Base_OnSmartLinkReachedCallback) == 0x000020, "Wrong size on NavLinkProxy_Base_OnSmartLinkReachedCallback");
static_assert(offsetof(NavLinkProxy_Base_OnSmartLinkReachedCallback, MovingActor) == 0x000000, "Member 'NavLinkProxy_Base_OnSmartLinkReachedCallback::MovingActor' has a wrong offset!");
static_assert(offsetof(NavLinkProxy_Base_OnSmartLinkReachedCallback, DestinationPoint) == 0x000008, "Member 'NavLinkProxy_Base_OnSmartLinkReachedCallback::DestinationPoint' has a wrong offset!");

}

