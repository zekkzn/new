#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDProceduralCamera

#include "Basic.hpp"

#include "DBDProceduralCamera_classes.hpp"
#include "DBDProceduralCamera_parameters.hpp"


namespace SDK
{

// Function DBDProceduralCamera.ProceduralCameraRaD.BeginCinematic
// (Final, Native, Public)

void AProceduralCameraRaD::BeginCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "BeginCinematic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDProceduralCamera.ProceduralCameraRaD.ComputeTrackObstructionScore
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FCameraShot                      CameraShot                                             (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)

void AProceduralCameraRaD::ComputeTrackObstructionScore(struct FCameraShot* CameraShot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "ComputeTrackObstructionScore");

	Params::ProceduralCameraRaD_ComputeTrackObstructionScore Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CameraShot != nullptr)
		*CameraShot = std::move(Parms.CameraShot);
}


// Function DBDProceduralCamera.ProceduralCameraRaD.OnCameraTransition
// (Event, Public, BlueprintEvent)
// Parameters:
// float                                   TransitionDuration                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   BeginAt                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AProceduralCameraRaD::OnCameraTransition(float TransitionDuration, float BeginAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "OnCameraTransition");

	Params::ProceduralCameraRaD_OnCameraTransition Parms{};

	Parms.TransitionDuration = TransitionDuration;
	Parms.BeginAt = BeginAt;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDProceduralCamera.ProceduralCameraRaD.PlayCinematic
// (Final, Native, Private)

void AProceduralCameraRaD::PlayCinematic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "PlayCinematic");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDProceduralCamera.ProceduralCameraRaD.SelectTracks
// (Final, Native, Public)

void AProceduralCameraRaD::SelectTracks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProceduralCameraRaD", "SelectTracks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

