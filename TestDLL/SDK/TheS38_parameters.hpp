#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheS38

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function TheS38.S38P01.Authority_OnPerkActivated
// 0x0040 (0x0040 - 0x0000)
struct S38P01_Authority_OnPerkActivated final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P01_Authority_OnPerkActivated) == 0x000008, "Wrong alignment on S38P01_Authority_OnPerkActivated");
static_assert(sizeof(S38P01_Authority_OnPerkActivated) == 0x000040, "Wrong size on S38P01_Authority_OnPerkActivated");
static_assert(offsetof(S38P01_Authority_OnPerkActivated, GameEventType) == 0x000000, "Member 'S38P01_Authority_OnPerkActivated::GameEventType' has a wrong offset!");
static_assert(offsetof(S38P01_Authority_OnPerkActivated, GameEventData) == 0x000010, "Member 'S38P01_Authority_OnPerkActivated::GameEventData' has a wrong offset!");

// Function TheS38.S38P01.Multicast_OnSecondaryPerkEffect
// 0x0001 (0x0001 - 0x0000)
struct S38P01_Multicast_OnSecondaryPerkEffect final
{
public:
	bool                                          ShouldScream;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P01_Multicast_OnSecondaryPerkEffect) == 0x000001, "Wrong alignment on S38P01_Multicast_OnSecondaryPerkEffect");
static_assert(sizeof(S38P01_Multicast_OnSecondaryPerkEffect) == 0x000001, "Wrong size on S38P01_Multicast_OnSecondaryPerkEffect");
static_assert(offsetof(S38P01_Multicast_OnSecondaryPerkEffect, ShouldScream) == 0x000000, "Member 'S38P01_Multicast_OnSecondaryPerkEffect::ShouldScream' has a wrong offset!");

// Function TheS38.S38P01.GetCollectableClasses
// 0x0010 (0x0010 - 0x0000)
struct S38P01_GetCollectableClasses final
{
public:
	TArray<TSubclassOf<class ACollectable>>       ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P01_GetCollectableClasses) == 0x000008, "Wrong alignment on S38P01_GetCollectableClasses");
static_assert(sizeof(S38P01_GetCollectableClasses) == 0x000010, "Wrong size on S38P01_GetCollectableClasses");
static_assert(offsetof(S38P01_GetCollectableClasses, ReturnValue) == 0x000000, "Member 'S38P01_GetCollectableClasses::ReturnValue' has a wrong offset!");

// Function TheS38.S38P01.GetExhaustionDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct S38P01_GetExhaustionDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P01_GetExhaustionDurationAtLevel) == 0x000004, "Wrong alignment on S38P01_GetExhaustionDurationAtLevel");
static_assert(sizeof(S38P01_GetExhaustionDurationAtLevel) == 0x000004, "Wrong size on S38P01_GetExhaustionDurationAtLevel");
static_assert(offsetof(S38P01_GetExhaustionDurationAtLevel, ReturnValue) == 0x000000, "Member 'S38P01_GetExhaustionDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheS38.S38P01.GetExposedDuration
// 0x0004 (0x0004 - 0x0000)
struct S38P01_GetExposedDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P01_GetExposedDuration) == 0x000004, "Wrong alignment on S38P01_GetExposedDuration");
static_assert(sizeof(S38P01_GetExposedDuration) == 0x000004, "Wrong size on S38P01_GetExposedDuration");
static_assert(offsetof(S38P01_GetExposedDuration, ReturnValue) == 0x000000, "Member 'S38P01_GetExposedDuration::ReturnValue' has a wrong offset!");

// Function TheS38.S38P01.GetHasteAmount
// 0x0004 (0x0004 - 0x0000)
struct S38P01_GetHasteAmount final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P01_GetHasteAmount) == 0x000004, "Wrong alignment on S38P01_GetHasteAmount");
static_assert(sizeof(S38P01_GetHasteAmount) == 0x000004, "Wrong size on S38P01_GetHasteAmount");
static_assert(offsetof(S38P01_GetHasteAmount, ReturnValue) == 0x000000, "Member 'S38P01_GetHasteAmount::ReturnValue' has a wrong offset!");

// Function TheS38.S38P01.GetHasteDuration
// 0x0004 (0x0004 - 0x0000)
struct S38P01_GetHasteDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P01_GetHasteDuration) == 0x000004, "Wrong alignment on S38P01_GetHasteDuration");
static_assert(sizeof(S38P01_GetHasteDuration) == 0x000004, "Wrong size on S38P01_GetHasteDuration");
static_assert(offsetof(S38P01_GetHasteDuration, ReturnValue) == 0x000000, "Member 'S38P01_GetHasteDuration::ReturnValue' has a wrong offset!");

// Function TheS38.S38P01.GetUnsupportedItemAddons
// 0x0010 (0x0010 - 0x0000)
struct S38P01_GetUnsupportedItemAddons final
{
public:
	TArray<class FName>                           ReturnValue;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P01_GetUnsupportedItemAddons) == 0x000008, "Wrong alignment on S38P01_GetUnsupportedItemAddons");
static_assert(sizeof(S38P01_GetUnsupportedItemAddons) == 0x000010, "Wrong size on S38P01_GetUnsupportedItemAddons");
static_assert(offsetof(S38P01_GetUnsupportedItemAddons, ReturnValue) == 0x000000, "Member 'S38P01_GetUnsupportedItemAddons::ReturnValue' has a wrong offset!");

// Function TheS38.S38P02.Authority_OnIsApplicableChanged
// 0x0010 (0x0010 - 0x0000)
struct S38P02_Authority_OnIsApplicableChanged final
{
public:
	class UGameplayModifierContainer*             Container;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Param_IsApplicable;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(S38P02_Authority_OnIsApplicableChanged) == 0x000008, "Wrong alignment on S38P02_Authority_OnIsApplicableChanged");
static_assert(sizeof(S38P02_Authority_OnIsApplicableChanged) == 0x000010, "Wrong size on S38P02_Authority_OnIsApplicableChanged");
static_assert(offsetof(S38P02_Authority_OnIsApplicableChanged, Container) == 0x000000, "Member 'S38P02_Authority_OnIsApplicableChanged::Container' has a wrong offset!");
static_assert(offsetof(S38P02_Authority_OnIsApplicableChanged, Param_IsApplicable) == 0x000008, "Member 'S38P02_Authority_OnIsApplicableChanged::Param_IsApplicable' has a wrong offset!");

// Function TheS38.S38P02.Multicast_MakeSurvivorScream
// 0x0004 (0x0004 - 0x0000)
struct S38P02_Multicast_MakeSurvivorScream final
{
public:
	int32                                         TimesToScream;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P02_Multicast_MakeSurvivorScream) == 0x000004, "Wrong alignment on S38P02_Multicast_MakeSurvivorScream");
static_assert(sizeof(S38P02_Multicast_MakeSurvivorScream) == 0x000004, "Wrong size on S38P02_Multicast_MakeSurvivorScream");
static_assert(offsetof(S38P02_Multicast_MakeSurvivorScream, TimesToScream) == 0x000000, "Member 'S38P02_Multicast_MakeSurvivorScream::TimesToScream' has a wrong offset!");

// Function TheS38.S38P02.GetAuraDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct S38P02_GetAuraDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P02_GetAuraDurationAtLevel) == 0x000004, "Wrong alignment on S38P02_GetAuraDurationAtLevel");
static_assert(sizeof(S38P02_GetAuraDurationAtLevel) == 0x000004, "Wrong size on S38P02_GetAuraDurationAtLevel");
static_assert(offsetof(S38P02_GetAuraDurationAtLevel, ReturnValue) == 0x000000, "Member 'S38P02_GetAuraDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheS38.S38P02.GetCooldownDuration
// 0x0004 (0x0004 - 0x0000)
struct S38P02_GetCooldownDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P02_GetCooldownDuration) == 0x000004, "Wrong alignment on S38P02_GetCooldownDuration");
static_assert(sizeof(S38P02_GetCooldownDuration) == 0x000004, "Wrong size on S38P02_GetCooldownDuration");
static_assert(offsetof(S38P02_GetCooldownDuration, ReturnValue) == 0x000000, "Member 'S38P02_GetCooldownDuration::ReturnValue' has a wrong offset!");

// Function TheS38.S38P02.GetExtraAuraDurationPerExtraScream
// 0x0004 (0x0004 - 0x0000)
struct S38P02_GetExtraAuraDurationPerExtraScream final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P02_GetExtraAuraDurationPerExtraScream) == 0x000004, "Wrong alignment on S38P02_GetExtraAuraDurationPerExtraScream");
static_assert(sizeof(S38P02_GetExtraAuraDurationPerExtraScream) == 0x000004, "Wrong size on S38P02_GetExtraAuraDurationPerExtraScream");
static_assert(offsetof(S38P02_GetExtraAuraDurationPerExtraScream, ReturnValue) == 0x000000, "Member 'S38P02_GetExtraAuraDurationPerExtraScream::ReturnValue' has a wrong offset!");

// Function TheS38.S38P02.GetMaxRandomScreamDelay
// 0x0004 (0x0004 - 0x0000)
struct S38P02_GetMaxRandomScreamDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P02_GetMaxRandomScreamDelay) == 0x000004, "Wrong alignment on S38P02_GetMaxRandomScreamDelay");
static_assert(sizeof(S38P02_GetMaxRandomScreamDelay) == 0x000004, "Wrong size on S38P02_GetMaxRandomScreamDelay");
static_assert(offsetof(S38P02_GetMaxRandomScreamDelay, ReturnValue) == 0x000000, "Member 'S38P02_GetMaxRandomScreamDelay::ReturnValue' has a wrong offset!");

// Function TheS38.S38P02.GetMaxScreamCount
// 0x0004 (0x0004 - 0x0000)
struct S38P02_GetMaxScreamCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P02_GetMaxScreamCount) == 0x000004, "Wrong alignment on S38P02_GetMaxScreamCount");
static_assert(sizeof(S38P02_GetMaxScreamCount) == 0x000004, "Wrong size on S38P02_GetMaxScreamCount");
static_assert(offsetof(S38P02_GetMaxScreamCount, ReturnValue) == 0x000000, "Member 'S38P02_GetMaxScreamCount::ReturnValue' has a wrong offset!");

// Function TheS38.S38P02.GetMinRandomScreamDelay
// 0x0004 (0x0004 - 0x0000)
struct S38P02_GetMinRandomScreamDelay final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P02_GetMinRandomScreamDelay) == 0x000004, "Wrong alignment on S38P02_GetMinRandomScreamDelay");
static_assert(sizeof(S38P02_GetMinRandomScreamDelay) == 0x000004, "Wrong size on S38P02_GetMinRandomScreamDelay");
static_assert(offsetof(S38P02_GetMinRandomScreamDelay, ReturnValue) == 0x000000, "Member 'S38P02_GetMinRandomScreamDelay::ReturnValue' has a wrong offset!");

// Function TheS38.S38P02.GetScreamDuration
// 0x0004 (0x0004 - 0x0000)
struct S38P02_GetScreamDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P02_GetScreamDuration) == 0x000004, "Wrong alignment on S38P02_GetScreamDuration");
static_assert(sizeof(S38P02_GetScreamDuration) == 0x000004, "Wrong size on S38P02_GetScreamDuration");
static_assert(offsetof(S38P02_GetScreamDuration, ReturnValue) == 0x000000, "Member 'S38P02_GetScreamDuration::ReturnValue' has a wrong offset!");

// Function TheS38.S38P03.Authority_OnExitGatesPowered
// 0x0040 (0x0040 - 0x0000)
struct S38P03_Authority_OnExitGatesPowered final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P03_Authority_OnExitGatesPowered) == 0x000008, "Wrong alignment on S38P03_Authority_OnExitGatesPowered");
static_assert(sizeof(S38P03_Authority_OnExitGatesPowered) == 0x000040, "Wrong size on S38P03_Authority_OnExitGatesPowered");
static_assert(offsetof(S38P03_Authority_OnExitGatesPowered, GameEventType) == 0x000000, "Member 'S38P03_Authority_OnExitGatesPowered::GameEventType' has a wrong offset!");
static_assert(offsetof(S38P03_Authority_OnExitGatesPowered, GameEventData) == 0x000010, "Member 'S38P03_Authority_OnExitGatesPowered::GameEventData' has a wrong offset!");

// Function TheS38.S38P03.Authority_OnPerkActivated
// 0x0040 (0x0040 - 0x0000)
struct S38P03_Authority_OnPerkActivated final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P03_Authority_OnPerkActivated) == 0x000008, "Wrong alignment on S38P03_Authority_OnPerkActivated");
static_assert(sizeof(S38P03_Authority_OnPerkActivated) == 0x000040, "Wrong size on S38P03_Authority_OnPerkActivated");
static_assert(offsetof(S38P03_Authority_OnPerkActivated, GameEventType) == 0x000000, "Member 'S38P03_Authority_OnPerkActivated::GameEventType' has a wrong offset!");
static_assert(offsetof(S38P03_Authority_OnPerkActivated, GameEventData) == 0x000010, "Member 'S38P03_Authority_OnPerkActivated::GameEventData' has a wrong offset!");

// Function TheS38.S38P03.Authority_OnPickSelfUp
// 0x0040 (0x0040 - 0x0000)
struct S38P03_Authority_OnPickSelfUp final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P03_Authority_OnPickSelfUp) == 0x000008, "Wrong alignment on S38P03_Authority_OnPickSelfUp");
static_assert(sizeof(S38P03_Authority_OnPickSelfUp) == 0x000040, "Wrong size on S38P03_Authority_OnPickSelfUp");
static_assert(offsetof(S38P03_Authority_OnPickSelfUp, GameplayTag) == 0x000000, "Member 'S38P03_Authority_OnPickSelfUp::GameplayTag' has a wrong offset!");
static_assert(offsetof(S38P03_Authority_OnPickSelfUp, GameEventData) == 0x000010, "Member 'S38P03_Authority_OnPickSelfUp::GameEventData' has a wrong offset!");

// Function TheS38.S38P03.GetHasteDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct S38P03_GetHasteDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P03_GetHasteDurationAtLevel) == 0x000004, "Wrong alignment on S38P03_GetHasteDurationAtLevel");
static_assert(sizeof(S38P03_GetHasteDurationAtLevel) == 0x000004, "Wrong size on S38P03_GetHasteDurationAtLevel");
static_assert(offsetof(S38P03_GetHasteDurationAtLevel, ReturnValue) == 0x000000, "Member 'S38P03_GetHasteDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheS38.S38P03OnGroundStatusEffect.Authority_OnCamperHealthChange
// 0x0002 (0x0002 - 0x0000)
struct S38P03OnGroundStatusEffect_Authority_OnCamperHealthChange final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            NewDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P03OnGroundStatusEffect_Authority_OnCamperHealthChange) == 0x000001, "Wrong alignment on S38P03OnGroundStatusEffect_Authority_OnCamperHealthChange");
static_assert(sizeof(S38P03OnGroundStatusEffect_Authority_OnCamperHealthChange) == 0x000002, "Wrong size on S38P03OnGroundStatusEffect_Authority_OnCamperHealthChange");
static_assert(offsetof(S38P03OnGroundStatusEffect_Authority_OnCamperHealthChange, OldDamageState) == 0x000000, "Member 'S38P03OnGroundStatusEffect_Authority_OnCamperHealthChange::OldDamageState' has a wrong offset!");
static_assert(offsetof(S38P03OnGroundStatusEffect_Authority_OnCamperHealthChange, NewDamageState) == 0x000001, "Member 'S38P03OnGroundStatusEffect_Authority_OnCamperHealthChange::NewDamageState' has a wrong offset!");

// Function TheS38.S38P03OnGroundStatusEffect.Authority_OnPickSelfUp
// 0x0040 (0x0040 - 0x0000)
struct S38P03OnGroundStatusEffect_Authority_OnPickSelfUp final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(S38P03OnGroundStatusEffect_Authority_OnPickSelfUp) == 0x000008, "Wrong alignment on S38P03OnGroundStatusEffect_Authority_OnPickSelfUp");
static_assert(sizeof(S38P03OnGroundStatusEffect_Authority_OnPickSelfUp) == 0x000040, "Wrong size on S38P03OnGroundStatusEffect_Authority_OnPickSelfUp");
static_assert(offsetof(S38P03OnGroundStatusEffect_Authority_OnPickSelfUp, GameEventType) == 0x000000, "Member 'S38P03OnGroundStatusEffect_Authority_OnPickSelfUp::GameEventType' has a wrong offset!");
static_assert(offsetof(S38P03OnGroundStatusEffect_Authority_OnPickSelfUp, GameEventData) == 0x000010, "Member 'S38P03OnGroundStatusEffect_Authority_OnPickSelfUp::GameEventData' has a wrong offset!");

}

