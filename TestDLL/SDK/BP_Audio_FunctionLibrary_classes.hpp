#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Audio_FunctionLibrary

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Audio_FunctionLibrary.BP_Audio_FunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class UBP_Audio_FunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void Audio_Character_LocallyObserved(class AActor* Actor, class UObject* __WorldContext);
	static void Audio_Footstep_GetMaterial(class ADBDBasePlayer* Player, class UAkComponent* AkComponent, class UObject* __WorldContext);
	static void Audio_Generator_Occlusion_Activate(class UAkComponent* AkComponent, class AActor* Player, class UObject* __WorldContext);
	static void Audio_Generator_Occlusion_Deactivate(class UAkComponent* AkComponent, class AActor* Player, class UObject* __WorldContext);
	static void Audio_Haptic_LocallyObserved(class AActor* Actor, class UObject* __WorldContext);
	static void Audio_K20_Weapon_Scrap(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_K34_Distraction_Footstep_Only(class UAkAudioEvent* AkAudioEvent, class ABP_K34TipToeDistraction_C* K34Distraction, class UObject* __WorldContext);
	static void Audio_Killer_Cloth_Land(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Cloth_Move(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Cloth_ShuffleAttack(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Cloth_ShuffleHigh(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Cloth_ShuffleLow(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Cloth_Spawning(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Cloth_TurnAround(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Left(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Left_Front(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Land_Dog(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Left(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Left_Back(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Left_Back_Dog(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Left_Front(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Left_Front_Dog(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Right(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Right_Back(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Right_Back_Dog(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Right_Front(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Right_Front_Dog(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Only_Shuffle_Dog(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Right(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Footstep_Right_Front(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Grunt(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Post_AkEvent(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Post_AkEvent_2D_3D(class AActor* Player, class UAkAudioEvent* AkEvent_KLR, class UAkAudioEvent* AkEvent_SVR, class UAkGameObject* Target, class UObject* __WorldContext);
	static void Audio_Killer_Setup(class UAkComponent* AudioComponent, class FName AudioStateKiller, class UAkAudioEvent* StartEvent, class UObject* __WorldContext);
	static void Audio_Killer_Stinger(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Surface_Impact(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Weapon(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Weapon_Arm(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Weapon_Attack(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Weapon_Attack_Carry(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Weapon_Clean(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Weapon_Cooldown(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Weapon_Impact(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Weapon_Impact_Survivor(class ADBDBasePlayer* Camper, class ADBDBasePlayer* Slasher, class UObject* __WorldContext);
	static void Audio_Killer_Weapon_K36_Power_Cancel(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Killer_Weapon_PullOut(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Player_LocallyObserved(class AActor* Player, class UObject* __WorldContext, bool* IsLocallyObserved);
	static void Audio_Survivor_Body(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Dead(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Footstep_Left(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Footstep_Right(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Cough(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Effort_Hard(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Effort_Light(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Hurt_Hard(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Hurt_Light(class ADBDBasePlayer* Player, class UObject* __WorldContext, bool* Return_Value);
	static void Audio_Survivor_Grunt_Hurt_Light_Hooked(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Hurt_Light_Wiggle(class ADBDBasePlayer* Player, class UObject* __WorldContext, bool* Return_Value);
	static void Audio_Survivor_Grunt_Insanity(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Insanity_SnapOfIt(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Scream_Hit(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Scream_Hit_Mori(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Scream_Long(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Scream_Long_Mori(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Scream_Long_Mori_K28(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Scream_Scare(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Scream_Scare2d(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Scream_Short_K28(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Grunt_Stop(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Post_AkEvent(class UAkAudioEvent* Ak_Audio_Event, class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Status(const class FString& AK_Audio_State, class ADBDBasePlayer* Player, class UObject* __WorldContext, class FString* Audio_State);
	static void Audio_Survivor_Status_Start(class ADBDBasePlayer* Player, class UObject* __WorldContext);
	static void Audio_Survivor_Status_Stop(class ADBDBasePlayer* Player, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Audio_FunctionLibrary_C">();
	}
	static class UBP_Audio_FunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBP_Audio_FunctionLibrary_C>();
	}
};
static_assert(alignof(UBP_Audio_FunctionLibrary_C) == 0x000008, "Wrong alignment on UBP_Audio_FunctionLibrary_C");
static_assert(sizeof(UBP_Audio_FunctionLibrary_C) == 0x000030, "Wrong size on UBP_Audio_FunctionLibrary_C");

}

