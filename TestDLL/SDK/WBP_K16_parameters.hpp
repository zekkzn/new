#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_K16

#include "Basic.hpp"

#include "UMG_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"


namespace SDK::Params
{

// Function WBP_K16.WBP_K16_C.SetKillerData
// 0x0098 (0x0098 - 0x0000)
struct WBP_K16_C_SetKillerData final
{
public:
	struct FPlayerStatusViewData                  Data;                                              // 0x0000(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_K16_C_SetKillerData) == 0x000008, "Wrong alignment on WBP_K16_C_SetKillerData");
static_assert(sizeof(WBP_K16_C_SetKillerData) == 0x000098, "Wrong size on WBP_K16_C_SetKillerData");
static_assert(offsetof(WBP_K16_C_SetKillerData, Data) == 0x000000, "Member 'WBP_K16_C_SetKillerData::Data' has a wrong offset!");

// Function WBP_K16.WBP_K16_C.SetGhostVisibility
// 0x000B (0x000B - 0x0000)
struct WBP_K16_C_SetGhostVisibility final
{
public:
	bool                                          IsLocalKiller;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsExposed;                                         // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Param_IsVisible;                                   // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K16_C_SetGhostVisibility) == 0x000001, "Wrong alignment on WBP_K16_C_SetGhostVisibility");
static_assert(sizeof(WBP_K16_C_SetGhostVisibility) == 0x00000B, "Wrong size on WBP_K16_C_SetGhostVisibility");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, IsLocalKiller) == 0x000000, "Member 'WBP_K16_C_SetGhostVisibility::IsLocalKiller' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, IsExposed) == 0x000001, "Member 'WBP_K16_C_SetGhostVisibility::IsExposed' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, Param_IsVisible) == 0x000002, "Member 'WBP_K16_C_SetGhostVisibility::Param_IsVisible' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, Temp_bool_Variable) == 0x000003, "Member 'WBP_K16_C_SetGhostVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, Temp_byte_Variable) == 0x000004, "Member 'WBP_K16_C_SetGhostVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_K16_C_SetGhostVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, Temp_bool_Variable_1) == 0x000006, "Member 'WBP_K16_C_SetGhostVisibility::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, K2Node_Select_Default) == 0x000007, "Member 'WBP_K16_C_SetGhostVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, Temp_byte_Variable_2) == 0x000008, "Member 'WBP_K16_C_SetGhostVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, Temp_byte_Variable_3) == 0x000009, "Member 'WBP_K16_C_SetGhostVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostVisibility, K2Node_Select_Default_1) == 0x00000A, "Member 'WBP_K16_C_SetGhostVisibility::K2Node_Select_Default_1' has a wrong offset!");

// Function WBP_K16.WBP_K16_C.SetGhostData
// 0x0030 (0x0030 - 0x0000)
struct WBP_K16_C_SetGhostData final
{
public:
	bool                                          IsLocalKiller;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGhostfaceStatusData*                   KillerData;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_FloatFloat_ReturnValue;         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K16_C_SetGhostData) == 0x000008, "Wrong alignment on WBP_K16_C_SetGhostData");
static_assert(sizeof(WBP_K16_C_SetGhostData) == 0x000030, "Wrong size on WBP_K16_C_SetGhostData");
static_assert(offsetof(WBP_K16_C_SetGhostData, IsLocalKiller) == 0x000000, "Member 'WBP_K16_C_SetGhostData::IsLocalKiller' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostData, KillerData) == 0x000008, "Member 'WBP_K16_C_SetGhostData::KillerData' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostData, CallFunc_LessEqual_FloatFloat_ReturnValue) == 0x000010, "Member 'WBP_K16_C_SetGhostData::CallFunc_LessEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostData, CallFunc_PlayAnimation_ReturnValue) == 0x000018, "Member 'WBP_K16_C_SetGhostData::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostData, CallFunc_PlayAnimation_ReturnValue_1) == 0x000020, "Member 'WBP_K16_C_SetGhostData::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_SetGhostData, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000028, "Member 'WBP_K16_C_SetGhostData::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_K16.WBP_K16_C.ExecuteUbergraph_WBP_K16
// 0x00B0 (0x00B0 - 0x0000)
struct WBP_K16_C_ExecuteUbergraph_WBP_K16 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerStatusViewData                  K2Node_Event_data;                                 // 0x0008(0x0098)(ConstParm)
	class UGhostfaceStatusData*                   K2Node_DynamicCast_AsGhostface_Status_Data;        // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K16_C_ExecuteUbergraph_WBP_K16) == 0x000008, "Wrong alignment on WBP_K16_C_ExecuteUbergraph_WBP_K16");
static_assert(sizeof(WBP_K16_C_ExecuteUbergraph_WBP_K16) == 0x0000B0, "Wrong size on WBP_K16_C_ExecuteUbergraph_WBP_K16");
static_assert(offsetof(WBP_K16_C_ExecuteUbergraph_WBP_K16, EntryPoint) == 0x000000, "Member 'WBP_K16_C_ExecuteUbergraph_WBP_K16::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_ExecuteUbergraph_WBP_K16, K2Node_Event_data) == 0x000008, "Member 'WBP_K16_C_ExecuteUbergraph_WBP_K16::K2Node_Event_data' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_ExecuteUbergraph_WBP_K16, K2Node_DynamicCast_AsGhostface_Status_Data) == 0x0000A0, "Member 'WBP_K16_C_ExecuteUbergraph_WBP_K16::K2Node_DynamicCast_AsGhostface_Status_Data' has a wrong offset!");
static_assert(offsetof(WBP_K16_C_ExecuteUbergraph_WBP_K16, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'WBP_K16_C_ExecuteUbergraph_WBP_K16::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

