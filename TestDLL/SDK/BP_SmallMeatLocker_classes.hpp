#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_SmallMeatLocker

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "BP_MeatHook_Shared_classes.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_SmallMeatLocker.BP_SmallMeatLocker_C
// 0x00D0 (0x08C0 - 0x07F0)
class ABP_SmallMeatLocker_C : public ABP_MeatHook_Shared_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_BP_SmallMeatLocker_C;               // 0x07F0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDBDSkeletalMeshComponentBudgeted*      SkeletalMeshComponent;                             // 0x07F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMaterialHelper*                        MaterialHelper;                                    // 0x0800(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USleepingSkinnedMeshRegisterer*         SleepingSkinnedMeshRegisterer;                     // 0x0808(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USabotageInterruption_C*                SabotageInterruptionToolbox;                       // 0x0810(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USabotageInterruption_C*                SabotageInterruptionNoToolbox;                     // 0x0818(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USabotageMeathook_C*                    SabotageMeathookToolBox;                           // 0x0820(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USabotageMeathookNoToolbox_C*           SabotageMeathookNoToolbox;                         // 0x0828(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       SabotageZone;                                      // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator01;                                       // 0x0838(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UnhookSnapPoint_001;                               // 0x0840(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UnhookSnapPoint_005;                               // 0x0848(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UnhookSnapPoint_004;                               // 0x0850(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UnhookSnapPoint_003;                               // 0x0858(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        UnhookSnapPoint_002;                               // 0x0860(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       Sphere_0;                                          // 0x0868(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_SkillCheckFail;                                  // 0x0870(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMapActorComponent*                     MapActor;                                          // 0x0878(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          MapActorPrimitive;                                 // 0x0880(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   Entity;                                            // 0x0888(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChargeableComponent*                   Break_Chargeable;                                  // 0x0890(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        EntityPercentVisible_0;                            // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EntityDisappearSpeed_0;                            // 0x08A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        EntityReappearSpeed_0;                             // 0x08A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FName                                   HookSocketName;                                    // 0x08B0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UseEnergyToolbox(class UChargeableInteractionDefinition* Definition, class ADBDPlayer* Player, double Initial_Charge);
	void StopMontages(class ADBDPlayer* Player);
	void ReflectVectorAroundPlaneWithNormal(const struct FVector& VectorToReflect, const struct FVector& Normal, struct FVector* ReflectedVector);
	void ReceiveBeginPlay();
	void OnAutoRepair();
	void ExecuteUbergraph_BP_SmallMeatLocker(int32 EntryPoint);
	void Cosmetic_SetAsScourgeHookStart();
	void BndEvt__Break_Chargeable_K2Node_ComponentBoundEvent_335_ChargeableSkillCheckResponse__DelegateSignature(bool Success, bool Bonus, class ADBDPlayer* Player, bool TriggerLoudNoise, bool HadInput, ESkillCheckCustomType Type, float ChargeChange);
	void BndEvt__Break_Chargeable_K2Node_ComponentBoundEvent_330_ChargeableSkillCheckResponse__DelegateSignature(bool Success, bool Bonus, class ADBDPlayer* Player, bool TriggerLoudNoise, bool HadInput, ESkillCheckCustomType Type, float ChargeChange);

	bool IsBroken() const;
	void Has_Toolbox(class ADBDPlayer* Player, bool* Is_Possible) const;
	struct FVector GetHookPosition() const;
	class AEntity* GetEntity() const;
	class UAnimInstance* GetAnimInstance() const;
	void FireHookSoundEvent(const class FName NoiseRangeTunable, const class ADBDPlayer* SoundInstigator) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_SmallMeatLocker_C">();
	}
	static class ABP_SmallMeatLocker_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_SmallMeatLocker_C>();
	}
};
static_assert(alignof(ABP_SmallMeatLocker_C) == 0x000008, "Wrong alignment on ABP_SmallMeatLocker_C");
static_assert(sizeof(ABP_SmallMeatLocker_C) == 0x0008C0, "Wrong size on ABP_SmallMeatLocker_C");
static_assert(offsetof(ABP_SmallMeatLocker_C, UberGraphFrame_BP_SmallMeatLocker_C) == 0x0007F0, "Member 'ABP_SmallMeatLocker_C::UberGraphFrame_BP_SmallMeatLocker_C' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, SkeletalMeshComponent) == 0x0007F8, "Member 'ABP_SmallMeatLocker_C::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, MaterialHelper) == 0x000800, "Member 'ABP_SmallMeatLocker_C::MaterialHelper' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, SleepingSkinnedMeshRegisterer) == 0x000808, "Member 'ABP_SmallMeatLocker_C::SleepingSkinnedMeshRegisterer' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, SabotageInterruptionToolbox) == 0x000810, "Member 'ABP_SmallMeatLocker_C::SabotageInterruptionToolbox' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, SabotageInterruptionNoToolbox) == 0x000818, "Member 'ABP_SmallMeatLocker_C::SabotageInterruptionNoToolbox' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, SabotageMeathookToolBox) == 0x000820, "Member 'ABP_SmallMeatLocker_C::SabotageMeathookToolBox' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, SabotageMeathookNoToolbox) == 0x000828, "Member 'ABP_SmallMeatLocker_C::SabotageMeathookNoToolbox' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, SabotageZone) == 0x000830, "Member 'ABP_SmallMeatLocker_C::SabotageZone' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, Validator01) == 0x000838, "Member 'ABP_SmallMeatLocker_C::Validator01' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, UnhookSnapPoint_001) == 0x000840, "Member 'ABP_SmallMeatLocker_C::UnhookSnapPoint_001' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, UnhookSnapPoint_005) == 0x000848, "Member 'ABP_SmallMeatLocker_C::UnhookSnapPoint_005' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, UnhookSnapPoint_004) == 0x000850, "Member 'ABP_SmallMeatLocker_C::UnhookSnapPoint_004' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, UnhookSnapPoint_003) == 0x000858, "Member 'ABP_SmallMeatLocker_C::UnhookSnapPoint_003' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, UnhookSnapPoint_002) == 0x000860, "Member 'ABP_SmallMeatLocker_C::UnhookSnapPoint_002' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, Sphere_0) == 0x000868, "Member 'ABP_SmallMeatLocker_C::Sphere_0' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, P_SkillCheckFail) == 0x000870, "Member 'ABP_SmallMeatLocker_C::P_SkillCheckFail' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, MapActor) == 0x000878, "Member 'ABP_SmallMeatLocker_C::MapActor' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, MapActorPrimitive) == 0x000880, "Member 'ABP_SmallMeatLocker_C::MapActorPrimitive' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, Entity) == 0x000888, "Member 'ABP_SmallMeatLocker_C::Entity' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, Break_Chargeable) == 0x000890, "Member 'ABP_SmallMeatLocker_C::Break_Chargeable' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, EntityPercentVisible_0) == 0x000898, "Member 'ABP_SmallMeatLocker_C::EntityPercentVisible_0' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, EntityDisappearSpeed_0) == 0x0008A0, "Member 'ABP_SmallMeatLocker_C::EntityDisappearSpeed_0' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, EntityReappearSpeed_0) == 0x0008A8, "Member 'ABP_SmallMeatLocker_C::EntityReappearSpeed_0' has a wrong offset!");
static_assert(offsetof(ABP_SmallMeatLocker_C, HookSocketName) == 0x0008B0, "Member 'ABP_SmallMeatLocker_C::HookSocketName' has a wrong offset!");

}

