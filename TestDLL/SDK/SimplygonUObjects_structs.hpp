#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimplygonUObjects

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum SimplygonUObjects.ESeparateOverlappingChartsMode
// NumValues: 0x0004
enum class ESeparateOverlappingChartsMode : uint8
{
	Disabled                                 = 0,
	Enabled                                  = 1,
	Auto                                     = 2,
	ESeparateOverlappingChartsMode_MAX       = 3,
};

// Enum SimplygonUObjects.EReductionPerformanceMode
// NumValues: 0x0003
enum class EReductionPerformanceMode : uint8
{
	AllFeatures                              = 0,
	HighPerformance                          = 1,
	EReductionPerformanceMode_MAX            = 2,
};

// Enum SimplygonUObjects.EReductionTargetStopCondition
// NumValues: 0x0003
enum class EReductionTargetStopCondition : uint8
{
	Any                                      = 0,
	All                                      = 1,
	EReductionTargetStopCondition_MAX        = 2,
};

// Enum SimplygonUObjects.EReductionHeuristics
// NumValues: 0x0003
enum class EReductionHeuristics : uint8
{
	Fast                                     = 0,
	Consistent                               = 1,
	EReductionHeuristics_MAX                 = 2,
};

// Enum SimplygonUObjects.ESymmetryAxis
// NumValues: 0x0004
enum class ESymmetryAxis : uint8
{
	X                                        = 0,
	Y                                        = 1,
	Z                                        = 2,
	ESymmetryAxis_MAX                        = 3,
};

// Enum SimplygonUObjects.EDataCreationPreferences
// NumValues: 0x0004
enum class EDataCreationPreferences : uint8
{
	OnlyUseOriginalData                      = 0,
	PreferOriginalData                       = 1,
	PreferOptimizedResult                    = 2,
	EDataCreationPreferences_MAX             = 3,
};

// Enum SimplygonUObjects.EComputeVisibilityMode
// NumValues: 0x0003
enum class EComputeVisibilityMode : uint8
{
	DirectX                                  = 0,
	Software                                 = 1,
	EComputeVisibilityMode_MAX               = 2,
};

// Enum SimplygonUObjects.EBoneReductionTargetStopCondition
// NumValues: 0x0003
enum class EBoneReductionTargetStopCondition : uint8
{
	Any                                      = 0,
	All                                      = 1,
	EBoneReductionTargetStopCondition_MAX    = 2,
};

// Enum SimplygonUObjects.EWeightsFromColorComponent
// NumValues: 0x0005
enum class EWeightsFromColorComponent : uint8
{
	Red                                      = 0,
	Green                                    = 1,
	Blue                                     = 2,
	Alpha                                    = 3,
	EWeightsFromColorComponent_MAX           = 4,
};

// Enum SimplygonUObjects.EWeightsFromColorMode
// NumValues: 0x0004
enum class EWeightsFromColorMode : uint8
{
	Standard                                 = 0,
	High                                     = 1,
	Low                                      = 2,
	EWeightsFromColorMode_MAX                = 3,
};

// Enum SimplygonUObjects.EAttributeTessellationDensityMode
// NumValues: 0x0007
enum class EAttributeTessellationDensityMode : uint8
{
	RelativeArea                             = 0,
	AbsoluteArea                             = 1,
	RelativeLength                           = 2,
	AbsoluteLength                           = 3,
	UserDefined                              = 4,
	OnScreenSize                             = 5,
	EAttributeTessellationDensityMode_MAX    = 6,
};

// Enum SimplygonUObjects.ETransformationSpace
// NumValues: 0x0005
enum class ETransformationSpace : uint8
{
	Global                                   = 0,
	Local                                    = 1,
	Tangent                                  = 2,
	View                                     = 3,
	ETransformationSpace_MAX                 = 4,
};

// Enum SimplygonUObjects.ETexCoordGeneratorType
// NumValues: 0x0003
enum class ETexCoordGeneratorType : uint8
{
	Parameterizer                            = 0,
	ChartAggregator                          = 1,
	ETexCoordGeneratorType_MAX               = 2,
};

// Enum SimplygonUObjects.EChartAggregatorMode
// NumValues: 0x0005
enum class EChartAggregatorMode : uint8
{
	TextureSizeProportions                   = 0,
	SurfaceArea                              = 1,
	OriginalPixelDensity                     = 2,
	UVSizeProportions                        = 3,
	EChartAggregatorMode_MAX                 = 4,
};

// Enum SimplygonUObjects.ESurfaceAreaScale
// NumValues: 0x0004
enum class ESurfaceAreaScale : uint8
{
	LargestInstance                          = 0,
	SmallestInstance                         = 1,
	Average                                  = 2,
	ESurfaceAreaScale_MAX                    = 3,
};

// Enum SimplygonUObjects.EHoleFilling
// NumValues: 0x0005
enum class EHoleFilling : uint8
{
	Disabled                                 = 0,
	Low                                      = 1,
	Medium                                   = 2,
	High                                     = 3,
	EHoleFilling_MAX                         = 4,
};

// Enum SimplygonUObjects.ERemeshingMode
// NumValues: 0x0004
enum class ERemeshingMode : uint8
{
	Outside                                  = 0,
	Inside                                   = 1,
	Manual                                   = 2,
	ERemeshingMode_MAX                       = 3,
};

// Enum SimplygonUObjects.ESurfaceTransferMode
// NumValues: 0x0003
enum class ESurfaceTransferMode : uint8
{
	Fast                                     = 0,
	Accurate                                 = 1,
	ESurfaceTransferMode_MAX                 = 2,
};

// Enum SimplygonUObjects.EBillboardMode
// NumValues: 0x0003
enum class EBillboardMode : uint8
{
	OuterShell                               = 0,
	Foliage                                  = 1,
	EBillboardMode_MAX                       = 2,
};

// Enum SimplygonUObjects.EStopCondition
// NumValues: 0x0003
enum class EStopCondition : uint8
{
	Any                                      = 0,
	All                                      = 1,
	EStopCondition_MAX                       = 2,
};

// Enum SimplygonUObjects.EOpacityChannelComponent
// NumValues: 0x0005
enum class EOpacityChannelComponent : uint8
{
	Red                                      = 0,
	Green                                    = 1,
	Blue                                     = 2,
	Alpha                                    = 3,
	EOpacityChannelComponent_MAX             = 4,
};

// Enum SimplygonUObjects.EDitherType
// NumValues: 0x0005
enum class EDitherType : uint8
{
	NoDither                                 = 0,
	FloydSteinberg                           = 1,
	JarvisJudiceNinke                        = 2,
	Sierra                                   = 3,
	EDitherType_MAX                          = 4,
};

// Enum SimplygonUObjects.EFillMode
// NumValues: 0x0004
enum class EFillMode : uint8
{
	Interpolate                              = 0,
	NearestNeighbor                          = 1,
	NoFill                                   = 2,
	EFillMode_MAX                            = 3,
};

// Enum SimplygonUObjects.EOutputPixelFormat
// NumValues: 0x0008
enum class EOutputPixelFormat : uint8
{
	R8G8B8A8                                 = 0,
	R8G8B8                                   = 1,
	R8                                       = 2,
	R16G16B16A16                             = 3,
	R16G16B16                                = 4,
	R16                                      = 5,
	R32G32B32A32F                            = 6,
	EOutputPixelFormat_MAX                   = 7,
};

// Enum SimplygonUObjects.EOutputImageFileFormat
// NumValues: 0x0008
enum class EOutputImageFileFormat : uint8
{
	BMP                                      = 0,
	DDS                                      = 1,
	JPEG                                     = 2,
	PNG                                      = 3,
	TGA                                      = 4,
	TIFF                                     = 5,
	EXR                                      = 8,
	EOutputImageFileFormat_MAX               = 9,
};

// Enum SimplygonUObjects.EOutputDDSCompressionType
// NumValues: 0x0007
enum class EOutputDDSCompressionType : uint8
{
	NoCompression                            = 255,
	BC1                                      = 0,
	BC2                                      = 1,
	BC3                                      = 2,
	BC4                                      = 3,
	BC5                                      = 4,
	EOutputDDSCompressionType_MAX            = 256,
};

// Enum SimplygonUObjects.EOutputOpacityType
// NumValues: 0x0003
enum class EOutputOpacityType : uint8
{
	Opacity                                  = 0,
	Transparency                             = 1,
	EOutputOpacityType_MAX                   = 2,
};

// Enum SimplygonUObjects.EFlipBackfacingMode
// NumValues: 0x0003
enum class EFlipBackfacingMode : uint8
{
	PixelNormal                              = 0,
	FaceNormal                               = 1,
	EFlipBackfacingMode_MAX                  = 2,
};

// Enum SimplygonUObjects.EGeometryDataFieldType
// NumValues: 0x000E
enum class EGeometryDataFieldType : uint8
{
	Coords                                   = 0,
	TexCoords                                = 1,
	Normals                                  = 2,
	Tangents                                 = 3,
	Bitangents                               = 4,
	Colors                                   = 5,
	TriangleIds                              = 6,
	MaterialIds                              = 7,
	VertexIds                                = 8,
	UserVertexField                          = 9,
	UserCornerField                          = 10,
	UserTriangleField                        = 11,
	CustomField                              = 12,
	EGeometryDataFieldType_MAX               = 13,
};

// Enum SimplygonUObjects.EOutputColorSpace
// NumValues: 0x0004
enum class EOutputColorSpace : uint8
{
	Undefined                                = 0,
	Linear                                   = 1,
	SRGB                                     = 2,
	EOutputColorSpace_MAX                    = 3,
};

// ScriptStruct SimplygonUObjects.MaterialOutputSettings
// 0x0038 (0x0038 - 0x0000)
struct FMaterialOutputSettings final
{
public:
	TSoftObjectPtr<class UMaterialInterface>      ParentMaterialOverride;                            // 0x0000(0x0038)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialOutputSettings) == 0x000008, "Wrong alignment on FMaterialOutputSettings");
static_assert(sizeof(FMaterialOutputSettings) == 0x000038, "Wrong size on FMaterialOutputSettings");
static_assert(offsetof(FMaterialOutputSettings, ParentMaterialOverride) == 0x000000, "Member 'FMaterialOutputSettings::ParentMaterialOverride' has a wrong offset!");

// ScriptStruct SimplygonUObjects.SimplygonPipelineSettings
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FSimplygonPipelineSettings
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSimplygonPipelineSettings) == 0x000008, "Wrong alignment on FSimplygonPipelineSettings");
static_assert(sizeof(FSimplygonPipelineSettings) == 0x000008, "Wrong size on FSimplygonPipelineSettings");

// ScriptStruct SimplygonUObjects.ReductionSettings
// 0x0080 (0x0080 - 0x0000)
struct FReductionSettings final
{
public:
	uint8                                         ReductionTargetTriangleRatioEnabled : 1;           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReductionTargetTriangleRatio;                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReductionTargetTriangleCountEnabled : 1;           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReductionTargetTriangleCount;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReductionTargetMaxDeviationEnabled : 1;            // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReductionTargetMaxDeviation;                       // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReductionTargetOnScreenSizeEnabled : 1;            // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReductionTargetOnScreenSize;                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReductionPerformanceMode                     ReductionPerformanceMode;                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReductionTargetStopCondition                 ReductionTargetStopCondition;                      // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReductionHeuristics                          ReductionHeuristics;                               // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeometryImportance;                                // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialImportance;                                // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TextureImportance;                                 // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadingImportance;                                 // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroupImportance;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VertexColorImportance;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EdgeSetImportance;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkinningImportance;                                // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutwardMoveMultiplier;                             // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InwardMoveMultiplier;                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEdgeLength;                                     // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         KeepSymmetry : 1;                                  // 0x0050(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseSymmetryQuadRetriangulator : 1;                 // 0x0050(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseAutomaticSymmetryDetection : 1;                 // 0x0050(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SymmetryDetectionTolerance;                        // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESymmetryAxis                                 SymmetryAxis;                                      // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SymmetryOffset;                                    // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CreateGeomorphGeometry : 1;                        // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         GenerateGeomorphData : 1;                          // 0x0060(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EDataCreationPreferences                      DataCreationPreferences;                           // 0x0061(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseHighQualityNormalCalculation : 1;               // 0x0062(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         LockGeometricBorder : 1;                           // 0x0062(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         MergeGeometries : 1;                               // 0x0062(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         AllowDegenerateTexCoords : 1;                      // 0x0062(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_63[0x1];                                       // 0x0063(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProcessSelectionSetID;                             // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProcessSelectionSetName;                           // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         KeepUnprocessedSceneMeshes : 1;                    // 0x0078(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         PreserveQuadFlags : 1;                             // 0x0078(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReductionSettings) == 0x000008, "Wrong alignment on FReductionSettings");
static_assert(sizeof(FReductionSettings) == 0x000080, "Wrong size on FReductionSettings");
static_assert(offsetof(FReductionSettings, ReductionTargetTriangleRatio) == 0x000004, "Member 'FReductionSettings::ReductionTargetTriangleRatio' has a wrong offset!");
static_assert(offsetof(FReductionSettings, ReductionTargetTriangleCount) == 0x00000C, "Member 'FReductionSettings::ReductionTargetTriangleCount' has a wrong offset!");
static_assert(offsetof(FReductionSettings, ReductionTargetMaxDeviation) == 0x000014, "Member 'FReductionSettings::ReductionTargetMaxDeviation' has a wrong offset!");
static_assert(offsetof(FReductionSettings, ReductionTargetOnScreenSize) == 0x00001C, "Member 'FReductionSettings::ReductionTargetOnScreenSize' has a wrong offset!");
static_assert(offsetof(FReductionSettings, ReductionPerformanceMode) == 0x000020, "Member 'FReductionSettings::ReductionPerformanceMode' has a wrong offset!");
static_assert(offsetof(FReductionSettings, ReductionTargetStopCondition) == 0x000021, "Member 'FReductionSettings::ReductionTargetStopCondition' has a wrong offset!");
static_assert(offsetof(FReductionSettings, ReductionHeuristics) == 0x000022, "Member 'FReductionSettings::ReductionHeuristics' has a wrong offset!");
static_assert(offsetof(FReductionSettings, GeometryImportance) == 0x000024, "Member 'FReductionSettings::GeometryImportance' has a wrong offset!");
static_assert(offsetof(FReductionSettings, MaterialImportance) == 0x000028, "Member 'FReductionSettings::MaterialImportance' has a wrong offset!");
static_assert(offsetof(FReductionSettings, TextureImportance) == 0x00002C, "Member 'FReductionSettings::TextureImportance' has a wrong offset!");
static_assert(offsetof(FReductionSettings, ShadingImportance) == 0x000030, "Member 'FReductionSettings::ShadingImportance' has a wrong offset!");
static_assert(offsetof(FReductionSettings, GroupImportance) == 0x000034, "Member 'FReductionSettings::GroupImportance' has a wrong offset!");
static_assert(offsetof(FReductionSettings, VertexColorImportance) == 0x000038, "Member 'FReductionSettings::VertexColorImportance' has a wrong offset!");
static_assert(offsetof(FReductionSettings, EdgeSetImportance) == 0x00003C, "Member 'FReductionSettings::EdgeSetImportance' has a wrong offset!");
static_assert(offsetof(FReductionSettings, SkinningImportance) == 0x000040, "Member 'FReductionSettings::SkinningImportance' has a wrong offset!");
static_assert(offsetof(FReductionSettings, OutwardMoveMultiplier) == 0x000044, "Member 'FReductionSettings::OutwardMoveMultiplier' has a wrong offset!");
static_assert(offsetof(FReductionSettings, InwardMoveMultiplier) == 0x000048, "Member 'FReductionSettings::InwardMoveMultiplier' has a wrong offset!");
static_assert(offsetof(FReductionSettings, MaxEdgeLength) == 0x00004C, "Member 'FReductionSettings::MaxEdgeLength' has a wrong offset!");
static_assert(offsetof(FReductionSettings, SymmetryDetectionTolerance) == 0x000054, "Member 'FReductionSettings::SymmetryDetectionTolerance' has a wrong offset!");
static_assert(offsetof(FReductionSettings, SymmetryAxis) == 0x000058, "Member 'FReductionSettings::SymmetryAxis' has a wrong offset!");
static_assert(offsetof(FReductionSettings, SymmetryOffset) == 0x00005C, "Member 'FReductionSettings::SymmetryOffset' has a wrong offset!");
static_assert(offsetof(FReductionSettings, DataCreationPreferences) == 0x000061, "Member 'FReductionSettings::DataCreationPreferences' has a wrong offset!");
static_assert(offsetof(FReductionSettings, ProcessSelectionSetID) == 0x000064, "Member 'FReductionSettings::ProcessSelectionSetID' has a wrong offset!");
static_assert(offsetof(FReductionSettings, ProcessSelectionSetName) == 0x000068, "Member 'FReductionSettings::ProcessSelectionSetName' has a wrong offset!");

// ScriptStruct SimplygonUObjects.RepairSettings
// 0x0014 (0x0014 - 0x0000)
struct FRepairSettings final
{
public:
	uint8                                         UseTJunctionRemover : 1;                           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TJuncDist;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseWelding : 1;                                    // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         WeldOnlyBorderVertices : 1;                        // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         WeldOnlyWithinMaterial : 1;                        // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         WeldOnlyWithinSceneNode : 1;                       // 0x0008(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         WeldOnlyBetweenSceneNodes : 1;                     // 0x0008(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeldDist;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressivePasses;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRepairSettings) == 0x000004, "Wrong alignment on FRepairSettings");
static_assert(sizeof(FRepairSettings) == 0x000014, "Wrong size on FRepairSettings");
static_assert(offsetof(FRepairSettings, TJuncDist) == 0x000004, "Member 'FRepairSettings::TJuncDist' has a wrong offset!");
static_assert(offsetof(FRepairSettings, WeldDist) == 0x00000C, "Member 'FRepairSettings::WeldDist' has a wrong offset!");
static_assert(offsetof(FRepairSettings, ProgressivePasses) == 0x000010, "Member 'FRepairSettings::ProgressivePasses' has a wrong offset!");

// ScriptStruct SimplygonUObjects.NormalCalculationSettings
// 0x000C (0x000C - 0x0000)
struct FNormalCalculationSettings final
{
public:
	uint8                                         ReplaceNormals : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         RepairInvalidNormals : 1;                          // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HardEdgeAngle;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReplaceTangents : 1;                               // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReorthogonalizeTangentSpace : 1;                   // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ScaleByArea : 1;                                   // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ScaleByAngle : 1;                                  // 0x0008(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SnapNormalsToFlatSurfaces : 1;                     // 0x0008(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNormalCalculationSettings) == 0x000004, "Wrong alignment on FNormalCalculationSettings");
static_assert(sizeof(FNormalCalculationSettings) == 0x00000C, "Wrong size on FNormalCalculationSettings");
static_assert(offsetof(FNormalCalculationSettings, HardEdgeAngle) == 0x000004, "Member 'FNormalCalculationSettings::HardEdgeAngle' has a wrong offset!");

// ScriptStruct SimplygonUObjects.VisibilitySettings
// 0x0040 (0x0040 - 0x0000)
struct FVisibilitySettings final
{
public:
	uint8                                         UseVisibilityWeightsInReducer : 1;                 // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseVisibilityWeightsInTexcoordGenerator : 1;       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisibilityWeightsPower;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CullOccludedGeometry : 1;                          // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ForceVisibilityCalculation : 1;                    // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseBackfaceCulling : 1;                            // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CameraSelectionSetID;                              // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CameraSelectionSetName;                            // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OccluderSelectionSetID;                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OccluderSelectionSetName;                          // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FillNonVisibleAreaThreshold;                       // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RemoveTrianglesNotOccludingOtherTriangles : 1;     // 0x003C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ConservativeMode : 1;                              // 0x003C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EComputeVisibilityMode                        ComputeVisibilityMode;                             // 0x003D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVisibilitySettings) == 0x000008, "Wrong alignment on FVisibilitySettings");
static_assert(sizeof(FVisibilitySettings) == 0x000040, "Wrong size on FVisibilitySettings");
static_assert(offsetof(FVisibilitySettings, VisibilityWeightsPower) == 0x000004, "Member 'FVisibilitySettings::VisibilityWeightsPower' has a wrong offset!");
static_assert(offsetof(FVisibilitySettings, CameraSelectionSetID) == 0x00000C, "Member 'FVisibilitySettings::CameraSelectionSetID' has a wrong offset!");
static_assert(offsetof(FVisibilitySettings, CameraSelectionSetName) == 0x000010, "Member 'FVisibilitySettings::CameraSelectionSetName' has a wrong offset!");
static_assert(offsetof(FVisibilitySettings, OccluderSelectionSetID) == 0x000020, "Member 'FVisibilitySettings::OccluderSelectionSetID' has a wrong offset!");
static_assert(offsetof(FVisibilitySettings, OccluderSelectionSetName) == 0x000028, "Member 'FVisibilitySettings::OccluderSelectionSetName' has a wrong offset!");
static_assert(offsetof(FVisibilitySettings, FillNonVisibleAreaThreshold) == 0x000038, "Member 'FVisibilitySettings::FillNonVisibleAreaThreshold' has a wrong offset!");
static_assert(offsetof(FVisibilitySettings, ComputeVisibilityMode) == 0x00003D, "Member 'FVisibilitySettings::ComputeVisibilityMode' has a wrong offset!");

// ScriptStruct SimplygonUObjects.BoneSettings
// 0x0058 (0x0058 - 0x0000)
struct FBoneSettings final
{
public:
	uint8                                         UseBoneReducer : 1;                                // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         RemoveUnusedBones : 1;                             // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         LimitBonesPerVertex : 1;                           // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxBonePerVertex;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BoneReductionTargetBoneRatioEnabled : 1;           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoneReductionTargetBoneRatio;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BoneReductionTargetBoneCountEnabled : 1;           // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoneReductionTargetBoneCount;                      // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BoneReductionTargetMaxDeviationEnabled : 1;        // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoneReductionTargetMaxDeviation;                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BoneReductionTargetOnScreenSizeEnabled : 1;        // 0x0020(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BoneReductionTargetOnScreenSize;                   // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBoneReductionTargetStopCondition             BoneReductionTargetStopCondition;                  // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LockBoneSelectionSetID;                            // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LockBoneSelectionSetName;                          // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemoveBoneSelectionSetID;                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RemoveBoneSelectionSetName;                        // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBoneSettings) == 0x000008, "Wrong alignment on FBoneSettings");
static_assert(sizeof(FBoneSettings) == 0x000058, "Wrong size on FBoneSettings");
static_assert(offsetof(FBoneSettings, MaxBonePerVertex) == 0x000004, "Member 'FBoneSettings::MaxBonePerVertex' has a wrong offset!");
static_assert(offsetof(FBoneSettings, BoneReductionTargetBoneRatio) == 0x00000C, "Member 'FBoneSettings::BoneReductionTargetBoneRatio' has a wrong offset!");
static_assert(offsetof(FBoneSettings, BoneReductionTargetBoneCount) == 0x000014, "Member 'FBoneSettings::BoneReductionTargetBoneCount' has a wrong offset!");
static_assert(offsetof(FBoneSettings, BoneReductionTargetMaxDeviation) == 0x00001C, "Member 'FBoneSettings::BoneReductionTargetMaxDeviation' has a wrong offset!");
static_assert(offsetof(FBoneSettings, BoneReductionTargetOnScreenSize) == 0x000024, "Member 'FBoneSettings::BoneReductionTargetOnScreenSize' has a wrong offset!");
static_assert(offsetof(FBoneSettings, BoneReductionTargetStopCondition) == 0x000028, "Member 'FBoneSettings::BoneReductionTargetStopCondition' has a wrong offset!");
static_assert(offsetof(FBoneSettings, LockBoneSelectionSetID) == 0x00002C, "Member 'FBoneSettings::LockBoneSelectionSetID' has a wrong offset!");
static_assert(offsetof(FBoneSettings, LockBoneSelectionSetName) == 0x000030, "Member 'FBoneSettings::LockBoneSelectionSetName' has a wrong offset!");
static_assert(offsetof(FBoneSettings, RemoveBoneSelectionSetID) == 0x000040, "Member 'FBoneSettings::RemoveBoneSelectionSetID' has a wrong offset!");
static_assert(offsetof(FBoneSettings, RemoveBoneSelectionSetName) == 0x000048, "Member 'FBoneSettings::RemoveBoneSelectionSetName' has a wrong offset!");

// ScriptStruct SimplygonUObjects.VertexWeightSettings
// 0x0028 (0x0028 - 0x0000)
struct FVertexWeightSettings final
{
public:
	uint8                                         UseVertexWeightsInReducer : 1;                     // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseVertexWeightsInTexcoordGenerator : 1;           // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WeightsFromColorLevel;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 WeightsFromColorName;                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeightsFromColorComponent                    WeightsFromColorComponent;                         // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeightsFromColorMultiplier;                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeightsFromColorMode                         WeightsFromColorMode;                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexWeightSettings) == 0x000008, "Wrong alignment on FVertexWeightSettings");
static_assert(sizeof(FVertexWeightSettings) == 0x000028, "Wrong size on FVertexWeightSettings");
static_assert(offsetof(FVertexWeightSettings, WeightsFromColorLevel) == 0x000004, "Member 'FVertexWeightSettings::WeightsFromColorLevel' has a wrong offset!");
static_assert(offsetof(FVertexWeightSettings, WeightsFromColorName) == 0x000008, "Member 'FVertexWeightSettings::WeightsFromColorName' has a wrong offset!");
static_assert(offsetof(FVertexWeightSettings, WeightsFromColorComponent) == 0x000018, "Member 'FVertexWeightSettings::WeightsFromColorComponent' has a wrong offset!");
static_assert(offsetof(FVertexWeightSettings, WeightsFromColorMultiplier) == 0x00001C, "Member 'FVertexWeightSettings::WeightsFromColorMultiplier' has a wrong offset!");
static_assert(offsetof(FVertexWeightSettings, WeightsFromColorMode) == 0x000020, "Member 'FVertexWeightSettings::WeightsFromColorMode' has a wrong offset!");

// ScriptStruct SimplygonUObjects.AttributeTessellationSettings
// 0x0020 (0x0020 - 0x0000)
struct FAttributeTessellationSettings final
{
public:
	uint8                                         EnableAttributeTessellation : 1;                   // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EAttributeTessellationDensityMode             AttributeTessellationDensityMode;                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETransformationSpace                          TransformationSpace;                               // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAreaOfTessellatedValue;                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxLengthOfTessellatedValue;                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnScreenSize;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OnlyAllowOneLevelOfDifference : 1;                 // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinTessellationLevel;                              // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTessellationLevel;                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTotalValuesCount;                               // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAttributeTessellationSettings) == 0x000004, "Wrong alignment on FAttributeTessellationSettings");
static_assert(sizeof(FAttributeTessellationSettings) == 0x000020, "Wrong size on FAttributeTessellationSettings");
static_assert(offsetof(FAttributeTessellationSettings, AttributeTessellationDensityMode) == 0x000001, "Member 'FAttributeTessellationSettings::AttributeTessellationDensityMode' has a wrong offset!");
static_assert(offsetof(FAttributeTessellationSettings, TransformationSpace) == 0x000002, "Member 'FAttributeTessellationSettings::TransformationSpace' has a wrong offset!");
static_assert(offsetof(FAttributeTessellationSettings, MaxAreaOfTessellatedValue) == 0x000004, "Member 'FAttributeTessellationSettings::MaxAreaOfTessellatedValue' has a wrong offset!");
static_assert(offsetof(FAttributeTessellationSettings, MaxLengthOfTessellatedValue) == 0x000008, "Member 'FAttributeTessellationSettings::MaxLengthOfTessellatedValue' has a wrong offset!");
static_assert(offsetof(FAttributeTessellationSettings, OnScreenSize) == 0x00000C, "Member 'FAttributeTessellationSettings::OnScreenSize' has a wrong offset!");
static_assert(offsetof(FAttributeTessellationSettings, MinTessellationLevel) == 0x000014, "Member 'FAttributeTessellationSettings::MinTessellationLevel' has a wrong offset!");
static_assert(offsetof(FAttributeTessellationSettings, MaxTessellationLevel) == 0x000018, "Member 'FAttributeTessellationSettings::MaxTessellationLevel' has a wrong offset!");
static_assert(offsetof(FAttributeTessellationSettings, MaxTotalValuesCount) == 0x00001C, "Member 'FAttributeTessellationSettings::MaxTotalValuesCount' has a wrong offset!");

// ScriptStruct SimplygonUObjects.ChartAggregatorSettings
// 0x0038 (0x0038 - 0x0000)
struct FChartAggregatorSettings final
{
public:
	EChartAggregatorMode                          ChartAggregatorMode;                               // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceAreaScale                             SurfaceAreaScale;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OriginalTexCoordLevel;                             // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalTexCoordName;                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SeparateOverlappingCharts : 1;                     // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OriginalChartProportionsChannel;                   // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         LockUVRotation : 1;                                // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChartAggregatorSettings) == 0x000008, "Wrong alignment on FChartAggregatorSettings");
static_assert(sizeof(FChartAggregatorSettings) == 0x000038, "Wrong size on FChartAggregatorSettings");
static_assert(offsetof(FChartAggregatorSettings, ChartAggregatorMode) == 0x000000, "Member 'FChartAggregatorSettings::ChartAggregatorMode' has a wrong offset!");
static_assert(offsetof(FChartAggregatorSettings, SurfaceAreaScale) == 0x000001, "Member 'FChartAggregatorSettings::SurfaceAreaScale' has a wrong offset!");
static_assert(offsetof(FChartAggregatorSettings, OriginalTexCoordLevel) == 0x000004, "Member 'FChartAggregatorSettings::OriginalTexCoordLevel' has a wrong offset!");
static_assert(offsetof(FChartAggregatorSettings, OriginalTexCoordName) == 0x000008, "Member 'FChartAggregatorSettings::OriginalTexCoordName' has a wrong offset!");
static_assert(offsetof(FChartAggregatorSettings, OriginalChartProportionsChannel) == 0x000020, "Member 'FChartAggregatorSettings::OriginalChartProportionsChannel' has a wrong offset!");

// ScriptStruct SimplygonUObjects.ParameterizerSettings
// 0x0008 (0x0008 - 0x0000)
struct FParameterizerSettings final
{
public:
	float                                         MaxStretch;                                        // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LargeChartsImportance;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FParameterizerSettings) == 0x000004, "Wrong alignment on FParameterizerSettings");
static_assert(sizeof(FParameterizerSettings) == 0x000008, "Wrong size on FParameterizerSettings");
static_assert(offsetof(FParameterizerSettings, MaxStretch) == 0x000000, "Member 'FParameterizerSettings::MaxStretch' has a wrong offset!");
static_assert(offsetof(FParameterizerSettings, LargeChartsImportance) == 0x000004, "Member 'FParameterizerSettings::LargeChartsImportance' has a wrong offset!");

// ScriptStruct SimplygonUObjects.InputMaterialSettings
// 0x0004 (0x0004 - 0x0000)
struct FInputMaterialSettings final
{
public:
	int32                                         MaterialMapping;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInputMaterialSettings) == 0x000004, "Wrong alignment on FInputMaterialSettings");
static_assert(sizeof(FInputMaterialSettings) == 0x000004, "Wrong size on FInputMaterialSettings");
static_assert(offsetof(FInputMaterialSettings, MaterialMapping) == 0x000000, "Member 'FInputMaterialSettings::MaterialMapping' has a wrong offset!");

// ScriptStruct SimplygonUObjects.OutputMaterialSettings
// 0x0010 (0x0010 - 0x0000)
struct FOutputMaterialSettings final
{
public:
	int32                                         TextureWidth;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureHeight;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MultisamplingLevel;                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GutterSpace;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutputMaterialSettings) == 0x000004, "Wrong alignment on FOutputMaterialSettings");
static_assert(sizeof(FOutputMaterialSettings) == 0x000010, "Wrong size on FOutputMaterialSettings");
static_assert(offsetof(FOutputMaterialSettings, TextureWidth) == 0x000000, "Member 'FOutputMaterialSettings::TextureWidth' has a wrong offset!");
static_assert(offsetof(FOutputMaterialSettings, TextureHeight) == 0x000004, "Member 'FOutputMaterialSettings::TextureHeight' has a wrong offset!");
static_assert(offsetof(FOutputMaterialSettings, MultisamplingLevel) == 0x000008, "Member 'FOutputMaterialSettings::MultisamplingLevel' has a wrong offset!");
static_assert(offsetof(FOutputMaterialSettings, GutterSpace) == 0x00000C, "Member 'FOutputMaterialSettings::GutterSpace' has a wrong offset!");

// ScriptStruct SimplygonUObjects.MappingImageSettings
// 0x0098 (0x0098 - 0x0000)
struct FMappingImageSettings final
{
public:
	uint8                                         GenerateMappingImage : 1;                          // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         GenerateTexCoords : 1;                             // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         GenerateTangents : 1;                              // 0x0000(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ReplaceMappingImages : 1;                          // 0x0000(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseFullRetexturing : 1;                            // 0x0000(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ApplyNewMaterialIds : 1;                           // 0x0000(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseAutomaticTextureSize : 1;                       // 0x0000(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutomaticTextureSizeMultiplier;                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ForcePower2Texture : 1;                            // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         OnlyParameterizeInvalidUVs : 1;                    // 0x0008(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         AllowTransparencyMapping : 1;                      // 0x0008(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaximumLayers;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TexCoordLevel;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TexCoordName;                                      // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETexCoordGeneratorType                        TexCoordGeneratorType;                             // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OutputMaterialCount;                               // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InputMaterialCount;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChartAggregatorSettings               ChartAggregatorSettings;                           // 0x0038(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FParameterizerSettings                 ParameterizerSettings;                             // 0x0070(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TArray<struct FInputMaterialSettings>         InputMaterialSettings;                             // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FOutputMaterialSettings>        OutputMaterialSettings;                            // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMappingImageSettings) == 0x000008, "Wrong alignment on FMappingImageSettings");
static_assert(sizeof(FMappingImageSettings) == 0x000098, "Wrong size on FMappingImageSettings");
static_assert(offsetof(FMappingImageSettings, AutomaticTextureSizeMultiplier) == 0x000004, "Member 'FMappingImageSettings::AutomaticTextureSizeMultiplier' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, MaximumLayers) == 0x00000C, "Member 'FMappingImageSettings::MaximumLayers' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, TexCoordLevel) == 0x000010, "Member 'FMappingImageSettings::TexCoordLevel' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, TexCoordName) == 0x000018, "Member 'FMappingImageSettings::TexCoordName' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, TexCoordGeneratorType) == 0x000028, "Member 'FMappingImageSettings::TexCoordGeneratorType' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, OutputMaterialCount) == 0x00002C, "Member 'FMappingImageSettings::OutputMaterialCount' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, InputMaterialCount) == 0x000030, "Member 'FMappingImageSettings::InputMaterialCount' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, ChartAggregatorSettings) == 0x000038, "Member 'FMappingImageSettings::ChartAggregatorSettings' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, ParameterizerSettings) == 0x000070, "Member 'FMappingImageSettings::ParameterizerSettings' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, InputMaterialSettings) == 0x000078, "Member 'FMappingImageSettings::InputMaterialSettings' has a wrong offset!");
static_assert(offsetof(FMappingImageSettings, OutputMaterialSettings) == 0x000088, "Member 'FMappingImageSettings::OutputMaterialSettings' has a wrong offset!");

// ScriptStruct SimplygonUObjects.RemeshingSettings
// 0x0040 (0x0040 - 0x0000)
struct FRemeshingSettings final
{
public:
	int32                                         OnScreenSize;                                      // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHoleFilling                                  HoleFilling;                                       // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemeshingMode                                RemeshingMode;                                     // 0x0005(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurfaceTransferMode                          SurfaceTransferMode;                               // 0x0006(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HardEdgeAngle;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TransferNormals : 1;                               // 0x000C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         TransferColors : 1;                                // 0x000C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         PopulateAttributeTessellationDisplacement : 1;     // 0x000C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeometricalAccuracy;                               // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TopologicalAccuracy;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemeshingModeManualPositionX;                      // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemeshingModeManualPositionY;                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemeshingModeManualPositionZ;                      // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProcessSelectionSetName;                           // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcessSelectionSetID;                             // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         KeepUnprocessedSceneMeshes : 1;                    // 0x003C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         ForceSoftEdgesWithinTextureCharts : 1;             // 0x003C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRemeshingSettings) == 0x000008, "Wrong alignment on FRemeshingSettings");
static_assert(sizeof(FRemeshingSettings) == 0x000040, "Wrong size on FRemeshingSettings");
static_assert(offsetof(FRemeshingSettings, OnScreenSize) == 0x000000, "Member 'FRemeshingSettings::OnScreenSize' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, HoleFilling) == 0x000004, "Member 'FRemeshingSettings::HoleFilling' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, RemeshingMode) == 0x000005, "Member 'FRemeshingSettings::RemeshingMode' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, SurfaceTransferMode) == 0x000006, "Member 'FRemeshingSettings::SurfaceTransferMode' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, HardEdgeAngle) == 0x000008, "Member 'FRemeshingSettings::HardEdgeAngle' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, GeometricalAccuracy) == 0x000010, "Member 'FRemeshingSettings::GeometricalAccuracy' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, TopologicalAccuracy) == 0x000014, "Member 'FRemeshingSettings::TopologicalAccuracy' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, RemeshingModeManualPositionX) == 0x000018, "Member 'FRemeshingSettings::RemeshingModeManualPositionX' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, RemeshingModeManualPositionY) == 0x00001C, "Member 'FRemeshingSettings::RemeshingModeManualPositionY' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, RemeshingModeManualPositionZ) == 0x000020, "Member 'FRemeshingSettings::RemeshingModeManualPositionZ' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, ProcessSelectionSetName) == 0x000028, "Member 'FRemeshingSettings::ProcessSelectionSetName' has a wrong offset!");
static_assert(offsetof(FRemeshingSettings, ProcessSelectionSetID) == 0x000038, "Member 'FRemeshingSettings::ProcessSelectionSetID' has a wrong offset!");

// ScriptStruct SimplygonUObjects.GeometryCullingSettings
// 0x0030 (0x0030 - 0x0000)
struct FGeometryCullingSettings final
{
public:
	uint8                                         UseClippingPlanes : 1;                             // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClippingPlaneSelectionSetID;                       // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClippingPlaneSelectionSetName;                     // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseClippingGeometry : 1;                           // 0x0018(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ClippingGeometrySelectionSetID;                    // 0x001C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClippingGeometrySelectionSetName;                  // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryCullingSettings) == 0x000008, "Wrong alignment on FGeometryCullingSettings");
static_assert(sizeof(FGeometryCullingSettings) == 0x000030, "Wrong size on FGeometryCullingSettings");
static_assert(offsetof(FGeometryCullingSettings, ClippingPlaneSelectionSetID) == 0x000004, "Member 'FGeometryCullingSettings::ClippingPlaneSelectionSetID' has a wrong offset!");
static_assert(offsetof(FGeometryCullingSettings, ClippingPlaneSelectionSetName) == 0x000008, "Member 'FGeometryCullingSettings::ClippingPlaneSelectionSetName' has a wrong offset!");
static_assert(offsetof(FGeometryCullingSettings, ClippingGeometrySelectionSetID) == 0x00001C, "Member 'FGeometryCullingSettings::ClippingGeometrySelectionSetID' has a wrong offset!");
static_assert(offsetof(FGeometryCullingSettings, ClippingGeometrySelectionSetName) == 0x000020, "Member 'FGeometryCullingSettings::ClippingGeometrySelectionSetName' has a wrong offset!");

// ScriptStruct SimplygonUObjects.AggregationSettings
// 0x0030 (0x0030 - 0x0000)
struct FAggregationSettings final
{
public:
	uint8                                         MergeGeometries : 1;                               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         EnableGeometryCulling : 1;                         // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeometryCullingPrecision;                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SubdivideGeometryBasedOnUVTiles : 1;               // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SubdivisionTileSize;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProcessSelectionSetID;                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProcessSelectionSetName;                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         KeepUnprocessedSceneMeshes : 1;                    // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAggregationSettings) == 0x000008, "Wrong alignment on FAggregationSettings");
static_assert(sizeof(FAggregationSettings) == 0x000030, "Wrong size on FAggregationSettings");
static_assert(offsetof(FAggregationSettings, GeometryCullingPrecision) == 0x000004, "Member 'FAggregationSettings::GeometryCullingPrecision' has a wrong offset!");
static_assert(offsetof(FAggregationSettings, SubdivisionTileSize) == 0x00000C, "Member 'FAggregationSettings::SubdivisionTileSize' has a wrong offset!");
static_assert(offsetof(FAggregationSettings, ProcessSelectionSetID) == 0x000010, "Member 'FAggregationSettings::ProcessSelectionSetID' has a wrong offset!");
static_assert(offsetof(FAggregationSettings, ProcessSelectionSetName) == 0x000018, "Member 'FAggregationSettings::ProcessSelectionSetName' has a wrong offset!");

// ScriptStruct SimplygonUObjects.GenerateLightmapTexCoordSettings
// 0x0028 (0x0028 - 0x0000)
struct FGenerateLightmapTexCoordSettings final
{
public:
	uint8                                         GenerateLightmapTexCoord : 1;                      // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LightmapTexCoordLevel;                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LightmapTexCoordName;                              // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EChartAggregatorMode                          ChartAggregatorMode;                               // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextureWidth;                                      // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureHeight;                                     // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GutterSpace;                                       // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGenerateLightmapTexCoordSettings) == 0x000008, "Wrong alignment on FGenerateLightmapTexCoordSettings");
static_assert(sizeof(FGenerateLightmapTexCoordSettings) == 0x000028, "Wrong size on FGenerateLightmapTexCoordSettings");
static_assert(offsetof(FGenerateLightmapTexCoordSettings, LightmapTexCoordLevel) == 0x000004, "Member 'FGenerateLightmapTexCoordSettings::LightmapTexCoordLevel' has a wrong offset!");
static_assert(offsetof(FGenerateLightmapTexCoordSettings, LightmapTexCoordName) == 0x000008, "Member 'FGenerateLightmapTexCoordSettings::LightmapTexCoordName' has a wrong offset!");
static_assert(offsetof(FGenerateLightmapTexCoordSettings, ChartAggregatorMode) == 0x000018, "Member 'FGenerateLightmapTexCoordSettings::ChartAggregatorMode' has a wrong offset!");
static_assert(offsetof(FGenerateLightmapTexCoordSettings, TextureWidth) == 0x00001C, "Member 'FGenerateLightmapTexCoordSettings::TextureWidth' has a wrong offset!");
static_assert(offsetof(FGenerateLightmapTexCoordSettings, TextureHeight) == 0x000020, "Member 'FGenerateLightmapTexCoordSettings::TextureHeight' has a wrong offset!");
static_assert(offsetof(FGenerateLightmapTexCoordSettings, GutterSpace) == 0x000024, "Member 'FGenerateLightmapTexCoordSettings::GutterSpace' has a wrong offset!");

// ScriptStruct SimplygonUObjects.FoliageSettings
// 0x0018 (0x0018 - 0x0000)
struct FFoliageSettings final
{
public:
	uint8                                         SeparateTrunkAndFoliage : 1;                       // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         MaintainLeafConnections : 1;                       // 0x0000(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SeparateFoliageTriangleRatio;                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SeparateFoliageTriangleThreshold;                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparateFoliageAreaThreshold;                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SeparateFoliageSizeThreshold;                      // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrunkReductionRatio;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFoliageSettings) == 0x000004, "Wrong alignment on FFoliageSettings");
static_assert(sizeof(FFoliageSettings) == 0x000018, "Wrong size on FFoliageSettings");
static_assert(offsetof(FFoliageSettings, SeparateFoliageTriangleRatio) == 0x000004, "Member 'FFoliageSettings::SeparateFoliageTriangleRatio' has a wrong offset!");
static_assert(offsetof(FFoliageSettings, SeparateFoliageTriangleThreshold) == 0x000008, "Member 'FFoliageSettings::SeparateFoliageTriangleThreshold' has a wrong offset!");
static_assert(offsetof(FFoliageSettings, SeparateFoliageAreaThreshold) == 0x00000C, "Member 'FFoliageSettings::SeparateFoliageAreaThreshold' has a wrong offset!");
static_assert(offsetof(FFoliageSettings, SeparateFoliageSizeThreshold) == 0x000010, "Member 'FFoliageSettings::SeparateFoliageSizeThreshold' has a wrong offset!");
static_assert(offsetof(FFoliageSettings, TrunkReductionRatio) == 0x000014, "Member 'FFoliageSettings::TrunkReductionRatio' has a wrong offset!");

// ScriptStruct SimplygonUObjects.BillboardCloudSettings
// 0x0040 (0x0040 - 0x0000)
struct FBillboardCloudSettings final
{
public:
	EBillboardMode                                BillboardMode;                                     // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FavorVerticalPlanes : 1;                           // 0x0001(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         TwoSided : 1;                                      // 0x0001(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         UseVisibilityWeights : 1;                          // 0x0001(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BillboardDensity;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlaneCount;                                     // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeometricComplexity;                               // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFoliageSettings                       FoliageSettings;                                   // 0x0028(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBillboardCloudSettings) == 0x000008, "Wrong alignment on FBillboardCloudSettings");
static_assert(sizeof(FBillboardCloudSettings) == 0x000040, "Wrong size on FBillboardCloudSettings");
static_assert(offsetof(FBillboardCloudSettings, BillboardMode) == 0x000000, "Member 'FBillboardCloudSettings::BillboardMode' has a wrong offset!");
static_assert(offsetof(FBillboardCloudSettings, BillboardDensity) == 0x000004, "Member 'FBillboardCloudSettings::BillboardDensity' has a wrong offset!");
static_assert(offsetof(FBillboardCloudSettings, MaxPlaneCount) == 0x000008, "Member 'FBillboardCloudSettings::MaxPlaneCount' has a wrong offset!");
static_assert(offsetof(FBillboardCloudSettings, GeometricComplexity) == 0x00000C, "Member 'FBillboardCloudSettings::GeometricComplexity' has a wrong offset!");
static_assert(offsetof(FBillboardCloudSettings, UpVector) == 0x000010, "Member 'FBillboardCloudSettings::UpVector' has a wrong offset!");
static_assert(offsetof(FBillboardCloudSettings, FoliageSettings) == 0x000028, "Member 'FBillboardCloudSettings::FoliageSettings' has a wrong offset!");

// ScriptStruct SimplygonUObjects.FlipbookSettings
// 0x0050 (0x0050 - 0x0000)
struct FFlipbookSettings final
{
public:
	int32                                         NumberOfViews;                                     // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ViewDirection;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                UpVector;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfColumns;                                   // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfRows;                                      // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlipRowColumnOrder : 1;                            // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OverrideFlipbookTextureWidth;                      // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         PivotAroundOrigin : 1;                             // 0x0048(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFlipbookSettings) == 0x000008, "Wrong alignment on FFlipbookSettings");
static_assert(sizeof(FFlipbookSettings) == 0x000050, "Wrong size on FFlipbookSettings");
static_assert(offsetof(FFlipbookSettings, NumberOfViews) == 0x000000, "Member 'FFlipbookSettings::NumberOfViews' has a wrong offset!");
static_assert(offsetof(FFlipbookSettings, ViewDirection) == 0x000008, "Member 'FFlipbookSettings::ViewDirection' has a wrong offset!");
static_assert(offsetof(FFlipbookSettings, UpVector) == 0x000020, "Member 'FFlipbookSettings::UpVector' has a wrong offset!");
static_assert(offsetof(FFlipbookSettings, NumberOfColumns) == 0x000038, "Member 'FFlipbookSettings::NumberOfColumns' has a wrong offset!");
static_assert(offsetof(FFlipbookSettings, NumberOfRows) == 0x00003C, "Member 'FFlipbookSettings::NumberOfRows' has a wrong offset!");
static_assert(offsetof(FFlipbookSettings, OverrideFlipbookTextureWidth) == 0x000044, "Member 'FFlipbookSettings::OverrideFlipbookTextureWidth' has a wrong offset!");

// ScriptStruct SimplygonUObjects.ImpostorFromSingleViewSettings
// 0x0030 (0x0030 - 0x0000)
struct FImpostorFromSingleViewSettings final
{
public:
	uint8                                         UseTightFitting : 1;                               // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TightFittingDepthOffset;                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TwoSided : 1;                                      // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ViewDirection;                                     // 0x0010(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TexCoordPadding;                                   // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FImpostorFromSingleViewSettings) == 0x000008, "Wrong alignment on FImpostorFromSingleViewSettings");
static_assert(sizeof(FImpostorFromSingleViewSettings) == 0x000030, "Wrong size on FImpostorFromSingleViewSettings");
static_assert(offsetof(FImpostorFromSingleViewSettings, TightFittingDepthOffset) == 0x000004, "Member 'FImpostorFromSingleViewSettings::TightFittingDepthOffset' has a wrong offset!");
static_assert(offsetof(FImpostorFromSingleViewSettings, ViewDirection) == 0x000010, "Member 'FImpostorFromSingleViewSettings::ViewDirection' has a wrong offset!");
static_assert(offsetof(FImpostorFromSingleViewSettings, TexCoordPadding) == 0x000028, "Member 'FImpostorFromSingleViewSettings::TexCoordPadding' has a wrong offset!");

// ScriptStruct SimplygonUObjects.HighDensityMeshReductionSettings
// 0x0028 (0x0028 - 0x0000)
struct FHighDensityMeshReductionSettings final
{
public:
	uint8                                         OnScreenSizeEnabled : 1;                           // 0x0000(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OnScreenSize;                                      // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         MaxDeviationEnabled : 1;                           // 0x0008(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDeviation;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStopCondition                                StopCondition;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ProcessSelectionSetName;                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHighDensityMeshReductionSettings) == 0x000008, "Wrong alignment on FHighDensityMeshReductionSettings");
static_assert(sizeof(FHighDensityMeshReductionSettings) == 0x000028, "Wrong size on FHighDensityMeshReductionSettings");
static_assert(offsetof(FHighDensityMeshReductionSettings, OnScreenSize) == 0x000004, "Member 'FHighDensityMeshReductionSettings::OnScreenSize' has a wrong offset!");
static_assert(offsetof(FHighDensityMeshReductionSettings, MaxDeviation) == 0x00000C, "Member 'FHighDensityMeshReductionSettings::MaxDeviation' has a wrong offset!");
static_assert(offsetof(FHighDensityMeshReductionSettings, StopCondition) == 0x000010, "Member 'FHighDensityMeshReductionSettings::StopCondition' has a wrong offset!");
static_assert(offsetof(FHighDensityMeshReductionSettings, ProcessSelectionSetName) == 0x000018, "Member 'FHighDensityMeshReductionSettings::ProcessSelectionSetName' has a wrong offset!");

// ScriptStruct SimplygonUObjects.ColorCasterSettings
// 0x0030 (0x0030 - 0x0000)
struct FColorCasterSettings final
{
public:
	class FString                                 MaterialChannel;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpacityChannel;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpacityChannelComponent                      OpacityChannelComponent;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDitherType                                   DitherType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFillMode                                     FillMode;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Dilation;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseMultisampling : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputPixelFormat                            OutputPixelFormat;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputImageFileFormat                        OutputImageFileFormat;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputDDSCompressionType                     OutputDDSCompressionType;                          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OutputSRGB : 1;                                    // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BakeOpacityInAlpha : 1;                            // 0x002C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         SkipCastingIfNoInputChannel : 1;                   // 0x002C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputOpacityType                            OutputOpacityType;                                 // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColorCasterSettings) == 0x000008, "Wrong alignment on FColorCasterSettings");
static_assert(sizeof(FColorCasterSettings) == 0x000030, "Wrong size on FColorCasterSettings");
static_assert(offsetof(FColorCasterSettings, MaterialChannel) == 0x000000, "Member 'FColorCasterSettings::MaterialChannel' has a wrong offset!");
static_assert(offsetof(FColorCasterSettings, OpacityChannel) == 0x000010, "Member 'FColorCasterSettings::OpacityChannel' has a wrong offset!");
static_assert(offsetof(FColorCasterSettings, OpacityChannelComponent) == 0x000020, "Member 'FColorCasterSettings::OpacityChannelComponent' has a wrong offset!");
static_assert(offsetof(FColorCasterSettings, DitherType) == 0x000021, "Member 'FColorCasterSettings::DitherType' has a wrong offset!");
static_assert(offsetof(FColorCasterSettings, FillMode) == 0x000022, "Member 'FColorCasterSettings::FillMode' has a wrong offset!");
static_assert(offsetof(FColorCasterSettings, Dilation) == 0x000024, "Member 'FColorCasterSettings::Dilation' has a wrong offset!");
static_assert(offsetof(FColorCasterSettings, OutputPixelFormat) == 0x000029, "Member 'FColorCasterSettings::OutputPixelFormat' has a wrong offset!");
static_assert(offsetof(FColorCasterSettings, OutputImageFileFormat) == 0x00002A, "Member 'FColorCasterSettings::OutputImageFileFormat' has a wrong offset!");
static_assert(offsetof(FColorCasterSettings, OutputDDSCompressionType) == 0x00002B, "Member 'FColorCasterSettings::OutputDDSCompressionType' has a wrong offset!");
static_assert(offsetof(FColorCasterSettings, OutputOpacityType) == 0x00002D, "Member 'FColorCasterSettings::OutputOpacityType' has a wrong offset!");

// ScriptStruct SimplygonUObjects.OpacityCasterSettings
// 0x0030 (0x0030 - 0x0000)
struct FOpacityCasterSettings final
{
public:
	class FString                                 MaterialChannel;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpacityChannel;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpacityChannelComponent                      OpacityChannelComponent;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDitherType                                   DitherType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFillMode                                     FillMode;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Dilation;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseMultisampling : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputPixelFormat                            OutputPixelFormat;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputImageFileFormat                        OutputImageFileFormat;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputDDSCompressionType                     OutputDDSCompressionType;                          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         OutputSRGB : 1;                                    // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         OutputToTessellatedAttributes : 1;                 // 0x002C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputOpacityType                            OutputOpacityType;                                 // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOpacityCasterSettings) == 0x000008, "Wrong alignment on FOpacityCasterSettings");
static_assert(sizeof(FOpacityCasterSettings) == 0x000030, "Wrong size on FOpacityCasterSettings");
static_assert(offsetof(FOpacityCasterSettings, MaterialChannel) == 0x000000, "Member 'FOpacityCasterSettings::MaterialChannel' has a wrong offset!");
static_assert(offsetof(FOpacityCasterSettings, OpacityChannel) == 0x000010, "Member 'FOpacityCasterSettings::OpacityChannel' has a wrong offset!");
static_assert(offsetof(FOpacityCasterSettings, OpacityChannelComponent) == 0x000020, "Member 'FOpacityCasterSettings::OpacityChannelComponent' has a wrong offset!");
static_assert(offsetof(FOpacityCasterSettings, DitherType) == 0x000021, "Member 'FOpacityCasterSettings::DitherType' has a wrong offset!");
static_assert(offsetof(FOpacityCasterSettings, FillMode) == 0x000022, "Member 'FOpacityCasterSettings::FillMode' has a wrong offset!");
static_assert(offsetof(FOpacityCasterSettings, Dilation) == 0x000024, "Member 'FOpacityCasterSettings::Dilation' has a wrong offset!");
static_assert(offsetof(FOpacityCasterSettings, OutputPixelFormat) == 0x000029, "Member 'FOpacityCasterSettings::OutputPixelFormat' has a wrong offset!");
static_assert(offsetof(FOpacityCasterSettings, OutputImageFileFormat) == 0x00002A, "Member 'FOpacityCasterSettings::OutputImageFileFormat' has a wrong offset!");
static_assert(offsetof(FOpacityCasterSettings, OutputDDSCompressionType) == 0x00002B, "Member 'FOpacityCasterSettings::OutputDDSCompressionType' has a wrong offset!");
static_assert(offsetof(FOpacityCasterSettings, OutputOpacityType) == 0x00002D, "Member 'FOpacityCasterSettings::OutputOpacityType' has a wrong offset!");

// ScriptStruct SimplygonUObjects.NormalCasterSettings
// 0x0030 (0x0030 - 0x0000)
struct FNormalCasterSettings final
{
public:
	class FString                                 MaterialChannel;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpacityChannel;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpacityChannelComponent                      OpacityChannelComponent;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDitherType                                   DitherType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFillMode                                     FillMode;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Dilation;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseMultisampling : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputPixelFormat                            OutputPixelFormat;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputImageFileFormat                        OutputImageFileFormat;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputDDSCompressionType                     OutputDDSCompressionType;                          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FlipBackfacingNormals : 1;                         // 0x002C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EFlipBackfacingMode                           FlipBackfacingMode;                                // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GenerateTangentSpaceNormals : 1;                   // 0x002E(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         FlipGreen : 1;                                     // 0x002E(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         CalculateBitangentPerFragment : 1;                 // 0x002E(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         NormalizeInterpolatedTangentSpace : 1;             // 0x002E(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2F[0x1];                                       // 0x002F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNormalCasterSettings) == 0x000008, "Wrong alignment on FNormalCasterSettings");
static_assert(sizeof(FNormalCasterSettings) == 0x000030, "Wrong size on FNormalCasterSettings");
static_assert(offsetof(FNormalCasterSettings, MaterialChannel) == 0x000000, "Member 'FNormalCasterSettings::MaterialChannel' has a wrong offset!");
static_assert(offsetof(FNormalCasterSettings, OpacityChannel) == 0x000010, "Member 'FNormalCasterSettings::OpacityChannel' has a wrong offset!");
static_assert(offsetof(FNormalCasterSettings, OpacityChannelComponent) == 0x000020, "Member 'FNormalCasterSettings::OpacityChannelComponent' has a wrong offset!");
static_assert(offsetof(FNormalCasterSettings, DitherType) == 0x000021, "Member 'FNormalCasterSettings::DitherType' has a wrong offset!");
static_assert(offsetof(FNormalCasterSettings, FillMode) == 0x000022, "Member 'FNormalCasterSettings::FillMode' has a wrong offset!");
static_assert(offsetof(FNormalCasterSettings, Dilation) == 0x000024, "Member 'FNormalCasterSettings::Dilation' has a wrong offset!");
static_assert(offsetof(FNormalCasterSettings, OutputPixelFormat) == 0x000029, "Member 'FNormalCasterSettings::OutputPixelFormat' has a wrong offset!");
static_assert(offsetof(FNormalCasterSettings, OutputImageFileFormat) == 0x00002A, "Member 'FNormalCasterSettings::OutputImageFileFormat' has a wrong offset!");
static_assert(offsetof(FNormalCasterSettings, OutputDDSCompressionType) == 0x00002B, "Member 'FNormalCasterSettings::OutputDDSCompressionType' has a wrong offset!");
static_assert(offsetof(FNormalCasterSettings, FlipBackfacingMode) == 0x00002D, "Member 'FNormalCasterSettings::FlipBackfacingMode' has a wrong offset!");

// ScriptStruct SimplygonUObjects.DisplacementCasterSettings
// 0x0038 (0x0038 - 0x0000)
struct FDisplacementCasterSettings final
{
public:
	class FString                                 MaterialChannel;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpacityChannel;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpacityChannelComponent                      OpacityChannelComponent;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDitherType                                   DitherType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFillMode                                     FillMode;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Dilation;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseMultisampling : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputPixelFormat                            OutputPixelFormat;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputImageFileFormat                        OutputImageFileFormat;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputDDSCompressionType                     OutputDDSCompressionType;                          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceScaling;                                   // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         GenerateScalarDisplacement : 1;                    // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         OutputToTessellatedAttributes : 1;                 // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         GenerateTangentSpaceDisplacement : 1;              // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NormalMapTexCoordLevel;                            // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisplacementCasterSettings) == 0x000008, "Wrong alignment on FDisplacementCasterSettings");
static_assert(sizeof(FDisplacementCasterSettings) == 0x000038, "Wrong size on FDisplacementCasterSettings");
static_assert(offsetof(FDisplacementCasterSettings, MaterialChannel) == 0x000000, "Member 'FDisplacementCasterSettings::MaterialChannel' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, OpacityChannel) == 0x000010, "Member 'FDisplacementCasterSettings::OpacityChannel' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, OpacityChannelComponent) == 0x000020, "Member 'FDisplacementCasterSettings::OpacityChannelComponent' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, DitherType) == 0x000021, "Member 'FDisplacementCasterSettings::DitherType' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, FillMode) == 0x000022, "Member 'FDisplacementCasterSettings::FillMode' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, Dilation) == 0x000024, "Member 'FDisplacementCasterSettings::Dilation' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, OutputPixelFormat) == 0x000029, "Member 'FDisplacementCasterSettings::OutputPixelFormat' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, OutputImageFileFormat) == 0x00002A, "Member 'FDisplacementCasterSettings::OutputImageFileFormat' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, OutputDDSCompressionType) == 0x00002B, "Member 'FDisplacementCasterSettings::OutputDDSCompressionType' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, DistanceScaling) == 0x00002C, "Member 'FDisplacementCasterSettings::DistanceScaling' has a wrong offset!");
static_assert(offsetof(FDisplacementCasterSettings, NormalMapTexCoordLevel) == 0x000034, "Member 'FDisplacementCasterSettings::NormalMapTexCoordLevel' has a wrong offset!");

// ScriptStruct SimplygonUObjects.AmbientOcclusionCasterSettings
// 0x0040 (0x0040 - 0x0000)
struct FAmbientOcclusionCasterSettings final
{
public:
	class FString                                 MaterialChannel;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpacityChannel;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpacityChannelComponent                      OpacityChannelComponent;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDitherType                                   DitherType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFillMode                                     FillMode;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Dilation;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseMultisampling : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputPixelFormat                            OutputPixelFormat;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputImageFileFormat                        OutputImageFileFormat;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputDDSCompressionType                     OutputDDSCompressionType;                          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RaysPerPixel;                                      // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionFalloff;                                  // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionMultiplier;                               // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseSimpleOcclusionMode : 1;                        // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmbientOcclusionCasterSettings) == 0x000008, "Wrong alignment on FAmbientOcclusionCasterSettings");
static_assert(sizeof(FAmbientOcclusionCasterSettings) == 0x000040, "Wrong size on FAmbientOcclusionCasterSettings");
static_assert(offsetof(FAmbientOcclusionCasterSettings, MaterialChannel) == 0x000000, "Member 'FAmbientOcclusionCasterSettings::MaterialChannel' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, OpacityChannel) == 0x000010, "Member 'FAmbientOcclusionCasterSettings::OpacityChannel' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, OpacityChannelComponent) == 0x000020, "Member 'FAmbientOcclusionCasterSettings::OpacityChannelComponent' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, DitherType) == 0x000021, "Member 'FAmbientOcclusionCasterSettings::DitherType' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, FillMode) == 0x000022, "Member 'FAmbientOcclusionCasterSettings::FillMode' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, Dilation) == 0x000024, "Member 'FAmbientOcclusionCasterSettings::Dilation' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, OutputPixelFormat) == 0x000029, "Member 'FAmbientOcclusionCasterSettings::OutputPixelFormat' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, OutputImageFileFormat) == 0x00002A, "Member 'FAmbientOcclusionCasterSettings::OutputImageFileFormat' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, OutputDDSCompressionType) == 0x00002B, "Member 'FAmbientOcclusionCasterSettings::OutputDDSCompressionType' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, RaysPerPixel) == 0x00002C, "Member 'FAmbientOcclusionCasterSettings::RaysPerPixel' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, OcclusionFalloff) == 0x000030, "Member 'FAmbientOcclusionCasterSettings::OcclusionFalloff' has a wrong offset!");
static_assert(offsetof(FAmbientOcclusionCasterSettings, OcclusionMultiplier) == 0x000034, "Member 'FAmbientOcclusionCasterSettings::OcclusionMultiplier' has a wrong offset!");

// ScriptStruct SimplygonUObjects.GeometryDataCasterSettings
// 0x0080 (0x0080 - 0x0000)
struct FGeometryDataCasterSettings final
{
public:
	class FString                                 MaterialChannel;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpacityChannel;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpacityChannelComponent                      OpacityChannelComponent;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDitherType                                   DitherType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFillMode                                     FillMode;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Dilation;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseMultisampling : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputPixelFormat                            OutputPixelFormat;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputImageFileFormat                        OutputImageFileFormat;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputDDSCompressionType                     OutputDDSCompressionType;                          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGeometryDataFieldType                        GeometryDataFieldType;                             // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GeometryDataFieldIndex;                            // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MappingLayerIndex;                                 // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               MappingInf;                                        // 0x0040(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               MappingSup;                                        // 0x0060(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGeometryDataCasterSettings) == 0x000010, "Wrong alignment on FGeometryDataCasterSettings");
static_assert(sizeof(FGeometryDataCasterSettings) == 0x000080, "Wrong size on FGeometryDataCasterSettings");
static_assert(offsetof(FGeometryDataCasterSettings, MaterialChannel) == 0x000000, "Member 'FGeometryDataCasterSettings::MaterialChannel' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, OpacityChannel) == 0x000010, "Member 'FGeometryDataCasterSettings::OpacityChannel' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, OpacityChannelComponent) == 0x000020, "Member 'FGeometryDataCasterSettings::OpacityChannelComponent' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, DitherType) == 0x000021, "Member 'FGeometryDataCasterSettings::DitherType' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, FillMode) == 0x000022, "Member 'FGeometryDataCasterSettings::FillMode' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, Dilation) == 0x000024, "Member 'FGeometryDataCasterSettings::Dilation' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, OutputPixelFormat) == 0x000029, "Member 'FGeometryDataCasterSettings::OutputPixelFormat' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, OutputImageFileFormat) == 0x00002A, "Member 'FGeometryDataCasterSettings::OutputImageFileFormat' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, OutputDDSCompressionType) == 0x00002B, "Member 'FGeometryDataCasterSettings::OutputDDSCompressionType' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, GeometryDataFieldType) == 0x00002C, "Member 'FGeometryDataCasterSettings::GeometryDataFieldType' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, GeometryDataFieldIndex) == 0x000030, "Member 'FGeometryDataCasterSettings::GeometryDataFieldIndex' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, MappingLayerIndex) == 0x000034, "Member 'FGeometryDataCasterSettings::MappingLayerIndex' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, MappingInf) == 0x000040, "Member 'FGeometryDataCasterSettings::MappingInf' has a wrong offset!");
static_assert(offsetof(FGeometryDataCasterSettings, MappingSup) == 0x000060, "Member 'FGeometryDataCasterSettings::MappingSup' has a wrong offset!");

// ScriptStruct SimplygonUObjects.VertexColorCasterSettings
// 0x0048 (0x0048 - 0x0000)
struct FVertexColorCasterSettings final
{
public:
	class FString                                 MaterialChannel;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpacityChannel;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpacityChannelComponent                      OpacityChannelComponent;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDitherType                                   DitherType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFillMode                                     FillMode;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Dilation;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseMultisampling : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputPixelFormat                            OutputPixelFormat;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputImageFileFormat                        OutputImageFileFormat;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputDDSCompressionType                     OutputDDSCompressionType;                          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutputColorLevel;                                  // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputColorName;                                   // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorSpaceEdgeThreshold;                           // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FVertexColorCasterSettings) == 0x000008, "Wrong alignment on FVertexColorCasterSettings");
static_assert(sizeof(FVertexColorCasterSettings) == 0x000048, "Wrong size on FVertexColorCasterSettings");
static_assert(offsetof(FVertexColorCasterSettings, MaterialChannel) == 0x000000, "Member 'FVertexColorCasterSettings::MaterialChannel' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, OpacityChannel) == 0x000010, "Member 'FVertexColorCasterSettings::OpacityChannel' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, OpacityChannelComponent) == 0x000020, "Member 'FVertexColorCasterSettings::OpacityChannelComponent' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, DitherType) == 0x000021, "Member 'FVertexColorCasterSettings::DitherType' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, FillMode) == 0x000022, "Member 'FVertexColorCasterSettings::FillMode' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, Dilation) == 0x000024, "Member 'FVertexColorCasterSettings::Dilation' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, OutputPixelFormat) == 0x000029, "Member 'FVertexColorCasterSettings::OutputPixelFormat' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, OutputImageFileFormat) == 0x00002A, "Member 'FVertexColorCasterSettings::OutputImageFileFormat' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, OutputDDSCompressionType) == 0x00002B, "Member 'FVertexColorCasterSettings::OutputDDSCompressionType' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, OutputColorLevel) == 0x00002C, "Member 'FVertexColorCasterSettings::OutputColorLevel' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, OutputColorName) == 0x000030, "Member 'FVertexColorCasterSettings::OutputColorName' has a wrong offset!");
static_assert(offsetof(FVertexColorCasterSettings, ColorSpaceEdgeThreshold) == 0x000040, "Member 'FVertexColorCasterSettings::ColorSpaceEdgeThreshold' has a wrong offset!");

// ScriptStruct SimplygonUObjects.ComputeCasterSettings
// 0x0038 (0x0038 - 0x0000)
struct FComputeCasterSettings final
{
public:
	class FString                                 MaterialChannel;                                   // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OpacityChannel;                                    // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOpacityChannelComponent                      OpacityChannelComponent;                           // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDitherType                                   DitherType;                                        // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFillMode                                     FillMode;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Dilation;                                          // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         UseMultisampling : 1;                              // 0x0028(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EOutputPixelFormat                            OutputPixelFormat;                                 // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputImageFileFormat                        OutputImageFileFormat;                             // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputDDSCompressionType                     OutputDDSCompressionType;                          // 0x002B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOutputColorSpace                             OutputColorSpace;                                  // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CastLayersFrontToBack : 1;                         // 0x002D(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_2E[0x2];                                       // 0x002E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxCastLayers;                                     // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FComputeCasterSettings) == 0x000008, "Wrong alignment on FComputeCasterSettings");
static_assert(sizeof(FComputeCasterSettings) == 0x000038, "Wrong size on FComputeCasterSettings");
static_assert(offsetof(FComputeCasterSettings, MaterialChannel) == 0x000000, "Member 'FComputeCasterSettings::MaterialChannel' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, OpacityChannel) == 0x000010, "Member 'FComputeCasterSettings::OpacityChannel' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, OpacityChannelComponent) == 0x000020, "Member 'FComputeCasterSettings::OpacityChannelComponent' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, DitherType) == 0x000021, "Member 'FComputeCasterSettings::DitherType' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, FillMode) == 0x000022, "Member 'FComputeCasterSettings::FillMode' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, Dilation) == 0x000024, "Member 'FComputeCasterSettings::Dilation' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, OutputPixelFormat) == 0x000029, "Member 'FComputeCasterSettings::OutputPixelFormat' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, OutputImageFileFormat) == 0x00002A, "Member 'FComputeCasterSettings::OutputImageFileFormat' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, OutputDDSCompressionType) == 0x00002B, "Member 'FComputeCasterSettings::OutputDDSCompressionType' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, OutputColorSpace) == 0x00002C, "Member 'FComputeCasterSettings::OutputColorSpace' has a wrong offset!");
static_assert(offsetof(FComputeCasterSettings, MaxCastLayers) == 0x000030, "Member 'FComputeCasterSettings::MaxCastLayers' has a wrong offset!");

// ScriptStruct SimplygonUObjects.ReductionPipelineSettings
// 0x0228 (0x0230 - 0x0008)
struct FReductionPipelineSettings final : public FSimplygonPipelineSettings
{
public:
	struct FReductionSettings                     ReductionSettings;                                 // 0x0008(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FRepairSettings                        RepairSettings;                                    // 0x0088(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FNormalCalculationSettings             NormalCalculationSettings;                         // 0x009C(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FVisibilitySettings                    VisibilitySettings;                                // 0x00A8(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneSettings                          BoneSettings;                                      // 0x00E8(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVertexWeightSettings                  VertexWeightSettings;                              // 0x0140(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAttributeTessellationSettings         AttributeTessellationSettings;                     // 0x0168(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMappingImageSettings                  MappingImageSettings;                              // 0x0188(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class USimplygonMaterialCaster*>       MaterialPropertyCasters;                           // 0x0220(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReductionPipelineSettings) == 0x000008, "Wrong alignment on FReductionPipelineSettings");
static_assert(sizeof(FReductionPipelineSettings) == 0x000230, "Wrong size on FReductionPipelineSettings");
static_assert(offsetof(FReductionPipelineSettings, ReductionSettings) == 0x000008, "Member 'FReductionPipelineSettings::ReductionSettings' has a wrong offset!");
static_assert(offsetof(FReductionPipelineSettings, RepairSettings) == 0x000088, "Member 'FReductionPipelineSettings::RepairSettings' has a wrong offset!");
static_assert(offsetof(FReductionPipelineSettings, NormalCalculationSettings) == 0x00009C, "Member 'FReductionPipelineSettings::NormalCalculationSettings' has a wrong offset!");
static_assert(offsetof(FReductionPipelineSettings, VisibilitySettings) == 0x0000A8, "Member 'FReductionPipelineSettings::VisibilitySettings' has a wrong offset!");
static_assert(offsetof(FReductionPipelineSettings, BoneSettings) == 0x0000E8, "Member 'FReductionPipelineSettings::BoneSettings' has a wrong offset!");
static_assert(offsetof(FReductionPipelineSettings, VertexWeightSettings) == 0x000140, "Member 'FReductionPipelineSettings::VertexWeightSettings' has a wrong offset!");
static_assert(offsetof(FReductionPipelineSettings, AttributeTessellationSettings) == 0x000168, "Member 'FReductionPipelineSettings::AttributeTessellationSettings' has a wrong offset!");
static_assert(offsetof(FReductionPipelineSettings, MappingImageSettings) == 0x000188, "Member 'FReductionPipelineSettings::MappingImageSettings' has a wrong offset!");
static_assert(offsetof(FReductionPipelineSettings, MaterialPropertyCasters) == 0x000220, "Member 'FReductionPipelineSettings::MaterialPropertyCasters' has a wrong offset!");

// ScriptStruct SimplygonUObjects.RemeshingPipelineSettings
// 0x01D0 (0x01D8 - 0x0008)
struct FRemeshingPipelineSettings final : public FSimplygonPipelineSettings
{
public:
	struct FRemeshingSettings                     RemeshingSettings;                                 // 0x0008(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FBoneSettings                          BoneSettings;                                      // 0x0048(0x0058)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGeometryCullingSettings               GeometryCullingSettings;                           // 0x00A0(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVisibilitySettings                    VisibilitySettings;                                // 0x00D0(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAttributeTessellationSettings         AttributeTessellationSettings;                     // 0x0110(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMappingImageSettings                  MappingImageSettings;                              // 0x0130(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class USimplygonMaterialCaster*>       MaterialPropertyCasters;                           // 0x01C8(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRemeshingPipelineSettings) == 0x000008, "Wrong alignment on FRemeshingPipelineSettings");
static_assert(sizeof(FRemeshingPipelineSettings) == 0x0001D8, "Wrong size on FRemeshingPipelineSettings");
static_assert(offsetof(FRemeshingPipelineSettings, RemeshingSettings) == 0x000008, "Member 'FRemeshingPipelineSettings::RemeshingSettings' has a wrong offset!");
static_assert(offsetof(FRemeshingPipelineSettings, BoneSettings) == 0x000048, "Member 'FRemeshingPipelineSettings::BoneSettings' has a wrong offset!");
static_assert(offsetof(FRemeshingPipelineSettings, GeometryCullingSettings) == 0x0000A0, "Member 'FRemeshingPipelineSettings::GeometryCullingSettings' has a wrong offset!");
static_assert(offsetof(FRemeshingPipelineSettings, VisibilitySettings) == 0x0000D0, "Member 'FRemeshingPipelineSettings::VisibilitySettings' has a wrong offset!");
static_assert(offsetof(FRemeshingPipelineSettings, AttributeTessellationSettings) == 0x000110, "Member 'FRemeshingPipelineSettings::AttributeTessellationSettings' has a wrong offset!");
static_assert(offsetof(FRemeshingPipelineSettings, MappingImageSettings) == 0x000130, "Member 'FRemeshingPipelineSettings::MappingImageSettings' has a wrong offset!");
static_assert(offsetof(FRemeshingPipelineSettings, MaterialPropertyCasters) == 0x0001C8, "Member 'FRemeshingPipelineSettings::MaterialPropertyCasters' has a wrong offset!");

// ScriptStruct SimplygonUObjects.AggregationPipelineSettings
// 0x01B8 (0x01C0 - 0x0008)
struct FAggregationPipelineSettings final : public FSimplygonPipelineSettings
{
public:
	struct FAggregationSettings                   AggregationSettings;                               // 0x0008(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVisibilitySettings                    VisibilitySettings;                                // 0x0038(0x0040)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGeometryCullingSettings               GeometryCullingSettings;                           // 0x0078(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVertexWeightSettings                  VertexWeightSettings;                              // 0x00A8(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAttributeTessellationSettings         AttributeTessellationSettings;                     // 0x00D0(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMappingImageSettings                  MappingImageSettings;                              // 0x00F0(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGenerateLightmapTexCoordSettings      GenerateLightmapTexCoordSettings;                  // 0x0188(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class USimplygonMaterialCaster*>       MaterialPropertyCasters;                           // 0x01B0(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAggregationPipelineSettings) == 0x000008, "Wrong alignment on FAggregationPipelineSettings");
static_assert(sizeof(FAggregationPipelineSettings) == 0x0001C0, "Wrong size on FAggregationPipelineSettings");
static_assert(offsetof(FAggregationPipelineSettings, AggregationSettings) == 0x000008, "Member 'FAggregationPipelineSettings::AggregationSettings' has a wrong offset!");
static_assert(offsetof(FAggregationPipelineSettings, VisibilitySettings) == 0x000038, "Member 'FAggregationPipelineSettings::VisibilitySettings' has a wrong offset!");
static_assert(offsetof(FAggregationPipelineSettings, GeometryCullingSettings) == 0x000078, "Member 'FAggregationPipelineSettings::GeometryCullingSettings' has a wrong offset!");
static_assert(offsetof(FAggregationPipelineSettings, VertexWeightSettings) == 0x0000A8, "Member 'FAggregationPipelineSettings::VertexWeightSettings' has a wrong offset!");
static_assert(offsetof(FAggregationPipelineSettings, AttributeTessellationSettings) == 0x0000D0, "Member 'FAggregationPipelineSettings::AttributeTessellationSettings' has a wrong offset!");
static_assert(offsetof(FAggregationPipelineSettings, MappingImageSettings) == 0x0000F0, "Member 'FAggregationPipelineSettings::MappingImageSettings' has a wrong offset!");
static_assert(offsetof(FAggregationPipelineSettings, GenerateLightmapTexCoordSettings) == 0x000188, "Member 'FAggregationPipelineSettings::GenerateLightmapTexCoordSettings' has a wrong offset!");
static_assert(offsetof(FAggregationPipelineSettings, MaterialPropertyCasters) == 0x0001B0, "Member 'FAggregationPipelineSettings::MaterialPropertyCasters' has a wrong offset!");

// ScriptStruct SimplygonUObjects.BillboardCloudPipelineSettings
// 0x0108 (0x0110 - 0x0008)
struct FBillboardCloudPipelineSettings final : public FSimplygonPipelineSettings
{
public:
	struct FBillboardCloudSettings                BillboardCloudSettings;                            // 0x0008(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAttributeTessellationSettings         AttributeTessellationSettings;                     // 0x0048(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMappingImageSettings                  MappingImageSettings;                              // 0x0068(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class USimplygonMaterialCaster*>       MaterialPropertyCasters;                           // 0x0100(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBillboardCloudPipelineSettings) == 0x000008, "Wrong alignment on FBillboardCloudPipelineSettings");
static_assert(sizeof(FBillboardCloudPipelineSettings) == 0x000110, "Wrong size on FBillboardCloudPipelineSettings");
static_assert(offsetof(FBillboardCloudPipelineSettings, BillboardCloudSettings) == 0x000008, "Member 'FBillboardCloudPipelineSettings::BillboardCloudSettings' has a wrong offset!");
static_assert(offsetof(FBillboardCloudPipelineSettings, AttributeTessellationSettings) == 0x000048, "Member 'FBillboardCloudPipelineSettings::AttributeTessellationSettings' has a wrong offset!");
static_assert(offsetof(FBillboardCloudPipelineSettings, MappingImageSettings) == 0x000068, "Member 'FBillboardCloudPipelineSettings::MappingImageSettings' has a wrong offset!");
static_assert(offsetof(FBillboardCloudPipelineSettings, MaterialPropertyCasters) == 0x000100, "Member 'FBillboardCloudPipelineSettings::MaterialPropertyCasters' has a wrong offset!");

// ScriptStruct SimplygonUObjects.BillboardCloudVegetationPipelineSettings
// 0x0108 (0x0110 - 0x0008)
struct FBillboardCloudVegetationPipelineSettings final : public FSimplygonPipelineSettings
{
public:
	struct FBillboardCloudSettings                BillboardCloudSettings;                            // 0x0008(0x0040)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAttributeTessellationSettings         AttributeTessellationSettings;                     // 0x0048(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMappingImageSettings                  MappingImageSettings;                              // 0x0068(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class USimplygonMaterialCaster*>       MaterialPropertyCasters;                           // 0x0100(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBillboardCloudVegetationPipelineSettings) == 0x000008, "Wrong alignment on FBillboardCloudVegetationPipelineSettings");
static_assert(sizeof(FBillboardCloudVegetationPipelineSettings) == 0x000110, "Wrong size on FBillboardCloudVegetationPipelineSettings");
static_assert(offsetof(FBillboardCloudVegetationPipelineSettings, BillboardCloudSettings) == 0x000008, "Member 'FBillboardCloudVegetationPipelineSettings::BillboardCloudSettings' has a wrong offset!");
static_assert(offsetof(FBillboardCloudVegetationPipelineSettings, AttributeTessellationSettings) == 0x000048, "Member 'FBillboardCloudVegetationPipelineSettings::AttributeTessellationSettings' has a wrong offset!");
static_assert(offsetof(FBillboardCloudVegetationPipelineSettings, MappingImageSettings) == 0x000068, "Member 'FBillboardCloudVegetationPipelineSettings::MappingImageSettings' has a wrong offset!");
static_assert(offsetof(FBillboardCloudVegetationPipelineSettings, MaterialPropertyCasters) == 0x000100, "Member 'FBillboardCloudVegetationPipelineSettings::MaterialPropertyCasters' has a wrong offset!");

// ScriptStruct SimplygonUObjects.FlipbookPipelineSettings
// 0x0118 (0x0120 - 0x0008)
struct FFlipbookPipelineSettings final : public FSimplygonPipelineSettings
{
public:
	struct FFlipbookSettings                      FlipbookSettings;                                  // 0x0008(0x0050)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAttributeTessellationSettings         AttributeTessellationSettings;                     // 0x0058(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMappingImageSettings                  MappingImageSettings;                              // 0x0078(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class USimplygonMaterialCaster*>       MaterialPropertyCasters;                           // 0x0110(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFlipbookPipelineSettings) == 0x000008, "Wrong alignment on FFlipbookPipelineSettings");
static_assert(sizeof(FFlipbookPipelineSettings) == 0x000120, "Wrong size on FFlipbookPipelineSettings");
static_assert(offsetof(FFlipbookPipelineSettings, FlipbookSettings) == 0x000008, "Member 'FFlipbookPipelineSettings::FlipbookSettings' has a wrong offset!");
static_assert(offsetof(FFlipbookPipelineSettings, AttributeTessellationSettings) == 0x000058, "Member 'FFlipbookPipelineSettings::AttributeTessellationSettings' has a wrong offset!");
static_assert(offsetof(FFlipbookPipelineSettings, MappingImageSettings) == 0x000078, "Member 'FFlipbookPipelineSettings::MappingImageSettings' has a wrong offset!");
static_assert(offsetof(FFlipbookPipelineSettings, MaterialPropertyCasters) == 0x000110, "Member 'FFlipbookPipelineSettings::MaterialPropertyCasters' has a wrong offset!");

// ScriptStruct SimplygonUObjects.ImpostorFromSingleViewPipelineSettings
// 0x00F8 (0x0100 - 0x0008)
struct FImpostorFromSingleViewPipelineSettings final : public FSimplygonPipelineSettings
{
public:
	struct FImpostorFromSingleViewSettings        ImpostorFromSingleViewSettings;                    // 0x0008(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FAttributeTessellationSettings         AttributeTessellationSettings;                     // 0x0038(0x0020)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMappingImageSettings                  MappingImageSettings;                              // 0x0058(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class USimplygonMaterialCaster*>       MaterialPropertyCasters;                           // 0x00F0(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FImpostorFromSingleViewPipelineSettings) == 0x000008, "Wrong alignment on FImpostorFromSingleViewPipelineSettings");
static_assert(sizeof(FImpostorFromSingleViewPipelineSettings) == 0x000100, "Wrong size on FImpostorFromSingleViewPipelineSettings");
static_assert(offsetof(FImpostorFromSingleViewPipelineSettings, ImpostorFromSingleViewSettings) == 0x000008, "Member 'FImpostorFromSingleViewPipelineSettings::ImpostorFromSingleViewSettings' has a wrong offset!");
static_assert(offsetof(FImpostorFromSingleViewPipelineSettings, AttributeTessellationSettings) == 0x000038, "Member 'FImpostorFromSingleViewPipelineSettings::AttributeTessellationSettings' has a wrong offset!");
static_assert(offsetof(FImpostorFromSingleViewPipelineSettings, MappingImageSettings) == 0x000058, "Member 'FImpostorFromSingleViewPipelineSettings::MappingImageSettings' has a wrong offset!");
static_assert(offsetof(FImpostorFromSingleViewPipelineSettings, MaterialPropertyCasters) == 0x0000F0, "Member 'FImpostorFromSingleViewPipelineSettings::MaterialPropertyCasters' has a wrong offset!");

// ScriptStruct SimplygonUObjects.HighDensityMeshReductionPipelineSettings
// 0x0028 (0x0030 - 0x0008)
struct FHighDensityMeshReductionPipelineSettings final : public FSimplygonPipelineSettings
{
public:
	struct FHighDensityMeshReductionSettings      HighDensityMeshReductionSettings;                  // 0x0008(0x0028)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHighDensityMeshReductionPipelineSettings) == 0x000008, "Wrong alignment on FHighDensityMeshReductionPipelineSettings");
static_assert(sizeof(FHighDensityMeshReductionPipelineSettings) == 0x000030, "Wrong size on FHighDensityMeshReductionPipelineSettings");
static_assert(offsetof(FHighDensityMeshReductionPipelineSettings, HighDensityMeshReductionSettings) == 0x000008, "Member 'FHighDensityMeshReductionPipelineSettings::HighDensityMeshReductionSettings' has a wrong offset!");

}

