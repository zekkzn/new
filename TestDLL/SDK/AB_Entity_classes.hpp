#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: AB_Entity

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AB_Entity_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "DBDAnimation_classes.hpp"


namespace SDK
{

// AnimBlueprintGeneratedClass AB_Entity.AB_Entity_C
// 0x0600 (0x0960 - 0x0360)
class UAB_Entity_C final : public UEntityAnimInstance
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0360(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	struct AB_Entity::FAnimBlueprintGeneratedMutableData __AnimBlueprintMutables;                           // 0x0368(0x0008)(HasGetValueTypeHash)
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_PropertyAccess;             // 0x0370(0x0008)()
	struct FAnimSubsystemInstance                 AnimBlueprintExtension_Base;                       // 0x0378(0x0008)()
	struct FAnimNode_Root                         AnimGraphNode_Root;                                // 0x0380(0x0020)()
	struct FAnimNode_Slot                         AnimGraphNode_Slot;                                // 0x03A0(0x0050)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult_1;                  // 0x03F0(0x0028)()
	struct FAnimNode_TransitionResult             AnimGraphNode_TransitionResult;                    // 0x0418(0x0028)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer_1;                    // 0x0440(0x0048)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult_1;                       // 0x0488(0x0020)()
	struct FAnimNode_LayeredBoneBlend             AnimGraphNode_LayeredBoneBlend;                    // 0x04A8(0x00E0)()
	struct FAnimNode_SequencePlayer               AnimGraphNode_SequencePlayer;                      // 0x0588(0x0048)()
	struct FAnimNode_BlendSpacePlayer             AnimGraphNode_BlendSpacePlayer;                    // 0x05D0(0x0070)()
	struct FAnimNode_StateResult                  AnimGraphNode_StateResult;                         // 0x0640(0x0020)()
	struct FAnimNode_StateMachine                 AnimGraphNode_StateMachine;                        // 0x0660(0x00C8)()
	struct FAnimNode_TwoWayBlend                  AnimGraphNode_TwoWayBlend;                         // 0x0728(0x00C8)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose_1;                     // 0x07F0(0x0030)()
	struct FAnimNode_SaveCachedPose               AnimGraphNode_SaveCachedPose;                      // 0x0820(0x0108)()
	struct FAnimNode_UseCachedPose                AnimGraphNode_UseCachedPose;                       // 0x0928(0x0030)()

public:
	void ExecuteUbergraph_AB_Entity(int32 EntryPoint);
	void AnimNotify_OnSurvivorSacrificed();
	void AnimGraph(struct FPoseLink* Param_AnimGraph);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"AB_Entity_C">();
	}
	static class UAB_Entity_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAB_Entity_C>();
	}
};
static_assert(alignof(UAB_Entity_C) == 0x000010, "Wrong alignment on UAB_Entity_C");
static_assert(sizeof(UAB_Entity_C) == 0x000960, "Wrong size on UAB_Entity_C");
static_assert(offsetof(UAB_Entity_C, UberGraphFrame) == 0x000360, "Member 'UAB_Entity_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, __AnimBlueprintMutables) == 0x000368, "Member 'UAB_Entity_C::__AnimBlueprintMutables' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimBlueprintExtension_PropertyAccess) == 0x000370, "Member 'UAB_Entity_C::AnimBlueprintExtension_PropertyAccess' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimBlueprintExtension_Base) == 0x000378, "Member 'UAB_Entity_C::AnimBlueprintExtension_Base' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_Root) == 0x000380, "Member 'UAB_Entity_C::AnimGraphNode_Root' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_Slot) == 0x0003A0, "Member 'UAB_Entity_C::AnimGraphNode_Slot' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_TransitionResult_1) == 0x0003F0, "Member 'UAB_Entity_C::AnimGraphNode_TransitionResult_1' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_TransitionResult) == 0x000418, "Member 'UAB_Entity_C::AnimGraphNode_TransitionResult' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_SequencePlayer_1) == 0x000440, "Member 'UAB_Entity_C::AnimGraphNode_SequencePlayer_1' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_StateResult_1) == 0x000488, "Member 'UAB_Entity_C::AnimGraphNode_StateResult_1' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_LayeredBoneBlend) == 0x0004A8, "Member 'UAB_Entity_C::AnimGraphNode_LayeredBoneBlend' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_SequencePlayer) == 0x000588, "Member 'UAB_Entity_C::AnimGraphNode_SequencePlayer' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_BlendSpacePlayer) == 0x0005D0, "Member 'UAB_Entity_C::AnimGraphNode_BlendSpacePlayer' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_StateResult) == 0x000640, "Member 'UAB_Entity_C::AnimGraphNode_StateResult' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_StateMachine) == 0x000660, "Member 'UAB_Entity_C::AnimGraphNode_StateMachine' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_TwoWayBlend) == 0x000728, "Member 'UAB_Entity_C::AnimGraphNode_TwoWayBlend' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_UseCachedPose_1) == 0x0007F0, "Member 'UAB_Entity_C::AnimGraphNode_UseCachedPose_1' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_SaveCachedPose) == 0x000820, "Member 'UAB_Entity_C::AnimGraphNode_SaveCachedPose' has a wrong offset!");
static_assert(offsetof(UAB_Entity_C, AnimGraphNode_UseCachedPose) == 0x000928, "Member 'UAB_Entity_C::AnimGraphNode_UseCachedPose' has a wrong offset!");

}

