#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewInterfaces

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreCommonUIUtils_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "RemoteContentCache_structs.hpp"


namespace SDK
{

// Enum DBDUIViewInterfaces.EArchiveTomeMenuState
// NumValues: 0x0003
enum class EArchiveTomeMenuState : uint8
{
	QuestMap                                 = 0,
	Journal                                  = 1,
	EArchiveTomeMenuState_MAX                = 2,
};

// Enum DBDUIViewInterfaces.EChallengesMenuChallengeSetState
// NumValues: 0x0004
enum class EChallengesMenuChallengeSetState : uint8
{
	Rituals                                  = 0,
	RewardTrack                              = 1,
	Store                                    = 2,
	EChallengesMenuChallengeSetState_MAX     = 3,
};

// Enum DBDUIViewInterfaces.EInboxTab
// NumValues: 0x0004
enum class EInboxTab : uint8
{
	News                                     = 0,
	Messages                                 = 1,
	Count                                    = 2,
	EInboxTab_MAX                            = 3,
};

// Enum DBDUIViewInterfaces.ELobbyCharactersMenuState
// NumValues: 0x0004
enum class ELobbyCharactersMenuState : uint8
{
	Selection                                = 0,
	Customizations                           = 1,
	Bio                                      = 2,
	ELobbyCharactersMenuState_MAX            = 3,
};

// Enum DBDUIViewInterfaces.EOnboardingMenuState
// NumValues: 0x0003
enum class EOnboardingMenuState : uint8
{
	Tutorial                                 = 0,
	GameManual                               = 1,
	EOnboardingMenuState_MAX                 = 2,
};

// Enum DBDUIViewInterfaces.EProfileMenuState
// NumValues: 0x0004
enum class EProfileMenuState : uint8
{
	Stats                                    = 0,
	Badge                                    = 1,
	Banner                                   = 2,
	EProfileMenuState_MAX                    = 3,
};

// Enum DBDUIViewInterfaces.EStoreMenuState
// NumValues: 0x0007
enum class EStoreMenuState : uint8
{
	Featured                                 = 0,
	Specials                                 = 1,
	Collections                              = 2,
	SpecialPacks                             = 3,
	Killers                                  = 4,
	Survivors                                = 5,
	EStoreMenuState_MAX                      = 6,
};

// Enum DBDUIViewInterfaces.EOriginWidgetState
// NumValues: 0x0007
enum class EOriginWidgetState : uint8
{
	None                                     = 0,
	CurrencyPurchase                         = 1,
	Store                                    = 2,
	Archives                                 = 3,
	Gameplay                                 = 4,
	MilestonePoints                          = 5,
	EOriginWidgetState_MAX                   = 6,
};

// Enum DBDUIViewInterfaces.EStoreItemAvailabilityType
// NumValues: 0x0006
enum class EStoreItemAvailabilityType : uint8
{
	None                                     = 0,
	Disabled                                 = 1,
	Unavailable                              = 2,
	Available                                = 3,
	AlsoAvailable                            = 4,
	EStoreItemAvailabilityType_MAX           = 5,
};

// Enum DBDUIViewInterfaces.EStoreItemUnlockType
// NumValues: 0x000A
enum class EStoreItemUnlockType : uint8
{
	None                                     = 0,
	Tutorial                                 = 1,
	Store                                    = 2,
	Event                                    = 3,
	ChapterPack                              = 4,
	HeritagePack                             = 5,
	SpecialPack                              = 6,
	ArchiveTome                              = 7,
	ArchiveRift                              = 8,
	EStoreItemUnlockType_MAX                 = 9,
};

// Enum DBDUIViewInterfaces.EAntiCampSelfUnhookMeterState
// NumValues: 0x0005
enum class EAntiCampSelfUnhookMeterState : uint8
{
	Hidden                                   = 0,
	FillingUp                                = 1,
	Stopped                                  = 2,
	Full                                     = 3,
	EAntiCampSelfUnhookMeterState_MAX        = 4,
};

// Enum DBDUIViewInterfaces.EArchivePathStatus
// NumValues: 0x0004
enum class EArchivePathStatus : uint8
{
	Closed                                   = 0,
	Available                                = 1,
	Completed                                = 2,
	EArchivePathStatus_MAX                   = 3,
};

// Enum DBDUIViewInterfaces.ETierType
// NumValues: 0x0003
enum class ETierType : uint8
{
	None                                     = 0,
	Bonus                                    = 1,
	ETierType_MAX                            = 2,
};

// Enum DBDUIViewInterfaces.EArchiveTomeType
// NumValues: 0x0004
enum class EArchiveTomeType : uint8
{
	CurrentTome                              = 0,
	PastTome                                 = 1,
	EventTome                                = 2,
	EArchiveTomeType_MAX                     = 3,
};

// Enum DBDUIViewInterfaces.ECrossPromoMediaResourceLinkType
// NumValues: 0x0004
enum class ECrossPromoMediaResourceLinkType : uint32
{
	None                                     = 0,
	External                                 = 1,
	InProvider                               = 2,
	ECrossPromoMediaResourceLinkType_MAX     = 3,
};

// Enum DBDUIViewInterfaces.EEventEntryTabState
// NumValues: 0x0005
enum class EEventEntryTabState : uint8
{
	Event                                    = 0,
	Details                                  = 1,
	Collection                               = 2,
	Store                                    = 3,
	EEventEntryTabState_MAX                  = 4,
};

// Enum DBDUIViewInterfaces.EGameManualMenuState
// NumValues: 0x0003
enum class EGameManualMenuState : uint8
{
	Categories                               = 0,
	Topics                                   = 1,
	EGameManualMenuState_MAX                 = 2,
};

// Enum DBDUIViewInterfaces.ESingleHookState
// NumValues: 0x0006
enum class ESingleHookState : uint8
{
	EMPTY                                    = 0,
	UNHOOKED                                 = 1,
	HOOKED                                   = 2,
	HOOKED_ASSISTED                          = 3,
	DISCONNECTED                             = 4,
	ESingleHookState_MAX                     = 5,
};

// Enum DBDUIViewInterfaces.EAimingCrosshairState
// NumValues: 0x000B
enum class EAimingCrosshairState : uint8
{
	Invalid                                  = 0,
	Hidden                                   = 1,
	NoTarget                                 = 2,
	Cooldown                                 = 3,
	Assimilating                             = 4,
	Teleporting                              = 5,
	AssimilatingProgressDecreasing           = 6,
	TeleportingProgressDecreasing            = 7,
	LockedOut                                = 8,
	Leaving                                  = 9,
	EAimingCrosshairState_MAX                = 10,
};

// Enum DBDUIViewInterfaces.EHudStatusEffectAlertViewType
// NumValues: 0x0005
enum class EHudStatusEffectAlertViewType : uint8
{
	Unhandled                                = 0,
	Perk                                     = 1,
	Item                                     = 2,
	Addon                                    = 3,
	EHudStatusEffectAlertViewType_MAX        = 4,
};

// Enum DBDUIViewInterfaces.EInboxRewardStatus
// NumValues: 0x0004
enum class EInboxRewardStatus : uint8
{
	NoReward                                 = 0,
	Unclaimed                                = 1,
	Claimed                                  = 2,
	EInboxRewardStatus_MAX                   = 3,
};

// Enum DBDUIViewInterfaces.EInteractionPromptType
// NumValues: 0x0009
enum class EInteractionPromptType : uint8
{
	None                                     = 0,
	PressButton                              = 1,
	MashButton                               = 2,
	HoldButton                               = 3,
	AlternateTwoButtons                      = 4,
	WiggleThumbstick                         = 5,
	MovementAxes                             = 6,
	MovementKeys                             = 7,
	EInteractionPromptType_MAX               = 8,
};

// Enum DBDUIViewInterfaces.ELoadingScreenType
// NumValues: 0x0007
enum class ELoadingScreenType : uint8
{
	None                                     = 0,
	Simple                                   = 1,
	Regular                                  = 2,
	Special                                  = 3,
	LTECustom                                = 4,
	LTEGeneric                               = 5,
	ELoadingScreenType_MAX                   = 6,
};

// Enum DBDUIViewInterfaces.ELobbyMenuState
// NumValues: 0x0005
enum class ELobbyMenuState : uint8
{
	None                                     = 0,
	Characters                               = 1,
	PlayerList                               = 2,
	Scaleform                                = 3,
	ELobbyMenuState_MAX                      = 4,
};

// Enum DBDUIViewInterfaces.ELockedElementType
// NumValues: 0x0004
enum class ELockedElementType : uint8
{
	Default                                  = 0,
	MainMenuButton                           = 1,
	FooterButton                             = 2,
	ELockedElementType_MAX                   = 3,
};

// Enum DBDUIViewInterfaces.EMainMenuButtonType
// NumValues: 0x0015
enum class EMainMenuButtonType : uint8
{
	News                                     = 0,
	Play                                     = 1,
	PlaySurvivor                             = 2,
	PlayKiller                               = 3,
	KillYourFriends                          = 4,
	PlayLTE                                  = 5,
	PlaySurvivorLTE                          = 6,
	PlayKillerLTE                            = 7,
	DailyRituals                             = 8,
	Store                                    = 9,
	Settings                                 = 10,
	Onboarding                               = 11,
	Credits                                  = 12,
	QuitGame                                 = 13,
	Friends                                  = 14,
	Archives                                 = 15,
	Event                                    = 16,
	MarketingInvitation                      = 17,
	Challenges                               = 18,
	Count                                    = 19,
	EMainMenuButtonType_MAX                  = 20,
};

// Enum DBDUIViewInterfaces.EMilestoneTrackerItemState
// NumValues: 0x0004
enum class EMilestoneTrackerItemState : uint8
{
	Unlocked                                 = 0,
	InProgress                               = 1,
	Locked                                   = 2,
	EMilestoneTrackerItemState_MAX           = 3,
};

// Enum DBDUIViewInterfaces.EButtonDisableState
// NumValues: 0x0005
enum class EButtonDisableState : uint8
{
	Default                                  = 0,
	Loading                                  = 1,
	Locked                                   = 2,
	Disabled                                 = 3,
	EButtonDisableState_MAX                  = 4,
};

// Enum DBDUIViewInterfaces.EPerkRandomSuccessType
// NumValues: 0x0003
enum class EPerkRandomSuccessType : uint8
{
	Default                                  = 0,
	D20                                      = 1,
	EPerkRandomSuccessType_MAX               = 2,
};

// Enum DBDUIViewInterfaces.EPerkRandomSuccessResult
// NumValues: 0x0005
enum class EPerkRandomSuccessResult : uint8
{
	CriticalFail                             = 0,
	BasicSuccess                             = 1,
	MediumSuccess                            = 2,
	CriticalSuccess                          = 3,
	EPerkRandomSuccessResult_MAX             = 4,
};

// Enum DBDUIViewInterfaces.EScrollAction
// NumValues: 0x0004
enum class EScrollAction : uint8
{
	NoAction                                 = 0,
	ScrollToTop                              = 1,
	ScrollToSelected                         = 2,
	EScrollAction_MAX                        = 3,
};

// Enum DBDUIViewInterfaces.EStoreCharactersMenuState
// NumValues: 0x0004
enum class EStoreCharactersMenuState : uint8
{
	Selection                                = 0,
	Customizations                           = 1,
	Bio                                      = 2,
	EStoreCharactersMenuState_MAX            = 3,
};

// Enum DBDUIViewInterfaces.EStoreCollectionsMenuState
// NumValues: 0x0003
enum class EStoreCollectionsMenuState : uint8
{
	List                                     = 0,
	Customizations                           = 1,
	EStoreCollectionsMenuState_MAX           = 2,
};

// Enum DBDUIViewInterfaces.EStoreItemLayout
// NumValues: 0x000B
enum class EStoreItemLayout : uint16
{
	None                                     = 0,
	OwnedTag                                 = 1,
	LockedTag                                = 2,
	TimerTags                                = 4,
	PriceTags                                = 8,
	EventCheckmarkTag                        = 16,
	EventIconTag                             = 32,
	UnavailableTag                           = 64,
	NotificationTag                          = 128,
	PrestigeTag                              = 256,
	EStoreItemLayout_MAX                     = 257,
};

// Enum DBDUIViewInterfaces.ERightStickMode
// NumValues: 0x0004
enum class ERightStickMode : uint8
{
	None                                     = 0,
	Scrolling                                = 1,
	Rotation                                 = 2,
	ERightStickMode_MAX                      = 3,
};

// Enum DBDUIViewInterfaces.EStoreSpecialPacksTabState
// NumValues: 0x0004
enum class EStoreSpecialPacksTabState : uint8
{
	Special                                  = 0,
	Chapter                                  = 1,
	Heritage                                 = 2,
	EStoreSpecialPacksTabState_MAX           = 3,
};

// Enum DBDUIViewInterfaces.EStoreSpecialPacksScreenState
// NumValues: 0x0003
enum class EStoreSpecialPacksScreenState : uint8
{
	Tabs                                     = 0,
	Details                                  = 1,
	EStoreSpecialPacksScreenState_MAX        = 2,
};

// Enum DBDUIViewInterfaces.ETallyTabState
// NumValues: 0x0003
enum class ETallyTabState : uint8
{
	None                                     = 0,
	Scoreboard                               = 1,
	ETallyTabState_MAX                       = 2,
};

// Enum DBDUIViewInterfaces.ETestBuildFlagPosition
// NumValues: 0x0004
enum class ETestBuildFlagPosition : uint8
{
	Hud                                      = 0,
	MainMenu                                 = 1,
	Lobby                                    = 2,
	ETestBuildFlagPosition_MAX               = 3,
};

// Enum DBDUIViewInterfaces.EFlagType
// NumValues: 0x0005
enum class EFlagType : uint8
{
	Default                                  = 0,
	Sale                                     = 1,
	Limited                                  = 2,
	ArchiveRift                              = 3,
	EFlagType_MAX                            = 4,
};

// Enum DBDUIViewInterfaces.EFlagSize
// NumValues: 0x0005
enum class EFlagSize : uint8
{
	Short                                    = 0,
	Medium                                   = 1,
	Large                                    = 2,
	Preview                                  = 3,
	EFlagSize_MAX                            = 4,
};

// Enum DBDUIViewInterfaces.EFlagItemType
// NumValues: 0x0004
enum class EFlagItemType : uint8
{
	Unbreakable                              = 0,
	Outfit                                   = 1,
	Item                                     = 2,
	EFlagItemType_MAX                        = 3,
};

// Enum DBDUIViewInterfaces.EWardrobeActionButtonState
// NumValues: 0x0004
enum class EWardrobeActionButtonState : uint8
{
	Invisible                                = 0,
	VisibleAndEnabled                        = 1,
	VisibleAndDisabled                       = 2,
	EWardrobeActionButtonState_MAX           = 3,
};

// ScriptStruct DBDUIViewInterfaces.EventObjectiveTargetData
// 0x0008 (0x0008 - 0x0000)
struct FEventObjectiveTargetData final
{
public:
	int32                                         Progression;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bonus;                                             // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventObjectiveTargetData) == 0x000004, "Wrong alignment on FEventObjectiveTargetData");
static_assert(sizeof(FEventObjectiveTargetData) == 0x000008, "Wrong size on FEventObjectiveTargetData");
static_assert(offsetof(FEventObjectiveTargetData, Progression) == 0x000000, "Member 'FEventObjectiveTargetData::Progression' has a wrong offset!");
static_assert(offsetof(FEventObjectiveTargetData, Bonus) == 0x000004, "Member 'FEventObjectiveTargetData::Bonus' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CustomIconPathExclusionUIDataRow
// 0x0010 (0x0018 - 0x0008)
struct FCustomIconPathExclusionUIDataRow final : public FTableRowBase
{
public:
	class FString                                 Path;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomIconPathExclusionUIDataRow) == 0x000008, "Wrong alignment on FCustomIconPathExclusionUIDataRow");
static_assert(sizeof(FCustomIconPathExclusionUIDataRow) == 0x000018, "Wrong size on FCustomIconPathExclusionUIDataRow");
static_assert(offsetof(FCustomIconPathExclusionUIDataRow, Path) == 0x000008, "Member 'FCustomIconPathExclusionUIDataRow::Path' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreCharactersFiltersData
// 0x0058 (0x0058 - 0x0000)
struct FStoreCharactersFiltersData final
{
public:
	bool                                          IsAvailable;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EItemRarity, bool>                       _rarityFiltersMap;                                 // 0x0008(0x0050)(Edit, DisableEditOnTemplate, Transient, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FStoreCharactersFiltersData) == 0x000008, "Wrong alignment on FStoreCharactersFiltersData");
static_assert(sizeof(FStoreCharactersFiltersData) == 0x000058, "Wrong size on FStoreCharactersFiltersData");
static_assert(offsetof(FStoreCharactersFiltersData, IsAvailable) == 0x000000, "Member 'FStoreCharactersFiltersData::IsAvailable' has a wrong offset!");
static_assert(offsetof(FStoreCharactersFiltersData, IsOwned) == 0x000001, "Member 'FStoreCharactersFiltersData::IsOwned' has a wrong offset!");
static_assert(offsetof(FStoreCharactersFiltersData, _rarityFiltersMap) == 0x000008, "Member 'FStoreCharactersFiltersData::_rarityFiltersMap' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreItemUnlockInfoViewData
// 0x0030 (0x0030 - 0x0000)
struct FStoreItemUnlockInfoViewData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, Transient, ExposeOnSpawn, NativeAccessSpecifierPublic)
	EStoreItemUnlockType                          UnlockType;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStoreItemAvailabilityType                    AvailabilityType;                                  // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoreItemUnlockInfoViewData) == 0x000008, "Wrong alignment on FStoreItemUnlockInfoViewData");
static_assert(sizeof(FStoreItemUnlockInfoViewData) == 0x000030, "Wrong size on FStoreItemUnlockInfoViewData");
static_assert(offsetof(FStoreItemUnlockInfoViewData, ID) == 0x000000, "Member 'FStoreItemUnlockInfoViewData::ID' has a wrong offset!");
static_assert(offsetof(FStoreItemUnlockInfoViewData, Title) == 0x000010, "Member 'FStoreItemUnlockInfoViewData::Title' has a wrong offset!");
static_assert(offsetof(FStoreItemUnlockInfoViewData, UnlockType) == 0x000028, "Member 'FStoreItemUnlockInfoViewData::UnlockType' has a wrong offset!");
static_assert(offsetof(FStoreItemUnlockInfoViewData, AvailabilityType) == 0x000029, "Member 'FStoreItemUnlockInfoViewData::AvailabilityType' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CharacterTooltipViewData
// 0x0088 (0x0088 - 0x0000)
struct FCharacterTooltipViewData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Biography;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FStoreItemUnlockInfoViewData           UnlockInfo;                                        // 0x0030(0x0030)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNewInStore;                                      // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0065(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTutorialItem;                                    // 0x0066(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailableInStore;                                // 0x0067(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDisabledItemOption                           DisabledItemOption;                                // 0x0069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CharacterDisabledMessage;                          // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterTooltipViewData) == 0x000008, "Wrong alignment on FCharacterTooltipViewData");
static_assert(sizeof(FCharacterTooltipViewData) == 0x000088, "Wrong size on FCharacterTooltipViewData");
static_assert(offsetof(FCharacterTooltipViewData, DisplayName) == 0x000000, "Member 'FCharacterTooltipViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, Biography) == 0x000018, "Member 'FCharacterTooltipViewData::Biography' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, UnlockInfo) == 0x000030, "Member 'FCharacterTooltipViewData::UnlockInfo' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, Level) == 0x000060, "Member 'FCharacterTooltipViewData::Level' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsNewInStore) == 0x000064, "Member 'FCharacterTooltipViewData::IsNewInStore' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsOwned) == 0x000065, "Member 'FCharacterTooltipViewData::IsOwned' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsTutorialItem) == 0x000066, "Member 'FCharacterTooltipViewData::IsTutorialItem' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsAvailableInStore) == 0x000067, "Member 'FCharacterTooltipViewData::IsAvailableInStore' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, IsEnabled) == 0x000068, "Member 'FCharacterTooltipViewData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, DisabledItemOption) == 0x000069, "Member 'FCharacterTooltipViewData::DisabledItemOption' has a wrong offset!");
static_assert(offsetof(FCharacterTooltipViewData, CharacterDisabledMessage) == 0x000070, "Member 'FCharacterTooltipViewData::CharacterDisabledMessage' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.RewardViewData
// 0x0070 (0x0070 - 0x0000)
struct FRewardViewData
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimationWidgetClass;                              // 0x0038(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardViewData) == 0x000008, "Wrong alignment on FRewardViewData");
static_assert(sizeof(FRewardViewData) == 0x000070, "Wrong size on FRewardViewData");
static_assert(offsetof(FRewardViewData, Icon) == 0x000000, "Member 'FRewardViewData::Icon' has a wrong offset!");
static_assert(offsetof(FRewardViewData, AnimationWidgetClass) == 0x000038, "Member 'FRewardViewData::AnimationWidgetClass' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CharacterRewardViewData
// 0x00A0 (0x0110 - 0x0070)
struct FCharacterRewardViewData final : public FRewardViewData
{
public:
	class FName                                   ItemId;                                            // 0x0070(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterTooltipViewData              TooltipData;                                       // 0x0080(0x0088)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   PlayerRole;                                        // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLegacyRewardPrestigeEnabled;                     // 0x010A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B[0x5];                                      // 0x010B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCharacterRewardViewData) == 0x000008, "Wrong alignment on FCharacterRewardViewData");
static_assert(sizeof(FCharacterRewardViewData) == 0x000110, "Wrong size on FCharacterRewardViewData");
static_assert(offsetof(FCharacterRewardViewData, ItemId) == 0x000070, "Member 'FCharacterRewardViewData::ItemId' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, IsOwned) == 0x00007C, "Member 'FCharacterRewardViewData::IsOwned' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, TooltipData) == 0x000080, "Member 'FCharacterRewardViewData::TooltipData' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, IsEnabled) == 0x000108, "Member 'FCharacterRewardViewData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, PlayerRole) == 0x000109, "Member 'FCharacterRewardViewData::PlayerRole' has a wrong offset!");
static_assert(offsetof(FCharacterRewardViewData, IsLegacyRewardPrestigeEnabled) == 0x00010A, "Member 'FCharacterRewardViewData::IsLegacyRewardPrestigeEnabled' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.NotEnoughCurrencyModalViewData
// 0x0038 (0x0038 - 0x0000)
struct FNotEnoughCurrencyModalViewData final
{
public:
	class FText                                   Content;                                           // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   ButtonText;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	ECurrencyType                                 CurrencyType;                                      // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldShowButton;                                  // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNotEnoughCurrencyModalViewData) == 0x000008, "Wrong alignment on FNotEnoughCurrencyModalViewData");
static_assert(sizeof(FNotEnoughCurrencyModalViewData) == 0x000038, "Wrong size on FNotEnoughCurrencyModalViewData");
static_assert(offsetof(FNotEnoughCurrencyModalViewData, Content) == 0x000000, "Member 'FNotEnoughCurrencyModalViewData::Content' has a wrong offset!");
static_assert(offsetof(FNotEnoughCurrencyModalViewData, ButtonText) == 0x000018, "Member 'FNotEnoughCurrencyModalViewData::ButtonText' has a wrong offset!");
static_assert(offsetof(FNotEnoughCurrencyModalViewData, CurrencyType) == 0x000030, "Member 'FNotEnoughCurrencyModalViewData::CurrencyType' has a wrong offset!");
static_assert(offsetof(FNotEnoughCurrencyModalViewData, ShouldShowButton) == 0x000031, "Member 'FNotEnoughCurrencyModalViewData::ShouldShowButton' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PriceTagViewData
// 0x0050 (0x0050 - 0x0000)
struct FPriceTagViewData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ECurrencyType                                 Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAffordable;                                      // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FullAmount;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNotEnoughCurrencyModalViewData        NotEnoughCurrencyViewData;                         // 0x0018(0x0038)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPriceTagViewData) == 0x000008, "Wrong alignment on FPriceTagViewData");
static_assert(sizeof(FPriceTagViewData) == 0x000050, "Wrong size on FPriceTagViewData");
static_assert(offsetof(FPriceTagViewData, Type) == 0x000008, "Member 'FPriceTagViewData::Type' has a wrong offset!");
static_assert(offsetof(FPriceTagViewData, Amount) == 0x00000C, "Member 'FPriceTagViewData::Amount' has a wrong offset!");
static_assert(offsetof(FPriceTagViewData, IsAffordable) == 0x000010, "Member 'FPriceTagViewData::IsAffordable' has a wrong offset!");
static_assert(offsetof(FPriceTagViewData, FullAmount) == 0x000014, "Member 'FPriceTagViewData::FullAmount' has a wrong offset!");
static_assert(offsetof(FPriceTagViewData, NotEnoughCurrencyViewData) == 0x000018, "Member 'FPriceTagViewData::NotEnoughCurrencyViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CustomizationTooltipViewData
// 0x0130 (0x0130 - 0x0000)
struct FCustomizationTooltipViewData final
{
public:
	class FText                                   DisplayName;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   ParentName;                                        // 0x0018(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   RarityPartInfo;                                    // 0x0030(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   CollectionDisplayName;                             // 0x0048(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0060(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   RoleCategoryInfo;                                  // 0x0078(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	EOriginWidgetState                            CustomizationOriginState;                          // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CustomizationOriginInfo;                           // 0x0098(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x00B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnbreakable;                                     // 0x00B1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEquipped;                                        // 0x00B2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBuyable;                                         // 0x00B3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailable;                                       // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowAvailability;                                  // 0x00B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisceral;                                        // 0x00B7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOutfitPart;                                      // 0x00B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   OutfitInfoText;                                    // 0x00C0(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	EPlayerRole                                   AssociatedRole;                                    // 0x00D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x00D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA[0x6];                                       // 0x00DA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPriceTagViewData>              Prices;                                            // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x00F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDisabledItemOption                           DisabledItemOption;                                // 0x00F1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CustomizationDisabledMessage;                      // 0x00F8(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FString                                 EventBannerLabel;                                  // 0x0110(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasOutfitParts;                                    // 0x0120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCustomizationRewardOutfitPartsViewData* OutfitParts;                                       // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationTooltipViewData) == 0x000008, "Wrong alignment on FCustomizationTooltipViewData");
static_assert(sizeof(FCustomizationTooltipViewData) == 0x000130, "Wrong size on FCustomizationTooltipViewData");
static_assert(offsetof(FCustomizationTooltipViewData, DisplayName) == 0x000000, "Member 'FCustomizationTooltipViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, ParentName) == 0x000018, "Member 'FCustomizationTooltipViewData::ParentName' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, RarityPartInfo) == 0x000030, "Member 'FCustomizationTooltipViewData::RarityPartInfo' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, CollectionDisplayName) == 0x000048, "Member 'FCustomizationTooltipViewData::CollectionDisplayName' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, Description) == 0x000060, "Member 'FCustomizationTooltipViewData::Description' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, RoleCategoryInfo) == 0x000078, "Member 'FCustomizationTooltipViewData::RoleCategoryInfo' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, CustomizationOriginState) == 0x000090, "Member 'FCustomizationTooltipViewData::CustomizationOriginState' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, CustomizationOriginInfo) == 0x000098, "Member 'FCustomizationTooltipViewData::CustomizationOriginInfo' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsLocked) == 0x0000B0, "Member 'FCustomizationTooltipViewData::IsLocked' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsUnbreakable) == 0x0000B1, "Member 'FCustomizationTooltipViewData::IsUnbreakable' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsEquipped) == 0x0000B2, "Member 'FCustomizationTooltipViewData::IsEquipped' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsBuyable) == 0x0000B3, "Member 'FCustomizationTooltipViewData::IsBuyable' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsAvailable) == 0x0000B4, "Member 'FCustomizationTooltipViewData::IsAvailable' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsOwned) == 0x0000B5, "Member 'FCustomizationTooltipViewData::IsOwned' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, ShowAvailability) == 0x0000B6, "Member 'FCustomizationTooltipViewData::ShowAvailability' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsVisceral) == 0x0000B7, "Member 'FCustomizationTooltipViewData::IsVisceral' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsOutfitPart) == 0x0000B8, "Member 'FCustomizationTooltipViewData::IsOutfitPart' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, OutfitInfoText) == 0x0000C0, "Member 'FCustomizationTooltipViewData::OutfitInfoText' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, AssociatedRole) == 0x0000D8, "Member 'FCustomizationTooltipViewData::AssociatedRole' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, Rarity) == 0x0000D9, "Member 'FCustomizationTooltipViewData::Rarity' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, Prices) == 0x0000E0, "Member 'FCustomizationTooltipViewData::Prices' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, IsEnabled) == 0x0000F0, "Member 'FCustomizationTooltipViewData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, DisabledItemOption) == 0x0000F1, "Member 'FCustomizationTooltipViewData::DisabledItemOption' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, CustomizationDisabledMessage) == 0x0000F8, "Member 'FCustomizationTooltipViewData::CustomizationDisabledMessage' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, EventBannerLabel) == 0x000110, "Member 'FCustomizationTooltipViewData::EventBannerLabel' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, HasOutfitParts) == 0x000120, "Member 'FCustomizationTooltipViewData::HasOutfitParts' has a wrong offset!");
static_assert(offsetof(FCustomizationTooltipViewData, OutfitParts) == 0x000128, "Member 'FCustomizationTooltipViewData::OutfitParts' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CustomizationRewardViewData
// 0x01A0 (0x0210 - 0x0070)
struct FCustomizationRewardViewData final : public FRewardViewData
{
public:
	class FName                                   CustomizationId;                                   // 0x0070(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OutfitId;                                          // 0x007C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              ReleaseDate;                                       // 0x0088(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBuyable;                                         // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEquipped;                                        // 0x0093(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnbreakable;                                     // 0x0094(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEventItem;                                       // 0x0095(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisceral;                                        // 0x0096(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   EventID;                                           // 0x0098(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomizationTooltipViewData          TooltipData;                                       // 0x00A8(0x0130)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	ECustomizationCategory                        CustomizationCategory;                             // 0x01D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AssociatedCharacter;                               // 0x01DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x01E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GrantsMilestonePointOnUnlock;                      // 0x01E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E2[0x6];                                      // 0x01E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPriceTagViewData>              PriceTagData;                                      // 0x01E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class FString                                 InclusionVersion;                                  // 0x01F8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowLockedOverlay;                                 // 0x0208(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationRewardViewData) == 0x000008, "Wrong alignment on FCustomizationRewardViewData");
static_assert(sizeof(FCustomizationRewardViewData) == 0x000210, "Wrong size on FCustomizationRewardViewData");
static_assert(offsetof(FCustomizationRewardViewData, CustomizationId) == 0x000070, "Member 'FCustomizationRewardViewData::CustomizationId' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, OutfitId) == 0x00007C, "Member 'FCustomizationRewardViewData::OutfitId' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, ReleaseDate) == 0x000088, "Member 'FCustomizationRewardViewData::ReleaseDate' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, Rarity) == 0x000090, "Member 'FCustomizationRewardViewData::Rarity' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsOwned) == 0x000091, "Member 'FCustomizationRewardViewData::IsOwned' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsBuyable) == 0x000092, "Member 'FCustomizationRewardViewData::IsBuyable' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsEquipped) == 0x000093, "Member 'FCustomizationRewardViewData::IsEquipped' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsUnbreakable) == 0x000094, "Member 'FCustomizationRewardViewData::IsUnbreakable' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsEventItem) == 0x000095, "Member 'FCustomizationRewardViewData::IsEventItem' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsVisceral) == 0x000096, "Member 'FCustomizationRewardViewData::IsVisceral' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, EventID) == 0x000098, "Member 'FCustomizationRewardViewData::EventID' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, TooltipData) == 0x0000A8, "Member 'FCustomizationRewardViewData::TooltipData' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, CustomizationCategory) == 0x0001D8, "Member 'FCustomizationRewardViewData::CustomizationCategory' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, AssociatedCharacter) == 0x0001DC, "Member 'FCustomizationRewardViewData::AssociatedCharacter' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, IsEnabled) == 0x0001E0, "Member 'FCustomizationRewardViewData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, GrantsMilestonePointOnUnlock) == 0x0001E1, "Member 'FCustomizationRewardViewData::GrantsMilestonePointOnUnlock' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, PriceTagData) == 0x0001E8, "Member 'FCustomizationRewardViewData::PriceTagData' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, InclusionVersion) == 0x0001F8, "Member 'FCustomizationRewardViewData::InclusionVersion' has a wrong offset!");
static_assert(offsetof(FCustomizationRewardViewData, ShowLockedOverlay) == 0x000208, "Member 'FCustomizationRewardViewData::ShowLockedOverlay' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CurrencyExpirationLabelViewData
// 0x0020 (0x0020 - 0x0000)
struct FCurrencyExpirationLabelViewData final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ExpirationDate;                                    // 0x0008(0x0018)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyExpirationLabelViewData) == 0x000008, "Wrong alignment on FCurrencyExpirationLabelViewData");
static_assert(sizeof(FCurrencyExpirationLabelViewData) == 0x000020, "Wrong size on FCurrencyExpirationLabelViewData");
static_assert(offsetof(FCurrencyExpirationLabelViewData, Amount) == 0x000000, "Member 'FCurrencyExpirationLabelViewData::Amount' has a wrong offset!");
static_assert(offsetof(FCurrencyExpirationLabelViewData, ExpirationDate) == 0x000008, "Member 'FCurrencyExpirationLabelViewData::ExpirationDate' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CurrencyProgressionTooltipViewData
// 0x0100 (0x0100 - 0x0000)
struct FCurrencyProgressionTooltipViewData final
{
public:
	bool                                          IsCurrency;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      TooltipHeaderMaterial;                             // 0x0038(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TooltipDecorationIcon;                             // 0x0070(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EventName;                                         // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   EventDescription;                                  // 0x00C0(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   EventTimer;                                        // 0x00D8(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TArray<struct FCurrencyExpirationLabelViewData> ExpirationData;                                    // 0x00F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyProgressionTooltipViewData) == 0x000008, "Wrong alignment on FCurrencyProgressionTooltipViewData");
static_assert(sizeof(FCurrencyProgressionTooltipViewData) == 0x000100, "Wrong size on FCurrencyProgressionTooltipViewData");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, IsCurrency) == 0x000000, "Member 'FCurrencyProgressionTooltipViewData::IsCurrency' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, Title) == 0x000008, "Member 'FCurrencyProgressionTooltipViewData::Title' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, Description) == 0x000020, "Member 'FCurrencyProgressionTooltipViewData::Description' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, TooltipHeaderMaterial) == 0x000038, "Member 'FCurrencyProgressionTooltipViewData::TooltipHeaderMaterial' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, TooltipDecorationIcon) == 0x000070, "Member 'FCurrencyProgressionTooltipViewData::TooltipDecorationIcon' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, EventName) == 0x0000A8, "Member 'FCurrencyProgressionTooltipViewData::EventName' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, EventDescription) == 0x0000C0, "Member 'FCurrencyProgressionTooltipViewData::EventDescription' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, EventTimer) == 0x0000D8, "Member 'FCurrencyProgressionTooltipViewData::EventTimer' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionTooltipViewData, ExpirationData) == 0x0000F0, "Member 'FCurrencyProgressionTooltipViewData::ExpirationData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CurrencyProgressionRewardViewData
// 0x0148 (0x01B8 - 0x0070)
struct FCurrencyProgressionRewardViewData final : public FRewardViewData
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProgressionType                              ProgressionType;                                   // 0x0071(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_72[0x2];                                       // 0x0072(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Amount;                                            // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAffordable;                                      // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      RewardBackgroundMaterial;                          // 0x0080(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurrencyProgressionTooltipViewData    TooltipData;                                       // 0x00B8(0x0100)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyProgressionRewardViewData) == 0x000008, "Wrong alignment on FCurrencyProgressionRewardViewData");
static_assert(sizeof(FCurrencyProgressionRewardViewData) == 0x0001B8, "Wrong size on FCurrencyProgressionRewardViewData");
static_assert(offsetof(FCurrencyProgressionRewardViewData, CurrencyType) == 0x000070, "Member 'FCurrencyProgressionRewardViewData::CurrencyType' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, ProgressionType) == 0x000071, "Member 'FCurrencyProgressionRewardViewData::ProgressionType' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, Amount) == 0x000074, "Member 'FCurrencyProgressionRewardViewData::Amount' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, IsAffordable) == 0x000078, "Member 'FCurrencyProgressionRewardViewData::IsAffordable' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, RewardBackgroundMaterial) == 0x000080, "Member 'FCurrencyProgressionRewardViewData::RewardBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FCurrencyProgressionRewardViewData, TooltipData) == 0x0000B8, "Member 'FCurrencyProgressionRewardViewData::TooltipData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.RewardWrapperViewData
// 0x0528 (0x0528 - 0x0000)
struct FRewardWrapperViewData final
{
public:
	ERewardType                                   RewardType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterRewardViewData               CharacterRewardViewData;                           // 0x0008(0x0110)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCurrencyProgressionRewardViewData     CurrencyProgressionRewardViewData;                 // 0x0118(0x01B8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FCustomizationRewardViewData           CustomizationRewardViewData;                       // 0x02D0(0x0210)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 EventThemeLabel;                                   // 0x04E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UAkAudioEvent>           DesiredAudioEvent;                                 // 0x04F0(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRewardWrapperViewData) == 0x000008, "Wrong alignment on FRewardWrapperViewData");
static_assert(sizeof(FRewardWrapperViewData) == 0x000528, "Wrong size on FRewardWrapperViewData");
static_assert(offsetof(FRewardWrapperViewData, RewardType) == 0x000000, "Member 'FRewardWrapperViewData::RewardType' has a wrong offset!");
static_assert(offsetof(FRewardWrapperViewData, CharacterRewardViewData) == 0x000008, "Member 'FRewardWrapperViewData::CharacterRewardViewData' has a wrong offset!");
static_assert(offsetof(FRewardWrapperViewData, CurrencyProgressionRewardViewData) == 0x000118, "Member 'FRewardWrapperViewData::CurrencyProgressionRewardViewData' has a wrong offset!");
static_assert(offsetof(FRewardWrapperViewData, CustomizationRewardViewData) == 0x0002D0, "Member 'FRewardWrapperViewData::CustomizationRewardViewData' has a wrong offset!");
static_assert(offsetof(FRewardWrapperViewData, EventThemeLabel) == 0x0004E0, "Member 'FRewardWrapperViewData::EventThemeLabel' has a wrong offset!");
static_assert(offsetof(FRewardWrapperViewData, DesiredAudioEvent) == 0x0004F0, "Member 'FRewardWrapperViewData::DesiredAudioEvent' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveNodeObjectiveViewData
// 0x0028 (0x0028 - 0x0000)
struct FArchiveNodeObjectiveViewData final
{
public:
	class FText                                   Description;                                       // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusCommunityProgress;                            // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestProgressionType                         ProgressionType;                                   // 0x0024(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCommunityObjective;                              // 0x0025(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchiveNodeObjectiveViewData) == 0x000008, "Wrong alignment on FArchiveNodeObjectiveViewData");
static_assert(sizeof(FArchiveNodeObjectiveViewData) == 0x000028, "Wrong size on FArchiveNodeObjectiveViewData");
static_assert(offsetof(FArchiveNodeObjectiveViewData, Description) == 0x000000, "Member 'FArchiveNodeObjectiveViewData::Description' has a wrong offset!");
static_assert(offsetof(FArchiveNodeObjectiveViewData, CurrentProgress) == 0x000018, "Member 'FArchiveNodeObjectiveViewData::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FArchiveNodeObjectiveViewData, MaxProgress) == 0x00001C, "Member 'FArchiveNodeObjectiveViewData::MaxProgress' has a wrong offset!");
static_assert(offsetof(FArchiveNodeObjectiveViewData, BonusCommunityProgress) == 0x000020, "Member 'FArchiveNodeObjectiveViewData::BonusCommunityProgress' has a wrong offset!");
static_assert(offsetof(FArchiveNodeObjectiveViewData, ProgressionType) == 0x000024, "Member 'FArchiveNodeObjectiveViewData::ProgressionType' has a wrong offset!");
static_assert(offsetof(FArchiveNodeObjectiveViewData, IsCommunityObjective) == 0x000025, "Member 'FArchiveNodeObjectiveViewData::IsCommunityObjective' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeTrackerViewData
// 0x0050 (0x0050 - 0x0000)
struct FChallengeTrackerViewData final
{
public:
	class FText                                   ChallengeTitle;                                    // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	EChallengeSetType                             ChallengeSetType;                                  // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveNodeObjectiveViewData          ProgressionData;                                   // 0x0020(0x0028)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeTrackerViewData) == 0x000008, "Wrong alignment on FChallengeTrackerViewData");
static_assert(sizeof(FChallengeTrackerViewData) == 0x000050, "Wrong size on FChallengeTrackerViewData");
static_assert(offsetof(FChallengeTrackerViewData, ChallengeTitle) == 0x000000, "Member 'FChallengeTrackerViewData::ChallengeTitle' has a wrong offset!");
static_assert(offsetof(FChallengeTrackerViewData, ChallengeSetType) == 0x000018, "Member 'FChallengeTrackerViewData::ChallengeSetType' has a wrong offset!");
static_assert(offsetof(FChallengeTrackerViewData, ProgressionData) == 0x000020, "Member 'FChallengeTrackerViewData::ProgressionData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeObjectiveViewData
// 0x0030 (0x0030 - 0x0000)
struct FChallengeObjectiveViewData final
{
public:
	class FString                                 ObjectiveId;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncrementWithEventRepetitions;                     // 0x0010(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 NeededProgression;                                 // 0x0018(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsCommunityObjective;                              // 0x0028(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxProgressionPerPlayer;                           // 0x002C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeObjectiveViewData) == 0x000008, "Wrong alignment on FChallengeObjectiveViewData");
static_assert(sizeof(FChallengeObjectiveViewData) == 0x000030, "Wrong size on FChallengeObjectiveViewData");
static_assert(offsetof(FChallengeObjectiveViewData, ObjectiveId) == 0x000000, "Member 'FChallengeObjectiveViewData::ObjectiveId' has a wrong offset!");
static_assert(offsetof(FChallengeObjectiveViewData, IncrementWithEventRepetitions) == 0x000010, "Member 'FChallengeObjectiveViewData::IncrementWithEventRepetitions' has a wrong offset!");
static_assert(offsetof(FChallengeObjectiveViewData, NeededProgression) == 0x000018, "Member 'FChallengeObjectiveViewData::NeededProgression' has a wrong offset!");
static_assert(offsetof(FChallengeObjectiveViewData, IsCommunityObjective) == 0x000028, "Member 'FChallengeObjectiveViewData::IsCommunityObjective' has a wrong offset!");
static_assert(offsetof(FChallengeObjectiveViewData, MaxProgressionPerPlayer) == 0x00002C, "Member 'FChallengeObjectiveViewData::MaxProgressionPerPlayer' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeObjectiveProgressionViewData
// 0x0028 (0x0028 - 0x0000)
struct FChallengeObjectiveProgressionViewData final
{
public:
	class FString                                 ObjectiveId;                                       // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ObjectiveInfo;                                     // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x0020(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Objective;                                         // 0x0024(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeObjectiveProgressionViewData) == 0x000008, "Wrong alignment on FChallengeObjectiveProgressionViewData");
static_assert(sizeof(FChallengeObjectiveProgressionViewData) == 0x000028, "Wrong size on FChallengeObjectiveProgressionViewData");
static_assert(offsetof(FChallengeObjectiveProgressionViewData, ObjectiveId) == 0x000000, "Member 'FChallengeObjectiveProgressionViewData::ObjectiveId' has a wrong offset!");
static_assert(offsetof(FChallengeObjectiveProgressionViewData, ObjectiveInfo) == 0x000010, "Member 'FChallengeObjectiveProgressionViewData::ObjectiveInfo' has a wrong offset!");
static_assert(offsetof(FChallengeObjectiveProgressionViewData, Progress) == 0x000020, "Member 'FChallengeObjectiveProgressionViewData::Progress' has a wrong offset!");
static_assert(offsetof(FChallengeObjectiveProgressionViewData, Objective) == 0x000024, "Member 'FChallengeObjectiveProgressionViewData::Objective' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeViewData
// 0x0648 (0x0648 - 0x0000)
struct FChallengeViewData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChallengeTitle;                                    // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChallengeDescription;                              // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChallengeIcon;                                     // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LifetimeInDays;                                    // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FChallengeObjectiveViewData> Objectives;                                        // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FChallengeObjectiveProgressionViewData> Progression;                                       // 0x0098(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         RewardPoints;                                      // 0x00E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRewardWrapperViewData                 RewardPointsProgressionData;                       // 0x00F0(0x0528)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         Rewards;                                           // 0x0618(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	EChallengeType                                ChallengeType;                                     // 0x0628(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              Starttime;                                         // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0638(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   RoleType;                                          // 0x0640(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_641[0x7];                                      // 0x0641(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeViewData) == 0x000008, "Wrong alignment on FChallengeViewData");
static_assert(sizeof(FChallengeViewData) == 0x000648, "Wrong size on FChallengeViewData");
static_assert(offsetof(FChallengeViewData, ID) == 0x000000, "Member 'FChallengeViewData::ID' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, ChallengeTitle) == 0x000010, "Member 'FChallengeViewData::ChallengeTitle' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, ChallengeDescription) == 0x000020, "Member 'FChallengeViewData::ChallengeDescription' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, ChallengeIcon) == 0x000030, "Member 'FChallengeViewData::ChallengeIcon' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, LifetimeInDays) == 0x000040, "Member 'FChallengeViewData::LifetimeInDays' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, Objectives) == 0x000048, "Member 'FChallengeViewData::Objectives' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, Progression) == 0x000098, "Member 'FChallengeViewData::Progression' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, RewardPoints) == 0x0000E8, "Member 'FChallengeViewData::RewardPoints' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, RewardPointsProgressionData) == 0x0000F0, "Member 'FChallengeViewData::RewardPointsProgressionData' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, Rewards) == 0x000618, "Member 'FChallengeViewData::Rewards' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, ChallengeType) == 0x000628, "Member 'FChallengeViewData::ChallengeType' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, Starttime) == 0x000630, "Member 'FChallengeViewData::Starttime' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, EndTime) == 0x000638, "Member 'FChallengeViewData::EndTime' has a wrong offset!");
static_assert(offsetof(FChallengeViewData, RoleType) == 0x000640, "Member 'FChallengeViewData::RoleType' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.AlertsViewData
// 0x0060 (0x0060 - 0x0000)
struct FAlertsViewData final
{
public:
	TArray<struct FRewardWrapperViewData>         AlertRewards;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FChallengeViewData>             CompletedChallenges;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         ChallengesRewards;                                 // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FChallengeTrackerViewData>      ChallengesTrackers;                                // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 AlertHeader;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThemeLabel;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAlertsViewData) == 0x000008, "Wrong alignment on FAlertsViewData");
static_assert(sizeof(FAlertsViewData) == 0x000060, "Wrong size on FAlertsViewData");
static_assert(offsetof(FAlertsViewData, AlertRewards) == 0x000000, "Member 'FAlertsViewData::AlertRewards' has a wrong offset!");
static_assert(offsetof(FAlertsViewData, CompletedChallenges) == 0x000010, "Member 'FAlertsViewData::CompletedChallenges' has a wrong offset!");
static_assert(offsetof(FAlertsViewData, ChallengesRewards) == 0x000020, "Member 'FAlertsViewData::ChallengesRewards' has a wrong offset!");
static_assert(offsetof(FAlertsViewData, ChallengesTrackers) == 0x000030, "Member 'FAlertsViewData::ChallengesTrackers' has a wrong offset!");
static_assert(offsetof(FAlertsViewData, AlertHeader) == 0x000040, "Member 'FAlertsViewData::AlertHeader' has a wrong offset!");
static_assert(offsetof(FAlertsViewData, ThemeLabel) == 0x000050, "Member 'FAlertsViewData::ThemeLabel' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveNodeViewData
// 0x00B8 (0x00B8 - 0x0000)
struct FArchiveNodeViewData final
{
public:
	EArchiveNodeType                              Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStoryNodeState                               Status;                                            // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Subtitle;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0038(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FString                                 DebugInfo;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IconPath;                                          // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FArchiveNodeObjectiveViewData>  Objectives;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         Rewards;                                           // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class FText>                           VignetteTitles;                                    // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsImageReward;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A2[0x6];                                       // 0x00A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VignetteId;                                        // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveNodeViewData) == 0x000008, "Wrong alignment on FArchiveNodeViewData");
static_assert(sizeof(FArchiveNodeViewData) == 0x0000B8, "Wrong size on FArchiveNodeViewData");
static_assert(offsetof(FArchiveNodeViewData, Type) == 0x000000, "Member 'FArchiveNodeViewData::Type' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Status) == 0x000001, "Member 'FArchiveNodeViewData::Status' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Title) == 0x000008, "Member 'FArchiveNodeViewData::Title' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Subtitle) == 0x000020, "Member 'FArchiveNodeViewData::Subtitle' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Description) == 0x000038, "Member 'FArchiveNodeViewData::Description' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, DebugInfo) == 0x000050, "Member 'FArchiveNodeViewData::DebugInfo' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, IconPath) == 0x000060, "Member 'FArchiveNodeViewData::IconPath' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Objectives) == 0x000070, "Member 'FArchiveNodeViewData::Objectives' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Rewards) == 0x000080, "Member 'FArchiveNodeViewData::Rewards' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, VignetteTitles) == 0x000090, "Member 'FArchiveNodeViewData::VignetteTitles' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, Role) == 0x0000A0, "Member 'FArchiveNodeViewData::Role' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, IsImageReward) == 0x0000A1, "Member 'FArchiveNodeViewData::IsImageReward' has a wrong offset!");
static_assert(offsetof(FArchiveNodeViewData, VignetteId) == 0x0000A8, "Member 'FArchiveNodeViewData::VignetteId' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.DisplayStandViewData
// 0x0008 (0x0008 - 0x0000)
struct FDisplayStandViewData final
{
public:
	float                                         RotationSpeed;                                     // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseControllerRotation;                             // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDisplayStandViewData) == 0x000004, "Wrong alignment on FDisplayStandViewData");
static_assert(sizeof(FDisplayStandViewData) == 0x000008, "Wrong size on FDisplayStandViewData");
static_assert(offsetof(FDisplayStandViewData, RotationSpeed) == 0x000000, "Member 'FDisplayStandViewData::RotationSpeed' has a wrong offset!");
static_assert(offsetof(FDisplayStandViewData, UseControllerRotation) == 0x000004, "Member 'FDisplayStandViewData::UseControllerRotation' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.LoadoutTooltipData
// 0x00B0 (0x00B0 - 0x0000)
struct FLoadoutTooltipData final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SkillCharacterClass;                               // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0020(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   ParentDisplayName;                                 // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x006D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   EventName;                                         // 0x0070(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FString                                 EventID;                                           // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPastEvent;                                       // 0x0098(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryItemType                            ItemType;                                          // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemAvailability                             Availability;                                      // 0x009A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B[0x5];                                       // 0x009B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventBannerLabel;                                  // 0x00A0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadoutTooltipData) == 0x000008, "Wrong alignment on FLoadoutTooltipData");
static_assert(sizeof(FLoadoutTooltipData) == 0x0000B0, "Wrong size on FLoadoutTooltipData");
static_assert(offsetof(FLoadoutTooltipData, ItemId) == 0x000000, "Member 'FLoadoutTooltipData::ItemId' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, SkillCharacterClass) == 0x000010, "Member 'FLoadoutTooltipData::SkillCharacterClass' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, DisplayName) == 0x000020, "Member 'FLoadoutTooltipData::DisplayName' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, ParentDisplayName) == 0x000038, "Member 'FLoadoutTooltipData::ParentDisplayName' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, Description) == 0x000050, "Member 'FLoadoutTooltipData::Description' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, Level) == 0x000068, "Member 'FLoadoutTooltipData::Level' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, Rarity) == 0x00006C, "Member 'FLoadoutTooltipData::Rarity' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, IsLocked) == 0x00006D, "Member 'FLoadoutTooltipData::IsLocked' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, EventName) == 0x000070, "Member 'FLoadoutTooltipData::EventName' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, EventID) == 0x000088, "Member 'FLoadoutTooltipData::EventID' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, IsPastEvent) == 0x000098, "Member 'FLoadoutTooltipData::IsPastEvent' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, ItemType) == 0x000099, "Member 'FLoadoutTooltipData::ItemType' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, Availability) == 0x00009A, "Member 'FLoadoutTooltipData::Availability' has a wrong offset!");
static_assert(offsetof(FLoadoutTooltipData, EventBannerLabel) == 0x0000A0, "Member 'FLoadoutTooltipData::EventBannerLabel' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ShrineOfSecretsDiscountUIInfo
// 0x0068 (0x0068 - 0x0000)
struct FShrineOfSecretsDiscountUIInfo final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   Value;                                             // 0x0018(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   EventBannerFrameLabel;                             // 0x0048(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          UseSpecialEventBackground;                         // 0x0060(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShrineOfSecretsDiscountUIInfo) == 0x000008, "Wrong alignment on FShrineOfSecretsDiscountUIInfo");
static_assert(sizeof(FShrineOfSecretsDiscountUIInfo) == 0x000068, "Wrong size on FShrineOfSecretsDiscountUIInfo");
static_assert(offsetof(FShrineOfSecretsDiscountUIInfo, Title) == 0x000000, "Member 'FShrineOfSecretsDiscountUIInfo::Title' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsDiscountUIInfo, Value) == 0x000018, "Member 'FShrineOfSecretsDiscountUIInfo::Value' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsDiscountUIInfo, Description) == 0x000030, "Member 'FShrineOfSecretsDiscountUIInfo::Description' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsDiscountUIInfo, EventBannerFrameLabel) == 0x000048, "Member 'FShrineOfSecretsDiscountUIInfo::EventBannerFrameLabel' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsDiscountUIInfo, UseSpecialEventBackground) == 0x000060, "Member 'FShrineOfSecretsDiscountUIInfo::UseSpecialEventBackground' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ShrineOfSecretsItemViewData
// 0x01C0 (0x01C0 - 0x0000)
struct FShrineOfSecretsItemViewData final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BPCost;                                            // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMenuPerkViewData*                      Perk;                                              // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLoadoutTooltipData                    PerkTooltip;                                       // 0x0018(0x00B0)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FPriceTagViewData                      PriceTag;                                          // 0x00C8(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          PerkMaxed;                                         // 0x0118(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BPClaimed;                                         // 0x0119(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsASurvivor;                                       // 0x011A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x011B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Portrait;                                          // 0x0120(0x0038)(BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FShrineOfSecretsDiscountUIInfo         DiscountUiInfo;                                    // 0x0158(0x0068)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShrineOfSecretsItemViewData) == 0x000008, "Wrong alignment on FShrineOfSecretsItemViewData");
static_assert(sizeof(FShrineOfSecretsItemViewData) == 0x0001C0, "Wrong size on FShrineOfSecretsItemViewData");
static_assert(offsetof(FShrineOfSecretsItemViewData, ItemId) == 0x000000, "Member 'FShrineOfSecretsItemViewData::ItemId' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, BPCost) == 0x00000C, "Member 'FShrineOfSecretsItemViewData::BPCost' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, Perk) == 0x000010, "Member 'FShrineOfSecretsItemViewData::Perk' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, PerkTooltip) == 0x000018, "Member 'FShrineOfSecretsItemViewData::PerkTooltip' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, PriceTag) == 0x0000C8, "Member 'FShrineOfSecretsItemViewData::PriceTag' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, PerkMaxed) == 0x000118, "Member 'FShrineOfSecretsItemViewData::PerkMaxed' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, BPClaimed) == 0x000119, "Member 'FShrineOfSecretsItemViewData::BPClaimed' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, IsASurvivor) == 0x00011A, "Member 'FShrineOfSecretsItemViewData::IsASurvivor' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, IsEnabled) == 0x00011B, "Member 'FShrineOfSecretsItemViewData::IsEnabled' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, Portrait) == 0x000120, "Member 'FShrineOfSecretsItemViewData::Portrait' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsItemViewData, DiscountUiInfo) == 0x000158, "Member 'FShrineOfSecretsItemViewData::DiscountUiInfo' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ScoreAlertViewData
// 0x0020 (0x0020 - 0x0000)
struct FScoreAlertViewData final
{
public:
	EDBDScoreCategory                             ScoreType;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Title;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreValue;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FScoreAlertViewData) == 0x000008, "Wrong alignment on FScoreAlertViewData");
static_assert(sizeof(FScoreAlertViewData) == 0x000020, "Wrong size on FScoreAlertViewData");
static_assert(offsetof(FScoreAlertViewData, ScoreType) == 0x000000, "Member 'FScoreAlertViewData::ScoreType' has a wrong offset!");
static_assert(offsetof(FScoreAlertViewData, Title) == 0x000008, "Member 'FScoreAlertViewData::Title' has a wrong offset!");
static_assert(offsetof(FScoreAlertViewData, ScoreValue) == 0x000018, "Member 'FScoreAlertViewData::ScoreValue' has a wrong offset!");
static_assert(offsetof(FScoreAlertViewData, Progress) == 0x00001C, "Member 'FScoreAlertViewData::Progress' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveNodeGraphViewData
// 0x00F8 (0x00F8 - 0x0000)
struct FArchiveNodeGraphViewData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveNodeViewData                   ViewData;                                          // 0x0010(0x00B8)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FVector2D                              Position;                                          // 0x00C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           Neighbors;                                         // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<int32>                                 PathIndices;                                       // 0x00E8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveNodeGraphViewData) == 0x000008, "Wrong alignment on FArchiveNodeGraphViewData");
static_assert(sizeof(FArchiveNodeGraphViewData) == 0x0000F8, "Wrong size on FArchiveNodeGraphViewData");
static_assert(offsetof(FArchiveNodeGraphViewData, ID) == 0x000000, "Member 'FArchiveNodeGraphViewData::ID' has a wrong offset!");
static_assert(offsetof(FArchiveNodeGraphViewData, ViewData) == 0x000010, "Member 'FArchiveNodeGraphViewData::ViewData' has a wrong offset!");
static_assert(offsetof(FArchiveNodeGraphViewData, Position) == 0x0000C8, "Member 'FArchiveNodeGraphViewData::Position' has a wrong offset!");
static_assert(offsetof(FArchiveNodeGraphViewData, Neighbors) == 0x0000D8, "Member 'FArchiveNodeGraphViewData::Neighbors' has a wrong offset!");
static_assert(offsetof(FArchiveNodeGraphViewData, PathIndices) == 0x0000E8, "Member 'FArchiveNodeGraphViewData::PathIndices' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveRewardNodeTooltipViewData
// 0x0248 (0x0248 - 0x0000)
struct FArchiveRewardNodeTooltipViewData final
{
public:
	ERewardType                                   RewardType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 NodeDebugInfo;                                     // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCustomizationTooltipViewData          CustomizationTooltipViewData;                      // 0x0018(0x0130)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FCurrencyProgressionTooltipViewData    CurrencyProgressionTooltipViewData;                // 0x0148(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveRewardNodeTooltipViewData) == 0x000008, "Wrong alignment on FArchiveRewardNodeTooltipViewData");
static_assert(sizeof(FArchiveRewardNodeTooltipViewData) == 0x000248, "Wrong size on FArchiveRewardNodeTooltipViewData");
static_assert(offsetof(FArchiveRewardNodeTooltipViewData, RewardType) == 0x000000, "Member 'FArchiveRewardNodeTooltipViewData::RewardType' has a wrong offset!");
static_assert(offsetof(FArchiveRewardNodeTooltipViewData, NodeDebugInfo) == 0x000008, "Member 'FArchiveRewardNodeTooltipViewData::NodeDebugInfo' has a wrong offset!");
static_assert(offsetof(FArchiveRewardNodeTooltipViewData, CustomizationTooltipViewData) == 0x000018, "Member 'FArchiveRewardNodeTooltipViewData::CustomizationTooltipViewData' has a wrong offset!");
static_assert(offsetof(FArchiveRewardNodeTooltipViewData, CurrencyProgressionTooltipViewData) == 0x000148, "Member 'FArchiveRewardNodeTooltipViewData::CurrencyProgressionTooltipViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveRiftTierRewardsViewData
// 0x0030 (0x0030 - 0x0000)
struct FArchiveRiftTierRewardsViewData final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETierType                                     TierType;                                          // 0x0004(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TierProgress;                                      // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPremiumUnlocked;                                 // 0x000C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCurrentTier;                                     // 0x000D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRewardWrapperViewData>         FreeRewards;                                       // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         PremiumRewards;                                    // 0x0020(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveRiftTierRewardsViewData) == 0x000008, "Wrong alignment on FArchiveRiftTierRewardsViewData");
static_assert(sizeof(FArchiveRiftTierRewardsViewData) == 0x000030, "Wrong size on FArchiveRiftTierRewardsViewData");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, Tier) == 0x000000, "Member 'FArchiveRiftTierRewardsViewData::Tier' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, TierType) == 0x000004, "Member 'FArchiveRiftTierRewardsViewData::TierType' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, TierProgress) == 0x000008, "Member 'FArchiveRiftTierRewardsViewData::TierProgress' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, IsPremiumUnlocked) == 0x00000C, "Member 'FArchiveRiftTierRewardsViewData::IsPremiumUnlocked' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, IsCurrentTier) == 0x00000D, "Member 'FArchiveRiftTierRewardsViewData::IsCurrentTier' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, FreeRewards) == 0x000010, "Member 'FArchiveRiftTierRewardsViewData::FreeRewards' has a wrong offset!");
static_assert(offsetof(FArchiveRiftTierRewardsViewData, PremiumRewards) == 0x000020, "Member 'FArchiveRiftTierRewardsViewData::PremiumRewards' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveMapPathViewData
// 0x0040 (0x0040 - 0x0000)
struct FArchiveMapPathViewData final
{
public:
	struct FVector2D                              StartPositon;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              EndPositon;                                        // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartNodeId;                                       // 0x0020(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndNodeId;                                         // 0x002C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchivePathStatus                            Status;                                            // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchiveMapPathViewData) == 0x000008, "Wrong alignment on FArchiveMapPathViewData");
static_assert(sizeof(FArchiveMapPathViewData) == 0x000040, "Wrong size on FArchiveMapPathViewData");
static_assert(offsetof(FArchiveMapPathViewData, StartPositon) == 0x000000, "Member 'FArchiveMapPathViewData::StartPositon' has a wrong offset!");
static_assert(offsetof(FArchiveMapPathViewData, EndPositon) == 0x000010, "Member 'FArchiveMapPathViewData::EndPositon' has a wrong offset!");
static_assert(offsetof(FArchiveMapPathViewData, StartNodeId) == 0x000020, "Member 'FArchiveMapPathViewData::StartNodeId' has a wrong offset!");
static_assert(offsetof(FArchiveMapPathViewData, EndNodeId) == 0x00002C, "Member 'FArchiveMapPathViewData::EndNodeId' has a wrong offset!");
static_assert(offsetof(FArchiveMapPathViewData, Status) == 0x000038, "Member 'FArchiveMapPathViewData::Status' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CurrencyLabelViewData
// 0x0148 (0x0148 - 0x0000)
struct FCurrencyLabelViewData final
{
public:
	ECurrencyType                                 Type;                                              // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayBonusAnimation;                                // 0x0044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsClickable;                                       // 0x0045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurrencyProgressionTooltipViewData    TooltipData;                                       // 0x0048(0x0100)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCurrencyLabelViewData) == 0x000008, "Wrong alignment on FCurrencyLabelViewData");
static_assert(sizeof(FCurrencyLabelViewData) == 0x000148, "Wrong size on FCurrencyLabelViewData");
static_assert(offsetof(FCurrencyLabelViewData, Type) == 0x000000, "Member 'FCurrencyLabelViewData::Type' has a wrong offset!");
static_assert(offsetof(FCurrencyLabelViewData, Icon) == 0x000008, "Member 'FCurrencyLabelViewData::Icon' has a wrong offset!");
static_assert(offsetof(FCurrencyLabelViewData, Amount) == 0x000040, "Member 'FCurrencyLabelViewData::Amount' has a wrong offset!");
static_assert(offsetof(FCurrencyLabelViewData, PlayBonusAnimation) == 0x000044, "Member 'FCurrencyLabelViewData::PlayBonusAnimation' has a wrong offset!");
static_assert(offsetof(FCurrencyLabelViewData, IsClickable) == 0x000045, "Member 'FCurrencyLabelViewData::IsClickable' has a wrong offset!");
static_assert(offsetof(FCurrencyLabelViewData, TooltipData) == 0x000048, "Member 'FCurrencyLabelViewData::TooltipData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivePassTooltipViewData
// 0x0098 (0x0098 - 0x0000)
struct FArchivePassTooltipViewData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Subtitle;                                          // 0x0018(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FPriceTagViewData                      Price;                                             // 0x0048(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchivePassTooltipViewData) == 0x000008, "Wrong alignment on FArchivePassTooltipViewData");
static_assert(sizeof(FArchivePassTooltipViewData) == 0x000098, "Wrong size on FArchivePassTooltipViewData");
static_assert(offsetof(FArchivePassTooltipViewData, Title) == 0x000000, "Member 'FArchivePassTooltipViewData::Title' has a wrong offset!");
static_assert(offsetof(FArchivePassTooltipViewData, Subtitle) == 0x000018, "Member 'FArchivePassTooltipViewData::Subtitle' has a wrong offset!");
static_assert(offsetof(FArchivePassTooltipViewData, Description) == 0x000030, "Member 'FArchivePassTooltipViewData::Description' has a wrong offset!");
static_assert(offsetof(FArchivePassTooltipViewData, Price) == 0x000048, "Member 'FArchivePassTooltipViewData::Price' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CorePlayerLevelTooltipViewData
// 0x0010 (0x0010 - 0x0000)
struct FCorePlayerLevelTooltipViewData final
{
public:
	int32                                         PlayerLevel;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrestigeLevel;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentXP;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentCapXP;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCorePlayerLevelTooltipViewData) == 0x000004, "Wrong alignment on FCorePlayerLevelTooltipViewData");
static_assert(sizeof(FCorePlayerLevelTooltipViewData) == 0x000010, "Wrong size on FCorePlayerLevelTooltipViewData");
static_assert(offsetof(FCorePlayerLevelTooltipViewData, PlayerLevel) == 0x000000, "Member 'FCorePlayerLevelTooltipViewData::PlayerLevel' has a wrong offset!");
static_assert(offsetof(FCorePlayerLevelTooltipViewData, PrestigeLevel) == 0x000004, "Member 'FCorePlayerLevelTooltipViewData::PrestigeLevel' has a wrong offset!");
static_assert(offsetof(FCorePlayerLevelTooltipViewData, CurrentXP) == 0x000008, "Member 'FCorePlayerLevelTooltipViewData::CurrentXP' has a wrong offset!");
static_assert(offsetof(FCorePlayerLevelTooltipViewData, CurrentCapXP) == 0x00000C, "Member 'FCorePlayerLevelTooltipViewData::CurrentCapXP' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PlayerLevelViewData
// 0x0018 (0x0018 - 0x0000)
struct FPlayerLevelViewData final
{
public:
	int32                                         PlayerLevel;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PrestigeLevel;                                     // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCorePlayerLevelTooltipViewData        TooltipData;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerLevelViewData) == 0x000004, "Wrong alignment on FPlayerLevelViewData");
static_assert(sizeof(FPlayerLevelViewData) == 0x000018, "Wrong size on FPlayerLevelViewData");
static_assert(offsetof(FPlayerLevelViewData, PlayerLevel) == 0x000000, "Member 'FPlayerLevelViewData::PlayerLevel' has a wrong offset!");
static_assert(offsetof(FPlayerLevelViewData, PrestigeLevel) == 0x000004, "Member 'FPlayerLevelViewData::PrestigeLevel' has a wrong offset!");
static_assert(offsetof(FPlayerLevelViewData, TooltipData) == 0x000008, "Member 'FPlayerLevelViewData::TooltipData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CustomizationItemOriginViewData
// 0x0068 (0x0068 - 0x0000)
struct FCustomizationItemOriginViewData final
{
public:
	EOriginWidgetState                            State;                                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FText>                           Args;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPriceTagViewData                      CurrencyData;                                      // 0x0018(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationItemOriginViewData) == 0x000008, "Wrong alignment on FCustomizationItemOriginViewData");
static_assert(sizeof(FCustomizationItemOriginViewData) == 0x000068, "Wrong size on FCustomizationItemOriginViewData");
static_assert(offsetof(FCustomizationItemOriginViewData, State) == 0x000000, "Member 'FCustomizationItemOriginViewData::State' has a wrong offset!");
static_assert(offsetof(FCustomizationItemOriginViewData, Args) == 0x000008, "Member 'FCustomizationItemOriginViewData::Args' has a wrong offset!");
static_assert(offsetof(FCustomizationItemOriginViewData, CurrencyData) == 0x000018, "Member 'FCustomizationItemOriginViewData::CurrencyData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ToastInput
// 0x0030 (0x0030 - 0x0000)
struct FToastInput final
{
public:
	class FText                                   InputName;                                         // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsRegression;                                      // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x17];                                      // 0x0019(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToastInput) == 0x000008, "Wrong alignment on FToastInput");
static_assert(sizeof(FToastInput) == 0x000030, "Wrong size on FToastInput");
static_assert(offsetof(FToastInput, InputName) == 0x000000, "Member 'FToastInput::InputName' has a wrong offset!");
static_assert(offsetof(FToastInput, IsRegression) == 0x000018, "Member 'FToastInput::IsRegression' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ToastNotificationViewData
// 0x00C0 (0x00C0 - 0x0000)
struct FToastNotificationViewData final
{
public:
	float                                         DisplayDuration;                                   // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayBeforeInteraction;                            // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FToastInput>               Inputs;                                            // 0x0008(0x0050)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Text;                                              // 0x0058(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              ToastIcon;                                         // 0x0080(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8[0x8];                                       // 0x00B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FToastNotificationViewData) == 0x000008, "Wrong alignment on FToastNotificationViewData");
static_assert(sizeof(FToastNotificationViewData) == 0x0000C0, "Wrong size on FToastNotificationViewData");
static_assert(offsetof(FToastNotificationViewData, DisplayDuration) == 0x000000, "Member 'FToastNotificationViewData::DisplayDuration' has a wrong offset!");
static_assert(offsetof(FToastNotificationViewData, DelayBeforeInteraction) == 0x000004, "Member 'FToastNotificationViewData::DelayBeforeInteraction' has a wrong offset!");
static_assert(offsetof(FToastNotificationViewData, Inputs) == 0x000008, "Member 'FToastNotificationViewData::Inputs' has a wrong offset!");
static_assert(offsetof(FToastNotificationViewData, Text) == 0x000058, "Member 'FToastNotificationViewData::Text' has a wrong offset!");
static_assert(offsetof(FToastNotificationViewData, Title) == 0x000070, "Member 'FToastNotificationViewData::Title' has a wrong offset!");
static_assert(offsetof(FToastNotificationViewData, ToastIcon) == 0x000080, "Member 'FToastNotificationViewData::ToastIcon' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.TabWidgetData
// 0x0090 (0x0090 - 0x0000)
struct FTabWidgetData final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Title;                                             // 0x0008(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          HasNotification;                                   // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0028(0x0038)(Edit, BlueprintVisible, DisableEditOnTemplate, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForcesIconSize;                                    // 0x0060(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              IconSize;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AnalyticsName;                                     // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SendButtonPressAnalytics;                          // 0x0088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKillSwitchEnabled;                               // 0x0089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrependCurrentTabNameToAnalyticsName;              // 0x008A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B[0x5];                                       // 0x008B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTabWidgetData) == 0x000008, "Wrong alignment on FTabWidgetData");
static_assert(sizeof(FTabWidgetData) == 0x000090, "Wrong size on FTabWidgetData");
static_assert(offsetof(FTabWidgetData, Key) == 0x000000, "Member 'FTabWidgetData::Key' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, Title) == 0x000008, "Member 'FTabWidgetData::Title' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, HasNotification) == 0x000020, "Member 'FTabWidgetData::HasNotification' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, Icon) == 0x000028, "Member 'FTabWidgetData::Icon' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, ForcesIconSize) == 0x000060, "Member 'FTabWidgetData::ForcesIconSize' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, IconSize) == 0x000068, "Member 'FTabWidgetData::IconSize' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, AnalyticsName) == 0x000078, "Member 'FTabWidgetData::AnalyticsName' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, SendButtonPressAnalytics) == 0x000088, "Member 'FTabWidgetData::SendButtonPressAnalytics' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, IsKillSwitchEnabled) == 0x000089, "Member 'FTabWidgetData::IsKillSwitchEnabled' has a wrong offset!");
static_assert(offsetof(FTabWidgetData, PrependCurrentTabNameToAnalyticsName) == 0x00008A, "Member 'FTabWidgetData::PrependCurrentTabNameToAnalyticsName' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.BaseLoadoutPartViewData
// 0x0068 (0x0068 - 0x0000)
struct FBaseLoadoutPartViewData
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0010(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EItemRarity                                   Rarity;                                            // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Cooldown;                                          // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseLoadoutPartViewData) == 0x000008, "Wrong alignment on FBaseLoadoutPartViewData");
static_assert(sizeof(FBaseLoadoutPartViewData) == 0x000068, "Wrong size on FBaseLoadoutPartViewData");
static_assert(offsetof(FBaseLoadoutPartViewData, ItemId) == 0x000000, "Member 'FBaseLoadoutPartViewData::ItemId' has a wrong offset!");
static_assert(offsetof(FBaseLoadoutPartViewData, IconTexture) == 0x000010, "Member 'FBaseLoadoutPartViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FBaseLoadoutPartViewData, DisplayName) == 0x000048, "Member 'FBaseLoadoutPartViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FBaseLoadoutPartViewData, Rarity) == 0x000058, "Member 'FBaseLoadoutPartViewData::Rarity' has a wrong offset!");
static_assert(offsetof(FBaseLoadoutPartViewData, Cooldown) == 0x00005C, "Member 'FBaseLoadoutPartViewData::Cooldown' has a wrong offset!");
static_assert(offsetof(FBaseLoadoutPartViewData, StackCount) == 0x000060, "Member 'FBaseLoadoutPartViewData::StackCount' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.AddonViewData
// 0x0008 (0x0070 - 0x0068)
struct FAddonViewData final : public FBaseLoadoutPartViewData
{
public:
	EStatusEffectType                             StatusEffectType;                                  // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELoadoutPartState                             LoadoutPartState;                                  // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAddonViewData) == 0x000008, "Wrong alignment on FAddonViewData");
static_assert(sizeof(FAddonViewData) == 0x000070, "Wrong size on FAddonViewData");
static_assert(offsetof(FAddonViewData, StatusEffectType) == 0x000068, "Member 'FAddonViewData::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FAddonViewData, LoadoutPartState) == 0x000069, "Member 'FAddonViewData::LoadoutPartState' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchiveChallengeReminderViewData
// 0x00D0 (0x00D0 - 0x0000)
struct FArchiveChallengeReminderViewData final
{
public:
	struct FArchiveNodeViewData                   NodeViewData;                                      // 0x0000(0x00B8)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   TomeSourceSubtitle;                                // 0x00B8(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveChallengeReminderViewData) == 0x000008, "Wrong alignment on FArchiveChallengeReminderViewData");
static_assert(sizeof(FArchiveChallengeReminderViewData) == 0x0000D0, "Wrong size on FArchiveChallengeReminderViewData");
static_assert(offsetof(FArchiveChallengeReminderViewData, NodeViewData) == 0x000000, "Member 'FArchiveChallengeReminderViewData::NodeViewData' has a wrong offset!");
static_assert(offsetof(FArchiveChallengeReminderViewData, TomeSourceSubtitle) == 0x0000B8, "Member 'FArchiveChallengeReminderViewData::TomeSourceSubtitle' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CompendiumButtonData
// 0x0078 (0x0078 - 0x0000)
struct FCompendiumButtonData final
{
public:
	class FString                                 TomeId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TomeTitle;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsMastered;                                        // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A[0x2];                                       // 0x002A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VolumeIndex;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UArchiveStoryLevelViewData*>     TomeLevels;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              StoryBookMarkTexture;                              // 0x0040(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCompendiumButtonData) == 0x000008, "Wrong alignment on FCompendiumButtonData");
static_assert(sizeof(FCompendiumButtonData) == 0x000078, "Wrong size on FCompendiumButtonData");
static_assert(offsetof(FCompendiumButtonData, TomeId) == 0x000000, "Member 'FCompendiumButtonData::TomeId' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, TomeTitle) == 0x000010, "Member 'FCompendiumButtonData::TomeTitle' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, IsMastered) == 0x000028, "Member 'FCompendiumButtonData::IsMastered' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, IsActive) == 0x000029, "Member 'FCompendiumButtonData::IsActive' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, VolumeIndex) == 0x00002C, "Member 'FCompendiumButtonData::VolumeIndex' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, TomeLevels) == 0x000030, "Member 'FCompendiumButtonData::TomeLevels' has a wrong offset!");
static_assert(offsetof(FCompendiumButtonData, StoryBookMarkTexture) == 0x000040, "Member 'FCompendiumButtonData::StoryBookMarkTexture' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesVignetteEntryViewData
// 0x0078 (0x0078 - 0x0000)
struct FArchivesVignetteEntryViewData final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0018(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          IsRead;                                            // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasAudio;                                          // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              RewardImage;                                       // 0x0038(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreviewTextureOffset;                              // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchivesVignetteEntryViewData) == 0x000008, "Wrong alignment on FArchivesVignetteEntryViewData");
static_assert(sizeof(FArchivesVignetteEntryViewData) == 0x000078, "Wrong size on FArchivesVignetteEntryViewData");
static_assert(offsetof(FArchivesVignetteEntryViewData, Title) == 0x000000, "Member 'FArchivesVignetteEntryViewData::Title' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, Description) == 0x000018, "Member 'FArchivesVignetteEntryViewData::Description' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, IsRead) == 0x000030, "Member 'FArchivesVignetteEntryViewData::IsRead' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, HasAudio) == 0x000031, "Member 'FArchivesVignetteEntryViewData::HasAudio' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, RewardImage) == 0x000038, "Member 'FArchivesVignetteEntryViewData::RewardImage' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteEntryViewData, PreviewTextureOffset) == 0x000070, "Member 'FArchivesVignetteEntryViewData::PreviewTextureOffset' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesVignetteViewData
// 0x0060 (0x0060 - 0x0000)
struct FArchivesVignetteViewData final
{
public:
	class FString                                 VignetteId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Subtitle;                                          // 0x0028(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	int32                                         LastShownProgressValue;                            // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgress;                                   // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgress;                                       // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CinematicsNumber;                                  // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FArchivesVignetteEntryViewData> Entries;                                           // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchivesVignetteViewData) == 0x000008, "Wrong alignment on FArchivesVignetteViewData");
static_assert(sizeof(FArchivesVignetteViewData) == 0x000060, "Wrong size on FArchivesVignetteViewData");
static_assert(offsetof(FArchivesVignetteViewData, VignetteId) == 0x000000, "Member 'FArchivesVignetteViewData::VignetteId' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, Title) == 0x000010, "Member 'FArchivesVignetteViewData::Title' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, Subtitle) == 0x000028, "Member 'FArchivesVignetteViewData::Subtitle' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, LastShownProgressValue) == 0x000040, "Member 'FArchivesVignetteViewData::LastShownProgressValue' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, CurrentProgress) == 0x000044, "Member 'FArchivesVignetteViewData::CurrentProgress' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, MaxProgress) == 0x000048, "Member 'FArchivesVignetteViewData::MaxProgress' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, CinematicsNumber) == 0x00004C, "Member 'FArchivesVignetteViewData::CinematicsNumber' has a wrong offset!");
static_assert(offsetof(FArchivesVignetteViewData, Entries) == 0x000050, "Member 'FArchivesVignetteViewData::Entries' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesPastTomeViewData
// 0x0078 (0x0078 - 0x0000)
struct FArchivesPastTomeViewData final
{
public:
	class FString                                 TomeId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   TomeTitle;                                         // 0x0010(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          HasActiveNode;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VolumeIndex;                                       // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UArchiveStoryLevelViewData*>     TomeLevels;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              StoryBookMarkTexture;                              // 0x0040(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchivesPastTomeViewData) == 0x000008, "Wrong alignment on FArchivesPastTomeViewData");
static_assert(sizeof(FArchivesPastTomeViewData) == 0x000078, "Wrong size on FArchivesPastTomeViewData");
static_assert(offsetof(FArchivesPastTomeViewData, TomeId) == 0x000000, "Member 'FArchivesPastTomeViewData::TomeId' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, TomeTitle) == 0x000010, "Member 'FArchivesPastTomeViewData::TomeTitle' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, HasActiveNode) == 0x000028, "Member 'FArchivesPastTomeViewData::HasActiveNode' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, VolumeIndex) == 0x00002C, "Member 'FArchivesPastTomeViewData::VolumeIndex' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, TomeLevels) == 0x000030, "Member 'FArchivesPastTomeViewData::TomeLevels' has a wrong offset!");
static_assert(offsetof(FArchivesPastTomeViewData, StoryBookMarkTexture) == 0x000040, "Member 'FArchivesPastTomeViewData::StoryBookMarkTexture' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesRiftGenericViewData
// 0x0020 (0x0020 - 0x0000)
struct FArchivesRiftGenericViewData final
{
public:
	struct FDateTime                              EndDate;                                           // 0x0000(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentTier;                                       // 0x0008(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxTier;                                           // 0x000C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentStars;                                      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StarsPerTiers;                                     // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OwnPass;                                           // 0x0018(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowBonusTierTooltip;                              // 0x0019(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchivesRiftGenericViewData) == 0x000008, "Wrong alignment on FArchivesRiftGenericViewData");
static_assert(sizeof(FArchivesRiftGenericViewData) == 0x000020, "Wrong size on FArchivesRiftGenericViewData");
static_assert(offsetof(FArchivesRiftGenericViewData, EndDate) == 0x000000, "Member 'FArchivesRiftGenericViewData::EndDate' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, CurrentTier) == 0x000008, "Member 'FArchivesRiftGenericViewData::CurrentTier' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, MaxTier) == 0x00000C, "Member 'FArchivesRiftGenericViewData::MaxTier' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, CurrentStars) == 0x000010, "Member 'FArchivesRiftGenericViewData::CurrentStars' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, StarsPerTiers) == 0x000014, "Member 'FArchivesRiftGenericViewData::StarsPerTiers' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, OwnPass) == 0x000018, "Member 'FArchivesRiftGenericViewData::OwnPass' has a wrong offset!");
static_assert(offsetof(FArchivesRiftGenericViewData, ShowBonusTierTooltip) == 0x000019, "Member 'FArchivesRiftGenericViewData::ShowBonusTierTooltip' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ArchivesRiftUnlockSequenceData
// 0x000C (0x000C - 0x0000)
struct FArchivesRiftUnlockSequenceData final
{
public:
	int32                                         CurrentTier;                                       // 0x0000(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousTier;                                      // 0x0004(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPremiumUnlocked;                                 // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchivesRiftUnlockSequenceData) == 0x000004, "Wrong alignment on FArchivesRiftUnlockSequenceData");
static_assert(sizeof(FArchivesRiftUnlockSequenceData) == 0x00000C, "Wrong size on FArchivesRiftUnlockSequenceData");
static_assert(offsetof(FArchivesRiftUnlockSequenceData, CurrentTier) == 0x000000, "Member 'FArchivesRiftUnlockSequenceData::CurrentTier' has a wrong offset!");
static_assert(offsetof(FArchivesRiftUnlockSequenceData, PreviousTier) == 0x000004, "Member 'FArchivesRiftUnlockSequenceData::PreviousTier' has a wrong offset!");
static_assert(offsetof(FArchivesRiftUnlockSequenceData, IsPremiumUnlocked) == 0x000008, "Member 'FArchivesRiftUnlockSequenceData::IsPremiumUnlocked' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.EditorInterfaces
// 0x0030 (0x0030 - 0x0000)
struct FEditorInterfaces final
{
public:
	TScriptInterface<class IArchiveQuestMapViewInterface> QuestMapInterface;                                 // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IArchiveLevelProgressionViewInterface> LevelProgressionInterface;                         // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TScriptInterface<class IArchiveEditorViewInterface> EditorInterface;                                   // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEditorInterfaces) == 0x000008, "Wrong alignment on FEditorInterfaces");
static_assert(sizeof(FEditorInterfaces) == 0x000030, "Wrong size on FEditorInterfaces");
static_assert(offsetof(FEditorInterfaces, QuestMapInterface) == 0x000000, "Member 'FEditorInterfaces::QuestMapInterface' has a wrong offset!");
static_assert(offsetof(FEditorInterfaces, LevelProgressionInterface) == 0x000010, "Member 'FEditorInterfaces::LevelProgressionInterface' has a wrong offset!");
static_assert(offsetof(FEditorInterfaces, EditorInterface) == 0x000020, "Member 'FEditorInterfaces::EditorInterface' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.AuricCellsBundleViewData
// 0x0098 (0x0098 - 0x0000)
struct FAuricCellsBundleViewData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0010(0x0038)(BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   BundleName;                                        // 0x0048(0x0018)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	int32                                         CurrencyAmount;                                    // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisplayedPrice;                                    // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusPercentage;                                   // 0x0078(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LimitedTimeText;                                   // 0x0080(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasReward;                                         // 0x0090(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAuricCellsBundleViewData) == 0x000008, "Wrong alignment on FAuricCellsBundleViewData");
static_assert(sizeof(FAuricCellsBundleViewData) == 0x000098, "Wrong size on FAuricCellsBundleViewData");
static_assert(offsetof(FAuricCellsBundleViewData, ID) == 0x000000, "Member 'FAuricCellsBundleViewData::ID' has a wrong offset!");
static_assert(offsetof(FAuricCellsBundleViewData, IconTexture) == 0x000010, "Member 'FAuricCellsBundleViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FAuricCellsBundleViewData, BundleName) == 0x000048, "Member 'FAuricCellsBundleViewData::BundleName' has a wrong offset!");
static_assert(offsetof(FAuricCellsBundleViewData, CurrencyAmount) == 0x000060, "Member 'FAuricCellsBundleViewData::CurrencyAmount' has a wrong offset!");
static_assert(offsetof(FAuricCellsBundleViewData, DisplayedPrice) == 0x000068, "Member 'FAuricCellsBundleViewData::DisplayedPrice' has a wrong offset!");
static_assert(offsetof(FAuricCellsBundleViewData, BonusPercentage) == 0x000078, "Member 'FAuricCellsBundleViewData::BonusPercentage' has a wrong offset!");
static_assert(offsetof(FAuricCellsBundleViewData, LimitedTimeText) == 0x000080, "Member 'FAuricCellsBundleViewData::LimitedTimeText' has a wrong offset!");
static_assert(offsetof(FAuricCellsBundleViewData, HasReward) == 0x000090, "Member 'FAuricCellsBundleViewData::HasReward' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.AuricCellsFirstPurchaseViewData
// 0x0068 (0x0068 - 0x0000)
struct FAuricCellsFirstPurchaseViewData final
{
public:
	bool                                          IsFirstPurchase;                                   // 0x0000(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0008(0x0038)(BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuricCellsFirstPurchaseViewData) == 0x000008, "Wrong alignment on FAuricCellsFirstPurchaseViewData");
static_assert(sizeof(FAuricCellsFirstPurchaseViewData) == 0x000068, "Wrong size on FAuricCellsFirstPurchaseViewData");
static_assert(offsetof(FAuricCellsFirstPurchaseViewData, IsFirstPurchase) == 0x000000, "Member 'FAuricCellsFirstPurchaseViewData::IsFirstPurchase' has a wrong offset!");
static_assert(offsetof(FAuricCellsFirstPurchaseViewData, IconTexture) == 0x000008, "Member 'FAuricCellsFirstPurchaseViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FAuricCellsFirstPurchaseViewData, Title) == 0x000040, "Member 'FAuricCellsFirstPurchaseViewData::Title' has a wrong offset!");
static_assert(offsetof(FAuricCellsFirstPurchaseViewData, Description) == 0x000050, "Member 'FAuricCellsFirstPurchaseViewData::Description' has a wrong offset!");
static_assert(offsetof(FAuricCellsFirstPurchaseViewData, EndDate) == 0x000060, "Member 'FAuricCellsFirstPurchaseViewData::EndDate' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.AuricCellsViewData
// 0x0088 (0x0088 - 0x0000)
struct FAuricCellsViewData final
{
public:
	TArray<struct FAuricCellsBundleViewData>      Bundles;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FAuricCellsFirstPurchaseViewData       FirstPurchase;                                     // 0x0010(0x0068)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FString                                 TaxIncludeMessage;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAuricCellsViewData) == 0x000008, "Wrong alignment on FAuricCellsViewData");
static_assert(sizeof(FAuricCellsViewData) == 0x000088, "Wrong size on FAuricCellsViewData");
static_assert(offsetof(FAuricCellsViewData, Bundles) == 0x000000, "Member 'FAuricCellsViewData::Bundles' has a wrong offset!");
static_assert(offsetof(FAuricCellsViewData, FirstPurchase) == 0x000010, "Member 'FAuricCellsViewData::FirstPurchase' has a wrong offset!");
static_assert(offsetof(FAuricCellsViewData, TaxIncludeMessage) == 0x000078, "Member 'FAuricCellsViewData::TaxIncludeMessage' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeSetMenuViewData
// 0x0078 (0x0078 - 0x0000)
struct FChallengeSetMenuViewData final
{
public:
	class FString                                 SetId;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              Starttime;                                         // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndTime;                                           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RewardTrackerId;                                   // 0x0020(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCount;                                          // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChallengeViewData>             Challenges;                                        // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 TabIcon;                                           // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventID;                                           // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalDescription;                             // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeSetMenuViewData) == 0x000008, "Wrong alignment on FChallengeSetMenuViewData");
static_assert(sizeof(FChallengeSetMenuViewData) == 0x000078, "Wrong size on FChallengeSetMenuViewData");
static_assert(offsetof(FChallengeSetMenuViewData, SetId) == 0x000000, "Member 'FChallengeSetMenuViewData::SetId' has a wrong offset!");
static_assert(offsetof(FChallengeSetMenuViewData, Starttime) == 0x000010, "Member 'FChallengeSetMenuViewData::Starttime' has a wrong offset!");
static_assert(offsetof(FChallengeSetMenuViewData, EndTime) == 0x000018, "Member 'FChallengeSetMenuViewData::EndTime' has a wrong offset!");
static_assert(offsetof(FChallengeSetMenuViewData, RewardTrackerId) == 0x000020, "Member 'FChallengeSetMenuViewData::RewardTrackerId' has a wrong offset!");
static_assert(offsetof(FChallengeSetMenuViewData, MaxCount) == 0x000030, "Member 'FChallengeSetMenuViewData::MaxCount' has a wrong offset!");
static_assert(offsetof(FChallengeSetMenuViewData, Challenges) == 0x000038, "Member 'FChallengeSetMenuViewData::Challenges' has a wrong offset!");
static_assert(offsetof(FChallengeSetMenuViewData, TabIcon) == 0x000048, "Member 'FChallengeSetMenuViewData::TabIcon' has a wrong offset!");
static_assert(offsetof(FChallengeSetMenuViewData, EventID) == 0x000058, "Member 'FChallengeSetMenuViewData::EventID' has a wrong offset!");
static_assert(offsetof(FChallengeSetMenuViewData, AdditionalDescription) == 0x000068, "Member 'FChallengeSetMenuViewData::AdditionalDescription' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeSetRewardTrackTierInfoViewData
// 0x0028 (0x0028 - 0x0000)
struct FChallengeSetRewardTrackTierInfoViewData final
{
public:
	TArray<struct FRewardWrapperViewData>         Rewards;                                           // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NeededPoints;                                      // 0x0010(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierGroup;                                         // 0x0014(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TierId;                                            // 0x0018(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TierProgress;                                      // 0x001C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCurrentTier;                                     // 0x0020(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FChallengeSetRewardTrackTierInfoViewData) == 0x000008, "Wrong alignment on FChallengeSetRewardTrackTierInfoViewData");
static_assert(sizeof(FChallengeSetRewardTrackTierInfoViewData) == 0x000028, "Wrong size on FChallengeSetRewardTrackTierInfoViewData");
static_assert(offsetof(FChallengeSetRewardTrackTierInfoViewData, Rewards) == 0x000000, "Member 'FChallengeSetRewardTrackTierInfoViewData::Rewards' has a wrong offset!");
static_assert(offsetof(FChallengeSetRewardTrackTierInfoViewData, NeededPoints) == 0x000010, "Member 'FChallengeSetRewardTrackTierInfoViewData::NeededPoints' has a wrong offset!");
static_assert(offsetof(FChallengeSetRewardTrackTierInfoViewData, TierGroup) == 0x000014, "Member 'FChallengeSetRewardTrackTierInfoViewData::TierGroup' has a wrong offset!");
static_assert(offsetof(FChallengeSetRewardTrackTierInfoViewData, TierId) == 0x000018, "Member 'FChallengeSetRewardTrackTierInfoViewData::TierId' has a wrong offset!");
static_assert(offsetof(FChallengeSetRewardTrackTierInfoViewData, TierProgress) == 0x00001C, "Member 'FChallengeSetRewardTrackTierInfoViewData::TierProgress' has a wrong offset!");
static_assert(offsetof(FChallengeSetRewardTrackTierInfoViewData, IsCurrentTier) == 0x000020, "Member 'FChallengeSetRewardTrackTierInfoViewData::IsCurrentTier' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeSetRewardTrackViewData
// 0x0028 (0x0028 - 0x0000)
struct FChallengeSetRewardTrackViewData final
{
public:
	TArray<struct FChallengeSetRewardTrackTierInfoViewData> TierInfo;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ProgressionPoints;                                 // 0x0010(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalDescription;                             // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeSetRewardTrackViewData) == 0x000008, "Wrong alignment on FChallengeSetRewardTrackViewData");
static_assert(sizeof(FChallengeSetRewardTrackViewData) == 0x000028, "Wrong size on FChallengeSetRewardTrackViewData");
static_assert(offsetof(FChallengeSetRewardTrackViewData, TierInfo) == 0x000000, "Member 'FChallengeSetRewardTrackViewData::TierInfo' has a wrong offset!");
static_assert(offsetof(FChallengeSetRewardTrackViewData, ProgressionPoints) == 0x000010, "Member 'FChallengeSetRewardTrackViewData::ProgressionPoints' has a wrong offset!");
static_assert(offsetof(FChallengeSetRewardTrackViewData, AdditionalDescription) == 0x000018, "Member 'FChallengeSetRewardTrackViewData::AdditionalDescription' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeSetViewData
// 0x0040 (0x0040 - 0x0000)
struct FChallengeSetViewData final
{
public:
	class FString                                 TabTitle;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeaderTitle;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeaderSubtitle;                                    // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventFrameLabel;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeSetViewData) == 0x000008, "Wrong alignment on FChallengeSetViewData");
static_assert(sizeof(FChallengeSetViewData) == 0x000040, "Wrong size on FChallengeSetViewData");
static_assert(offsetof(FChallengeSetViewData, TabTitle) == 0x000000, "Member 'FChallengeSetViewData::TabTitle' has a wrong offset!");
static_assert(offsetof(FChallengeSetViewData, HeaderTitle) == 0x000010, "Member 'FChallengeSetViewData::HeaderTitle' has a wrong offset!");
static_assert(offsetof(FChallengeSetViewData, HeaderSubtitle) == 0x000020, "Member 'FChallengeSetViewData::HeaderSubtitle' has a wrong offset!");
static_assert(offsetof(FChallengeSetViewData, EventFrameLabel) == 0x000030, "Member 'FChallengeSetViewData::EventFrameLabel' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ChallengeSkinUIData
// 0x0070 (0x0078 - 0x0008)
struct FChallengeSkinUIData final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UMenuSkinDataAsset>      MenuSkinData;                                      // 0x0008(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BackgroundImage;                                   // 0x0040(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChallengeSkinUIData) == 0x000008, "Wrong alignment on FChallengeSkinUIData");
static_assert(sizeof(FChallengeSkinUIData) == 0x000078, "Wrong size on FChallengeSkinUIData");
static_assert(offsetof(FChallengeSkinUIData, MenuSkinData) == 0x000008, "Member 'FChallengeSkinUIData::MenuSkinData' has a wrong offset!");
static_assert(offsetof(FChallengeSkinUIData, BackgroundImage) == 0x000040, "Member 'FChallengeSkinUIData::BackgroundImage' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CharacterBioViewData
// 0x0078 (0x0078 - 0x0000)
struct FCharacterBioViewData final
{
public:
	class FText                                   Name;                                              // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   BioText;                                           // 0x0018(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EPlayerRole                                   CharacterRole;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKillerAttributes                      KillerAttributes;                                  // 0x0034(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BackgroundImage;                                   // 0x0040(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCharacterBioViewData) == 0x000008, "Wrong alignment on FCharacterBioViewData");
static_assert(sizeof(FCharacterBioViewData) == 0x000078, "Wrong size on FCharacterBioViewData");
static_assert(offsetof(FCharacterBioViewData, Name) == 0x000000, "Member 'FCharacterBioViewData::Name' has a wrong offset!");
static_assert(offsetof(FCharacterBioViewData, BioText) == 0x000018, "Member 'FCharacterBioViewData::BioText' has a wrong offset!");
static_assert(offsetof(FCharacterBioViewData, CharacterRole) == 0x000030, "Member 'FCharacterBioViewData::CharacterRole' has a wrong offset!");
static_assert(offsetof(FCharacterBioViewData, KillerAttributes) == 0x000034, "Member 'FCharacterBioViewData::KillerAttributes' has a wrong offset!");
static_assert(offsetof(FCharacterBioViewData, BackgroundImage) == 0x000040, "Member 'FCharacterBioViewData::BackgroundImage' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CrossPromoCampaignViewData
// 0x00E8 (0x00E8 - 0x0000)
struct FCrossPromoCampaignViewData final
{
public:
	class FString                                 CampaignId;                                        // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0010(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   ButtonLabel;                                       // 0x0040(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   InstructionText;                                   // 0x0058(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        QrCodeImagePath;                                   // 0x0070(0x0028)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                VideosUri;                                         // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	ECrossPromoMediaResourceLinkType              LinkType;                                          // 0x00A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        KeyArtImagePath;                                   // 0x00B0(0x0028)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LinkURI;                                           // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrossPromoCampaignViewData) == 0x000008, "Wrong alignment on FCrossPromoCampaignViewData");
static_assert(sizeof(FCrossPromoCampaignViewData) == 0x0000E8, "Wrong size on FCrossPromoCampaignViewData");
static_assert(offsetof(FCrossPromoCampaignViewData, CampaignId) == 0x000000, "Member 'FCrossPromoCampaignViewData::CampaignId' has a wrong offset!");
static_assert(offsetof(FCrossPromoCampaignViewData, Title) == 0x000010, "Member 'FCrossPromoCampaignViewData::Title' has a wrong offset!");
static_assert(offsetof(FCrossPromoCampaignViewData, Description) == 0x000028, "Member 'FCrossPromoCampaignViewData::Description' has a wrong offset!");
static_assert(offsetof(FCrossPromoCampaignViewData, ButtonLabel) == 0x000040, "Member 'FCrossPromoCampaignViewData::ButtonLabel' has a wrong offset!");
static_assert(offsetof(FCrossPromoCampaignViewData, InstructionText) == 0x000058, "Member 'FCrossPromoCampaignViewData::InstructionText' has a wrong offset!");
static_assert(offsetof(FCrossPromoCampaignViewData, QrCodeImagePath) == 0x000070, "Member 'FCrossPromoCampaignViewData::QrCodeImagePath' has a wrong offset!");
static_assert(offsetof(FCrossPromoCampaignViewData, VideosUri) == 0x000098, "Member 'FCrossPromoCampaignViewData::VideosUri' has a wrong offset!");
static_assert(offsetof(FCrossPromoCampaignViewData, LinkType) == 0x0000A8, "Member 'FCrossPromoCampaignViewData::LinkType' has a wrong offset!");
static_assert(offsetof(FCrossPromoCampaignViewData, KeyArtImagePath) == 0x0000B0, "Member 'FCrossPromoCampaignViewData::KeyArtImagePath' has a wrong offset!");
static_assert(offsetof(FCrossPromoCampaignViewData, LinkURI) == 0x0000D8, "Member 'FCrossPromoCampaignViewData::LinkURI' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.CustomizationItemPreviewAreaViewData
// 0x0020 (0x0020 - 0x0000)
struct FCustomizationItemPreviewAreaViewData final
{
public:
	class UStoreCustomizationItemViewData*        PreviewItem;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStoreCustomizationItemViewData*> ItemsData;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsOutfit;                                          // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationItemPreviewAreaViewData) == 0x000008, "Wrong alignment on FCustomizationItemPreviewAreaViewData");
static_assert(sizeof(FCustomizationItemPreviewAreaViewData) == 0x000020, "Wrong size on FCustomizationItemPreviewAreaViewData");
static_assert(offsetof(FCustomizationItemPreviewAreaViewData, PreviewItem) == 0x000000, "Member 'FCustomizationItemPreviewAreaViewData::PreviewItem' has a wrong offset!");
static_assert(offsetof(FCustomizationItemPreviewAreaViewData, ItemsData) == 0x000008, "Member 'FCustomizationItemPreviewAreaViewData::ItemsData' has a wrong offset!");
static_assert(offsetof(FCustomizationItemPreviewAreaViewData, IsOutfit) == 0x000018, "Member 'FCustomizationItemPreviewAreaViewData::IsOutfit' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.DailyRitualViewData
// 0x0080 (0x0080 - 0x0000)
struct FDailyRitualViewData final
{
public:
	class FString                                 Key;                                               // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Title;                                             // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0030(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDailyRitualState                             RitualState;                                       // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x2];                                       // 0x006A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TextProgress;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextThreshold;                                     // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarProgress;                                       // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BarThreshold;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodpointsReward;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDailyRitualViewData) == 0x000008, "Wrong alignment on FDailyRitualViewData");
static_assert(sizeof(FDailyRitualViewData) == 0x000080, "Wrong size on FDailyRitualViewData");
static_assert(offsetof(FDailyRitualViewData, Key) == 0x000000, "Member 'FDailyRitualViewData::Key' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, Title) == 0x000010, "Member 'FDailyRitualViewData::Title' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, Description) == 0x000020, "Member 'FDailyRitualViewData::Description' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, IconTexture) == 0x000030, "Member 'FDailyRitualViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, RitualState) == 0x000068, "Member 'FDailyRitualViewData::RitualState' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, IsNew) == 0x000069, "Member 'FDailyRitualViewData::IsNew' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, TextProgress) == 0x00006C, "Member 'FDailyRitualViewData::TextProgress' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, TextThreshold) == 0x000070, "Member 'FDailyRitualViewData::TextThreshold' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, BarProgress) == 0x000074, "Member 'FDailyRitualViewData::BarProgress' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, BarThreshold) == 0x000078, "Member 'FDailyRitualViewData::BarThreshold' has a wrong offset!");
static_assert(offsetof(FDailyRitualViewData, BloodpointsReward) == 0x00007C, "Member 'FDailyRitualViewData::BloodpointsReward' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.DetailsTabViewData
// 0x0050 (0x0050 - 0x0000)
struct FDetailsTabViewData final
{
public:
	EDetailsTabLayout                             Layout;                                            // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpecialEventDetailsTabContentData> ContentData;                                       // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0018(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDetailsTabViewData) == 0x000008, "Wrong alignment on FDetailsTabViewData");
static_assert(sizeof(FDetailsTabViewData) == 0x000050, "Wrong size on FDetailsTabViewData");
static_assert(offsetof(FDetailsTabViewData, Layout) == 0x000000, "Member 'FDetailsTabViewData::Layout' has a wrong offset!");
static_assert(offsetof(FDetailsTabViewData, ContentData) == 0x000008, "Member 'FDetailsTabViewData::ContentData' has a wrong offset!");
static_assert(offsetof(FDetailsTabViewData, Image) == 0x000018, "Member 'FDetailsTabViewData::Image' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.EventEntryPopupSkinUIData
// 0x02A0 (0x02A8 - 0x0008)
struct FEventEntryPopupSkinUIData final : public FTableRowBase
{
public:
	struct FLinearColor                           ScrollBarColor;                                    // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              EventImage;                                        // 0x0018(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PreviewAreaBackground;                             // 0x0050(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           BaseColor;                                         // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       BackgroundTexture;                                 // 0x0098(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              BackgroundCenterImage;                             // 0x00D0(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       TabMaterialInstance;                               // 0x0108(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsingBackgroundTexture;                          // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMenuSkinDataAsset>      MenuSkinData;                                      // 0x0148(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       TitleBannerMaterial;                               // 0x0180(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              TitleIcon;                                         // 0x01B8(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       HeaderBackgroundMaterial;                          // 0x01F0(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       MilestoneTrackerBackground;                        // 0x0228(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInstance>       MilestoneTrackerHighlightBar;                      // 0x0260(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           PreviewBGTintColor;                                // 0x0298(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventEntryPopupSkinUIData) == 0x000008, "Wrong alignment on FEventEntryPopupSkinUIData");
static_assert(sizeof(FEventEntryPopupSkinUIData) == 0x0002A8, "Wrong size on FEventEntryPopupSkinUIData");
static_assert(offsetof(FEventEntryPopupSkinUIData, ScrollBarColor) == 0x000008, "Member 'FEventEntryPopupSkinUIData::ScrollBarColor' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, EventImage) == 0x000018, "Member 'FEventEntryPopupSkinUIData::EventImage' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, PreviewAreaBackground) == 0x000050, "Member 'FEventEntryPopupSkinUIData::PreviewAreaBackground' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, BaseColor) == 0x000088, "Member 'FEventEntryPopupSkinUIData::BaseColor' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, BackgroundTexture) == 0x000098, "Member 'FEventEntryPopupSkinUIData::BackgroundTexture' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, BackgroundCenterImage) == 0x0000D0, "Member 'FEventEntryPopupSkinUIData::BackgroundCenterImage' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, TabMaterialInstance) == 0x000108, "Member 'FEventEntryPopupSkinUIData::TabMaterialInstance' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, IsUsingBackgroundTexture) == 0x000140, "Member 'FEventEntryPopupSkinUIData::IsUsingBackgroundTexture' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, MenuSkinData) == 0x000148, "Member 'FEventEntryPopupSkinUIData::MenuSkinData' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, TitleBannerMaterial) == 0x000180, "Member 'FEventEntryPopupSkinUIData::TitleBannerMaterial' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, TitleIcon) == 0x0001B8, "Member 'FEventEntryPopupSkinUIData::TitleIcon' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, HeaderBackgroundMaterial) == 0x0001F0, "Member 'FEventEntryPopupSkinUIData::HeaderBackgroundMaterial' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, MilestoneTrackerBackground) == 0x000228, "Member 'FEventEntryPopupSkinUIData::MilestoneTrackerBackground' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, MilestoneTrackerHighlightBar) == 0x000260, "Member 'FEventEntryPopupSkinUIData::MilestoneTrackerHighlightBar' has a wrong offset!");
static_assert(offsetof(FEventEntryPopupSkinUIData, PreviewBGTintColor) == 0x000298, "Member 'FEventEntryPopupSkinUIData::PreviewBGTintColor' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.EventObjectiveTrackerViewData
// 0x0108 (0x0108 - 0x0000)
struct FEventObjectiveTrackerViewData final
{
public:
	int32                                         GlobalProgression;                                 // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgression;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NextProgression;                                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalBonus;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         IndexOfLastTargetReached;                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FEventObjectiveTargetData>      BonusTargetsData;                                  // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FSpecialEventCommunityChallengeData    CommunityChallengeData;                            // 0x0028(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      BannerMaterial;                                    // 0x0098(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              LabelTexture;                                      // 0x00D0(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEventObjectiveTrackerViewData) == 0x000008, "Wrong alignment on FEventObjectiveTrackerViewData");
static_assert(sizeof(FEventObjectiveTrackerViewData) == 0x000108, "Wrong size on FEventObjectiveTrackerViewData");
static_assert(offsetof(FEventObjectiveTrackerViewData, GlobalProgression) == 0x000000, "Member 'FEventObjectiveTrackerViewData::GlobalProgression' has a wrong offset!");
static_assert(offsetof(FEventObjectiveTrackerViewData, MaxProgression) == 0x000004, "Member 'FEventObjectiveTrackerViewData::MaxProgression' has a wrong offset!");
static_assert(offsetof(FEventObjectiveTrackerViewData, NextProgression) == 0x000008, "Member 'FEventObjectiveTrackerViewData::NextProgression' has a wrong offset!");
static_assert(offsetof(FEventObjectiveTrackerViewData, GlobalBonus) == 0x00000C, "Member 'FEventObjectiveTrackerViewData::GlobalBonus' has a wrong offset!");
static_assert(offsetof(FEventObjectiveTrackerViewData, IndexOfLastTargetReached) == 0x000010, "Member 'FEventObjectiveTrackerViewData::IndexOfLastTargetReached' has a wrong offset!");
static_assert(offsetof(FEventObjectiveTrackerViewData, BonusTargetsData) == 0x000018, "Member 'FEventObjectiveTrackerViewData::BonusTargetsData' has a wrong offset!");
static_assert(offsetof(FEventObjectiveTrackerViewData, CommunityChallengeData) == 0x000028, "Member 'FEventObjectiveTrackerViewData::CommunityChallengeData' has a wrong offset!");
static_assert(offsetof(FEventObjectiveTrackerViewData, BannerMaterial) == 0x000098, "Member 'FEventObjectiveTrackerViewData::BannerMaterial' has a wrong offset!");
static_assert(offsetof(FEventObjectiveTrackerViewData, LabelTexture) == 0x0000D0, "Member 'FEventObjectiveTrackerViewData::LabelTexture' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PopupButtonViewData
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x10) FPopupButtonViewData final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FKey                                   Key;                                               // 0x0018(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x48];                                      // 0x0038(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPopupButtonViewData) == 0x000010, "Wrong alignment on FPopupButtonViewData");
static_assert(sizeof(FPopupButtonViewData) == 0x000080, "Wrong size on FPopupButtonViewData");
static_assert(offsetof(FPopupButtonViewData, Label) == 0x000000, "Member 'FPopupButtonViewData::Label' has a wrong offset!");
static_assert(offsetof(FPopupButtonViewData, Key) == 0x000018, "Member 'FPopupButtonViewData::Key' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PerkViewData
// 0x0008 (0x0070 - 0x0068)
struct FPerkViewData final : public FBaseLoadoutPartViewData
{
public:
	int32                                         Level;                                             // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             StatusEffectType;                                  // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeable;                                    // 0x006D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeableActive;                              // 0x006E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F[0x1];                                       // 0x006F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerkViewData) == 0x000008, "Wrong alignment on FPerkViewData");
static_assert(sizeof(FPerkViewData) == 0x000070, "Wrong size on FPerkViewData");
static_assert(offsetof(FPerkViewData, Level) == 0x000068, "Member 'FPerkViewData::Level' has a wrong offset!");
static_assert(offsetof(FPerkViewData, StatusEffectType) == 0x00006C, "Member 'FPerkViewData::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FPerkViewData, IsRechargeable) == 0x00006D, "Member 'FPerkViewData::IsRechargeable' has a wrong offset!");
static_assert(offsetof(FPerkViewData, IsRechargeableActive) == 0x00006E, "Member 'FPerkViewData::IsRechargeableActive' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ItemViewData
// 0x0038 (0x00A0 - 0x0068)
struct FItemViewData final : public FBaseLoadoutPartViewData
{
public:
	bool                                          IsEnergyTypeValid;                                 // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnergyLevel;                                       // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   InputKey;                                          // 0x0078(0x0020)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowKeyPrompt;                                     // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLimitedItem;                                     // 0x0099(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailable;                                       // 0x009A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpecialItem;                                     // 0x009B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCursedItem;                                      // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemViewData) == 0x000008, "Wrong alignment on FItemViewData");
static_assert(sizeof(FItemViewData) == 0x0000A0, "Wrong size on FItemViewData");
static_assert(offsetof(FItemViewData, IsEnergyTypeValid) == 0x000068, "Member 'FItemViewData::IsEnergyTypeValid' has a wrong offset!");
static_assert(offsetof(FItemViewData, EnergyLevel) == 0x00006C, "Member 'FItemViewData::EnergyLevel' has a wrong offset!");
static_assert(offsetof(FItemViewData, Count) == 0x000070, "Member 'FItemViewData::Count' has a wrong offset!");
static_assert(offsetof(FItemViewData, InputKey) == 0x000078, "Member 'FItemViewData::InputKey' has a wrong offset!");
static_assert(offsetof(FItemViewData, ShowKeyPrompt) == 0x000098, "Member 'FItemViewData::ShowKeyPrompt' has a wrong offset!");
static_assert(offsetof(FItemViewData, IsLimitedItem) == 0x000099, "Member 'FItemViewData::IsLimitedItem' has a wrong offset!");
static_assert(offsetof(FItemViewData, IsAvailable) == 0x00009A, "Member 'FItemViewData::IsAvailable' has a wrong offset!");
static_assert(offsetof(FItemViewData, IsSpecialItem) == 0x00009B, "Member 'FItemViewData::IsSpecialItem' has a wrong offset!");
static_assert(offsetof(FItemViewData, IsCursedItem) == 0x00009C, "Member 'FItemViewData::IsCursedItem' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StatusEffectAlertViewData
// 0x01D0 (0x01D0 - 0x0000)
struct FStatusEffectAlertViewData final
{
public:
	class FString                                 StatusEffectName;                                  // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              StatusEffectIcon;                                  // 0x0010(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             StatusEffectType;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudStatusEffectAlertViewType                 SourceViewType;                                    // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPerkViewData                          PerkViewData;                                      // 0x0050(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FItemViewData                          ItemViewData;                                      // 0x00C0(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAddonViewData                         AddonViewData;                                     // 0x0160(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatusEffectAlertViewData) == 0x000008, "Wrong alignment on FStatusEffectAlertViewData");
static_assert(sizeof(FStatusEffectAlertViewData) == 0x0001D0, "Wrong size on FStatusEffectAlertViewData");
static_assert(offsetof(FStatusEffectAlertViewData, StatusEffectName) == 0x000000, "Member 'FStatusEffectAlertViewData::StatusEffectName' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, StatusEffectIcon) == 0x000010, "Member 'FStatusEffectAlertViewData::StatusEffectIcon' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, StatusEffectType) == 0x000048, "Member 'FStatusEffectAlertViewData::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, SourceViewType) == 0x000049, "Member 'FStatusEffectAlertViewData::SourceViewType' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, PerkViewData) == 0x000050, "Member 'FStatusEffectAlertViewData::PerkViewData' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, ItemViewData) == 0x0000C0, "Member 'FStatusEffectAlertViewData::ItemViewData' has a wrong offset!");
static_assert(offsetof(FStatusEffectAlertViewData, AddonViewData) == 0x000160, "Member 'FStatusEffectAlertViewData::AddonViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.HudEventProgression2023ViewData
// 0x0014 (0x0014 - 0x0000)
struct FHudEventProgression2023ViewData final
{
public:
	bool                                          IsInVoidZone;                                      // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsChannelingHaunt;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EnergyProgress;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HauntTarget;                                       // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEnergy;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInitialized;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHudEventProgression2023ViewData) == 0x000004, "Wrong alignment on FHudEventProgression2023ViewData");
static_assert(sizeof(FHudEventProgression2023ViewData) == 0x000014, "Wrong size on FHudEventProgression2023ViewData");
static_assert(offsetof(FHudEventProgression2023ViewData, IsInVoidZone) == 0x000000, "Member 'FHudEventProgression2023ViewData::IsInVoidZone' has a wrong offset!");
static_assert(offsetof(FHudEventProgression2023ViewData, IsChannelingHaunt) == 0x000001, "Member 'FHudEventProgression2023ViewData::IsChannelingHaunt' has a wrong offset!");
static_assert(offsetof(FHudEventProgression2023ViewData, EnergyProgress) == 0x000004, "Member 'FHudEventProgression2023ViewData::EnergyProgress' has a wrong offset!");
static_assert(offsetof(FHudEventProgression2023ViewData, HauntTarget) == 0x000008, "Member 'FHudEventProgression2023ViewData::HauntTarget' has a wrong offset!");
static_assert(offsetof(FHudEventProgression2023ViewData, MaxEnergy) == 0x00000C, "Member 'FHudEventProgression2023ViewData::MaxEnergy' has a wrong offset!");
static_assert(offsetof(FHudEventProgression2023ViewData, IsInitialized) == 0x000010, "Member 'FHudEventProgression2023ViewData::IsInitialized' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.HudEventProgressionViewData
// 0x0010 (0x0010 - 0x0000)
struct FHudEventProgressionViewData final
{
public:
	int32                                         ProgressBanked;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressPending;                                   // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressCapacity;                                  // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProgressMax;                                       // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHudEventProgressionViewData) == 0x000004, "Wrong alignment on FHudEventProgressionViewData");
static_assert(sizeof(FHudEventProgressionViewData) == 0x000010, "Wrong size on FHudEventProgressionViewData");
static_assert(offsetof(FHudEventProgressionViewData, ProgressBanked) == 0x000000, "Member 'FHudEventProgressionViewData::ProgressBanked' has a wrong offset!");
static_assert(offsetof(FHudEventProgressionViewData, ProgressPending) == 0x000004, "Member 'FHudEventProgressionViewData::ProgressPending' has a wrong offset!");
static_assert(offsetof(FHudEventProgressionViewData, ProgressCapacity) == 0x000008, "Member 'FHudEventProgressionViewData::ProgressCapacity' has a wrong offset!");
static_assert(offsetof(FHudEventProgressionViewData, ProgressMax) == 0x00000C, "Member 'FHudEventProgressionViewData::ProgressMax' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ItemBundleViewData
// 0x0180 (0x0180 - 0x0000)
struct FItemBundleViewData final
{
public:
	struct FItemViewData                          Item;                                              // 0x0000(0x00A0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAddonViewData                         Addon1;                                            // 0x00A0(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAddonViewData                         Addon2;                                            // 0x0110(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FItemBundleViewData) == 0x000008, "Wrong alignment on FItemBundleViewData");
static_assert(sizeof(FItemBundleViewData) == 0x000180, "Wrong size on FItemBundleViewData");
static_assert(offsetof(FItemBundleViewData, Item) == 0x000000, "Member 'FItemBundleViewData::Item' has a wrong offset!");
static_assert(offsetof(FItemBundleViewData, Addon1) == 0x0000A0, "Member 'FItemBundleViewData::Addon1' has a wrong offset!");
static_assert(offsetof(FItemBundleViewData, Addon2) == 0x000110, "Member 'FItemBundleViewData::Addon2' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ItemPickupViewData
// 0x01D0 (0x01D0 - 0x0000)
struct FItemPickupViewData final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SpecialIconTexture;                                // 0x0010(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemBundleViewData                    BundleViewData;                                    // 0x0048(0x0180)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         ItemCustomIndex;                                   // 0x01C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x01CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CD[0x3];                                      // 0x01CD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FItemPickupViewData) == 0x000008, "Wrong alignment on FItemPickupViewData");
static_assert(sizeof(FItemPickupViewData) == 0x0001D0, "Wrong size on FItemPickupViewData");
static_assert(offsetof(FItemPickupViewData, Description) == 0x000000, "Member 'FItemPickupViewData::Description' has a wrong offset!");
static_assert(offsetof(FItemPickupViewData, SpecialIconTexture) == 0x000010, "Member 'FItemPickupViewData::SpecialIconTexture' has a wrong offset!");
static_assert(offsetof(FItemPickupViewData, BundleViewData) == 0x000048, "Member 'FItemPickupViewData::BundleViewData' has a wrong offset!");
static_assert(offsetof(FItemPickupViewData, ItemCustomIndex) == 0x0001C8, "Member 'FItemPickupViewData::ItemCustomIndex' has a wrong offset!");
static_assert(offsetof(FItemPickupViewData, IsValid) == 0x0001CC, "Member 'FItemPickupViewData::IsValid' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.HudObjectivesViewData
// 0x000C (0x000C - 0x0000)
struct FHudObjectivesViewData final
{
public:
	EPlayerTeam                                   PlayerTeam;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHatchOpen;                                       // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NbGeneratorsLeft;                                  // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequiredActivatedGeneratorCount;                   // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHudObjectivesViewData) == 0x000004, "Wrong alignment on FHudObjectivesViewData");
static_assert(sizeof(FHudObjectivesViewData) == 0x00000C, "Wrong size on FHudObjectivesViewData");
static_assert(offsetof(FHudObjectivesViewData, PlayerTeam) == 0x000000, "Member 'FHudObjectivesViewData::PlayerTeam' has a wrong offset!");
static_assert(offsetof(FHudObjectivesViewData, IsHatchOpen) == 0x000001, "Member 'FHudObjectivesViewData::IsHatchOpen' has a wrong offset!");
static_assert(offsetof(FHudObjectivesViewData, NbGeneratorsLeft) == 0x000004, "Member 'FHudObjectivesViewData::NbGeneratorsLeft' has a wrong offset!");
static_assert(offsetof(FHudObjectivesViewData, RequiredActivatedGeneratorCount) == 0x000008, "Member 'FHudObjectivesViewData::RequiredActivatedGeneratorCount' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StatusEffectViewData
// 0x0058 (0x0058 - 0x0000)
struct FStatusEffectViewData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              IconTexture;                                       // 0x0010(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             StatusEffectType;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Level;                                             // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percentage;                                        // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlayIntroAnimation;                                // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatusEffectViewData) == 0x000008, "Wrong alignment on FStatusEffectViewData");
static_assert(sizeof(FStatusEffectViewData) == 0x000058, "Wrong size on FStatusEffectViewData");
static_assert(offsetof(FStatusEffectViewData, ID) == 0x000000, "Member 'FStatusEffectViewData::ID' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, IconTexture) == 0x000010, "Member 'FStatusEffectViewData::IconTexture' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, StatusEffectType) == 0x000048, "Member 'FStatusEffectViewData::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, Level) == 0x00004C, "Member 'FStatusEffectViewData::Level' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, Percentage) == 0x000050, "Member 'FStatusEffectViewData::Percentage' has a wrong offset!");
static_assert(offsetof(FStatusEffectViewData, PlayIntroAnimation) == 0x000054, "Member 'FStatusEffectViewData::PlayIntroAnimation' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.InteractionProgressViewData
// 0x0078 (0x0078 - 0x0000)
struct FInteractionProgressViewData final
{
public:
	class FString                                 Message;                                           // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SecondaryMessage;                                  // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarColor                                     BarColor;                                          // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBarColor                                     ChargeBarColor;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowIcon;                                          // 0x0022(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowIconCharge;                                    // 0x0023(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              ItemIcon;                                          // 0x0028(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStatusEffectViewData>          Proficiencies;                                     // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         PermanentProgress;                                 // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentageStopDischarge;                           // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionProgressViewData) == 0x000008, "Wrong alignment on FInteractionProgressViewData");
static_assert(sizeof(FInteractionProgressViewData) == 0x000078, "Wrong size on FInteractionProgressViewData");
static_assert(offsetof(FInteractionProgressViewData, Message) == 0x000000, "Member 'FInteractionProgressViewData::Message' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, SecondaryMessage) == 0x000010, "Member 'FInteractionProgressViewData::SecondaryMessage' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, BarColor) == 0x000020, "Member 'FInteractionProgressViewData::BarColor' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, ChargeBarColor) == 0x000021, "Member 'FInteractionProgressViewData::ChargeBarColor' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, ShowIcon) == 0x000022, "Member 'FInteractionProgressViewData::ShowIcon' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, ShowIconCharge) == 0x000023, "Member 'FInteractionProgressViewData::ShowIconCharge' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, ItemIcon) == 0x000028, "Member 'FInteractionProgressViewData::ItemIcon' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, Proficiencies) == 0x000060, "Member 'FInteractionProgressViewData::Proficiencies' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, PermanentProgress) == 0x000070, "Member 'FInteractionProgressViewData::PermanentProgress' has a wrong offset!");
static_assert(offsetof(FInteractionProgressViewData, PercentageStopDischarge) == 0x000074, "Member 'FInteractionProgressViewData::PercentageStopDischarge' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.InteractionPromptViewData
// 0x00B0 (0x00B0 - 0x0000)
struct FInteractionPromptViewData final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractionPromptType                        Type;                                              // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKey                                   InputKey1;                                         // 0x0028(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey2;                                         // 0x0048(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey3;                                         // 0x0068(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey4;                                         // 0x0088(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PlaceInCenter;                                     // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailable;                                       // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x6];                                       // 0x00AA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInteractionPromptViewData) == 0x000008, "Wrong alignment on FInteractionPromptViewData");
static_assert(sizeof(FInteractionPromptViewData) == 0x0000B0, "Wrong size on FInteractionPromptViewData");
static_assert(offsetof(FInteractionPromptViewData, ID) == 0x000000, "Member 'FInteractionPromptViewData::ID' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, Message) == 0x000010, "Member 'FInteractionPromptViewData::Message' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, Type) == 0x000020, "Member 'FInteractionPromptViewData::Type' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, InputKey1) == 0x000028, "Member 'FInteractionPromptViewData::InputKey1' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, InputKey2) == 0x000048, "Member 'FInteractionPromptViewData::InputKey2' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, InputKey3) == 0x000068, "Member 'FInteractionPromptViewData::InputKey3' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, InputKey4) == 0x000088, "Member 'FInteractionPromptViewData::InputKey4' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, PlaceInCenter) == 0x0000A8, "Member 'FInteractionPromptViewData::PlaceInCenter' has a wrong offset!");
static_assert(offsetof(FInteractionPromptViewData, IsAvailable) == 0x0000A9, "Member 'FInteractionPromptViewData::IsAvailable' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.KillerStatusDataMapping
// 0x0020 (0x0028 - 0x0008)
struct FKillerStatusDataMapping final : public FDBDTableRowBase
{
public:
	struct FGameplayTag                           Killer;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UKillerStatusData>          ViewDataClass;                                     // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    WidgetClass;                                       // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillerStatusDataMapping) == 0x000008, "Wrong alignment on FKillerStatusDataMapping");
static_assert(sizeof(FKillerStatusDataMapping) == 0x000028, "Wrong size on FKillerStatusDataMapping");
static_assert(offsetof(FKillerStatusDataMapping, Killer) == 0x000008, "Member 'FKillerStatusDataMapping::Killer' has a wrong offset!");
static_assert(offsetof(FKillerStatusDataMapping, ViewDataClass) == 0x000018, "Member 'FKillerStatusDataMapping::ViewDataClass' has a wrong offset!");
static_assert(offsetof(FKillerStatusDataMapping, WidgetClass) == 0x000020, "Member 'FKillerStatusDataMapping::WidgetClass' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.LoadingHintViewData
// 0x0078 (0x0078 - 0x0000)
struct FLoadingHintViewData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   Title;                                             // 0x0038(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0050(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          ShouldFadeInOutHint;                               // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeOutDelay;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerTeam                                   PlayerTeam;                                        // 0x0070(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RelevantCharacterID;                               // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingHintViewData) == 0x000008, "Wrong alignment on FLoadingHintViewData");
static_assert(sizeof(FLoadingHintViewData) == 0x000078, "Wrong size on FLoadingHintViewData");
static_assert(offsetof(FLoadingHintViewData, Icon) == 0x000000, "Member 'FLoadingHintViewData::Icon' has a wrong offset!");
static_assert(offsetof(FLoadingHintViewData, Title) == 0x000038, "Member 'FLoadingHintViewData::Title' has a wrong offset!");
static_assert(offsetof(FLoadingHintViewData, Description) == 0x000050, "Member 'FLoadingHintViewData::Description' has a wrong offset!");
static_assert(offsetof(FLoadingHintViewData, ShouldFadeInOutHint) == 0x000068, "Member 'FLoadingHintViewData::ShouldFadeInOutHint' has a wrong offset!");
static_assert(offsetof(FLoadingHintViewData, FadeOutDelay) == 0x00006C, "Member 'FLoadingHintViewData::FadeOutDelay' has a wrong offset!");
static_assert(offsetof(FLoadingHintViewData, PlayerTeam) == 0x000070, "Member 'FLoadingHintViewData::PlayerTeam' has a wrong offset!");
static_assert(offsetof(FLoadingHintViewData, RelevantCharacterID) == 0x000074, "Member 'FLoadingHintViewData::RelevantCharacterID' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.LobbyPlayerListViewData
// 0x0040 (0x0040 - 0x0000)
struct FLobbyPlayerListViewData final
{
public:
	uint8                                         Pad_0[0x38];                                       // 0x0000(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UMenuClassViewData*                     CharacterClass;                                    // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLobbyPlayerListViewData) == 0x000008, "Wrong alignment on FLobbyPlayerListViewData");
static_assert(sizeof(FLobbyPlayerListViewData) == 0x000040, "Wrong size on FLobbyPlayerListViewData");
static_assert(offsetof(FLobbyPlayerListViewData, CharacterClass) == 0x000038, "Member 'FLobbyPlayerListViewData::CharacterClass' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.LockedFeatureTooltipViewData
// 0x0010 (0x0010 - 0x0000)
struct FLockedFeatureTooltipViewData final
{
public:
	ELockedElementType                            LockedElementType;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDFeatureLockProgress                FeatureLockProgress;                               // 0x0004(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLockedFeatureTooltipViewData) == 0x000004, "Wrong alignment on FLockedFeatureTooltipViewData");
static_assert(sizeof(FLockedFeatureTooltipViewData) == 0x000010, "Wrong size on FLockedFeatureTooltipViewData");
static_assert(offsetof(FLockedFeatureTooltipViewData, LockedElementType) == 0x000000, "Member 'FLockedFeatureTooltipViewData::LockedElementType' has a wrong offset!");
static_assert(offsetof(FLockedFeatureTooltipViewData, FeatureLockProgress) == 0x000004, "Member 'FLockedFeatureTooltipViewData::FeatureLockProgress' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.TimerFlagViewData
// 0x0030 (0x0030 - 0x0000)
struct FTimerFlagViewData final
{
public:
	EFlagType                                     FlagType;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlagSize                                     FlagSize;                                          // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFlagItemType                                 ItemType;                                          // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TimerText;                                         // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldTick;                                        // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldExpandWithHover;                             // 0x0019(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              EndDate;                                           // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERemainingTimeFormat                          DisplayFormat;                                     // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x3];                                       // 0x0029(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfUnitsInDisplay;                            // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTimerFlagViewData) == 0x000008, "Wrong alignment on FTimerFlagViewData");
static_assert(sizeof(FTimerFlagViewData) == 0x000030, "Wrong size on FTimerFlagViewData");
static_assert(offsetof(FTimerFlagViewData, FlagType) == 0x000000, "Member 'FTimerFlagViewData::FlagType' has a wrong offset!");
static_assert(offsetof(FTimerFlagViewData, FlagSize) == 0x000001, "Member 'FTimerFlagViewData::FlagSize' has a wrong offset!");
static_assert(offsetof(FTimerFlagViewData, ItemType) == 0x000002, "Member 'FTimerFlagViewData::ItemType' has a wrong offset!");
static_assert(offsetof(FTimerFlagViewData, TimerText) == 0x000008, "Member 'FTimerFlagViewData::TimerText' has a wrong offset!");
static_assert(offsetof(FTimerFlagViewData, ShouldTick) == 0x000018, "Member 'FTimerFlagViewData::ShouldTick' has a wrong offset!");
static_assert(offsetof(FTimerFlagViewData, ShouldExpandWithHover) == 0x000019, "Member 'FTimerFlagViewData::ShouldExpandWithHover' has a wrong offset!");
static_assert(offsetof(FTimerFlagViewData, EndDate) == 0x000020, "Member 'FTimerFlagViewData::EndDate' has a wrong offset!");
static_assert(offsetof(FTimerFlagViewData, DisplayFormat) == 0x000028, "Member 'FTimerFlagViewData::DisplayFormat' has a wrong offset!");
static_assert(offsetof(FTimerFlagViewData, NumberOfUnitsInDisplay) == 0x00002C, "Member 'FTimerFlagViewData::NumberOfUnitsInDisplay' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.MainMenuButtonData
// 0x0058 (0x0058 - 0x0000)
struct FMainMenuButtonData final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Bonus;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerFlagViewData                     Timer;                                             // 0x0018(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoadingSaveActivityInProgress;                   // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoadingPlayerFacade;                             // 0x004A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoadingChunking;                                 // 0x004B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLockedFeature;                                   // 0x004C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDisabled;                                        // 0x004D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E[0x2];                                       // 0x004E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonIndex;                                       // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMainMenuButtonData) == 0x000008, "Wrong alignment on FMainMenuButtonData");
static_assert(sizeof(FMainMenuButtonData) == 0x000058, "Wrong size on FMainMenuButtonData");
static_assert(offsetof(FMainMenuButtonData, ButtonType) == 0x000000, "Member 'FMainMenuButtonData::ButtonType' has a wrong offset!");
static_assert(offsetof(FMainMenuButtonData, Bonus) == 0x000008, "Member 'FMainMenuButtonData::Bonus' has a wrong offset!");
static_assert(offsetof(FMainMenuButtonData, Timer) == 0x000018, "Member 'FMainMenuButtonData::Timer' has a wrong offset!");
static_assert(offsetof(FMainMenuButtonData, IsNew) == 0x000048, "Member 'FMainMenuButtonData::IsNew' has a wrong offset!");
static_assert(offsetof(FMainMenuButtonData, IsLoadingSaveActivityInProgress) == 0x000049, "Member 'FMainMenuButtonData::IsLoadingSaveActivityInProgress' has a wrong offset!");
static_assert(offsetof(FMainMenuButtonData, IsLoadingPlayerFacade) == 0x00004A, "Member 'FMainMenuButtonData::IsLoadingPlayerFacade' has a wrong offset!");
static_assert(offsetof(FMainMenuButtonData, IsLoadingChunking) == 0x00004B, "Member 'FMainMenuButtonData::IsLoadingChunking' has a wrong offset!");
static_assert(offsetof(FMainMenuButtonData, IsLockedFeature) == 0x00004C, "Member 'FMainMenuButtonData::IsLockedFeature' has a wrong offset!");
static_assert(offsetof(FMainMenuButtonData, IsDisabled) == 0x00004D, "Member 'FMainMenuButtonData::IsDisabled' has a wrong offset!");
static_assert(offsetof(FMainMenuButtonData, ButtonIndex) == 0x000050, "Member 'FMainMenuButtonData::ButtonIndex' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.MainMenuButtonDecoration
// 0x0038 (0x0040 - 0x0008)
struct FMainMenuButtonDecoration final : public FTableRowBase
{
public:
	TSoftClassPtr<class UClass>                   Widget;                                            // 0x0008(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMainMenuButtonDecoration) == 0x000008, "Wrong alignment on FMainMenuButtonDecoration");
static_assert(sizeof(FMainMenuButtonDecoration) == 0x000040, "Wrong size on FMainMenuButtonDecoration");
static_assert(offsetof(FMainMenuButtonDecoration, Widget) == 0x000008, "Member 'FMainMenuButtonDecoration::Widget' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.MainMenuButtonIcon
// 0x0038 (0x0040 - 0x0008)
struct FMainMenuButtonIcon final : public FTableRowBase
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMainMenuButtonIcon) == 0x000008, "Wrong alignment on FMainMenuButtonIcon");
static_assert(sizeof(FMainMenuButtonIcon) == 0x000040, "Wrong size on FMainMenuButtonIcon");
static_assert(offsetof(FMainMenuButtonIcon, Icon) == 0x000008, "Member 'FMainMenuButtonIcon::Icon' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.MatchResultViewData
// 0x0008 (0x0008 - 0x0000)
struct FMatchResultViewData final
{
public:
	bool                                          IsSlasher;                                         // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    SurvivorResult;                                    // 0x0001(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKillerMatchResult                            KillerResult;                                      // 0x0002(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchResultViewData) == 0x000004, "Wrong alignment on FMatchResultViewData");
static_assert(sizeof(FMatchResultViewData) == 0x000008, "Wrong size on FMatchResultViewData");
static_assert(offsetof(FMatchResultViewData, IsSlasher) == 0x000000, "Member 'FMatchResultViewData::IsSlasher' has a wrong offset!");
static_assert(offsetof(FMatchResultViewData, SurvivorResult) == 0x000001, "Member 'FMatchResultViewData::SurvivorResult' has a wrong offset!");
static_assert(offsetof(FMatchResultViewData, KillerResult) == 0x000002, "Member 'FMatchResultViewData::KillerResult' has a wrong offset!");
static_assert(offsetof(FMatchResultViewData, Duration) == 0x000004, "Member 'FMatchResultViewData::Duration' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.MilestoneTrackerItemViewData
// 0x0010 (0x0010 - 0x0000)
struct FMilestoneTrackerItemViewData final
{
public:
	int32                                         EventPoints;                                       // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMilestoneTrackerItemState                    State;                                             // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UStoreCustomizationItemViewData*        RewardData;                                        // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMilestoneTrackerItemViewData) == 0x000008, "Wrong alignment on FMilestoneTrackerItemViewData");
static_assert(sizeof(FMilestoneTrackerItemViewData) == 0x000010, "Wrong size on FMilestoneTrackerItemViewData");
static_assert(offsetof(FMilestoneTrackerItemViewData, EventPoints) == 0x000000, "Member 'FMilestoneTrackerItemViewData::EventPoints' has a wrong offset!");
static_assert(offsetof(FMilestoneTrackerItemViewData, State) == 0x000004, "Member 'FMilestoneTrackerItemViewData::State' has a wrong offset!");
static_assert(offsetof(FMilestoneTrackerItemViewData, RewardData) == 0x000008, "Member 'FMilestoneTrackerItemViewData::RewardData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.MilestoneTrackerUpdateItemViewData
// 0x0018 (0x0018 - 0x0000)
struct FMilestoneTrackerUpdateItemViewData final
{
public:
	int32                                         Index;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMilestoneTrackerItemViewData          UpdatedViewData;                                   // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMilestoneTrackerUpdateItemViewData) == 0x000008, "Wrong alignment on FMilestoneTrackerUpdateItemViewData");
static_assert(sizeof(FMilestoneTrackerUpdateItemViewData) == 0x000018, "Wrong size on FMilestoneTrackerUpdateItemViewData");
static_assert(offsetof(FMilestoneTrackerUpdateItemViewData, Index) == 0x000000, "Member 'FMilestoneTrackerUpdateItemViewData::Index' has a wrong offset!");
static_assert(offsetof(FMilestoneTrackerUpdateItemViewData, UpdatedViewData) == 0x000008, "Member 'FMilestoneTrackerUpdateItemViewData::UpdatedViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.MilestoneTrackerViewData
// 0x0018 (0x0018 - 0x0000)
struct FMilestoneTrackerViewData final
{
public:
	TArray<struct FMilestoneTrackerItemViewData>  MilestoneRewardsList;                              // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         UserMilestonePointData;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMilestoneTrackerViewData) == 0x000008, "Wrong alignment on FMilestoneTrackerViewData");
static_assert(sizeof(FMilestoneTrackerViewData) == 0x000018, "Wrong size on FMilestoneTrackerViewData");
static_assert(offsetof(FMilestoneTrackerViewData, MilestoneRewardsList) == 0x000000, "Member 'FMilestoneTrackerViewData::MilestoneRewardsList' has a wrong offset!");
static_assert(offsetof(FMilestoneTrackerViewData, UserMilestonePointData) == 0x000010, "Member 'FMilestoneTrackerViewData::UserMilestonePointData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.NotifTutorialPopupViewData
// 0x0090 (0x0090 - 0x0000)
struct FNotifTutorialPopupViewData final
{
public:
	class FString                                 Title;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Description;                                       // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0020(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Image;                                             // 0x0058(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNotifTutorialPopupViewData) == 0x000008, "Wrong alignment on FNotifTutorialPopupViewData");
static_assert(sizeof(FNotifTutorialPopupViewData) == 0x000090, "Wrong size on FNotifTutorialPopupViewData");
static_assert(offsetof(FNotifTutorialPopupViewData, Title) == 0x000000, "Member 'FNotifTutorialPopupViewData::Title' has a wrong offset!");
static_assert(offsetof(FNotifTutorialPopupViewData, Description) == 0x000010, "Member 'FNotifTutorialPopupViewData::Description' has a wrong offset!");
static_assert(offsetof(FNotifTutorialPopupViewData, Icon) == 0x000020, "Member 'FNotifTutorialPopupViewData::Icon' has a wrong offset!");
static_assert(offsetof(FNotifTutorialPopupViewData, Image) == 0x000058, "Member 'FNotifTutorialPopupViewData::Image' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ObjectiveRewardLabelViewData
// 0x000C (0x000C - 0x0000)
struct FObjectiveRewardLabelViewData final
{
public:
	struct FEventObjectiveTargetData              TargetData;                                        // 0x0000(0x0008)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	ECurrencyType                                 CurrencyRewardType;                                // 0x0008(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReached;                                         // 0x0009(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActive;                                          // 0x000A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FObjectiveRewardLabelViewData) == 0x000004, "Wrong alignment on FObjectiveRewardLabelViewData");
static_assert(sizeof(FObjectiveRewardLabelViewData) == 0x00000C, "Wrong size on FObjectiveRewardLabelViewData");
static_assert(offsetof(FObjectiveRewardLabelViewData, TargetData) == 0x000000, "Member 'FObjectiveRewardLabelViewData::TargetData' has a wrong offset!");
static_assert(offsetof(FObjectiveRewardLabelViewData, CurrencyRewardType) == 0x000008, "Member 'FObjectiveRewardLabelViewData::CurrencyRewardType' has a wrong offset!");
static_assert(offsetof(FObjectiveRewardLabelViewData, IsReached) == 0x000009, "Member 'FObjectiveRewardLabelViewData::IsReached' has a wrong offset!");
static_assert(offsetof(FObjectiveRewardLabelViewData, IsActive) == 0x00000A, "Member 'FObjectiveRewardLabelViewData::IsActive' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.OfferingViewData
// 0x0008 (0x0070 - 0x0068)
struct FOfferingViewData final : public FBaseLoadoutPartViewData
{
public:
	EItemAvailability                             Availability;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOfferingViewData) == 0x000008, "Wrong alignment on FOfferingViewData");
static_assert(sizeof(FOfferingViewData) == 0x000070, "Wrong size on FOfferingViewData");
static_assert(offsetof(FOfferingViewData, Availability) == 0x000068, "Member 'FOfferingViewData::Availability' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.OnboardingTutorialViewData
// 0x0078 (0x0078 - 0x0000)
struct FOnboardingTutorialViewData final
{
public:
	class FString                                 TutorialId;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          COMPLETED;                                         // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MainRewardClaimed;                                 // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRewardWrapperViewData>         MainRewards;                                       // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         AlternativeRewards;                                // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	EOnboardingTutorialType                       TutorialType;                                      // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnboardingTutorialButtonStyle                ButtonStyle;                                       // 0x0039(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0058(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	class UTexture2D*                             Icon;                                              // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnboardingTutorialViewData) == 0x000008, "Wrong alignment on FOnboardingTutorialViewData");
static_assert(sizeof(FOnboardingTutorialViewData) == 0x000078, "Wrong size on FOnboardingTutorialViewData");
static_assert(offsetof(FOnboardingTutorialViewData, TutorialId) == 0x000000, "Member 'FOnboardingTutorialViewData::TutorialId' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, COMPLETED) == 0x000010, "Member 'FOnboardingTutorialViewData::COMPLETED' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, MainRewardClaimed) == 0x000011, "Member 'FOnboardingTutorialViewData::MainRewardClaimed' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, MainRewards) == 0x000018, "Member 'FOnboardingTutorialViewData::MainRewards' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, AlternativeRewards) == 0x000028, "Member 'FOnboardingTutorialViewData::AlternativeRewards' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, TutorialType) == 0x000038, "Member 'FOnboardingTutorialViewData::TutorialType' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, ButtonStyle) == 0x000039, "Member 'FOnboardingTutorialViewData::ButtonStyle' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, DisplayName) == 0x000040, "Member 'FOnboardingTutorialViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, Description) == 0x000058, "Member 'FOnboardingTutorialViewData::Description' has a wrong offset!");
static_assert(offsetof(FOnboardingTutorialViewData, Icon) == 0x000070, "Member 'FOnboardingTutorialViewData::Icon' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.OnboardingStepViewData
// 0x0028 (0x0028 - 0x0000)
struct FOnboardingStepViewData final
{
public:
	class FString                                 StepId;                                            // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnboardingStepStatus                         Status;                                            // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOnboardingTutorialViewData>    Tutorials;                                         // 0x0018(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnboardingStepViewData) == 0x000008, "Wrong alignment on FOnboardingStepViewData");
static_assert(sizeof(FOnboardingStepViewData) == 0x000028, "Wrong size on FOnboardingStepViewData");
static_assert(offsetof(FOnboardingStepViewData, StepId) == 0x000000, "Member 'FOnboardingStepViewData::StepId' has a wrong offset!");
static_assert(offsetof(FOnboardingStepViewData, Status) == 0x000010, "Member 'FOnboardingStepViewData::Status' has a wrong offset!");
static_assert(offsetof(FOnboardingStepViewData, Tutorials) == 0x000018, "Member 'FOnboardingStepViewData::Tutorials' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.OutfitPartInfoViewData
// 0x0028 (0x0028 - 0x0000)
struct FOutfitPartInfoViewData final
{
public:
	ECustomizationCategory                        Category;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconPath;                                          // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DisplayName;                                       // 0x0018(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutfitPartInfoViewData) == 0x000008, "Wrong alignment on FOutfitPartInfoViewData");
static_assert(sizeof(FOutfitPartInfoViewData) == 0x000028, "Wrong size on FOutfitPartInfoViewData");
static_assert(offsetof(FOutfitPartInfoViewData, Category) == 0x000000, "Member 'FOutfitPartInfoViewData::Category' has a wrong offset!");
static_assert(offsetof(FOutfitPartInfoViewData, IconPath) == 0x000008, "Member 'FOutfitPartInfoViewData::IconPath' has a wrong offset!");
static_assert(offsetof(FOutfitPartInfoViewData, DisplayName) == 0x000018, "Member 'FOutfitPartInfoViewData::DisplayName' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.OutfitInfoViewData
// 0x0048 (0x0048 - 0x0000)
struct FOutfitInfoViewData final
{
public:
	bool                                          IsOutfit;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOutfitPart;                                      // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnbreakable;                                     // 0x0002(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOutfitPartInfoViewData>        OutfitComposition;                                 // 0x0008(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class FName                                   ParentId;                                          // 0x0018(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ParentName;                                        // 0x0028(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           ChildrenIds;                                       // 0x0038(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOutfitInfoViewData) == 0x000008, "Wrong alignment on FOutfitInfoViewData");
static_assert(sizeof(FOutfitInfoViewData) == 0x000048, "Wrong size on FOutfitInfoViewData");
static_assert(offsetof(FOutfitInfoViewData, IsOutfit) == 0x000000, "Member 'FOutfitInfoViewData::IsOutfit' has a wrong offset!");
static_assert(offsetof(FOutfitInfoViewData, IsOutfitPart) == 0x000001, "Member 'FOutfitInfoViewData::IsOutfitPart' has a wrong offset!");
static_assert(offsetof(FOutfitInfoViewData, IsUnbreakable) == 0x000002, "Member 'FOutfitInfoViewData::IsUnbreakable' has a wrong offset!");
static_assert(offsetof(FOutfitInfoViewData, OutfitComposition) == 0x000008, "Member 'FOutfitInfoViewData::OutfitComposition' has a wrong offset!");
static_assert(offsetof(FOutfitInfoViewData, ParentId) == 0x000018, "Member 'FOutfitInfoViewData::ParentId' has a wrong offset!");
static_assert(offsetof(FOutfitInfoViewData, ParentName) == 0x000028, "Member 'FOutfitInfoViewData::ParentName' has a wrong offset!");
static_assert(offsetof(FOutfitInfoViewData, ChildrenIds) == 0x000038, "Member 'FOutfitInfoViewData::ChildrenIds' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PerkRandomSuccessViewData
// 0x000C (0x000C - 0x0000)
struct FPerkRandomSuccessViewData final
{
public:
	float                                         RandomSuccessDuration;                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RandomSuccessValue;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPerkRandomSuccessType                        RandomSuccessType;                                 // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPerkRandomSuccessResult                      RandomSuccessResult;                               // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerkRandomSuccessViewData) == 0x000004, "Wrong alignment on FPerkRandomSuccessViewData");
static_assert(sizeof(FPerkRandomSuccessViewData) == 0x00000C, "Wrong size on FPerkRandomSuccessViewData");
static_assert(offsetof(FPerkRandomSuccessViewData, RandomSuccessDuration) == 0x000000, "Member 'FPerkRandomSuccessViewData::RandomSuccessDuration' has a wrong offset!");
static_assert(offsetof(FPerkRandomSuccessViewData, RandomSuccessValue) == 0x000004, "Member 'FPerkRandomSuccessViewData::RandomSuccessValue' has a wrong offset!");
static_assert(offsetof(FPerkRandomSuccessViewData, RandomSuccessType) == 0x000008, "Member 'FPerkRandomSuccessViewData::RandomSuccessType' has a wrong offset!");
static_assert(offsetof(FPerkRandomSuccessViewData, RandomSuccessResult) == 0x000009, "Member 'FPerkRandomSuccessViewData::RandomSuccessResult' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PlayerCardViewData
// 0x00A8 (0x00A8 - 0x0000)
struct FPlayerCardViewData final
{
public:
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0000(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SecondaryIcon;                                     // 0x0038(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   AnimationWidgetClass;                              // 0x0070(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerCardViewData) == 0x000008, "Wrong alignment on FPlayerCardViewData");
static_assert(sizeof(FPlayerCardViewData) == 0x0000A8, "Wrong size on FPlayerCardViewData");
static_assert(offsetof(FPlayerCardViewData, Icon) == 0x000000, "Member 'FPlayerCardViewData::Icon' has a wrong offset!");
static_assert(offsetof(FPlayerCardViewData, SecondaryIcon) == 0x000038, "Member 'FPlayerCardViewData::SecondaryIcon' has a wrong offset!");
static_assert(offsetof(FPlayerCardViewData, AnimationWidgetClass) == 0x000070, "Member 'FPlayerCardViewData::AnimationWidgetClass' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PlayerStatusViewData
// 0x0098 (0x0098 - 0x0000)
struct FPlayerStatusViewData final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PlayerPortraitIcon;                                // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             PlayerPortraitIconOverride;                        // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStatus                                 PlayerStatusState;                                 // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimerProgress;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeepWound;                                       // 0x0028(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBroken;                                          // 0x0029(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBot;                                             // 0x002A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayerAKiller;                                   // 0x002B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalPlayerAKiller;                              // 0x002C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActivityHidden;                                  // 0x002D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceShowActivity;                                 // 0x002E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EObsessionUIState                             ObsessionState;                                    // 0x002F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DrainStage;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConnectionQuality                            ConnectionQualityStatus;                           // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerStatusTemplate                         Template;                                          // 0x0035(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              CharacterClassIcon;                                // 0x0038(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UKillerStatusData*                      KillerStatusData;                                  // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CampProgress;                                      // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameType                                     GameType;                                          // 0x007C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EventBannerLabel;                                  // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEventIconShown;                                  // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlayerStatusViewData) == 0x000008, "Wrong alignment on FPlayerStatusViewData");
static_assert(sizeof(FPlayerStatusViewData) == 0x000098, "Wrong size on FPlayerStatusViewData");
static_assert(offsetof(FPlayerStatusViewData, PlayerName) == 0x000000, "Member 'FPlayerStatusViewData::PlayerName' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, PlayerPortraitIcon) == 0x000010, "Member 'FPlayerStatusViewData::PlayerPortraitIcon' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, PlayerPortraitIconOverride) == 0x000018, "Member 'FPlayerStatusViewData::PlayerPortraitIconOverride' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, PlayerStatusState) == 0x000020, "Member 'FPlayerStatusViewData::PlayerStatusState' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, TimerProgress) == 0x000024, "Member 'FPlayerStatusViewData::TimerProgress' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsDeepWound) == 0x000028, "Member 'FPlayerStatusViewData::IsDeepWound' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsBroken) == 0x000029, "Member 'FPlayerStatusViewData::IsBroken' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsBot) == 0x00002A, "Member 'FPlayerStatusViewData::IsBot' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsPlayerAKiller) == 0x00002B, "Member 'FPlayerStatusViewData::IsPlayerAKiller' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsLocalPlayerAKiller) == 0x00002C, "Member 'FPlayerStatusViewData::IsLocalPlayerAKiller' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsActivityHidden) == 0x00002D, "Member 'FPlayerStatusViewData::IsActivityHidden' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, ForceShowActivity) == 0x00002E, "Member 'FPlayerStatusViewData::ForceShowActivity' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, ObsessionState) == 0x00002F, "Member 'FPlayerStatusViewData::ObsessionState' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, DrainStage) == 0x000030, "Member 'FPlayerStatusViewData::DrainStage' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, ConnectionQualityStatus) == 0x000034, "Member 'FPlayerStatusViewData::ConnectionQualityStatus' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, Template) == 0x000035, "Member 'FPlayerStatusViewData::Template' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, CharacterClassIcon) == 0x000038, "Member 'FPlayerStatusViewData::CharacterClassIcon' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, KillerStatusData) == 0x000070, "Member 'FPlayerStatusViewData::KillerStatusData' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, CampProgress) == 0x000078, "Member 'FPlayerStatusViewData::CampProgress' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, GameType) == 0x00007C, "Member 'FPlayerStatusViewData::GameType' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, EventBannerLabel) == 0x000080, "Member 'FPlayerStatusViewData::EventBannerLabel' has a wrong offset!");
static_assert(offsetof(FPlayerStatusViewData, IsEventIconShown) == 0x000090, "Member 'FPlayerStatusViewData::IsEventIconShown' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PowerViewData
// 0x00C0 (0x0128 - 0x0068)
struct FPowerViewData final : public FBaseLoadoutPartViewData
{
public:
	struct FInteractionPromptViewData             InputData;                                         // 0x0068(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EProgressValueDisplayColor                    ProgressValueDisplayColor;                         // 0x0118(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeable;                                    // 0x0119(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActivated;                                       // 0x011A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11B[0x1];                                      // 0x011B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Count;                                             // 0x011C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressValue;                                     // 0x0120(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowKeyPrompt;                                     // 0x0124(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCountDisplayForced;                              // 0x0125(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAvailable;                                       // 0x0126(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_127[0x1];                                      // 0x0127(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPowerViewData) == 0x000008, "Wrong alignment on FPowerViewData");
static_assert(sizeof(FPowerViewData) == 0x000128, "Wrong size on FPowerViewData");
static_assert(offsetof(FPowerViewData, InputData) == 0x000068, "Member 'FPowerViewData::InputData' has a wrong offset!");
static_assert(offsetof(FPowerViewData, ProgressValueDisplayColor) == 0x000118, "Member 'FPowerViewData::ProgressValueDisplayColor' has a wrong offset!");
static_assert(offsetof(FPowerViewData, IsRechargeable) == 0x000119, "Member 'FPowerViewData::IsRechargeable' has a wrong offset!");
static_assert(offsetof(FPowerViewData, IsActivated) == 0x00011A, "Member 'FPowerViewData::IsActivated' has a wrong offset!");
static_assert(offsetof(FPowerViewData, Count) == 0x00011C, "Member 'FPowerViewData::Count' has a wrong offset!");
static_assert(offsetof(FPowerViewData, ProgressValue) == 0x000120, "Member 'FPowerViewData::ProgressValue' has a wrong offset!");
static_assert(offsetof(FPowerViewData, ShowKeyPrompt) == 0x000124, "Member 'FPowerViewData::ShowKeyPrompt' has a wrong offset!");
static_assert(offsetof(FPowerViewData, IsCountDisplayForced) == 0x000125, "Member 'FPowerViewData::IsCountDisplayForced' has a wrong offset!");
static_assert(offsetof(FPowerViewData, IsAvailable) == 0x000126, "Member 'FPowerViewData::IsAvailable' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PowerBundleViewData
// 0x0228 (0x0228 - 0x0000)
struct FPowerBundleViewData final
{
public:
	struct FPowerViewData                         MainPowerViewData;                                 // 0x0000(0x0128)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FPowerViewData>                 SecondaryPowerViewData;                            // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FPowerViewData>                 TertiaryPowerViewData;                             // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAddonViewData                         Addon1;                                            // 0x0148(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAddonViewData                         Addon2;                                            // 0x01B8(0x0070)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPowerBundleViewData) == 0x000008, "Wrong alignment on FPowerBundleViewData");
static_assert(sizeof(FPowerBundleViewData) == 0x000228, "Wrong size on FPowerBundleViewData");
static_assert(offsetof(FPowerBundleViewData, MainPowerViewData) == 0x000000, "Member 'FPowerBundleViewData::MainPowerViewData' has a wrong offset!");
static_assert(offsetof(FPowerBundleViewData, SecondaryPowerViewData) == 0x000128, "Member 'FPowerBundleViewData::SecondaryPowerViewData' has a wrong offset!");
static_assert(offsetof(FPowerBundleViewData, TertiaryPowerViewData) == 0x000138, "Member 'FPowerBundleViewData::TertiaryPowerViewData' has a wrong offset!");
static_assert(offsetof(FPowerBundleViewData, Addon1) == 0x000148, "Member 'FPowerBundleViewData::Addon1' has a wrong offset!");
static_assert(offsetof(FPowerBundleViewData, Addon2) == 0x0001B8, "Member 'FPowerBundleViewData::Addon2' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.PrestigeViewData
// 0x0008 (0x0008 - 0x0000)
struct FPrestigeViewData final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Progress;                                          // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrestigeViewData) == 0x000004, "Wrong alignment on FPrestigeViewData");
static_assert(sizeof(FPrestigeViewData) == 0x000008, "Wrong size on FPrestigeViewData");
static_assert(offsetof(FPrestigeViewData, Level) == 0x000000, "Member 'FPrestigeViewData::Level' has a wrong offset!");
static_assert(offsetof(FPrestigeViewData, Progress) == 0x000004, "Member 'FPrestigeViewData::Progress' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.RankTooltipViewData
// 0x0020 (0x0020 - 0x0000)
struct FRankTooltipViewData final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKiller;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RankName;                                          // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankPipsCount;                                     // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivePipsCount;                                   // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankTooltipViewData) == 0x000008, "Wrong alignment on FRankTooltipViewData");
static_assert(sizeof(FRankTooltipViewData) == 0x000020, "Wrong size on FRankTooltipViewData");
static_assert(offsetof(FRankTooltipViewData, Rank) == 0x000000, "Member 'FRankTooltipViewData::Rank' has a wrong offset!");
static_assert(offsetof(FRankTooltipViewData, IsKiller) == 0x000004, "Member 'FRankTooltipViewData::IsKiller' has a wrong offset!");
static_assert(offsetof(FRankTooltipViewData, RankName) == 0x000008, "Member 'FRankTooltipViewData::RankName' has a wrong offset!");
static_assert(offsetof(FRankTooltipViewData, RankPipsCount) == 0x000018, "Member 'FRankTooltipViewData::RankPipsCount' has a wrong offset!");
static_assert(offsetof(FRankTooltipViewData, ActivePipsCount) == 0x00001C, "Member 'FRankTooltipViewData::ActivePipsCount' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.RankViewData
// 0x0028 (0x0028 - 0x0000)
struct FRankViewData final
{
public:
	int32                                         Rank;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKiller;                                          // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRankTooltipViewData                   TooltipViewData;                                   // 0x0008(0x0020)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankViewData) == 0x000008, "Wrong alignment on FRankViewData");
static_assert(sizeof(FRankViewData) == 0x000028, "Wrong size on FRankViewData");
static_assert(offsetof(FRankViewData, Rank) == 0x000000, "Member 'FRankViewData::Rank' has a wrong offset!");
static_assert(offsetof(FRankViewData, IsKiller) == 0x000004, "Member 'FRankViewData::IsKiller' has a wrong offset!");
static_assert(offsetof(FRankViewData, TooltipViewData) == 0x000008, "Member 'FRankViewData::TooltipViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.ShrineOfSecretsViewData
// 0x0048 (0x0048 - 0x0000)
struct FShrineOfSecretsViewData final
{
public:
	struct FDateTime                              OfferDate;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDateTime                              EndDate;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FShrineOfSecretsItemViewData>   ItemsViewData;                                     // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          UseSpecialEventBackground;                         // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   EventBannerFrameLabel;                             // 0x0028(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	float                                         GlobalDiscountPercentage;                          // 0x0040(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FShrineOfSecretsViewData) == 0x000008, "Wrong alignment on FShrineOfSecretsViewData");
static_assert(sizeof(FShrineOfSecretsViewData) == 0x000048, "Wrong size on FShrineOfSecretsViewData");
static_assert(offsetof(FShrineOfSecretsViewData, OfferDate) == 0x000000, "Member 'FShrineOfSecretsViewData::OfferDate' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsViewData, EndDate) == 0x000008, "Member 'FShrineOfSecretsViewData::EndDate' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsViewData, ItemsViewData) == 0x000010, "Member 'FShrineOfSecretsViewData::ItemsViewData' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsViewData, UseSpecialEventBackground) == 0x000020, "Member 'FShrineOfSecretsViewData::UseSpecialEventBackground' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsViewData, EventBannerFrameLabel) == 0x000028, "Member 'FShrineOfSecretsViewData::EventBannerFrameLabel' has a wrong offset!");
static_assert(offsetof(FShrineOfSecretsViewData, GlobalDiscountPercentage) == 0x000040, "Member 'FShrineOfSecretsViewData::GlobalDiscountPercentage' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.SkillCheckViewData
// 0x0058 (0x0058 - 0x0000)
struct FSkillCheckViewData final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey2;                                         // 0x0020(0x0020)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitAreaStart;                                      // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitAreaLength;                                     // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusAreaStart;                                    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BonusAreaLength;                                   // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHexed;                                           // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpectating;                                      // 0x0051(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReversed;                                        // 0x0052(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMirrored;                                        // 0x0053(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInsane;                                          // 0x0054(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillCheckViewData) == 0x000008, "Wrong alignment on FSkillCheckViewData");
static_assert(sizeof(FSkillCheckViewData) == 0x000058, "Wrong size on FSkillCheckViewData");
static_assert(offsetof(FSkillCheckViewData, InputKey) == 0x000000, "Member 'FSkillCheckViewData::InputKey' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, InputKey2) == 0x000020, "Member 'FSkillCheckViewData::InputKey2' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, HitAreaStart) == 0x000040, "Member 'FSkillCheckViewData::HitAreaStart' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, HitAreaLength) == 0x000044, "Member 'FSkillCheckViewData::HitAreaLength' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, BonusAreaStart) == 0x000048, "Member 'FSkillCheckViewData::BonusAreaStart' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, BonusAreaLength) == 0x00004C, "Member 'FSkillCheckViewData::BonusAreaLength' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsHexed) == 0x000050, "Member 'FSkillCheckViewData::IsHexed' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsSpectating) == 0x000051, "Member 'FSkillCheckViewData::IsSpectating' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsReversed) == 0x000052, "Member 'FSkillCheckViewData::IsReversed' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsMirrored) == 0x000053, "Member 'FSkillCheckViewData::IsMirrored' has a wrong offset!");
static_assert(offsetof(FSkillCheckViewData, IsInsane) == 0x000054, "Member 'FSkillCheckViewData::IsInsane' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.SkillUnlockedNotificationViewData
// 0x0050 (0x0050 - 0x0000)
struct FSkillUnlockedNotificationViewData final
{
public:
	class FText                                   SkillDescription;                                  // 0x0000(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              SkillIcon;                                         // 0x0018(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkillUnlockedNotificationViewData) == 0x000008, "Wrong alignment on FSkillUnlockedNotificationViewData");
static_assert(sizeof(FSkillUnlockedNotificationViewData) == 0x000050, "Wrong size on FSkillUnlockedNotificationViewData");
static_assert(offsetof(FSkillUnlockedNotificationViewData, SkillDescription) == 0x000000, "Member 'FSkillUnlockedNotificationViewData::SkillDescription' has a wrong offset!");
static_assert(offsetof(FSkillUnlockedNotificationViewData, SkillIcon) == 0x000018, "Member 'FSkillUnlockedNotificationViewData::SkillIcon' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.SkillViewData
// 0x0008 (0x0070 - 0x0068)
struct FSkillViewData final : public FBaseLoadoutPartViewData
{
public:
	bool                                          IsUnlockable;                                      // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocked;                                          // 0x0069(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EStatusEffectType                             StatusEffectType;                                  // 0x006A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeable;                                    // 0x006B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeableActive;                              // 0x006C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkillViewData) == 0x000008, "Wrong alignment on FSkillViewData");
static_assert(sizeof(FSkillViewData) == 0x000070, "Wrong size on FSkillViewData");
static_assert(offsetof(FSkillViewData, IsUnlockable) == 0x000068, "Member 'FSkillViewData::IsUnlockable' has a wrong offset!");
static_assert(offsetof(FSkillViewData, IsLocked) == 0x000069, "Member 'FSkillViewData::IsLocked' has a wrong offset!");
static_assert(offsetof(FSkillViewData, StatusEffectType) == 0x00006A, "Member 'FSkillViewData::StatusEffectType' has a wrong offset!");
static_assert(offsetof(FSkillViewData, IsRechargeable) == 0x00006B, "Member 'FSkillViewData::IsRechargeable' has a wrong offset!");
static_assert(offsetof(FSkillViewData, IsRechargeableActive) == 0x00006C, "Member 'FSkillViewData::IsRechargeableActive' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.SpecialEventInfoViewData
// 0x0060 (0x0060 - 0x0000)
struct FSpecialEventInfoViewData final
{
public:
	class FString                                 EventID;                                           // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventBannerFrameLabel;                             // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventThemeFrameLabel;                              // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   EventName;                                         // 0x0030(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          IsPastEvent;                                       // 0x0048(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLTE;                                             // 0x0049(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BloodwebCollectSoundEvent;                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventInfoViewData) == 0x000008, "Wrong alignment on FSpecialEventInfoViewData");
static_assert(sizeof(FSpecialEventInfoViewData) == 0x000060, "Wrong size on FSpecialEventInfoViewData");
static_assert(offsetof(FSpecialEventInfoViewData, EventID) == 0x000000, "Member 'FSpecialEventInfoViewData::EventID' has a wrong offset!");
static_assert(offsetof(FSpecialEventInfoViewData, EventBannerFrameLabel) == 0x000010, "Member 'FSpecialEventInfoViewData::EventBannerFrameLabel' has a wrong offset!");
static_assert(offsetof(FSpecialEventInfoViewData, EventThemeFrameLabel) == 0x000020, "Member 'FSpecialEventInfoViewData::EventThemeFrameLabel' has a wrong offset!");
static_assert(offsetof(FSpecialEventInfoViewData, EventName) == 0x000030, "Member 'FSpecialEventInfoViewData::EventName' has a wrong offset!");
static_assert(offsetof(FSpecialEventInfoViewData, IsPastEvent) == 0x000048, "Member 'FSpecialEventInfoViewData::IsPastEvent' has a wrong offset!");
static_assert(offsetof(FSpecialEventInfoViewData, IsLTE) == 0x000049, "Member 'FSpecialEventInfoViewData::IsLTE' has a wrong offset!");
static_assert(offsetof(FSpecialEventInfoViewData, BloodwebCollectSoundEvent) == 0x000050, "Member 'FSpecialEventInfoViewData::BloodwebCollectSoundEvent' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.SpecialEventLoadingScreenViewData
// 0x0038 (0x0038 - 0x0000)
struct FSpecialEventLoadingScreenViewData final
{
public:
	TSoftObjectPtr<class UMenuSkinDataAsset>      MenuSkinData;                                      // 0x0000(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventLoadingScreenViewData) == 0x000008, "Wrong alignment on FSpecialEventLoadingScreenViewData");
static_assert(sizeof(FSpecialEventLoadingScreenViewData) == 0x000038, "Wrong size on FSpecialEventLoadingScreenViewData");
static_assert(offsetof(FSpecialEventLoadingScreenViewData, MenuSkinData) == 0x000000, "Member 'FSpecialEventLoadingScreenViewData::MenuSkinData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.SpecialEventLoadingScreenWidgetData
// 0x0040 (0x0048 - 0x0008)
struct FSpecialEventLoadingScreenWidgetData final : public FDBDTableRowBase
{
public:
	TSubclassOf<class UUserWidget>                SpecialEventLoadingScreenWidget;                   // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpecialEventLoadingScreenViewData     SpecialEventLoadingScreenViewData;                 // 0x0010(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventLoadingScreenWidgetData) == 0x000008, "Wrong alignment on FSpecialEventLoadingScreenWidgetData");
static_assert(sizeof(FSpecialEventLoadingScreenWidgetData) == 0x000048, "Wrong size on FSpecialEventLoadingScreenWidgetData");
static_assert(offsetof(FSpecialEventLoadingScreenWidgetData, SpecialEventLoadingScreenWidget) == 0x000008, "Member 'FSpecialEventLoadingScreenWidgetData::SpecialEventLoadingScreenWidget' has a wrong offset!");
static_assert(offsetof(FSpecialEventLoadingScreenWidgetData, SpecialEventLoadingScreenViewData) == 0x000010, "Member 'FSpecialEventLoadingScreenWidgetData::SpecialEventLoadingScreenViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StartSequenceViewData
// 0x0028 (0x0028 - 0x0000)
struct FStartSequenceViewData final
{
public:
	class FString                                 ThemeName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EThemeColorId                                 ThemeColorId;                                      // 0x0020(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStartSequenceViewData) == 0x000008, "Wrong alignment on FStartSequenceViewData");
static_assert(sizeof(FStartSequenceViewData) == 0x000028, "Wrong size on FStartSequenceViewData");
static_assert(offsetof(FStartSequenceViewData, ThemeName) == 0x000000, "Member 'FStartSequenceViewData::ThemeName' has a wrong offset!");
static_assert(offsetof(FStartSequenceViewData, MapName) == 0x000010, "Member 'FStartSequenceViewData::MapName' has a wrong offset!");
static_assert(offsetof(FStartSequenceViewData, ThemeColorId) == 0x000020, "Member 'FStartSequenceViewData::ThemeColorId' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreArchiveFragmentViewData
// 0x0158 (0x0158 - 0x0000)
struct FStoreArchiveFragmentViewData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArchiveId;                                         // 0x0010(0x000C)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x001C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurrencyProgressionTooltipViewData    TooltipData;                                       // 0x0020(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0120(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreArchiveFragmentViewData) == 0x000008, "Wrong alignment on FStoreArchiveFragmentViewData");
static_assert(sizeof(FStoreArchiveFragmentViewData) == 0x000158, "Wrong size on FStoreArchiveFragmentViewData");
static_assert(offsetof(FStoreArchiveFragmentViewData, ID) == 0x000000, "Member 'FStoreArchiveFragmentViewData::ID' has a wrong offset!");
static_assert(offsetof(FStoreArchiveFragmentViewData, ArchiveId) == 0x000010, "Member 'FStoreArchiveFragmentViewData::ArchiveId' has a wrong offset!");
static_assert(offsetof(FStoreArchiveFragmentViewData, Amount) == 0x00001C, "Member 'FStoreArchiveFragmentViewData::Amount' has a wrong offset!");
static_assert(offsetof(FStoreArchiveFragmentViewData, TooltipData) == 0x000020, "Member 'FStoreArchiveFragmentViewData::TooltipData' has a wrong offset!");
static_assert(offsetof(FStoreArchiveFragmentViewData, Icon) == 0x000120, "Member 'FStoreArchiveFragmentViewData::Icon' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreArchivePassViewData
// 0x0158 (0x0158 - 0x0000)
struct FStoreArchivePassViewData final
{
public:
	class FString                                 PassId;                                            // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ArchiveId;                                         // 0x0010(0x000C)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemName;                                          // 0x0020(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   ArchiveTitle;                                      // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FArchivePassTooltipViewData            TooltipData;                                       // 0x0050(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerFlagViewData                     TimerFlagViewData;                                 // 0x00F0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0120(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreArchivePassViewData) == 0x000008, "Wrong alignment on FStoreArchivePassViewData");
static_assert(sizeof(FStoreArchivePassViewData) == 0x000158, "Wrong size on FStoreArchivePassViewData");
static_assert(offsetof(FStoreArchivePassViewData, PassId) == 0x000000, "Member 'FStoreArchivePassViewData::PassId' has a wrong offset!");
static_assert(offsetof(FStoreArchivePassViewData, ArchiveId) == 0x000010, "Member 'FStoreArchivePassViewData::ArchiveId' has a wrong offset!");
static_assert(offsetof(FStoreArchivePassViewData, ItemName) == 0x000020, "Member 'FStoreArchivePassViewData::ItemName' has a wrong offset!");
static_assert(offsetof(FStoreArchivePassViewData, ArchiveTitle) == 0x000038, "Member 'FStoreArchivePassViewData::ArchiveTitle' has a wrong offset!");
static_assert(offsetof(FStoreArchivePassViewData, TooltipData) == 0x000050, "Member 'FStoreArchivePassViewData::TooltipData' has a wrong offset!");
static_assert(offsetof(FStoreArchivePassViewData, IsOwned) == 0x0000E8, "Member 'FStoreArchivePassViewData::IsOwned' has a wrong offset!");
static_assert(offsetof(FStoreArchivePassViewData, TimerFlagViewData) == 0x0000F0, "Member 'FStoreArchivePassViewData::TimerFlagViewData' has a wrong offset!");
static_assert(offsetof(FStoreArchivePassViewData, Icon) == 0x000120, "Member 'FStoreArchivePassViewData::Icon' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreCategoryViewData
// 0x0060 (0x0060 - 0x0000)
struct FStoreCategoryViewData final
{
public:
	ECustomizationCategory                        Category;                                          // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Icon;                                              // 0x0008(0x0038)(Edit, BlueprintVisible, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0040(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	bool                                          HasNewCustomizationSelected;                       // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoreCategoryViewData) == 0x000008, "Wrong alignment on FStoreCategoryViewData");
static_assert(sizeof(FStoreCategoryViewData) == 0x000060, "Wrong size on FStoreCategoryViewData");
static_assert(offsetof(FStoreCategoryViewData, Category) == 0x000000, "Member 'FStoreCategoryViewData::Category' has a wrong offset!");
static_assert(offsetof(FStoreCategoryViewData, Icon) == 0x000008, "Member 'FStoreCategoryViewData::Icon' has a wrong offset!");
static_assert(offsetof(FStoreCategoryViewData, DisplayName) == 0x000040, "Member 'FStoreCategoryViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FStoreCategoryViewData, HasNewCustomizationSelected) == 0x000058, "Member 'FStoreCategoryViewData::HasNewCustomizationSelected' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreCharactersCustomizationsViewData
// 0x0058 (0x0058 - 0x0000)
struct FStoreCharactersCustomizationsViewData final
{
public:
	TArray<class UStoreCustomizationItemViewData*> Customizations;                                    // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UStoreCustomizationItemViewData*> SelectedCustomizations;                            // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         SelectedSlotIndex;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStoreCategoryViewData>         Categories;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	ECustomizationCategory                        SelectedCategory;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 PresetIds;                                         // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         SelectedPresetId;                                  // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoreCharactersCustomizationsViewData) == 0x000008, "Wrong alignment on FStoreCharactersCustomizationsViewData");
static_assert(sizeof(FStoreCharactersCustomizationsViewData) == 0x000058, "Wrong size on FStoreCharactersCustomizationsViewData");
static_assert(offsetof(FStoreCharactersCustomizationsViewData, Customizations) == 0x000000, "Member 'FStoreCharactersCustomizationsViewData::Customizations' has a wrong offset!");
static_assert(offsetof(FStoreCharactersCustomizationsViewData, SelectedCustomizations) == 0x000010, "Member 'FStoreCharactersCustomizationsViewData::SelectedCustomizations' has a wrong offset!");
static_assert(offsetof(FStoreCharactersCustomizationsViewData, SelectedSlotIndex) == 0x000020, "Member 'FStoreCharactersCustomizationsViewData::SelectedSlotIndex' has a wrong offset!");
static_assert(offsetof(FStoreCharactersCustomizationsViewData, Categories) == 0x000028, "Member 'FStoreCharactersCustomizationsViewData::Categories' has a wrong offset!");
static_assert(offsetof(FStoreCharactersCustomizationsViewData, SelectedCategory) == 0x000038, "Member 'FStoreCharactersCustomizationsViewData::SelectedCategory' has a wrong offset!");
static_assert(offsetof(FStoreCharactersCustomizationsViewData, PresetIds) == 0x000040, "Member 'FStoreCharactersCustomizationsViewData::PresetIds' has a wrong offset!");
static_assert(offsetof(FStoreCharactersCustomizationsViewData, SelectedPresetId) == 0x000050, "Member 'FStoreCharactersCustomizationsViewData::SelectedPresetId' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreCharactersSelectionViewData
// 0x0018 (0x0018 - 0x0000)
struct FStoreCharactersSelectionViewData final
{
public:
	TArray<class UStoreCharacterItemViewData*>    Characters;                                        // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         SelectedCharacterIndex;                            // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoreCharactersSelectionViewData) == 0x000008, "Wrong alignment on FStoreCharactersSelectionViewData");
static_assert(sizeof(FStoreCharactersSelectionViewData) == 0x000018, "Wrong size on FStoreCharactersSelectionViewData");
static_assert(offsetof(FStoreCharactersSelectionViewData, Characters) == 0x000000, "Member 'FStoreCharactersSelectionViewData::Characters' has a wrong offset!");
static_assert(offsetof(FStoreCharactersSelectionViewData, SelectedCharacterIndex) == 0x000010, "Member 'FStoreCharactersSelectionViewData::SelectedCharacterIndex' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreFeaturedCharacterViewData
// 0x0090 (0x0090 - 0x0000)
struct FStoreFeaturedCharacterViewData final
{
public:
	int32                                         CharacterIndex;                                    // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   PlayerRole;                                        // 0x0004(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftRemoteContentCacheObjectPtr       CharacterPortrait;                                 // 0x0008(0x0070)(Edit, BlueprintVisible, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CharacterName;                                     // 0x0078(0x0018)(Edit, BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreFeaturedCharacterViewData) == 0x000008, "Wrong alignment on FStoreFeaturedCharacterViewData");
static_assert(sizeof(FStoreFeaturedCharacterViewData) == 0x000090, "Wrong size on FStoreFeaturedCharacterViewData");
static_assert(offsetof(FStoreFeaturedCharacterViewData, CharacterIndex) == 0x000000, "Member 'FStoreFeaturedCharacterViewData::CharacterIndex' has a wrong offset!");
static_assert(offsetof(FStoreFeaturedCharacterViewData, PlayerRole) == 0x000004, "Member 'FStoreFeaturedCharacterViewData::PlayerRole' has a wrong offset!");
static_assert(offsetof(FStoreFeaturedCharacterViewData, CharacterPortrait) == 0x000008, "Member 'FStoreFeaturedCharacterViewData::CharacterPortrait' has a wrong offset!");
static_assert(offsetof(FStoreFeaturedCharacterViewData, CharacterName) == 0x000078, "Member 'FStoreFeaturedCharacterViewData::CharacterName' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreHeritagePackViewData
// 0x0090 (0x0090 - 0x0000)
struct FStoreHeritagePackViewData final
{
public:
	class FString                                 HeritageId;                                        // 0x0000(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   DisplayName;                                       // 0x0010(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   Description;                                       // 0x0028(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UTexture2D>              PackImage;                                         // 0x0040(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStoreChapterPackViewData*>      ChapterPacks;                                      // 0x0078(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         SortOrder;                                         // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNew;                                             // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOwned;                                           // 0x008D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E[0x2];                                       // 0x008E(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStoreHeritagePackViewData) == 0x000008, "Wrong alignment on FStoreHeritagePackViewData");
static_assert(sizeof(FStoreHeritagePackViewData) == 0x000090, "Wrong size on FStoreHeritagePackViewData");
static_assert(offsetof(FStoreHeritagePackViewData, HeritageId) == 0x000000, "Member 'FStoreHeritagePackViewData::HeritageId' has a wrong offset!");
static_assert(offsetof(FStoreHeritagePackViewData, DisplayName) == 0x000010, "Member 'FStoreHeritagePackViewData::DisplayName' has a wrong offset!");
static_assert(offsetof(FStoreHeritagePackViewData, Description) == 0x000028, "Member 'FStoreHeritagePackViewData::Description' has a wrong offset!");
static_assert(offsetof(FStoreHeritagePackViewData, PackImage) == 0x000040, "Member 'FStoreHeritagePackViewData::PackImage' has a wrong offset!");
static_assert(offsetof(FStoreHeritagePackViewData, ChapterPacks) == 0x000078, "Member 'FStoreHeritagePackViewData::ChapterPacks' has a wrong offset!");
static_assert(offsetof(FStoreHeritagePackViewData, SortOrder) == 0x000088, "Member 'FStoreHeritagePackViewData::SortOrder' has a wrong offset!");
static_assert(offsetof(FStoreHeritagePackViewData, IsNew) == 0x00008C, "Member 'FStoreHeritagePackViewData::IsNew' has a wrong offset!");
static_assert(offsetof(FStoreHeritagePackViewData, IsOwned) == 0x00008D, "Member 'FStoreHeritagePackViewData::IsOwned' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.StoreMysteryBoxViewData
// 0x0028 (0x0028 - 0x0000)
struct FStoreMysteryBoxViewData final
{
public:
	bool                                          CanClaimCurrentBox;                                // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasNextBoxToClaim;                                 // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              NextAvailableAtTime;                               // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasPreviousClaimedBox;                             // 0x0010(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              PreviousClaimTime;                                 // 0x0018(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMysteryBoxPreviousReward*              Reward;                                            // 0x0020(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreMysteryBoxViewData) == 0x000008, "Wrong alignment on FStoreMysteryBoxViewData");
static_assert(sizeof(FStoreMysteryBoxViewData) == 0x000028, "Wrong size on FStoreMysteryBoxViewData");
static_assert(offsetof(FStoreMysteryBoxViewData, CanClaimCurrentBox) == 0x000000, "Member 'FStoreMysteryBoxViewData::CanClaimCurrentBox' has a wrong offset!");
static_assert(offsetof(FStoreMysteryBoxViewData, HasNextBoxToClaim) == 0x000001, "Member 'FStoreMysteryBoxViewData::HasNextBoxToClaim' has a wrong offset!");
static_assert(offsetof(FStoreMysteryBoxViewData, NextAvailableAtTime) == 0x000008, "Member 'FStoreMysteryBoxViewData::NextAvailableAtTime' has a wrong offset!");
static_assert(offsetof(FStoreMysteryBoxViewData, HasPreviousClaimedBox) == 0x000010, "Member 'FStoreMysteryBoxViewData::HasPreviousClaimedBox' has a wrong offset!");
static_assert(offsetof(FStoreMysteryBoxViewData, PreviousClaimTime) == 0x000018, "Member 'FStoreMysteryBoxViewData::PreviousClaimTime' has a wrong offset!");
static_assert(offsetof(FStoreMysteryBoxViewData, Reward) == 0x000020, "Member 'FStoreMysteryBoxViewData::Reward' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.TallyPlayerStatusViewData
// 0x0200 (0x0200 - 0x0000)
struct FTallyPlayerStatusViewData final
{
public:
	class FName                                   CharacterIconPath;                                 // 0x0000(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PlayerId;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlatformAccountId;                                 // 0x0020(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MirrorsId;                                         // 0x0030(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerScore;                                       // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    PlayerStatus;                                      // 0x0064(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULoadoutMenuViewData*                   OfferingData;                                      // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULoadoutMenuViewData*>           PerksData;                                         // 0x0070(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class ULoadoutMenuViewData*                   ItemData;                                          // 0x0080(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ULoadoutMenuViewData*>           AddonsData;                                        // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class UMenuClassViewData*                     ClassData;                                         // 0x0098(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPrestigeViewData                      PrestigeData;                                      // 0x00A0(0x0008)(BlueprintVisible, Transient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          IsReported;                                        // 0x00A8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKiller;                                          // 0x00A9(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMyScore;                                         // 0x00AA(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOffNetwork;                                      // 0x00AB(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowPortraitBorder;                                // 0x00AC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsABot;                                            // 0x00AD(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE[0x2];                                       // 0x00AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerCardViewData                    EquippedBanner;                                    // 0x00B0(0x00A8)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	struct FPlayerCardViewData                    EquippedBadge;                                     // 0x0158(0x00A8)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTallyPlayerStatusViewData) == 0x000008, "Wrong alignment on FTallyPlayerStatusViewData");
static_assert(sizeof(FTallyPlayerStatusViewData) == 0x000200, "Wrong size on FTallyPlayerStatusViewData");
static_assert(offsetof(FTallyPlayerStatusViewData, CharacterIconPath) == 0x000000, "Member 'FTallyPlayerStatusViewData::CharacterIconPath' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, PlayerId) == 0x000010, "Member 'FTallyPlayerStatusViewData::PlayerId' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, PlatformAccountId) == 0x000020, "Member 'FTallyPlayerStatusViewData::PlatformAccountId' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, MirrorsId) == 0x000030, "Member 'FTallyPlayerStatusViewData::MirrorsId' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, PlayerName) == 0x000040, "Member 'FTallyPlayerStatusViewData::PlayerName' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, CharacterName) == 0x000050, "Member 'FTallyPlayerStatusViewData::CharacterName' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, PlayerScore) == 0x000060, "Member 'FTallyPlayerStatusViewData::PlayerScore' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, PlayerStatus) == 0x000064, "Member 'FTallyPlayerStatusViewData::PlayerStatus' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, OfferingData) == 0x000068, "Member 'FTallyPlayerStatusViewData::OfferingData' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, PerksData) == 0x000070, "Member 'FTallyPlayerStatusViewData::PerksData' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, ItemData) == 0x000080, "Member 'FTallyPlayerStatusViewData::ItemData' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, AddonsData) == 0x000088, "Member 'FTallyPlayerStatusViewData::AddonsData' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, ClassData) == 0x000098, "Member 'FTallyPlayerStatusViewData::ClassData' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, PrestigeData) == 0x0000A0, "Member 'FTallyPlayerStatusViewData::PrestigeData' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, IsReported) == 0x0000A8, "Member 'FTallyPlayerStatusViewData::IsReported' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, IsKiller) == 0x0000A9, "Member 'FTallyPlayerStatusViewData::IsKiller' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, IsMyScore) == 0x0000AA, "Member 'FTallyPlayerStatusViewData::IsMyScore' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, IsOffNetwork) == 0x0000AB, "Member 'FTallyPlayerStatusViewData::IsOffNetwork' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, ShowPortraitBorder) == 0x0000AC, "Member 'FTallyPlayerStatusViewData::ShowPortraitBorder' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, IsABot) == 0x0000AD, "Member 'FTallyPlayerStatusViewData::IsABot' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, EquippedBanner) == 0x0000B0, "Member 'FTallyPlayerStatusViewData::EquippedBanner' has a wrong offset!");
static_assert(offsetof(FTallyPlayerStatusViewData, EquippedBadge) == 0x000158, "Member 'FTallyPlayerStatusViewData::EquippedBadge' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.TemplateViewData
// 0x0001 (0x0001 - 0x0000)
struct FTemplateViewData final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTemplateViewData) == 0x000001, "Wrong alignment on FTemplateViewData");
static_assert(sizeof(FTemplateViewData) == 0x000001, "Wrong size on FTemplateViewData");

// ScriptStruct DBDUIViewInterfaces.TutorialObjectivesViewData
// 0x0170 (0x0170 - 0x0000)
struct FTutorialObjectivesViewData final
{
public:
	class FString                                 Description;                                       // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInteractionPromptViewData             PrimaryInteractionPromptViewData;                  // 0x0010(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FInteractionPromptViewData             SecondaryInteractionPromptViewData;                // 0x00C0(0x00B0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTutorialObjectivesViewData) == 0x000008, "Wrong alignment on FTutorialObjectivesViewData");
static_assert(sizeof(FTutorialObjectivesViewData) == 0x000170, "Wrong size on FTutorialObjectivesViewData");
static_assert(offsetof(FTutorialObjectivesViewData, Description) == 0x000000, "Member 'FTutorialObjectivesViewData::Description' has a wrong offset!");
static_assert(offsetof(FTutorialObjectivesViewData, PrimaryInteractionPromptViewData) == 0x000010, "Member 'FTutorialObjectivesViewData::PrimaryInteractionPromptViewData' has a wrong offset!");
static_assert(offsetof(FTutorialObjectivesViewData, SecondaryInteractionPromptViewData) == 0x0000C0, "Member 'FTutorialObjectivesViewData::SecondaryInteractionPromptViewData' has a wrong offset!");

// ScriptStruct DBDUIViewInterfaces.WardrobeActionButtonsViewData
// 0x0080 (0x0080 - 0x0000)
struct FWardrobeActionButtonsViewData final
{
public:
	EWardrobeActionButtonState                    UnlockButtonState;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWardrobeActionButtonState                    EquipButtonState;                                  // 0x0001(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWardrobeActionButtonState                    EquipAllButtonState;                               // 0x0002(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWardrobeActionButtonState                    SelectAllButtonState;                              // 0x0003(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWardrobeActionButtonState                    ZoomCharmButtonState;                              // 0x0004(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWardrobeActionButtonState                    PlayMoriButtonState;                               // 0x0005(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWardrobeActionButtonState                    SecondPlayMoriButtonState;                         // 0x0006(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPriceTagViewData>              PriceTagData;                                      // 0x0008(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FStoreItemUnlockInfoViewData           UnlockInfo;                                        // 0x0018(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          IsOutfit;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnbreakable;                                     // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCharmZoomed;                                     // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCustomization;                                   // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IgnoreGamepadOnUnlockButton;                       // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   SecondMoriSpecificName;                            // 0x0050(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class FText                                   WarningMessage;                                    // 0x0068(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWardrobeActionButtonsViewData) == 0x000008, "Wrong alignment on FWardrobeActionButtonsViewData");
static_assert(sizeof(FWardrobeActionButtonsViewData) == 0x000080, "Wrong size on FWardrobeActionButtonsViewData");
static_assert(offsetof(FWardrobeActionButtonsViewData, UnlockButtonState) == 0x000000, "Member 'FWardrobeActionButtonsViewData::UnlockButtonState' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, EquipButtonState) == 0x000001, "Member 'FWardrobeActionButtonsViewData::EquipButtonState' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, EquipAllButtonState) == 0x000002, "Member 'FWardrobeActionButtonsViewData::EquipAllButtonState' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, SelectAllButtonState) == 0x000003, "Member 'FWardrobeActionButtonsViewData::SelectAllButtonState' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, ZoomCharmButtonState) == 0x000004, "Member 'FWardrobeActionButtonsViewData::ZoomCharmButtonState' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, PlayMoriButtonState) == 0x000005, "Member 'FWardrobeActionButtonsViewData::PlayMoriButtonState' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, SecondPlayMoriButtonState) == 0x000006, "Member 'FWardrobeActionButtonsViewData::SecondPlayMoriButtonState' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, PriceTagData) == 0x000008, "Member 'FWardrobeActionButtonsViewData::PriceTagData' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, UnlockInfo) == 0x000018, "Member 'FWardrobeActionButtonsViewData::UnlockInfo' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, IsOutfit) == 0x000048, "Member 'FWardrobeActionButtonsViewData::IsOutfit' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, IsUnbreakable) == 0x000049, "Member 'FWardrobeActionButtonsViewData::IsUnbreakable' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, IsCharmZoomed) == 0x00004A, "Member 'FWardrobeActionButtonsViewData::IsCharmZoomed' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, IsCustomization) == 0x00004B, "Member 'FWardrobeActionButtonsViewData::IsCustomization' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, IgnoreGamepadOnUnlockButton) == 0x00004C, "Member 'FWardrobeActionButtonsViewData::IgnoreGamepadOnUnlockButton' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, SecondMoriSpecificName) == 0x000050, "Member 'FWardrobeActionButtonsViewData::SecondMoriSpecificName' has a wrong offset!");
static_assert(offsetof(FWardrobeActionButtonsViewData, WarningMessage) == 0x000068, "Member 'FWardrobeActionButtonsViewData::WarningMessage' has a wrong offset!");

}

