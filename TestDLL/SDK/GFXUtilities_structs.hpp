#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GFXUtilities

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum GFXUtilities.EMaterialOverrideParameterCopyType
// NumValues: 0x0005
enum class EMaterialOverrideParameterCopyType : uint8
{
	ChildOverrideOnly                        = 0,
	HierarchyQuickParamOnly                  = 1,
	HierarchyAll                             = 2,
	NoOverride                               = 3,
	EMaterialOverrideParameterCopyType_MAX   = 4,
};

// Enum GFXUtilities.EMaterialOverridePriority
// NumValues: 0x0004
enum class EMaterialOverridePriority : uint8
{
	P0                                       = 0,
	P1                                       = 1,
	P2                                       = 2,
	EMaterialOverridePriority_MAX            = 3,
};

// ScriptStruct GFXUtilities.MaterialMap
// 0x0010 (0x0010 - 0x0000)
struct FMaterialMap final
{
public:
	class UMaterialInterface*                     SrcMaterial;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DstMaterial;                                       // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialMap) == 0x000008, "Wrong alignment on FMaterialMap");
static_assert(sizeof(FMaterialMap) == 0x000010, "Wrong size on FMaterialMap");
static_assert(offsetof(FMaterialMap, SrcMaterial) == 0x000000, "Member 'FMaterialMap::SrcMaterial' has a wrong offset!");
static_assert(offsetof(FMaterialMap, DstMaterial) == 0x000008, "Member 'FMaterialMap::DstMaterial' has a wrong offset!");

// ScriptStruct GFXUtilities.MaterialNamedGroup
// 0x0020 (0x0020 - 0x0000)
struct FMaterialNamedGroup final
{
public:
	class FString                                 GroupName;                                         // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMaterialMap>                   Maps;                                              // 0x0010(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialNamedGroup) == 0x000008, "Wrong alignment on FMaterialNamedGroup");
static_assert(sizeof(FMaterialNamedGroup) == 0x000020, "Wrong size on FMaterialNamedGroup");
static_assert(offsetof(FMaterialNamedGroup, GroupName) == 0x000000, "Member 'FMaterialNamedGroup::GroupName' has a wrong offset!");
static_assert(offsetof(FMaterialNamedGroup, Maps) == 0x000010, "Member 'FMaterialNamedGroup::Maps' has a wrong offset!");

// ScriptStruct GFXUtilities.DBDCullDistanceSizePair
// 0x0008 (0x0008 - 0x0000)
struct FDBDCullDistanceSizePair final
{
public:
	struct FPerPlatformFloat                      Size;                                              // 0x0000(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FPerPlatformFloat                      CullDistance;                                      // 0x0004(0x0004)(Edit, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDBDCullDistanceSizePair) == 0x000004, "Wrong alignment on FDBDCullDistanceSizePair");
static_assert(sizeof(FDBDCullDistanceSizePair) == 0x000008, "Wrong size on FDBDCullDistanceSizePair");
static_assert(offsetof(FDBDCullDistanceSizePair, Size) == 0x000000, "Member 'FDBDCullDistanceSizePair::Size' has a wrong offset!");
static_assert(offsetof(FDBDCullDistanceSizePair, CullDistance) == 0x000004, "Member 'FDBDCullDistanceSizePair::CullDistance' has a wrong offset!");

// ScriptStruct GFXUtilities.MaterialHelperOriginalMeshState
// 0x0048 (0x0048 - 0x0000)
struct FMaterialHelperOriginalMeshState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             _originalMaterials;                                // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             _originalDynamicMaterials;                         // 0x0018(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_28[0x20];                                      // 0x0028(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMaterialHelperOriginalMeshState) == 0x000008, "Wrong alignment on FMaterialHelperOriginalMeshState");
static_assert(sizeof(FMaterialHelperOriginalMeshState) == 0x000048, "Wrong size on FMaterialHelperOriginalMeshState");
static_assert(offsetof(FMaterialHelperOriginalMeshState, _originalMaterials) == 0x000008, "Member 'FMaterialHelperOriginalMeshState::_originalMaterials' has a wrong offset!");
static_assert(offsetof(FMaterialHelperOriginalMeshState, _originalDynamicMaterials) == 0x000018, "Member 'FMaterialHelperOriginalMeshState::_originalDynamicMaterials' has a wrong offset!");

// ScriptStruct GFXUtilities.LightMaterialUpdate
// 0x0018 (0x0018 - 0x0000)
struct FLightMaterialUpdate final
{
public:
	class UMaterialHelper*                        Material;                                          // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0008(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0014(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLightMaterialUpdate) == 0x000008, "Wrong alignment on FLightMaterialUpdate");
static_assert(sizeof(FLightMaterialUpdate) == 0x000018, "Wrong size on FLightMaterialUpdate");
static_assert(offsetof(FLightMaterialUpdate, Material) == 0x000000, "Member 'FLightMaterialUpdate::Material' has a wrong offset!");
static_assert(offsetof(FLightMaterialUpdate, PropertyName) == 0x000008, "Member 'FLightMaterialUpdate::PropertyName' has a wrong offset!");
static_assert(offsetof(FLightMaterialUpdate, Multiplier) == 0x000014, "Member 'FLightMaterialUpdate::Multiplier' has a wrong offset!");

// ScriptStruct GFXUtilities.LightUpdate
// 0x0010 (0x0010 - 0x0000)
struct FLightUpdate final
{
public:
	class ULightComponent*                        Light;                                             // 0x0000(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLightUpdate) == 0x000008, "Wrong alignment on FLightUpdate");
static_assert(sizeof(FLightUpdate) == 0x000010, "Wrong size on FLightUpdate");
static_assert(offsetof(FLightUpdate, Light) == 0x000000, "Member 'FLightUpdate::Light' has a wrong offset!");
static_assert(offsetof(FLightUpdate, Multiplier) == 0x000008, "Member 'FLightUpdate::Multiplier' has a wrong offset!");

// ScriptStruct GFXUtilities.MaterialHelperVariantGroup
// 0x0050 (0x0058 - 0x0008)
struct FMaterialHelperVariantGroup final : public FDBDTableRowBase
{
public:
	TMap<TSoftObjectPtr<class UMaterialInterface>, TSoftObjectPtr<class UMaterialInterface>> VariantMaps;                                       // 0x0008(0x0050)(Edit, BlueprintVisible, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMaterialHelperVariantGroup) == 0x000008, "Wrong alignment on FMaterialHelperVariantGroup");
static_assert(sizeof(FMaterialHelperVariantGroup) == 0x000058, "Wrong size on FMaterialHelperVariantGroup");
static_assert(offsetof(FMaterialHelperVariantGroup, VariantMaps) == 0x000008, "Member 'FMaterialHelperVariantGroup::VariantMaps' has a wrong offset!");

// ScriptStruct GFXUtilities.MeshGeneratedMaterialOverride
// 0x0018 (0x0018 - 0x0000)
struct FMeshGeneratedMaterialOverride final
{
public:
	EMaterialOverridePriority                     Priority;                                          // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             Materials;                                         // 0x0008(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshGeneratedMaterialOverride) == 0x000008, "Wrong alignment on FMeshGeneratedMaterialOverride");
static_assert(sizeof(FMeshGeneratedMaterialOverride) == 0x000018, "Wrong size on FMeshGeneratedMaterialOverride");
static_assert(offsetof(FMeshGeneratedMaterialOverride, Priority) == 0x000000, "Member 'FMeshGeneratedMaterialOverride::Priority' has a wrong offset!");
static_assert(offsetof(FMeshGeneratedMaterialOverride, Materials) == 0x000008, "Member 'FMeshGeneratedMaterialOverride::Materials' has a wrong offset!");

// ScriptStruct GFXUtilities.MeshRecordedMaterialOverrideData
// 0x0080 (0x0080 - 0x0000)
struct FMeshRecordedMaterialOverrideData final
{
public:
	struct FGameplayTag                           ActiveVariantName;                                 // 0x0000(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInterface*>             OriginalSourceMaterials;                           // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             SecondaryOriginalSourceMaterials;                  // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FMeshGeneratedMaterialOverride> AllRequestedOverrides;                             // 0x0030(0x0050)(Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMeshRecordedMaterialOverrideData) == 0x000008, "Wrong alignment on FMeshRecordedMaterialOverrideData");
static_assert(sizeof(FMeshRecordedMaterialOverrideData) == 0x000080, "Wrong size on FMeshRecordedMaterialOverrideData");
static_assert(offsetof(FMeshRecordedMaterialOverrideData, ActiveVariantName) == 0x000000, "Member 'FMeshRecordedMaterialOverrideData::ActiveVariantName' has a wrong offset!");
static_assert(offsetof(FMeshRecordedMaterialOverrideData, OriginalSourceMaterials) == 0x000010, "Member 'FMeshRecordedMaterialOverrideData::OriginalSourceMaterials' has a wrong offset!");
static_assert(offsetof(FMeshRecordedMaterialOverrideData, SecondaryOriginalSourceMaterials) == 0x000020, "Member 'FMeshRecordedMaterialOverrideData::SecondaryOriginalSourceMaterials' has a wrong offset!");
static_assert(offsetof(FMeshRecordedMaterialOverrideData, AllRequestedOverrides) == 0x000030, "Member 'FMeshRecordedMaterialOverrideData::AllRequestedOverrides' has a wrong offset!");

}

