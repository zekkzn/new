#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Competence

#include "Basic.hpp"

#include "Competence_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function Competence.BaseModifierCondition.SetSubjectProviderClass
// 0x0008 (0x0008 - 0x0000)
struct BaseModifierCondition_SetSubjectProviderClass final
{
public:
	class UClass*                                 SubjectProviderClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseModifierCondition_SetSubjectProviderClass) == 0x000008, "Wrong alignment on BaseModifierCondition_SetSubjectProviderClass");
static_assert(sizeof(BaseModifierCondition_SetSubjectProviderClass) == 0x000008, "Wrong size on BaseModifierCondition_SetSubjectProviderClass");
static_assert(offsetof(BaseModifierCondition_SetSubjectProviderClass, SubjectProviderClass) == 0x000000, "Member 'BaseModifierCondition_SetSubjectProviderClass::SubjectProviderClass' has a wrong offset!");

// Function Competence.BaseModifierCondition.GetOwningActor
// 0x0008 (0x0008 - 0x0000)
struct BaseModifierCondition_GetOwningActor final
{
public:
	class AActor*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseModifierCondition_GetOwningActor) == 0x000008, "Wrong alignment on BaseModifierCondition_GetOwningActor");
static_assert(sizeof(BaseModifierCondition_GetOwningActor) == 0x000008, "Wrong size on BaseModifierCondition_GetOwningActor");
static_assert(offsetof(BaseModifierCondition_GetOwningActor, ReturnValue) == 0x000000, "Member 'BaseModifierCondition_GetOwningActor::ReturnValue' has a wrong offset!");

// Function Competence.BaseModifierCondition.GetOwningModifier
// 0x0008 (0x0008 - 0x0000)
struct BaseModifierCondition_GetOwningModifier final
{
public:
	class UBaseModifierContainer*                 ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseModifierCondition_GetOwningModifier) == 0x000008, "Wrong alignment on BaseModifierCondition_GetOwningModifier");
static_assert(sizeof(BaseModifierCondition_GetOwningModifier) == 0x000008, "Wrong size on BaseModifierCondition_GetOwningModifier");
static_assert(offsetof(BaseModifierCondition_GetOwningModifier, ReturnValue) == 0x000000, "Member 'BaseModifierCondition_GetOwningModifier::ReturnValue' has a wrong offset!");

// Function Competence.BaseModifierContainer.CreateAndSetEventDrivenCondition
// 0x0010 (0x0010 - 0x0000)
struct BaseModifierContainer_CreateAndSetEventDrivenCondition final
{
public:
	TSubclassOf<class UEventDrivenModifierCondition> ConditionType;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEventDrivenModifierCondition*          ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseModifierContainer_CreateAndSetEventDrivenCondition) == 0x000008, "Wrong alignment on BaseModifierContainer_CreateAndSetEventDrivenCondition");
static_assert(sizeof(BaseModifierContainer_CreateAndSetEventDrivenCondition) == 0x000010, "Wrong size on BaseModifierContainer_CreateAndSetEventDrivenCondition");
static_assert(offsetof(BaseModifierContainer_CreateAndSetEventDrivenCondition, ConditionType) == 0x000000, "Member 'BaseModifierContainer_CreateAndSetEventDrivenCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(BaseModifierContainer_CreateAndSetEventDrivenCondition, ReturnValue) == 0x000008, "Member 'BaseModifierContainer_CreateAndSetEventDrivenCondition::ReturnValue' has a wrong offset!");

// Function Competence.BaseModifierContainer.OnRep_EventDrivenConditionData_Internal
// 0x0010 (0x0010 - 0x0000)
struct BaseModifierContainer_OnRep_EventDrivenConditionData_Internal final
{
public:
	struct FModifierReplicatedEventConditionData  OldReplicatedCondition;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseModifierContainer_OnRep_EventDrivenConditionData_Internal) == 0x000008, "Wrong alignment on BaseModifierContainer_OnRep_EventDrivenConditionData_Internal");
static_assert(sizeof(BaseModifierContainer_OnRep_EventDrivenConditionData_Internal) == 0x000010, "Wrong size on BaseModifierContainer_OnRep_EventDrivenConditionData_Internal");
static_assert(offsetof(BaseModifierContainer_OnRep_EventDrivenConditionData_Internal, OldReplicatedCondition) == 0x000000, "Member 'BaseModifierContainer_OnRep_EventDrivenConditionData_Internal::OldReplicatedCondition' has a wrong offset!");

// Function Competence.BaseModifierContainer.IsApplicable
// 0x0001 (0x0001 - 0x0000)
struct BaseModifierContainer_IsApplicable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseModifierContainer_IsApplicable) == 0x000001, "Wrong alignment on BaseModifierContainer_IsApplicable");
static_assert(sizeof(BaseModifierContainer_IsApplicable) == 0x000001, "Wrong size on BaseModifierContainer_IsApplicable");
static_assert(offsetof(BaseModifierContainer_IsApplicable, ReturnValue) == 0x000000, "Member 'BaseModifierContainer_IsApplicable::ReturnValue' has a wrong offset!");

// Function Competence.RangeBasedCondition.SetRange
// 0x0004 (0x0004 - 0x0000)
struct RangeBasedCondition_SetRange final
{
public:
	float                                         NewRange;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RangeBasedCondition_SetRange) == 0x000004, "Wrong alignment on RangeBasedCondition_SetRange");
static_assert(sizeof(RangeBasedCondition_SetRange) == 0x000004, "Wrong size on RangeBasedCondition_SetRange");
static_assert(offsetof(RangeBasedCondition_SetRange, NewRange) == 0x000000, "Member 'RangeBasedCondition_SetRange::NewRange' has a wrong offset!");

// Function Competence.ConditionFactory.AND
// 0x0018 (0x0018 - 0x0000)
struct ConditionFactory_AND final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAndModifierCondition*                  ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionFactory_AND) == 0x000008, "Wrong alignment on ConditionFactory_AND");
static_assert(sizeof(ConditionFactory_AND) == 0x000018, "Wrong size on ConditionFactory_AND");
static_assert(offsetof(ConditionFactory_AND, ConditionReceiver) == 0x000000, "Member 'ConditionFactory_AND::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(ConditionFactory_AND, ReturnValue) == 0x000010, "Member 'ConditionFactory_AND::ReturnValue' has a wrong offset!");

// Function Competence.ConditionFactory.CreateAndReceiveConditionForBP
// 0x0020 (0x0020 - 0x0000)
struct ConditionFactory_CreateAndReceiveConditionForBP final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEventDrivenModifierCondition> ConditionType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEventDrivenModifierCondition*          ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionFactory_CreateAndReceiveConditionForBP) == 0x000008, "Wrong alignment on ConditionFactory_CreateAndReceiveConditionForBP");
static_assert(sizeof(ConditionFactory_CreateAndReceiveConditionForBP) == 0x000020, "Wrong size on ConditionFactory_CreateAndReceiveConditionForBP");
static_assert(offsetof(ConditionFactory_CreateAndReceiveConditionForBP, ConditionReceiver) == 0x000000, "Member 'ConditionFactory_CreateAndReceiveConditionForBP::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateAndReceiveConditionForBP, ConditionType) == 0x000010, "Member 'ConditionFactory_CreateAndReceiveConditionForBP::ConditionType' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateAndReceiveConditionForBP, ReturnValue) == 0x000018, "Member 'ConditionFactory_CreateAndReceiveConditionForBP::ReturnValue' has a wrong offset!");

// Function Competence.ConditionFactory.CreateAndReceiveConditionWithSubjectForBP
// 0x0028 (0x0028 - 0x0000)
struct ConditionFactory_CreateAndReceiveConditionWithSubjectForBP final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UEventDrivenModifierCondition> ConditionType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UClass*                                 SubjectProviderClass;                              // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEventDrivenModifierCondition*          ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionFactory_CreateAndReceiveConditionWithSubjectForBP) == 0x000008, "Wrong alignment on ConditionFactory_CreateAndReceiveConditionWithSubjectForBP");
static_assert(sizeof(ConditionFactory_CreateAndReceiveConditionWithSubjectForBP) == 0x000028, "Wrong size on ConditionFactory_CreateAndReceiveConditionWithSubjectForBP");
static_assert(offsetof(ConditionFactory_CreateAndReceiveConditionWithSubjectForBP, ConditionReceiver) == 0x000000, "Member 'ConditionFactory_CreateAndReceiveConditionWithSubjectForBP::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateAndReceiveConditionWithSubjectForBP, ConditionType) == 0x000010, "Member 'ConditionFactory_CreateAndReceiveConditionWithSubjectForBP::ConditionType' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateAndReceiveConditionWithSubjectForBP, SubjectProviderClass) == 0x000018, "Member 'ConditionFactory_CreateAndReceiveConditionWithSubjectForBP::SubjectProviderClass' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateAndReceiveConditionWithSubjectForBP, ReturnValue) == 0x000020, "Member 'ConditionFactory_CreateAndReceiveConditionWithSubjectForBP::ReturnValue' has a wrong offset!");

// Function Competence.ConditionFactory.CreateRangeBasedCondition
// 0x0028 (0x0028 - 0x0000)
struct ConditionFactory_CreateRangeBasedCondition final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URangeBasedCondition>       ConditionType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class URangeBasedCondition*                   ReturnValue;                                       // 0x0020(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionFactory_CreateRangeBasedCondition) == 0x000008, "Wrong alignment on ConditionFactory_CreateRangeBasedCondition");
static_assert(sizeof(ConditionFactory_CreateRangeBasedCondition) == 0x000028, "Wrong size on ConditionFactory_CreateRangeBasedCondition");
static_assert(offsetof(ConditionFactory_CreateRangeBasedCondition, ConditionReceiver) == 0x000000, "Member 'ConditionFactory_CreateRangeBasedCondition::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateRangeBasedCondition, ConditionType) == 0x000010, "Member 'ConditionFactory_CreateRangeBasedCondition::ConditionType' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateRangeBasedCondition, Range) == 0x000018, "Member 'ConditionFactory_CreateRangeBasedCondition::Range' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateRangeBasedCondition, ReturnValue) == 0x000020, "Member 'ConditionFactory_CreateRangeBasedCondition::ReturnValue' has a wrong offset!");

// Function Competence.ConditionFactory.CreateRangeBasedConditionWithSubject
// 0x0030 (0x0030 - 0x0000)
struct ConditionFactory_CreateRangeBasedConditionWithSubject final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URangeBasedCondition>       ConditionType;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Range;                                             // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 SubjectProviderClass;                              // 0x0020(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URangeBasedCondition*                   ReturnValue;                                       // 0x0028(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionFactory_CreateRangeBasedConditionWithSubject) == 0x000008, "Wrong alignment on ConditionFactory_CreateRangeBasedConditionWithSubject");
static_assert(sizeof(ConditionFactory_CreateRangeBasedConditionWithSubject) == 0x000030, "Wrong size on ConditionFactory_CreateRangeBasedConditionWithSubject");
static_assert(offsetof(ConditionFactory_CreateRangeBasedConditionWithSubject, ConditionReceiver) == 0x000000, "Member 'ConditionFactory_CreateRangeBasedConditionWithSubject::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateRangeBasedConditionWithSubject, ConditionType) == 0x000010, "Member 'ConditionFactory_CreateRangeBasedConditionWithSubject::ConditionType' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateRangeBasedConditionWithSubject, Range) == 0x000018, "Member 'ConditionFactory_CreateRangeBasedConditionWithSubject::Range' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateRangeBasedConditionWithSubject, SubjectProviderClass) == 0x000020, "Member 'ConditionFactory_CreateRangeBasedConditionWithSubject::SubjectProviderClass' has a wrong offset!");
static_assert(offsetof(ConditionFactory_CreateRangeBasedConditionWithSubject, ReturnValue) == 0x000028, "Member 'ConditionFactory_CreateRangeBasedConditionWithSubject::ReturnValue' has a wrong offset!");

// Function Competence.ConditionFactory.IsTimerDone
// 0x0020 (0x0020 - 0x0000)
struct ConditionFactory_IsTimerDone final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimerObject*                           Timer;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UIsTimerDoneCondition*                  ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionFactory_IsTimerDone) == 0x000008, "Wrong alignment on ConditionFactory_IsTimerDone");
static_assert(sizeof(ConditionFactory_IsTimerDone) == 0x000020, "Wrong size on ConditionFactory_IsTimerDone");
static_assert(offsetof(ConditionFactory_IsTimerDone, ConditionReceiver) == 0x000000, "Member 'ConditionFactory_IsTimerDone::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(ConditionFactory_IsTimerDone, Timer) == 0x000010, "Member 'ConditionFactory_IsTimerDone::Timer' has a wrong offset!");
static_assert(offsetof(ConditionFactory_IsTimerDone, ReturnValue) == 0x000018, "Member 'ConditionFactory_IsTimerDone::ReturnValue' has a wrong offset!");

// Function Competence.ConditionFactory.Lingering
// 0x0020 (0x0020 - 0x0000)
struct ConditionFactory_Lingering final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToTrack;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULingeringModifierCondition*            ReturnValue;                                       // 0x0018(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionFactory_Lingering) == 0x000008, "Wrong alignment on ConditionFactory_Lingering");
static_assert(sizeof(ConditionFactory_Lingering) == 0x000020, "Wrong size on ConditionFactory_Lingering");
static_assert(offsetof(ConditionFactory_Lingering, ConditionReceiver) == 0x000000, "Member 'ConditionFactory_Lingering::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(ConditionFactory_Lingering, TimeToTrack) == 0x000010, "Member 'ConditionFactory_Lingering::TimeToTrack' has a wrong offset!");
static_assert(offsetof(ConditionFactory_Lingering, ReturnValue) == 0x000018, "Member 'ConditionFactory_Lingering::ReturnValue' has a wrong offset!");

// Function Competence.ConditionFactory.Not
// 0x0018 (0x0018 - 0x0000)
struct ConditionFactory_Not final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNotModifierCondition*                  ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionFactory_Not) == 0x000008, "Wrong alignment on ConditionFactory_Not");
static_assert(sizeof(ConditionFactory_Not) == 0x000018, "Wrong size on ConditionFactory_Not");
static_assert(offsetof(ConditionFactory_Not, ConditionReceiver) == 0x000000, "Member 'ConditionFactory_Not::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(ConditionFactory_Not, ReturnValue) == 0x000010, "Member 'ConditionFactory_Not::ReturnValue' has a wrong offset!");

// Function Competence.ConditionFactory.OR
// 0x0018 (0x0018 - 0x0000)
struct ConditionFactory_OR final
{
public:
	TScriptInterface<class IConditionReceiver>    ConditionReceiver;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOrModifierCondition*                   ReturnValue;                                       // 0x0010(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConditionFactory_OR) == 0x000008, "Wrong alignment on ConditionFactory_OR");
static_assert(sizeof(ConditionFactory_OR) == 0x000018, "Wrong size on ConditionFactory_OR");
static_assert(offsetof(ConditionFactory_OR, ConditionReceiver) == 0x000000, "Member 'ConditionFactory_OR::ConditionReceiver' has a wrong offset!");
static_assert(offsetof(ConditionFactory_OR, ReturnValue) == 0x000010, "Member 'ConditionFactory_OR::ReturnValue' has a wrong offset!");

// Function Competence.HasObjectState.SetState
// 0x000C (0x000C - 0x0000)
struct HasObjectState_SetState final
{
public:
	struct FGameplayTag                           State;                                             // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasObjectState_SetState) == 0x000004, "Wrong alignment on HasObjectState_SetState");
static_assert(sizeof(HasObjectState_SetState) == 0x00000C, "Wrong size on HasObjectState_SetState");
static_assert(offsetof(HasObjectState_SetState, State) == 0x000000, "Member 'HasObjectState_SetState::State' has a wrong offset!");

// Function Competence.HasObjectStateWithMaxDuration.SetMaxDuration
// 0x0004 (0x0004 - 0x0000)
struct HasObjectStateWithMaxDuration_SetMaxDuration final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasObjectStateWithMaxDuration_SetMaxDuration) == 0x000004, "Wrong alignment on HasObjectStateWithMaxDuration_SetMaxDuration");
static_assert(sizeof(HasObjectStateWithMaxDuration_SetMaxDuration) == 0x000004, "Wrong size on HasObjectStateWithMaxDuration_SetMaxDuration");
static_assert(offsetof(HasObjectStateWithMaxDuration_SetMaxDuration, Duration) == 0x000000, "Member 'HasObjectStateWithMaxDuration_SetMaxDuration::Duration' has a wrong offset!");

// Function Competence.IsTimerDoneCondition.SetTimer
// 0x0008 (0x0008 - 0x0000)
struct IsTimerDoneCondition_SetTimer final
{
public:
	class UTimerObject*                           Timer;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(IsTimerDoneCondition_SetTimer) == 0x000008, "Wrong alignment on IsTimerDoneCondition_SetTimer");
static_assert(sizeof(IsTimerDoneCondition_SetTimer) == 0x000008, "Wrong size on IsTimerDoneCondition_SetTimer");
static_assert(offsetof(IsTimerDoneCondition_SetTimer, Timer) == 0x000000, "Member 'IsTimerDoneCondition_SetTimer::Timer' has a wrong offset!");

}

