#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Halloween

#include "Basic.hpp"

#include "Halloween_classes.hpp"
#include "Halloween_parameters.hpp"


namespace SDK
{

// Function Halloween.VoidEnergyChangeQEEvaluator.ListenToOnComponentAddedEvent
// (Native, Protected)

void UVoidEnergyChangeQEEvaluator::ListenToOnComponentAddedEvent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyChangeQEEvaluator", "ListenToOnComponentAddedEvent");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.DepositVoidEnergyTierQEEvaluator.OnVoidEnergyDeposited
// (Final, Native, Public, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDepositVoidEnergyTierQEEvaluator::OnVoidEnergyDeposited(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DepositVoidEnergyTierQEEvaluator", "OnVoidEnergyDeposited");

	Params::DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.FloatingVoidEnergyOrb.Authority_OnDespawn
// (Final, Native, Private)

void UFloatingVoidEnergyOrb::Authority_OnDespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FloatingVoidEnergyOrb", "Authority_OnDespawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.FloatingVoidEnergyOrb.Authority_OnPlayerEnterZone
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       PlayerToTravelTo                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFloatingVoidEnergyOrb::Authority_OnPlayerEnterZone(class ADBDPlayer* PlayerToTravelTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FloatingVoidEnergyOrb", "Authority_OnPlayerEnterZone");

	Params::FloatingVoidEnergyOrb_Authority_OnPlayerEnterZone Parms{};

	Parms.PlayerToTravelTo = PlayerToTravelTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.FloatingVoidEnergyOrb.Authority_OnPlayerExitZone
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFloatingVoidEnergyOrb::Authority_OnPlayerExitZone(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FloatingVoidEnergyOrb", "Authority_OnPlayerExitZone");

	Params::FloatingVoidEnergyOrb_Authority_OnPlayerExitZone Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.FloatingVoidEnergyOrb.Authority_OnRespawn
// (Final, Native, Private)

void UFloatingVoidEnergyOrb::Authority_OnRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FloatingVoidEnergyOrb", "Authority_OnRespawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.FloatingVoidEnergyOrb.Authority_OnTravelTimeEnd
// (Final, Native, Private)

void UFloatingVoidEnergyOrb::Authority_OnTravelTimeEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FloatingVoidEnergyOrb", "Authority_OnTravelTimeEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.FloatingVoidEnergyOrb.Multicast_OnReachedPlayer
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UFloatingVoidEnergyOrb::Multicast_OnReachedPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FloatingVoidEnergyOrb", "Multicast_OnReachedPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.FloatingVoidEnergyOrb.Multicast_StartTravelToPlayer
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ADBDPlayer*                       PlayerToTravelTo                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFloatingVoidEnergyOrb::Multicast_StartTravelToPlayer(class ADBDPlayer* PlayerToTravelTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FloatingVoidEnergyOrb", "Multicast_StartTravelToPlayer");

	Params::FloatingVoidEnergyOrb_Multicast_StartTravelToPlayer Parms{};

	Parms.PlayerToTravelTo = PlayerToTravelTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Halloween.FloatingVoidEnergyOrb.OnPlayerInteract__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFloatingVoidEnergyOrb::OnPlayerInteract__DelegateSignature(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FloatingVoidEnergyOrb", "OnPlayerInteract__DelegateSignature");

	Params::FloatingVoidEnergyOrb_OnPlayerInteract__DelegateSignature Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.HalloweenCentrifugeAnimInstance.OnBlendValueChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   blendValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenCentrifugeAnimInstance::OnBlendValueChanged(const float blendValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenCentrifugeAnimInstance", "OnBlendValueChanged");

	Params::HalloweenCentrifugeAnimInstance_OnBlendValueChanged Parms{};

	Parms.blendValue = blendValue;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.HalloweenCentrifugeAnimInstance.OnEnergySpawned
// (Final, Native, Protected)
// Parameters:
// int32                                   PreviousEnergy                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   CurrentEnergy                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenCentrifugeAnimInstance::OnEnergySpawned(int32 PreviousEnergy, int32 CurrentEnergy)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenCentrifugeAnimInstance", "OnEnergySpawned");

	Params::HalloweenCentrifugeAnimInstance_OnEnergySpawned Parms{};

	Parms.PreviousEnergy = PreviousEnergy;
	Parms.CurrentEnergy = CurrentEnergy;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenCentrifugeAnimInstance.SetDesiredBlendValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   blendValue                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenCentrifugeAnimInstance::SetDesiredBlendValue(const float blendValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenCentrifugeAnimInstance", "SetDesiredBlendValue");

	Params::HalloweenCentrifugeAnimInstance_SetDesiredBlendValue Parms{};

	Parms.blendValue = blendValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.GeneratorCentrifugeAnimInstance.OnStartRepair
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGenerator*                       Generator                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeneratorCentrifugeAnimInstance::OnStartRepair(class AGenerator* Generator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratorCentrifugeAnimInstance", "OnStartRepair");

	Params::GeneratorCentrifugeAnimInstance_OnStartRepair Parms{};

	Parms.Generator = Generator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.GeneratorCentrifugeAnimInstance.OnStopRepair
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AGenerator*                       Generator                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGeneratorCentrifugeAnimInstance::OnStopRepair(class AGenerator* Generator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratorCentrifugeAnimInstance", "OnStopRepair");

	Params::GeneratorCentrifugeAnimInstance_OnStopRepair Parms{};

	Parms.Generator = Generator;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.GeneratorCentrifugeAnimInstance.StartRepairing
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGeneratorCentrifugeAnimInstance::StartRepairing(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratorCentrifugeAnimInstance", "StartRepairing");

	Params::GeneratorCentrifugeAnimInstance_StartRepairing Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.GeneratorCentrifugeAnimInstance.StopRepairing
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UGeneratorCentrifugeAnimInstance::StopRepairing(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GeneratorCentrifugeAnimInstance", "StopRepairing");

	Params::GeneratorCentrifugeAnimInstance_StopRepairing Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenEventComponent.Authority_OnLevelReadyToPlay
// (Final, Native, Private)

void UHalloweenEventComponent::Authority_OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenEventComponent", "Authority_OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenEventComponent.Authority_PlayerPreTeleportInToVoidZone
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       PlayerTeleported                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenEventComponent::Authority_PlayerPreTeleportInToVoidZone(class ADBDPlayer* PlayerTeleported)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenEventComponent", "Authority_PlayerPreTeleportInToVoidZone");

	Params::HalloweenEventComponent_Authority_PlayerPreTeleportInToVoidZone Parms{};

	Parms.PlayerTeleported = PlayerTeleported;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenEventComponent.Authority_PlayerPreTeleportOutOfVoidZone
// (Final, Native, Public)
// Parameters:
// class ADBDPlayer*                       PlayerTeleported                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenEventComponent::Authority_PlayerPreTeleportOutOfVoidZone(class ADBDPlayer* PlayerTeleported)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenEventComponent", "Authority_PlayerPreTeleportOutOfVoidZone");

	Params::HalloweenEventComponent_Authority_PlayerPreTeleportOutOfVoidZone Parms{};

	Parms.PlayerTeleported = PlayerTeleported;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenEventComponent.Authority_PlayerTeleportedInToVoidZone
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       PlayerTeleported                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULinkedTeleporterComponent*       TeleporterUsed                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenEventComponent::Authority_PlayerTeleportedInToVoidZone(class ADBDPlayer* PlayerTeleported, class ULinkedTeleporterComponent* TeleporterUsed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenEventComponent", "Authority_PlayerTeleportedInToVoidZone");

	Params::HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone Parms{};

	Parms.PlayerTeleported = PlayerTeleported;
	Parms.TeleporterUsed = TeleporterUsed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenEventComponent.Authority_PlayerTeleportedOutOfVoidZone
// (Final, Native, Public)
// Parameters:
// class ADBDPlayer*                       PlayerTeleported                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenEventComponent::Authority_PlayerTeleportedOutOfVoidZone(class ADBDPlayer* PlayerTeleported)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenEventComponent", "Authority_PlayerTeleportedOutOfVoidZone");

	Params::HalloweenEventComponent_Authority_PlayerTeleportedOutOfVoidZone Parms{};

	Parms.PlayerTeleported = PlayerTeleported;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenEventComponent.Authority_TurnAllRiftsIntoTeleporters
// (Final, Native, Public)
// Parameters:
// bool                                    TurnOnTeleporters                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenEventComponent::Authority_TurnAllRiftsIntoTeleporters(bool TurnOnTeleporters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenEventComponent", "Authority_TurnAllRiftsIntoTeleporters");

	Params::HalloweenEventComponent_Authority_TurnAllRiftsIntoTeleporters Parms{};

	Parms.TurnOnTeleporters = TurnOnTeleporters;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenEventComponent.Cosmetic_OnPlayerTeleported
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       PlayerTeleported                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    TeleportIntoVoid                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenEventComponent::Cosmetic_OnPlayerTeleported(class ADBDPlayer* PlayerTeleported, bool TeleportIntoVoid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenEventComponent", "Cosmetic_OnPlayerTeleported");

	Params::HalloweenEventComponent_Cosmetic_OnPlayerTeleported Parms{};

	Parms.PlayerTeleported = PlayerTeleported;
	Parms.TeleportIntoVoid = TeleportIntoVoid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.HalloweenEventComponent.OnRep_PlayersInVoid
// (Final, Native, Private)

void UHalloweenEventComponent::OnRep_PlayersInVoid()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenEventComponent", "OnRep_PlayersInVoid");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenEventComponent.OnRep_VoidWorldTeleporterActors
// (Final, Native, Private)

void UHalloweenEventComponent::OnRep_VoidWorldTeleporterActors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenEventComponent", "OnRep_VoidWorldTeleporterActors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntAnimInstance.OnHauntAppear
// (Final, Native, Private)

void UHalloweenHauntAnimInstance::OnHauntAppear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntAnimInstance", "OnHauntAppear");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntAnimInstance.OnHauntDisappearStart
// (Final, Native, Private)

void UHalloweenHauntAnimInstance::OnHauntDisappearStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntAnimInstance", "OnHauntDisappearStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntAnimInstance.OnHauntHitPlayer
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       HitPlayer                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenHauntAnimInstance::OnHauntHitPlayer(class ADBDPlayer* HitPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntAnimInstance", "OnHauntHitPlayer");

	Params::HalloweenHauntAnimInstance_OnHauntHitPlayer Parms{};

	Parms.HitPlayer = HitPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntAnimInstance.OnHitCollision
// (Final, Native, Private)

void UHalloweenHauntAnimInstance::OnHitCollision()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntAnimInstance", "OnHitCollision");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntProjectile.Authority_OnCollisionOverlapBegin
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              OverlappedComp                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FromSweep                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       SweepResult                                            (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AHalloweenHauntProjectile::Authority_OnCollisionOverlapBegin(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool FromSweep, const struct FHitResult& SweepResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Authority_OnCollisionOverlapBegin");

	Params::HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin Parms{};

	Parms.OverlappedComp = OverlappedComp;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.FromSweep = FromSweep;
	Parms.SweepResult = std::move(SweepResult);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntProjectile.Cosmetic_OnCollisionHit
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           ActorHit                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHalloweenHauntProjectile::Cosmetic_OnCollisionHit(class AActor* ActorHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Cosmetic_OnCollisionHit");

	Params::HalloweenHauntProjectile_Cosmetic_OnCollisionHit Parms{};

	Parms.ActorHit = ActorHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.HalloweenHauntProjectile.Cosmetic_OnDisappear
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void AHalloweenHauntProjectile::Cosmetic_OnDisappear()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Cosmetic_OnDisappear");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Halloween.HalloweenHauntProjectile.Cosmetic_OnLaunch
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void AHalloweenHauntProjectile::Cosmetic_OnLaunch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Cosmetic_OnLaunch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Halloween.HalloweenHauntProjectile.Cosmetic_OnPlayerHit
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       PlayerHit                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHalloweenHauntProjectile::Cosmetic_OnPlayerHit(class ADBDPlayer* PlayerHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Cosmetic_OnPlayerHit");

	Params::HalloweenHauntProjectile_Cosmetic_OnPlayerHit Parms{};

	Parms.PlayerHit = PlayerHit;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.HalloweenHauntProjectile.Multicast_LaunchHaunt
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AHalloweenHauntProjectile::Multicast_LaunchHaunt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Multicast_LaunchHaunt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntProjectile.Multicast_OnActorHit
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class AActor*                           ActorHit                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHalloweenHauntProjectile::Multicast_OnActorHit(class AActor* ActorHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Multicast_OnActorHit");

	Params::HalloweenHauntProjectile_Multicast_OnActorHit Parms{};

	Parms.ActorHit = ActorHit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntProjectile.Multicast_OnPlayerHit
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ADBDPlayer*                       PlayerHit                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AHalloweenHauntProjectile::Multicast_OnPlayerHit(class ADBDPlayer* PlayerHit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Multicast_OnPlayerHit");

	Params::HalloweenHauntProjectile_Multicast_OnPlayerHit Parms{};

	Parms.PlayerHit = PlayerHit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntProjectile.Multicast_SetLocationAndRotation
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Rotation                                               (ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void AHalloweenHauntProjectile::Multicast_SetLocationAndRotation(const struct FVector& Location, const struct FRotator& Rotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Multicast_SetLocationAndRotation");

	Params::HalloweenHauntProjectile_Multicast_SetLocationAndRotation Parms{};

	Parms.Location = std::move(Location);
	Parms.Rotation = std::move(Rotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenHauntProjectile.Multicast_StartDisappearHaunt
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void AHalloweenHauntProjectile::Multicast_StartDisappearHaunt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenHauntProjectile", "Multicast_StartDisappearHaunt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenVoidHookSurvivorDefinition.Authority_SetPlayerOnStandardHook
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenVoidHookSurvivorDefinition::Authority_SetPlayerOnStandardHook(class ACamperPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenVoidHookSurvivorDefinition", "Authority_SetPlayerOnStandardHook");

	Params::HalloweenVoidHookSurvivorDefinition_Authority_SetPlayerOnStandardHook Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenVoidHookSurvivorDefinition.Multicast_OnPlayerMovedToStandardHook
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ACamperPlayer*                    Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AMeatHook*                        ClosestMeatHook                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenVoidHookSurvivorDefinition::Multicast_OnPlayerMovedToStandardHook(class ACamperPlayer* Player, class AMeatHook* ClosestMeatHook)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenVoidHookSurvivorDefinition", "Multicast_OnPlayerMovedToStandardHook");

	Params::HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook Parms{};

	Parms.Player = Player;
	Parms.ClosestMeatHook = ClosestMeatHook;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.HalloweenVoidHookSurvivorDefinition.Multicast_PlacePlayerOnHook
// (Net, NetReliable, Native, Event, NetMulticast, Protected)
// Parameters:
// class ACamperPlayer*                    SurvivorBeingHooked                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenVoidHookSurvivorDefinition::Multicast_PlacePlayerOnHook(class ACamperPlayer* SurvivorBeingHooked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenVoidHookSurvivorDefinition", "Multicast_PlacePlayerOnHook");

	Params::HalloweenVoidHookSurvivorDefinition_Multicast_PlacePlayerOnHook Parms{};

	Parms.SurvivorBeingHooked = SurvivorBeingHooked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Halloween.HalloweenVoidHookSurvivorDefinition.OnHookEvent__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ACamperPlayer*                    Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHalloweenVoidHookSurvivorDefinition::OnHookEvent__DelegateSignature(class ACamperPlayer* Survivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HalloweenVoidHookSurvivorDefinition", "OnHookEvent__DelegateSignature");

	Params::HalloweenVoidHookSurvivorDefinition_OnHookEvent__DelegateSignature Parms{};

	Parms.Survivor = Survivor;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.HauntProjectilePlayerInventoryComponent.Cosmetic_OnHauntCountChange
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   HauntCount                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHauntProjectilePlayerInventoryComponent::Cosmetic_OnHauntCountChange(int32 HauntCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HauntProjectilePlayerInventoryComponent", "Cosmetic_OnHauntCountChange");

	Params::HauntProjectilePlayerInventoryComponent_Cosmetic_OnHauntCountChange Parms{};

	Parms.HauntCount = HauntCount;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.HauntProjectilePlayerInventoryComponent.OnRep_CurrentHauntCount
// (Final, Native, Private)
// Parameters:
// int32                                   PreviousHauntCount                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHauntProjectilePlayerInventoryComponent::OnRep_CurrentHauntCount(int32 PreviousHauntCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HauntProjectilePlayerInventoryComponent", "OnRep_CurrentHauntCount");

	Params::HauntProjectilePlayerInventoryComponent_OnRep_CurrentHauntCount Parms{};

	Parms.PreviousHauntCount = PreviousHauntCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.LinkedTeleporterComponent.Multicast_TeleportPlayer
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private, HasDefaults)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TeleportLocation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULinkedTeleporterComponent::Multicast_TeleportPlayer(class ADBDPlayer* Player, const struct FVector& TeleportLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LinkedTeleporterComponent", "Multicast_TeleportPlayer");

	Params::LinkedTeleporterComponent_Multicast_TeleportPlayer Parms{};

	Parms.Player = Player;
	Parms.TeleportLocation = std::move(TeleportLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.LinkedTeleporterComponent.OnLevelReadyToPlay
// (Final, Native, Protected)

void ULinkedTeleporterComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LinkedTeleporterComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.LinkedTeleporterComponent.OnRep_IsAllowedToTeleport
// (Final, Native, Private)

void ULinkedTeleporterComponent::OnRep_IsAllowedToTeleport()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LinkedTeleporterComponent", "OnRep_IsAllowedToTeleport");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Halloween.LinkedTeleporterComponent.OnTeleportEnabled__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULinkedTeleporterComponent::OnTeleportEnabled__DelegateSignature(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LinkedTeleporterComponent", "OnTeleportEnabled__DelegateSignature");

	Params::LinkedTeleporterComponent_OnTeleportEnabled__DelegateSignature Parms{};

	Parms.IsEnabled = IsEnabled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.LinkedTeleporterComponent.OnTeleporterTriggered
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ULinkedTeleporterComponent::OnTeleporterTriggered(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LinkedTeleporterComponent", "OnTeleporterTriggered");

	Params::LinkedTeleporterComponent_OnTeleporterTriggered Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction Halloween.LinkedTeleporterComponent.OnTeleportInteractWithPlayer__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULinkedTeleporterComponent::OnTeleportInteractWithPlayer__DelegateSignature(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LinkedTeleporterComponent", "OnTeleportInteractWithPlayer__DelegateSignature");

	Params::LinkedTeleporterComponent_OnTeleportInteractWithPlayer__DelegateSignature Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.LinkedTeleporterComponent.OnTimerEnd
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ULinkedTeleporterComponent::OnTimerEnd(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LinkedTeleporterComponent", "OnTimerEnd");

	Params::LinkedTeleporterComponent_OnTimerEnd Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.MeatHookCentrifugeAnimInstance.OnPlayerHooked
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMeatHook*                        MeatHook                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMeatHookCentrifugeAnimInstance::OnPlayerHooked(class AMeatHook* MeatHook)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeatHookCentrifugeAnimInstance", "OnPlayerHooked");

	Params::MeatHookCentrifugeAnimInstance_OnPlayerHooked Parms{};

	Parms.MeatHook = MeatHook;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.MeatHookCentrifugeAnimInstance.OnPlayerNoLongerOnHook
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AMeatHook*                        MeatHook                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UMeatHookCentrifugeAnimInstance::OnPlayerNoLongerOnHook(class AMeatHook* MeatHook)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeatHookCentrifugeAnimInstance", "OnPlayerNoLongerOnHook");

	Params::MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook Parms{};

	Parms.MeatHook = MeatHook;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.MeatHookCentrifugeAnimInstance.PlayerHooked
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMeatHookCentrifugeAnimInstance::PlayerHooked(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeatHookCentrifugeAnimInstance", "PlayerHooked");

	Params::MeatHookCentrifugeAnimInstance_PlayerHooked Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.MeatHookCentrifugeAnimInstance.PlayerNoLongerOnHook
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UMeatHookCentrifugeAnimInstance::PlayerNoLongerOnHook(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MeatHookCentrifugeAnimInstance", "PlayerNoLongerOnHook");

	Params::MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.PlayerVoidEnergy.Multicast_AddVoidEnergy
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// int32                                   AmountToAdd                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EVoidEnergyType                         VoidEnergyType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerVoidEnergy::Multicast_AddVoidEnergy(const int32 AmountToAdd, const EVoidEnergyType VoidEnergyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "Multicast_AddVoidEnergy");

	Params::PlayerVoidEnergy_Multicast_AddVoidEnergy Parms{};

	Parms.AmountToAdd = AmountToAdd;
	Parms.VoidEnergyType = VoidEnergyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.PlayerVoidEnergy.Multicast_ShowVoidEnergyChanges
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// int32                                   PreviousVoidEnergyCount                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewVoidEnergyCount                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerVoidEnergy::Multicast_ShowVoidEnergyChanges(const int32 PreviousVoidEnergyCount, const int32 NewVoidEnergyCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "Multicast_ShowVoidEnergyChanges");

	Params::PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges Parms{};

	Parms.PreviousVoidEnergyCount = PreviousVoidEnergyCount;
	Parms.NewVoidEnergyCount = NewVoidEnergyCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.PlayerVoidEnergy.OnLevelReadyToPlay
// (Final, Native, Private)

void UPlayerVoidEnergy::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.PlayerVoidEnergy.OnLocallyControlledChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsLocallyControlled                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerVoidEnergy::OnLocallyControlledChanged(bool IsLocallyControlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "OnLocallyControlledChanged");

	Params::PlayerVoidEnergy_OnLocallyControlledChanged Parms{};

	Parms.IsLocallyControlled = IsLocallyControlled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.PlayerVoidEnergy.OnLocallyObservedChanged
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerVoidEnergy::OnLocallyObservedChanged(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "OnLocallyObservedChanged");

	Params::PlayerVoidEnergy_OnLocallyObservedChanged Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.PlayerVoidEnergy.OnRep_CurrentVoidEnergy
// (Final, Native, Private)
// Parameters:
// int32                                   PreviousEnergyCount                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerVoidEnergy::OnRep_CurrentVoidEnergy(int32 PreviousEnergyCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "OnRep_CurrentVoidEnergy");

	Params::PlayerVoidEnergy_OnRep_CurrentVoidEnergy Parms{};

	Parms.PreviousEnergyCount = PreviousEnergyCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.PlayerVoidEnergy.OnRep_TotalVoidEnergySpent
// (Final, Native, Private)
// Parameters:
// int32                                   PreviousTotalVoidEnergySpent                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerVoidEnergy::OnRep_TotalVoidEnergySpent(int32 PreviousTotalVoidEnergySpent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "OnRep_TotalVoidEnergySpent");

	Params::PlayerVoidEnergy_OnRep_TotalVoidEnergySpent Parms{};

	Parms.PreviousTotalVoidEnergySpent = PreviousTotalVoidEnergySpent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.PlayerVoidEnergy.OnVoidEnergyGained
// (Event, Protected, BlueprintEvent)

void UPlayerVoidEnergy::OnVoidEnergyGained()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "OnVoidEnergyGained");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Halloween.PlayerVoidEnergy.OnVoidEnergyLost
// (Event, Protected, BlueprintEvent)
// Parameters:
// EVoidEnergyChangeReason                 ChangeReason                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPlayerVoidEnergy::OnVoidEnergyLost(EVoidEnergyChangeReason ChangeReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "OnVoidEnergyLost");

	Params::PlayerVoidEnergy_OnVoidEnergyLost Parms{};

	Parms.ChangeReason = ChangeReason;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.PlayerVoidEnergy.GetCurrentVoidEnergyCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPlayerVoidEnergy::GetCurrentVoidEnergyCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "GetCurrentVoidEnergyCount");

	Params::PlayerVoidEnergy_GetCurrentVoidEnergyCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Halloween.PlayerVoidEnergy.GetMaxAmountOfVoidEnergyCanReceive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPlayerVoidEnergy::GetMaxAmountOfVoidEnergyCanReceive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "GetMaxAmountOfVoidEnergyCanReceive");

	Params::PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Halloween.PlayerVoidEnergy.GetTotalVoidEnergyDeposited
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UPlayerVoidEnergy::GetTotalVoidEnergyDeposited() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerVoidEnergy", "GetTotalVoidEnergyDeposited");

	Params::PlayerVoidEnergy_GetTotalVoidEnergyDeposited Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Halloween.Pumpkin.Cosmetic_OnInteractionCompleted
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       InteractingPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APumpkin::Cosmetic_OnInteractionCompleted(class ADBDPlayer* InteractingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Pumpkin", "Cosmetic_OnInteractionCompleted");

	Params::Pumpkin_Cosmetic_OnInteractionCompleted Parms{};

	Parms.InteractingPlayer = InteractingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.Pumpkin.Cosmetic_OnIntroCompleted
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void APumpkin::Cosmetic_OnIntroCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Pumpkin", "Cosmetic_OnIntroCompleted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Halloween.Pumpkin.Cosmetic_OnRespawn
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void APumpkin::Cosmetic_OnRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Pumpkin", "Cosmetic_OnRespawn");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Halloween.Pumpkin.Cosmetic_OnStartedInteracting
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       InteractingPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InteractionDuration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APumpkin::Cosmetic_OnStartedInteracting(class ADBDPlayer* InteractingPlayer, float InteractionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Pumpkin", "Cosmetic_OnStartedInteracting");

	Params::Pumpkin_Cosmetic_OnStartedInteracting Parms{};

	Parms.InteractingPlayer = InteractingPlayer;
	Parms.InteractionDuration = InteractionDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.Pumpkin.Cosmetic_OnStoppedInteracting
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void APumpkin::Cosmetic_OnStoppedInteracting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Pumpkin", "Cosmetic_OnStoppedInteracting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Halloween.Pumpkin.Multicast_OnRespawn
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void APumpkin::Multicast_OnRespawn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Pumpkin", "Multicast_OnRespawn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.Pumpkin.OnInteractionCompleted
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       InteractingPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void APumpkin::OnInteractionCompleted(class ADBDPlayer* InteractingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Pumpkin", "OnInteractionCompleted");

	Params::Pumpkin_OnInteractionCompleted Parms{};

	Parms.InteractingPlayer = InteractingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.SpawnHauntProjectileInteraction.Cosmetic_OnWindUpTimerStart
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TimerDuration                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USpawnHauntProjectileInteraction::Cosmetic_OnWindUpTimerStart(class ADBDPlayer* Player, float TimerDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpawnHauntProjectileInteraction", "Cosmetic_OnWindUpTimerStart");

	Params::SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart Parms{};

	Parms.Player = Player;
	Parms.TimerDuration = TimerDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.UnstableRift.Cosmetic_ChangeUnstableVisibility
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnstableRift::Cosmetic_ChangeUnstableVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnstableRift", "Cosmetic_ChangeUnstableVisibility");

	Params::UnstableRift_Cosmetic_ChangeUnstableVisibility Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.UnstableRift.Cosmetic_OnInteractionCompleted
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       InteractingPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnstableRift::Cosmetic_OnInteractionCompleted(class ADBDPlayer* InteractingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnstableRift", "Cosmetic_OnInteractionCompleted");

	Params::UnstableRift_Cosmetic_OnInteractionCompleted Parms{};

	Parms.InteractingPlayer = InteractingPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.UnstableRift.Cosmetic_OnStartedInteracting
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       InteractingPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InteractionDuration                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnstableRift::Cosmetic_OnStartedInteracting(class ADBDPlayer* InteractingPlayer, float InteractionDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnstableRift", "Cosmetic_OnStartedInteracting");

	Params::UnstableRift_Cosmetic_OnStartedInteracting Parms{};

	Parms.InteractingPlayer = InteractingPlayer;
	Parms.InteractionDuration = InteractionDuration;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.UnstableRift.Cosmetic_OnStoppedInteracting
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void AUnstableRift::Cosmetic_OnStoppedInteracting()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnstableRift", "Cosmetic_OnStoppedInteracting");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Halloween.UnstableRift.OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsWithinRange                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           TrackedActor                                           (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AUnstableRift::OnInRangeChanged(bool IsWithinRange, const class AActor* TrackedActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnstableRift", "OnInRangeChanged");

	Params::UnstableRift_OnInRangeChanged Parms{};

	Parms.IsWithinRange = IsWithinRange;
	Parms.TrackedActor = TrackedActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.UnstableRift.OnIntroCompleted
// (Final, Native, Private)

void AUnstableRift::OnIntroCompleted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnstableRift", "OnIntroCompleted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.UnstableRift.OnRep_IsDepositEnergyInteractionAvailable
// (Final, Native, Private)

void AUnstableRift::OnRep_IsDepositEnergyInteractionAvailable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UnstableRift", "OnRep_IsDepositEnergyInteractionAvailable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidEnergyProducer.Cosmetic_OnVoidOrbsSpawned
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   OrbsSpawned                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoidEnergyProducer::Cosmetic_OnVoidOrbsSpawned(const int32 OrbsSpawned)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyProducer", "Cosmetic_OnVoidOrbsSpawned");

	Params::VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned Parms{};

	Parms.OrbsSpawned = OrbsSpawned;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.VoidEnergyProducer.OnRep_TotalEnergyGiven
// (Final, Native, Protected)
// Parameters:
// int32                                   LastTotalEnergyGivenValue                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoidEnergyProducer::OnRep_TotalEnergyGiven(int32 LastTotalEnergyGivenValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyProducer", "OnRep_TotalEnergyGiven");

	Params::VoidEnergyProducer_OnRep_TotalEnergyGiven Parms{};

	Parms.LastTotalEnergyGivenValue = LastTotalEnergyGivenValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidEnergyProducer.GetRemainingEnergy
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UVoidEnergyProducer::GetRemainingEnergy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyProducer", "GetRemainingEnergy");

	Params::VoidEnergyProducer_GetRemainingEnergy Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Halloween.VoidEnergyProducer.HasEnergyLeftToGive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVoidEnergyProducer::HasEnergyLeftToGive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyProducer", "HasEnergyLeftToGive");

	Params::VoidEnergyProducer_HasEnergyLeftToGive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Halloween.VoidEnergyGeneratorComponent.GetCurrentTimeDoneOnGenerator
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UVoidEnergyGeneratorComponent::GetCurrentTimeDoneOnGenerator(class ADBDPlayer* Player) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyGeneratorComponent", "GetCurrentTimeDoneOnGenerator");

	Params::VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function Halloween.VoidEnergyOrb.Cosmetic_DelayBeforeCollection
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       PlayerGivingOrbTo                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVoidEnergyOrb::Cosmetic_DelayBeforeCollection(class ADBDPlayer* PlayerGivingOrbTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrb", "Cosmetic_DelayBeforeCollection");

	Params::VoidEnergyOrb_Cosmetic_DelayBeforeCollection Parms{};

	Parms.PlayerGivingOrbTo = PlayerGivingOrbTo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.VoidEnergyOrb.Cosmetic_OnOrbDisappearWithCollection
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       PlayerGivingOrbTo                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVoidEnergyOrb::Cosmetic_OnOrbDisappearWithCollection(class ADBDPlayer* PlayerGivingOrbTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrb", "Cosmetic_OnOrbDisappearWithCollection");

	Params::VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection Parms{};

	Parms.PlayerGivingOrbTo = PlayerGivingOrbTo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.VoidEnergyOrb.Cosmetic_OnOrbDisappearWithoutCollection
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void AVoidEnergyOrb::Cosmetic_OnOrbDisappearWithoutCollection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrb", "Cosmetic_OnOrbDisappearWithoutCollection");

	UObject::ProcessEvent(Func, nullptr);
}


// Function Halloween.VoidEnergyOrb.Cosmetic_OnOrbSpawned
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       PlayerGivingOrbTo                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AVoidEnergyOrb::Cosmetic_OnOrbSpawned(class ADBDPlayer* PlayerGivingOrbTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrb", "Cosmetic_OnOrbSpawned");

	Params::VoidEnergyOrb_Cosmetic_OnOrbSpawned Parms{};

	Parms.PlayerGivingOrbTo = PlayerGivingOrbTo;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.VoidEnergyOrb.PlaceOrbInQueue
// (Final, Native, Private, BlueprintCallable)

void AVoidEnergyOrb::PlaceOrbInQueue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrb", "PlaceOrbInQueue");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidEnergyOrbSpawner.Authority_GiveVoidEnergyToPlayer
// (Final, Native, Private)
// Parameters:
// EVoidEnergyType                         VoidEnergyType                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   VoidEnergyToAdd                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoidEnergyOrbSpawner::Authority_GiveVoidEnergyToPlayer(const EVoidEnergyType VoidEnergyType, const int32 VoidEnergyToAdd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrbSpawner", "Authority_GiveVoidEnergyToPlayer");

	Params::VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer Parms{};

	Parms.VoidEnergyType = VoidEnergyType;
	Parms.VoidEnergyToAdd = VoidEnergyToAdd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidEnergyOrbSpawner.Authority_KillerDownSurvivor
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVoidEnergyOrbSpawner::Authority_KillerDownSurvivor(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrbSpawner", "Authority_KillerDownSurvivor");

	Params::VoidEnergyOrbSpawner_Authority_KillerDownSurvivor Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidEnergyOrbSpawner.Authority_SurvivorBlindKiller
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVoidEnergyOrbSpawner::Authority_SurvivorBlindKiller(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrbSpawner", "Authority_SurvivorBlindKiller");

	Params::VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidEnergyOrbSpawner.Authority_SurvivorStunKiller
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UVoidEnergyOrbSpawner::Authority_SurvivorStunKiller(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrbSpawner", "Authority_SurvivorStunKiller");

	Params::VoidEnergyOrbSpawner_Authority_SurvivorStunKiller Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidEnergyOrbSpawner.Authority_TimerSpawnVoidEnergyOrb
// (Final, Native, Private)
// Parameters:
// struct FOrbProperties                   OrbProperties                                          (ConstParm, Parm, NativeAccessSpecifierPublic)

void UVoidEnergyOrbSpawner::Authority_TimerSpawnVoidEnergyOrb(const struct FOrbProperties& OrbProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrbSpawner", "Authority_TimerSpawnVoidEnergyOrb");

	Params::VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb Parms{};

	Parms.OrbProperties = std::move(OrbProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidEnergyOrbSpawner.Multicast_SpawnVoidEnergyOrb
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// struct FOrbProperties                   OrbProperties                                          (ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)

void UVoidEnergyOrbSpawner::Multicast_SpawnVoidEnergyOrb(const struct FOrbProperties& OrbProperties)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidEnergyOrbSpawner", "Multicast_SpawnVoidEnergyOrb");

	Params::VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb Parms{};

	Parms.OrbProperties = std::move(OrbProperties);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidZonePlayerComponent.Authority_OnExecutionerCageTeleportedOutOfVoidZone
// (Final, Native, Private)

void UVoidZonePlayerComponent::Authority_OnExecutionerCageTeleportedOutOfVoidZone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidZonePlayerComponent", "Authority_OnExecutionerCageTeleportedOutOfVoidZone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidZonePlayerComponent.Authority_OnInteractionEnd
// (Final, Native, Private)

void UVoidZonePlayerComponent::Authority_OnInteractionEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidZonePlayerComponent", "Authority_OnInteractionEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidZonePlayerComponent.Cosmetic_OnPlayerTeleported
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    TeleportIntoVoid                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoidZonePlayerComponent::Cosmetic_OnPlayerTeleported(bool TeleportIntoVoid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidZonePlayerComponent", "Cosmetic_OnPlayerTeleported");

	Params::VoidZonePlayerComponent_Cosmetic_OnPlayerTeleported Parms{};

	Parms.TeleportIntoVoid = TeleportIntoVoid;

	UObject::ProcessEvent(Func, &Parms);
}


// Function Halloween.VoidZonePlayerComponent.OnLocallyObservedChanged
// (Final, Native, Protected)

void UVoidZonePlayerComponent::OnLocallyObservedChanged()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidZonePlayerComponent", "OnLocallyObservedChanged");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function Halloween.VoidZonePlayerComponent.PlayerDreamStateChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsInDreamworld                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    LocallyObservedChanged                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVoidZonePlayerComponent::PlayerDreamStateChanged(bool IsInDreamworld, bool LocallyObservedChanged)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("VoidZonePlayerComponent", "PlayerDreamStateChanged");

	Params::VoidZonePlayerComponent_PlayerDreamStateChanged Parms{};

	Parms.IsInDreamworld = IsInDreamworld;
	Parms.LocallyObservedChanged = LocallyObservedChanged;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

