#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: S3Command

#include "Basic.hpp"


namespace SDK
{

// ScriptStruct S3Command.AccessKey
// 0x0020 (0x0020 - 0x0000)
struct FAccessKey final
{
public:
	class FString                                 KeyId;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Key;                                               // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAccessKey) == 0x000008, "Wrong alignment on FAccessKey");
static_assert(sizeof(FAccessKey) == 0x000020, "Wrong size on FAccessKey");
static_assert(offsetof(FAccessKey, KeyId) == 0x000000, "Member 'FAccessKey::KeyId' has a wrong offset!");
static_assert(offsetof(FAccessKey, Key) == 0x000010, "Member 'FAccessKey::Key' has a wrong offset!");

// ScriptStruct S3Command.EmblemTunableItem
// 0x0018 (0x0018 - 0x0000)
struct FEmblemTunableItem final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Value;                                             // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmblemTunableItem) == 0x000008, "Wrong alignment on FEmblemTunableItem");
static_assert(sizeof(FEmblemTunableItem) == 0x000018, "Wrong size on FEmblemTunableItem");
static_assert(offsetof(FEmblemTunableItem, ID) == 0x000000, "Member 'FEmblemTunableItem::ID' has a wrong offset!");
static_assert(offsetof(FEmblemTunableItem, Value) == 0x000010, "Member 'FEmblemTunableItem::Value' has a wrong offset!");

// ScriptStruct S3Command.EmblemThreshold
// 0x0010 (0x0010 - 0x0000)
struct FEmblemThreshold final
{
public:
	TArray<int32>                                 Thresholds;                                        // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmblemThreshold) == 0x000008, "Wrong alignment on FEmblemThreshold");
static_assert(sizeof(FEmblemThreshold) == 0x000010, "Wrong size on FEmblemThreshold");
static_assert(offsetof(FEmblemThreshold, Thresholds) == 0x000000, "Member 'FEmblemThreshold::Thresholds' has a wrong offset!");

// ScriptStruct S3Command.EmblemTunableData
// 0x0060 (0x0060 - 0x0000)
struct FEmblemTunableData final
{
public:
	TArray<struct FEmblemTunableItem>             EmblemValues;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FEmblemThreshold>  EmblemThresholds;                                  // 0x0010(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmblemTunableData) == 0x000008, "Wrong alignment on FEmblemTunableData");
static_assert(sizeof(FEmblemTunableData) == 0x000060, "Wrong size on FEmblemTunableData");
static_assert(offsetof(FEmblemTunableData, EmblemValues) == 0x000000, "Member 'FEmblemTunableData::EmblemValues' has a wrong offset!");
static_assert(offsetof(FEmblemTunableData, EmblemThresholds) == 0x000010, "Member 'FEmblemTunableData::EmblemThresholds' has a wrong offset!");

// ScriptStruct S3Command.RankThresholdsData
// 0x0028 (0x0028 - 0x0000)
struct FRankThresholdsData final
{
public:
	TArray<int32>                                 PipsRequired;                                      // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ResetStartingPips;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          ResetStartingPips_IsSet;                           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankThresholdsData) == 0x000008, "Wrong alignment on FRankThresholdsData");
static_assert(sizeof(FRankThresholdsData) == 0x000028, "Wrong size on FRankThresholdsData");
static_assert(offsetof(FRankThresholdsData, PipsRequired) == 0x000000, "Member 'FRankThresholdsData::PipsRequired' has a wrong offset!");
static_assert(offsetof(FRankThresholdsData, ResetStartingPips) == 0x000010, "Member 'FRankThresholdsData::ResetStartingPips' has a wrong offset!");
static_assert(offsetof(FRankThresholdsData, ResetStartingPips_IsSet) == 0x000020, "Member 'FRankThresholdsData::ResetStartingPips_IsSet' has a wrong offset!");

// ScriptStruct S3Command.RankGroupData
// 0x0018 (0x0018 - 0x0000)
struct FRankGroupData final
{
public:
	TArray<double>                                EmblemThreshold;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         RankThreshold;                                     // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRankGroupData) == 0x000008, "Wrong alignment on FRankGroupData");
static_assert(sizeof(FRankGroupData) == 0x000018, "Wrong size on FRankGroupData");
static_assert(offsetof(FRankGroupData, EmblemThreshold) == 0x000000, "Member 'FRankGroupData::EmblemThreshold' has a wrong offset!");
static_assert(offsetof(FRankGroupData, RankThreshold) == 0x000010, "Member 'FRankGroupData::RankThreshold' has a wrong offset!");

// ScriptStruct S3Command.RankGroups
// 0x0020 (0x0020 - 0x0000)
struct FRankGroups final
{
public:
	TArray<struct FRankGroupData>                 KillerRankGroup;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRankGroupData>                 SurvivorRankGroup;                                 // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankGroups) == 0x000008, "Wrong alignment on FRankGroups");
static_assert(sizeof(FRankGroups) == 0x000020, "Wrong size on FRankGroups");
static_assert(offsetof(FRankGroups, KillerRankGroup) == 0x000000, "Member 'FRankGroups::KillerRankGroup' has a wrong offset!");
static_assert(offsetof(FRankGroups, SurvivorRankGroup) == 0x000010, "Member 'FRankGroups::SurvivorRankGroup' has a wrong offset!");

// ScriptStruct S3Command.RankResetDateData
// 0x0010 (0x0010 - 0x0000)
struct FRankResetDateData final
{
public:
	int32                                         StartYear;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartMonth;                                        // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetDay;                                          // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResetHour;                                         // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankResetDateData) == 0x000004, "Wrong alignment on FRankResetDateData");
static_assert(sizeof(FRankResetDateData) == 0x000010, "Wrong size on FRankResetDateData");
static_assert(offsetof(FRankResetDateData, StartYear) == 0x000000, "Member 'FRankResetDateData::StartYear' has a wrong offset!");
static_assert(offsetof(FRankResetDateData, StartMonth) == 0x000004, "Member 'FRankResetDateData::StartMonth' has a wrong offset!");
static_assert(offsetof(FRankResetDateData, ResetDay) == 0x000008, "Member 'FRankResetDateData::ResetDay' has a wrong offset!");
static_assert(offsetof(FRankResetDateData, ResetHour) == 0x00000C, "Member 'FRankResetDateData::ResetHour' has a wrong offset!");

// ScriptStruct S3Command.RankGlobalData
// 0x0038 (0x0038 - 0x0000)
struct FRankGlobalData final
{
public:
	int32                                         NoPipLossRankThreshold;                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NoRankLossThreshold;                               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BaseTrialPips;                                     // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPips;                                           // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         NoPositivePipGameTypes;                            // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          NoPositivePipGameTypes_IsSet;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRankResetDateData>             RankResetDates;                                    // 0x0028(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankGlobalData) == 0x000008, "Wrong alignment on FRankGlobalData");
static_assert(sizeof(FRankGlobalData) == 0x000038, "Wrong size on FRankGlobalData");
static_assert(offsetof(FRankGlobalData, NoPipLossRankThreshold) == 0x000000, "Member 'FRankGlobalData::NoPipLossRankThreshold' has a wrong offset!");
static_assert(offsetof(FRankGlobalData, NoRankLossThreshold) == 0x000004, "Member 'FRankGlobalData::NoRankLossThreshold' has a wrong offset!");
static_assert(offsetof(FRankGlobalData, BaseTrialPips) == 0x000008, "Member 'FRankGlobalData::BaseTrialPips' has a wrong offset!");
static_assert(offsetof(FRankGlobalData, MaxPips) == 0x00000C, "Member 'FRankGlobalData::MaxPips' has a wrong offset!");
static_assert(offsetof(FRankGlobalData, NoPositivePipGameTypes) == 0x000010, "Member 'FRankGlobalData::NoPositivePipGameTypes' has a wrong offset!");
static_assert(offsetof(FRankGlobalData, NoPositivePipGameTypes_IsSet) == 0x000020, "Member 'FRankGlobalData::NoPositivePipGameTypes_IsSet' has a wrong offset!");
static_assert(offsetof(FRankGlobalData, RankResetDates) == 0x000028, "Member 'FRankGlobalData::RankResetDates' has a wrong offset!");

// ScriptStruct S3Command.RankDefinitionData
// 0x0080 (0x0080 - 0x0000)
struct FRankDefinitionData final
{
public:
	struct FRankThresholdsData                    RankThreshold;                                     // 0x0000(0x0028)(NativeAccessSpecifierPublic)
	struct FRankGroups                            RankGroupDefinition;                               // 0x0028(0x0020)(NativeAccessSpecifierPublic)
	struct FRankGlobalData                        GlobalData;                                        // 0x0048(0x0038)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FRankDefinitionData) == 0x000008, "Wrong alignment on FRankDefinitionData");
static_assert(sizeof(FRankDefinitionData) == 0x000080, "Wrong size on FRankDefinitionData");
static_assert(offsetof(FRankDefinitionData, RankThreshold) == 0x000000, "Member 'FRankDefinitionData::RankThreshold' has a wrong offset!");
static_assert(offsetof(FRankDefinitionData, RankGroupDefinition) == 0x000028, "Member 'FRankDefinitionData::RankGroupDefinition' has a wrong offset!");
static_assert(offsetof(FRankDefinitionData, GlobalData) == 0x000048, "Member 'FRankDefinitionData::GlobalData' has a wrong offset!");

}

