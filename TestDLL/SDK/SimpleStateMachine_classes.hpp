#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SimpleStateMachine

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class SimpleStateMachine.SimpleStateMachineBaseState
// 0x0018 (0x0048 - 0x0030)
class USimpleStateMachineBaseState : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USimpleStateMachine*                    _stateMachine;                                     // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleStateMachineBaseState">();
	}
	static class USimpleStateMachineBaseState* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleStateMachineBaseState>();
	}
};
static_assert(alignof(USimpleStateMachineBaseState) == 0x000008, "Wrong alignment on USimpleStateMachineBaseState");
static_assert(sizeof(USimpleStateMachineBaseState) == 0x000048, "Wrong size on USimpleStateMachineBaseState");
static_assert(offsetof(USimpleStateMachineBaseState, _stateMachine) == 0x000040, "Member 'USimpleStateMachineBaseState::_stateMachine' has a wrong offset!");

// Class SimpleStateMachine.SimpleStateMachineBaseTransition
// 0x0020 (0x0050 - 0x0030)
class USimpleStateMachineBaseTransition : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USimpleStateMachine*                    _stateMachine;                                     // 0x0048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleStateMachineBaseTransition">();
	}
	static class USimpleStateMachineBaseTransition* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleStateMachineBaseTransition>();
	}
};
static_assert(alignof(USimpleStateMachineBaseTransition) == 0x000008, "Wrong alignment on USimpleStateMachineBaseTransition");
static_assert(sizeof(USimpleStateMachineBaseTransition) == 0x000050, "Wrong size on USimpleStateMachineBaseTransition");
static_assert(offsetof(USimpleStateMachineBaseTransition, _stateMachine) == 0x000048, "Member 'USimpleStateMachineBaseTransition::_stateMachine' has a wrong offset!");

// Class SimpleStateMachine.SimpleStateMachine
// 0x0320 (0x03C8 - 0x00A8)
class USimpleStateMachine final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USimpleStateMachineBaseState> _defaultStateClass;                                // 0x00C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<TSubclassOf<class USimpleStateMachineBaseState>> _stateClasses;                                     // 0x00C8(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<TSubclassOf<class USimpleStateMachineBaseTransition>> _transitionsClasses;                               // 0x0118(0x0050)(Edit, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class USimpleStateMachineBaseState*           _defaultState;                                     // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USimpleStateMachineBaseState*           _currentState;                                     // 0x0178(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x190];                                    // 0x0180(0x0190)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class USimpleStateMachineBaseState*> _states;                                           // 0x0310(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_360[0x60];                                     // 0x0360(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _debugPrintState;                                  // 0x03C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleStateMachine">();
	}
	static class USimpleStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleStateMachine>();
	}
};
static_assert(alignof(USimpleStateMachine) == 0x000008, "Wrong alignment on USimpleStateMachine");
static_assert(sizeof(USimpleStateMachine) == 0x0003C8, "Wrong size on USimpleStateMachine");
static_assert(offsetof(USimpleStateMachine, _defaultStateClass) == 0x0000C0, "Member 'USimpleStateMachine::_defaultStateClass' has a wrong offset!");
static_assert(offsetof(USimpleStateMachine, _stateClasses) == 0x0000C8, "Member 'USimpleStateMachine::_stateClasses' has a wrong offset!");
static_assert(offsetof(USimpleStateMachine, _transitionsClasses) == 0x000118, "Member 'USimpleStateMachine::_transitionsClasses' has a wrong offset!");
static_assert(offsetof(USimpleStateMachine, _defaultState) == 0x000170, "Member 'USimpleStateMachine::_defaultState' has a wrong offset!");
static_assert(offsetof(USimpleStateMachine, _currentState) == 0x000178, "Member 'USimpleStateMachine::_currentState' has a wrong offset!");
static_assert(offsetof(USimpleStateMachine, _states) == 0x000310, "Member 'USimpleStateMachine::_states' has a wrong offset!");
static_assert(offsetof(USimpleStateMachine, _debugPrintState) == 0x0003C0, "Member 'USimpleStateMachine::_debugPrintState' has a wrong offset!");

}

