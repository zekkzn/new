#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDInput

#include "Basic.hpp"

#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// Enum DBDInput.EAnalogCursorDataType
// NumValues: 0x000D
enum class EAnalogCursorDataType : uint8
{
	MaxSpeedDefault                          = 0,
	MaxSpeedDefaultSlow                      = 1,
	MaxSpeedStickyDefault                    = 2,
	MaxSpeedStickySlow                       = 3,
	MaxSpeedStickyButtonMedium               = 4,
	MaxSpeedStickyButtonLarge                = 5,
	MaxSpeedDefaultBloodweb                  = 6,
	MaxSpeedStickyBloodweb                   = 7,
	CustomAcceleration                       = 8,
	DeadZone                                 = 9,
	HandheldSpeedBoostFactor                 = 10,
	DragZoneMaxDelta                         = 11,
	EAnalogCursorDataType_MAX                = 12,
};

// Enum DBDInput.EDBDInputMode
// NumValues: 0x0004
enum class EDBDInputMode : uint8
{
	None                                     = 0,
	UI                                       = 1,
	Game                                     = 2,
	EDBDInputMode_MAX                        = 3,
};

// Enum DBDInput.EUIActionType
// NumValues: 0x0016
enum class EUIActionType : uint8
{
	None                                     = 0,
	Accept                                   = 1,
	Cancel                                   = 2,
	Previous                                 = 3,
	Next                                     = 4,
	PreviousSecondary                        = 5,
	NextSecondary                            = 6,
	ArchivesSurvivorSlot                     = 7,
	ArchivesKillerAndSurvivorSlot            = 8,
	ArchivesKillerSlot                       = 9,
	FaceButtonLeft                           = 10,
	FaceButtonTop                            = 11,
	Scroll                                   = 12,
	Options                                  = 13,
	Extra1                                   = 14,
	Extra2                                   = 15,
	Extra3                                   = 16,
	Extra4                                   = 17,
	Select                                   = 18,
	Rotate                                   = 19,
	ToggleRightStickMode                     = 20,
	EUIActionType_MAX                        = 21,
};

// ScriptStruct DBDInput.AnalogCursorData
// 0x0010 (0x0018 - 0x0008)
struct FAnalogCursorData final : public FDBDTableRowBase
{
public:
	EAnalogCursorDataType                         Type;                                              // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScalesWithDPI;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAnalogCursorData) == 0x000008, "Wrong alignment on FAnalogCursorData");
static_assert(sizeof(FAnalogCursorData) == 0x000018, "Wrong size on FAnalogCursorData");
static_assert(offsetof(FAnalogCursorData, Type) == 0x000008, "Member 'FAnalogCursorData::Type' has a wrong offset!");
static_assert(offsetof(FAnalogCursorData, Value) == 0x00000C, "Member 'FAnalogCursorData::Value' has a wrong offset!");
static_assert(offsetof(FAnalogCursorData, ScalesWithDPI) == 0x000010, "Member 'FAnalogCursorData::ScalesWithDPI' has a wrong offset!");

}

