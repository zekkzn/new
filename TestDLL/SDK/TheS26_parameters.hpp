#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheS26

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "TheS26_structs.hpp"


namespace SDK::Params
{

// Function TheS26.BlastMine.Client_TrapActivatedLoudNotification
// 0x0060 (0x0060 - 0x0000)
struct BlastMine_Client_TrapActivatedLoudNotification final
{
public:
	struct FTransform                             Location;                                          // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMine_Client_TrapActivatedLoudNotification) == 0x000010, "Wrong alignment on BlastMine_Client_TrapActivatedLoudNotification");
static_assert(sizeof(BlastMine_Client_TrapActivatedLoudNotification) == 0x000060, "Wrong size on BlastMine_Client_TrapActivatedLoudNotification");
static_assert(offsetof(BlastMine_Client_TrapActivatedLoudNotification, Location) == 0x000000, "Member 'BlastMine_Client_TrapActivatedLoudNotification::Location' has a wrong offset!");

// Function TheS26.BlastMine.ThrowBubbleIndicator_Cosmetic
// 0x0060 (0x0060 - 0x0000)
struct BlastMine_ThrowBubbleIndicator_Cosmetic final
{
public:
	struct FTransform                             Location;                                          // 0x0000(0x0060)(Parm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMine_ThrowBubbleIndicator_Cosmetic) == 0x000010, "Wrong alignment on BlastMine_ThrowBubbleIndicator_Cosmetic");
static_assert(sizeof(BlastMine_ThrowBubbleIndicator_Cosmetic) == 0x000060, "Wrong size on BlastMine_ThrowBubbleIndicator_Cosmetic");
static_assert(offsetof(BlastMine_ThrowBubbleIndicator_Cosmetic, Location) == 0x000000, "Member 'BlastMine_ThrowBubbleIndicator_Cosmetic::Location' has a wrong offset!");

// Function TheS26.BlastMine.TrapAttachedToGenerator_Cosmetic
// 0x0008 (0x0008 - 0x0000)
struct BlastMine_TrapAttachedToGenerator_Cosmetic final
{
public:
	class AGenerator*                             TrappedGenerator;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMine_TrapAttachedToGenerator_Cosmetic) == 0x000008, "Wrong alignment on BlastMine_TrapAttachedToGenerator_Cosmetic");
static_assert(sizeof(BlastMine_TrapAttachedToGenerator_Cosmetic) == 0x000008, "Wrong size on BlastMine_TrapAttachedToGenerator_Cosmetic");
static_assert(offsetof(BlastMine_TrapAttachedToGenerator_Cosmetic, TrappedGenerator) == 0x000000, "Member 'BlastMine_TrapAttachedToGenerator_Cosmetic::TrappedGenerator' has a wrong offset!");

// DelegateFunction TheS26.BlastMineFirecracker.OnTrapRemovedBlueprintEvent__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BlastMineFirecracker_OnTrapRemovedBlueprintEvent__DelegateSignature final
{
public:
	EBlastMineRemovedReason                       RemovedReason;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMineFirecracker_OnTrapRemovedBlueprintEvent__DelegateSignature) == 0x000001, "Wrong alignment on BlastMineFirecracker_OnTrapRemovedBlueprintEvent__DelegateSignature");
static_assert(sizeof(BlastMineFirecracker_OnTrapRemovedBlueprintEvent__DelegateSignature) == 0x000001, "Wrong size on BlastMineFirecracker_OnTrapRemovedBlueprintEvent__DelegateSignature");
static_assert(offsetof(BlastMineFirecracker_OnTrapRemovedBlueprintEvent__DelegateSignature, RemovedReason) == 0x000000, "Member 'BlastMineFirecracker_OnTrapRemovedBlueprintEvent__DelegateSignature::RemovedReason' has a wrong offset!");

// Function TheS26.BlastMineKickSensor.Authority_OnKickChargeablePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct BlastMineKickSensor_Authority_OnKickChargeablePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMineKickSensor_Authority_OnKickChargeablePercentChanged) == 0x000008, "Wrong alignment on BlastMineKickSensor_Authority_OnKickChargeablePercentChanged");
static_assert(sizeof(BlastMineKickSensor_Authority_OnKickChargeablePercentChanged) == 0x000010, "Wrong size on BlastMineKickSensor_Authority_OnKickChargeablePercentChanged");
static_assert(offsetof(BlastMineKickSensor_Authority_OnKickChargeablePercentChanged, ChargeableComponent) == 0x000000, "Member 'BlastMineKickSensor_Authority_OnKickChargeablePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(BlastMineKickSensor_Authority_OnKickChargeablePercentChanged, PercentCompletionChange) == 0x000008, "Member 'BlastMineKickSensor_Authority_OnKickChargeablePercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(BlastMineKickSensor_Authority_OnKickChargeablePercentChanged, TotalPercentComplete) == 0x00000C, "Member 'BlastMineKickSensor_Authority_OnKickChargeablePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function TheS26.BlastMineVisibilityController.AddFXSystem
// 0x0008 (0x0008 - 0x0000)
struct BlastMineVisibilityController_AddFXSystem final
{
public:
	class UFXSystemComponent*                     System;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMineVisibilityController_AddFXSystem) == 0x000008, "Wrong alignment on BlastMineVisibilityController_AddFXSystem");
static_assert(sizeof(BlastMineVisibilityController_AddFXSystem) == 0x000008, "Wrong size on BlastMineVisibilityController_AddFXSystem");
static_assert(offsetof(BlastMineVisibilityController_AddFXSystem, System) == 0x000000, "Member 'BlastMineVisibilityController_AddFXSystem::System' has a wrong offset!");

// Function TheS26.BlastMineVisibilityController.AddMeshComponent
// 0x0008 (0x0008 - 0x0000)
struct BlastMineVisibilityController_AddMeshComponent final
{
public:
	class UMeshComponent*                         MeshComponent;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMineVisibilityController_AddMeshComponent) == 0x000008, "Wrong alignment on BlastMineVisibilityController_AddMeshComponent");
static_assert(sizeof(BlastMineVisibilityController_AddMeshComponent) == 0x000008, "Wrong size on BlastMineVisibilityController_AddMeshComponent");
static_assert(offsetof(BlastMineVisibilityController_AddMeshComponent, MeshComponent) == 0x000000, "Member 'BlastMineVisibilityController_AddMeshComponent::MeshComponent' has a wrong offset!");

// Function TheS26.BlastMineVisibilityController.IsVisible
// 0x0001 (0x0001 - 0x0000)
struct BlastMineVisibilityController_IsVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BlastMineVisibilityController_IsVisible) == 0x000001, "Wrong alignment on BlastMineVisibilityController_IsVisible");
static_assert(sizeof(BlastMineVisibilityController_IsVisible) == 0x000001, "Wrong size on BlastMineVisibilityController_IsVisible");
static_assert(offsetof(BlastMineVisibilityController_IsVisible, ReturnValue) == 0x000000, "Member 'BlastMineVisibilityController_IsVisible::ReturnValue' has a wrong offset!");

// Function TheS26.Counterforce.Multicast_ShowTotemAura
// 0x0008 (0x0008 - 0x0000)
struct Counterforce_Multicast_ShowTotemAura final
{
public:
	class ATotem*                                 Totem;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Counterforce_Multicast_ShowTotemAura) == 0x000008, "Wrong alignment on Counterforce_Multicast_ShowTotemAura");
static_assert(sizeof(Counterforce_Multicast_ShowTotemAura) == 0x000008, "Wrong size on Counterforce_Multicast_ShowTotemAura");
static_assert(offsetof(Counterforce_Multicast_ShowTotemAura, Totem) == 0x000000, "Member 'Counterforce_Multicast_ShowTotemAura::Totem' has a wrong offset!");

}

