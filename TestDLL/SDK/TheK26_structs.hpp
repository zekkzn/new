#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK26

#include "Basic.hpp"

#include "DataTableUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum TheK26.EK26ProjectileState
// NumValues: 0x0007
enum class EK26ProjectileState : uint8
{
	Invalid                                  = 0,
	Summoning                                = 1,
	Idle                                     = 2,
	FollowingPath                            = 3,
	OffPath                                  = 4,
	Destroyed                                = 5,
	EK26ProjectileState_MAX                  = 6,
};

// Enum TheK26.EK26AmmoState
// NumValues: 0x0004
enum class EK26AmmoState : uint8
{
	Available                                = 0,
	Expiring                                 = 1,
	Recharging                               = 2,
	EK26AmmoState_MAX                        = 3,
};

// Enum TheK26.EK26AmmoCooldownReason
// NumValues: 0x0003
enum class EK26AmmoCooldownReason : uint8
{
	Expired                                  = 0,
	Fired                                    = 1,
	EK26AmmoCooldownReason_MAX               = 2,
};

// Enum TheK26.FK26AttachedCrowRemovalReason
// NumValues: 0x0009
enum class EFK26AttachedCrowRemovalReason : uint8
{
	Invalid                                  = 0,
	LockerEnter                              = 1,
	SurvivorDamagedByCrow                    = 2,
	SurvivorDowned                           = 3,
	SurvivorPickedUp                         = 4,
	CrowFlashlighted                         = 5,
	RemoveInteraction                        = 6,
	ForceRemove                              = 7,
	FK26AttachedCrowRemovalReason_MAX        = 8,
};

// ScriptStruct TheK26.K26ProjectileStateDetails
// 0x0108 (0x0108 - 0x0000)
struct FK26ProjectileStateDetails final
{
public:
	struct FDBDTunableRowHandle                   VisualScaleX;                                      // 0x0000(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   VisualScaleY;                                      // 0x0028(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   VisualScaleZ;                                      // 0x0050(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   HitboxScaleX;                                      // 0x0078(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   HitboxScaleY;                                      // 0x00A0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDBDTunableRowHandle                   HitboxScaleZ;                                      // 0x00C8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UStaticMesh*                            HitBoxStaticMesh;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DebugColor;                                        // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK26ProjectileStateDetails) == 0x000008, "Wrong alignment on FK26ProjectileStateDetails");
static_assert(sizeof(FK26ProjectileStateDetails) == 0x000108, "Wrong size on FK26ProjectileStateDetails");
static_assert(offsetof(FK26ProjectileStateDetails, VisualScaleX) == 0x000000, "Member 'FK26ProjectileStateDetails::VisualScaleX' has a wrong offset!");
static_assert(offsetof(FK26ProjectileStateDetails, VisualScaleY) == 0x000028, "Member 'FK26ProjectileStateDetails::VisualScaleY' has a wrong offset!");
static_assert(offsetof(FK26ProjectileStateDetails, VisualScaleZ) == 0x000050, "Member 'FK26ProjectileStateDetails::VisualScaleZ' has a wrong offset!");
static_assert(offsetof(FK26ProjectileStateDetails, HitboxScaleX) == 0x000078, "Member 'FK26ProjectileStateDetails::HitboxScaleX' has a wrong offset!");
static_assert(offsetof(FK26ProjectileStateDetails, HitboxScaleY) == 0x0000A0, "Member 'FK26ProjectileStateDetails::HitboxScaleY' has a wrong offset!");
static_assert(offsetof(FK26ProjectileStateDetails, HitboxScaleZ) == 0x0000C8, "Member 'FK26ProjectileStateDetails::HitboxScaleZ' has a wrong offset!");
static_assert(offsetof(FK26ProjectileStateDetails, HitBoxStaticMesh) == 0x0000F0, "Member 'FK26ProjectileStateDetails::HitBoxStaticMesh' has a wrong offset!");
static_assert(offsetof(FK26ProjectileStateDetails, DebugColor) == 0x0000F8, "Member 'FK26ProjectileStateDetails::DebugColor' has a wrong offset!");

// ScriptStruct TheK26.K26AttachmentStatus
// 0x0002 (0x0002 - 0x0000)
struct FK26AttachmentStatus final
{
public:
	EFK26AttachedCrowRemovalReason                LastRemovalReason;                                 // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAttached;                                        // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK26AttachmentStatus) == 0x000001, "Wrong alignment on FK26AttachmentStatus");
static_assert(sizeof(FK26AttachmentStatus) == 0x000002, "Wrong size on FK26AttachmentStatus");
static_assert(offsetof(FK26AttachmentStatus, LastRemovalReason) == 0x000000, "Member 'FK26AttachmentStatus::LastRemovalReason' has a wrong offset!");
static_assert(offsetof(FK26AttachmentStatus, IsAttached) == 0x000001, "Member 'FK26AttachmentStatus::IsAttached' has a wrong offset!");

// ScriptStruct TheK26.ActorPairQueryCrowPair
// 0x0028 (0x0028 - 0x0000)
struct FActorPairQueryCrowPair final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class AK26CrowProjectile*                     CrowProjectile;                                    // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FActorPairQueryCrowPair) == 0x000008, "Wrong alignment on FActorPairQueryCrowPair");
static_assert(sizeof(FActorPairQueryCrowPair) == 0x000028, "Wrong size on FActorPairQueryCrowPair");
static_assert(offsetof(FActorPairQueryCrowPair, CrowProjectile) == 0x000020, "Member 'FActorPairQueryCrowPair::CrowProjectile' has a wrong offset!");

// ScriptStruct TheK26.K26Path
// 0x0018 (0x0018 - 0x0000)
struct FK26Path final
{
public:
	class AK26PathPart*                           PathEndArrow;                                      // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AK26PathPart*>                   PathParts;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK26Path) == 0x000008, "Wrong alignment on FK26Path");
static_assert(sizeof(FK26Path) == 0x000018, "Wrong size on FK26Path");
static_assert(offsetof(FK26Path, PathEndArrow) == 0x000000, "Member 'FK26Path::PathEndArrow' has a wrong offset!");
static_assert(offsetof(FK26Path, PathParts) == 0x000008, "Member 'FK26Path::PathParts' has a wrong offset!");

// ScriptStruct TheK26.K26PathData
// 0x0058 (0x0058 - 0x0000)
struct FK26PathData final
{
public:
	bool                                          IsInUse;                                           // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisibleToKiller;                                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisibleForSurvivors;                             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxVisibleIndex;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        PathPartLocations;                                 // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       PathPartRotations;                                 // 0x0018(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FVector                                PathEndLocation;                                   // 0x0028(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               PathEndRotation;                                   // 0x0040(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK26PathData) == 0x000008, "Wrong alignment on FK26PathData");
static_assert(sizeof(FK26PathData) == 0x000058, "Wrong size on FK26PathData");
static_assert(offsetof(FK26PathData, IsInUse) == 0x000000, "Member 'FK26PathData::IsInUse' has a wrong offset!");
static_assert(offsetof(FK26PathData, IsVisibleToKiller) == 0x000001, "Member 'FK26PathData::IsVisibleToKiller' has a wrong offset!");
static_assert(offsetof(FK26PathData, IsVisibleForSurvivors) == 0x000002, "Member 'FK26PathData::IsVisibleForSurvivors' has a wrong offset!");
static_assert(offsetof(FK26PathData, MaxVisibleIndex) == 0x000004, "Member 'FK26PathData::MaxVisibleIndex' has a wrong offset!");
static_assert(offsetof(FK26PathData, PathPartLocations) == 0x000008, "Member 'FK26PathData::PathPartLocations' has a wrong offset!");
static_assert(offsetof(FK26PathData, PathPartRotations) == 0x000018, "Member 'FK26PathData::PathPartRotations' has a wrong offset!");
static_assert(offsetof(FK26PathData, PathEndLocation) == 0x000028, "Member 'FK26PathData::PathEndLocation' has a wrong offset!");
static_assert(offsetof(FK26PathData, PathEndRotation) == 0x000040, "Member 'FK26PathData::PathEndRotation' has a wrong offset!");

// ScriptStruct TheK26.K26SurvivorStatus
// 0x0048 (0x0048 - 0x0000)
struct FK26SurvivorStatus final
{
public:
	bool                                          IsPowerAttached;                                   // 0x0000(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAttachementAuraOn;                               // 0x0001(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastAttachmentTime;                                // 0x0004(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastDetachmentTime;                                // 0x0008(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastRemovalStarted;                                // 0x000C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastRemovalStopped;                                // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastHitTime;                                       // 0x0014(0x0004)(ZeroConstructor, Transient, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK26AttachedCrow*                       StatusIndicator;                                   // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          OwningSurvivor;                                    // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK26KillerInstinctStatusEffect*         K26KillerInstinctStatusEffect;                     // 0x0028(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         IdleCrowsBeingTouched;                             // 0x0030(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FTimerHandle                           KillerInstinctTimeHandler;                         // 0x0040(0x0008)(Transient, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK26SurvivorStatus) == 0x000008, "Wrong alignment on FK26SurvivorStatus");
static_assert(sizeof(FK26SurvivorStatus) == 0x000048, "Wrong size on FK26SurvivorStatus");
static_assert(offsetof(FK26SurvivorStatus, IsPowerAttached) == 0x000000, "Member 'FK26SurvivorStatus::IsPowerAttached' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, IsAttachementAuraOn) == 0x000001, "Member 'FK26SurvivorStatus::IsAttachementAuraOn' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, LastAttachmentTime) == 0x000004, "Member 'FK26SurvivorStatus::LastAttachmentTime' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, LastDetachmentTime) == 0x000008, "Member 'FK26SurvivorStatus::LastDetachmentTime' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, LastRemovalStarted) == 0x00000C, "Member 'FK26SurvivorStatus::LastRemovalStarted' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, LastRemovalStopped) == 0x000010, "Member 'FK26SurvivorStatus::LastRemovalStopped' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, LastHitTime) == 0x000014, "Member 'FK26SurvivorStatus::LastHitTime' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, StatusIndicator) == 0x000018, "Member 'FK26SurvivorStatus::StatusIndicator' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, OwningSurvivor) == 0x000020, "Member 'FK26SurvivorStatus::OwningSurvivor' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, K26KillerInstinctStatusEffect) == 0x000028, "Member 'FK26SurvivorStatus::K26KillerInstinctStatusEffect' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, IdleCrowsBeingTouched) == 0x000030, "Member 'FK26SurvivorStatus::IdleCrowsBeingTouched' has a wrong offset!");
static_assert(offsetof(FK26SurvivorStatus, KillerInstinctTimeHandler) == 0x000040, "Member 'FK26SurvivorStatus::KillerInstinctTimeHandler' has a wrong offset!");

}

