#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_K10

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "UMG_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"


namespace SDK::Params
{

// Function WBP_K10.WBP_K10_C.SetNightmareVisibility
// 0x0028 (0x0028 - 0x0000)
struct WBP_K10_C_SetNightmareVisibility final
{
public:
	ESleepingUIState                              Sleep_State;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sleep_Immunity;                                    // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESleepingUIState                              Temp_byte_Variable_2;                              // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_4;                              // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_5;                              // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESleepingUIState                              Temp_byte_Variable_6;                              // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_1;                           // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_7;                              // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_8;                              // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_9;                              // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_2;                           // 0x001E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1F[0x1];                                       // 0x001F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Greater_FloatFloat_A_ImplicitCast;        // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K10_C_SetNightmareVisibility) == 0x000008, "Wrong alignment on WBP_K10_C_SetNightmareVisibility");
static_assert(sizeof(WBP_K10_C_SetNightmareVisibility) == 0x000028, "Wrong size on WBP_K10_C_SetNightmareVisibility");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Sleep_State) == 0x000000, "Member 'WBP_K10_C_SetNightmareVisibility::Sleep_State' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Sleep_Immunity) == 0x000008, "Member 'WBP_K10_C_SetNightmareVisibility::Sleep_Immunity' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_bool_Variable) == 0x000010, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000011, "Member 'WBP_K10_C_SetNightmareVisibility::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable) == 0x000012, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable_1) == 0x000013, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable_2) == 0x000014, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, K2Node_Select_Default) == 0x000015, "Member 'WBP_K10_C_SetNightmareVisibility::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable_3) == 0x000016, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable_4) == 0x000017, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable_5) == 0x000018, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable_6) == 0x000019, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, K2Node_Select_Default_1) == 0x00001A, "Member 'WBP_K10_C_SetNightmareVisibility::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable_7) == 0x00001B, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable_8) == 0x00001C, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, Temp_byte_Variable_9) == 0x00001D, "Member 'WBP_K10_C_SetNightmareVisibility::Temp_byte_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, K2Node_Select_Default_2) == 0x00001E, "Member 'WBP_K10_C_SetNightmareVisibility::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareVisibility, CallFunc_Greater_FloatFloat_A_ImplicitCast) == 0x000020, "Member 'WBP_K10_C_SetNightmareVisibility::CallFunc_Greater_FloatFloat_A_ImplicitCast' has a wrong offset!");

// Function WBP_K10.WBP_K10_C.SetNightmareData
// 0x0050 (0x0050 - 0x0000)
struct WBP_K10_C_SetNightmareData final
{
public:
	class UNightmareStatusData*                   KillerData;                                        // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          StateChange;                                       // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x2];                                        // 0x000A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue_1;        // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_SetNightmareVisibility_Sleep_Immunity_ImplicitCast; // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K10_C_SetNightmareData) == 0x000008, "Wrong alignment on WBP_K10_C_SetNightmareData");
static_assert(sizeof(WBP_K10_C_SetNightmareData) == 0x000050, "Wrong size on WBP_K10_C_SetNightmareData");
static_assert(offsetof(WBP_K10_C_SetNightmareData, KillerData) == 0x000000, "Member 'WBP_K10_C_SetNightmareData::KillerData' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, StateChange) == 0x000008, "Member 'WBP_K10_C_SetNightmareData::StateChange' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000009, "Member 'WBP_K10_C_SetNightmareData::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x00000C, "Member 'WBP_K10_C_SetNightmareData::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, K2Node_SwitchEnum_CmpSuccess) == 0x000010, "Member 'WBP_K10_C_SetNightmareData::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_Multiply_FloatFloat_ReturnValue_1) == 0x000014, "Member 'WBP_K10_C_SetNightmareData::CallFunc_Multiply_FloatFloat_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'WBP_K10_C_SetNightmareData::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000020, "Member 'WBP_K10_C_SetNightmareData::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000028, "Member 'WBP_K10_C_SetNightmareData::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000030, "Member 'WBP_K10_C_SetNightmareData::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_PlayAnimation_ReturnValue) == 0x000038, "Member 'WBP_K10_C_SetNightmareData::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_BooleanAND_ReturnValue) == 0x000040, "Member 'WBP_K10_C_SetNightmareData::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_SetNightmareData, CallFunc_SetNightmareVisibility_Sleep_Immunity_ImplicitCast) == 0x000048, "Member 'WBP_K10_C_SetNightmareData::CallFunc_SetNightmareVisibility_Sleep_Immunity_ImplicitCast' has a wrong offset!");

// Function WBP_K10.WBP_K10_C.SetKillerData
// 0x0098 (0x0098 - 0x0000)
struct WBP_K10_C_SetKillerData final
{
public:
	struct FPlayerStatusViewData                  Data;                                              // 0x0000(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_K10_C_SetKillerData) == 0x000008, "Wrong alignment on WBP_K10_C_SetKillerData");
static_assert(sizeof(WBP_K10_C_SetKillerData) == 0x000098, "Wrong size on WBP_K10_C_SetKillerData");
static_assert(offsetof(WBP_K10_C_SetKillerData, Data) == 0x000000, "Member 'WBP_K10_C_SetKillerData::Data' has a wrong offset!");

// Function WBP_K10.WBP_K10_C.ExecuteUbergraph_WBP_K10
// 0x00B8 (0x00B8 - 0x0000)
struct WBP_K10_C_ExecuteUbergraph_WBP_K10 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerStatusViewData                  K2Node_Event_data;                                 // 0x0008(0x0098)(ConstParm)
	class UNightmareStatusData*                   K2Node_DynamicCast_AsNightmare_Status_Data;        // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNightmareStatusData*                   CallFunc_SpawnObject_ReturnValue;                  // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K10_C_ExecuteUbergraph_WBP_K10) == 0x000008, "Wrong alignment on WBP_K10_C_ExecuteUbergraph_WBP_K10");
static_assert(sizeof(WBP_K10_C_ExecuteUbergraph_WBP_K10) == 0x0000B8, "Wrong size on WBP_K10_C_ExecuteUbergraph_WBP_K10");
static_assert(offsetof(WBP_K10_C_ExecuteUbergraph_WBP_K10, EntryPoint) == 0x000000, "Member 'WBP_K10_C_ExecuteUbergraph_WBP_K10::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_ExecuteUbergraph_WBP_K10, K2Node_Event_data) == 0x000008, "Member 'WBP_K10_C_ExecuteUbergraph_WBP_K10::K2Node_Event_data' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_ExecuteUbergraph_WBP_K10, K2Node_DynamicCast_AsNightmare_Status_Data) == 0x0000A0, "Member 'WBP_K10_C_ExecuteUbergraph_WBP_K10::K2Node_DynamicCast_AsNightmare_Status_Data' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_ExecuteUbergraph_WBP_K10, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'WBP_K10_C_ExecuteUbergraph_WBP_K10::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_K10_C_ExecuteUbergraph_WBP_K10, CallFunc_SpawnObject_ReturnValue) == 0x0000B0, "Member 'WBP_K10_C_ExecuteUbergraph_WBP_K10::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");

}

