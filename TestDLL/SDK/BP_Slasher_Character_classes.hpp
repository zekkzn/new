#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Slasher_Character

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "TheClown_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Slasher_Character.BP_Slasher_Character_C
// 0x0410 (0x1EB0 - 0x1AA0)
#pragma pack(push, 0x1)
class alignas(0x10) ABP_Slasher_Character_C : public ASlasherPlayer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x1AA0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          ChainsawObstruction;                               // 0x1AA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URangedExplosiveEffectHandlerComponent* RangedExplosiveEffectHandler;                      // 0x1AB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_KillerScoringComponent_C*           KillerScoringComponent;                            // 0x1AB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USlasherFootstepPerceptionComponent_C*  SlasherFootstepPerceptionComponent;                // 0x1AC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USignificanceManagerComponent*          SignificanceManager;                               // 0x1AC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USlasherTerrorRadiusEmitterComponent*   SlasherTerrorRadiusEmitter;                        // 0x1AD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBPNearestOutsideMapBoundsLocator_C*    BPNearestOutsideMapBoundsLocator;                  // 0x1AD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPositionLagCompensationComponent*      PositionLagCompensation;                           // 0x1AE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCharacterOptimizer*                    CharacterOptimizer;                                // 0x1AE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWiggleMotionComponent*                 WiggleMotion;                                      // 0x1AF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEtherealComponent*                     Ethereal;                                          // 0x1AF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UKillerFlashlightSFXComponent*          KillerFlashlightSFX;                               // 0x1B00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractionAnalyticsComponent*         InteractionAnalytics;                              // 0x1B08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBlindFlashlightTargetFXComponent*      BlindFlashlightTargetFX;                           // 0x1B10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFlashlightableComponent*               BodyFlashlightable;                                // 0x1B18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFlashlightableComponent*               EyesFlashlightable;                                // 0x1B20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_KillerLeftFootGroundDetector_C*     LeftFootGroundDetector;                            // 0x1B28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_KillerRightFootGroundDetector_C*    RightFootGroundDetector;                           // 0x1B30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UQuestEventsHandler*                    QuestEventsHandler;                                // 0x1B38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_RedStainComponent_C*                RedStainComponent;                                 // 0x1B40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGameEventListenerCollectionComponent*  GameEventListenerCollection;                       // 0x1B48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsulePlayerOverlapComponent*         PawnDetector;                                      // 0x1B50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UScreenSpaceLocationComponent*          ScreenSpaceLocation_MiddleT;                       // 0x1B58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Vignette_EndGame_Top;                            // 0x1B60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UEndGameEffectsComponent_C*             EndGameEffectsComponent;                           // 0x1B68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCameraComponent*                       Camera1;                                           // 0x1B70(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USlasherOutlineUpdateStrategy*          SlasherOutlineUpdateStrategy;                      // 0x1B78(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCustomizedAudioComponent*              CustomizedAudio;                                   // 0x1B80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  BlindedPostProcess_new;                            // 0x1B88(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackZone_004;                                    // 0x1B90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USphereComponent*                       AudioAmbientDetector;                              // 0x1B98(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackZone_Wedge_Large;                            // 0x1BA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackZone_Wedge_Standard;                         // 0x1BA8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  VignetteBloodlust;                                 // 0x1BB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackZoneHigh_003;                                // 0x1BB8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackZoneHigh_002;                                // 0x1BC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackZoneHigh_001;                                // 0x1BC8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          ObstructionShape;                                  // 0x1BD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackZone_003;                                    // 0x1BD8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackZone_002;                                    // 0x1BE0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   AttackZone_001;                                    // 0x1BE8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        AttackZonePivot;                                   // 0x1BF0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak_Audio_Killer;                                   // 0x1BF8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCapsuleComponent*                      InteractionDetector;                               // 0x1C00(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        CamperDropOffPoint;                                // 0x1C08(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDBDOutlineComponent*                   DBDOutline;                                        // 0x1C10(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCustomizedSkeletalMesh*                CustomizedSkeletalMesh;                            // 0x1C18(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_Mesh2SoundPlayer_C*                 BP_Mesh2SoundPlayer;                               // 0x1C20(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          BlinkAttackLockZone;                               // 0x1C28(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UScreenSpaceLocationComponent*          ScreenSpaceLocation_LeftT;                         // 0x1C30(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UScreenSpaceLocationComponent*          ScreenSpaceLocation_RightT;                        // 0x1C38(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Vignette_LeftB;                                  // 0x1C40(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UScreenSpaceLocationComponent*          ScreenSpaceLocation_LeftB;                         // 0x1C48(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Vignette_RightB;                                 // 0x1C50(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UScreenSpaceLocationComponent*          ScreenSpaceLocation_RightB;                        // 0x1C58(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class ULoudNoiseHUDIndicator*                 LoudNoiseHUDIndicator;                             // 0x1C60(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               Fx_FSbloodfx;                                      // 0x1C68(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Distortion_55E19FBE44A263E2F58D6CBD8B8F6FF5; // 0x1C70(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_0_Fade_55E19FBE44A263E2F58D6CBD8B8F6FF5;  // 0x1C74(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_0__Direction_55E19FBE44A263E2F58D6CBD8B8F6FF5; // 0x1C78(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C79[0x7];                                     // 0x1C79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_0;                                        // 0x1C80(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         TML_LungeAttack_Vignette_C6A1D26A45B8D21BE38076A15A900F67; // 0x1C88(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TML_LungeAttack__Direction_C6A1D26A45B8D21BE38076A15A900F67; // 0x1C8C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C8D[0x3];                                     // 0x1C8D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TML_LungeAttack;                                   // 0x1C90(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         BloodSplatterOpacityAnim_NewTrack_0_C8565C8848DC851A61C85CA0D1C69D9F; // 0x1C98(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BloodSplatterOpacityAnim__Direction_C8565C8848DC851A61C85CA0D1C69D9F; // 0x1C9C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C9D[0x3];                                     // 0x1C9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BloodSplatterOpacityAnim;                          // 0x1CA0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         BloodSplatterFrameAnim_NewTrack_0_89AF70DC41EF75E7CD3BF6B72CCE267B; // 0x1CA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            BloodSplatterFrameAnim__Direction_89AF70DC41EF75E7CD3BF6B72CCE267B; // 0x1CAC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CAD[0x3];                                     // 0x1CAD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     BloodSplatterFrameAnim;                            // 0x1CB0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Bloodlust_Timeline_Blend_7510578B48E7070D9984B9923F94253F; // 0x1CB8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Bloodlust_Timeline__Direction_7510578B48E7070D9984B9923F94253F; // 0x1CBC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CBD[0x3];                                     // 0x1CBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Bloodlust_Timeline;                                // 0x1CC0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         Timeline_1_Dissolve_99584B454ECDABDE86BE6E8CD0241B00; // 0x1CC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            Timeline_1__Direction_99584B454ECDABDE86BE6E8CD0241B00; // 0x1CCC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CCD[0x3];                                     // 0x1CCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     Timeline_1;                                        // 0x1CD0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        BaseTurnRate;                                      // 0x1CD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseLookUpRate;                                    // 0x1CE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1CE8[0x8];                                     // 0x1CE8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             CenterOfWorld;                                     // 0x1CF0(0x0060)(Edit, BlueprintVisible, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Attack;                                            // 0x1D50(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D51[0x7];                                     // 0x1D51(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        IsTurning;                                         // 0x1D58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CharacterHeadMesh;                                 // 0x1D60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class USkinnedMeshComponent*                  MeshMachette;                                      // 0x1D68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               Trap_Material;                                     // 0x1D70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          TrapPlacementValid;                                // 0x1D78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D79[0x7];                                     // 0x1D79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Trap_Indicator_Offset;                             // 0x1D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        BaseMaxWalkSpeed;                                  // 0x1D88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        baseTerrorRadius;                                  // 0x1D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ACamperPlayer*                          SurvivorBeingKilled;                               // 0x1D98(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FString                                 DissolveMaterialGroupName;                         // 0x1DA0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 FirstPersonMaterialGroupName;                      // 0x1DB0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 DissolveGroupName;                                 // 0x1DC0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 FirstPersonDissolve;                               // 0x1DD0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	class FString                                 FirstPersonGroupName;                              // 0x1DE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash)
	bool                                          IsDissolving;                                      // 0x1DF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1DF1[0x3];                                     // 0x1DF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   Weapon;                                            // 0x1DF4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          RootMeshIsHeadOnly;                                // 0x1E00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E01[0x7];                                     // 0x1E01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TrapPlacementRaycastStart;                         // 0x1E08(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TrapPlacementRaycastEnd;                           // 0x1E20(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_Damage;                                        // 0x1E38(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_LockOn;                                        // 0x1E40(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BlindnessCurve;                                    // 0x1E48(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveFloat*                            BlindnessMaterialCurve;                            // 0x1E50(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_Stun;                                           // 0x1E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_Smoke;                                          // 0x1E60(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_Chase;                                          // 0x1E68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_Flashlight;                                     // 0x1E70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_SlasherBlood;                                   // 0x1E78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        DOF_Focus_Point;                                   // 0x1E80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               PP_LungeAttack;                                    // 0x1E88(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class FName                                   CameraSocketName;                                  // 0x1E90(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsSnowmanActive_;                                  // 0x1E9C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E9D[0x3];                                     // 0x1E9D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UDecalComponent*                        FakeShadowComponent;                               // 0x1EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdateStalkModeEffect(double StalkModePercent);
	void UpdateRageTierEffect(int32 PreviousTier, int32 CurrentTier);
	void UpdateDOF();
	void TML_LungeAttack__UpdateFunc();
	void TML_LungeAttack__FinishedFunc();
	void Timeline_1__UpdateFunc();
	void Timeline_1__FinishedFunc();
	void Timeline_0__UpdateFunc();
	void Timeline_0__FinishedFunc();
	void Telekinesis_On();
	void Telekinesis_Off();
	void Switch_Oni_Weapons_To_Normal();
	void Switch_Kanobo_to_Normal_Mode();
	void Switch_Kanobo_To_Demon_Mode();
	void Survivor_BoonRadius_Exit();
	void Survivor_BoonRadius_Enter();
	void StopBloodSplatter();
	void Stop_Travelling_PP();
	void Stop_Travelling_Dissolve();
	void Stop_Saliva_VFX();
	void Stop_Pounce_VFX();
	void StartDeathBedRelocateVignette();
	void StartDeathBedDissolve();
	void Start_Travelling_PP();
	void Start_Travelling_Dissolve();
	void Start_Saliva_VFX();
	void Start_Pounce_VFX();
	void SpawnFullScreenBlood();
	void SpawnFakeBullet();
	void ShowSyringe();
	void ShowGunBullet();
	void ShowDemonCosmetic();
	void Show_Oni_Katana();
	void ShouldUseFakeShadow(bool* UseFakeShadow);
	void ShouldShowBlackVignette(bool* Show);
	void SetPlayerExposedVFX();
	void SetMacheteCustomDepth();
	void SetHighlightedVFX();
	void SetDetectionZones(EAttackZoneSet Attack_Zones);
	void SetAudioSwitchSubKillerState(const class FString& SwitchState);
	void SetAttackDetectionZoneSet(EAttackZoneSet AttackZoneSet);
	void SetAnimationCrouchState(bool Crouched);
	void ResetMaterials();
	void ReceiveBeginPlay();
	void PostProcessBloodFX();
	void PlayBloodSplatter();
	void PlayBloodHitsEffects();
	void PlayAudioKillerGameStart();
	void OnStealthChanged(bool Stealth);
	void OnRangedExplosiveInRangeBegin(const struct FRangedExplosiveEffectData& EffectData);
	void ReturnToDemonMode();
	void OnLocallyObservedChanged();
	void OnLevelReadyToPlay();
	void OnIsKillingSurvivorWithMoriUpdated(bool IsKillingSurvivorWithMori);
	void OnIntroCompleted();
	void ReturnOniToNormal();
	void OnEscapeDoorActivated();
	void OnDestroyed_Event_Machete_Copy(class AActor* DestroyedActor);
	void OnClientRestart();
	void On_Execution();
	void NurseInvisible_On();
	void NurseInvisible_Off();
	void MergeLockOnDamageZones(bool Enable);
	void K22_WrongLanding(bool Wrong_Landing);
	void K22_SpawnWipeVFX();
	void K22_ReleaseBrother();
	void K22_QuickDissolveBrother();
	void K22_MembraneRecovery();
	void K22_MembraneDelete();
	void K22_JumpTrail_Deactivate();
	void K22_JumpTrail_Activate();
	void K22_Jump_Inactive();
	void K22_Jump_Active();
	void K22_IsAttachedLocker(bool IsAttachedLocker);
	void K22_HighlightSuccessfulAttackStop();
	void K22_HighlightSuccessfulAttack();
	void Killer_LungeAttack_Start();
	void Killer_LungeAttack_End();
	void K22_WrongLandingVignette(bool WrongLanding);
	void K22_HighlightMissJump_Stop();
	void K22_HighlightMissJump();
	void K22_HighlightDormantMain(bool IsDormantMain_);
	void K22_HighlightDormant(bool IsDormant_);
	void K22_DormantAttachedSlasher();
	void K22_DetachedFromSurvivor_VFX();
	void K22_BrotherDissolveLocker();
	void K22_BabyRespawn();
	void K22_BabyBloodDissolve();
	void K12_Killer_BombSmokeColor();
	void K22_AttachedToSurvivor_VFX();
	void K12_Killer_AntidoteEnd();
	void K12_Killer_AntidoteBegin();
	void K12_GetToxinVignette(EBombType Bomb_Type);
	void K12_GetAntidoteVignette();
	void K05_TrapImpactOff();
	void K12_Killer_RemoveVignette();
	void K05_TrapImpact();
	void K12_Killer_PlaceVignette();
	void K05_SetTrap();
	void K05_BloodDrops();
	void K04_TelekinesisOn();
	void K04_TelekinesisOff();
	void K04_InvisibleOn();
	void K04_InvisibleOff();
	void IsTrapPlacementValid(bool* Result);
	void IsPassivePhaseWalking(bool* Result);
	void HideSyringeOnStun();
	void HideSyringe();
	void HideGunBullet();
	void HideDemonCosmetic();
	void Hide_Oni_Katana_TPV();
	void Hide_Oni_Katana();
	void GetSlasherAudioComponent(class UAkComponent** Audio_Component);
	class USceneComponent* GetAttackZonePivot();
	void FX_WI_BloodDrops();
	void FX_TrapImpact_Off();
	void FX_TrapImpact();
	void FX_SetTrap();
	void IsActivePhaseWalking(bool* Result);
	void FX_BloodDropWipe();
	void Initialize_Blinding_FX_Component();
	void FX_BloodDrops();
	void Dissolve(bool Param_Dissolve);
	void DisplayAttackZones(bool Display);
	void DisableDemonMode();
	void Destroy_Blood_Orb();
	void DeactivateKnockoutVFX();
	void CreateSlasherBloodPP();
	void Cosmetic_OnPickUpEnd();
	void Cosmetic_OnDropCamperEnd();
	void Cosmetic_OnCancelCarry();
	void Camper_AntidoteBoostVignette_Start();
	void Camper_AntidoteBoostVignette_End();
	void Boon_Unbound();
	void BndEvt__CustomizedAudio_K2Node_ComponentBoundEvent_0_CustomizedAudioChangedDelegate__DelegateSignature(EAudioCustomizationCategory Category, const class FString& SwitchState);
	void BndEvt__BP_Slasher_Character__finisherMoriHandlerComponent_K2Node_ComponentBoundEvent_2_MoriAvailableDelegate__DelegateSignature(class ADBDPlayer* Killer);
	void BndEvt__BodyFlashlightable_K2Node_ComponentBoundEvent_2_OnFlashlightLitChangedEvent__DelegateSignature(bool IsLit);
	void BndEvt__BlindFlashlightable_K2Node_ComponentBoundEvent_1_OnFlashlightAddedRemovedEvent__DelegateSignature(const class UFlashlightComponent* Flashlight);
	void ExecuteUbergraph_BP_Slasher_Character(int32 EntryPoint);
	void BndEvt__BlindFlashlightable_K2Node_ComponentBoundEvent_0_OnFlashlightAddedRemovedEvent__DelegateSignature(const class UFlashlightComponent* Flashlight);
	void BndEvt___characterChaseVisualComponent_K2Node_ComponentBoundEvent_1_ActorComponentChaseEndSignature__DelegateSignature();
	void BndEvt___characterChaseVisualComponent_K2Node_ComponentBoundEvent_0_ActorComponentChaseStartSignature__DelegateSignature();
	void BloodSplatterOpacityAnim__UpdateFunc();
	void EvaluateBlackVignetteVisibility();
	void BloodSplatterOpacityAnim__FinishedFunc();
	void BloodSplatterFrameAnim__UpdateFunc();
	void BloodSplatterFrameAnim__FinishedFunc();
	void Bloodlust_Timeline__UpdateFunc();
	void Bloodlust_Timeline__FinishedFunc();
	void ApplyFirstPersonShaders();
	void AnimateLiquidSyringe();
	void AddFakeShadow();
	void AddBloodDrippingGKMoriMale();
	void ActivateVignetteOnWallCollision();
	void ActivateSacrificeCamBlood();
	void ActivatePounceStateVFX();
	void ActivatePlayerLightningVFX(const class UMaterialInstanceDynamic*& LightningFX, bool Intense);
	void ActivatePlayerGlitchVFX(const class UMaterialInstanceDynamic*& GlitchFX, const bool Face, bool Madness, bool Killer);
	void ActivatePlayerExposedVFX();
	void ActivateLocalPlayerExposedVFX();
	void ActivateKnockoutVFX();
	void ActivateFakeShadow(bool Activated);
	void ActivateEndGameVignette(bool IsActive);
	void ActivateAttemptEscapeVFX();

	bool LocallyObservedCharacterIsShowingFakeKillerStain() const;
	bool IsUncloaking() const;
	void IsFirstPerson(bool* First_Person) const;
	void GetTrapPlacementLocation_World(struct FVector* World_Location) const;
	struct FVector GetPlayerDropOffPoint() const;
	class UCustomizedSkeletalMesh* GetCustomizedSkeletalMesh() const;
	void GetCurrentStalkTier(double* CurrentTier) const;
	bool IsCloaking() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Slasher_Character_C">();
	}
	static class ABP_Slasher_Character_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Slasher_Character_C>();
	}
};
#pragma pack(pop)
static_assert(alignof(ABP_Slasher_Character_C) == 0x000010, "Wrong alignment on ABP_Slasher_Character_C");
static_assert(sizeof(ABP_Slasher_Character_C) == 0x001EB0, "Wrong size on ABP_Slasher_Character_C");
static_assert(offsetof(ABP_Slasher_Character_C, UberGraphFrame) == 0x001AA0, "Member 'ABP_Slasher_Character_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, ChainsawObstruction) == 0x001AA8, "Member 'ABP_Slasher_Character_C::ChainsawObstruction' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, RangedExplosiveEffectHandler) == 0x001AB0, "Member 'ABP_Slasher_Character_C::RangedExplosiveEffectHandler' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, KillerScoringComponent) == 0x001AB8, "Member 'ABP_Slasher_Character_C::KillerScoringComponent' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, SlasherFootstepPerceptionComponent) == 0x001AC0, "Member 'ABP_Slasher_Character_C::SlasherFootstepPerceptionComponent' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, SignificanceManager) == 0x001AC8, "Member 'ABP_Slasher_Character_C::SignificanceManager' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, SlasherTerrorRadiusEmitter) == 0x001AD0, "Member 'ABP_Slasher_Character_C::SlasherTerrorRadiusEmitter' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BPNearestOutsideMapBoundsLocator) == 0x001AD8, "Member 'ABP_Slasher_Character_C::BPNearestOutsideMapBoundsLocator' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, PositionLagCompensation) == 0x001AE0, "Member 'ABP_Slasher_Character_C::PositionLagCompensation' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, CharacterOptimizer) == 0x001AE8, "Member 'ABP_Slasher_Character_C::CharacterOptimizer' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, WiggleMotion) == 0x001AF0, "Member 'ABP_Slasher_Character_C::WiggleMotion' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Ethereal) == 0x001AF8, "Member 'ABP_Slasher_Character_C::Ethereal' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, KillerFlashlightSFX) == 0x001B00, "Member 'ABP_Slasher_Character_C::KillerFlashlightSFX' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, InteractionAnalytics) == 0x001B08, "Member 'ABP_Slasher_Character_C::InteractionAnalytics' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BlindFlashlightTargetFX) == 0x001B10, "Member 'ABP_Slasher_Character_C::BlindFlashlightTargetFX' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BodyFlashlightable) == 0x001B18, "Member 'ABP_Slasher_Character_C::BodyFlashlightable' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, EyesFlashlightable) == 0x001B20, "Member 'ABP_Slasher_Character_C::EyesFlashlightable' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, LeftFootGroundDetector) == 0x001B28, "Member 'ABP_Slasher_Character_C::LeftFootGroundDetector' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, RightFootGroundDetector) == 0x001B30, "Member 'ABP_Slasher_Character_C::RightFootGroundDetector' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, QuestEventsHandler) == 0x001B38, "Member 'ABP_Slasher_Character_C::QuestEventsHandler' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, RedStainComponent) == 0x001B40, "Member 'ABP_Slasher_Character_C::RedStainComponent' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, GameEventListenerCollection) == 0x001B48, "Member 'ABP_Slasher_Character_C::GameEventListenerCollection' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, PawnDetector) == 0x001B50, "Member 'ABP_Slasher_Character_C::PawnDetector' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, ScreenSpaceLocation_MiddleT) == 0x001B58, "Member 'ABP_Slasher_Character_C::ScreenSpaceLocation_MiddleT' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, P_Vignette_EndGame_Top) == 0x001B60, "Member 'ABP_Slasher_Character_C::P_Vignette_EndGame_Top' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, EndGameEffectsComponent) == 0x001B68, "Member 'ABP_Slasher_Character_C::EndGameEffectsComponent' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Camera1) == 0x001B70, "Member 'ABP_Slasher_Character_C::Camera1' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, SlasherOutlineUpdateStrategy) == 0x001B78, "Member 'ABP_Slasher_Character_C::SlasherOutlineUpdateStrategy' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, CustomizedAudio) == 0x001B80, "Member 'ABP_Slasher_Character_C::CustomizedAudio' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BlindedPostProcess_new) == 0x001B88, "Member 'ABP_Slasher_Character_C::BlindedPostProcess_new' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZone_004) == 0x001B90, "Member 'ABP_Slasher_Character_C::AttackZone_004' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AudioAmbientDetector) == 0x001B98, "Member 'ABP_Slasher_Character_C::AudioAmbientDetector' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZone_Wedge_Large) == 0x001BA0, "Member 'ABP_Slasher_Character_C::AttackZone_Wedge_Large' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZone_Wedge_Standard) == 0x001BA8, "Member 'ABP_Slasher_Character_C::AttackZone_Wedge_Standard' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, VignetteBloodlust) == 0x001BB0, "Member 'ABP_Slasher_Character_C::VignetteBloodlust' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZoneHigh_003) == 0x001BB8, "Member 'ABP_Slasher_Character_C::AttackZoneHigh_003' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZoneHigh_002) == 0x001BC0, "Member 'ABP_Slasher_Character_C::AttackZoneHigh_002' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZoneHigh_001) == 0x001BC8, "Member 'ABP_Slasher_Character_C::AttackZoneHigh_001' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, ObstructionShape) == 0x001BD0, "Member 'ABP_Slasher_Character_C::ObstructionShape' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZone_003) == 0x001BD8, "Member 'ABP_Slasher_Character_C::AttackZone_003' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZone_002) == 0x001BE0, "Member 'ABP_Slasher_Character_C::AttackZone_002' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZone_001) == 0x001BE8, "Member 'ABP_Slasher_Character_C::AttackZone_001' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, AttackZonePivot) == 0x001BF0, "Member 'ABP_Slasher_Character_C::AttackZonePivot' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Ak_Audio_Killer) == 0x001BF8, "Member 'ABP_Slasher_Character_C::Ak_Audio_Killer' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, InteractionDetector) == 0x001C00, "Member 'ABP_Slasher_Character_C::InteractionDetector' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, CamperDropOffPoint) == 0x001C08, "Member 'ABP_Slasher_Character_C::CamperDropOffPoint' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, DBDOutline) == 0x001C10, "Member 'ABP_Slasher_Character_C::DBDOutline' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, CustomizedSkeletalMesh) == 0x001C18, "Member 'ABP_Slasher_Character_C::CustomizedSkeletalMesh' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BP_Mesh2SoundPlayer) == 0x001C20, "Member 'ABP_Slasher_Character_C::BP_Mesh2SoundPlayer' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BlinkAttackLockZone) == 0x001C28, "Member 'ABP_Slasher_Character_C::BlinkAttackLockZone' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, ScreenSpaceLocation_LeftT) == 0x001C30, "Member 'ABP_Slasher_Character_C::ScreenSpaceLocation_LeftT' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, ScreenSpaceLocation_RightT) == 0x001C38, "Member 'ABP_Slasher_Character_C::ScreenSpaceLocation_RightT' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, P_Vignette_LeftB) == 0x001C40, "Member 'ABP_Slasher_Character_C::P_Vignette_LeftB' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, ScreenSpaceLocation_LeftB) == 0x001C48, "Member 'ABP_Slasher_Character_C::ScreenSpaceLocation_LeftB' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, P_Vignette_RightB) == 0x001C50, "Member 'ABP_Slasher_Character_C::P_Vignette_RightB' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, ScreenSpaceLocation_RightB) == 0x001C58, "Member 'ABP_Slasher_Character_C::ScreenSpaceLocation_RightB' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, LoudNoiseHUDIndicator) == 0x001C60, "Member 'ABP_Slasher_Character_C::LoudNoiseHUDIndicator' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Fx_FSbloodfx) == 0x001C68, "Member 'ABP_Slasher_Character_C::Fx_FSbloodfx' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Timeline_0_Distortion_55E19FBE44A263E2F58D6CBD8B8F6FF5) == 0x001C70, "Member 'ABP_Slasher_Character_C::Timeline_0_Distortion_55E19FBE44A263E2F58D6CBD8B8F6FF5' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Timeline_0_Fade_55E19FBE44A263E2F58D6CBD8B8F6FF5) == 0x001C74, "Member 'ABP_Slasher_Character_C::Timeline_0_Fade_55E19FBE44A263E2F58D6CBD8B8F6FF5' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Timeline_0__Direction_55E19FBE44A263E2F58D6CBD8B8F6FF5) == 0x001C78, "Member 'ABP_Slasher_Character_C::Timeline_0__Direction_55E19FBE44A263E2F58D6CBD8B8F6FF5' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Timeline_0) == 0x001C80, "Member 'ABP_Slasher_Character_C::Timeline_0' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, TML_LungeAttack_Vignette_C6A1D26A45B8D21BE38076A15A900F67) == 0x001C88, "Member 'ABP_Slasher_Character_C::TML_LungeAttack_Vignette_C6A1D26A45B8D21BE38076A15A900F67' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, TML_LungeAttack__Direction_C6A1D26A45B8D21BE38076A15A900F67) == 0x001C8C, "Member 'ABP_Slasher_Character_C::TML_LungeAttack__Direction_C6A1D26A45B8D21BE38076A15A900F67' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, TML_LungeAttack) == 0x001C90, "Member 'ABP_Slasher_Character_C::TML_LungeAttack' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BloodSplatterOpacityAnim_NewTrack_0_C8565C8848DC851A61C85CA0D1C69D9F) == 0x001C98, "Member 'ABP_Slasher_Character_C::BloodSplatterOpacityAnim_NewTrack_0_C8565C8848DC851A61C85CA0D1C69D9F' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BloodSplatterOpacityAnim__Direction_C8565C8848DC851A61C85CA0D1C69D9F) == 0x001C9C, "Member 'ABP_Slasher_Character_C::BloodSplatterOpacityAnim__Direction_C8565C8848DC851A61C85CA0D1C69D9F' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BloodSplatterOpacityAnim) == 0x001CA0, "Member 'ABP_Slasher_Character_C::BloodSplatterOpacityAnim' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BloodSplatterFrameAnim_NewTrack_0_89AF70DC41EF75E7CD3BF6B72CCE267B) == 0x001CA8, "Member 'ABP_Slasher_Character_C::BloodSplatterFrameAnim_NewTrack_0_89AF70DC41EF75E7CD3BF6B72CCE267B' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BloodSplatterFrameAnim__Direction_89AF70DC41EF75E7CD3BF6B72CCE267B) == 0x001CAC, "Member 'ABP_Slasher_Character_C::BloodSplatterFrameAnim__Direction_89AF70DC41EF75E7CD3BF6B72CCE267B' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BloodSplatterFrameAnim) == 0x001CB0, "Member 'ABP_Slasher_Character_C::BloodSplatterFrameAnim' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Bloodlust_Timeline_Blend_7510578B48E7070D9984B9923F94253F) == 0x001CB8, "Member 'ABP_Slasher_Character_C::Bloodlust_Timeline_Blend_7510578B48E7070D9984B9923F94253F' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Bloodlust_Timeline__Direction_7510578B48E7070D9984B9923F94253F) == 0x001CBC, "Member 'ABP_Slasher_Character_C::Bloodlust_Timeline__Direction_7510578B48E7070D9984B9923F94253F' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Bloodlust_Timeline) == 0x001CC0, "Member 'ABP_Slasher_Character_C::Bloodlust_Timeline' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Timeline_1_Dissolve_99584B454ECDABDE86BE6E8CD0241B00) == 0x001CC8, "Member 'ABP_Slasher_Character_C::Timeline_1_Dissolve_99584B454ECDABDE86BE6E8CD0241B00' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Timeline_1__Direction_99584B454ECDABDE86BE6E8CD0241B00) == 0x001CCC, "Member 'ABP_Slasher_Character_C::Timeline_1__Direction_99584B454ECDABDE86BE6E8CD0241B00' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Timeline_1) == 0x001CD0, "Member 'ABP_Slasher_Character_C::Timeline_1' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BaseTurnRate) == 0x001CD8, "Member 'ABP_Slasher_Character_C::BaseTurnRate' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BaseLookUpRate) == 0x001CE0, "Member 'ABP_Slasher_Character_C::BaseLookUpRate' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, CenterOfWorld) == 0x001CF0, "Member 'ABP_Slasher_Character_C::CenterOfWorld' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Attack) == 0x001D50, "Member 'ABP_Slasher_Character_C::Attack' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, IsTurning) == 0x001D58, "Member 'ABP_Slasher_Character_C::IsTurning' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, CharacterHeadMesh) == 0x001D60, "Member 'ABP_Slasher_Character_C::CharacterHeadMesh' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, MeshMachette) == 0x001D68, "Member 'ABP_Slasher_Character_C::MeshMachette' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Trap_Material) == 0x001D70, "Member 'ABP_Slasher_Character_C::Trap_Material' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, TrapPlacementValid) == 0x001D78, "Member 'ABP_Slasher_Character_C::TrapPlacementValid' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Trap_Indicator_Offset) == 0x001D80, "Member 'ABP_Slasher_Character_C::Trap_Indicator_Offset' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BaseMaxWalkSpeed) == 0x001D88, "Member 'ABP_Slasher_Character_C::BaseMaxWalkSpeed' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, baseTerrorRadius) == 0x001D90, "Member 'ABP_Slasher_Character_C::baseTerrorRadius' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, SurvivorBeingKilled) == 0x001D98, "Member 'ABP_Slasher_Character_C::SurvivorBeingKilled' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, DissolveMaterialGroupName) == 0x001DA0, "Member 'ABP_Slasher_Character_C::DissolveMaterialGroupName' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, FirstPersonMaterialGroupName) == 0x001DB0, "Member 'ABP_Slasher_Character_C::FirstPersonMaterialGroupName' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, DissolveGroupName) == 0x001DC0, "Member 'ABP_Slasher_Character_C::DissolveGroupName' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, FirstPersonDissolve) == 0x001DD0, "Member 'ABP_Slasher_Character_C::FirstPersonDissolve' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, FirstPersonGroupName) == 0x001DE0, "Member 'ABP_Slasher_Character_C::FirstPersonGroupName' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, IsDissolving) == 0x001DF0, "Member 'ABP_Slasher_Character_C::IsDissolving' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, Weapon) == 0x001DF4, "Member 'ABP_Slasher_Character_C::Weapon' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, RootMeshIsHeadOnly) == 0x001E00, "Member 'ABP_Slasher_Character_C::RootMeshIsHeadOnly' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, TrapPlacementRaycastStart) == 0x001E08, "Member 'ABP_Slasher_Character_C::TrapPlacementRaycastStart' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, TrapPlacementRaycastEnd) == 0x001E20, "Member 'ABP_Slasher_Character_C::TrapPlacementRaycastEnd' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, MID_Damage) == 0x001E38, "Member 'ABP_Slasher_Character_C::MID_Damage' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, MID_LockOn) == 0x001E40, "Member 'ABP_Slasher_Character_C::MID_LockOn' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BlindnessCurve) == 0x001E48, "Member 'ABP_Slasher_Character_C::BlindnessCurve' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, BlindnessMaterialCurve) == 0x001E50, "Member 'ABP_Slasher_Character_C::BlindnessMaterialCurve' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, PP_Stun) == 0x001E58, "Member 'ABP_Slasher_Character_C::PP_Stun' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, PP_Smoke) == 0x001E60, "Member 'ABP_Slasher_Character_C::PP_Smoke' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, PP_Chase) == 0x001E68, "Member 'ABP_Slasher_Character_C::PP_Chase' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, PP_Flashlight) == 0x001E70, "Member 'ABP_Slasher_Character_C::PP_Flashlight' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, PP_SlasherBlood) == 0x001E78, "Member 'ABP_Slasher_Character_C::PP_SlasherBlood' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, DOF_Focus_Point) == 0x001E80, "Member 'ABP_Slasher_Character_C::DOF_Focus_Point' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, PP_LungeAttack) == 0x001E88, "Member 'ABP_Slasher_Character_C::PP_LungeAttack' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, CameraSocketName) == 0x001E90, "Member 'ABP_Slasher_Character_C::CameraSocketName' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, IsSnowmanActive_) == 0x001E9C, "Member 'ABP_Slasher_Character_C::IsSnowmanActive_' has a wrong offset!");
static_assert(offsetof(ABP_Slasher_Character_C, FakeShadowComponent) == 0x001EA0, "Member 'ABP_Slasher_Character_C::FakeShadowComponent' has a wrong offset!");

}

