#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheShape

#include "Basic.hpp"

#include "DeadByDaylight_classes.hpp"
#include "DBDAnimation_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "DBDAttack_classes.hpp"


namespace SDK
{

// Class TheShape.KillStandingInteractionDefinition
// 0x0000 (0x0780 - 0x0780)
class UKillStandingInteractionDefinition final : public UInteractionDefinition
{
public:
	float                                         _slasherFacingTolerance;                           // 0x0778(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_77C[0x4];                                      // 0x077C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KillStandingInteractionDefinition">();
	}
	static class UKillStandingInteractionDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKillStandingInteractionDefinition>();
	}
};
static_assert(alignof(UKillStandingInteractionDefinition) == 0x000010, "Wrong alignment on UKillStandingInteractionDefinition");
static_assert(sizeof(UKillStandingInteractionDefinition) == 0x000780, "Wrong size on UKillStandingInteractionDefinition");
static_assert(offsetof(UKillStandingInteractionDefinition, _slasherFacingTolerance) == 0x000778, "Member 'UKillStandingInteractionDefinition::_slasherFacingTolerance' has a wrong offset!");

// Class TheShape.SaveTheBestForLast
// 0x0018 (0x0438 - 0x0420)
class USaveTheBestForLast final : public UPerk
{
public:
	int32                                         TokensLostOnHit;                                   // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         _maxTokens[0x3];                                   // 0x0424(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _cooldownPerToken;                                 // 0x0430(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_434[0x4];                                      // 0x0434(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCooldownPerToken() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SaveTheBestForLast">();
	}
	static class USaveTheBestForLast* GetDefaultObj()
	{
		return GetDefaultObjImpl<USaveTheBestForLast>();
	}
};
static_assert(alignof(USaveTheBestForLast) == 0x000008, "Wrong alignment on USaveTheBestForLast");
static_assert(sizeof(USaveTheBestForLast) == 0x000438, "Wrong size on USaveTheBestForLast");
static_assert(offsetof(USaveTheBestForLast, TokensLostOnHit) == 0x000420, "Member 'USaveTheBestForLast::TokensLostOnHit' has a wrong offset!");
static_assert(offsetof(USaveTheBestForLast, _maxTokens) == 0x000424, "Member 'USaveTheBestForLast::_maxTokens' has a wrong offset!");
static_assert(offsetof(USaveTheBestForLast, _cooldownPerToken) == 0x000430, "Member 'USaveTheBestForLast::_cooldownPerToken' has a wrong offset!");

// Class TheShape.ShapeAnimInstance
// 0x0010 (0x0730 - 0x0720)
class UShapeAnimInstance final : public UKillerAnimInstance
{
public:
	bool                                          _isTier3Active;                                    // 0x0720(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UEvilWithinComponent*                   _evilWithinComponent;                              // 0x0728(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShapeAnimInstance">();
	}
	static class UShapeAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShapeAnimInstance>();
	}
};
static_assert(alignof(UShapeAnimInstance) == 0x000010, "Wrong alignment on UShapeAnimInstance");
static_assert(sizeof(UShapeAnimInstance) == 0x000730, "Wrong size on UShapeAnimInstance");
static_assert(offsetof(UShapeAnimInstance, _isTier3Active) == 0x000720, "Member 'UShapeAnimInstance::_isTier3Active' has a wrong offset!");
static_assert(offsetof(UShapeAnimInstance, _evilWithinComponent) == 0x000728, "Member 'UShapeAnimInstance::_evilWithinComponent' has a wrong offset!");

// Class TheShape.ShapePounceAttackOpenSubstate
// 0x0010 (0x0140 - 0x0130)
class UShapePounceAttackOpenSubstate final : public UPounceAttackOpenSubstate
{
public:
	TArray<struct FDBDTunableRowHandle>           _tierDurations;                                    // 0x0130(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	float GetShapePounceAttackOpenDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShapePounceAttackOpenSubstate">();
	}
	static class UShapePounceAttackOpenSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShapePounceAttackOpenSubstate>();
	}
};
static_assert(alignof(UShapePounceAttackOpenSubstate) == 0x000008, "Wrong alignment on UShapePounceAttackOpenSubstate");
static_assert(sizeof(UShapePounceAttackOpenSubstate) == 0x000140, "Wrong size on UShapePounceAttackOpenSubstate");
static_assert(offsetof(UShapePounceAttackOpenSubstate, _tierDurations) == 0x000130, "Member 'UShapePounceAttackOpenSubstate::_tierDurations' has a wrong offset!");

}

