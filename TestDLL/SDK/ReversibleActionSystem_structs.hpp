#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ReversibleActionSystem

#include "Basic.hpp"

#include "Engine_structs.hpp"


namespace SDK
{

// ScriptStruct ReversibleActionSystem.ActionPredictionKey
// 0x0004 (0x0004 - 0x0000)
struct FActionPredictionKey final
{
public:
	int32                                         _keyValue;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FActionPredictionKey) == 0x000004, "Wrong alignment on FActionPredictionKey");
static_assert(sizeof(FActionPredictionKey) == 0x000004, "Wrong size on FActionPredictionKey");
static_assert(offsetof(FActionPredictionKey, _keyValue) == 0x000000, "Member 'FActionPredictionKey::_keyValue' has a wrong offset!");

// ScriptStruct ReversibleActionSystem.ExecuteInstantActionParams
// 0x0008 (0x0008 - 0x0000)
struct FExecuteInstantActionParams final
{
public:
	struct FActionPredictionKey                   PredictionKey;                                     // 0x0000(0x0004)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictionDelay;                                   // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FExecuteInstantActionParams) == 0x000004, "Wrong alignment on FExecuteInstantActionParams");
static_assert(sizeof(FExecuteInstantActionParams) == 0x000008, "Wrong size on FExecuteInstantActionParams");
static_assert(offsetof(FExecuteInstantActionParams, PredictionKey) == 0x000000, "Member 'FExecuteInstantActionParams::PredictionKey' has a wrong offset!");
static_assert(offsetof(FExecuteInstantActionParams, PredictionDelay) == 0x000004, "Member 'FExecuteInstantActionParams::PredictionDelay' has a wrong offset!");

// ScriptStruct ReversibleActionSystem.PendingInstantAction
// 0x0020 (0x0020 - 0x0000)
struct FPendingInstantAction final
{
public:
	class UBaseReversibleInstantActionHandler*    Handler;                                           // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle;                                       // 0x0018(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingInstantAction) == 0x000008, "Wrong alignment on FPendingInstantAction");
static_assert(sizeof(FPendingInstantAction) == 0x000020, "Wrong size on FPendingInstantAction");
static_assert(offsetof(FPendingInstantAction, Handler) == 0x000000, "Member 'FPendingInstantAction::Handler' has a wrong offset!");
static_assert(offsetof(FPendingInstantAction, TimerHandle) == 0x000018, "Member 'FPendingInstantAction::TimerHandle' has a wrong offset!");

// ScriptStruct ReversibleActionSystem.PendingInstantActionList
// 0x0010 (0x0010 - 0x0000)
struct FPendingInstantActionList final
{
public:
	TArray<struct FPendingInstantAction>          Actions;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPendingInstantActionList) == 0x000008, "Wrong alignment on FPendingInstantActionList");
static_assert(sizeof(FPendingInstantActionList) == 0x000010, "Wrong size on FPendingInstantActionList");
static_assert(offsetof(FPendingInstantActionList, Actions) == 0x000000, "Member 'FPendingInstantActionList::Actions' has a wrong offset!");

// ScriptStruct ReversibleActionSystem.InstantActionList
// 0x0010 (0x0010 - 0x0000)
struct FInstantActionList final
{
public:
	TArray<class UBaseReversibleInstantActionHandler*> Actions;                                           // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInstantActionList) == 0x000008, "Wrong alignment on FInstantActionList");
static_assert(sizeof(FInstantActionList) == 0x000010, "Wrong size on FInstantActionList");
static_assert(offsetof(FInstantActionList, Actions) == 0x000000, "Member 'FInstantActionList::Actions' has a wrong offset!");

}

