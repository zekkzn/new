#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIManagers

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "SlateCore_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDUIManagers_structs.hpp"


namespace SDK
{

// Class DBDUIManagers.DBDTextManager
// 0x0020 (0x0058 - 0x0038)
class UDBDTextManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetLargeTextEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DBDTextManager">();
	}
	static class UDBDTextManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDBDTextManager>();
	}
};
static_assert(alignof(UDBDTextManager) == 0x000008, "Wrong alignment on UDBDTextManager");
static_assert(sizeof(UDBDTextManager) == 0x000058, "Wrong size on UDBDTextManager");

// Class DBDUIManagers.UIAnalyticsManager
// 0x0058 (0x0090 - 0x0038)
class UUIAnalyticsManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x48];                                      // 0x0038(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _currentTabName;                                   // 0x0080(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIAnalyticsManager">();
	}
	static class UUIAnalyticsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIAnalyticsManager>();
	}
};
static_assert(alignof(UUIAnalyticsManager) == 0x000008, "Wrong alignment on UUIAnalyticsManager");
static_assert(sizeof(UUIAnalyticsManager) == 0x000090, "Wrong size on UUIAnalyticsManager");
static_assert(offsetof(UUIAnalyticsManager, _currentTabName) == 0x000080, "Member 'UUIAnalyticsManager::_currentTabName' has a wrong offset!");

// Class DBDUIManagers.UICustomIconManager
// 0x0020 (0x0058 - 0x0038)
class UUICustomIconManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x20];                                      // 0x0038(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UICustomIconManager">();
	}
	static class UUICustomIconManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUICustomIconManager>();
	}
};
static_assert(alignof(UUICustomIconManager) == 0x000008, "Wrong alignment on UUICustomIconManager");
static_assert(sizeof(UUICustomIconManager) == 0x000058, "Wrong size on UUICustomIconManager");

// Class DBDUIManagers.UIDataManager
// 0x02E0 (0x0318 - 0x0038)
class UUIDataManager final : public UEngineSubsystem
{
public:
	TMap<EItemRarity, struct FRarityMaterialData> RarityMaterialMap;                                 // 0x0038(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<EStatusEffectType, struct FStatusEffectSkinData> StatusEffectSkinDataMap;                           // 0x0088(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<class FString, struct FTextBlockStyle>   RichTextStyleMap;                                  // 0x00D8(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<ECurrencyType, struct FCurrencyProgressionUIData> CurrencyUIDataMap;                                 // 0x0128(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<EProgressionType, struct FCurrencyProgressionUIData> ProgressionUIDataMap;                              // 0x0178(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<EArchiveMenuState, struct FArchiveTomeSkinData> ArchiveTomeSkinDataMap;                            // 0x01C8(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<class FString, class UTexture2D*>        TooltipEventSkinUIDataMap;                         // 0x0218(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<class FString, class UTexture2D*>        AlertRewardEventSkinUIDataMap;                     // 0x0268(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMap<EChallengeSetType, struct FChallengeTrackerSkinData> ChallengeTrackerSkinUiDataMap;                     // 0x02B8(0x0050)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_308[0x10];                                     // 0x0308(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const struct FChallengeTrackerSkinData GetChallengeTrackerSkinData(const EChallengeSetType ChallengeSetType);
	void LoadInGameChallengeTrackerSkinUIData();
	void UnLoadInGameChallengeTrackerSkinUIData();

	class UTexture2D* GetAlertRewardEventBackground(const class FString& EventThemeLabel) const;
	TSoftObjectPtr<class UTexture2D> GetCurrencyIcon(const ECurrencyType CurrencyType) const;
	class UMaterialInterface* GetCustomizationRarityMaterial(EItemRarity Rarity) const;
	class UMaterialInterface* GetLoadoutPartRarityMaterial(EItemRarity Rarity) const;
	class UMaterialInterface* GetLoadoutPartStatusEffectMaterial(EStatusEffectType StatusEffect) const;
	TSoftObjectPtr<class UTexture2D> GetProgressionIcon(const EProgressionType ProgressionType) const;
	struct FLinearColor GetRarityTint(EItemRarity Rarity) const;
	class UTexture2D* GetTooltipEventHeader(const class FString& EventBannerLabel) const;
	class UMaterialInterface* GetTooltipRarityMaterial(EItemRarity Rarity) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIDataManager">();
	}
	static class UUIDataManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIDataManager>();
	}
};
static_assert(alignof(UUIDataManager) == 0x000008, "Wrong alignment on UUIDataManager");
static_assert(sizeof(UUIDataManager) == 0x000318, "Wrong size on UUIDataManager");
static_assert(offsetof(UUIDataManager, RarityMaterialMap) == 0x000038, "Member 'UUIDataManager::RarityMaterialMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, StatusEffectSkinDataMap) == 0x000088, "Member 'UUIDataManager::StatusEffectSkinDataMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, RichTextStyleMap) == 0x0000D8, "Member 'UUIDataManager::RichTextStyleMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, CurrencyUIDataMap) == 0x000128, "Member 'UUIDataManager::CurrencyUIDataMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, ProgressionUIDataMap) == 0x000178, "Member 'UUIDataManager::ProgressionUIDataMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, ArchiveTomeSkinDataMap) == 0x0001C8, "Member 'UUIDataManager::ArchiveTomeSkinDataMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, TooltipEventSkinUIDataMap) == 0x000218, "Member 'UUIDataManager::TooltipEventSkinUIDataMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, AlertRewardEventSkinUIDataMap) == 0x000268, "Member 'UUIDataManager::AlertRewardEventSkinUIDataMap' has a wrong offset!");
static_assert(offsetof(UUIDataManager, ChallengeTrackerSkinUiDataMap) == 0x0002B8, "Member 'UUIDataManager::ChallengeTrackerSkinUiDataMap' has a wrong offset!");

// Class DBDUIManagers.UIEventDispatcher
// 0x0330 (0x0368 - 0x0038)
class UUIEventDispatcher final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x2F8];                                     // 0x0038(0x02F8)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnDrawScaleformBlockingArea;                       // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnRemoveScaleformBlockingArea;                     // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_350[0x18];                                     // 0x0350(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIEventDispatcher">();
	}
	static class UUIEventDispatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIEventDispatcher>();
	}
};
static_assert(alignof(UUIEventDispatcher) == 0x000008, "Wrong alignment on UUIEventDispatcher");
static_assert(sizeof(UUIEventDispatcher) == 0x000368, "Wrong size on UUIEventDispatcher");
static_assert(offsetof(UUIEventDispatcher, OnDrawScaleformBlockingArea) == 0x000330, "Member 'UUIEventDispatcher::OnDrawScaleformBlockingArea' has a wrong offset!");
static_assert(offsetof(UUIEventDispatcher, OnRemoveScaleformBlockingArea) == 0x000340, "Member 'UUIEventDispatcher::OnRemoveScaleformBlockingArea' has a wrong offset!");

// Class DBDUIManagers.UIScaleManager
// 0x00A8 (0x00E0 - 0x0038)
class UUIScaleManager final : public UGameInstanceSubsystem
{
public:
	class UDataTable*                             _dpiScaleCurveDB;                                  // 0x0038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _dpiScaleCurve;                                    // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x98];                                      // 0x0048(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EDPIScaleCurveRatio GetDPIScaleCurveRatio();

	float GetHudScaleFactor() const;
	float GetMenuScaleFactor() const;
	float GetScaleFactor(EScaleType Type) const;
	float GetSkillCheckScaleFactor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIScaleManager">();
	}
	static class UUIScaleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIScaleManager>();
	}
};
static_assert(alignof(UUIScaleManager) == 0x000008, "Wrong alignment on UUIScaleManager");
static_assert(sizeof(UUIScaleManager) == 0x0000E0, "Wrong size on UUIScaleManager");
static_assert(offsetof(UUIScaleManager, _dpiScaleCurveDB) == 0x000038, "Member 'UUIScaleManager::_dpiScaleCurveDB' has a wrong offset!");
static_assert(offsetof(UUIScaleManager, _dpiScaleCurve) == 0x000040, "Member 'UUIScaleManager::_dpiScaleCurve' has a wrong offset!");

}

