#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreSubtitles

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "SlateCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Slate_structs.hpp"


namespace SDK::Params
{

// Function WBP_CoreSubtitles.WBP_CoreSubtitles_C.ExecuteUbergraph_WBP_CoreSubtitles
// 0x0040 (0x0040 - 0x0000)
struct WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	ESubtitlesPosition                            K2Node_Event_position;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isConstrained;                        // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Event_aspectRatio;                          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESubtitlesSize                                K2Node_Event_size;                                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_1;           // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_1;                    // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESubtitlesBackgroundOpacity                   K2Node_Event_opacity;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess_2;                    // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_2;           // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue_3;           // 0x0038(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles) == 0x000008, "Wrong alignment on WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles");
static_assert(sizeof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles) == 0x000040, "Wrong size on WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, EntryPoint) == 0x000000, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000008, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, K2Node_Event_position) == 0x000010, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::K2Node_Event_position' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, K2Node_Event_isConstrained) == 0x000011, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::K2Node_Event_isConstrained' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, K2Node_Event_aspectRatio) == 0x000014, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::K2Node_Event_aspectRatio' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, K2Node_SwitchEnum_CmpSuccess) == 0x000018, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, K2Node_Event_size) == 0x000019, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::K2Node_Event_size' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, CallFunc_SlotAsCanvasSlot_ReturnValue_1) == 0x000020, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::CallFunc_SlotAsCanvasSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, K2Node_SwitchEnum_CmpSuccess_1) == 0x000028, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::K2Node_SwitchEnum_CmpSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, K2Node_Event_opacity) == 0x000029, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::K2Node_Event_opacity' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, K2Node_SwitchEnum_CmpSuccess_2) == 0x00002A, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::K2Node_SwitchEnum_CmpSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, CallFunc_SlotAsCanvasSlot_ReturnValue_2) == 0x000030, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::CallFunc_SlotAsCanvasSlot_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles, CallFunc_SlotAsCanvasSlot_ReturnValue_3) == 0x000038, "Member 'WBP_CoreSubtitles_C_ExecuteUbergraph_WBP_CoreSubtitles::CallFunc_SlotAsCanvasSlot_ReturnValue_3' has a wrong offset!");

// Function WBP_CoreSubtitles.WBP_CoreSubtitles_C.SetBackgroundOpacity
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreSubtitles_C_SetBackgroundOpacity final
{
public:
	ESubtitlesBackgroundOpacity                   backgroundOpacity;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreSubtitles_C_SetBackgroundOpacity) == 0x000001, "Wrong alignment on WBP_CoreSubtitles_C_SetBackgroundOpacity");
static_assert(sizeof(WBP_CoreSubtitles_C_SetBackgroundOpacity) == 0x000001, "Wrong size on WBP_CoreSubtitles_C_SetBackgroundOpacity");
static_assert(offsetof(WBP_CoreSubtitles_C_SetBackgroundOpacity, backgroundOpacity) == 0x000000, "Member 'WBP_CoreSubtitles_C_SetBackgroundOpacity::backgroundOpacity' has a wrong offset!");

// Function WBP_CoreSubtitles.WBP_CoreSubtitles_C.SetConstrainAspectRatioChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_CoreSubtitles_C_SetConstrainAspectRatioChanged final
{
public:
	bool                                          IsConstrained;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Param_AspectRatio;                                 // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreSubtitles_C_SetConstrainAspectRatioChanged) == 0x000004, "Wrong alignment on WBP_CoreSubtitles_C_SetConstrainAspectRatioChanged");
static_assert(sizeof(WBP_CoreSubtitles_C_SetConstrainAspectRatioChanged) == 0x000008, "Wrong size on WBP_CoreSubtitles_C_SetConstrainAspectRatioChanged");
static_assert(offsetof(WBP_CoreSubtitles_C_SetConstrainAspectRatioChanged, IsConstrained) == 0x000000, "Member 'WBP_CoreSubtitles_C_SetConstrainAspectRatioChanged::IsConstrained' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_SetConstrainAspectRatioChanged, Param_AspectRatio) == 0x000004, "Member 'WBP_CoreSubtitles_C_SetConstrainAspectRatioChanged::Param_AspectRatio' has a wrong offset!");

// Function WBP_CoreSubtitles.WBP_CoreSubtitles_C.SetFontSize
// 0x0068 (0x0068 - 0x0000)
struct WBP_CoreSubtitles_C_SetFontSize final
{
public:
	int32                                         Size;                                              // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateFontInfo                         K2Node_MakeStruct_SlateFontInfo;                   // 0x0008(0x0060)(HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreSubtitles_C_SetFontSize) == 0x000008, "Wrong alignment on WBP_CoreSubtitles_C_SetFontSize");
static_assert(sizeof(WBP_CoreSubtitles_C_SetFontSize) == 0x000068, "Wrong size on WBP_CoreSubtitles_C_SetFontSize");
static_assert(offsetof(WBP_CoreSubtitles_C_SetFontSize, Size) == 0x000000, "Member 'WBP_CoreSubtitles_C_SetFontSize::Size' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_SetFontSize, K2Node_MakeStruct_SlateFontInfo) == 0x000008, "Member 'WBP_CoreSubtitles_C_SetFontSize::K2Node_MakeStruct_SlateFontInfo' has a wrong offset!");

// Function WBP_CoreSubtitles.WBP_CoreSubtitles_C.SetPositionByAnchor
// 0x0038 (0x0038 - 0x0000)
struct WBP_CoreSubtitles_C_SetPositionByAnchor final
{
public:
	struct FVector2D                              Position;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FAnchors                               K2Node_MakeStruct_Anchors;                         // 0x0010(0x0020)(NoDestructor)
	class UCanvasPanelSlot*                       CallFunc_SlotAsCanvasSlot_ReturnValue;             // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreSubtitles_C_SetPositionByAnchor) == 0x000008, "Wrong alignment on WBP_CoreSubtitles_C_SetPositionByAnchor");
static_assert(sizeof(WBP_CoreSubtitles_C_SetPositionByAnchor) == 0x000038, "Wrong size on WBP_CoreSubtitles_C_SetPositionByAnchor");
static_assert(offsetof(WBP_CoreSubtitles_C_SetPositionByAnchor, Position) == 0x000000, "Member 'WBP_CoreSubtitles_C_SetPositionByAnchor::Position' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_SetPositionByAnchor, K2Node_MakeStruct_Anchors) == 0x000010, "Member 'WBP_CoreSubtitles_C_SetPositionByAnchor::K2Node_MakeStruct_Anchors' has a wrong offset!");
static_assert(offsetof(WBP_CoreSubtitles_C_SetPositionByAnchor, CallFunc_SlotAsCanvasSlot_ReturnValue) == 0x000030, "Member 'WBP_CoreSubtitles_C_SetPositionByAnchor::CallFunc_SlotAsCanvasSlot_ReturnValue' has a wrong offset!");

// Function WBP_CoreSubtitles.WBP_CoreSubtitles_C.SetSubtitlesBackgroundOpacity
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreSubtitles_C_SetSubtitlesBackgroundOpacity final
{
public:
	ESubtitlesBackgroundOpacity                   Opacity;                                           // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreSubtitles_C_SetSubtitlesBackgroundOpacity) == 0x000001, "Wrong alignment on WBP_CoreSubtitles_C_SetSubtitlesBackgroundOpacity");
static_assert(sizeof(WBP_CoreSubtitles_C_SetSubtitlesBackgroundOpacity) == 0x000001, "Wrong size on WBP_CoreSubtitles_C_SetSubtitlesBackgroundOpacity");
static_assert(offsetof(WBP_CoreSubtitles_C_SetSubtitlesBackgroundOpacity, Opacity) == 0x000000, "Member 'WBP_CoreSubtitles_C_SetSubtitlesBackgroundOpacity::Opacity' has a wrong offset!");

// Function WBP_CoreSubtitles.WBP_CoreSubtitles_C.SetSubtitlesPosition
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreSubtitles_C_SetSubtitlesPosition final
{
public:
	ESubtitlesPosition                            Position;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreSubtitles_C_SetSubtitlesPosition) == 0x000001, "Wrong alignment on WBP_CoreSubtitles_C_SetSubtitlesPosition");
static_assert(sizeof(WBP_CoreSubtitles_C_SetSubtitlesPosition) == 0x000001, "Wrong size on WBP_CoreSubtitles_C_SetSubtitlesPosition");
static_assert(offsetof(WBP_CoreSubtitles_C_SetSubtitlesPosition, Position) == 0x000000, "Member 'WBP_CoreSubtitles_C_SetSubtitlesPosition::Position' has a wrong offset!");

// Function WBP_CoreSubtitles.WBP_CoreSubtitles_C.SetSubtitlesSize
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreSubtitles_C_SetSubtitlesSize final
{
public:
	ESubtitlesSize                                Size;                                              // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreSubtitles_C_SetSubtitlesSize) == 0x000001, "Wrong alignment on WBP_CoreSubtitles_C_SetSubtitlesSize");
static_assert(sizeof(WBP_CoreSubtitles_C_SetSubtitlesSize) == 0x000001, "Wrong size on WBP_CoreSubtitles_C_SetSubtitlesSize");
static_assert(offsetof(WBP_CoreSubtitles_C_SetSubtitlesSize, Size) == 0x000000, "Member 'WBP_CoreSubtitles_C_SetSubtitlesSize::Size' has a wrong offset!");

}

