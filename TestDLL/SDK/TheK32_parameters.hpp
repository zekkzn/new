#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK32

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "TheK32_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function TheK32.K32BaseProjectile.OnRep_IsAcquiredFromPool
// 0x0001 (0x0001 - 0x0000)
struct K32BaseProjectile_OnRep_IsAcquiredFromPool final
{
public:
	bool                                          OldIsAcquiredFromPool;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32BaseProjectile_OnRep_IsAcquiredFromPool) == 0x000001, "Wrong alignment on K32BaseProjectile_OnRep_IsAcquiredFromPool");
static_assert(sizeof(K32BaseProjectile_OnRep_IsAcquiredFromPool) == 0x000001, "Wrong size on K32BaseProjectile_OnRep_IsAcquiredFromPool");
static_assert(offsetof(K32BaseProjectile_OnRep_IsAcquiredFromPool, OldIsAcquiredFromPool) == 0x000000, "Member 'K32BaseProjectile_OnRep_IsAcquiredFromPool::OldIsAcquiredFromPool' has a wrong offset!");

// Function TheK32.InK32PodZoneLingeringEffect.Authority_OnKillerPodAcquiredChanged
// 0x0001 (0x0001 - 0x0000)
struct InK32PodZoneLingeringEffect_Authority_OnKillerPodAcquiredChanged final
{
public:
	bool                                          IsAcquired;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InK32PodZoneLingeringEffect_Authority_OnKillerPodAcquiredChanged) == 0x000001, "Wrong alignment on InK32PodZoneLingeringEffect_Authority_OnKillerPodAcquiredChanged");
static_assert(sizeof(InK32PodZoneLingeringEffect_Authority_OnKillerPodAcquiredChanged) == 0x000001, "Wrong size on InK32PodZoneLingeringEffect_Authority_OnKillerPodAcquiredChanged");
static_assert(offsetof(InK32PodZoneLingeringEffect_Authority_OnKillerPodAcquiredChanged, IsAcquired) == 0x000000, "Member 'InK32PodZoneLingeringEffect_Authority_OnKillerPodAcquiredChanged::IsAcquired' has a wrong offset!");

// Function TheK32.InK32PodZoneLingeringEffect.Authority_OnKillerPodDisabledChanged
// 0x0001 (0x0001 - 0x0000)
struct InK32PodZoneLingeringEffect_Authority_OnKillerPodDisabledChanged final
{
public:
	bool                                          IsDisabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InK32PodZoneLingeringEffect_Authority_OnKillerPodDisabledChanged) == 0x000001, "Wrong alignment on InK32PodZoneLingeringEffect_Authority_OnKillerPodDisabledChanged");
static_assert(sizeof(InK32PodZoneLingeringEffect_Authority_OnKillerPodDisabledChanged) == 0x000001, "Wrong size on InK32PodZoneLingeringEffect_Authority_OnKillerPodDisabledChanged");
static_assert(offsetof(InK32PodZoneLingeringEffect_Authority_OnKillerPodDisabledChanged, IsDisabled) == 0x000000, "Member 'InK32PodZoneLingeringEffect_Authority_OnKillerPodDisabledChanged::IsDisabled' has a wrong offset!");

// Function TheK32.K32AnimInstance.OnGameEventReceived
// 0x0040 (0x0040 - 0x0000)
struct K32AnimInstance_OnGameEventReceived final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32AnimInstance_OnGameEventReceived) == 0x000008, "Wrong alignment on K32AnimInstance_OnGameEventReceived");
static_assert(sizeof(K32AnimInstance_OnGameEventReceived) == 0x000040, "Wrong size on K32AnimInstance_OnGameEventReceived");
static_assert(offsetof(K32AnimInstance_OnGameEventReceived, GameplayTag) == 0x000000, "Member 'K32AnimInstance_OnGameEventReceived::GameplayTag' has a wrong offset!");
static_assert(offsetof(K32AnimInstance_OnGameEventReceived, GameEventData) == 0x000010, "Member 'K32AnimInstance_OnGameEventReceived::GameEventData' has a wrong offset!");

// Function TheK32.K32Emp.Cosmetic_OnEmpInteractionFinished
// 0x0010 (0x0010 - 0x0000)
struct K32Emp_Cosmetic_OnEmpInteractionFinished final
{
public:
	int32                                         NumberOfAffectedTargets;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32Emp_Cosmetic_OnEmpInteractionFinished) == 0x000008, "Wrong alignment on K32Emp_Cosmetic_OnEmpInteractionFinished");
static_assert(sizeof(K32Emp_Cosmetic_OnEmpInteractionFinished) == 0x000010, "Wrong size on K32Emp_Cosmetic_OnEmpInteractionFinished");
static_assert(offsetof(K32Emp_Cosmetic_OnEmpInteractionFinished, NumberOfAffectedTargets) == 0x000000, "Member 'K32Emp_Cosmetic_OnEmpInteractionFinished::NumberOfAffectedTargets' has a wrong offset!");
static_assert(offsetof(K32Emp_Cosmetic_OnEmpInteractionFinished, InteractingPlayer) == 0x000008, "Member 'K32Emp_Cosmetic_OnEmpInteractionFinished::InteractingPlayer' has a wrong offset!");

// Function TheK32.K32Emp.Cosmetic_OnNumTargetsInRangeChanged
// 0x0004 (0x0004 - 0x0000)
struct K32Emp_Cosmetic_OnNumTargetsInRangeChanged final
{
public:
	int32                                         NumberOfAffectedTargets;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32Emp_Cosmetic_OnNumTargetsInRangeChanged) == 0x000004, "Wrong alignment on K32Emp_Cosmetic_OnNumTargetsInRangeChanged");
static_assert(sizeof(K32Emp_Cosmetic_OnNumTargetsInRangeChanged) == 0x000004, "Wrong size on K32Emp_Cosmetic_OnNumTargetsInRangeChanged");
static_assert(offsetof(K32Emp_Cosmetic_OnNumTargetsInRangeChanged, NumberOfAffectedTargets) == 0x000000, "Member 'K32Emp_Cosmetic_OnNumTargetsInRangeChanged::NumberOfAffectedTargets' has a wrong offset!");

// Function TheK32.K32Emp.Cosmetic_OnVisibilityChanged
// 0x0002 (0x0002 - 0x0000)
struct K32Emp_Cosmetic_OnVisibilityChanged final
{
public:
	bool                                          PreviousIsVisible;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32Emp_Cosmetic_OnVisibilityChanged) == 0x000001, "Wrong alignment on K32Emp_Cosmetic_OnVisibilityChanged");
static_assert(sizeof(K32Emp_Cosmetic_OnVisibilityChanged) == 0x000002, "Wrong size on K32Emp_Cosmetic_OnVisibilityChanged");
static_assert(offsetof(K32Emp_Cosmetic_OnVisibilityChanged, PreviousIsVisible) == 0x000000, "Member 'K32Emp_Cosmetic_OnVisibilityChanged::PreviousIsVisible' has a wrong offset!");
static_assert(offsetof(K32Emp_Cosmetic_OnVisibilityChanged, IsVisible) == 0x000001, "Member 'K32Emp_Cosmetic_OnVisibilityChanged::IsVisible' has a wrong offset!");

// Function TheK32.K32Emp.Multicast_UseEmp
// 0x0010 (0x0010 - 0x0000)
struct K32Emp_Multicast_UseEmp final
{
public:
	int32                                         NumAffectedTargets;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32Emp_Multicast_UseEmp) == 0x000008, "Wrong alignment on K32Emp_Multicast_UseEmp");
static_assert(sizeof(K32Emp_Multicast_UseEmp) == 0x000010, "Wrong size on K32Emp_Multicast_UseEmp");
static_assert(offsetof(K32Emp_Multicast_UseEmp, NumAffectedTargets) == 0x000000, "Member 'K32Emp_Multicast_UseEmp::NumAffectedTargets' has a wrong offset!");
static_assert(offsetof(K32Emp_Multicast_UseEmp, InteractingPlayer) == 0x000008, "Member 'K32Emp_Multicast_UseEmp::InteractingPlayer' has a wrong offset!");

// Function TheK32.K32Emp.OnEmpInteractionEntered
// 0x0008 (0x0008 - 0x0000)
struct K32Emp_OnEmpInteractionEntered final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32Emp_OnEmpInteractionEntered) == 0x000008, "Wrong alignment on K32Emp_OnEmpInteractionEntered");
static_assert(sizeof(K32Emp_OnEmpInteractionEntered) == 0x000008, "Wrong size on K32Emp_OnEmpInteractionEntered");
static_assert(offsetof(K32Emp_OnEmpInteractionEntered, InteractingPlayer) == 0x000000, "Member 'K32Emp_OnEmpInteractionEntered::InteractingPlayer' has a wrong offset!");

// Function TheK32.K32Emp.OnEmpInteractionFinished
// 0x0010 (0x0010 - 0x0000)
struct K32Emp_OnEmpInteractionFinished final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasInteractionStarted;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K32Emp_OnEmpInteractionFinished) == 0x000008, "Wrong alignment on K32Emp_OnEmpInteractionFinished");
static_assert(sizeof(K32Emp_OnEmpInteractionFinished) == 0x000010, "Wrong size on K32Emp_OnEmpInteractionFinished");
static_assert(offsetof(K32Emp_OnEmpInteractionFinished, InteractingPlayer) == 0x000000, "Member 'K32Emp_OnEmpInteractionFinished::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(K32Emp_OnEmpInteractionFinished, HasInteractionStarted) == 0x000008, "Member 'K32Emp_OnEmpInteractionFinished::HasInteractionStarted' has a wrong offset!");

// Function TheK32.K32Emp.OnRep_IsVisible
// 0x0001 (0x0001 - 0x0000)
struct K32Emp_OnRep_IsVisible final
{
public:
	bool                                          PreviousIsVisible;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32Emp_OnRep_IsVisible) == 0x000001, "Wrong alignment on K32Emp_OnRep_IsVisible");
static_assert(sizeof(K32Emp_OnRep_IsVisible) == 0x000001, "Wrong size on K32Emp_OnRep_IsVisible");
static_assert(offsetof(K32Emp_OnRep_IsVisible, PreviousIsVisible) == 0x000000, "Member 'K32Emp_OnRep_IsVisible::PreviousIsVisible' has a wrong offset!");

// Function TheK32.K32ItemBox.Authority_OnItemPickup
// 0x0008 (0x0008 - 0x0000)
struct K32ItemBox_Authority_OnItemPickup final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32ItemBox_Authority_OnItemPickup) == 0x000008, "Wrong alignment on K32ItemBox_Authority_OnItemPickup");
static_assert(sizeof(K32ItemBox_Authority_OnItemPickup) == 0x000008, "Wrong size on K32ItemBox_Authority_OnItemPickup");
static_assert(offsetof(K32ItemBox_Authority_OnItemPickup, Player) == 0x000000, "Member 'K32ItemBox_Authority_OnItemPickup::Player' has a wrong offset!");

// Function TheK32.K32ItemBox.Cosmetic_OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K32ItemBox_Cosmetic_OnStateChanged final
{
public:
	EK32ItemBoxState                              NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32ItemBox_Cosmetic_OnStateChanged) == 0x000001, "Wrong alignment on K32ItemBox_Cosmetic_OnStateChanged");
static_assert(sizeof(K32ItemBox_Cosmetic_OnStateChanged) == 0x000001, "Wrong size on K32ItemBox_Cosmetic_OnStateChanged");
static_assert(offsetof(K32ItemBox_Cosmetic_OnStateChanged, NewState) == 0x000000, "Member 'K32ItemBox_Cosmetic_OnStateChanged::NewState' has a wrong offset!");

// Function TheK32.K32ItemBox.Cosmetic_OnSurvivorInteractingChanged
// 0x0001 (0x0001 - 0x0000)
struct K32ItemBox_Cosmetic_OnSurvivorInteractingChanged final
{
public:
	bool                                          IsInteracting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32ItemBox_Cosmetic_OnSurvivorInteractingChanged) == 0x000001, "Wrong alignment on K32ItemBox_Cosmetic_OnSurvivorInteractingChanged");
static_assert(sizeof(K32ItemBox_Cosmetic_OnSurvivorInteractingChanged) == 0x000001, "Wrong size on K32ItemBox_Cosmetic_OnSurvivorInteractingChanged");
static_assert(offsetof(K32ItemBox_Cosmetic_OnSurvivorInteractingChanged, IsInteracting) == 0x000000, "Member 'K32ItemBox_Cosmetic_OnSurvivorInteractingChanged::IsInteracting' has a wrong offset!");

// Function TheK32.K32ItemBox.Multicast_SetIsChargeTimeExtended
// 0x0001 (0x0001 - 0x0000)
struct K32ItemBox_Multicast_SetIsChargeTimeExtended final
{
public:
	bool                                          IsAddonExtendingFirstActivationTimer;              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32ItemBox_Multicast_SetIsChargeTimeExtended) == 0x000001, "Wrong alignment on K32ItemBox_Multicast_SetIsChargeTimeExtended");
static_assert(sizeof(K32ItemBox_Multicast_SetIsChargeTimeExtended) == 0x000001, "Wrong size on K32ItemBox_Multicast_SetIsChargeTimeExtended");
static_assert(offsetof(K32ItemBox_Multicast_SetIsChargeTimeExtended, IsAddonExtendingFirstActivationTimer) == 0x000000, "Member 'K32ItemBox_Multicast_SetIsChargeTimeExtended::IsAddonExtendingFirstActivationTimer' has a wrong offset!");

// Function TheK32.K32ItemBox.OnChargeableCompleteEvent
// 0x0018 (0x0018 - 0x0000)
struct K32ItemBox_OnChargeableCompleteEvent final
{
public:
	bool                                          COMPLETED;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InstigatorsForCompletion;                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32ItemBox_OnChargeableCompleteEvent) == 0x000008, "Wrong alignment on K32ItemBox_OnChargeableCompleteEvent");
static_assert(sizeof(K32ItemBox_OnChargeableCompleteEvent) == 0x000018, "Wrong size on K32ItemBox_OnChargeableCompleteEvent");
static_assert(offsetof(K32ItemBox_OnChargeableCompleteEvent, COMPLETED) == 0x000000, "Member 'K32ItemBox_OnChargeableCompleteEvent::COMPLETED' has a wrong offset!");
static_assert(offsetof(K32ItemBox_OnChargeableCompleteEvent, InstigatorsForCompletion) == 0x000008, "Member 'K32ItemBox_OnChargeableCompleteEvent::InstigatorsForCompletion' has a wrong offset!");

// Function TheK32.K32ItemBoxManagerComponent.Authority_OnItemBoxDeactivated
// 0x0040 (0x0040 - 0x0000)
struct K32ItemBoxManagerComponent_Authority_OnItemBoxDeactivated final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32ItemBoxManagerComponent_Authority_OnItemBoxDeactivated) == 0x000008, "Wrong alignment on K32ItemBoxManagerComponent_Authority_OnItemBoxDeactivated");
static_assert(sizeof(K32ItemBoxManagerComponent_Authority_OnItemBoxDeactivated) == 0x000040, "Wrong size on K32ItemBoxManagerComponent_Authority_OnItemBoxDeactivated");
static_assert(offsetof(K32ItemBoxManagerComponent_Authority_OnItemBoxDeactivated, GameplayTag) == 0x000000, "Member 'K32ItemBoxManagerComponent_Authority_OnItemBoxDeactivated::GameplayTag' has a wrong offset!");
static_assert(offsetof(K32ItemBoxManagerComponent_Authority_OnItemBoxDeactivated, GameEventData) == 0x000010, "Member 'K32ItemBoxManagerComponent_Authority_OnItemBoxDeactivated::GameEventData' has a wrong offset!");

// Function TheK32.K32ItemBoxOutlineUpdateStrategy.OnDistanceStatValueUpdated
// 0x0004 (0x0004 - 0x0000)
struct K32ItemBoxOutlineUpdateStrategy_OnDistanceStatValueUpdated final
{
public:
	float                                         Distance;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32ItemBoxOutlineUpdateStrategy_OnDistanceStatValueUpdated) == 0x000004, "Wrong alignment on K32ItemBoxOutlineUpdateStrategy_OnDistanceStatValueUpdated");
static_assert(sizeof(K32ItemBoxOutlineUpdateStrategy_OnDistanceStatValueUpdated) == 0x000004, "Wrong size on K32ItemBoxOutlineUpdateStrategy_OnDistanceStatValueUpdated");
static_assert(offsetof(K32ItemBoxOutlineUpdateStrategy_OnDistanceStatValueUpdated, Distance) == 0x000000, "Member 'K32ItemBoxOutlineUpdateStrategy_OnDistanceStatValueUpdated::Distance' has a wrong offset!");

// Function TheK32.K32KillerPod.Cosmetic_IsBlockingPodSpawningChanged
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPod_Cosmetic_IsBlockingPodSpawningChanged final
{
public:
	bool                                          IsBlocking;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceBetweenPods;                               // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_Cosmetic_IsBlockingPodSpawningChanged) == 0x000004, "Wrong alignment on K32KillerPod_Cosmetic_IsBlockingPodSpawningChanged");
static_assert(sizeof(K32KillerPod_Cosmetic_IsBlockingPodSpawningChanged) == 0x000008, "Wrong size on K32KillerPod_Cosmetic_IsBlockingPodSpawningChanged");
static_assert(offsetof(K32KillerPod_Cosmetic_IsBlockingPodSpawningChanged, IsBlocking) == 0x000000, "Member 'K32KillerPod_Cosmetic_IsBlockingPodSpawningChanged::IsBlocking' has a wrong offset!");
static_assert(offsetof(K32KillerPod_Cosmetic_IsBlockingPodSpawningChanged, DistanceBetweenPods) == 0x000004, "Member 'K32KillerPod_Cosmetic_IsBlockingPodSpawningChanged::DistanceBetweenPods' has a wrong offset!");

// Function TheK32.K32KillerPod.Cosmetic_OnControlledByKillerChanged
// 0x0130 (0x0130 - 0x0000)
struct K32KillerPod_Cosmetic_OnControlledByKillerChanged final
{
public:
	struct FK32KillerPodSettings                  PreviousSettings;                                  // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
	struct FK32KillerPodSettings                  Settings;                                          // 0x0098(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_Cosmetic_OnControlledByKillerChanged) == 0x000008, "Wrong alignment on K32KillerPod_Cosmetic_OnControlledByKillerChanged");
static_assert(sizeof(K32KillerPod_Cosmetic_OnControlledByKillerChanged) == 0x000130, "Wrong size on K32KillerPod_Cosmetic_OnControlledByKillerChanged");
static_assert(offsetof(K32KillerPod_Cosmetic_OnControlledByKillerChanged, PreviousSettings) == 0x000000, "Member 'K32KillerPod_Cosmetic_OnControlledByKillerChanged::PreviousSettings' has a wrong offset!");
static_assert(offsetof(K32KillerPod_Cosmetic_OnControlledByKillerChanged, Settings) == 0x000098, "Member 'K32KillerPod_Cosmetic_OnControlledByKillerChanged::Settings' has a wrong offset!");

// Function TheK32.K32KillerPod.Cosmetic_OnDestroyedByEmp
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPod_Cosmetic_OnDestroyedByEmp final
{
public:
	class ADBDPlayer*                             DestroyingSurvivor;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_Cosmetic_OnDestroyedByEmp) == 0x000008, "Wrong alignment on K32KillerPod_Cosmetic_OnDestroyedByEmp");
static_assert(sizeof(K32KillerPod_Cosmetic_OnDestroyedByEmp) == 0x000008, "Wrong size on K32KillerPod_Cosmetic_OnDestroyedByEmp");
static_assert(offsetof(K32KillerPod_Cosmetic_OnDestroyedByEmp, DestroyingSurvivor) == 0x000000, "Member 'K32KillerPod_Cosmetic_OnDestroyedByEmp::DestroyingSurvivor' has a wrong offset!");

// Function TheK32.K32KillerPod.Cosmetic_OnDisabledChanged
// 0x0130 (0x0130 - 0x0000)
struct K32KillerPod_Cosmetic_OnDisabledChanged final
{
public:
	struct FK32KillerPodSettings                  PreviousSettings;                                  // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
	struct FK32KillerPodSettings                  Settings;                                          // 0x0098(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_Cosmetic_OnDisabledChanged) == 0x000008, "Wrong alignment on K32KillerPod_Cosmetic_OnDisabledChanged");
static_assert(sizeof(K32KillerPod_Cosmetic_OnDisabledChanged) == 0x000130, "Wrong size on K32KillerPod_Cosmetic_OnDisabledChanged");
static_assert(offsetof(K32KillerPod_Cosmetic_OnDisabledChanged, PreviousSettings) == 0x000000, "Member 'K32KillerPod_Cosmetic_OnDisabledChanged::PreviousSettings' has a wrong offset!");
static_assert(offsetof(K32KillerPod_Cosmetic_OnDisabledChanged, Settings) == 0x000098, "Member 'K32KillerPod_Cosmetic_OnDisabledChanged::Settings' has a wrong offset!");

// Function TheK32.K32KillerPod.Cosmetic_OnSettingsChanged
// 0x0130 (0x0130 - 0x0000)
struct K32KillerPod_Cosmetic_OnSettingsChanged final
{
public:
	struct FK32KillerPodSettings                  PreviousSettings;                                  // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
	struct FK32KillerPodSettings                  Settings;                                          // 0x0098(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_Cosmetic_OnSettingsChanged) == 0x000008, "Wrong alignment on K32KillerPod_Cosmetic_OnSettingsChanged");
static_assert(sizeof(K32KillerPod_Cosmetic_OnSettingsChanged) == 0x000130, "Wrong size on K32KillerPod_Cosmetic_OnSettingsChanged");
static_assert(offsetof(K32KillerPod_Cosmetic_OnSettingsChanged, PreviousSettings) == 0x000000, "Member 'K32KillerPod_Cosmetic_OnSettingsChanged::PreviousSettings' has a wrong offset!");
static_assert(offsetof(K32KillerPod_Cosmetic_OnSettingsChanged, Settings) == 0x000098, "Member 'K32KillerPod_Cosmetic_OnSettingsChanged::Settings' has a wrong offset!");

// Function TheK32.K32KillerPod.Multicast_OnDestroyedByEmp
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPod_Multicast_OnDestroyedByEmp final
{
public:
	class ADBDPlayer*                             DestroyingSurvivor;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_Multicast_OnDestroyedByEmp) == 0x000008, "Wrong alignment on K32KillerPod_Multicast_OnDestroyedByEmp");
static_assert(sizeof(K32KillerPod_Multicast_OnDestroyedByEmp) == 0x000008, "Wrong size on K32KillerPod_Multicast_OnDestroyedByEmp");
static_assert(offsetof(K32KillerPod_Multicast_OnDestroyedByEmp, DestroyingSurvivor) == 0x000000, "Member 'K32KillerPod_Multicast_OnDestroyedByEmp::DestroyingSurvivor' has a wrong offset!");

// Function TheK32.K32KillerPod.OnKillerLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct K32KillerPod_OnKillerLocallyObservedChanged final
{
public:
	bool                                          IsKillerLocallyObserved;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_OnKillerLocallyObservedChanged) == 0x000001, "Wrong alignment on K32KillerPod_OnKillerLocallyObservedChanged");
static_assert(sizeof(K32KillerPod_OnKillerLocallyObservedChanged) == 0x000001, "Wrong size on K32KillerPod_OnKillerLocallyObservedChanged");
static_assert(offsetof(K32KillerPod_OnKillerLocallyObservedChanged, IsKillerLocallyObserved) == 0x000000, "Member 'K32KillerPod_OnKillerLocallyObservedChanged::IsKillerLocallyObserved' has a wrong offset!");

// Function TheK32.K32KillerPod.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPod_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_OnKillerSet) == 0x000008, "Wrong alignment on K32KillerPod_OnKillerSet");
static_assert(sizeof(K32KillerPod_OnKillerSet) == 0x000008, "Wrong size on K32KillerPod_OnKillerSet");
static_assert(offsetof(K32KillerPod_OnKillerSet, Killer) == 0x000000, "Member 'K32KillerPod_OnKillerSet::Killer' has a wrong offset!");

// Function TheK32.K32KillerPod.OnRep_Settings
// 0x0098 (0x0098 - 0x0000)
struct K32KillerPod_OnRep_Settings final
{
public:
	struct FK32KillerPodSettings                  PreviousSettings;                                  // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_OnRep_Settings) == 0x000008, "Wrong alignment on K32KillerPod_OnRep_Settings");
static_assert(sizeof(K32KillerPod_OnRep_Settings) == 0x000098, "Wrong size on K32KillerPod_OnRep_Settings");
static_assert(offsetof(K32KillerPod_OnRep_Settings, PreviousSettings) == 0x000000, "Member 'K32KillerPod_OnRep_Settings::PreviousSettings' has a wrong offset!");

// Function TheK32.K32KillerPod.OnVisibilityChanged
// 0x0130 (0x0130 - 0x0000)
struct K32KillerPod_OnVisibilityChanged final
{
public:
	struct FK32KillerPodSettings                  PreviousSettings;                                  // 0x0000(0x0098)(Parm, NativeAccessSpecifierPublic)
	struct FK32KillerPodSettings                  Settings;                                          // 0x0098(0x0098)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_OnVisibilityChanged) == 0x000008, "Wrong alignment on K32KillerPod_OnVisibilityChanged");
static_assert(sizeof(K32KillerPod_OnVisibilityChanged) == 0x000130, "Wrong size on K32KillerPod_OnVisibilityChanged");
static_assert(offsetof(K32KillerPod_OnVisibilityChanged, PreviousSettings) == 0x000000, "Member 'K32KillerPod_OnVisibilityChanged::PreviousSettings' has a wrong offset!");
static_assert(offsetof(K32KillerPod_OnVisibilityChanged, Settings) == 0x000098, "Member 'K32KillerPod_OnVisibilityChanged::Settings' has a wrong offset!");

// Function TheK32.K32KillerPod.GetKiller
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPod_GetKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_GetKiller) == 0x000008, "Wrong alignment on K32KillerPod_GetKiller");
static_assert(sizeof(K32KillerPod_GetKiller) == 0x000008, "Wrong size on K32KillerPod_GetKiller");
static_assert(offsetof(K32KillerPod_GetKiller, ReturnValue) == 0x000000, "Member 'K32KillerPod_GetKiller::ReturnValue' has a wrong offset!");

// Function TheK32.K32KillerPod.GetSettings
// 0x0098 (0x0098 - 0x0000)
struct K32KillerPod_GetSettings final
{
public:
	struct FK32KillerPodSettings                  ReturnValue;                                       // 0x0000(0x0098)(Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPod_GetSettings) == 0x000008, "Wrong alignment on K32KillerPod_GetSettings");
static_assert(sizeof(K32KillerPod_GetSettings) == 0x000098, "Wrong size on K32KillerPod_GetSettings");
static_assert(offsetof(K32KillerPod_GetSettings, ReturnValue) == 0x000000, "Member 'K32KillerPod_GetSettings::ReturnValue' has a wrong offset!");

// Function TheK32.K32KillerPodAimingCrosshairComponent.GetCurrentPodCamera
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPodAimingCrosshairComponent_GetCurrentPodCamera final
{
public:
	class UCameraComponent*                       ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodAimingCrosshairComponent_GetCurrentPodCamera) == 0x000008, "Wrong alignment on K32KillerPodAimingCrosshairComponent_GetCurrentPodCamera");
static_assert(sizeof(K32KillerPodAimingCrosshairComponent_GetCurrentPodCamera) == 0x000008, "Wrong size on K32KillerPodAimingCrosshairComponent_GetCurrentPodCamera");
static_assert(offsetof(K32KillerPodAimingCrosshairComponent_GetCurrentPodCamera, ReturnValue) == 0x000000, "Member 'K32KillerPodAimingCrosshairComponent_GetCurrentPodCamera::ReturnValue' has a wrong offset!");

// Function TheK32.K32KillerPodLockOnProgressComponent.Server_SetCrosshairState
// 0x0001 (0x0001 - 0x0000)
struct K32KillerPodLockOnProgressComponent_Server_SetCrosshairState final
{
public:
	EAimingCrosshairState                         CrosshairState;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodLockOnProgressComponent_Server_SetCrosshairState) == 0x000001, "Wrong alignment on K32KillerPodLockOnProgressComponent_Server_SetCrosshairState");
static_assert(sizeof(K32KillerPodLockOnProgressComponent_Server_SetCrosshairState) == 0x000001, "Wrong size on K32KillerPodLockOnProgressComponent_Server_SetCrosshairState");
static_assert(offsetof(K32KillerPodLockOnProgressComponent_Server_SetCrosshairState, CrosshairState) == 0x000000, "Member 'K32KillerPodLockOnProgressComponent_Server_SetCrosshairState::CrosshairState' has a wrong offset!");

// Function TheK32.K32KillerPodLockOnProgressComponent.Server_SetLockOnState
// 0x0018 (0x0018 - 0x0000)
struct K32KillerPodLockOnProgressComponent_Server_SetLockOnState final
{
public:
	ELockOnState                                  State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAimingCrosshairState                         CrosshairState;                                    // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class ACamperPlayer*                    SurvivorBeingLockedOn;                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESurvivorLockedOnProgressState                SurvivorLockedOnProgressState;                     // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K32KillerPodLockOnProgressComponent_Server_SetLockOnState) == 0x000008, "Wrong alignment on K32KillerPodLockOnProgressComponent_Server_SetLockOnState");
static_assert(sizeof(K32KillerPodLockOnProgressComponent_Server_SetLockOnState) == 0x000018, "Wrong size on K32KillerPodLockOnProgressComponent_Server_SetLockOnState");
static_assert(offsetof(K32KillerPodLockOnProgressComponent_Server_SetLockOnState, State) == 0x000000, "Member 'K32KillerPodLockOnProgressComponent_Server_SetLockOnState::State' has a wrong offset!");
static_assert(offsetof(K32KillerPodLockOnProgressComponent_Server_SetLockOnState, CrosshairState) == 0x000001, "Member 'K32KillerPodLockOnProgressComponent_Server_SetLockOnState::CrosshairState' has a wrong offset!");
static_assert(offsetof(K32KillerPodLockOnProgressComponent_Server_SetLockOnState, SurvivorBeingLockedOn) == 0x000008, "Member 'K32KillerPodLockOnProgressComponent_Server_SetLockOnState::SurvivorBeingLockedOn' has a wrong offset!");
static_assert(offsetof(K32KillerPodLockOnProgressComponent_Server_SetLockOnState, SurvivorLockedOnProgressState) == 0x000010, "Member 'K32KillerPodLockOnProgressComponent_Server_SetLockOnState::SurvivorLockedOnProgressState' has a wrong offset!");

// Function TheK32.K32KillerPodPool.Authority_OnDestroyPodDelayTimerDone
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPodPool_Authority_OnDestroyPodDelayTimerDone final
{
public:
	class ADBDPlayer*                             LaunchingSurvivor;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodPool_Authority_OnDestroyPodDelayTimerDone) == 0x000008, "Wrong alignment on K32KillerPodPool_Authority_OnDestroyPodDelayTimerDone");
static_assert(sizeof(K32KillerPodPool_Authority_OnDestroyPodDelayTimerDone) == 0x000008, "Wrong size on K32KillerPodPool_Authority_OnDestroyPodDelayTimerDone");
static_assert(offsetof(K32KillerPodPool_Authority_OnDestroyPodDelayTimerDone, LaunchingSurvivor) == 0x000000, "Member 'K32KillerPodPool_Authority_OnDestroyPodDelayTimerDone::LaunchingSurvivor' has a wrong offset!");

// Function TheK32.K32KillerPodPool.OnKillerPodAcquiredChanged
// 0x0001 (0x0001 - 0x0000)
struct K32KillerPodPool_OnKillerPodAcquiredChanged final
{
public:
	bool                                          IsAcquired;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodPool_OnKillerPodAcquiredChanged) == 0x000001, "Wrong alignment on K32KillerPodPool_OnKillerPodAcquiredChanged");
static_assert(sizeof(K32KillerPodPool_OnKillerPodAcquiredChanged) == 0x000001, "Wrong size on K32KillerPodPool_OnKillerPodAcquiredChanged");
static_assert(offsetof(K32KillerPodPool_OnKillerPodAcquiredChanged, IsAcquired) == 0x000000, "Member 'K32KillerPodPool_OnKillerPodAcquiredChanged::IsAcquired' has a wrong offset!");

// Function TheK32.K32KillerPodPool.OnKillerPodCreated
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPodPool_OnKillerPodCreated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodPool_OnKillerPodCreated) == 0x000008, "Wrong alignment on K32KillerPodPool_OnKillerPodCreated");
static_assert(sizeof(K32KillerPodPool_OnKillerPodCreated) == 0x000008, "Wrong size on K32KillerPodPool_OnKillerPodCreated");
static_assert(offsetof(K32KillerPodPool_OnKillerPodCreated, Actor) == 0x000000, "Member 'K32KillerPodPool_OnKillerPodCreated::Actor' has a wrong offset!");

// Function TheK32.K32KillerPodRestrictedZone.GetStaticMesh
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPodRestrictedZone_GetStaticMesh final
{
public:
	class UStaticMeshComponent*                   ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodRestrictedZone_GetStaticMesh) == 0x000008, "Wrong alignment on K32KillerPodRestrictedZone_GetStaticMesh");
static_assert(sizeof(K32KillerPodRestrictedZone_GetStaticMesh) == 0x000008, "Wrong size on K32KillerPodRestrictedZone_GetStaticMesh");
static_assert(offsetof(K32KillerPodRestrictedZone_GetStaticMesh, ReturnValue) == 0x000000, "Member 'K32KillerPodRestrictedZone_GetStaticMesh::ReturnValue' has a wrong offset!");

// Function TheK32.K32KillerPodSpawningComponent.Server_FireKillerProjectile
// 0x0050 (0x0050 - 0x0000)
struct K32KillerPodSpawningComponent_Server_FireKillerProjectile final
{
public:
	struct FK32KillerPodSpawningInputData         InputData;                                         // 0x0000(0x0048)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
	EK32KillerPodSpawningResult                   ExpectedResult;                                    // 0x0048(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K32KillerPodSpawningComponent_Server_FireKillerProjectile) == 0x000008, "Wrong alignment on K32KillerPodSpawningComponent_Server_FireKillerProjectile");
static_assert(sizeof(K32KillerPodSpawningComponent_Server_FireKillerProjectile) == 0x000050, "Wrong size on K32KillerPodSpawningComponent_Server_FireKillerProjectile");
static_assert(offsetof(K32KillerPodSpawningComponent_Server_FireKillerProjectile, InputData) == 0x000000, "Member 'K32KillerPodSpawningComponent_Server_FireKillerProjectile::InputData' has a wrong offset!");
static_assert(offsetof(K32KillerPodSpawningComponent_Server_FireKillerProjectile, ExpectedResult) == 0x000048, "Member 'K32KillerPodSpawningComponent_Server_FireKillerProjectile::ExpectedResult' has a wrong offset!");

// Function TheK32.K32KillerPodSpawningComponent.Cosmetic_OnInvalidPodTriggers
// 0x0018 (0x0018 - 0x0000)
struct K32KillerPodSpawningComponent_Cosmetic_OnInvalidPodTriggers final
{
public:
	struct FVector                                InvalidLocation;                                   // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodSpawningComponent_Cosmetic_OnInvalidPodTriggers) == 0x000008, "Wrong alignment on K32KillerPodSpawningComponent_Cosmetic_OnInvalidPodTriggers");
static_assert(sizeof(K32KillerPodSpawningComponent_Cosmetic_OnInvalidPodTriggers) == 0x000018, "Wrong size on K32KillerPodSpawningComponent_Cosmetic_OnInvalidPodTriggers");
static_assert(offsetof(K32KillerPodSpawningComponent_Cosmetic_OnInvalidPodTriggers, InvalidLocation) == 0x000000, "Member 'K32KillerPodSpawningComponent_Cosmetic_OnInvalidPodTriggers::InvalidLocation' has a wrong offset!");

// Function TheK32.K32KillerPodSpawningIndicator.Cosmetic_OnSettingsChanged
// 0x0070 (0x0070 - 0x0000)
struct K32KillerPodSpawningIndicator_Cosmetic_OnSettingsChanged final
{
public:
	struct FK32KillerPodSpawningIndicatorSettings PreviousSettings;                                  // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FK32KillerPodSpawningIndicatorSettings Settings;                                          // 0x0038(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodSpawningIndicator_Cosmetic_OnSettingsChanged) == 0x000008, "Wrong alignment on K32KillerPodSpawningIndicator_Cosmetic_OnSettingsChanged");
static_assert(sizeof(K32KillerPodSpawningIndicator_Cosmetic_OnSettingsChanged) == 0x000070, "Wrong size on K32KillerPodSpawningIndicator_Cosmetic_OnSettingsChanged");
static_assert(offsetof(K32KillerPodSpawningIndicator_Cosmetic_OnSettingsChanged, PreviousSettings) == 0x000000, "Member 'K32KillerPodSpawningIndicator_Cosmetic_OnSettingsChanged::PreviousSettings' has a wrong offset!");
static_assert(offsetof(K32KillerPodSpawningIndicator_Cosmetic_OnSettingsChanged, Settings) == 0x000038, "Member 'K32KillerPodSpawningIndicator_Cosmetic_OnSettingsChanged::Settings' has a wrong offset!");

// Function TheK32.K32KillerPodSpawningIndicator.GetSettings
// 0x0038 (0x0038 - 0x0000)
struct K32KillerPodSpawningIndicator_GetSettings final
{
public:
	struct FK32KillerPodSpawningIndicatorSettings ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodSpawningIndicator_GetSettings) == 0x000008, "Wrong alignment on K32KillerPodSpawningIndicator_GetSettings");
static_assert(sizeof(K32KillerPodSpawningIndicator_GetSettings) == 0x000038, "Wrong size on K32KillerPodSpawningIndicator_GetSettings");
static_assert(offsetof(K32KillerPodSpawningIndicator_GetSettings, ReturnValue) == 0x000000, "Member 'K32KillerPodSpawningIndicator_GetSettings::ReturnValue' has a wrong offset!");

// Function TheK32.K32KillerPodTargetIndicator.Cosmetic_OnSettingsChanged
// 0x0070 (0x0070 - 0x0000)
struct K32KillerPodTargetIndicator_Cosmetic_OnSettingsChanged final
{
public:
	struct FK32KillerPodTargetIndicatorSettings   PreviousSettings;                                  // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FK32KillerPodTargetIndicatorSettings   Settings;                                          // 0x0038(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodTargetIndicator_Cosmetic_OnSettingsChanged) == 0x000008, "Wrong alignment on K32KillerPodTargetIndicator_Cosmetic_OnSettingsChanged");
static_assert(sizeof(K32KillerPodTargetIndicator_Cosmetic_OnSettingsChanged) == 0x000070, "Wrong size on K32KillerPodTargetIndicator_Cosmetic_OnSettingsChanged");
static_assert(offsetof(K32KillerPodTargetIndicator_Cosmetic_OnSettingsChanged, PreviousSettings) == 0x000000, "Member 'K32KillerPodTargetIndicator_Cosmetic_OnSettingsChanged::PreviousSettings' has a wrong offset!");
static_assert(offsetof(K32KillerPodTargetIndicator_Cosmetic_OnSettingsChanged, Settings) == 0x000038, "Member 'K32KillerPodTargetIndicator_Cosmetic_OnSettingsChanged::Settings' has a wrong offset!");

// Function TheK32.K32KillerPodTargetIndicator.GetSettings
// 0x0038 (0x0038 - 0x0000)
struct K32KillerPodTargetIndicator_GetSettings final
{
public:
	struct FK32KillerPodTargetIndicatorSettings   ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodTargetIndicator_GetSettings) == 0x000008, "Wrong alignment on K32KillerPodTargetIndicator_GetSettings");
static_assert(sizeof(K32KillerPodTargetIndicator_GetSettings) == 0x000038, "Wrong size on K32KillerPodTargetIndicator_GetSettings");
static_assert(offsetof(K32KillerPodTargetIndicator_GetSettings, ReturnValue) == 0x000000, "Member 'K32KillerPodTargetIndicator_GetSettings::ReturnValue' has a wrong offset!");

// Function TheK32.K32KillerPodTargetingComponent.Cosmetic_Local_NewKillerPodTargeted
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPodTargetingComponent_Cosmetic_Local_NewKillerPodTargeted final
{
public:
	class AK32KillerPod*                          NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodTargetingComponent_Cosmetic_Local_NewKillerPodTargeted) == 0x000008, "Wrong alignment on K32KillerPodTargetingComponent_Cosmetic_Local_NewKillerPodTargeted");
static_assert(sizeof(K32KillerPodTargetingComponent_Cosmetic_Local_NewKillerPodTargeted) == 0x000008, "Wrong size on K32KillerPodTargetingComponent_Cosmetic_Local_NewKillerPodTargeted");
static_assert(offsetof(K32KillerPodTargetingComponent_Cosmetic_Local_NewKillerPodTargeted, NewTarget) == 0x000000, "Member 'K32KillerPodTargetingComponent_Cosmetic_Local_NewKillerPodTargeted::NewTarget' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.Authority_OnControlledPodDisabledChanged
// 0x0001 (0x0001 - 0x0000)
struct K32KillerPodVisionController_Authority_OnControlledPodDisabledChanged final
{
public:
	bool                                          IsDisabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_Authority_OnControlledPodDisabledChanged) == 0x000001, "Wrong alignment on K32KillerPodVisionController_Authority_OnControlledPodDisabledChanged");
static_assert(sizeof(K32KillerPodVisionController_Authority_OnControlledPodDisabledChanged) == 0x000001, "Wrong size on K32KillerPodVisionController_Authority_OnControlledPodDisabledChanged");
static_assert(offsetof(K32KillerPodVisionController_Authority_OnControlledPodDisabledChanged, IsDisabled) == 0x000000, "Member 'K32KillerPodVisionController_Authority_OnControlledPodDisabledChanged::IsDisabled' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.Cosmetic_Local_OnCurrentPodDisabledChanged
// 0x0001 (0x0001 - 0x0000)
struct K32KillerPodVisionController_Cosmetic_Local_OnCurrentPodDisabledChanged final
{
public:
	bool                                          IsDisabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_Cosmetic_Local_OnCurrentPodDisabledChanged) == 0x000001, "Wrong alignment on K32KillerPodVisionController_Cosmetic_Local_OnCurrentPodDisabledChanged");
static_assert(sizeof(K32KillerPodVisionController_Cosmetic_Local_OnCurrentPodDisabledChanged) == 0x000001, "Wrong size on K32KillerPodVisionController_Cosmetic_Local_OnCurrentPodDisabledChanged");
static_assert(offsetof(K32KillerPodVisionController_Cosmetic_Local_OnCurrentPodDisabledChanged, IsDisabled) == 0x000000, "Member 'K32KillerPodVisionController_Cosmetic_Local_OnCurrentPodDisabledChanged::IsDisabled' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.Multicast_OnControlledPodDisabledChanged
// 0x0001 (0x0001 - 0x0000)
struct K32KillerPodVisionController_Multicast_OnControlledPodDisabledChanged final
{
public:
	bool                                          IsDisabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_Multicast_OnControlledPodDisabledChanged) == 0x000001, "Wrong alignment on K32KillerPodVisionController_Multicast_OnControlledPodDisabledChanged");
static_assert(sizeof(K32KillerPodVisionController_Multicast_OnControlledPodDisabledChanged) == 0x000001, "Wrong size on K32KillerPodVisionController_Multicast_OnControlledPodDisabledChanged");
static_assert(offsetof(K32KillerPodVisionController_Multicast_OnControlledPodDisabledChanged, IsDisabled) == 0x000000, "Member 'K32KillerPodVisionController_Multicast_OnControlledPodDisabledChanged::IsDisabled' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.Multicast_SetCameraOrientation
// 0x0018 (0x0018 - 0x0000)
struct K32KillerPodVisionController_Multicast_SetCameraOrientation final
{
public:
	struct FRotator                               NewOrientation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_Multicast_SetCameraOrientation) == 0x000008, "Wrong alignment on K32KillerPodVisionController_Multicast_SetCameraOrientation");
static_assert(sizeof(K32KillerPodVisionController_Multicast_SetCameraOrientation) == 0x000018, "Wrong size on K32KillerPodVisionController_Multicast_SetCameraOrientation");
static_assert(offsetof(K32KillerPodVisionController_Multicast_SetCameraOrientation, NewOrientation) == 0x000000, "Member 'K32KillerPodVisionController_Multicast_SetCameraOrientation::NewOrientation' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.Multicast_SetKillerCollisionDisabledForSurvivors
// 0x0001 (0x0001 - 0x0000)
struct K32KillerPodVisionController_Multicast_SetKillerCollisionDisabledForSurvivors final
{
public:
	bool                                          IsDisabled;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_Multicast_SetKillerCollisionDisabledForSurvivors) == 0x000001, "Wrong alignment on K32KillerPodVisionController_Multicast_SetKillerCollisionDisabledForSurvivors");
static_assert(sizeof(K32KillerPodVisionController_Multicast_SetKillerCollisionDisabledForSurvivors) == 0x000001, "Wrong size on K32KillerPodVisionController_Multicast_SetKillerCollisionDisabledForSurvivors");
static_assert(offsetof(K32KillerPodVisionController_Multicast_SetKillerCollisionDisabledForSurvivors, IsDisabled) == 0x000000, "Member 'K32KillerPodVisionController_Multicast_SetKillerCollisionDisabledForSurvivors::IsDisabled' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.Multicast_SetLocationAndRotation
// 0x0018 (0x0018 - 0x0000)
struct K32KillerPodVisionController_Multicast_SetLocationAndRotation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_Multicast_SetLocationAndRotation) == 0x000008, "Wrong alignment on K32KillerPodVisionController_Multicast_SetLocationAndRotation");
static_assert(sizeof(K32KillerPodVisionController_Multicast_SetLocationAndRotation) == 0x000018, "Wrong size on K32KillerPodVisionController_Multicast_SetLocationAndRotation");
static_assert(offsetof(K32KillerPodVisionController_Multicast_SetLocationAndRotation, Location) == 0x000000, "Member 'K32KillerPodVisionController_Multicast_SetLocationAndRotation::Location' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.OnControlledPodUnacquiredFromPool
// 0x0001 (0x0001 - 0x0000)
struct K32KillerPodVisionController_OnControlledPodUnacquiredFromPool final
{
public:
	bool                                          IsAcquired;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_OnControlledPodUnacquiredFromPool) == 0x000001, "Wrong alignment on K32KillerPodVisionController_OnControlledPodUnacquiredFromPool");
static_assert(sizeof(K32KillerPodVisionController_OnControlledPodUnacquiredFromPool) == 0x000001, "Wrong size on K32KillerPodVisionController_OnControlledPodUnacquiredFromPool");
static_assert(offsetof(K32KillerPodVisionController_OnControlledPodUnacquiredFromPool, IsAcquired) == 0x000000, "Member 'K32KillerPodVisionController_OnControlledPodUnacquiredFromPool::IsAcquired' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.OnInteractionStarted
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPodVisionController_OnInteractionStarted final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_OnInteractionStarted) == 0x000008, "Wrong alignment on K32KillerPodVisionController_OnInteractionStarted");
static_assert(sizeof(K32KillerPodVisionController_OnInteractionStarted) == 0x000008, "Wrong size on K32KillerPodVisionController_OnInteractionStarted");
static_assert(offsetof(K32KillerPodVisionController_OnInteractionStarted, Interaction) == 0x000000, "Member 'K32KillerPodVisionController_OnInteractionStarted::Interaction' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.OnKillerLocallyObservedChanged
// 0x0001 (0x0001 - 0x0000)
struct K32KillerPodVisionController_OnKillerLocallyObservedChanged final
{
public:
	bool                                          IsKillerLocallyObserved;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_OnKillerLocallyObservedChanged) == 0x000001, "Wrong alignment on K32KillerPodVisionController_OnKillerLocallyObservedChanged");
static_assert(sizeof(K32KillerPodVisionController_OnKillerLocallyObservedChanged) == 0x000001, "Wrong size on K32KillerPodVisionController_OnKillerLocallyObservedChanged");
static_assert(offsetof(K32KillerPodVisionController_OnKillerLocallyObservedChanged, IsKillerLocallyObserved) == 0x000000, "Member 'K32KillerPodVisionController_OnKillerLocallyObservedChanged::IsKillerLocallyObserved' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPodVisionController_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_OnKillerSet) == 0x000008, "Wrong alignment on K32KillerPodVisionController_OnKillerSet");
static_assert(sizeof(K32KillerPodVisionController_OnKillerSet) == 0x000008, "Wrong size on K32KillerPodVisionController_OnKillerSet");
static_assert(offsetof(K32KillerPodVisionController_OnKillerSet, Killer) == 0x000000, "Member 'K32KillerPodVisionController_OnKillerSet::Killer' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.Server_SetCameraOrientation
// 0x0018 (0x0018 - 0x0000)
struct K32KillerPodVisionController_Server_SetCameraOrientation final
{
public:
	struct FRotator                               NewOrientation;                                    // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_Server_SetCameraOrientation) == 0x000008, "Wrong alignment on K32KillerPodVisionController_Server_SetCameraOrientation");
static_assert(sizeof(K32KillerPodVisionController_Server_SetCameraOrientation) == 0x000018, "Wrong size on K32KillerPodVisionController_Server_SetCameraOrientation");
static_assert(offsetof(K32KillerPodVisionController_Server_SetCameraOrientation, NewOrientation) == 0x000000, "Member 'K32KillerPodVisionController_Server_SetCameraOrientation::NewOrientation' has a wrong offset!");

// Function TheK32.K32KillerPodVisionController.Server_TakeControlOfPod
// 0x0008 (0x0008 - 0x0000)
struct K32KillerPodVisionController_Server_TakeControlOfPod final
{
public:
	class AK32KillerPod*                          KillerPodToBeControlled;                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionController_Server_TakeControlOfPod) == 0x000008, "Wrong alignment on K32KillerPodVisionController_Server_TakeControlOfPod");
static_assert(sizeof(K32KillerPodVisionController_Server_TakeControlOfPod) == 0x000008, "Wrong size on K32KillerPodVisionController_Server_TakeControlOfPod");
static_assert(offsetof(K32KillerPodVisionController_Server_TakeControlOfPod, KillerPodToBeControlled) == 0x000000, "Member 'K32KillerPodVisionController_Server_TakeControlOfPod::KillerPodToBeControlled' has a wrong offset!");

// Function TheK32.K32KillerPodVisionLockOnComponent.Cosmetic_ShootPodProjectileAtSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K32KillerPodVisionLockOnComponent_Cosmetic_ShootPodProjectileAtSurvivor final
{
public:
	const class AK32KillerPod*                    CurrentPod;                                        // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          TargetSurvivor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionLockOnComponent_Cosmetic_ShootPodProjectileAtSurvivor) == 0x000008, "Wrong alignment on K32KillerPodVisionLockOnComponent_Cosmetic_ShootPodProjectileAtSurvivor");
static_assert(sizeof(K32KillerPodVisionLockOnComponent_Cosmetic_ShootPodProjectileAtSurvivor) == 0x000010, "Wrong size on K32KillerPodVisionLockOnComponent_Cosmetic_ShootPodProjectileAtSurvivor");
static_assert(offsetof(K32KillerPodVisionLockOnComponent_Cosmetic_ShootPodProjectileAtSurvivor, CurrentPod) == 0x000000, "Member 'K32KillerPodVisionLockOnComponent_Cosmetic_ShootPodProjectileAtSurvivor::CurrentPod' has a wrong offset!");
static_assert(offsetof(K32KillerPodVisionLockOnComponent_Cosmetic_ShootPodProjectileAtSurvivor, TargetSurvivor) == 0x000008, "Member 'K32KillerPodVisionLockOnComponent_Cosmetic_ShootPodProjectileAtSurvivor::TargetSurvivor' has a wrong offset!");

// Function TheK32.K32KillerPodVisionLockOnComponent.Multicast_ShootPodProjectileAtSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K32KillerPodVisionLockOnComponent_Multicast_ShootPodProjectileAtSurvivor final
{
public:
	const class AK32KillerPod*                    OriginKillerPod;                                   // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          TargetSurvivor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionLockOnComponent_Multicast_ShootPodProjectileAtSurvivor) == 0x000008, "Wrong alignment on K32KillerPodVisionLockOnComponent_Multicast_ShootPodProjectileAtSurvivor");
static_assert(sizeof(K32KillerPodVisionLockOnComponent_Multicast_ShootPodProjectileAtSurvivor) == 0x000010, "Wrong size on K32KillerPodVisionLockOnComponent_Multicast_ShootPodProjectileAtSurvivor");
static_assert(offsetof(K32KillerPodVisionLockOnComponent_Multicast_ShootPodProjectileAtSurvivor, OriginKillerPod) == 0x000000, "Member 'K32KillerPodVisionLockOnComponent_Multicast_ShootPodProjectileAtSurvivor::OriginKillerPod' has a wrong offset!");
static_assert(offsetof(K32KillerPodVisionLockOnComponent_Multicast_ShootPodProjectileAtSurvivor, TargetSurvivor) == 0x000008, "Member 'K32KillerPodVisionLockOnComponent_Multicast_ShootPodProjectileAtSurvivor::TargetSurvivor' has a wrong offset!");

// Function TheK32.K32KillerPodVisionLockOnComponent.Server_LaunchAssimilationProjectile
// 0x0010 (0x0010 - 0x0000)
struct K32KillerPodVisionLockOnComponent_Server_LaunchAssimilationProjectile final
{
public:
	class ACamperPlayer*                          TargetSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK32KillerPod*                          CurrentPod;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerPodVisionLockOnComponent_Server_LaunchAssimilationProjectile) == 0x000008, "Wrong alignment on K32KillerPodVisionLockOnComponent_Server_LaunchAssimilationProjectile");
static_assert(sizeof(K32KillerPodVisionLockOnComponent_Server_LaunchAssimilationProjectile) == 0x000010, "Wrong size on K32KillerPodVisionLockOnComponent_Server_LaunchAssimilationProjectile");
static_assert(offsetof(K32KillerPodVisionLockOnComponent_Server_LaunchAssimilationProjectile, TargetSurvivor) == 0x000000, "Member 'K32KillerPodVisionLockOnComponent_Server_LaunchAssimilationProjectile::TargetSurvivor' has a wrong offset!");
static_assert(offsetof(K32KillerPodVisionLockOnComponent_Server_LaunchAssimilationProjectile, CurrentPod) == 0x000008, "Member 'K32KillerPodVisionLockOnComponent_Server_LaunchAssimilationProjectile::CurrentPod' has a wrong offset!");

// Function TheK32.K32KillerPodVisionLockOnComponent.Server_SetSurvivorBeingLockedOn
// 0x0010 (0x0010 - 0x0000)
struct K32KillerPodVisionLockOnComponent_Server_SetSurvivorBeingLockedOn final
{
public:
	class ACamperPlayer*                          TargetSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LockOnRatio;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K32KillerPodVisionLockOnComponent_Server_SetSurvivorBeingLockedOn) == 0x000008, "Wrong alignment on K32KillerPodVisionLockOnComponent_Server_SetSurvivorBeingLockedOn");
static_assert(sizeof(K32KillerPodVisionLockOnComponent_Server_SetSurvivorBeingLockedOn) == 0x000010, "Wrong size on K32KillerPodVisionLockOnComponent_Server_SetSurvivorBeingLockedOn");
static_assert(offsetof(K32KillerPodVisionLockOnComponent_Server_SetSurvivorBeingLockedOn, TargetSurvivor) == 0x000000, "Member 'K32KillerPodVisionLockOnComponent_Server_SetSurvivorBeingLockedOn::TargetSurvivor' has a wrong offset!");
static_assert(offsetof(K32KillerPodVisionLockOnComponent_Server_SetSurvivorBeingLockedOn, LockOnRatio) == 0x000008, "Member 'K32KillerPodVisionLockOnComponent_Server_SetSurvivorBeingLockedOn::LockOnRatio' has a wrong offset!");

// Function TheK32.K32KillerProjectileSpawnChargeableInteractionDefinition.Server_SendKillerAimingAtSurvivorGameEvent
// 0x0010 (0x0010 - 0x0000)
struct K32KillerProjectileSpawnChargeableInteractionDefinition_Server_SendKillerAimingAtSurvivorGameEvent final
{
public:
	bool                                          IsAiming;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          TargetSurvivor;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerProjectileSpawnChargeableInteractionDefinition_Server_SendKillerAimingAtSurvivorGameEvent) == 0x000008, "Wrong alignment on K32KillerProjectileSpawnChargeableInteractionDefinition_Server_SendKillerAimingAtSurvivorGameEvent");
static_assert(sizeof(K32KillerProjectileSpawnChargeableInteractionDefinition_Server_SendKillerAimingAtSurvivorGameEvent) == 0x000010, "Wrong size on K32KillerProjectileSpawnChargeableInteractionDefinition_Server_SendKillerAimingAtSurvivorGameEvent");
static_assert(offsetof(K32KillerProjectileSpawnChargeableInteractionDefinition_Server_SendKillerAimingAtSurvivorGameEvent, IsAiming) == 0x000000, "Member 'K32KillerProjectileSpawnChargeableInteractionDefinition_Server_SendKillerAimingAtSurvivorGameEvent::IsAiming' has a wrong offset!");
static_assert(offsetof(K32KillerProjectileSpawnChargeableInteractionDefinition_Server_SendKillerAimingAtSurvivorGameEvent, TargetSurvivor) == 0x000008, "Member 'K32KillerProjectileSpawnChargeableInteractionDefinition_Server_SendKillerAimingAtSurvivorGameEvent::TargetSurvivor' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.Cosmetic_DisableTeleportVignette
// 0x0008 (0x0008 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_DisableTeleportVignette final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_DisableTeleportVignette) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_DisableTeleportVignette");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_DisableTeleportVignette) == 0x000008, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_DisableTeleportVignette");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_DisableTeleportVignette, Killer) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_DisableTeleportVignette::Killer' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.Cosmetic_EnableTeleportVignette
// 0x0008 (0x0008 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_EnableTeleportVignette final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_EnableTeleportVignette) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_EnableTeleportVignette");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_EnableTeleportVignette) == 0x000008, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_EnableTeleportVignette");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_EnableTeleportVignette, Killer) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_EnableTeleportVignette::Killer' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.Cosmetic_OnTeleportEnd
// 0x0008 (0x0008 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportEnd final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportEnd) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportEnd");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportEnd) == 0x000008, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportEnd");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportEnd, Killer) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportEnd::Killer' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.Cosmetic_OnTeleportStart
// 0x0038 (0x0038 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportEndLocation;                               // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportStartLocation;                             // 0x0020(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart) == 0x000038, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart, Killer) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart::Killer' has a wrong offset!");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart, TeleportEndLocation) == 0x000008, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart::TeleportEndLocation' has a wrong offset!");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart, TeleportStartLocation) == 0x000020, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Cosmetic_OnTeleportStart::TeleportStartLocation' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.Multicast_DestroyPallet
// 0x0008 (0x0008 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_Multicast_DestroyPallet final
{
public:
	class APallet*                                Pallet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_DestroyPallet) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_Multicast_DestroyPallet");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_DestroyPallet) == 0x000008, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_Multicast_DestroyPallet");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_DestroyPallet, Pallet) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Multicast_DestroyPallet::Pallet' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.Multicast_OnTeleportEnded
// 0x0008 (0x0008 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportEnded final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportEnded) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportEnded");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportEnded) == 0x000008, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportEnded");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportEnded, Player) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportEnded::Player' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.Multicast_OnTeleportStarted
// 0x0038 (0x0038 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportStartLocation;                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportEndLocation;                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted) == 0x000038, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted, Player) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted::Player' has a wrong offset!");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted, TeleportStartLocation) == 0x000008, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted::TeleportStartLocation' has a wrong offset!");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted, TeleportEndLocation) == 0x000020, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Multicast_OnTeleportStarted::TeleportEndLocation' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.Multicast_SetTeleportTarget
// 0x0040 (0x0040 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportEndLocation;                               // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportStartLocation;                             // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK32KillerPod*                          InitiatedPod;                                      // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget) == 0x000040, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget, Survivor) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget::Survivor' has a wrong offset!");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget, TeleportEndLocation) == 0x000008, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget::TeleportEndLocation' has a wrong offset!");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget, TeleportStartLocation) == 0x000020, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget::TeleportStartLocation' has a wrong offset!");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget, InitiatedPod) == 0x000038, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Multicast_SetTeleportTarget::InitiatedPod' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.OnKillerCollisionIngoreLingerComplete
// 0x0008 (0x0008 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_OnKillerCollisionIngoreLingerComplete final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_OnKillerCollisionIngoreLingerComplete) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_OnKillerCollisionIngoreLingerComplete");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_OnKillerCollisionIngoreLingerComplete) == 0x000008, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_OnKillerCollisionIngoreLingerComplete");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_OnKillerCollisionIngoreLingerComplete, Player) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_OnKillerCollisionIngoreLingerComplete::Player' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.Server_SetTeleportTarget
// 0x0010 (0x0010 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_Server_SetTeleportTarget final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK32KillerPod*                          InitiatedPod;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_Server_SetTeleportTarget) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_Server_SetTeleportTarget");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_Server_SetTeleportTarget) == 0x000010, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_Server_SetTeleportTarget");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Server_SetTeleportTarget, Survivor) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Server_SetTeleportTarget::Survivor' has a wrong offset!");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_Server_SetTeleportTarget, InitiatedPod) == 0x000008, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_Server_SetTeleportTarget::InitiatedPod' has a wrong offset!");

// Function TheK32.K32KillerToSurvivorTeleportInteractionDefinition.StartTeleportOut
// 0x0008 (0x0008 - 0x0000)
struct K32KillerToSurvivorTeleportInteractionDefinition_StartTeleportOut final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32KillerToSurvivorTeleportInteractionDefinition_StartTeleportOut) == 0x000008, "Wrong alignment on K32KillerToSurvivorTeleportInteractionDefinition_StartTeleportOut");
static_assert(sizeof(K32KillerToSurvivorTeleportInteractionDefinition_StartTeleportOut) == 0x000008, "Wrong size on K32KillerToSurvivorTeleportInteractionDefinition_StartTeleportOut");
static_assert(offsetof(K32KillerToSurvivorTeleportInteractionDefinition_StartTeleportOut, Player) == 0x000000, "Member 'K32KillerToSurvivorTeleportInteractionDefinition_StartTeleportOut::Player' has a wrong offset!");

// Function TheK32.K32OverclockStatusEffectBase.Multicast_DestroyPallet
// 0x0010 (0x0010 - 0x0000)
struct K32OverclockStatusEffectBase_Multicast_DestroyPallet final
{
public:
	class APallet*                                Pallet;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASlasherPlayer*                         Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32OverclockStatusEffectBase_Multicast_DestroyPallet) == 0x000008, "Wrong alignment on K32OverclockStatusEffectBase_Multicast_DestroyPallet");
static_assert(sizeof(K32OverclockStatusEffectBase_Multicast_DestroyPallet) == 0x000010, "Wrong size on K32OverclockStatusEffectBase_Multicast_DestroyPallet");
static_assert(offsetof(K32OverclockStatusEffectBase_Multicast_DestroyPallet, Pallet) == 0x000000, "Member 'K32OverclockStatusEffectBase_Multicast_DestroyPallet::Pallet' has a wrong offset!");
static_assert(offsetof(K32OverclockStatusEffectBase_Multicast_DestroyPallet, Killer) == 0x000008, "Member 'K32OverclockStatusEffectBase_Multicast_DestroyPallet::Killer' has a wrong offset!");

// Function TheK32.K32P01.GetExhaustionDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K32P01_GetExhaustionDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32P01_GetExhaustionDurationAtLevel) == 0x000004, "Wrong alignment on K32P01_GetExhaustionDurationAtLevel");
static_assert(sizeof(K32P01_GetExhaustionDurationAtLevel) == 0x000004, "Wrong size on K32P01_GetExhaustionDurationAtLevel");
static_assert(offsetof(K32P01_GetExhaustionDurationAtLevel, ReturnValue) == 0x000000, "Member 'K32P01_GetExhaustionDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK32.K32P02.GetHinderedEffectDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K32P02_GetHinderedEffectDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32P02_GetHinderedEffectDurationAtLevel) == 0x000004, "Wrong alignment on K32P02_GetHinderedEffectDurationAtLevel");
static_assert(sizeof(K32P02_GetHinderedEffectDurationAtLevel) == 0x000004, "Wrong size on K32P02_GetHinderedEffectDurationAtLevel");
static_assert(offsetof(K32P02_GetHinderedEffectDurationAtLevel, ReturnValue) == 0x000000, "Member 'K32P02_GetHinderedEffectDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK32.K32P02.GetPerkCooldownAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K32P02_GetPerkCooldownAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32P02_GetPerkCooldownAtLevel) == 0x000004, "Wrong alignment on K32P02_GetPerkCooldownAtLevel");
static_assert(sizeof(K32P02_GetPerkCooldownAtLevel) == 0x000004, "Wrong size on K32P02_GetPerkCooldownAtLevel");
static_assert(offsetof(K32P02_GetPerkCooldownAtLevel, ReturnValue) == 0x000000, "Member 'K32P02_GetPerkCooldownAtLevel::ReturnValue' has a wrong offset!");

// Function TheK32.K32P02.GetPerkRangeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K32P02_GetPerkRangeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32P02_GetPerkRangeAtLevel) == 0x000004, "Wrong alignment on K32P02_GetPerkRangeAtLevel");
static_assert(sizeof(K32P02_GetPerkRangeAtLevel) == 0x000004, "Wrong size on K32P02_GetPerkRangeAtLevel");
static_assert(offsetof(K32P02_GetPerkRangeAtLevel, ReturnValue) == 0x000000, "Member 'K32P02_GetPerkRangeAtLevel::ReturnValue' has a wrong offset!");

// Function TheK32.K32P03.Cosmetic_OnCompromiseCompletedVFX
// 0x0008 (0x0008 - 0x0000)
struct K32P03_Cosmetic_OnCompromiseCompletedVFX final
{
public:
	const class AGenerator*                       CompromisedGenerator;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32P03_Cosmetic_OnCompromiseCompletedVFX) == 0x000008, "Wrong alignment on K32P03_Cosmetic_OnCompromiseCompletedVFX");
static_assert(sizeof(K32P03_Cosmetic_OnCompromiseCompletedVFX) == 0x000008, "Wrong size on K32P03_Cosmetic_OnCompromiseCompletedVFX");
static_assert(offsetof(K32P03_Cosmetic_OnCompromiseCompletedVFX, CompromisedGenerator) == 0x000000, "Member 'K32P03_Cosmetic_OnCompromiseCompletedVFX::CompromisedGenerator' has a wrong offset!");

// Function TheK32.K32P03.Cosmetic_OnTriggerCompromiseVFX
// 0x0008 (0x0008 - 0x0000)
struct K32P03_Cosmetic_OnTriggerCompromiseVFX final
{
public:
	const class AGenerator*                       CompromisedGenerator;                              // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32P03_Cosmetic_OnTriggerCompromiseVFX) == 0x000008, "Wrong alignment on K32P03_Cosmetic_OnTriggerCompromiseVFX");
static_assert(sizeof(K32P03_Cosmetic_OnTriggerCompromiseVFX) == 0x000008, "Wrong size on K32P03_Cosmetic_OnTriggerCompromiseVFX");
static_assert(offsetof(K32P03_Cosmetic_OnTriggerCompromiseVFX, CompromisedGenerator) == 0x000000, "Member 'K32P03_Cosmetic_OnTriggerCompromiseVFX::CompromisedGenerator' has a wrong offset!");

// Function TheK32.K32P03.GetHastePercent
// 0x0004 (0x0004 - 0x0000)
struct K32P03_GetHastePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32P03_GetHastePercent) == 0x000004, "Wrong alignment on K32P03_GetHastePercent");
static_assert(sizeof(K32P03_GetHastePercent) == 0x000004, "Wrong size on K32P03_GetHastePercent");
static_assert(offsetof(K32P03_GetHastePercent, ReturnValue) == 0x000000, "Member 'K32P03_GetHastePercent::ReturnValue' has a wrong offset!");

// Function TheK32.K32P03.GetStatusEffectDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K32P03_GetStatusEffectDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32P03_GetStatusEffectDurationAtLevel) == 0x000004, "Wrong alignment on K32P03_GetStatusEffectDurationAtLevel");
static_assert(sizeof(K32P03_GetStatusEffectDurationAtLevel) == 0x000004, "Wrong size on K32P03_GetStatusEffectDurationAtLevel");
static_assert(offsetof(K32P03_GetStatusEffectDurationAtLevel, ReturnValue) == 0x000000, "Member 'K32P03_GetStatusEffectDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK32.K32PowerStatusHandlerComponent.Authority_OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct K32PowerStatusHandlerComponent_Authority_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32PowerStatusHandlerComponent_Authority_OnSurvivorAdded) == 0x000008, "Wrong alignment on K32PowerStatusHandlerComponent_Authority_OnSurvivorAdded");
static_assert(sizeof(K32PowerStatusHandlerComponent_Authority_OnSurvivorAdded) == 0x000008, "Wrong size on K32PowerStatusHandlerComponent_Authority_OnSurvivorAdded");
static_assert(offsetof(K32PowerStatusHandlerComponent_Authority_OnSurvivorAdded, Survivor) == 0x000000, "Member 'K32PowerStatusHandlerComponent_Authority_OnSurvivorAdded::Survivor' has a wrong offset!");

// Function TheK32.K32PowerStatusHandlerComponent.BP_SurvivorScream
// 0x0008 (0x0008 - 0x0000)
struct K32PowerStatusHandlerComponent_BP_SurvivorScream final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32PowerStatusHandlerComponent_BP_SurvivorScream) == 0x000008, "Wrong alignment on K32PowerStatusHandlerComponent_BP_SurvivorScream");
static_assert(sizeof(K32PowerStatusHandlerComponent_BP_SurvivorScream) == 0x000008, "Wrong size on K32PowerStatusHandlerComponent_BP_SurvivorScream");
static_assert(offsetof(K32PowerStatusHandlerComponent_BP_SurvivorScream, Survivor) == 0x000000, "Member 'K32PowerStatusHandlerComponent_BP_SurvivorScream::Survivor' has a wrong offset!");

// Function TheK32.K32PowerStatusHandlerComponent.Cosmetic_OnAssimilationChanged
// 0x0010 (0x0010 - 0x0000)
struct K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationChanged final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAssimilated;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationChanged) == 0x000008, "Wrong alignment on K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationChanged");
static_assert(sizeof(K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationChanged) == 0x000010, "Wrong size on K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationChanged");
static_assert(offsetof(K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationChanged, Survivor) == 0x000000, "Member 'K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationChanged::Survivor' has a wrong offset!");
static_assert(offsetof(K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationChanged, IsAssimilated) == 0x000008, "Member 'K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationChanged::IsAssimilated' has a wrong offset!");

// Function TheK32.K32PowerStatusHandlerComponent.Cosmetic_OnAssimilationSpreadingToSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationSpreadingToSurvivor final
{
public:
	const class ACamperPlayer*                    OriginatingSurvivor;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACamperPlayer*                    TargetSurvivor;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationSpreadingToSurvivor) == 0x000008, "Wrong alignment on K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationSpreadingToSurvivor");
static_assert(sizeof(K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationSpreadingToSurvivor) == 0x000010, "Wrong size on K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationSpreadingToSurvivor");
static_assert(offsetof(K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationSpreadingToSurvivor, OriginatingSurvivor) == 0x000000, "Member 'K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationSpreadingToSurvivor::OriginatingSurvivor' has a wrong offset!");
static_assert(offsetof(K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationSpreadingToSurvivor, TargetSurvivor) == 0x000008, "Member 'K32PowerStatusHandlerComponent_Cosmetic_OnAssimilationSpreadingToSurvivor::TargetSurvivor' has a wrong offset!");

// Function TheK32.K32PowerStatusHandlerComponent.Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K32PowerStatusHandlerComponent_Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor final
{
public:
	const class ACamperPlayer*                    OriginatingSurvivor;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACamperPlayer*                    TargetSurvivor;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32PowerStatusHandlerComponent_Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor) == 0x000008, "Wrong alignment on K32PowerStatusHandlerComponent_Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor");
static_assert(sizeof(K32PowerStatusHandlerComponent_Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor) == 0x000010, "Wrong size on K32PowerStatusHandlerComponent_Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor");
static_assert(offsetof(K32PowerStatusHandlerComponent_Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor, OriginatingSurvivor) == 0x000000, "Member 'K32PowerStatusHandlerComponent_Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor::OriginatingSurvivor' has a wrong offset!");
static_assert(offsetof(K32PowerStatusHandlerComponent_Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor, TargetSurvivor) == 0x000008, "Member 'K32PowerStatusHandlerComponent_Cosmetic_OnInRangeOfAssimilationSpreadingSurvivor::TargetSurvivor' has a wrong offset!");

// Function TheK32.K32PowerStatusHandlerComponent.Multicast_OnAssimilationSpreadingToSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K32PowerStatusHandlerComponent_Multicast_OnAssimilationSpreadingToSurvivor final
{
public:
	const class ACamperPlayer*                    OriginatingSurvivor;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACamperPlayer*                    TargetSurvivor;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32PowerStatusHandlerComponent_Multicast_OnAssimilationSpreadingToSurvivor) == 0x000008, "Wrong alignment on K32PowerStatusHandlerComponent_Multicast_OnAssimilationSpreadingToSurvivor");
static_assert(sizeof(K32PowerStatusHandlerComponent_Multicast_OnAssimilationSpreadingToSurvivor) == 0x000010, "Wrong size on K32PowerStatusHandlerComponent_Multicast_OnAssimilationSpreadingToSurvivor");
static_assert(offsetof(K32PowerStatusHandlerComponent_Multicast_OnAssimilationSpreadingToSurvivor, OriginatingSurvivor) == 0x000000, "Member 'K32PowerStatusHandlerComponent_Multicast_OnAssimilationSpreadingToSurvivor::OriginatingSurvivor' has a wrong offset!");
static_assert(offsetof(K32PowerStatusHandlerComponent_Multicast_OnAssimilationSpreadingToSurvivor, TargetSurvivor) == 0x000008, "Member 'K32PowerStatusHandlerComponent_Multicast_OnAssimilationSpreadingToSurvivor::TargetSurvivor' has a wrong offset!");

// Function TheK32.K32PowerStatusHandlerComponent.Multicast_OnInRangeOfAssimilationSpreadingSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K32PowerStatusHandlerComponent_Multicast_OnInRangeOfAssimilationSpreadingSurvivor final
{
public:
	const class ACamperPlayer*                    OriginatingSurvivor;                               // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACamperPlayer*                    TargetSurvivor;                                    // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32PowerStatusHandlerComponent_Multicast_OnInRangeOfAssimilationSpreadingSurvivor) == 0x000008, "Wrong alignment on K32PowerStatusHandlerComponent_Multicast_OnInRangeOfAssimilationSpreadingSurvivor");
static_assert(sizeof(K32PowerStatusHandlerComponent_Multicast_OnInRangeOfAssimilationSpreadingSurvivor) == 0x000010, "Wrong size on K32PowerStatusHandlerComponent_Multicast_OnInRangeOfAssimilationSpreadingSurvivor");
static_assert(offsetof(K32PowerStatusHandlerComponent_Multicast_OnInRangeOfAssimilationSpreadingSurvivor, OriginatingSurvivor) == 0x000000, "Member 'K32PowerStatusHandlerComponent_Multicast_OnInRangeOfAssimilationSpreadingSurvivor::OriginatingSurvivor' has a wrong offset!");
static_assert(offsetof(K32PowerStatusHandlerComponent_Multicast_OnInRangeOfAssimilationSpreadingSurvivor, TargetSurvivor) == 0x000008, "Member 'K32PowerStatusHandlerComponent_Multicast_OnInRangeOfAssimilationSpreadingSurvivor::TargetSurvivor' has a wrong offset!");

// Function TheK32.K32PowerStatusHandlerComponent.Multicast_SurvivorScream
// 0x0008 (0x0008 - 0x0000)
struct K32PowerStatusHandlerComponent_Multicast_SurvivorScream final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32PowerStatusHandlerComponent_Multicast_SurvivorScream) == 0x000008, "Wrong alignment on K32PowerStatusHandlerComponent_Multicast_SurvivorScream");
static_assert(sizeof(K32PowerStatusHandlerComponent_Multicast_SurvivorScream) == 0x000008, "Wrong size on K32PowerStatusHandlerComponent_Multicast_SurvivorScream");
static_assert(offsetof(K32PowerStatusHandlerComponent_Multicast_SurvivorScream, Survivor) == 0x000000, "Member 'K32PowerStatusHandlerComponent_Multicast_SurvivorScream::Survivor' has a wrong offset!");

// Function TheK32.K32PowerStatusHandlerComponent.OnRep_SurvivorStatusList
// 0x0010 (0x0010 - 0x0000)
struct K32PowerStatusHandlerComponent_OnRep_SurvivorStatusList final
{
public:
	TArray<struct FK32SurvivorStatus>             OldSurvivorStatus;                                 // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32PowerStatusHandlerComponent_OnRep_SurvivorStatusList) == 0x000008, "Wrong alignment on K32PowerStatusHandlerComponent_OnRep_SurvivorStatusList");
static_assert(sizeof(K32PowerStatusHandlerComponent_OnRep_SurvivorStatusList) == 0x000010, "Wrong size on K32PowerStatusHandlerComponent_OnRep_SurvivorStatusList");
static_assert(offsetof(K32PowerStatusHandlerComponent_OnRep_SurvivorStatusList, OldSurvivorStatus) == 0x000000, "Member 'K32PowerStatusHandlerComponent_OnRep_SurvivorStatusList::OldSurvivorStatus' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.Cosmetic_OnIsEffectiveEmpInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct K32SurvivorCosmeticHelperActor_Cosmetic_OnIsEffectiveEmpInRangeChanged final
{
public:
	bool                                          IsEffectiveEmpInRange;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_Cosmetic_OnIsEffectiveEmpInRangeChanged) == 0x000001, "Wrong alignment on K32SurvivorCosmeticHelperActor_Cosmetic_OnIsEffectiveEmpInRangeChanged");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_Cosmetic_OnIsEffectiveEmpInRangeChanged) == 0x000001, "Wrong size on K32SurvivorCosmeticHelperActor_Cosmetic_OnIsEffectiveEmpInRangeChanged");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_Cosmetic_OnIsEffectiveEmpInRangeChanged, IsEffectiveEmpInRange) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_Cosmetic_OnIsEffectiveEmpInRangeChanged::IsEffectiveEmpInRange' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.Cosmetic_OnKillerAimsPodAtSurvivor
// 0x0008 (0x0008 - 0x0000)
struct K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerAimsPodAtSurvivor final
{
public:
	const class ADBDPlayer*                       Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerAimsPodAtSurvivor) == 0x000008, "Wrong alignment on K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerAimsPodAtSurvivor");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerAimsPodAtSurvivor) == 0x000008, "Wrong size on K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerAimsPodAtSurvivor");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerAimsPodAtSurvivor, Killer) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerAimsPodAtSurvivor::Killer' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.Cosmetic_OnKillerLocksOnToSurvivor
// 0x0001 (0x0001 - 0x0000)
struct K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerLocksOnToSurvivor final
{
public:
	bool                                          IsTargetAssimilated;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerLocksOnToSurvivor) == 0x000001, "Wrong alignment on K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerLocksOnToSurvivor");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerLocksOnToSurvivor) == 0x000001, "Wrong size on K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerLocksOnToSurvivor");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerLocksOnToSurvivor, IsTargetAssimilated) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_Cosmetic_OnKillerLocksOnToSurvivor::IsTargetAssimilated' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.Cosmetic_OnTeleportStart
// 0x0030 (0x0030 - 0x0000)
struct K32SurvivorCosmeticHelperActor_Cosmetic_OnTeleportStart final
{
public:
	struct FVector                                TeleportStartLocation;                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportEndLocation;                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_Cosmetic_OnTeleportStart) == 0x000008, "Wrong alignment on K32SurvivorCosmeticHelperActor_Cosmetic_OnTeleportStart");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_Cosmetic_OnTeleportStart) == 0x000030, "Wrong size on K32SurvivorCosmeticHelperActor_Cosmetic_OnTeleportStart");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_Cosmetic_OnTeleportStart, TeleportStartLocation) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_Cosmetic_OnTeleportStart::TeleportStartLocation' has a wrong offset!");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_Cosmetic_OnTeleportStart, TeleportEndLocation) == 0x000018, "Member 'K32SurvivorCosmeticHelperActor_Cosmetic_OnTeleportStart::TeleportEndLocation' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.GetNoseLocation
// 0x0018 (0x0018 - 0x0000)
struct K32SurvivorCosmeticHelperActor_GetNoseLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_GetNoseLocation) == 0x000008, "Wrong alignment on K32SurvivorCosmeticHelperActor_GetNoseLocation");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_GetNoseLocation) == 0x000018, "Wrong size on K32SurvivorCosmeticHelperActor_GetNoseLocation");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_GetNoseLocation, ReturnValue) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_GetNoseLocation::ReturnValue' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.OnKillerAimsPodAtSurvivor
// 0x0040 (0x0040 - 0x0000)
struct K32SurvivorCosmeticHelperActor_OnKillerAimsPodAtSurvivor final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_OnKillerAimsPodAtSurvivor) == 0x000008, "Wrong alignment on K32SurvivorCosmeticHelperActor_OnKillerAimsPodAtSurvivor");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_OnKillerAimsPodAtSurvivor) == 0x000040, "Wrong size on K32SurvivorCosmeticHelperActor_OnKillerAimsPodAtSurvivor");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_OnKillerAimsPodAtSurvivor, GameEventType) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_OnKillerAimsPodAtSurvivor::GameEventType' has a wrong offset!");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_OnKillerAimsPodAtSurvivor, GameEventData) == 0x000010, "Member 'K32SurvivorCosmeticHelperActor_OnKillerAimsPodAtSurvivor::GameEventData' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.OnKillerLocksOnToSurvivor
// 0x0040 (0x0040 - 0x0000)
struct K32SurvivorCosmeticHelperActor_OnKillerLocksOnToSurvivor final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_OnKillerLocksOnToSurvivor) == 0x000008, "Wrong alignment on K32SurvivorCosmeticHelperActor_OnKillerLocksOnToSurvivor");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_OnKillerLocksOnToSurvivor) == 0x000040, "Wrong size on K32SurvivorCosmeticHelperActor_OnKillerLocksOnToSurvivor");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_OnKillerLocksOnToSurvivor, GameEventType) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_OnKillerLocksOnToSurvivor::GameEventType' has a wrong offset!");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_OnKillerLocksOnToSurvivor, GameEventData) == 0x000010, "Member 'K32SurvivorCosmeticHelperActor_OnKillerLocksOnToSurvivor::GameEventData' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.OnKillerNoLongerAimsPodAtSurvivor
// 0x0040 (0x0040 - 0x0000)
struct K32SurvivorCosmeticHelperActor_OnKillerNoLongerAimsPodAtSurvivor final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_OnKillerNoLongerAimsPodAtSurvivor) == 0x000008, "Wrong alignment on K32SurvivorCosmeticHelperActor_OnKillerNoLongerAimsPodAtSurvivor");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_OnKillerNoLongerAimsPodAtSurvivor) == 0x000040, "Wrong size on K32SurvivorCosmeticHelperActor_OnKillerNoLongerAimsPodAtSurvivor");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_OnKillerNoLongerAimsPodAtSurvivor, GameEventType) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_OnKillerNoLongerAimsPodAtSurvivor::GameEventType' has a wrong offset!");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_OnKillerNoLongerAimsPodAtSurvivor, GameEventData) == 0x000010, "Member 'K32SurvivorCosmeticHelperActor_OnKillerNoLongerAimsPodAtSurvivor::GameEventData' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.OnKillerNoLongerLocksOnToSurvivor
// 0x0040 (0x0040 - 0x0000)
struct K32SurvivorCosmeticHelperActor_OnKillerNoLongerLocksOnToSurvivor final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_OnKillerNoLongerLocksOnToSurvivor) == 0x000008, "Wrong alignment on K32SurvivorCosmeticHelperActor_OnKillerNoLongerLocksOnToSurvivor");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_OnKillerNoLongerLocksOnToSurvivor) == 0x000040, "Wrong size on K32SurvivorCosmeticHelperActor_OnKillerNoLongerLocksOnToSurvivor");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_OnKillerNoLongerLocksOnToSurvivor, GameEventType) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_OnKillerNoLongerLocksOnToSurvivor::GameEventType' has a wrong offset!");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_OnKillerNoLongerLocksOnToSurvivor, GameEventData) == 0x000010, "Member 'K32SurvivorCosmeticHelperActor_OnKillerNoLongerLocksOnToSurvivor::GameEventData' has a wrong offset!");

// Function TheK32.K32SurvivorCosmeticHelperActor.OnSurvivorDisguisedOrUndisguised
// 0x0001 (0x0001 - 0x0000)
struct K32SurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised final
{
public:
	bool                                          IsDisguised;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32SurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised) == 0x000001, "Wrong alignment on K32SurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised");
static_assert(sizeof(K32SurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised) == 0x000001, "Wrong size on K32SurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised");
static_assert(offsetof(K32SurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised, IsDisguised) == 0x000000, "Member 'K32SurvivorCosmeticHelperActor_OnSurvivorDisguisedOrUndisguised::IsDisguised' has a wrong offset!");

// Function TheK32.K32Utilities.DoesEmpReach
// 0x0038 (0x0038 - 0x0000)
struct K32Utilities_DoesEmpReach final
{
public:
	struct FVector                                LaunchPosition;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RangeSquared;                                      // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0034(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K32Utilities_DoesEmpReach) == 0x000008, "Wrong alignment on K32Utilities_DoesEmpReach");
static_assert(sizeof(K32Utilities_DoesEmpReach) == 0x000038, "Wrong size on K32Utilities_DoesEmpReach");
static_assert(offsetof(K32Utilities_DoesEmpReach, LaunchPosition) == 0x000000, "Member 'K32Utilities_DoesEmpReach::LaunchPosition' has a wrong offset!");
static_assert(offsetof(K32Utilities_DoesEmpReach, TargetLocation) == 0x000018, "Member 'K32Utilities_DoesEmpReach::TargetLocation' has a wrong offset!");
static_assert(offsetof(K32Utilities_DoesEmpReach, RangeSquared) == 0x000030, "Member 'K32Utilities_DoesEmpReach::RangeSquared' has a wrong offset!");
static_assert(offsetof(K32Utilities_DoesEmpReach, ReturnValue) == 0x000034, "Member 'K32Utilities_DoesEmpReach::ReturnValue' has a wrong offset!");

// Function TheK32.K32Utilities.GetK32Power
// 0x0010 (0x0010 - 0x0000)
struct K32Utilities_GetK32Power final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK32Power*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K32Utilities_GetK32Power) == 0x000008, "Wrong alignment on K32Utilities_GetK32Power");
static_assert(sizeof(K32Utilities_GetK32Power) == 0x000010, "Wrong size on K32Utilities_GetK32Power");
static_assert(offsetof(K32Utilities_GetK32Power, WorldContextObject) == 0x000000, "Member 'K32Utilities_GetK32Power::WorldContextObject' has a wrong offset!");
static_assert(offsetof(K32Utilities_GetK32Power, ReturnValue) == 0x000008, "Member 'K32Utilities_GetK32Power::ReturnValue' has a wrong offset!");

// Function TheK32.K32Utilities.IsPodOutlineAndIndicatorVisible
// 0x0010 (0x0010 - 0x0000)
struct K32Utilities_IsPodOutlineAndIndicatorVisible final
{
public:
	const class ASlasherPlayer*                   Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K32Utilities_IsPodOutlineAndIndicatorVisible) == 0x000008, "Wrong alignment on K32Utilities_IsPodOutlineAndIndicatorVisible");
static_assert(sizeof(K32Utilities_IsPodOutlineAndIndicatorVisible) == 0x000010, "Wrong size on K32Utilities_IsPodOutlineAndIndicatorVisible");
static_assert(offsetof(K32Utilities_IsPodOutlineAndIndicatorVisible, Killer) == 0x000000, "Member 'K32Utilities_IsPodOutlineAndIndicatorVisible::Killer' has a wrong offset!");
static_assert(offsetof(K32Utilities_IsPodOutlineAndIndicatorVisible, ReturnValue) == 0x000008, "Member 'K32Utilities_IsPodOutlineAndIndicatorVisible::ReturnValue' has a wrong offset!");

// Function TheK32.K32Utilities.IsSurvivorAbleToBeAffectedByPower
// 0x0018 (0x0018 - 0x0000)
struct K32Utilities_IsSurvivorAbleToBeAffectedByPower final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASlasherPlayer*                   Killer;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K32Utilities_IsSurvivorAbleToBeAffectedByPower) == 0x000008, "Wrong alignment on K32Utilities_IsSurvivorAbleToBeAffectedByPower");
static_assert(sizeof(K32Utilities_IsSurvivorAbleToBeAffectedByPower) == 0x000018, "Wrong size on K32Utilities_IsSurvivorAbleToBeAffectedByPower");
static_assert(offsetof(K32Utilities_IsSurvivorAbleToBeAffectedByPower, Survivor) == 0x000000, "Member 'K32Utilities_IsSurvivorAbleToBeAffectedByPower::Survivor' has a wrong offset!");
static_assert(offsetof(K32Utilities_IsSurvivorAbleToBeAffectedByPower, Killer) == 0x000008, "Member 'K32Utilities_IsSurvivorAbleToBeAffectedByPower::Killer' has a wrong offset!");
static_assert(offsetof(K32Utilities_IsSurvivorAbleToBeAffectedByPower, ReturnValue) == 0x000010, "Member 'K32Utilities_IsSurvivorAbleToBeAffectedByPower::ReturnValue' has a wrong offset!");

}

