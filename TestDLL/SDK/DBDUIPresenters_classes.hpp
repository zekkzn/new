#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIPresenters

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "DBDUIPresenters_structs.hpp"
#include "Customization_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class DBDUIPresenters.UIComponent
// 0x0000 (0x0030 - 0x0030)
class UUIComponent : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIComponent">();
	}
	static class UUIComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIComponent>();
	}
};
static_assert(alignof(UUIComponent) == 0x000008, "Wrong alignment on UUIComponent");
static_assert(sizeof(UUIComponent) == 0x000030, "Wrong size on UUIComponent");

// Class DBDUIPresenters.Presenter
// 0x00B8 (0x00E8 - 0x0030)
class UPresenter : public UUIComponent
{
public:
	bool                                          _overrideWidgetInstantiationPhase;                 // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EPresenterPhase                               _widgetInstantiationPhase;                         // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              InitialVisibility;                                 // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_33[0x1];                                       // 0x0033(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _widgetZOrder;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            _widget;                                           // 0x0038(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPresenterParentInfo*                   _parentInfo;                                       // 0x0040(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FString>                           _ignoredPresentationRequirementFunctions;          // 0x0058(0x0050)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<class UPresenterRequirementFunction*>  _presentationRequirementFunctions;                 // 0x00A8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8[0x10];                                      // 0x00B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         _filter;                                           // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         _currencyFilter;                                   // 0x00C9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TScriptInterface<class ILockedFeatureElementViewInterface>> _lockedFeatureElements;                            // 0x00D0(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class FString> GetIgnoredPresentationRequirementFunctionOptions();
	void OnContextChanged(EContext Context);
	void OnContextFocus(EContext Context);
	void OnContextUnfocus(EContext Context);

	bool IsContextReady() const;
	bool ShouldPresent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Presenter">();
	}
	static class UPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenter>();
	}
};
static_assert(alignof(UPresenter) == 0x000008, "Wrong alignment on UPresenter");
static_assert(sizeof(UPresenter) == 0x0000E8, "Wrong size on UPresenter");
static_assert(offsetof(UPresenter, _overrideWidgetInstantiationPhase) == 0x000030, "Member 'UPresenter::_overrideWidgetInstantiationPhase' has a wrong offset!");
static_assert(offsetof(UPresenter, _widgetInstantiationPhase) == 0x000031, "Member 'UPresenter::_widgetInstantiationPhase' has a wrong offset!");
static_assert(offsetof(UPresenter, InitialVisibility) == 0x000032, "Member 'UPresenter::InitialVisibility' has a wrong offset!");
static_assert(offsetof(UPresenter, _widgetZOrder) == 0x000034, "Member 'UPresenter::_widgetZOrder' has a wrong offset!");
static_assert(offsetof(UPresenter, _widget) == 0x000038, "Member 'UPresenter::_widget' has a wrong offset!");
static_assert(offsetof(UPresenter, _parentInfo) == 0x000040, "Member 'UPresenter::_parentInfo' has a wrong offset!");
static_assert(offsetof(UPresenter, _ignoredPresentationRequirementFunctions) == 0x000058, "Member 'UPresenter::_ignoredPresentationRequirementFunctions' has a wrong offset!");
static_assert(offsetof(UPresenter, _presentationRequirementFunctions) == 0x0000A8, "Member 'UPresenter::_presentationRequirementFunctions' has a wrong offset!");
static_assert(offsetof(UPresenter, _filter) == 0x0000C8, "Member 'UPresenter::_filter' has a wrong offset!");
static_assert(offsetof(UPresenter, _currencyFilter) == 0x0000C9, "Member 'UPresenter::_currencyFilter' has a wrong offset!");
static_assert(offsetof(UPresenter, _lockedFeatureElements) == 0x0000D0, "Member 'UPresenter::_lockedFeatureElements' has a wrong offset!");

// Class DBDUIPresenters.HudPresenter
// 0x0040 (0x0128 - 0x00E8)
class UHudPresenter : public UPresenter
{
public:
	EHudParentContainerType                       HudParentContainer;                                // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             _pendingCharacter;                                 // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ADBDPlayer*                             _presentedCharacter;                               // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ADBDSpectator*                          _spectatorPawn;                                    // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x8];                                      // 0x0108(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHudScreen*                             _hudScreen;                                        // 0x0110(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCoreHudRootWidget*                     _rootWidget;                                       // 0x0118(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsHudReady();
	void OnLocallyObservedChanged();
	void OnPawnPossessed(class APawn* Pawn);
	void OnPawnUnpossessed(class APawn* Pawn);

	bool IsGameStateReady() const;
	bool IsPendingPawnReady() const;
	bool IsPlayerStateReady() const;
	bool IsVisibleForCurrentGameMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudPresenter">();
	}
	static class UHudPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudPresenter>();
	}
};
static_assert(alignof(UHudPresenter) == 0x000008, "Wrong alignment on UHudPresenter");
static_assert(sizeof(UHudPresenter) == 0x000128, "Wrong size on UHudPresenter");
static_assert(offsetof(UHudPresenter, HudParentContainer) == 0x0000E8, "Member 'UHudPresenter::HudParentContainer' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _pendingCharacter) == 0x0000F0, "Member 'UHudPresenter::_pendingCharacter' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _presentedCharacter) == 0x0000F8, "Member 'UHudPresenter::_presentedCharacter' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _spectatorPawn) == 0x000100, "Member 'UHudPresenter::_spectatorPawn' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _hudScreen) == 0x000110, "Member 'UHudPresenter::_hudScreen' has a wrong offset!");
static_assert(offsetof(UHudPresenter, _rootWidget) == 0x000118, "Member 'UHudPresenter::_rootWidget' has a wrong offset!");

// Class DBDUIPresenters.HudKillerEquippedPowerPresenter
// 0x09A0 (0x0AC8 - 0x0128)
class UHudKillerEquippedPowerPresenter final : public UHudPresenter
{
public:
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                KillerEquippedPowerWidgetClass;                    // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPowerBundleViewData                   _powerBundleViewData;                              // 0x0138(0x0228)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_360[0x768];                                    // 0x0360(0x0768)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudKillerEquippedPowerPresenter">();
	}
	static class UHudKillerEquippedPowerPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudKillerEquippedPowerPresenter>();
	}
};
static_assert(alignof(UHudKillerEquippedPowerPresenter) == 0x000008, "Wrong alignment on UHudKillerEquippedPowerPresenter");
static_assert(sizeof(UHudKillerEquippedPowerPresenter) == 0x000AC8, "Wrong size on UHudKillerEquippedPowerPresenter");
static_assert(offsetof(UHudKillerEquippedPowerPresenter, KillerEquippedPowerWidgetClass) == 0x000130, "Member 'UHudKillerEquippedPowerPresenter::KillerEquippedPowerWidgetClass' has a wrong offset!");
static_assert(offsetof(UHudKillerEquippedPowerPresenter, _powerBundleViewData) == 0x000138, "Member 'UHudKillerEquippedPowerPresenter::_powerBundleViewData' has a wrong offset!");

// Class DBDUIPresenters.HudKillerStatusPresenter
// 0x00F0 (0x0218 - 0x0128)
class UHudKillerStatusPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                KillerStatusWidgetClass;                           // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0xE8];                                     // 0x0130(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudKillerStatusPresenter">();
	}
	static class UHudKillerStatusPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudKillerStatusPresenter>();
	}
};
static_assert(alignof(UHudKillerStatusPresenter) == 0x000008, "Wrong alignment on UHudKillerStatusPresenter");
static_assert(sizeof(UHudKillerStatusPresenter) == 0x000218, "Wrong size on UHudKillerStatusPresenter");
static_assert(offsetof(UHudKillerStatusPresenter, KillerStatusWidgetClass) == 0x000128, "Member 'UHudKillerStatusPresenter::KillerStatusWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudMatchResultPresenter
// 0x0018 (0x0140 - 0x0128)
class UHudMatchResultPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                MatchResultWidgetClass;                            // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NotifyInParadiseOrEscaped();
	void OnMatchResultFadeOutCompleted();
	void ShowEndSequence(float Duration, bool IsSlasher, int32 MatchResult);
	void StartEndGameSequence();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudMatchResultPresenter">();
	}
	static class UHudMatchResultPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudMatchResultPresenter>();
	}
};
static_assert(alignof(UHudMatchResultPresenter) == 0x000008, "Wrong alignment on UHudMatchResultPresenter");
static_assert(sizeof(UHudMatchResultPresenter) == 0x000140, "Wrong size on UHudMatchResultPresenter");
static_assert(offsetof(UHudMatchResultPresenter, MatchResultWidgetClass) == 0x000128, "Member 'UHudMatchResultPresenter::MatchResultWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudObjectivesPresenter
// 0x00C0 (0x01E8 - 0x0128)
class UHudObjectivesPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreHudObjectivesWidgetClass;                      // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0xB8];                                     // 0x0130(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudObjectivesPresenter">();
	}
	static class UHudObjectivesPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudObjectivesPresenter>();
	}
};
static_assert(alignof(UHudObjectivesPresenter) == 0x000008, "Wrong alignment on UHudObjectivesPresenter");
static_assert(sizeof(UHudObjectivesPresenter) == 0x0001E8, "Wrong size on UHudObjectivesPresenter");
static_assert(offsetof(UHudObjectivesPresenter, CoreHudObjectivesWidgetClass) == 0x000128, "Member 'UHudObjectivesPresenter::CoreHudObjectivesWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.AimingCrosshairPresenter
// 0x0028 (0x0150 - 0x0128)
class UAimingCrosshairPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                AimingCrosshairWidgetClass;                        // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x20];                                     // 0x0130(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AimingCrosshairPresenter">();
	}
	static class UAimingCrosshairPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimingCrosshairPresenter>();
	}
};
static_assert(alignof(UAimingCrosshairPresenter) == 0x000008, "Wrong alignment on UAimingCrosshairPresenter");
static_assert(sizeof(UAimingCrosshairPresenter) == 0x000150, "Wrong size on UAimingCrosshairPresenter");
static_assert(offsetof(UAimingCrosshairPresenter, AimingCrosshairWidgetClass) == 0x000128, "Member 'UAimingCrosshairPresenter::AimingCrosshairWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.AlertsPresenter
// 0x00C0 (0x01A8 - 0x00E8)
class UAlertsPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                AlertsWidgetClass;                                 // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0xB8];                                      // 0x00F0(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanStartRewardSequence();
	void OnRewardAlertSequenceCompleted();

	bool HasPendingViewData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AlertsPresenter">();
	}
	static class UAlertsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAlertsPresenter>();
	}
};
static_assert(alignof(UAlertsPresenter) == 0x000008, "Wrong alignment on UAlertsPresenter");
static_assert(sizeof(UAlertsPresenter) == 0x0001A8, "Wrong size on UAlertsPresenter");
static_assert(offsetof(UAlertsPresenter, AlertsWidgetClass) == 0x0000E8, "Member 'UAlertsPresenter::AlertsWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.AnimationPreviewPresenter
// 0x0040 (0x0128 - 0x00E8)
class UAnimationPreviewPresenter final : public UPresenter
{
public:
	TSoftClassPtr<class UClass>                   AnimationPreviewWidgetClass;                       // 0x00E8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EContext                                      ObservedContext;                                   // 0x0120(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnContextEnter(EContext Context);
	void OnContextLeave(EContext Context);

	bool IsContextEntered() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimationPreviewPresenter">();
	}
	static class UAnimationPreviewPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationPreviewPresenter>();
	}
};
static_assert(alignof(UAnimationPreviewPresenter) == 0x000008, "Wrong alignment on UAnimationPreviewPresenter");
static_assert(sizeof(UAnimationPreviewPresenter) == 0x000128, "Wrong size on UAnimationPreviewPresenter");
static_assert(offsetof(UAnimationPreviewPresenter, AnimationPreviewWidgetClass) == 0x0000E8, "Member 'UAnimationPreviewPresenter::AnimationPreviewWidgetClass' has a wrong offset!");
static_assert(offsetof(UAnimationPreviewPresenter, ObservedContext) == 0x000120, "Member 'UAnimationPreviewPresenter::ObservedContext' has a wrong offset!");

// Class DBDUIPresenters.AntiCampSelfUnhookMeterPresenter
// 0x0028 (0x0150 - 0x0128)
class UAntiCampSelfUnhookMeterPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                AntiCampSelfUnhookMeterWidget;                     // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x20];                                     // 0x0130(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AntiCampSelfUnhookMeterPresenter">();
	}
	static class UAntiCampSelfUnhookMeterPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAntiCampSelfUnhookMeterPresenter>();
	}
};
static_assert(alignof(UAntiCampSelfUnhookMeterPresenter) == 0x000008, "Wrong alignment on UAntiCampSelfUnhookMeterPresenter");
static_assert(sizeof(UAntiCampSelfUnhookMeterPresenter) == 0x000150, "Wrong size on UAntiCampSelfUnhookMeterPresenter");
static_assert(offsetof(UAntiCampSelfUnhookMeterPresenter, AntiCampSelfUnhookMeterWidget) == 0x000128, "Member 'UAntiCampSelfUnhookMeterPresenter::AntiCampSelfUnhookMeterWidget' has a wrong offset!");

// Class DBDUIPresenters.SubPresenter
// 0x0040 (0x0070 - 0x0030)
class USubPresenter : public UObject
{
public:
	uint8                                         Pad_30[0x40];                                      // 0x0030(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPresenterStartAsyncOperation();
	void OnPresenterStopAsyncOperation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubPresenter">();
	}
	static class USubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubPresenter>();
	}
};
static_assert(alignof(USubPresenter) == 0x000008, "Wrong alignment on USubPresenter");
static_assert(sizeof(USubPresenter) == 0x000070, "Wrong size on USubPresenter");

// Class DBDUIPresenters.ArchiveCompendiumSubPresenter
// 0x0080 (0x00F0 - 0x0070)
class UArchiveCompendiumSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IArchiveCompendiumViewInterface> _archiveCompendiumWidget;                          // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x70];                                      // 0x0080(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTomeSelected(const class FString& TomeId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveCompendiumSubPresenter">();
	}
	static class UArchiveCompendiumSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveCompendiumSubPresenter>();
	}
};
static_assert(alignof(UArchiveCompendiumSubPresenter) == 0x000008, "Wrong alignment on UArchiveCompendiumSubPresenter");
static_assert(sizeof(UArchiveCompendiumSubPresenter) == 0x0000F0, "Wrong size on UArchiveCompendiumSubPresenter");
static_assert(offsetof(UArchiveCompendiumSubPresenter, _archiveCompendiumWidget) == 0x000070, "Member 'UArchiveCompendiumSubPresenter::_archiveCompendiumWidget' has a wrong offset!");

// Class DBDUIPresenters.ArchiveQuestMapSubPresenter
// 0x0200 (0x0270 - 0x0070)
class UArchiveQuestMapSubPresenter : public USubPresenter
{
public:
	uint8                                         Pad_70[0x150];                                     // 0x0070(0x0150)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IArchiveQuestMapViewInterface> _archiveQuestMapWidget;                            // 0x01C0(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TScriptInterface<class IArchiveLevelProgressionViewInterface> _archiveLevelProgressionWidget;                    // 0x01D0(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E0[0x60];                                     // 0x01E0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EArchivesStoryLevelStatus>             _storyLevelStatusCache;                            // 0x0240(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_250[0x20];                                     // 0x0250(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetCurrentLevel();
	void NavigateToNextLevelAfterUnlock();
	void OnLevelSelected(const int32 LevelIndex);
	void OnNodeSelected(const class FName& NodeId, EPlayerRole Role, const struct FVector2D& Position);
	void OnPlayerCardUpdated(const class FString& badgeId, const class FString& bannerId);
	void OnQuestNodeHovered(EPlayerRole Role);
	void OnQuestNodeUnhovered(EPlayerRole Role);
	void OnTomeLevelRewardAnimationDone();
	void OnTomeMapCreated();
	void UpdateTomeLevels();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveQuestMapSubPresenter">();
	}
	static class UArchiveQuestMapSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveQuestMapSubPresenter>();
	}
};
static_assert(alignof(UArchiveQuestMapSubPresenter) == 0x000008, "Wrong alignment on UArchiveQuestMapSubPresenter");
static_assert(sizeof(UArchiveQuestMapSubPresenter) == 0x000270, "Wrong size on UArchiveQuestMapSubPresenter");
static_assert(offsetof(UArchiveQuestMapSubPresenter, _archiveQuestMapWidget) == 0x0001C0, "Member 'UArchiveQuestMapSubPresenter::_archiveQuestMapWidget' has a wrong offset!");
static_assert(offsetof(UArchiveQuestMapSubPresenter, _archiveLevelProgressionWidget) == 0x0001D0, "Member 'UArchiveQuestMapSubPresenter::_archiveLevelProgressionWidget' has a wrong offset!");
static_assert(offsetof(UArchiveQuestMapSubPresenter, _storyLevelStatusCache) == 0x000240, "Member 'UArchiveQuestMapSubPresenter::_storyLevelStatusCache' has a wrong offset!");

// Class DBDUIPresenters.ArchiveEditorSubPresenter
// 0x0028 (0x0298 - 0x0270)
class UArchiveEditorSubPresenter final : public UArchiveQuestMapSubPresenter
{
public:
	uint8                                         Pad_270[0x18];                                     // 0x0270(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IArchiveEditorViewInterface> _archiveEditorWidget;                              // 0x0288(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnSaveTomeGraph(const TArray<struct FArchiveNodeGraphViewData>& NodeList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveEditorSubPresenter">();
	}
	static class UArchiveEditorSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveEditorSubPresenter>();
	}
};
static_assert(alignof(UArchiveEditorSubPresenter) == 0x000008, "Wrong alignment on UArchiveEditorSubPresenter");
static_assert(sizeof(UArchiveEditorSubPresenter) == 0x000298, "Wrong size on UArchiveEditorSubPresenter");
static_assert(offsetof(UArchiveEditorSubPresenter, _archiveEditorWidget) == 0x000288, "Member 'UArchiveEditorSubPresenter::_archiveEditorWidget' has a wrong offset!");

// Class DBDUIPresenters.ArchiveImageViewerPresenter
// 0x0098 (0x0180 - 0x00E8)
class UArchiveImageViewerPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                ArchiveImageViewerWidgetClass;                     // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x90];                                      // 0x00F0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnArchivesVoiceOverAutoplay(bool Autoplay);
	void OnArchivesVoiceOverPlayed(bool Playing);
	void OnBackAction();
	void OnImageViewerVoiceOverAutoplay(bool Autoplay);
	void OnImageViewerVoiceOverPlayed();
	void OnTextVisibilityChanged();

	bool CanShowFullScreenMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveImageViewerPresenter">();
	}
	static class UArchiveImageViewerPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveImageViewerPresenter>();
	}
};
static_assert(alignof(UArchiveImageViewerPresenter) == 0x000008, "Wrong alignment on UArchiveImageViewerPresenter");
static_assert(sizeof(UArchiveImageViewerPresenter) == 0x000180, "Wrong size on UArchiveImageViewerPresenter");
static_assert(offsetof(UArchiveImageViewerPresenter, ArchiveImageViewerWidgetClass) == 0x0000E8, "Member 'UArchiveImageViewerPresenter::ArchiveImageViewerWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.ArchiveJournalSubPresenter
// 0x00D8 (0x0148 - 0x0070)
class UArchiveJournalSubPresenter final : public USubPresenter
{
public:
	uint8                                         Pad_70[0x38];                                      // 0x0070(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IArchiveJournalViewInterface> _archiveJournalWidget;                             // 0x00A8(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x90];                                      // 0x00B8(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAutoplayChanged(bool AutoplayActive, int32 EntryIndex);
	void OnClickPlayButton(int32 EntryIndex);
	void OnEntrySelected(int32 EntryIndex);
	void OnImageViewerVoiceOverAutoplay(bool Autoplay);
	void OnImageViewerVoiceOverPlayed();
	void OnPlayCinematic(const int32 Param_Index);
	void OnShowImageViewer();
	void OnVignetteSelected(const class FString& VignetteId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveJournalSubPresenter">();
	}
	static class UArchiveJournalSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveJournalSubPresenter>();
	}
};
static_assert(alignof(UArchiveJournalSubPresenter) == 0x000008, "Wrong alignment on UArchiveJournalSubPresenter");
static_assert(sizeof(UArchiveJournalSubPresenter) == 0x000148, "Wrong size on UArchiveJournalSubPresenter");
static_assert(offsetof(UArchiveJournalSubPresenter, _archiveJournalWidget) == 0x0000A8, "Member 'UArchiveJournalSubPresenter::_archiveJournalWidget' has a wrong offset!");

// Class DBDUIPresenters.ArchiveMenuPresenter
// 0x0158 (0x0240 - 0x00E8)
class UArchiveMenuPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                ArchiveMenuWidgetClass;                            // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArchiveTomeSubPresenter*               _archiveTomeSubPresenter;                          // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArchiveRiftSubPresenter*               _archiveRiftSubPresenter;                          // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArchiveCompendiumSubPresenter*         _archiveCompendiumSubPresenter;                    // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0108(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x130];                                    // 0x0110(0x0130)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackAction();
	void OnChallengeReminderClicked(EPlayerRole Role);
	void OnChallengeReminderSlotSelected(EPlayerRole Role);
	void OnDisplayStandRotationDelegate(float Distance);
	void OnHideImageViewer();
	void OnInfoClicked();
	void OnMenuTabSelected(EArchiveMenuState MenuState, bool AlreadySelected);
	void OnPremiumPassPurchased();
	void OnRiftPackButtonClicked();
	void OnShowImageViewer(bool VoiceOverIsPlaying);
	void OnSlotSelectorClosed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveMenuPresenter">();
	}
	static class UArchiveMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveMenuPresenter>();
	}
};
static_assert(alignof(UArchiveMenuPresenter) == 0x000008, "Wrong alignment on UArchiveMenuPresenter");
static_assert(sizeof(UArchiveMenuPresenter) == 0x000240, "Wrong size on UArchiveMenuPresenter");
static_assert(offsetof(UArchiveMenuPresenter, ArchiveMenuWidgetClass) == 0x0000E8, "Member 'UArchiveMenuPresenter::ArchiveMenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UArchiveMenuPresenter, _archiveTomeSubPresenter) == 0x0000F0, "Member 'UArchiveMenuPresenter::_archiveTomeSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveMenuPresenter, _archiveRiftSubPresenter) == 0x0000F8, "Member 'UArchiveMenuPresenter::_archiveRiftSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveMenuPresenter, _archiveCompendiumSubPresenter) == 0x000100, "Member 'UArchiveMenuPresenter::_archiveCompendiumSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveMenuPresenter, _activeSubPresenter) == 0x000108, "Member 'UArchiveMenuPresenter::_activeSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.BasePopupPresenter
// 0x0080 (0x0168 - 0x00E8)
class UBasePopupPresenter : public UPresenter
{
public:
	EContext                                      ObservedContext;                                   // 0x00E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                PopupWidgetClass;                                  // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWIP;                                             // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   WIPPopupWidgetClass;                               // 0x0100(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138[0x8];                                      // 0x0138(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBasePopupViewData*                     _viewData;                                         // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x20];                                     // 0x0148(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnContextEnter(EContext Context);
	void OnContextLeave(EContext Context);

	bool IsContextEntered() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BasePopupPresenter">();
	}
	static class UBasePopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBasePopupPresenter>();
	}
};
static_assert(alignof(UBasePopupPresenter) == 0x000008, "Wrong alignment on UBasePopupPresenter");
static_assert(sizeof(UBasePopupPresenter) == 0x000168, "Wrong size on UBasePopupPresenter");
static_assert(offsetof(UBasePopupPresenter, ObservedContext) == 0x0000E8, "Member 'UBasePopupPresenter::ObservedContext' has a wrong offset!");
static_assert(offsetof(UBasePopupPresenter, PopupWidgetClass) == 0x0000F0, "Member 'UBasePopupPresenter::PopupWidgetClass' has a wrong offset!");
static_assert(offsetof(UBasePopupPresenter, IsWIP) == 0x0000F8, "Member 'UBasePopupPresenter::IsWIP' has a wrong offset!");
static_assert(offsetof(UBasePopupPresenter, WIPPopupWidgetClass) == 0x000100, "Member 'UBasePopupPresenter::WIPPopupWidgetClass' has a wrong offset!");
static_assert(offsetof(UBasePopupPresenter, _viewData) == 0x000140, "Member 'UBasePopupPresenter::_viewData' has a wrong offset!");

// Class DBDUIPresenters.GenericPopupPresenter
// 0x0058 (0x01C0 - 0x0168)
class UGenericPopupPresenter : public UBasePopupPresenter
{
public:
	uint8                                         Pad_168[0x58];                                     // 0x0168(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAction(EPopupButtonType PopupAction);
	void OnAppResumed(bool IsAppResumed);
	void OnBack();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GenericPopupPresenter">();
	}
	static class UGenericPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGenericPopupPresenter>();
	}
};
static_assert(alignof(UGenericPopupPresenter) == 0x000008, "Wrong alignment on UGenericPopupPresenter");
static_assert(sizeof(UGenericPopupPresenter) == 0x0001C0, "Wrong size on UGenericPopupPresenter");

// Class DBDUIPresenters.ArchivePassPurchasePopupPresenter
// 0x0000 (0x01C0 - 0x01C0)
class UArchivePassPurchasePopupPresenter final : public UGenericPopupPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchivePassPurchasePopupPresenter">();
	}
	static class UArchivePassPurchasePopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchivePassPurchasePopupPresenter>();
	}
};
static_assert(alignof(UArchivePassPurchasePopupPresenter) == 0x000008, "Wrong alignment on UArchivePassPurchasePopupPresenter");
static_assert(sizeof(UArchivePassPurchasePopupPresenter) == 0x0001C0, "Wrong size on UArchivePassPurchasePopupPresenter");

// Class DBDUIPresenters.ArchivePresenterHelper
// 0x0000 (0x0030 - 0x0030)
class UArchivePresenterHelper final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchivePresenterHelper">();
	}
	static class UArchivePresenterHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchivePresenterHelper>();
	}
};
static_assert(alignof(UArchivePresenterHelper) == 0x000008, "Wrong alignment on UArchivePresenterHelper");
static_assert(sizeof(UArchivePresenterHelper) == 0x000030, "Wrong size on UArchivePresenterHelper");

// Class DBDUIPresenters.ArchiveRiftSubPresenter
// 0x0138 (0x01A8 - 0x0070)
class UArchiveRiftSubPresenter final : public USubPresenter
{
public:
	uint8                                         Pad_70[0x90];                                      // 0x0070(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IArchiveRiftViewInterface> _archiveRiftWidget;                                // 0x0100(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x98];                                     // 0x0110(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBonusTierTooltipShown();
	void OnClickPurchasePremiumPass();
	void OnClickPurchaseTiers();
	void OnPlayMoriClicked();
	void OnPlaySecondMoriClicked();
	void OnRewardCurrencyClicked(const ECurrencyType CurrencyType);
	void OnRewardItemClicked(const class FName ItemId);
	void OnToggleOutfitDisplay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveRiftSubPresenter">();
	}
	static class UArchiveRiftSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveRiftSubPresenter>();
	}
};
static_assert(alignof(UArchiveRiftSubPresenter) == 0x000008, "Wrong alignment on UArchiveRiftSubPresenter");
static_assert(sizeof(UArchiveRiftSubPresenter) == 0x0001A8, "Wrong size on UArchiveRiftSubPresenter");
static_assert(offsetof(UArchiveRiftSubPresenter, _archiveRiftWidget) == 0x000100, "Member 'UArchiveRiftSubPresenter::_archiveRiftWidget' has a wrong offset!");

// Class DBDUIPresenters.ArchiveTierPurchasePopupPresenter
// 0x0010 (0x01D0 - 0x01C0)
class UArchiveTierPurchasePopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnConfirmPurchase(int32 TiersToPurchaseNumber);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveTierPurchasePopupPresenter">();
	}
	static class UArchiveTierPurchasePopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveTierPurchasePopupPresenter>();
	}
};
static_assert(alignof(UArchiveTierPurchasePopupPresenter) == 0x000008, "Wrong alignment on UArchiveTierPurchasePopupPresenter");
static_assert(sizeof(UArchiveTierPurchasePopupPresenter) == 0x0001D0, "Wrong size on UArchiveTierPurchasePopupPresenter");

// Class DBDUIPresenters.ArchiveTomeSubPresenter
// 0x0090 (0x0100 - 0x0070)
class UArchiveTomeSubPresenter final : public USubPresenter
{
public:
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UArchiveQuestMapSubPresenter*           _archiveQuestMapSubPresenter;                      // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArchiveEditorSubPresenter*             _archiveEditorSubPresenter;                        // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UArchiveJournalSubPresenter*            _archiveJournalSubPresenter;                       // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TScriptInterface<class IArchiveTomeViewInterface> _archiveTomeWidget;                                // 0x00C0(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInterface*                     _archiveSideNavSkinMaterial;                       // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D8[0x28];                                      // 0x00D8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEditorWidgetSwitchComplete();
	void OnMenuTabSelected(EArchiveTomeMenuState MenuState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArchiveTomeSubPresenter">();
	}
	static class UArchiveTomeSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArchiveTomeSubPresenter>();
	}
};
static_assert(alignof(UArchiveTomeSubPresenter) == 0x000008, "Wrong alignment on UArchiveTomeSubPresenter");
static_assert(sizeof(UArchiveTomeSubPresenter) == 0x000100, "Wrong size on UArchiveTomeSubPresenter");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveQuestMapSubPresenter) == 0x0000A0, "Member 'UArchiveTomeSubPresenter::_archiveQuestMapSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveEditorSubPresenter) == 0x0000A8, "Member 'UArchiveTomeSubPresenter::_archiveEditorSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveJournalSubPresenter) == 0x0000B0, "Member 'UArchiveTomeSubPresenter::_archiveJournalSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _activeSubPresenter) == 0x0000B8, "Member 'UArchiveTomeSubPresenter::_activeSubPresenter' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveTomeWidget) == 0x0000C0, "Member 'UArchiveTomeSubPresenter::_archiveTomeWidget' has a wrong offset!");
static_assert(offsetof(UArchiveTomeSubPresenter, _archiveSideNavSkinMaterial) == 0x0000D0, "Member 'UArchiveTomeSubPresenter::_archiveSideNavSkinMaterial' has a wrong offset!");

// Class DBDUIPresenters.AuricCellsPresenter
// 0x0098 (0x0180 - 0x00E8)
class UAuricCellsPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                AuricCellsWidgetClass;                             // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAuricCellsFirstPurchaseViewData       _firstPurchaseViewData;                            // 0x00F0(0x0068)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_158[0x28];                                     // 0x0158(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackAction();
	void OnBuyAction(class FName bundleId);
	void OnPremiumTransactionCompleted(bool Success, class FName ItemId, const struct FPremiumPurchaseCompleteData& PurchaseCompleteData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AuricCellsPresenter">();
	}
	static class UAuricCellsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAuricCellsPresenter>();
	}
};
static_assert(alignof(UAuricCellsPresenter) == 0x000008, "Wrong alignment on UAuricCellsPresenter");
static_assert(sizeof(UAuricCellsPresenter) == 0x000180, "Wrong size on UAuricCellsPresenter");
static_assert(offsetof(UAuricCellsPresenter, AuricCellsWidgetClass) == 0x0000E8, "Member 'UAuricCellsPresenter::AuricCellsWidgetClass' has a wrong offset!");
static_assert(offsetof(UAuricCellsPresenter, _firstPurchaseViewData) == 0x0000F0, "Member 'UAuricCellsPresenter::_firstPurchaseViewData' has a wrong offset!");

// Class DBDUIPresenters.ChallengesMenuChallengeSetSubPresenter
// 0x0060 (0x00D0 - 0x0070)
class UChallengesMenuChallengeSetSubPresenter final : public USubPresenter
{
public:
	class UChallengesMenuRitualsSubPresenter*     _ritualsSubPresenter;                              // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChallengesMenuRewardTrackSubPresenter* _rewardTrackSubPresenter;                          // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChallengesMenuStoreSubPresenter*       _storeSubPresenter;                                // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TScriptInterface<class IChallengesMenuChallengeSetViewInterface> _challengesMenuChallengeSetWidget;                 // 0x0090(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x30];                                      // 0x00A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnStoreRedirectionRequested(const struct FCustomizationRewardViewData& SelectedItem);
	void SetChallengeSetState(const EChallengesMenuChallengeSetState State);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuChallengeSetSubPresenter">();
	}
	static class UChallengesMenuChallengeSetSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuChallengeSetSubPresenter>();
	}
};
static_assert(alignof(UChallengesMenuChallengeSetSubPresenter) == 0x000008, "Wrong alignment on UChallengesMenuChallengeSetSubPresenter");
static_assert(sizeof(UChallengesMenuChallengeSetSubPresenter) == 0x0000D0, "Wrong size on UChallengesMenuChallengeSetSubPresenter");
static_assert(offsetof(UChallengesMenuChallengeSetSubPresenter, _ritualsSubPresenter) == 0x000070, "Member 'UChallengesMenuChallengeSetSubPresenter::_ritualsSubPresenter' has a wrong offset!");
static_assert(offsetof(UChallengesMenuChallengeSetSubPresenter, _rewardTrackSubPresenter) == 0x000078, "Member 'UChallengesMenuChallengeSetSubPresenter::_rewardTrackSubPresenter' has a wrong offset!");
static_assert(offsetof(UChallengesMenuChallengeSetSubPresenter, _storeSubPresenter) == 0x000080, "Member 'UChallengesMenuChallengeSetSubPresenter::_storeSubPresenter' has a wrong offset!");
static_assert(offsetof(UChallengesMenuChallengeSetSubPresenter, _activeSubPresenter) == 0x000088, "Member 'UChallengesMenuChallengeSetSubPresenter::_activeSubPresenter' has a wrong offset!");
static_assert(offsetof(UChallengesMenuChallengeSetSubPresenter, _challengesMenuChallengeSetWidget) == 0x000090, "Member 'UChallengesMenuChallengeSetSubPresenter::_challengesMenuChallengeSetWidget' has a wrong offset!");

// Class DBDUIPresenters.ChallengesMenuPresenter
// 0x0078 (0x0160 - 0x00E8)
class UChallengesMenuPresenter final : public UPresenter
{
public:
	TSoftClassPtr<class UClass>                   ChallengesMenuWidgetClass;                         // 0x00E8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UChallengesMenuChallengeSetSubPresenter*> _subPresenters;                                    // 0x0120(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FChallengeSetViewData>          _challengeSetViewData;                             // 0x0138(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x18];                                     // 0x0148(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackButtonClicked();
	void OnSettingsButtonClicked();
	void OnStoreRedirectionRequested(const class FString& ChallengeSetId, const EChallengesMenuChallengeSetState& TabState, const struct FCustomizationRewardViewData& SelectedItem);
	void OnTabSelected(const int32 SelectedKey);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuPresenter">();
	}
	static class UChallengesMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuPresenter>();
	}
};
static_assert(alignof(UChallengesMenuPresenter) == 0x000008, "Wrong alignment on UChallengesMenuPresenter");
static_assert(sizeof(UChallengesMenuPresenter) == 0x000160, "Wrong size on UChallengesMenuPresenter");
static_assert(offsetof(UChallengesMenuPresenter, ChallengesMenuWidgetClass) == 0x0000E8, "Member 'UChallengesMenuPresenter::ChallengesMenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UChallengesMenuPresenter, _subPresenters) == 0x000120, "Member 'UChallengesMenuPresenter::_subPresenters' has a wrong offset!");
static_assert(offsetof(UChallengesMenuPresenter, _activeSubPresenter) == 0x000130, "Member 'UChallengesMenuPresenter::_activeSubPresenter' has a wrong offset!");
static_assert(offsetof(UChallengesMenuPresenter, _challengeSetViewData) == 0x000138, "Member 'UChallengesMenuPresenter::_challengeSetViewData' has a wrong offset!");

// Class DBDUIPresenters.ChallengesMenuRewardTrackSubPresenter
// 0x0038 (0x00A8 - 0x0070)
class UChallengesMenuRewardTrackSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IChallengesMenuRewardTrackViewInterface> _challengesMenuRewardTrackWidget;                  // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x28];                                      // 0x0080(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRewardCurrencyClicked(ECurrencyType CurrencyType);
	void OnRewardItemClicked(class FName ItemId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuRewardTrackSubPresenter">();
	}
	static class UChallengesMenuRewardTrackSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuRewardTrackSubPresenter>();
	}
};
static_assert(alignof(UChallengesMenuRewardTrackSubPresenter) == 0x000008, "Wrong alignment on UChallengesMenuRewardTrackSubPresenter");
static_assert(sizeof(UChallengesMenuRewardTrackSubPresenter) == 0x0000A8, "Wrong size on UChallengesMenuRewardTrackSubPresenter");
static_assert(offsetof(UChallengesMenuRewardTrackSubPresenter, _challengesMenuRewardTrackWidget) == 0x000070, "Member 'UChallengesMenuRewardTrackSubPresenter::_challengesMenuRewardTrackWidget' has a wrong offset!");

// Class DBDUIPresenters.ChallengesMenuRitualsSubPresenter
// 0x0038 (0x00A8 - 0x0070)
class UChallengesMenuRitualsSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IChallengesMenuRitualsViewInterface> _challengesMenuRitualsWidget;                      // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x28];                                      // 0x0080(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChallengeItemSelected(const class FString& ChallengeId);
	void OnSearchBarTextChanged(const class FString& EnteredText);
	void OnSortingChanged(ESortingOption Sorting, ESortingOrder Order);
	void RefreshChallengesList();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuRitualsSubPresenter">();
	}
	static class UChallengesMenuRitualsSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuRitualsSubPresenter>();
	}
};
static_assert(alignof(UChallengesMenuRitualsSubPresenter) == 0x000008, "Wrong alignment on UChallengesMenuRitualsSubPresenter");
static_assert(sizeof(UChallengesMenuRitualsSubPresenter) == 0x0000A8, "Wrong size on UChallengesMenuRitualsSubPresenter");
static_assert(offsetof(UChallengesMenuRitualsSubPresenter, _challengesMenuRitualsWidget) == 0x000070, "Member 'UChallengesMenuRitualsSubPresenter::_challengesMenuRitualsWidget' has a wrong offset!");

// Class DBDUIPresenters.ChallengesMenuStoreSubPresenter
// 0x0060 (0x00D0 - 0x0070)
class UChallengesMenuStoreSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IChallengesMenuStoreViewInterface> _challengesMenuStoreWidget;                        // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStoreCustomizationItemViewData*> _itemsData;                                        // 0x0080(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreCustomizationItemViewData*> _previewAreaItemsData;                             // 0x0090(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x30];                                      // 0x00A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCustomizationGridItemClicked(const int32 SelectedIndex);
	void OnPreviewAreaItemClicked(const int32 SelectedIndex);
	void OnStoreButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengesMenuStoreSubPresenter">();
	}
	static class UChallengesMenuStoreSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengesMenuStoreSubPresenter>();
	}
};
static_assert(alignof(UChallengesMenuStoreSubPresenter) == 0x000008, "Wrong alignment on UChallengesMenuStoreSubPresenter");
static_assert(sizeof(UChallengesMenuStoreSubPresenter) == 0x0000D0, "Wrong size on UChallengesMenuStoreSubPresenter");
static_assert(offsetof(UChallengesMenuStoreSubPresenter, _challengesMenuStoreWidget) == 0x000070, "Member 'UChallengesMenuStoreSubPresenter::_challengesMenuStoreWidget' has a wrong offset!");
static_assert(offsetof(UChallengesMenuStoreSubPresenter, _itemsData) == 0x000080, "Member 'UChallengesMenuStoreSubPresenter::_itemsData' has a wrong offset!");
static_assert(offsetof(UChallengesMenuStoreSubPresenter, _previewAreaItemsData) == 0x000090, "Member 'UChallengesMenuStoreSubPresenter::_previewAreaItemsData' has a wrong offset!");

// Class DBDUIPresenters.ChallengeTrackerPresenter
// 0x0078 (0x01A0 - 0x0128)
class UChallengeTrackerPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                ChallengeTrackerContainerWidgetClass;              // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReadingTimeDelaySec;                               // 0x0130(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, NoClear, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_134[0x6C];                                     // 0x0134(0x006C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindToQuestRepetitionEvents();
	void OnQuestEventRepetitionValueChanged(int32 Value, const class FString& QuestEventIdTracked);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChallengeTrackerPresenter">();
	}
	static class UChallengeTrackerPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChallengeTrackerPresenter>();
	}
};
static_assert(alignof(UChallengeTrackerPresenter) == 0x000008, "Wrong alignment on UChallengeTrackerPresenter");
static_assert(sizeof(UChallengeTrackerPresenter) == 0x0001A0, "Wrong size on UChallengeTrackerPresenter");
static_assert(offsetof(UChallengeTrackerPresenter, ChallengeTrackerContainerWidgetClass) == 0x000128, "Member 'UChallengeTrackerPresenter::ChallengeTrackerContainerWidgetClass' has a wrong offset!");
static_assert(offsetof(UChallengeTrackerPresenter, ReadingTimeDelaySec) == 0x000130, "Member 'UChallengeTrackerPresenter::ReadingTimeDelaySec' has a wrong offset!");

// Class DBDUIPresenters.CharacterSelectionManager
// 0x00D8 (0x0108 - 0x0030)
class UCharacterSelectionManager final : public UObject
{
public:
	uint8                                         Pad_30[0x90];                                      // 0x0030(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStoreCharacterItemViewData*>    _characters;                                       // 0x00C0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UStoreCharacterItemViewData*            _selectedCharacter;                                // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreCharacterItemViewData*            _lastEquippedCharacter;                            // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreCharacterItemViewData*            _characterBeingPurchased;                          // 0x00E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E8[0x20];                                      // 0x00E8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterSelectionManager">();
	}
	static class UCharacterSelectionManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterSelectionManager>();
	}
};
static_assert(alignof(UCharacterSelectionManager) == 0x000008, "Wrong alignment on UCharacterSelectionManager");
static_assert(sizeof(UCharacterSelectionManager) == 0x000108, "Wrong size on UCharacterSelectionManager");
static_assert(offsetof(UCharacterSelectionManager, _characters) == 0x0000C0, "Member 'UCharacterSelectionManager::_characters' has a wrong offset!");
static_assert(offsetof(UCharacterSelectionManager, _selectedCharacter) == 0x0000D0, "Member 'UCharacterSelectionManager::_selectedCharacter' has a wrong offset!");
static_assert(offsetof(UCharacterSelectionManager, _lastEquippedCharacter) == 0x0000D8, "Member 'UCharacterSelectionManager::_lastEquippedCharacter' has a wrong offset!");
static_assert(offsetof(UCharacterSelectionManager, _characterBeingPurchased) == 0x0000E0, "Member 'UCharacterSelectionManager::_characterBeingPurchased' has a wrong offset!");

// Class DBDUIPresenters.CinematicPresenter
// 0x00A8 (0x0190 - 0x00E8)
class UCinematicPresenter final : public UPresenter
{
public:
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                CinematicWidgetClass;                              // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x8C];                                      // 0x00F8(0x008C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USubtitlesManager>       _subtitlesManager;                                 // 0x0184(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DBD_ChangeVideoPlaybackMode(const class FString& Mode);
	void DBD_ChangeVideoVolume(float Volume);
	void DBD_StopVideoPlayer();
	void MuteGameAudio(const bool ShouldMute);
	void OnPlaybackDone();
	void OnPlaybackStarted();
	void OnSkipButtonClicked();
	void OnSubtitlesUpdated(const TArray<class FString>& Subtitles);
	void OnWidgetFadeInAnimationDone();
	void OnWidgetFadeOutAnimationDone();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CinematicPresenter">();
	}
	static class UCinematicPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCinematicPresenter>();
	}
};
static_assert(alignof(UCinematicPresenter) == 0x000008, "Wrong alignment on UCinematicPresenter");
static_assert(sizeof(UCinematicPresenter) == 0x000190, "Wrong size on UCinematicPresenter");
static_assert(offsetof(UCinematicPresenter, CinematicWidgetClass) == 0x0000F0, "Member 'UCinematicPresenter::CinematicWidgetClass' has a wrong offset!");
static_assert(offsetof(UCinematicPresenter, _subtitlesManager) == 0x000184, "Member 'UCinematicPresenter::_subtitlesManager' has a wrong offset!");

// Class DBDUIPresenters.ContextObserver
// 0x0080 (0x00B0 - 0x0030)
class UContextObserver final : public UUIComponent
{
public:
	TArray<EContext>                              ObservedContexts;                                  // 0x0030(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x70];                                      // 0x0040(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ContextObserver">();
	}
	static class UContextObserver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UContextObserver>();
	}
};
static_assert(alignof(UContextObserver) == 0x000008, "Wrong alignment on UContextObserver");
static_assert(sizeof(UContextObserver) == 0x0000B0, "Wrong size on UContextObserver");
static_assert(offsetof(UContextObserver, ObservedContexts) == 0x000030, "Member 'UContextObserver::ObservedContexts' has a wrong offset!");

// Class DBDUIPresenters.CreditsPresenter
// 0x0018 (0x0100 - 0x00E8)
class UCreditsPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                CreditsScreenWidgetClass;                          // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Credits_ScrollToEnd();
	void Credits_ScrollToName(const class FString& Param_Name, float Delay);
	void OnBackAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreditsPresenter">();
	}
	static class UCreditsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreditsPresenter>();
	}
};
static_assert(alignof(UCreditsPresenter) == 0x000008, "Wrong alignment on UCreditsPresenter");
static_assert(sizeof(UCreditsPresenter) == 0x000100, "Wrong size on UCreditsPresenter");
static_assert(offsetof(UCreditsPresenter, CreditsScreenWidgetClass) == 0x0000E8, "Member 'UCreditsPresenter::CreditsScreenWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.CurrencyConversionPopupPresenter
// 0x0010 (0x01D0 - 0x01C0)
class UCurrencyConversionPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurrencyConversionPopupPresenter">();
	}
	static class UCurrencyConversionPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurrencyConversionPopupPresenter>();
	}
};
static_assert(alignof(UCurrencyConversionPopupPresenter) == 0x000008, "Wrong alignment on UCurrencyConversionPopupPresenter");
static_assert(sizeof(UCurrencyConversionPopupPresenter) == 0x0001D0, "Wrong size on UCurrencyConversionPopupPresenter");

// Class DBDUIPresenters.CustomizationSelectionManager
// 0x0208 (0x0238 - 0x0030)
class UCustomizationSelectionManager final : public UObject
{
public:
	uint8                                         Pad_30[0xA8];                                      // 0x0030(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStoreCategoryViewData>         _availableCategories;                              // 0x00D8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreCustomizationItemViewData*> _allCustomizations;                                // 0x00E8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<class FName, class UStoreCustomizationItemViewData*> _customizationsMap;                                // 0x00F8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreCustomizationItemViewData*> _displayingCustomizations;                         // 0x0148(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FEquippedPlayerCustomization           _equippedCustomization;                            // 0x0158(0x0038)(Transient, NativeAccessSpecifierPrivate)
	struct FEquippedPlayerCustomization           _selectedCustomization;                            // 0x0190(0x0038)(Transient, NativeAccessSpecifierPrivate)
	struct FEquippedPlayerCustomization           _lastSelectedBreakableCustomization;               // 0x01C8(0x0038)(Transient, NativeAccessSpecifierPrivate)
	bool                                          _isPreviewingAnyCustomization;                     // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStoreCustomizationItemViewData*        _customizationBeingPurchased;                      // 0x0208(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_210[0x28];                                     // 0x0210(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomizationSelectionManager">();
	}
	static class UCustomizationSelectionManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomizationSelectionManager>();
	}
};
static_assert(alignof(UCustomizationSelectionManager) == 0x000008, "Wrong alignment on UCustomizationSelectionManager");
static_assert(sizeof(UCustomizationSelectionManager) == 0x000238, "Wrong size on UCustomizationSelectionManager");
static_assert(offsetof(UCustomizationSelectionManager, _availableCategories) == 0x0000D8, "Member 'UCustomizationSelectionManager::_availableCategories' has a wrong offset!");
static_assert(offsetof(UCustomizationSelectionManager, _allCustomizations) == 0x0000E8, "Member 'UCustomizationSelectionManager::_allCustomizations' has a wrong offset!");
static_assert(offsetof(UCustomizationSelectionManager, _customizationsMap) == 0x0000F8, "Member 'UCustomizationSelectionManager::_customizationsMap' has a wrong offset!");
static_assert(offsetof(UCustomizationSelectionManager, _displayingCustomizations) == 0x000148, "Member 'UCustomizationSelectionManager::_displayingCustomizations' has a wrong offset!");
static_assert(offsetof(UCustomizationSelectionManager, _equippedCustomization) == 0x000158, "Member 'UCustomizationSelectionManager::_equippedCustomization' has a wrong offset!");
static_assert(offsetof(UCustomizationSelectionManager, _selectedCustomization) == 0x000190, "Member 'UCustomizationSelectionManager::_selectedCustomization' has a wrong offset!");
static_assert(offsetof(UCustomizationSelectionManager, _lastSelectedBreakableCustomization) == 0x0001C8, "Member 'UCustomizationSelectionManager::_lastSelectedBreakableCustomization' has a wrong offset!");
static_assert(offsetof(UCustomizationSelectionManager, _isPreviewingAnyCustomization) == 0x000200, "Member 'UCustomizationSelectionManager::_isPreviewingAnyCustomization' has a wrong offset!");
static_assert(offsetof(UCustomizationSelectionManager, _customizationBeingPurchased) == 0x000208, "Member 'UCustomizationSelectionManager::_customizationBeingPurchased' has a wrong offset!");

// Class DBDUIPresenters.DailyRitualsPopupPresenter
// 0x0020 (0x01E0 - 0x01C0)
class UDailyRitualsPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x20];                                     // 0x01C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClaimAllRituals();
	void OnClaimRitual(const class FString& ID);
	void OnRemoveRitual(const class FString& ID);

	void OnRitualsFetchedEvent() const;
	void OnRitualsSyncErrorEvent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DailyRitualsPopupPresenter">();
	}
	static class UDailyRitualsPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDailyRitualsPopupPresenter>();
	}
};
static_assert(alignof(UDailyRitualsPopupPresenter) == 0x000008, "Wrong alignment on UDailyRitualsPopupPresenter");
static_assert(sizeof(UDailyRitualsPopupPresenter) == 0x0001E0, "Wrong size on UDailyRitualsPopupPresenter");

// Class DBDUIPresenters.DataHelper
// 0x0000 (0x0030 - 0x0030)
class UDataHelper final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataHelper">();
	}
	static class UDataHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataHelper>();
	}
};
static_assert(alignof(UDataHelper) == 0x000008, "Wrong alignment on UDataHelper");
static_assert(sizeof(UDataHelper) == 0x000030, "Wrong size on UDataHelper");

// Class DBDUIPresenters.DirectionalMinigamePresenter
// 0x0028 (0x0150 - 0x0128)
class UDirectionalMinigamePresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                DirectionalMinigameWidgetClass;                    // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x20];                                     // 0x0130(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMinigameEnd(EDirectionalMinigameResult Result);
	void OnMinigameEnterKey(EDirectionalInputKey EnteredKey, int32 EnteredIndex, bool IsCorrect, int32 CurrentIndex);
	void OnMinigameStart(const TArray<EDirectionalInputKey>& Sequence, int32 CurrentIndex);

	void OnMinigameInit(const struct FDirectionalMiniGameDefinition& MiniGameDefinition) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DirectionalMinigamePresenter">();
	}
	static class UDirectionalMinigamePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDirectionalMinigamePresenter>();
	}
};
static_assert(alignof(UDirectionalMinigamePresenter) == 0x000008, "Wrong alignment on UDirectionalMinigamePresenter");
static_assert(sizeof(UDirectionalMinigamePresenter) == 0x000150, "Wrong size on UDirectionalMinigamePresenter");
static_assert(offsetof(UDirectionalMinigamePresenter, DirectionalMinigameWidgetClass) == 0x000128, "Member 'UDirectionalMinigamePresenter::DirectionalMinigameWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.EventEntryRewardsSubPresenter
// 0x0088 (0x00F8 - 0x0070)
class UEventEntryRewardsSubPresenter : public USubPresenter
{
public:
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IEventCollectionViewInterface> _tabWidget;                                        // 0x00A0(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UStoreCustomizationItemViewData*> _rewardsGridData;                                  // 0x00B0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UStoreCustomizationItemViewData*> _previewAreaRewardsData;                           // 0x00C0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UEventEntryPresenter*                   _parentPresenter;                                  // 0x00D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDisplayStandController*                _displayStandController;                           // 0x00D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E0[0x18];                                      // 0x00E0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInstructionButtonClicked();
	void OnPreviewAreaItemClicked(const int32 SelectedIndex);
	void OnRewardGridItemClicked(const int32 SelectedIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryRewardsSubPresenter">();
	}
	static class UEventEntryRewardsSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryRewardsSubPresenter>();
	}
};
static_assert(alignof(UEventEntryRewardsSubPresenter) == 0x000008, "Wrong alignment on UEventEntryRewardsSubPresenter");
static_assert(sizeof(UEventEntryRewardsSubPresenter) == 0x0000F8, "Wrong size on UEventEntryRewardsSubPresenter");
static_assert(offsetof(UEventEntryRewardsSubPresenter, _tabWidget) == 0x0000A0, "Member 'UEventEntryRewardsSubPresenter::_tabWidget' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsSubPresenter, _rewardsGridData) == 0x0000B0, "Member 'UEventEntryRewardsSubPresenter::_rewardsGridData' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsSubPresenter, _previewAreaRewardsData) == 0x0000C0, "Member 'UEventEntryRewardsSubPresenter::_previewAreaRewardsData' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsSubPresenter, _parentPresenter) == 0x0000D0, "Member 'UEventEntryRewardsSubPresenter::_parentPresenter' has a wrong offset!");
static_assert(offsetof(UEventEntryRewardsSubPresenter, _displayStandController) == 0x0000D8, "Member 'UEventEntryRewardsSubPresenter::_displayStandController' has a wrong offset!");

// Class DBDUIPresenters.EventEntryCollectionSubPresenter
// 0x0048 (0x0140 - 0x00F8)
class UEventEntryCollectionSubPresenter final : public UEventEntryRewardsSubPresenter
{
public:
	uint8                                         Pad_F8[0x48];                                      // 0x00F8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryCollectionSubPresenter">();
	}
	static class UEventEntryCollectionSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryCollectionSubPresenter>();
	}
};
static_assert(alignof(UEventEntryCollectionSubPresenter) == 0x000008, "Wrong alignment on UEventEntryCollectionSubPresenter");
static_assert(sizeof(UEventEntryCollectionSubPresenter) == 0x000140, "Wrong size on UEventEntryCollectionSubPresenter");

// Class DBDUIPresenters.EventEntryDetailsSubPresenter
// 0x0068 (0x00D8 - 0x0070)
class UEventEntryDetailsSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IEventDetailsViewInterface> _detailsTabWidget;                                 // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDetailsTabViewData                    _viewData;                                         // 0x0080(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class UEventEntryPresenter*                   _parentPresenter;                                  // 0x00D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryDetailsSubPresenter">();
	}
	static class UEventEntryDetailsSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryDetailsSubPresenter>();
	}
};
static_assert(alignof(UEventEntryDetailsSubPresenter) == 0x000008, "Wrong alignment on UEventEntryDetailsSubPresenter");
static_assert(sizeof(UEventEntryDetailsSubPresenter) == 0x0000D8, "Wrong size on UEventEntryDetailsSubPresenter");
static_assert(offsetof(UEventEntryDetailsSubPresenter, _detailsTabWidget) == 0x000070, "Member 'UEventEntryDetailsSubPresenter::_detailsTabWidget' has a wrong offset!");
static_assert(offsetof(UEventEntryDetailsSubPresenter, _viewData) == 0x000080, "Member 'UEventEntryDetailsSubPresenter::_viewData' has a wrong offset!");
static_assert(offsetof(UEventEntryDetailsSubPresenter, _parentPresenter) == 0x0000D0, "Member 'UEventEntryDetailsSubPresenter::_parentPresenter' has a wrong offset!");

// Class DBDUIPresenters.EventEntryEventSubPresenter
// 0x0020 (0x0090 - 0x0070)
class UEventEntryEventSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IEventInfoViewInterface> _eventTabWidget;                                   // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEventTabViewData*                      _tabsData;                                         // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEventEntryPresenter*                   _parentPresenter;                                  // 0x0088(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnArchiveButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryEventSubPresenter">();
	}
	static class UEventEntryEventSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryEventSubPresenter>();
	}
};
static_assert(alignof(UEventEntryEventSubPresenter) == 0x000008, "Wrong alignment on UEventEntryEventSubPresenter");
static_assert(sizeof(UEventEntryEventSubPresenter) == 0x000090, "Wrong size on UEventEntryEventSubPresenter");
static_assert(offsetof(UEventEntryEventSubPresenter, _eventTabWidget) == 0x000070, "Member 'UEventEntryEventSubPresenter::_eventTabWidget' has a wrong offset!");
static_assert(offsetof(UEventEntryEventSubPresenter, _tabsData) == 0x000080, "Member 'UEventEntryEventSubPresenter::_tabsData' has a wrong offset!");
static_assert(offsetof(UEventEntryEventSubPresenter, _parentPresenter) == 0x000088, "Member 'UEventEntryEventSubPresenter::_parentPresenter' has a wrong offset!");

// Class DBDUIPresenters.EventEntryPresenter
// 0x00A0 (0x0188 - 0x00E8)
class UEventEntryPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                EventEntryWidgetClass;                             // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x18];                                      // 0x00F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UEventEntryEventSubPresenter*           _eventSubPresenter;                                // 0x0108(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEventEntryDetailsSubPresenter*         _detailsSubPresenter;                              // 0x0110(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEventEntryCollectionSubPresenter*      _collectionSubPresenter;                           // 0x0118(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEventEntryStoreSubPresenter*           _storeSubPresenter;                                // 0x0120(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UEventEntryViewData*                    _viewData;                                         // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x50];                                     // 0x0138(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GoToStoreButtonClicked(const class FName SelectedStoreTabItemId);
	void OnBackAction();
	void OnMilestoneTrackerItemClicked(const int32 SelectedIndex);
	void OnSelectedTabChanged(const int32 Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryPresenter">();
	}
	static class UEventEntryPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryPresenter>();
	}
};
static_assert(alignof(UEventEntryPresenter) == 0x000008, "Wrong alignment on UEventEntryPresenter");
static_assert(sizeof(UEventEntryPresenter) == 0x000188, "Wrong size on UEventEntryPresenter");
static_assert(offsetof(UEventEntryPresenter, EventEntryWidgetClass) == 0x0000E8, "Member 'UEventEntryPresenter::EventEntryWidgetClass' has a wrong offset!");
static_assert(offsetof(UEventEntryPresenter, _eventSubPresenter) == 0x000108, "Member 'UEventEntryPresenter::_eventSubPresenter' has a wrong offset!");
static_assert(offsetof(UEventEntryPresenter, _detailsSubPresenter) == 0x000110, "Member 'UEventEntryPresenter::_detailsSubPresenter' has a wrong offset!");
static_assert(offsetof(UEventEntryPresenter, _collectionSubPresenter) == 0x000118, "Member 'UEventEntryPresenter::_collectionSubPresenter' has a wrong offset!");
static_assert(offsetof(UEventEntryPresenter, _storeSubPresenter) == 0x000120, "Member 'UEventEntryPresenter::_storeSubPresenter' has a wrong offset!");
static_assert(offsetof(UEventEntryPresenter, _activeSubPresenter) == 0x000128, "Member 'UEventEntryPresenter::_activeSubPresenter' has a wrong offset!");
static_assert(offsetof(UEventEntryPresenter, _viewData) == 0x000130, "Member 'UEventEntryPresenter::_viewData' has a wrong offset!");

// Class DBDUIPresenters.EventEntryStoreSubPresenter
// 0x0028 (0x0120 - 0x00F8)
class UEventEntryStoreSubPresenter final : public UEventEntryRewardsSubPresenter
{
public:
	uint8                                         Pad_F8[0x18];                                      // 0x00F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStoreCustomizationItemViewData*> _storeItems;                                       // 0x0110(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventEntryStoreSubPresenter">();
	}
	static class UEventEntryStoreSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventEntryStoreSubPresenter>();
	}
};
static_assert(alignof(UEventEntryStoreSubPresenter) == 0x000008, "Wrong alignment on UEventEntryStoreSubPresenter");
static_assert(sizeof(UEventEntryStoreSubPresenter) == 0x000120, "Wrong size on UEventEntryStoreSubPresenter");
static_assert(offsetof(UEventEntryStoreSubPresenter, _storeItems) == 0x000110, "Member 'UEventEntryStoreSubPresenter::_storeItems' has a wrong offset!");

// Class DBDUIPresenters.EventObjectiveItemPresenter
// 0x00C0 (0x01E8 - 0x0128)
class UEventObjectiveItemPresenter final : public UHudPresenter
{
public:
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                DefaultCoreHudEventObjectiveItemWidgetClass;       // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, TSubclassOf<class UUserWidget>> CoreHudEventObjectiveItemWidgetClassMapping;       // 0x0138(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x60];                                     // 0x0188(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventObjectiveItemPresenter">();
	}
	static class UEventObjectiveItemPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventObjectiveItemPresenter>();
	}
};
static_assert(alignof(UEventObjectiveItemPresenter) == 0x000008, "Wrong alignment on UEventObjectiveItemPresenter");
static_assert(sizeof(UEventObjectiveItemPresenter) == 0x0001E8, "Wrong size on UEventObjectiveItemPresenter");
static_assert(offsetof(UEventObjectiveItemPresenter, DefaultCoreHudEventObjectiveItemWidgetClass) == 0x000130, "Member 'UEventObjectiveItemPresenter::DefaultCoreHudEventObjectiveItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UEventObjectiveItemPresenter, CoreHudEventObjectiveItemWidgetClassMapping) == 0x000138, "Member 'UEventObjectiveItemPresenter::CoreHudEventObjectiveItemWidgetClassMapping' has a wrong offset!");

// Class DBDUIPresenters.ExamplePresenter
// 0x0040 (0x0168 - 0x0128)
class UExamplePresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                ExampleWidgetClass;                                // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x38];                                     // 0x0130(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnButtonClick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExamplePresenter">();
	}
	static class UExamplePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExamplePresenter>();
	}
};
static_assert(alignof(UExamplePresenter) == 0x000008, "Wrong alignment on UExamplePresenter");
static_assert(sizeof(UExamplePresenter) == 0x000168, "Wrong size on UExamplePresenter");
static_assert(offsetof(UExamplePresenter, ExampleWidgetClass) == 0x000128, "Member 'UExamplePresenter::ExampleWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.ExternalEffectsPresenter
// 0x0018 (0x0140 - 0x0128)
class UExternalEffectsPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreExternalEffectsWidgetClass;                    // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHideExternalEffect(const class FName ItemId, const EExternalEffectSource ExternalEffectSource);
	void OnShowExternalEffect(const struct FExternalEffectData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExternalEffectsPresenter">();
	}
	static class UExternalEffectsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExternalEffectsPresenter>();
	}
};
static_assert(alignof(UExternalEffectsPresenter) == 0x000008, "Wrong alignment on UExternalEffectsPresenter");
static_assert(sizeof(UExternalEffectsPresenter) == 0x000140, "Wrong size on UExternalEffectsPresenter");
static_assert(offsetof(UExternalEffectsPresenter, CoreExternalEffectsWidgetClass) == 0x000128, "Member 'UExternalEffectsPresenter::CoreExternalEffectsWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.FearMarketPopupPresenter
// 0x0000 (0x01C0 - 0x01C0)
class UFearMarketPopupPresenter final : public UGenericPopupPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FearMarketPopupPresenter">();
	}
	static class UFearMarketPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFearMarketPopupPresenter>();
	}
};
static_assert(alignof(UFearMarketPopupPresenter) == 0x000008, "Wrong alignment on UFearMarketPopupPresenter");
static_assert(sizeof(UFearMarketPopupPresenter) == 0x0001C0, "Wrong size on UFearMarketPopupPresenter");

// Class DBDUIPresenters.FocusHandler
// 0x0018 (0x0048 - 0x0030)
class UFocusHandler final : public UUIComponent
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FocusHandler">();
	}
	static class UFocusHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFocusHandler>();
	}
};
static_assert(alignof(UFocusHandler) == 0x000008, "Wrong alignment on UFocusHandler");
static_assert(sizeof(UFocusHandler) == 0x000048, "Wrong size on UFocusHandler");

// Class DBDUIPresenters.FriendSearchPopupPresenter
// 0x0010 (0x01D0 - 0x01C0)
class UFriendSearchPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSearchBarTextChanged(const class FString& EnteredText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FriendSearchPopupPresenter">();
	}
	static class UFriendSearchPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFriendSearchPopupPresenter>();
	}
};
static_assert(alignof(UFriendSearchPopupPresenter) == 0x000008, "Wrong alignment on UFriendSearchPopupPresenter");
static_assert(sizeof(UFriendSearchPopupPresenter) == 0x0001D0, "Wrong size on UFriendSearchPopupPresenter");

// Class DBDUIPresenters.GameManualSubPresenter
// 0x0010 (0x0080 - 0x0070)
class UGameManualSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IGameManualViewInterface> _gameManualWidget;                                 // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnCategoryCategoryEntered(EHelpType CategoryType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameManualSubPresenter">();
	}
	static class UGameManualSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameManualSubPresenter>();
	}
};
static_assert(alignof(UGameManualSubPresenter) == 0x000008, "Wrong alignment on UGameManualSubPresenter");
static_assert(sizeof(UGameManualSubPresenter) == 0x000080, "Wrong size on UGameManualSubPresenter");
static_assert(offsetof(UGameManualSubPresenter, _gameManualWidget) == 0x000070, "Member 'UGameManualSubPresenter::_gameManualWidget' has a wrong offset!");

// Class DBDUIPresenters.GenericRefreshingPopupPresenter
// 0x0020 (0x01E0 - 0x01C0)
class UGenericRefreshingPopupPresenter final : public UGenericPopupPresenter
{
public:
	float                                         DefaultRefreshingIntervalsTime;                    // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultTimeoutTime;                                // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C8[0x18];                                     // 0x01C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GenericRefreshingPopupPresenter">();
	}
	static class UGenericRefreshingPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGenericRefreshingPopupPresenter>();
	}
};
static_assert(alignof(UGenericRefreshingPopupPresenter) == 0x000008, "Wrong alignment on UGenericRefreshingPopupPresenter");
static_assert(sizeof(UGenericRefreshingPopupPresenter) == 0x0001E0, "Wrong size on UGenericRefreshingPopupPresenter");
static_assert(offsetof(UGenericRefreshingPopupPresenter, DefaultRefreshingIntervalsTime) == 0x0001C0, "Member 'UGenericRefreshingPopupPresenter::DefaultRefreshingIntervalsTime' has a wrong offset!");
static_assert(offsetof(UGenericRefreshingPopupPresenter, DefaultTimeoutTime) == 0x0001C4, "Member 'UGenericRefreshingPopupPresenter::DefaultTimeoutTime' has a wrong offset!");

// Class DBDUIPresenters.GenericTextInputPopupPresenter
// 0x0070 (0x0230 - 0x01C0)
class UGenericTextInputPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x70];                                     // 0x01C0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GenericTextInputPopupPresenter">();
	}
	static class UGenericTextInputPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGenericTextInputPopupPresenter>();
	}
};
static_assert(alignof(UGenericTextInputPopupPresenter) == 0x000008, "Wrong alignment on UGenericTextInputPopupPresenter");
static_assert(sizeof(UGenericTextInputPopupPresenter) == 0x000230, "Wrong size on UGenericTextInputPopupPresenter");

// Class DBDUIPresenters.GlobalProcessingIconPresenter
// 0x0018 (0x0100 - 0x00E8)
class UGlobalProcessingIconPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                GlobalProcessingIconWidgetClass;                   // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalProcessingIconPresenter">();
	}
	static class UGlobalProcessingIconPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalProcessingIconPresenter>();
	}
};
static_assert(alignof(UGlobalProcessingIconPresenter) == 0x000008, "Wrong alignment on UGlobalProcessingIconPresenter");
static_assert(sizeof(UGlobalProcessingIconPresenter) == 0x000100, "Wrong size on UGlobalProcessingIconPresenter");
static_assert(offsetof(UGlobalProcessingIconPresenter, GlobalProcessingIconWidgetClass) == 0x0000E8, "Member 'UGlobalProcessingIconPresenter::GlobalProcessingIconWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.PresenterParentInfo
// 0x0008 (0x0038 - 0x0030)
class UPresenterParentInfo : public UObject
{
public:
	TSubclassOf<class UPresenterParentWidget>     ParentClass;                                       // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresenterParentInfo">();
	}
	static class UPresenterParentInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenterParentInfo>();
	}
};
static_assert(alignof(UPresenterParentInfo) == 0x000008, "Wrong alignment on UPresenterParentInfo");
static_assert(sizeof(UPresenterParentInfo) == 0x000038, "Wrong size on UPresenterParentInfo");
static_assert(offsetof(UPresenterParentInfo, ParentClass) == 0x000030, "Member 'UPresenterParentInfo::ParentClass' has a wrong offset!");

// Class DBDUIPresenters.GridPresenterParentInfo
// 0x0030 (0x0068 - 0x0038)
class UGridPresenterParentInfo final : public UPresenterParentInfo
{
public:
	EHorizontalAlignment                          HorizontalAlignment;                               // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVerticalAlignment                            VerticalAlignment;                                 // 0x0039(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                Padding;                                           // 0x003C(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Nudge;                                             // 0x0050(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Row;                                               // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Column;                                            // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridPresenterParentInfo">();
	}
	static class UGridPresenterParentInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridPresenterParentInfo>();
	}
};
static_assert(alignof(UGridPresenterParentInfo) == 0x000008, "Wrong alignment on UGridPresenterParentInfo");
static_assert(sizeof(UGridPresenterParentInfo) == 0x000068, "Wrong size on UGridPresenterParentInfo");
static_assert(offsetof(UGridPresenterParentInfo, HorizontalAlignment) == 0x000038, "Member 'UGridPresenterParentInfo::HorizontalAlignment' has a wrong offset!");
static_assert(offsetof(UGridPresenterParentInfo, VerticalAlignment) == 0x000039, "Member 'UGridPresenterParentInfo::VerticalAlignment' has a wrong offset!");
static_assert(offsetof(UGridPresenterParentInfo, Padding) == 0x00003C, "Member 'UGridPresenterParentInfo::Padding' has a wrong offset!");
static_assert(offsetof(UGridPresenterParentInfo, Nudge) == 0x000050, "Member 'UGridPresenterParentInfo::Nudge' has a wrong offset!");
static_assert(offsetof(UGridPresenterParentInfo, Row) == 0x000060, "Member 'UGridPresenterParentInfo::Row' has a wrong offset!");
static_assert(offsetof(UGridPresenterParentInfo, Column) == 0x000064, "Member 'UGridPresenterParentInfo::Column' has a wrong offset!");

// Class DBDUIPresenters.PresenterParentWidget
// 0x0000 (0x02A8 - 0x02A8)
class UPresenterParentWidget : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresenterParentWidget">();
	}
	static class UPresenterParentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenterParentWidget>();
	}
};
static_assert(alignof(UPresenterParentWidget) == 0x000008, "Wrong alignment on UPresenterParentWidget");
static_assert(sizeof(UPresenterParentWidget) == 0x0002A8, "Wrong size on UPresenterParentWidget");

// Class DBDUIPresenters.GridPresenterParentWidget
// 0x0010 (0x02B8 - 0x02A8)
class UGridPresenterParentWidget : public UPresenterParentWidget
{
public:
	class UGridPanel*                             Container;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 DividerImage;                                      // 0x02B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnChildVisibilityChanged(ESlateVisibility InVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GridPresenterParentWidget">();
	}
	static class UGridPresenterParentWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGridPresenterParentWidget>();
	}
};
static_assert(alignof(UGridPresenterParentWidget) == 0x000008, "Wrong alignment on UGridPresenterParentWidget");
static_assert(sizeof(UGridPresenterParentWidget) == 0x0002B8, "Wrong size on UGridPresenterParentWidget");
static_assert(offsetof(UGridPresenterParentWidget, Container) == 0x0002A8, "Member 'UGridPresenterParentWidget::Container' has a wrong offset!");
static_assert(offsetof(UGridPresenterParentWidget, DividerImage) == 0x0002B0, "Member 'UGridPresenterParentWidget::DividerImage' has a wrong offset!");

// Class DBDUIPresenters.HudEffectCardPresenter
// 0x0048 (0x0170 - 0x0128)
class UHudEffectCardPresenter final : public UHudPresenter
{
public:
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                EffectCardWidgetClass;                             // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTryksEffectCardsControllerComponent*   _cardsControllerComponent;                         // 0x0138(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x30];                                     // 0x0140(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudEffectCardPresenter">();
	}
	static class UHudEffectCardPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudEffectCardPresenter>();
	}
};
static_assert(alignof(UHudEffectCardPresenter) == 0x000008, "Wrong alignment on UHudEffectCardPresenter");
static_assert(sizeof(UHudEffectCardPresenter) == 0x000170, "Wrong size on UHudEffectCardPresenter");
static_assert(offsetof(UHudEffectCardPresenter, EffectCardWidgetClass) == 0x000130, "Member 'UHudEffectCardPresenter::EffectCardWidgetClass' has a wrong offset!");
static_assert(offsetof(UHudEffectCardPresenter, _cardsControllerComponent) == 0x000138, "Member 'UHudEffectCardPresenter::_cardsControllerComponent' has a wrong offset!");

// Class DBDUIPresenters.HudEndGameScenarioPresenter
// 0x0038 (0x0160 - 0x0128)
class UHudEndGameScenarioPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                EndGameCollapseBarWidgetClass;                     // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x30];                                     // 0x0130(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudEndGameScenarioPresenter">();
	}
	static class UHudEndGameScenarioPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudEndGameScenarioPresenter>();
	}
};
static_assert(alignof(UHudEndGameScenarioPresenter) == 0x000008, "Wrong alignment on UHudEndGameScenarioPresenter");
static_assert(sizeof(UHudEndGameScenarioPresenter) == 0x000160, "Wrong size on UHudEndGameScenarioPresenter");
static_assert(offsetof(UHudEndGameScenarioPresenter, EndGameCollapseBarWidgetClass) == 0x000128, "Member 'UHudEndGameScenarioPresenter::EndGameCollapseBarWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudEventProgressionPresenter
// 0x0040 (0x0168 - 0x0128)
class UHudEventProgressionPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreHudEventProgressionWidgetClass;                // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x38];                                     // 0x0130(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEventHauntTargetChanged(const int32 Value);
	void OnEventInVoidZoneChanged(const bool Value);
	void OnEventIsChannelingHauntChanged(const bool Value);
	void OnEventProgressChanged(const int32 Value);
	void OnEventProgressionDataInitialized(const struct FHudEventProgression2023ViewData& EventProgressionData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudEventProgressionPresenter">();
	}
	static class UHudEventProgressionPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudEventProgressionPresenter>();
	}
};
static_assert(alignof(UHudEventProgressionPresenter) == 0x000008, "Wrong alignment on UHudEventProgressionPresenter");
static_assert(sizeof(UHudEventProgressionPresenter) == 0x000168, "Wrong size on UHudEventProgressionPresenter");
static_assert(offsetof(UHudEventProgressionPresenter, CoreHudEventProgressionWidgetClass) == 0x000128, "Member 'UHudEventProgressionPresenter::CoreHudEventProgressionWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudPeekingPromptsPresenter
// 0x0030 (0x0158 - 0x0128)
class UHudPeekingPromptsPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                LeaningArrowsWidgetClass;                          // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x28];                                     // 0x0130(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleBestPlayerInteractionsChanged();
	void UpdatePeekingState(ELeanState PotentialLeanState);

	bool CanPlayerLean() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudPeekingPromptsPresenter">();
	}
	static class UHudPeekingPromptsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudPeekingPromptsPresenter>();
	}
};
static_assert(alignof(UHudPeekingPromptsPresenter) == 0x000008, "Wrong alignment on UHudPeekingPromptsPresenter");
static_assert(sizeof(UHudPeekingPromptsPresenter) == 0x000158, "Wrong size on UHudPeekingPromptsPresenter");
static_assert(offsetof(UHudPeekingPromptsPresenter, LeaningArrowsWidgetClass) == 0x000128, "Member 'UHudPeekingPromptsPresenter::LeaningArrowsWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudSkillUnlockedPresenter
// 0x0048 (0x0170 - 0x0128)
class UHudSkillUnlockedPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                SkillUnlockedWidgetClass;                          // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotificationDuration;                              // 0x0130(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x3C];                                     // 0x0134(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudSkillUnlockedPresenter">();
	}
	static class UHudSkillUnlockedPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudSkillUnlockedPresenter>();
	}
};
static_assert(alignof(UHudSkillUnlockedPresenter) == 0x000008, "Wrong alignment on UHudSkillUnlockedPresenter");
static_assert(sizeof(UHudSkillUnlockedPresenter) == 0x000170, "Wrong size on UHudSkillUnlockedPresenter");
static_assert(offsetof(UHudSkillUnlockedPresenter, SkillUnlockedWidgetClass) == 0x000128, "Member 'UHudSkillUnlockedPresenter::SkillUnlockedWidgetClass' has a wrong offset!");
static_assert(offsetof(UHudSkillUnlockedPresenter, NotificationDuration) == 0x000130, "Member 'UHudSkillUnlockedPresenter::NotificationDuration' has a wrong offset!");

// Class DBDUIPresenters.HudSpectatePresenter
// 0x0050 (0x0178 - 0x0128)
class UHudSpectatePresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreSpectateBarWidget;                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x48];                                     // 0x0130(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLeaveTriggered();
	void OnNextPlayerTriggered();
	void OnPlayerGameStateChanged(class ADBDPlayerState* DBDPlayerState, EGameState NewGameState);
	void OnPreviousPlayerTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudSpectatePresenter">();
	}
	static class UHudSpectatePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudSpectatePresenter>();
	}
};
static_assert(alignof(UHudSpectatePresenter) == 0x000008, "Wrong alignment on UHudSpectatePresenter");
static_assert(sizeof(UHudSpectatePresenter) == 0x000178, "Wrong size on UHudSpectatePresenter");
static_assert(offsetof(UHudSpectatePresenter, CoreSpectateBarWidget) == 0x000128, "Member 'UHudSpectatePresenter::CoreSpectateBarWidget' has a wrong offset!");

// Class DBDUIPresenters.HudSurvivorEquippedItemsPresenter
// 0x01C8 (0x02F0 - 0x0128)
class UHudSurvivorEquippedItemsPresenter final : public UHudPresenter
{
public:
	uint8                                         Pad_128[0x8];                                      // 0x0128(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                SurvivorEquippedItemWidgetClass;                   // 0x0130(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FItemBundleViewData                    _itemBundleViewData;                               // 0x0138(0x0180)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2B8[0x38];                                     // 0x02B8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudSurvivorEquippedItemsPresenter">();
	}
	static class UHudSurvivorEquippedItemsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudSurvivorEquippedItemsPresenter>();
	}
};
static_assert(alignof(UHudSurvivorEquippedItemsPresenter) == 0x000008, "Wrong alignment on UHudSurvivorEquippedItemsPresenter");
static_assert(sizeof(UHudSurvivorEquippedItemsPresenter) == 0x0002F0, "Wrong size on UHudSurvivorEquippedItemsPresenter");
static_assert(offsetof(UHudSurvivorEquippedItemsPresenter, SurvivorEquippedItemWidgetClass) == 0x000130, "Member 'UHudSurvivorEquippedItemsPresenter::SurvivorEquippedItemWidgetClass' has a wrong offset!");
static_assert(offsetof(UHudSurvivorEquippedItemsPresenter, _itemBundleViewData) == 0x000138, "Member 'UHudSurvivorEquippedItemsPresenter::_itemBundleViewData' has a wrong offset!");

// Class DBDUIPresenters.HudTutorialObjectivesPresenter
// 0x0070 (0x0198 - 0x0128)
class UHudTutorialObjectivesPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                TutorialObjectivesWidgetClass;                     // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x68];                                     // 0x0130(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsInTutorial() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudTutorialObjectivesPresenter">();
	}
	static class UHudTutorialObjectivesPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudTutorialObjectivesPresenter>();
	}
};
static_assert(alignof(UHudTutorialObjectivesPresenter) == 0x000008, "Wrong alignment on UHudTutorialObjectivesPresenter");
static_assert(sizeof(UHudTutorialObjectivesPresenter) == 0x000198, "Wrong size on UHudTutorialObjectivesPresenter");
static_assert(offsetof(UHudTutorialObjectivesPresenter, TutorialObjectivesWidgetClass) == 0x000128, "Member 'UHudTutorialObjectivesPresenter::TutorialObjectivesWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.InboxPresenter
// 0x00C0 (0x01A8 - 0x00E8)
class UInboxPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                InboxWidgetClass;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInboxItemViewData*>             _newsData;                                         // 0x0100(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UInboxItemViewData*>             _messagesData;                                     // 0x0110(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x88];                                     // 0x0120(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackButtonClicked();
	void OnClaimAllClicked();
	void OnClaimClicked();
	void OnItemClicked(const class FName& ItemId);
	void OnReadAllClicked();
	void OnTabSelected(const EInboxTab Tab);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InboxPresenter">();
	}
	static class UInboxPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInboxPresenter>();
	}
};
static_assert(alignof(UInboxPresenter) == 0x000008, "Wrong alignment on UInboxPresenter");
static_assert(sizeof(UInboxPresenter) == 0x0001A8, "Wrong size on UInboxPresenter");
static_assert(offsetof(UInboxPresenter, InboxWidgetClass) == 0x0000E8, "Member 'UInboxPresenter::InboxWidgetClass' has a wrong offset!");
static_assert(offsetof(UInboxPresenter, _newsData) == 0x000100, "Member 'UInboxPresenter::_newsData' has a wrong offset!");
static_assert(offsetof(UInboxPresenter, _messagesData) == 0x000110, "Member 'UInboxPresenter::_messagesData' has a wrong offset!");

// Class DBDUIPresenters.ItemPickupPresenter
// 0x0078 (0x01A0 - 0x0128)
class UItemPickupPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                _itemPickupWidgetClass;                            // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UInteractionDefinition>> _interactionsToTriggerPopup;                       // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UInteractionDefinition>> _interactionsNotAllowedToTriggerPopup;             // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_150[0x18];                                     // 0x0150(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UInteractionDefinition>> _interactionsAllowedIfAbridgedVersionIsOn;         // 0x0168(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TSubclassOf<class UInteractionDefinition>> _interactionsAllowedIfAbridgedVersionIsOff;        // 0x0178(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_188[0x18];                                     // 0x0188(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ItemPickupPresenter">();
	}
	static class UItemPickupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UItemPickupPresenter>();
	}
};
static_assert(alignof(UItemPickupPresenter) == 0x000008, "Wrong alignment on UItemPickupPresenter");
static_assert(sizeof(UItemPickupPresenter) == 0x0001A0, "Wrong size on UItemPickupPresenter");
static_assert(offsetof(UItemPickupPresenter, _itemPickupWidgetClass) == 0x000128, "Member 'UItemPickupPresenter::_itemPickupWidgetClass' has a wrong offset!");
static_assert(offsetof(UItemPickupPresenter, _interactionsToTriggerPopup) == 0x000130, "Member 'UItemPickupPresenter::_interactionsToTriggerPopup' has a wrong offset!");
static_assert(offsetof(UItemPickupPresenter, _interactionsNotAllowedToTriggerPopup) == 0x000140, "Member 'UItemPickupPresenter::_interactionsNotAllowedToTriggerPopup' has a wrong offset!");
static_assert(offsetof(UItemPickupPresenter, _interactionsAllowedIfAbridgedVersionIsOn) == 0x000168, "Member 'UItemPickupPresenter::_interactionsAllowedIfAbridgedVersionIsOn' has a wrong offset!");
static_assert(offsetof(UItemPickupPresenter, _interactionsAllowedIfAbridgedVersionIsOff) == 0x000178, "Member 'UItemPickupPresenter::_interactionsAllowedIfAbridgedVersionIsOff' has a wrong offset!");

// Class DBDUIPresenters.LightSensitivityPresenter
// 0x0028 (0x0110 - 0x00E8)
class ULightSensitivityPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                LightSensitivityScreenWidgetClass;                 // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoCompleteTime;                                  // 0x00F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F4[0x1C];                                      // 0x00F4(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCompletedFadeOut();
	void OnContinue();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LightSensitivityPresenter">();
	}
	static class ULightSensitivityPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightSensitivityPresenter>();
	}
};
static_assert(alignof(ULightSensitivityPresenter) == 0x000008, "Wrong alignment on ULightSensitivityPresenter");
static_assert(sizeof(ULightSensitivityPresenter) == 0x000110, "Wrong size on ULightSensitivityPresenter");
static_assert(offsetof(ULightSensitivityPresenter, LightSensitivityScreenWidgetClass) == 0x0000E8, "Member 'ULightSensitivityPresenter::LightSensitivityScreenWidgetClass' has a wrong offset!");
static_assert(offsetof(ULightSensitivityPresenter, AutoCompleteTime) == 0x0000F0, "Member 'ULightSensitivityPresenter::AutoCompleteTime' has a wrong offset!");

// Class DBDUIPresenters.LoadingScreenSubPresenter
// 0x0030 (0x00A0 - 0x0070)
class ULoadingScreenSubPresenter : public USubPresenter
{
public:
	class ULoadingScreenPresenter*                _parentPresenter;                                  // 0x0070(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_78[0x28];                                      // 0x0078(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoadingHintsFadeSequenceCompleted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenSubPresenter">();
	}
	static class ULoadingScreenSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenSubPresenter>();
	}
};
static_assert(alignof(ULoadingScreenSubPresenter) == 0x000008, "Wrong alignment on ULoadingScreenSubPresenter");
static_assert(sizeof(ULoadingScreenSubPresenter) == 0x0000A0, "Wrong size on ULoadingScreenSubPresenter");
static_assert(offsetof(ULoadingScreenSubPresenter, _parentPresenter) == 0x000070, "Member 'ULoadingScreenSubPresenter::_parentPresenter' has a wrong offset!");

// Class DBDUIPresenters.LoadingScreenSpecialEventSubPresenter
// 0x0018 (0x00B8 - 0x00A0)
class ULoadingScreenSpecialEventSubPresenter : public ULoadingScreenSubPresenter
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenSpecialEventSubPresenter">();
	}
	static class ULoadingScreenSpecialEventSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenSpecialEventSubPresenter>();
	}
};
static_assert(alignof(ULoadingScreenSpecialEventSubPresenter) == 0x000008, "Wrong alignment on ULoadingScreenSpecialEventSubPresenter");
static_assert(sizeof(ULoadingScreenSpecialEventSubPresenter) == 0x0000B8, "Wrong size on ULoadingScreenSpecialEventSubPresenter");

// Class DBDUIPresenters.LoadingScreenLimitedTimeEventSubPresenter
// 0x0000 (0x00B8 - 0x00B8)
class ULoadingScreenLimitedTimeEventSubPresenter final : public ULoadingScreenSpecialEventSubPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenLimitedTimeEventSubPresenter">();
	}
	static class ULoadingScreenLimitedTimeEventSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenLimitedTimeEventSubPresenter>();
	}
};
static_assert(alignof(ULoadingScreenLimitedTimeEventSubPresenter) == 0x000008, "Wrong alignment on ULoadingScreenLimitedTimeEventSubPresenter");
static_assert(sizeof(ULoadingScreenLimitedTimeEventSubPresenter) == 0x0000B8, "Wrong size on ULoadingScreenLimitedTimeEventSubPresenter");

// Class DBDUIPresenters.LoadingScreenPresenter
// 0x0068 (0x0150 - 0x00E8)
class ULoadingScreenPresenter final : public UPresenter
{
public:
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                LoadingScreenWidgetClass;                          // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadingHintDelay;                                  // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LoadingHintDuration;                               // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 LoadingHintLengthThresholds;                       // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         LoadingHintDurationPerLengthThreshold;             // 0x0110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELoadingScreenType                            _activeLoadingScreenType;                          // 0x0114(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_115[0x3];                                      // 0x0115(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULoadingScreenSimpleSubPresenter*       _loadingScreenSimpleSubPresenter;                  // 0x0118(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULoadingScreenRegularSubPresenter*      _loadingScreenRegularSubPresenter;                 // 0x0120(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULoadingScreenSpecialEventSubPresenter* _loadingScreenSpecialSubPresenter;                 // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULoadingScreenLimitedTimeEventSubPresenter* _loadingScreenLimitedTimeEventSubPresenter;        // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULoadingScreenSubPresenter*             _activeLoadingScreenSubPresenter;                  // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0x10];                                     // 0x0140(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenPresenter">();
	}
	static class ULoadingScreenPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenPresenter>();
	}
};
static_assert(alignof(ULoadingScreenPresenter) == 0x000008, "Wrong alignment on ULoadingScreenPresenter");
static_assert(sizeof(ULoadingScreenPresenter) == 0x000150, "Wrong size on ULoadingScreenPresenter");
static_assert(offsetof(ULoadingScreenPresenter, LoadingScreenWidgetClass) == 0x0000F0, "Member 'ULoadingScreenPresenter::LoadingScreenWidgetClass' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, LoadingHintDelay) == 0x0000F8, "Member 'ULoadingScreenPresenter::LoadingHintDelay' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, LoadingHintDuration) == 0x0000FC, "Member 'ULoadingScreenPresenter::LoadingHintDuration' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, LoadingHintLengthThresholds) == 0x000100, "Member 'ULoadingScreenPresenter::LoadingHintLengthThresholds' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, LoadingHintDurationPerLengthThreshold) == 0x000110, "Member 'ULoadingScreenPresenter::LoadingHintDurationPerLengthThreshold' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, _activeLoadingScreenType) == 0x000114, "Member 'ULoadingScreenPresenter::_activeLoadingScreenType' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, _loadingScreenSimpleSubPresenter) == 0x000118, "Member 'ULoadingScreenPresenter::_loadingScreenSimpleSubPresenter' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, _loadingScreenRegularSubPresenter) == 0x000120, "Member 'ULoadingScreenPresenter::_loadingScreenRegularSubPresenter' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, _loadingScreenSpecialSubPresenter) == 0x000128, "Member 'ULoadingScreenPresenter::_loadingScreenSpecialSubPresenter' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, _loadingScreenLimitedTimeEventSubPresenter) == 0x000130, "Member 'ULoadingScreenPresenter::_loadingScreenLimitedTimeEventSubPresenter' has a wrong offset!");
static_assert(offsetof(ULoadingScreenPresenter, _activeLoadingScreenSubPresenter) == 0x000138, "Member 'ULoadingScreenPresenter::_activeLoadingScreenSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.LoadingScreenRegularSubPresenter
// 0x0008 (0x00A8 - 0x00A0)
class ULoadingScreenRegularSubPresenter final : public ULoadingScreenSubPresenter
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenRegularSubPresenter">();
	}
	static class ULoadingScreenRegularSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenRegularSubPresenter>();
	}
};
static_assert(alignof(ULoadingScreenRegularSubPresenter) == 0x000008, "Wrong alignment on ULoadingScreenRegularSubPresenter");
static_assert(sizeof(ULoadingScreenRegularSubPresenter) == 0x0000A8, "Wrong size on ULoadingScreenRegularSubPresenter");

// Class DBDUIPresenters.LoadingScreenSimpleSubPresenter
// 0x0000 (0x00A0 - 0x00A0)
class ULoadingScreenSimpleSubPresenter final : public ULoadingScreenSubPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenSimpleSubPresenter">();
	}
	static class ULoadingScreenSimpleSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenSimpleSubPresenter>();
	}
};
static_assert(alignof(ULoadingScreenSimpleSubPresenter) == 0x000008, "Wrong alignment on ULoadingScreenSimpleSubPresenter");
static_assert(sizeof(ULoadingScreenSimpleSubPresenter) == 0x0000A0, "Wrong size on ULoadingScreenSimpleSubPresenter");

// Class DBDUIPresenters.LoadoutMenuPresenter
// 0x0080 (0x0168 - 0x00E8)
class ULoadoutMenuPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                LoadoutMenuWidgetClass;                            // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ULoadoutMenuViewData*>           _loadoutMenuSlotData;                              // 0x0100(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class ULoadoutMenuViewData*>           _loadoutMenuInventoryData;                         // 0x0110(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x48];                                     // 0x0120(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoadoutMenuInventorySlotClick(const ELoadoutSlot ItemIndex, const class FName ItemId);
	void OnLoadoutMenuPresetClicked(const int32 PresetId, const ELoadoutSlot SlotSelected);
	void OnLoadoutMenuPresetSelected(const int32 PresetId, const ELoadoutSlot SlotSelected);
	void OnLoadoutMenuSlotIsSelected(ELoadoutSlot SlotSelected);
	void OnSelectedCharacterChanged(int32 SelectedCharacterIndex);
	class ULoadoutMenuViewData* SetLoadoutViewData(const struct FInventorySlotData& SlotData, const EPlayerRole PlayerRole);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadoutMenuPresenter">();
	}
	static class ULoadoutMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadoutMenuPresenter>();
	}
};
static_assert(alignof(ULoadoutMenuPresenter) == 0x000008, "Wrong alignment on ULoadoutMenuPresenter");
static_assert(sizeof(ULoadoutMenuPresenter) == 0x000168, "Wrong size on ULoadoutMenuPresenter");
static_assert(offsetof(ULoadoutMenuPresenter, LoadoutMenuWidgetClass) == 0x0000E8, "Member 'ULoadoutMenuPresenter::LoadoutMenuWidgetClass' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPresenter, _loadoutMenuSlotData) == 0x000100, "Member 'ULoadoutMenuPresenter::_loadoutMenuSlotData' has a wrong offset!");
static_assert(offsetof(ULoadoutMenuPresenter, _loadoutMenuInventoryData) == 0x000110, "Member 'ULoadoutMenuPresenter::_loadoutMenuInventoryData' has a wrong offset!");

// Class DBDUIPresenters.LobbySubPresenter
// 0x0000 (0x0070 - 0x0070)
class ULobbySubPresenter : public USubPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbySubPresenter">();
	}
	static class ULobbySubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbySubPresenter>();
	}
};
static_assert(alignof(ULobbySubPresenter) == 0x000008, "Wrong alignment on ULobbySubPresenter");
static_assert(sizeof(ULobbySubPresenter) == 0x000070, "Wrong size on ULobbySubPresenter");

// Class DBDUIPresenters.LobbyCharactersSubTabSubPresenter
// 0x0018 (0x0088 - 0x0070)
class ULobbyCharactersSubTabSubPresenter : public ULobbySubPresenter
{
public:
	uint8                                         Pad_70[0x18];                                      // 0x0070(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnWalletUpdated(const TArray<struct FShopWalletUpdate>& WalletUpdates);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCharactersSubTabSubPresenter">();
	}
	static class ULobbyCharactersSubTabSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCharactersSubTabSubPresenter>();
	}
};
static_assert(alignof(ULobbyCharactersSubTabSubPresenter) == 0x000008, "Wrong alignment on ULobbyCharactersSubTabSubPresenter");
static_assert(sizeof(ULobbyCharactersSubTabSubPresenter) == 0x000088, "Wrong size on ULobbyCharactersSubTabSubPresenter");

// Class DBDUIPresenters.LobbyCharactersBioSubPresenter
// 0x0028 (0x00B0 - 0x0088)
class ULobbyCharactersBioSubPresenter final : public ULobbyCharactersSubTabSubPresenter
{
public:
	class UCharacterSelectionManager*             _characterSelectionManager;                        // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0x20];                                      // 0x0090(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCharactersBioSubPresenter">();
	}
	static class ULobbyCharactersBioSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCharactersBioSubPresenter>();
	}
};
static_assert(alignof(ULobbyCharactersBioSubPresenter) == 0x000008, "Wrong alignment on ULobbyCharactersBioSubPresenter");
static_assert(sizeof(ULobbyCharactersBioSubPresenter) == 0x0000B0, "Wrong size on ULobbyCharactersBioSubPresenter");
static_assert(offsetof(ULobbyCharactersBioSubPresenter, _characterSelectionManager) == 0x000088, "Member 'ULobbyCharactersBioSubPresenter::_characterSelectionManager' has a wrong offset!");

// Class DBDUIPresenters.LobbyCharactersCustomizationsSubPresenter
// 0x0068 (0x00F0 - 0x0088)
class ULobbyCharactersCustomizationsSubPresenter final : public ULobbyCharactersSubTabSubPresenter
{
public:
	uint8                                         Pad_88[0x30];                                      // 0x0088(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterSelectionManager*             _characterSelectionManager;                        // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCustomizationSelectionManager*         _customizationSelectionManager;                    // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x28];                                      // 0x00C8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCategorySelected(const ECustomizationCategory Category);
	void OnCategorySelectedAgain(const ECustomizationCategory Category);
	void OnCharmSlotSelected(const int32 SlotIndex);
	void OnClearFiltersClicked();
	void OnCustomizationSelected(const class FName CustomizationId);
	void OnCustomizationSelectedAgain(const class FName CustomizationId);
	void OnCustomizationTimerExpired();
	void OnFiltersChanged(const struct FStoreCharactersFiltersData& FiltersData);
	void OnPresetSelected(const int32 PresetId);
	void OnSearchBarTextChanged(const class FString& EnteredText);
	void OnSortingChanged(const ESortingOption SortingType, const ESortingOrder SortingOrder);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCharactersCustomizationsSubPresenter">();
	}
	static class ULobbyCharactersCustomizationsSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCharactersCustomizationsSubPresenter>();
	}
};
static_assert(alignof(ULobbyCharactersCustomizationsSubPresenter) == 0x000008, "Wrong alignment on ULobbyCharactersCustomizationsSubPresenter");
static_assert(sizeof(ULobbyCharactersCustomizationsSubPresenter) == 0x0000F0, "Wrong size on ULobbyCharactersCustomizationsSubPresenter");
static_assert(offsetof(ULobbyCharactersCustomizationsSubPresenter, _characterSelectionManager) == 0x0000B8, "Member 'ULobbyCharactersCustomizationsSubPresenter::_characterSelectionManager' has a wrong offset!");
static_assert(offsetof(ULobbyCharactersCustomizationsSubPresenter, _customizationSelectionManager) == 0x0000C0, "Member 'ULobbyCharactersCustomizationsSubPresenter::_customizationSelectionManager' has a wrong offset!");

// Class DBDUIPresenters.LobbyCharactersListSubPresenter
// 0x0048 (0x00D0 - 0x0088)
class ULobbyCharactersListSubPresenter final : public ULobbyCharactersSubTabSubPresenter
{
public:
	class UCharacterSelectionManager*             _characterSelectionManager;                        // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0x40];                                      // 0x0090(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCharacterSelected(const int32 CharacterIndex);
	void OnClearFiltersClicked();
	void OnFiltersChanged(const struct FStoreCharactersFiltersData& FiltersData);
	void OnSearchBarTextChanged(const class FString& EnteredText);
	void OnSortingChanged(const ESortingOption SortingType, const ESortingOrder SortingOrder);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCharactersListSubPresenter">();
	}
	static class ULobbyCharactersListSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCharactersListSubPresenter>();
	}
};
static_assert(alignof(ULobbyCharactersListSubPresenter) == 0x000008, "Wrong alignment on ULobbyCharactersListSubPresenter");
static_assert(sizeof(ULobbyCharactersListSubPresenter) == 0x0000D0, "Wrong size on ULobbyCharactersListSubPresenter");
static_assert(offsetof(ULobbyCharactersListSubPresenter, _characterSelectionManager) == 0x000088, "Member 'ULobbyCharactersListSubPresenter::_characterSelectionManager' has a wrong offset!");

// Class DBDUIPresenters.LobbyCharactersSubPresenter
// 0x0080 (0x00F0 - 0x0070)
class ULobbyCharactersSubPresenter final : public ULobbySubPresenter
{
public:
	class ULobbyCharactersListSubPresenter*       _charactersListSubPresenter;                       // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULobbyCharactersCustomizationsSubPresenter* _charactersCustomizationsSubPresenter;             // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULobbyCharactersBioSubPresenter*        _charactersBioSubPresenter;                        // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULobbyCharactersSubTabSubPresenter*     _activeSubPresenter;                               // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULobbyCharactersSubTabSubPresenter*     _previousActiveSubPresenter;                       // 0x0090(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterSelectionManager*             _characterSelectionsManager;                       // 0x0098(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimationPreviewPreloadRequest*        _moriPreviewPreloadRequest;                        // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x48];                                      // 0x00A8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnimationPreviewComplete(class UAnimationPreviewSubsystem* AnimationPreviewSubsystem, const struct FAnimationPreviewRequest& Request, bool CompletedSuccessfully);
	void OnCustomizationEquipAllClicked();
	void OnCustomizationSelectAllClicked();
	void OnDisplayStandRotated(float Distance);
	void OnItemAvailabilityBannerClicked();
	void OnItemEquipClicked();
	void OnItemUnlockClicked(ECurrencyType CurrencyType);
	void OnNotEnoughCurrencyModalButtonClicked(const ECurrencyType CurrencyType);
	void OnPlayMoriClicked();
	void OnPlaySecondMoriClicked();
	void OnSubTabSelected(ELobbyCharactersMenuState SelectedTabId);
	void OnZoomCharmClicked();
	void PlayMoriAnimation(const EMoriPreviewVariant MoriPreviewVariant);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyCharactersSubPresenter">();
	}
	static class ULobbyCharactersSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyCharactersSubPresenter>();
	}
};
static_assert(alignof(ULobbyCharactersSubPresenter) == 0x000008, "Wrong alignment on ULobbyCharactersSubPresenter");
static_assert(sizeof(ULobbyCharactersSubPresenter) == 0x0000F0, "Wrong size on ULobbyCharactersSubPresenter");
static_assert(offsetof(ULobbyCharactersSubPresenter, _charactersListSubPresenter) == 0x000070, "Member 'ULobbyCharactersSubPresenter::_charactersListSubPresenter' has a wrong offset!");
static_assert(offsetof(ULobbyCharactersSubPresenter, _charactersCustomizationsSubPresenter) == 0x000078, "Member 'ULobbyCharactersSubPresenter::_charactersCustomizationsSubPresenter' has a wrong offset!");
static_assert(offsetof(ULobbyCharactersSubPresenter, _charactersBioSubPresenter) == 0x000080, "Member 'ULobbyCharactersSubPresenter::_charactersBioSubPresenter' has a wrong offset!");
static_assert(offsetof(ULobbyCharactersSubPresenter, _activeSubPresenter) == 0x000088, "Member 'ULobbyCharactersSubPresenter::_activeSubPresenter' has a wrong offset!");
static_assert(offsetof(ULobbyCharactersSubPresenter, _previousActiveSubPresenter) == 0x000090, "Member 'ULobbyCharactersSubPresenter::_previousActiveSubPresenter' has a wrong offset!");
static_assert(offsetof(ULobbyCharactersSubPresenter, _characterSelectionsManager) == 0x000098, "Member 'ULobbyCharactersSubPresenter::_characterSelectionsManager' has a wrong offset!");
static_assert(offsetof(ULobbyCharactersSubPresenter, _moriPreviewPreloadRequest) == 0x0000A0, "Member 'ULobbyCharactersSubPresenter::_moriPreviewPreloadRequest' has a wrong offset!");

// Class DBDUIPresenters.LobbyPlayerListSubPresenter
// 0x00F0 (0x0160 - 0x0070)
class ULobbyPlayerListSubPresenter final : public ULobbySubPresenter
{
public:
	TSoftClassPtr<class UClass>                   PlayerListWidgetClass;                             // 0x0070(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0xB8];                                      // 0x00A8(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInvitePlayer();
	void OnPlayerSocialOptionClicked(const struct FPlayerSocialOptionViewData& PlayerSocialOptionData);
	void OnPlayerStatusClicked(const class FString& PlayerId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyPlayerListSubPresenter">();
	}
	static class ULobbyPlayerListSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyPlayerListSubPresenter>();
	}
};
static_assert(alignof(ULobbyPlayerListSubPresenter) == 0x000008, "Wrong alignment on ULobbyPlayerListSubPresenter");
static_assert(sizeof(ULobbyPlayerListSubPresenter) == 0x000160, "Wrong size on ULobbyPlayerListSubPresenter");
static_assert(offsetof(ULobbyPlayerListSubPresenter, PlayerListWidgetClass) == 0x000070, "Member 'ULobbyPlayerListSubPresenter::PlayerListWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.LobbyPresenter
// 0x0050 (0x0138 - 0x00E8)
class ULobbyPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                LobbyWidgetClass;                                  // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULobbySubPresenter*                     _activeSubPresenter;                               // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULobbyCharactersSubPresenter*           _charactersSubPresenter;                           // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULobbyPlayerListSubPresenter*           _playerListSubPresenter;                           // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x30];                                     // 0x0108(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBack();
	void OnDailyRitualsClicked();
	void OnFinalCountdownBeforeTrialStarted();
	void OnFooterStateChanged();
	void OnFriendsClicked();
	void OnLobbyFinalCountdownTimeChanged();
	void OnMatchManagementClicked();
	void OnSettingsClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LobbyPresenter">();
	}
	static class ULobbyPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULobbyPresenter>();
	}
};
static_assert(alignof(ULobbyPresenter) == 0x000008, "Wrong alignment on ULobbyPresenter");
static_assert(sizeof(ULobbyPresenter) == 0x000138, "Wrong size on ULobbyPresenter");
static_assert(offsetof(ULobbyPresenter, LobbyWidgetClass) == 0x0000E8, "Member 'ULobbyPresenter::LobbyWidgetClass' has a wrong offset!");
static_assert(offsetof(ULobbyPresenter, _activeSubPresenter) == 0x0000F0, "Member 'ULobbyPresenter::_activeSubPresenter' has a wrong offset!");
static_assert(offsetof(ULobbyPresenter, _charactersSubPresenter) == 0x0000F8, "Member 'ULobbyPresenter::_charactersSubPresenter' has a wrong offset!");
static_assert(offsetof(ULobbyPresenter, _playerListSubPresenter) == 0x000100, "Member 'ULobbyPresenter::_playerListSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.MainMenuPresenter
// 0x04A8 (0x0590 - 0x00E8)
class UMainMenuPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                MainMenuWidgetClass;                               // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x4A0];                                     // 0x00F0(0x04A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnArchivesButtonClicked();
	void OnChallengesButtonClicked();
	void OnChangeAccountClicked();
	void OnCreatePartyCompleted(bool Success, const int32 IdToTransitionTo);
	void OnCreditsButtonClicked();
	void OnDailyRitualsButtonClicked();
	void OnEventButtonClicked();
	void OnExitButtonClicked();
	void OnFriendsButtonClicked();
	void OnLTESubMenuOpeningChanged(EMenuOpened MenuOpened);
	void OnMainMenuFadeCompleted(EDBDCameraViewType View);
	void OnMarketingInvitationButtonClicked();
	void OnNewsButtonClicked();
	void OnNewsContentReceived(bool Success, const TArray<struct FNewsContentDetails>& ReceivedNewsData, const int32 NewsHighestWeight);
	void OnPlayCustomButtonClicked(EGameType GameType);
	void OnPlayKillerButtonClicked(EGameType GameType);
	void OnPlayLimitedTimeEventKillerButtonClicked(EGameType GameType, const class FName& EventID);
	void OnPlayLimitedTimeEventSurvivorButtonClicked(EGameType GameType, const class FName& EventID);
	void OnPlaySurvivorButtonClicked(EGameType GameType);
	void OnSettingsButtonClicked();
	void OnStoreButtonClicked();
	void OnTutorialButtonClicked();

	void RequestDailyRitualsContext() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MainMenuPresenter">();
	}
	static class UMainMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMainMenuPresenter>();
	}
};
static_assert(alignof(UMainMenuPresenter) == 0x000008, "Wrong alignment on UMainMenuPresenter");
static_assert(sizeof(UMainMenuPresenter) == 0x000590, "Wrong size on UMainMenuPresenter");
static_assert(offsetof(UMainMenuPresenter, MainMenuWidgetClass) == 0x0000E8, "Member 'UMainMenuPresenter::MainMenuWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.MarketingInvitationPopupPresenter
// 0x0010 (0x01D0 - 0x01C0)
class UMarketingInvitationPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInstructionButtonClicked();
	void OnOptOutToggleButtonClicked(const bool IsOptOutToggleActive);
	void OnWatchVideoClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarketingInvitationPopupPresenter">();
	}
	static class UMarketingInvitationPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarketingInvitationPopupPresenter>();
	}
};
static_assert(alignof(UMarketingInvitationPopupPresenter) == 0x000008, "Wrong alignment on UMarketingInvitationPopupPresenter");
static_assert(sizeof(UMarketingInvitationPopupPresenter) == 0x0001D0, "Wrong size on UMarketingInvitationPopupPresenter");

// Class DBDUIPresenters.MatchmakingFlowPresenter
// 0x0018 (0x0100 - 0x00E8)
class UMatchmakingFlowPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                MatchmakingWidgetClass;                            // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchmakingFlowPresenter">();
	}
	static class UMatchmakingFlowPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchmakingFlowPresenter>();
	}
};
static_assert(alignof(UMatchmakingFlowPresenter) == 0x000008, "Wrong alignment on UMatchmakingFlowPresenter");
static_assert(sizeof(UMatchmakingFlowPresenter) == 0x000100, "Wrong size on UMatchmakingFlowPresenter");
static_assert(offsetof(UMatchmakingFlowPresenter, MatchmakingWidgetClass) == 0x0000E8, "Member 'UMatchmakingFlowPresenter::MatchmakingWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.MatchmakingMonitor
// 0x0068 (0x0098 - 0x0030)
class UMatchmakingMonitor final : public UObject
{
public:
	uint8                                         Pad_30[0x68];                                      // 0x0030(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchmakingMonitor">();
	}
	static class UMatchmakingMonitor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchmakingMonitor>();
	}
};
static_assert(alignof(UMatchmakingMonitor) == 0x000008, "Wrong alignment on UMatchmakingMonitor");
static_assert(sizeof(UMatchmakingMonitor) == 0x000098, "Wrong size on UMatchmakingMonitor");

// Class DBDUIPresenters.NewActiveTomePopupPresenter
// 0x0020 (0x01E0 - 0x01C0)
class UNewActiveTomePopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x20];                                     // 0x01C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCurrentTomeButtonClicked();
	void OnRiftButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NewActiveTomePopupPresenter">();
	}
	static class UNewActiveTomePopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNewActiveTomePopupPresenter>();
	}
};
static_assert(alignof(UNewActiveTomePopupPresenter) == 0x000008, "Wrong alignment on UNewActiveTomePopupPresenter");
static_assert(sizeof(UNewActiveTomePopupPresenter) == 0x0001E0, "Wrong size on UNewActiveTomePopupPresenter");

// Class DBDUIPresenters.NewsPresenter
// 0x0018 (0x0100 - 0x00E8)
class UNewsPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                NewsWidgetClass;                                   // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackButtonClicked();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NewsPresenter">();
	}
	static class UNewsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNewsPresenter>();
	}
};
static_assert(alignof(UNewsPresenter) == 0x000008, "Wrong alignment on UNewsPresenter");
static_assert(sizeof(UNewsPresenter) == 0x000100, "Wrong size on UNewsPresenter");
static_assert(offsetof(UNewsPresenter, NewsWidgetClass) == 0x0000E8, "Member 'UNewsPresenter::NewsWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.OnboardingMenuPresenter
// 0x0038 (0x0120 - 0x00E8)
class UOnboardingMenuPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                OnboardingMenuWidgetClass;                         // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UOnboardingTutorialSubPresenter*        _onboardingTutorialSubPresenter;                   // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGameManualSubPresenter*                _gameManualSubPresenter;                           // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x18];                                     // 0x0108(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackAction();
	void OnChangeAccountAction();
	void OnFirstOnboardingStepsDone(bool IsFirstStepsDone);
	void OnMenuTabSelected(EOnboardingMenuState MenuState);
	void OnMenuTabSelectedAgain(EOnboardingMenuState MenuState);
	void OnQuitGameAction();
	void OnSettingsAction();
	void OnSetUIEnabled(bool Enabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnboardingMenuPresenter">();
	}
	static class UOnboardingMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnboardingMenuPresenter>();
	}
};
static_assert(alignof(UOnboardingMenuPresenter) == 0x000008, "Wrong alignment on UOnboardingMenuPresenter");
static_assert(sizeof(UOnboardingMenuPresenter) == 0x000120, "Wrong size on UOnboardingMenuPresenter");
static_assert(offsetof(UOnboardingMenuPresenter, OnboardingMenuWidgetClass) == 0x0000E8, "Member 'UOnboardingMenuPresenter::OnboardingMenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UOnboardingMenuPresenter, _onboardingTutorialSubPresenter) == 0x0000F0, "Member 'UOnboardingMenuPresenter::_onboardingTutorialSubPresenter' has a wrong offset!");
static_assert(offsetof(UOnboardingMenuPresenter, _gameManualSubPresenter) == 0x0000F8, "Member 'UOnboardingMenuPresenter::_gameManualSubPresenter' has a wrong offset!");
static_assert(offsetof(UOnboardingMenuPresenter, _activeSubPresenter) == 0x000100, "Member 'UOnboardingMenuPresenter::_activeSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.OnboardingTutorialSubPresenter
// 0x0060 (0x00D0 - 0x0070)
class UOnboardingTutorialSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IOnboardingTutorialViewInterface> _onboardingTutorialWidget;                         // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x50];                                      // 0x0080(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSelectTutorial(const class FString& StepId, const class FString& TutorialId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnboardingTutorialSubPresenter">();
	}
	static class UOnboardingTutorialSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnboardingTutorialSubPresenter>();
	}
};
static_assert(alignof(UOnboardingTutorialSubPresenter) == 0x000008, "Wrong alignment on UOnboardingTutorialSubPresenter");
static_assert(sizeof(UOnboardingTutorialSubPresenter) == 0x0000D0, "Wrong size on UOnboardingTutorialSubPresenter");
static_assert(offsetof(UOnboardingTutorialSubPresenter, _onboardingTutorialWidget) == 0x000070, "Member 'UOnboardingTutorialSubPresenter::_onboardingTutorialWidget' has a wrong offset!");

// Class DBDUIPresenters.PawnObserver
// 0x0040 (0x0070 - 0x0030)
class UPawnObserver final : public UUIComponent
{
public:
	uint8                                         Pad_30[0x40];                                      // 0x0030(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLocallyObservedChanged();
	void OnPawnControllerSet(class APawn* Pawn, class AController* OldController, class AController* NewController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PawnObserver">();
	}
	static class UPawnObserver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPawnObserver>();
	}
};
static_assert(alignof(UPawnObserver) == 0x000008, "Wrong alignment on UPawnObserver");
static_assert(sizeof(UPawnObserver) == 0x000070, "Wrong size on UPawnObserver");

// Class DBDUIPresenters.PingStatusPresenter
// 0x0038 (0x0160 - 0x0128)
class UPingStatusPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                PingStatusWidgetClass;                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x30];                                     // 0x0130(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PingStatusPresenter">();
	}
	static class UPingStatusPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPingStatusPresenter>();
	}
};
static_assert(alignof(UPingStatusPresenter) == 0x000008, "Wrong alignment on UPingStatusPresenter");
static_assert(sizeof(UPingStatusPresenter) == 0x000160, "Wrong size on UPingStatusPresenter");
static_assert(offsetof(UPingStatusPresenter, PingStatusWidgetClass) == 0x000128, "Member 'UPingStatusPresenter::PingStatusWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.PlayerProfilePresenter
// 0x0050 (0x0138 - 0x00E8)
class UPlayerProfilePresenter final : public UPresenter
{
public:
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                CorePlayerProfileWidgetClass;                      // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x40];                                      // 0x00F8(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FocusPlayerProfile(const uint8 Filter, const uint8 CurrencyFilter);
	void HidePlayerProfile();
	void OnPlayerProfileClicked();
	void OnPlayerProfileCurrencyClicked(ECurrencyType CurrencyType);
	void OnResetPlayerProfileCurrencyFilter();
	void OnResetPlayerProfileFilter();
	void OnSpecialEventStatusChanged(class FName SpecialEventId, ESpecialEventStatus SpecialEventStatus);
	void OnUpdatePlayerProfileCurrencyFilter(const uint8 CurrencyFilter);
	void OnUpdatePlayerProfileFilter(const uint8 Filter);
	void OnWalletUpdated(const TArray<struct FShopWalletUpdate>& WalletUpdates);
	void RefreshPlayerCard();
	void RefreshWallet();
	void SetSpecialEventCurrency(const ECurrencyType SpecialEventCurrencyType);
	void UnfocusPlayerProfile();

	class FText GetPlayerName() const;
	void OnUpdatePlayerCardAnimationMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerProfilePresenter">();
	}
	static class UPlayerProfilePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerProfilePresenter>();
	}
};
static_assert(alignof(UPlayerProfilePresenter) == 0x000008, "Wrong alignment on UPlayerProfilePresenter");
static_assert(sizeof(UPlayerProfilePresenter) == 0x000138, "Wrong size on UPlayerProfilePresenter");
static_assert(offsetof(UPlayerProfilePresenter, CorePlayerProfileWidgetClass) == 0x0000F0, "Member 'UPlayerProfilePresenter::CorePlayerProfileWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.PresenterGroup
// 0x0028 (0x0058 - 0x0030)
class UPresenterGroup : public UUIComponent
{
public:
	EPresenterPhase                               WidgetInstantiationPhase;                          // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUIComponent*>                   _components;                                       // 0x0038(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UPresenter*>                     _presenters;                                       // 0x0048(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresenterGroup">();
	}
	static class UPresenterGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenterGroup>();
	}
};
static_assert(alignof(UPresenterGroup) == 0x000008, "Wrong alignment on UPresenterGroup");
static_assert(sizeof(UPresenterGroup) == 0x000058, "Wrong size on UPresenterGroup");
static_assert(offsetof(UPresenterGroup, WidgetInstantiationPhase) == 0x000030, "Member 'UPresenterGroup::WidgetInstantiationPhase' has a wrong offset!");
static_assert(offsetof(UPresenterGroup, _components) == 0x000038, "Member 'UPresenterGroup::_components' has a wrong offset!");
static_assert(offsetof(UPresenterGroup, _presenters) == 0x000048, "Member 'UPresenterGroup::_presenters' has a wrong offset!");

// Class DBDUIPresenters.PresenterManager
// 0x0040 (0x0078 - 0x0038)
class UPresenterManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPresenterGroup*>                _persistentPresenterGroups;                        // 0x0040(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class UPresenterGroup*>                _transientPresenterGroups;                         // 0x0050(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x18];                                      // 0x0060(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoadingTransition(const ELoadingTransitionType TransitionType);
	void OnPlayerStateChanged(const class APlayerState* PlayerState);
	void OnViewportCreated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresenterManager">();
	}
	static class UPresenterManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenterManager>();
	}
};
static_assert(alignof(UPresenterManager) == 0x000008, "Wrong alignment on UPresenterManager");
static_assert(sizeof(UPresenterManager) == 0x000078, "Wrong size on UPresenterManager");
static_assert(offsetof(UPresenterManager, _persistentPresenterGroups) == 0x000040, "Member 'UPresenterManager::_persistentPresenterGroups' has a wrong offset!");
static_assert(offsetof(UPresenterManager, _transientPresenterGroups) == 0x000050, "Member 'UPresenterManager::_transientPresenterGroups' has a wrong offset!");

// Class DBDUIPresenters.PresenterRequirementFunction
// 0x0020 (0x0050 - 0x0030)
class UPresenterRequirementFunction final : public UObject
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresenterRequirementFunction">();
	}
	static class UPresenterRequirementFunction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresenterRequirementFunction>();
	}
};
static_assert(alignof(UPresenterRequirementFunction) == 0x000008, "Wrong alignment on UPresenterRequirementFunction");
static_assert(sizeof(UPresenterRequirementFunction) == 0x000050, "Wrong size on UPresenterRequirementFunction");

// Class DBDUIPresenters.ProcessingPopupPresenter
// 0x0010 (0x0178 - 0x0168)
class UProcessingPopupPresenter final : public UBasePopupPresenter
{
public:
	uint8                                         Pad_168[0x10];                                     // 0x0168(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProcessingPopupPresenter">();
	}
	static class UProcessingPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProcessingPopupPresenter>();
	}
};
static_assert(alignof(UProcessingPopupPresenter) == 0x000008, "Wrong alignment on UProcessingPopupPresenter");
static_assert(sizeof(UProcessingPopupPresenter) == 0x000178, "Wrong size on UProcessingPopupPresenter");

// Class DBDUIPresenters.ProfileMenuCustomizationSubPresenter
// 0x0060 (0x00D0 - 0x0070)
class UProfileMenuCustomizationSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IProfileMenuCustomizationViewInterface> _profileMenuCustomizationWidget;                   // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStoreCustomizationItemViewData*> _itemsData;                                        // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UStoreCustomizationItemViewData*> _displayedItemsData;                               // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x30];                                      // 0x00A0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCustomizationSortingChanged(const ESortingOption ItemSorting, const ESortingOrder SortingOrder);
	void OnEquipButtonClicked();
	void OnRewardGridItemClicked(const int32 SelectedIndex);
	void OnSearchBarTextChanged(const class FString& EnteredText);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileMenuCustomizationSubPresenter">();
	}
	static class UProfileMenuCustomizationSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileMenuCustomizationSubPresenter>();
	}
};
static_assert(alignof(UProfileMenuCustomizationSubPresenter) == 0x000008, "Wrong alignment on UProfileMenuCustomizationSubPresenter");
static_assert(sizeof(UProfileMenuCustomizationSubPresenter) == 0x0000D0, "Wrong size on UProfileMenuCustomizationSubPresenter");
static_assert(offsetof(UProfileMenuCustomizationSubPresenter, _profileMenuCustomizationWidget) == 0x000070, "Member 'UProfileMenuCustomizationSubPresenter::_profileMenuCustomizationWidget' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationSubPresenter, _itemsData) == 0x000080, "Member 'UProfileMenuCustomizationSubPresenter::_itemsData' has a wrong offset!");
static_assert(offsetof(UProfileMenuCustomizationSubPresenter, _displayedItemsData) == 0x000090, "Member 'UProfileMenuCustomizationSubPresenter::_displayedItemsData' has a wrong offset!");

// Class DBDUIPresenters.ProfileMenuPresenter
// 0x0040 (0x0128 - 0x00E8)
class UProfileMenuPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                ProfileMenuWidgetClass;                            // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProfileMenuStatsSubPresenter*          _statsSubPresenter;                                // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UProfileMenuCustomizationSubPresenter*  _badgeSubPresenter;                                // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UProfileMenuCustomizationSubPresenter*  _bannerSubPresenter;                               // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0108(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_110[0x18];                                     // 0x0110(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackButtonClicked();
	void OnSettingsButtonClicked();
	void SetMenuState(EProfileMenuState MenuState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileMenuPresenter">();
	}
	static class UProfileMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileMenuPresenter>();
	}
};
static_assert(alignof(UProfileMenuPresenter) == 0x000008, "Wrong alignment on UProfileMenuPresenter");
static_assert(sizeof(UProfileMenuPresenter) == 0x000128, "Wrong size on UProfileMenuPresenter");
static_assert(offsetof(UProfileMenuPresenter, ProfileMenuWidgetClass) == 0x0000E8, "Member 'UProfileMenuPresenter::ProfileMenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UProfileMenuPresenter, _statsSubPresenter) == 0x0000F0, "Member 'UProfileMenuPresenter::_statsSubPresenter' has a wrong offset!");
static_assert(offsetof(UProfileMenuPresenter, _badgeSubPresenter) == 0x0000F8, "Member 'UProfileMenuPresenter::_badgeSubPresenter' has a wrong offset!");
static_assert(offsetof(UProfileMenuPresenter, _bannerSubPresenter) == 0x000100, "Member 'UProfileMenuPresenter::_bannerSubPresenter' has a wrong offset!");
static_assert(offsetof(UProfileMenuPresenter, _activeSubPresenter) == 0x000108, "Member 'UProfileMenuPresenter::_activeSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.ProfileMenuStatsSubPresenter
// 0x0010 (0x0080 - 0x0070)
class UProfileMenuStatsSubPresenter final : public USubPresenter
{
public:
	TScriptInterface<class IProfileMenuStatsViewInterface> _profileMenuStatsWidget;                           // 0x0070(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileMenuStatsSubPresenter">();
	}
	static class UProfileMenuStatsSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileMenuStatsSubPresenter>();
	}
};
static_assert(alignof(UProfileMenuStatsSubPresenter) == 0x000008, "Wrong alignment on UProfileMenuStatsSubPresenter");
static_assert(sizeof(UProfileMenuStatsSubPresenter) == 0x000080, "Wrong size on UProfileMenuStatsSubPresenter");
static_assert(offsetof(UProfileMenuStatsSubPresenter, _profileMenuStatsWidget) == 0x000070, "Member 'UProfileMenuStatsSubPresenter::_profileMenuStatsWidget' has a wrong offset!");

// Class DBDUIPresenters.ProgressionSystemInfoPopupPresenter
// 0x0010 (0x01D0 - 0x01C0)
class UProgressionSystemInfoPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProgressionSystemInfoPopupPresenter">();
	}
	static class UProgressionSystemInfoPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProgressionSystemInfoPopupPresenter>();
	}
};
static_assert(alignof(UProgressionSystemInfoPopupPresenter) == 0x000008, "Wrong alignment on UProgressionSystemInfoPopupPresenter");
static_assert(sizeof(UProgressionSystemInfoPopupPresenter) == 0x0001D0, "Wrong size on UProgressionSystemInfoPopupPresenter");

// Class DBDUIPresenters.ReportFeedbackPopupPresenter
// 0x0010 (0x01D0 - 0x01C0)
class UReportFeedbackPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReportFeedbackPopupPresenter">();
	}
	static class UReportFeedbackPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReportFeedbackPopupPresenter>();
	}
};
static_assert(alignof(UReportFeedbackPopupPresenter) == 0x000008, "Wrong alignment on UReportFeedbackPopupPresenter");
static_assert(sizeof(UReportFeedbackPopupPresenter) == 0x0001D0, "Wrong size on UReportFeedbackPopupPresenter");

// Class DBDUIPresenters.RewardPopupPresenter
// 0x0000 (0x01C0 - 0x01C0)
class URewardPopupPresenter final : public UGenericPopupPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RewardPopupPresenter">();
	}
	static class URewardPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<URewardPopupPresenter>();
	}
};
static_assert(alignof(URewardPopupPresenter) == 0x000008, "Wrong alignment on URewardPopupPresenter");
static_assert(sizeof(URewardPopupPresenter) == 0x0001C0, "Wrong size on URewardPopupPresenter");

// Class DBDUIPresenters.RootContainer
// 0x0078 (0x00A8 - 0x0030)
class URootContainer final : public UUIComponent
{
public:
	EGameLayer                                    GameLayer;                                         // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         UnfocusedOpacity;                                  // 0x0034(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class URootWidget>                _rootWidgetClass;                                  // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TSubclassOf<class UPresenterParentWidget>, class UPresenterParentWidget*> _presenterParentWidgets;                           // 0x0050(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	class URootWidget*                            _rootWidget;                                       // 0x00A0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootContainer">();
	}
	static class URootContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootContainer>();
	}
};
static_assert(alignof(URootContainer) == 0x000008, "Wrong alignment on URootContainer");
static_assert(sizeof(URootContainer) == 0x0000A8, "Wrong size on URootContainer");
static_assert(offsetof(URootContainer, GameLayer) == 0x000030, "Member 'URootContainer::GameLayer' has a wrong offset!");
static_assert(offsetof(URootContainer, UnfocusedOpacity) == 0x000034, "Member 'URootContainer::UnfocusedOpacity' has a wrong offset!");
static_assert(offsetof(URootContainer, _rootWidgetClass) == 0x000038, "Member 'URootContainer::_rootWidgetClass' has a wrong offset!");
static_assert(offsetof(URootContainer, _presenterParentWidgets) == 0x000050, "Member 'URootContainer::_presenterParentWidgets' has a wrong offset!");
static_assert(offsetof(URootContainer, _rootWidget) == 0x0000A0, "Member 'URootContainer::_rootWidget' has a wrong offset!");

// Class DBDUIPresenters.RootWidget
// 0x0010 (0x02B8 - 0x02A8)
class URootWidget : public UUserWidget
{
public:
	class UCanvasPanel*                           _contentCanvas;                                    // 0x02A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DoesWidgetOverrideRootCanvasPanel;                 // 0x02B0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B1[0x7];                                      // 0x02B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UCanvasPanel* GetRootCanvasPanel();
	void OnFocused();
	void OnUnfocused(const float Opacity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootWidget">();
	}
	static class URootWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootWidget>();
	}
};
static_assert(alignof(URootWidget) == 0x000008, "Wrong alignment on URootWidget");
static_assert(sizeof(URootWidget) == 0x0002B8, "Wrong size on URootWidget");
static_assert(offsetof(URootWidget, _contentCanvas) == 0x0002A8, "Member 'URootWidget::_contentCanvas' has a wrong offset!");
static_assert(offsetof(URootWidget, DoesWidgetOverrideRootCanvasPanel) == 0x0002B0, "Member 'URootWidget::DoesWidgetOverrideRootCanvasPanel' has a wrong offset!");

// Class DBDUIPresenters.ScaleformTooltipPresenter
// 0x0018 (0x0100 - 0x00E8)
class UScaleformTooltipPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                ScaleformTooltipWidgetClass;                       // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScaleformTooltipPresenter">();
	}
	static class UScaleformTooltipPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScaleformTooltipPresenter>();
	}
};
static_assert(alignof(UScaleformTooltipPresenter) == 0x000008, "Wrong alignment on UScaleformTooltipPresenter");
static_assert(sizeof(UScaleformTooltipPresenter) == 0x000100, "Wrong size on UScaleformTooltipPresenter");
static_assert(offsetof(UScaleformTooltipPresenter, ScaleformTooltipWidgetClass) == 0x0000E8, "Member 'UScaleformTooltipPresenter::ScaleformTooltipWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.SeasonEndRankRewardsPopupPresenter
// 0x0010 (0x01D0 - 0x01C0)
class USeasonEndRankRewardsPopupPresenter final : public UGenericPopupPresenter
{
public:
	uint8                                         Pad_1C0[0x10];                                     // 0x01C0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SeasonEndRankRewardsPopupPresenter">();
	}
	static class USeasonEndRankRewardsPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USeasonEndRankRewardsPopupPresenter>();
	}
};
static_assert(alignof(USeasonEndRankRewardsPopupPresenter) == 0x000008, "Wrong alignment on USeasonEndRankRewardsPopupPresenter");
static_assert(sizeof(USeasonEndRankRewardsPopupPresenter) == 0x0001D0, "Wrong size on USeasonEndRankRewardsPopupPresenter");

// Class DBDUIPresenters.SettingsMatchDetailsSubPresenter
// 0x0018 (0x0088 - 0x0070)
class USettingsMatchDetailsSubPresenter final : public USubPresenter
{
public:
	uint8                                         Pad_70[0x18];                                      // 0x0070(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerInfoClicked(const class FString& PlayerId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingsMatchDetailsSubPresenter">();
	}
	static class USettingsMatchDetailsSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingsMatchDetailsSubPresenter>();
	}
};
static_assert(alignof(USettingsMatchDetailsSubPresenter) == 0x000008, "Wrong alignment on USettingsMatchDetailsSubPresenter");
static_assert(sizeof(USettingsMatchDetailsSubPresenter) == 0x000088, "Wrong size on USettingsMatchDetailsSubPresenter");

// Class DBDUIPresenters.SettingsPresenter
// 0x0058 (0x0140 - 0x00E8)
class USettingsPresenter final : public UPresenter
{
public:
	TSoftClassPtr<class UClass>                   SettingsWidgetClass;                               // 0x00E8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USettingsMatchDetailsSubPresenter*      _settingsMatchDetailsSubPresenter;                 // 0x0120(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USubPresenter*                          _activeSubPresenter;                               // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTabEntered(const EOverlayTabs Category);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettingsPresenter">();
	}
	static class USettingsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettingsPresenter>();
	}
};
static_assert(alignof(USettingsPresenter) == 0x000008, "Wrong alignment on USettingsPresenter");
static_assert(sizeof(USettingsPresenter) == 0x000140, "Wrong size on USettingsPresenter");
static_assert(offsetof(USettingsPresenter, SettingsWidgetClass) == 0x0000E8, "Member 'USettingsPresenter::SettingsWidgetClass' has a wrong offset!");
static_assert(offsetof(USettingsPresenter, _settingsMatchDetailsSubPresenter) == 0x000120, "Member 'USettingsPresenter::_settingsMatchDetailsSubPresenter' has a wrong offset!");
static_assert(offsetof(USettingsPresenter, _activeSubPresenter) == 0x000128, "Member 'USettingsPresenter::_activeSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.ShrineOfSecretsPresenter
// 0x0030 (0x0118 - 0x00E8)
class UShrineOfSecretsPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                ShrineOfSecretsWidgetClass;                        // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x28];                                      // 0x00F0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackButtonClicked();
	void OnItemBuyCompleted(const bool Success);
	void OnPurchaseButtonClicked(const struct FShrineOfSecretsItemViewData& ShrineOfSecretsItemViewData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShrineOfSecretsPresenter">();
	}
	static class UShrineOfSecretsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShrineOfSecretsPresenter>();
	}
};
static_assert(alignof(UShrineOfSecretsPresenter) == 0x000008, "Wrong alignment on UShrineOfSecretsPresenter");
static_assert(sizeof(UShrineOfSecretsPresenter) == 0x000118, "Wrong size on UShrineOfSecretsPresenter");
static_assert(offsetof(UShrineOfSecretsPresenter, ShrineOfSecretsWidgetClass) == 0x0000E8, "Member 'UShrineOfSecretsPresenter::ShrineOfSecretsWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.SkillCheckPresenter
// 0x0030 (0x0158 - 0x0128)
class USkillCheckPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                SkillCheckWidgetClass;                             // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x28];                                     // 0x0130(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkillCheckPresenter">();
	}
	static class USkillCheckPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkillCheckPresenter>();
	}
};
static_assert(alignof(USkillCheckPresenter) == 0x000008, "Wrong alignment on USkillCheckPresenter");
static_assert(sizeof(USkillCheckPresenter) == 0x000158, "Wrong size on USkillCheckPresenter");
static_assert(offsetof(USkillCheckPresenter, SkillCheckWidgetClass) == 0x000128, "Member 'USkillCheckPresenter::SkillCheckWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.StoreSubPresenter
// 0x00A8 (0x0118 - 0x0070)
class UStoreSubPresenter : public USubPresenter
{
public:
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UStoreMenuFlowEventsGenerator*          _storeMenuFlowEventGenerator;                      // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UShopmanager*                           _shopManager;                                      // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A8[0x70];                                      // 0x00A8(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnSubTabSelected(int32 SubTabId);
	void OnWalletUpdated(const TArray<struct FShopWalletUpdate>& WalletUpdates);
	void SetItemSeen(const class FString& ItemId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreSubPresenter">();
	}
	static class UStoreSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreSubPresenter>();
	}
};
static_assert(alignof(UStoreSubPresenter) == 0x000008, "Wrong alignment on UStoreSubPresenter");
static_assert(sizeof(UStoreSubPresenter) == 0x000118, "Wrong size on UStoreSubPresenter");
static_assert(offsetof(UStoreSubPresenter, _storeMenuFlowEventGenerator) == 0x000080, "Member 'UStoreSubPresenter::_storeMenuFlowEventGenerator' has a wrong offset!");
static_assert(offsetof(UStoreSubPresenter, _shopManager) == 0x0000A0, "Member 'UStoreSubPresenter::_shopManager' has a wrong offset!");

// Class DBDUIPresenters.StoreCharactersSubPresenter
// 0x0230 (0x0348 - 0x0118)
class UStoreCharactersSubPresenter final : public UStoreSubPresenter
{
public:
	TSubclassOf<class UUserWidget>                StoreCharactersWidgetClass;                        // 0x0118(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayStandName;                                  // 0x0120(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0xA4];                                     // 0x012C(0x00A4)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStoreCharacterItemViewData*>    _availableCharacters;                              // 0x01D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreCharacterItemViewData*>    _displayingCharacters;                             // 0x01E0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TMap<int32, class UStoreCharacterItemViewData*> _charactersMap;                                    // 0x01F0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	class UCustomizationSelectionManager*         _customizationSelectionManager;                    // 0x0240(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreFilterManager*                    _characterFilterManager;                           // 0x0248(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimationPreviewPreloadRequest*        _moriPreviewPreloadRequest;                        // 0x0250(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0x10];                                     // 0x0258(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UStoreCharacterItemViewData*            _characterBeingPurchased;                          // 0x0268(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_270[0xD8];                                     // 0x0270(0x00D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnimationPreviewComplete(class UAnimationPreviewSubsystem* AnimationPreviewSubsystem, const struct FAnimationPreviewRequest& Request, bool CompletedSuccessfully);
	void OnCategorySelected(const ECustomizationCategory Category);
	void OnCategorySelectedAgain(const ECustomizationCategory Category);
	void OnCharactersClearFiltersClicked();
	void OnCharacterSelected(const int32 CharacterIndex);
	void OnCharactersFiltersChanged(const struct FStoreCharactersFiltersData& CharactersFilterData);
	void OnCharactersSearchBarTextChanged(const class FString& EnteredText);
	void OnCharactersSortingChanged(const ESortingOption SortingOption, const ESortingOrder SortingOrder);
	void OnCharacterUnlockCompleted(const bool Success);
	void OnCharmSlotSelected(const int32 SlotIndex);
	void OnCustomizationEquipAllClicked();
	void OnCustomizationsClearFiltersClicked();
	void OnCustomizationSearchBarTextChanged(const class FString& EnteredText);
	void OnCustomizationSelectAllClicked();
	void OnCustomizationSelected(const class FName CustomizationId);
	void OnCustomizationSelectedAgain(const class FName CustomizationId);
	void OnCustomizationsFiltersChanged(const struct FStoreCharactersFiltersData& CustomizationsFilterData);
	void OnCustomizationsSortingChanged(const ESortingOption SortingOption, const ESortingOrder SortingOrder);
	void OnCustomizationTimerExpired();
	void OnItemAvailabilityBannerClicked();
	void OnItemEquipClicked();
	void OnItemUnlockClicked(ECurrencyType CurrencyType);
	void OnPlayMoriClicked();
	void OnPlaySecondMoriClicked();
	void OnPresetSelected(const int32 PresetId);
	void OnZoomCharmClicked();
	void PlayMoriAnimation(const EMoriPreviewVariant MoriPreviewVariant);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreCharactersSubPresenter">();
	}
	static class UStoreCharactersSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreCharactersSubPresenter>();
	}
};
static_assert(alignof(UStoreCharactersSubPresenter) == 0x000008, "Wrong alignment on UStoreCharactersSubPresenter");
static_assert(sizeof(UStoreCharactersSubPresenter) == 0x000348, "Wrong size on UStoreCharactersSubPresenter");
static_assert(offsetof(UStoreCharactersSubPresenter, StoreCharactersWidgetClass) == 0x000118, "Member 'UStoreCharactersSubPresenter::StoreCharactersWidgetClass' has a wrong offset!");
static_assert(offsetof(UStoreCharactersSubPresenter, DisplayStandName) == 0x000120, "Member 'UStoreCharactersSubPresenter::DisplayStandName' has a wrong offset!");
static_assert(offsetof(UStoreCharactersSubPresenter, _availableCharacters) == 0x0001D0, "Member 'UStoreCharactersSubPresenter::_availableCharacters' has a wrong offset!");
static_assert(offsetof(UStoreCharactersSubPresenter, _displayingCharacters) == 0x0001E0, "Member 'UStoreCharactersSubPresenter::_displayingCharacters' has a wrong offset!");
static_assert(offsetof(UStoreCharactersSubPresenter, _charactersMap) == 0x0001F0, "Member 'UStoreCharactersSubPresenter::_charactersMap' has a wrong offset!");
static_assert(offsetof(UStoreCharactersSubPresenter, _customizationSelectionManager) == 0x000240, "Member 'UStoreCharactersSubPresenter::_customizationSelectionManager' has a wrong offset!");
static_assert(offsetof(UStoreCharactersSubPresenter, _characterFilterManager) == 0x000248, "Member 'UStoreCharactersSubPresenter::_characterFilterManager' has a wrong offset!");
static_assert(offsetof(UStoreCharactersSubPresenter, _moriPreviewPreloadRequest) == 0x000250, "Member 'UStoreCharactersSubPresenter::_moriPreviewPreloadRequest' has a wrong offset!");
static_assert(offsetof(UStoreCharactersSubPresenter, _characterBeingPurchased) == 0x000268, "Member 'UStoreCharactersSubPresenter::_characterBeingPurchased' has a wrong offset!");

// Class DBDUIPresenters.StoreCollectionsCustomizationsSubPresenter
// 0x0150 (0x0268 - 0x0118)
class UStoreCollectionsCustomizationsSubPresenter final : public UStoreSubPresenter
{
public:
	uint8                                         Pad_118[0x58];                                     // 0x0118(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UStoreCollectionViewData*               _currentCollection;                                // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreCustomizationItemViewData*        _currentCustomization;                             // 0x0178(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FEquippedPlayerCustomization           _selectedCustomization;                            // 0x0180(0x0038)(Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreCustomizationItemViewData*> _availableCustomizations;                          // 0x01B8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreCustomizationItemViewData*> _displayingCustomizations;                         // 0x01C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FStoreCharactersFiltersData            _customizationsFilterData;                         // 0x01D8(0x0058)(Transient, NativeAccessSpecifierPrivate)
	ESortingOption                                _customizationsSortingOption;                      // 0x0230(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESortingOrder                                 _customizationsSortingOrder;                       // 0x0232(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_233[0x5];                                      // 0x0233(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimationPreviewPreloadRequest*        _moriPreviewPreloadRequest;                        // 0x0238(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_240[0x28];                                     // 0x0240(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnimationPreviewComplete(class UAnimationPreviewSubsystem* AnimationPreviewSubsystem, const struct FAnimationPreviewRequest& Request, bool CompletedSuccessfully);
	void OnAvailabilityBannerClicked();
	void OnClearFiltersClicked();
	void OnCustomizationEquipClicked();
	void OnCustomizationSelected(const class FName CustomizationId);
	void OnCustomizationUnlockClicked(ECurrencyType CurrencyType);
	void OnFiltersChanged(const struct FStoreCharactersFiltersData& StoreFiltersData);
	void OnPlayMoriClicked();
	void OnPlaySecondMoriClicked();
	void OnSearchBarTextChanged(const class FString& EnteredText);
	void OnSortingChanged(const ESortingOption SortingOption, const ESortingOrder SortingOrder);
	void PlayMoriAnimation(const EMoriPreviewVariant MoriPreviewVariant);
	void UpdateDisplayingCustomizations(bool ScrollToSelectedItem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreCollectionsCustomizationsSubPresenter">();
	}
	static class UStoreCollectionsCustomizationsSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreCollectionsCustomizationsSubPresenter>();
	}
};
static_assert(alignof(UStoreCollectionsCustomizationsSubPresenter) == 0x000008, "Wrong alignment on UStoreCollectionsCustomizationsSubPresenter");
static_assert(sizeof(UStoreCollectionsCustomizationsSubPresenter) == 0x000268, "Wrong size on UStoreCollectionsCustomizationsSubPresenter");
static_assert(offsetof(UStoreCollectionsCustomizationsSubPresenter, _currentCollection) == 0x000170, "Member 'UStoreCollectionsCustomizationsSubPresenter::_currentCollection' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsCustomizationsSubPresenter, _currentCustomization) == 0x000178, "Member 'UStoreCollectionsCustomizationsSubPresenter::_currentCustomization' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsCustomizationsSubPresenter, _selectedCustomization) == 0x000180, "Member 'UStoreCollectionsCustomizationsSubPresenter::_selectedCustomization' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsCustomizationsSubPresenter, _availableCustomizations) == 0x0001B8, "Member 'UStoreCollectionsCustomizationsSubPresenter::_availableCustomizations' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsCustomizationsSubPresenter, _displayingCustomizations) == 0x0001C8, "Member 'UStoreCollectionsCustomizationsSubPresenter::_displayingCustomizations' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsCustomizationsSubPresenter, _customizationsFilterData) == 0x0001D8, "Member 'UStoreCollectionsCustomizationsSubPresenter::_customizationsFilterData' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsCustomizationsSubPresenter, _customizationsSortingOption) == 0x000230, "Member 'UStoreCollectionsCustomizationsSubPresenter::_customizationsSortingOption' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsCustomizationsSubPresenter, _customizationsSortingOrder) == 0x000232, "Member 'UStoreCollectionsCustomizationsSubPresenter::_customizationsSortingOrder' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsCustomizationsSubPresenter, _moriPreviewPreloadRequest) == 0x000238, "Member 'UStoreCollectionsCustomizationsSubPresenter::_moriPreviewPreloadRequest' has a wrong offset!");

// Class DBDUIPresenters.StoreCollectionsListSubPresenter
// 0x0080 (0x0198 - 0x0118)
class UStoreCollectionsListSubPresenter final : public UStoreSubPresenter
{
public:
	TArray<class UStoreCollectionViewData*>       _combinedListsCollectionsViewData;                 // 0x0118(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreCollectionViewData*>       _featuredCollectionsViewData;                      // 0x0128(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreCollectionViewData*>       _allCollectionsViewData;                           // 0x0138(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x50];                                     // 0x0148(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCollectionClicked(const class UStoreCollectionViewData* Collection);
	void UpdateCollectionsBySearch(const class FString& SearchString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreCollectionsListSubPresenter">();
	}
	static class UStoreCollectionsListSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreCollectionsListSubPresenter>();
	}
};
static_assert(alignof(UStoreCollectionsListSubPresenter) == 0x000008, "Wrong alignment on UStoreCollectionsListSubPresenter");
static_assert(sizeof(UStoreCollectionsListSubPresenter) == 0x000198, "Wrong size on UStoreCollectionsListSubPresenter");
static_assert(offsetof(UStoreCollectionsListSubPresenter, _combinedListsCollectionsViewData) == 0x000118, "Member 'UStoreCollectionsListSubPresenter::_combinedListsCollectionsViewData' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsListSubPresenter, _featuredCollectionsViewData) == 0x000128, "Member 'UStoreCollectionsListSubPresenter::_featuredCollectionsViewData' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsListSubPresenter, _allCollectionsViewData) == 0x000138, "Member 'UStoreCollectionsListSubPresenter::_allCollectionsViewData' has a wrong offset!");

// Class DBDUIPresenters.StoreCollectionsSubPresenter
// 0x0028 (0x0140 - 0x0118)
class UStoreCollectionsSubPresenter final : public UStoreSubPresenter
{
public:
	class UStoreCollectionsListSubPresenter*      _collectionsListSubPresenter;                      // 0x0118(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreCollectionsCustomizationsSubPresenter* _collectionsCustomizationsSubPresenter;            // 0x0120(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreSubPresenter*                     _activeSubPresenter;                               // 0x0128(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void HandleSubPresenterError();
	void OnBackActionLabelChangeRequested(const class FText& Text);
	void OnCollectionClicked(const class UStoreCollectionViewData* Collection);
	void OnPageStateUpdated();
	void OnStartSubPresenterAsyncOperation(class USubPresenter* SubPresenter);
	void OnStopSubPresenterAsyncOperation(class USubPresenter* SubPresenter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreCollectionsSubPresenter">();
	}
	static class UStoreCollectionsSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreCollectionsSubPresenter>();
	}
};
static_assert(alignof(UStoreCollectionsSubPresenter) == 0x000008, "Wrong alignment on UStoreCollectionsSubPresenter");
static_assert(sizeof(UStoreCollectionsSubPresenter) == 0x000140, "Wrong size on UStoreCollectionsSubPresenter");
static_assert(offsetof(UStoreCollectionsSubPresenter, _collectionsListSubPresenter) == 0x000118, "Member 'UStoreCollectionsSubPresenter::_collectionsListSubPresenter' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsSubPresenter, _collectionsCustomizationsSubPresenter) == 0x000120, "Member 'UStoreCollectionsSubPresenter::_collectionsCustomizationsSubPresenter' has a wrong offset!");
static_assert(offsetof(UStoreCollectionsSubPresenter, _activeSubPresenter) == 0x000128, "Member 'UStoreCollectionsSubPresenter::_activeSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.StoreFeaturedSubPresenter
// 0x01B0 (0x02C8 - 0x0118)
class UStoreFeaturedSubPresenter final : public UStoreSubPresenter
{
public:
	uint8                                         Pad_118[0x10];                                     // 0x0118(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStoreCustomizationItemViewData*> _itemsViewData;                                    // 0x0128(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreCharacterItemViewData*>    _charactersViewData;                               // 0x0138(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UStoreChapterPackViewData*              _chapterPackViewData;                              // 0x0148(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreSpecialPackViewData*              _specialPackViewData;                              // 0x0150(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FCrossPromoCampaignViewData            _crossPromoViewData;                               // 0x0158(0x00E8)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_240[0x88];                                     // 0x0240(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBackendStoreDataReceived(bool Success);
	void OnMysteryBoxClaimableStatusChanged(const class FString& Campaign, const struct FMysteryBoxStatus& Status);
	void OnMysteryBoxClaimClicked();
	void OnMysteryBoxClaimComplete(bool Succeeded, const class FString& Campaign, const struct FMysteryBoxStatus& Status);
	void OnMysteryBoxStatusLoaded(bool Succeeded, const class FString& Campaign, const struct FMysteryBoxStatus& Status);
	void RequestMoveToCharactersPage(const struct FStoreRedirectionData& StoreRedirectionData);
	void RequestPackRedirectOrCrossPromoPopup(const class FString& PackOrCrossPromoId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreFeaturedSubPresenter">();
	}
	static class UStoreFeaturedSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreFeaturedSubPresenter>();
	}
};
static_assert(alignof(UStoreFeaturedSubPresenter) == 0x000008, "Wrong alignment on UStoreFeaturedSubPresenter");
static_assert(sizeof(UStoreFeaturedSubPresenter) == 0x0002C8, "Wrong size on UStoreFeaturedSubPresenter");
static_assert(offsetof(UStoreFeaturedSubPresenter, _itemsViewData) == 0x000128, "Member 'UStoreFeaturedSubPresenter::_itemsViewData' has a wrong offset!");
static_assert(offsetof(UStoreFeaturedSubPresenter, _charactersViewData) == 0x000138, "Member 'UStoreFeaturedSubPresenter::_charactersViewData' has a wrong offset!");
static_assert(offsetof(UStoreFeaturedSubPresenter, _chapterPackViewData) == 0x000148, "Member 'UStoreFeaturedSubPresenter::_chapterPackViewData' has a wrong offset!");
static_assert(offsetof(UStoreFeaturedSubPresenter, _specialPackViewData) == 0x000150, "Member 'UStoreFeaturedSubPresenter::_specialPackViewData' has a wrong offset!");
static_assert(offsetof(UStoreFeaturedSubPresenter, _crossPromoViewData) == 0x000158, "Member 'UStoreFeaturedSubPresenter::_crossPromoViewData' has a wrong offset!");

// Class DBDUIPresenters.StoreFilterManager
// 0x0090 (0x00C0 - 0x0030)
class UStoreFilterManager final : public UObject
{
public:
	uint8                                         Pad_30[0x90];                                      // 0x0030(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreFilterManager">();
	}
	static class UStoreFilterManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreFilterManager>();
	}
};
static_assert(alignof(UStoreFilterManager) == 0x000008, "Wrong alignment on UStoreFilterManager");
static_assert(sizeof(UStoreFilterManager) == 0x0000C0, "Wrong size on UStoreFilterManager");

// Class DBDUIPresenters.StoreMenuPresenter
// 0x0130 (0x0218 - 0x00E8)
class UStoreMenuPresenter final : public UPresenter
{
public:
	TSoftClassPtr<class UClass>                   StoreMenuWidgetClass;                              // 0x00E8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DisplayStandName;                                  // 0x0120(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InStoreCameraTransitionDurationSeconds;            // 0x012C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStoreFeaturedSubPresenter*             _storeFeaturedSubPresenter;                        // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreSpecialsSubPresenter*             _storeSpecialsSubPresenter;                        // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreCollectionsSubPresenter*          _storeCollectionsSubPresenter;                     // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreSpecialPacksSubPresenter*         _storeSpecialPacksSubPresenter;                    // 0x0148(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreCharactersSubPresenter*           _storeKillersSubPresenter;                         // 0x0150(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreCharactersSubPresenter*           _storeSurvivorsSubPresenter;                       // 0x0158(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreSubPresenter*                     _activeSubPresenter;                               // 0x0160(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UShopmanager*                           _shopManager;                                      // 0x0168(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMatchmakingMonitor*                    _matchmakingMonitor;                               // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStoreMenuFlowEventsGenerator*          _storeMenuFlowEventGenerator;                      // 0x0178(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_180[0x98];                                     // 0x0180(0x0098)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAsyncLoadComplete();
	void OnBackAction();
	void OnDisplayStandRotation(float Distance);
	void OnMenuTabSelected(EStoreMenuState MenuState);
	void OnMenuTabSelectedAgain(EStoreMenuState MenuState);
	void OnNotEnoughCurrencyModalButtonClicked(const ECurrencyType CurrencyType);
	void OnPageStateUpdated();
	void OnStartSubPresenterAsyncOperation(class USubPresenter* SubPresenter);
	void OnStopSubPresenterAsyncOperation(class USubPresenter* SubPresenter);
	void OpenAuricCellsOverlay();
	void OpenRedeemCodePopup();

	void OnBackActionLabelChangeRequested(const class FText& NewLabel) const;
	void ResetBackActionLabel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreMenuPresenter">();
	}
	static class UStoreMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreMenuPresenter>();
	}
};
static_assert(alignof(UStoreMenuPresenter) == 0x000008, "Wrong alignment on UStoreMenuPresenter");
static_assert(sizeof(UStoreMenuPresenter) == 0x000218, "Wrong size on UStoreMenuPresenter");
static_assert(offsetof(UStoreMenuPresenter, StoreMenuWidgetClass) == 0x0000E8, "Member 'UStoreMenuPresenter::StoreMenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, DisplayStandName) == 0x000120, "Member 'UStoreMenuPresenter::DisplayStandName' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, InStoreCameraTransitionDurationSeconds) == 0x00012C, "Member 'UStoreMenuPresenter::InStoreCameraTransitionDurationSeconds' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _storeFeaturedSubPresenter) == 0x000130, "Member 'UStoreMenuPresenter::_storeFeaturedSubPresenter' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _storeSpecialsSubPresenter) == 0x000138, "Member 'UStoreMenuPresenter::_storeSpecialsSubPresenter' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _storeCollectionsSubPresenter) == 0x000140, "Member 'UStoreMenuPresenter::_storeCollectionsSubPresenter' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _storeSpecialPacksSubPresenter) == 0x000148, "Member 'UStoreMenuPresenter::_storeSpecialPacksSubPresenter' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _storeKillersSubPresenter) == 0x000150, "Member 'UStoreMenuPresenter::_storeKillersSubPresenter' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _storeSurvivorsSubPresenter) == 0x000158, "Member 'UStoreMenuPresenter::_storeSurvivorsSubPresenter' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _activeSubPresenter) == 0x000160, "Member 'UStoreMenuPresenter::_activeSubPresenter' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _shopManager) == 0x000168, "Member 'UStoreMenuPresenter::_shopManager' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _matchmakingMonitor) == 0x000170, "Member 'UStoreMenuPresenter::_matchmakingMonitor' has a wrong offset!");
static_assert(offsetof(UStoreMenuPresenter, _storeMenuFlowEventGenerator) == 0x000178, "Member 'UStoreMenuPresenter::_storeMenuFlowEventGenerator' has a wrong offset!");

// Class DBDUIPresenters.StoreRootWidget
// 0x0000 (0x02B8 - 0x02B8)
class UStoreRootWidget final : public URootWidget
{
public:
	bool ShouldPresentBackgroundOnUnfocus() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreRootWidget">();
	}
	static class UStoreRootWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreRootWidget>();
	}
};
static_assert(alignof(UStoreRootWidget) == 0x000008, "Wrong alignment on UStoreRootWidget");
static_assert(sizeof(UStoreRootWidget) == 0x0002B8, "Wrong size on UStoreRootWidget");

// Class DBDUIPresenters.StoreSavedFiltersInterface
// 0x0000 (0x0030 - 0x0030)
class IStoreSavedFiltersInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreSavedFiltersInterface">();
	}
	static class IStoreSavedFiltersInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IStoreSavedFiltersInterface>();
	}
};
static_assert(alignof(IStoreSavedFiltersInterface) == 0x000008, "Wrong alignment on IStoreSavedFiltersInterface");
static_assert(sizeof(IStoreSavedFiltersInterface) == 0x000030, "Wrong size on IStoreSavedFiltersInterface");

// Class DBDUIPresenters.StoreSpecialPacksSubPresenter
// 0x01E0 (0x02F8 - 0x0118)
class UStoreSpecialPacksSubPresenter final : public UStoreSubPresenter
{
public:
	TArray<class UStoreSpecialPackViewData*>      _specialPacks;                                     // 0x0118(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<class UStoreChapterPackViewData*>      _chapterPacks;                                     // 0x0128(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FStoreHeritagePackViewData>     _heritagePacks;                                    // 0x0138(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_148[0x1B0];                                    // 0x0148(0x01B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnArchivePassClicked(const class FString& PackId, const class FName& ArchiveId);
	void OnChapterPackClicked(const class FString& PackId);
	void OnCharacterClicked(const class FString& PackId, const int32 CharacterIndex);
	void OnCustomizationClicked(const class FString& PackId, const class FName& CustomizationId);
	void OnHeritagePackBuyClicked(const class FString& PackId);
	void OnPackBuyClicked(const class FString& PackId);
	void OnSpecialPackClicked(const class FString& PackId);
	void OnSpecialPacksUpdated();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreSpecialPacksSubPresenter">();
	}
	static class UStoreSpecialPacksSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreSpecialPacksSubPresenter>();
	}
};
static_assert(alignof(UStoreSpecialPacksSubPresenter) == 0x000008, "Wrong alignment on UStoreSpecialPacksSubPresenter");
static_assert(sizeof(UStoreSpecialPacksSubPresenter) == 0x0002F8, "Wrong size on UStoreSpecialPacksSubPresenter");
static_assert(offsetof(UStoreSpecialPacksSubPresenter, _specialPacks) == 0x000118, "Member 'UStoreSpecialPacksSubPresenter::_specialPacks' has a wrong offset!");
static_assert(offsetof(UStoreSpecialPacksSubPresenter, _chapterPacks) == 0x000128, "Member 'UStoreSpecialPacksSubPresenter::_chapterPacks' has a wrong offset!");
static_assert(offsetof(UStoreSpecialPacksSubPresenter, _heritagePacks) == 0x000138, "Member 'UStoreSpecialPacksSubPresenter::_heritagePacks' has a wrong offset!");

// Class DBDUIPresenters.StoreSpecialsSubPresenter
// 0x00D0 (0x01E8 - 0x0118)
class UStoreSpecialsSubPresenter final : public UStoreSubPresenter
{
public:
	TScriptInterface<class IStoreSpecialsViewInterface> _storeSpecialsWidget;                              // 0x0118(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStoreCustomizationItemViewData*> _cachedSpecialsItems;                              // 0x0128(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0xB0];                                     // 0x0138(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnArchivePassBannerClicked(const class FName& ArchiveId);
	void OnAuricCellSpecialBuyAction(class FName bundleId);
	void OnPremiumTransactionCompleted(bool Success, class FName ItemId, const struct FPremiumPurchaseCompleteData& PurchaseCompleteData);
	void OnSpecialPacksUpdated();
	void RequestMoveToCharactersPage(const struct FStoreRedirectionData& StoreRedirectionData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreSpecialsSubPresenter">();
	}
	static class UStoreSpecialsSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreSpecialsSubPresenter>();
	}
};
static_assert(alignof(UStoreSpecialsSubPresenter) == 0x000008, "Wrong alignment on UStoreSpecialsSubPresenter");
static_assert(sizeof(UStoreSpecialsSubPresenter) == 0x0001E8, "Wrong size on UStoreSpecialsSubPresenter");
static_assert(offsetof(UStoreSpecialsSubPresenter, _storeSpecialsWidget) == 0x000118, "Member 'UStoreSpecialsSubPresenter::_storeSpecialsWidget' has a wrong offset!");
static_assert(offsetof(UStoreSpecialsSubPresenter, _cachedSpecialsItems) == 0x000128, "Member 'UStoreSpecialsSubPresenter::_cachedSpecialsItems' has a wrong offset!");

// Class DBDUIPresenters.StoreUnlockConfirmationPopupPresenter
// 0x0000 (0x01C0 - 0x01C0)
class UStoreUnlockConfirmationPopupPresenter final : public UGenericPopupPresenter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StoreUnlockConfirmationPopupPresenter">();
	}
	static class UStoreUnlockConfirmationPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStoreUnlockConfirmationPopupPresenter>();
	}
};
static_assert(alignof(UStoreUnlockConfirmationPopupPresenter) == 0x000008, "Wrong alignment on UStoreUnlockConfirmationPopupPresenter");
static_assert(sizeof(UStoreUnlockConfirmationPopupPresenter) == 0x0001C0, "Wrong size on UStoreUnlockConfirmationPopupPresenter");

// Class DBDUIPresenters.SubtitlesPresenter
// 0x0050 (0x0138 - 0x00E8)
class USubtitlesPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                SubtitlesWidgetClass;                              // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfCharactersPerLine;                         // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationPerLine;                                   // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KeepSingleCharacter;                               // 0x00F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSubtitlesEntry>                _entryQueue;                                       // 0x0100(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           _timerHandle;                                      // 0x0110(0x0008)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x20];                                     // 0x0118(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEntryTimedOut();

	bool IsSubtitlesEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubtitlesPresenter">();
	}
	static class USubtitlesPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubtitlesPresenter>();
	}
};
static_assert(alignof(USubtitlesPresenter) == 0x000008, "Wrong alignment on USubtitlesPresenter");
static_assert(sizeof(USubtitlesPresenter) == 0x000138, "Wrong size on USubtitlesPresenter");
static_assert(offsetof(USubtitlesPresenter, SubtitlesWidgetClass) == 0x0000E8, "Member 'USubtitlesPresenter::SubtitlesWidgetClass' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, NumberOfCharactersPerLine) == 0x0000F0, "Member 'USubtitlesPresenter::NumberOfCharactersPerLine' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, DurationPerLine) == 0x0000F4, "Member 'USubtitlesPresenter::DurationPerLine' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, KeepSingleCharacter) == 0x0000F8, "Member 'USubtitlesPresenter::KeepSingleCharacter' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, _entryQueue) == 0x000100, "Member 'USubtitlesPresenter::_entryQueue' has a wrong offset!");
static_assert(offsetof(USubtitlesPresenter, _timerHandle) == 0x000110, "Member 'USubtitlesPresenter::_timerHandle' has a wrong offset!");

// Class DBDUIPresenters.TallyMenuPresenter
// 0x0020 (0x0108 - 0x00E8)
class UTallyMenuPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreTallyMenuWidgetClass;                          // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTallyScoreboardSubPresenter*           _tallyScoreboardSubPresenter;                      // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTallyScoreboardVisibility(bool IsVisible) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TallyMenuPresenter">();
	}
	static class UTallyMenuPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTallyMenuPresenter>();
	}
};
static_assert(alignof(UTallyMenuPresenter) == 0x000008, "Wrong alignment on UTallyMenuPresenter");
static_assert(sizeof(UTallyMenuPresenter) == 0x000108, "Wrong size on UTallyMenuPresenter");
static_assert(offsetof(UTallyMenuPresenter, CoreTallyMenuWidgetClass) == 0x0000E8, "Member 'UTallyMenuPresenter::CoreTallyMenuWidgetClass' has a wrong offset!");
static_assert(offsetof(UTallyMenuPresenter, _tallyScoreboardSubPresenter) == 0x0000F0, "Member 'UTallyMenuPresenter::_tallyScoreboardSubPresenter' has a wrong offset!");

// Class DBDUIPresenters.TallyScoreboardSubPresenter
// 0x0098 (0x0108 - 0x0070)
class UTallyScoreboardSubPresenter final : public USubPresenter
{
public:
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ITallyScoreboardViewInterface> _tallyScoreboardWidget;                            // 0x0078(0x0010)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x80];                                      // 0x0088(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerSocialOptionClicked(const struct FPlayerSocialOptionViewData& PlayerSocialOptionData);
	void OnPlayerStatusClicked(const class FString& PlayerId);
	void OnReportButtonClicked(const class FString& PlayerId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TallyScoreboardSubPresenter">();
	}
	static class UTallyScoreboardSubPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTallyScoreboardSubPresenter>();
	}
};
static_assert(alignof(UTallyScoreboardSubPresenter) == 0x000008, "Wrong alignment on UTallyScoreboardSubPresenter");
static_assert(sizeof(UTallyScoreboardSubPresenter) == 0x000108, "Wrong size on UTallyScoreboardSubPresenter");
static_assert(offsetof(UTallyScoreboardSubPresenter, _tallyScoreboardWidget) == 0x000078, "Member 'UTallyScoreboardSubPresenter::_tallyScoreboardWidget' has a wrong offset!");

// Class DBDUIPresenters.TemplatePresenter
// 0x0020 (0x0148 - 0x0128)
class UTemplatePresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                TemplateWidgetClass;                               // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x18];                                     // 0x0130(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TemplatePresenter">();
	}
	static class UTemplatePresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTemplatePresenter>();
	}
};
static_assert(alignof(UTemplatePresenter) == 0x000008, "Wrong alignment on UTemplatePresenter");
static_assert(sizeof(UTemplatePresenter) == 0x000148, "Wrong size on UTemplatePresenter");
static_assert(offsetof(UTemplatePresenter, TemplateWidgetClass) == 0x000128, "Member 'UTemplatePresenter::TemplateWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.TestBuildFlagPresenter
// 0x0020 (0x0108 - 0x00E8)
class UTestBuildFlagPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                TestBuildFlagWidgetClass;                          // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETestBuildFlagPosition                        TestBuildFlagPosition;                             // 0x00F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1[0x17];                                      // 0x00F1(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestBuildFlagPresenter">();
	}
	static class UTestBuildFlagPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestBuildFlagPresenter>();
	}
};
static_assert(alignof(UTestBuildFlagPresenter) == 0x000008, "Wrong alignment on UTestBuildFlagPresenter");
static_assert(sizeof(UTestBuildFlagPresenter) == 0x000108, "Wrong size on UTestBuildFlagPresenter");
static_assert(offsetof(UTestBuildFlagPresenter, TestBuildFlagWidgetClass) == 0x0000E8, "Member 'UTestBuildFlagPresenter::TestBuildFlagWidgetClass' has a wrong offset!");
static_assert(offsetof(UTestBuildFlagPresenter, TestBuildFlagPosition) == 0x0000F0, "Member 'UTestBuildFlagPresenter::TestBuildFlagPosition' has a wrong offset!");

// Class DBDUIPresenters.TestPresenter
// 0x0010 (0x00F8 - 0x00E8)
class UTestPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                TestWidgetClass;                                   // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestPresenter">();
	}
	static class UTestPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestPresenter>();
	}
};
static_assert(alignof(UTestPresenter) == 0x000008, "Wrong alignment on UTestPresenter");
static_assert(sizeof(UTestPresenter) == 0x0000F8, "Wrong size on UTestPresenter");
static_assert(offsetof(UTestPresenter, TestWidgetClass) == 0x0000E8, "Member 'UTestPresenter::TestWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.ToastNotificationPresenter
// 0x0020 (0x0108 - 0x00E8)
class UToastNotificationPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                ToastNotificationContainerWidgetClass;             // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x18];                                      // 0x00F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayPopup(const uint32 NotificationId);
	void OnButtonSelected(const int32 buttonId, const uint32 NotificationId);
	void OnNotificationRemoved(const uint32 NotificationId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ToastNotificationPresenter">();
	}
	static class UToastNotificationPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UToastNotificationPresenter>();
	}
};
static_assert(alignof(UToastNotificationPresenter) == 0x000008, "Wrong alignment on UToastNotificationPresenter");
static_assert(sizeof(UToastNotificationPresenter) == 0x000108, "Wrong size on UToastNotificationPresenter");
static_assert(offsetof(UToastNotificationPresenter, ToastNotificationContainerWidgetClass) == 0x0000E8, "Member 'UToastNotificationPresenter::ToastNotificationContainerWidgetClass' has a wrong offset!");

// Class DBDUIPresenters.HudTutorialBlockingNotificationsPresenter
// 0x0100 (0x0228 - 0x0128)
class UHudTutorialBlockingNotificationsPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreTutorialBlockingNotificationsWidget;           // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x8];                                      // 0x0130(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class ATutorialsUtilities*                    _tutorialsUtilities;                               // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_140[0xE8];                                     // 0x0140(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTutorialHudFadeInTriggered();
	void OnTutorialHudFadeOutTriggered();
	void OnTutorialNotificationClosedByUserInput();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudTutorialBlockingNotificationsPresenter">();
	}
	static class UHudTutorialBlockingNotificationsPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudTutorialBlockingNotificationsPresenter>();
	}
};
static_assert(alignof(UHudTutorialBlockingNotificationsPresenter) == 0x000008, "Wrong alignment on UHudTutorialBlockingNotificationsPresenter");
static_assert(sizeof(UHudTutorialBlockingNotificationsPresenter) == 0x000228, "Wrong size on UHudTutorialBlockingNotificationsPresenter");
static_assert(offsetof(UHudTutorialBlockingNotificationsPresenter, CoreTutorialBlockingNotificationsWidget) == 0x000128, "Member 'UHudTutorialBlockingNotificationsPresenter::CoreTutorialBlockingNotificationsWidget' has a wrong offset!");
static_assert(offsetof(UHudTutorialBlockingNotificationsPresenter, _tutorialsUtilities) == 0x000138, "Member 'UHudTutorialBlockingNotificationsPresenter::_tutorialsUtilities' has a wrong offset!");

// Class DBDUIPresenters.HudTutorialMysteryNotesPresenter
// 0x0018 (0x0140 - 0x0128)
class UHudTutorialMysteryNotesPresenter final : public UHudPresenter
{
public:
	TSubclassOf<class UUserWidget>                CoreTutorialMysteryNoteWidget;                     // 0x0128(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_130[0x10];                                     // 0x0130(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HudTutorialMysteryNotesPresenter">();
	}
	static class UHudTutorialMysteryNotesPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHudTutorialMysteryNotesPresenter>();
	}
};
static_assert(alignof(UHudTutorialMysteryNotesPresenter) == 0x000008, "Wrong alignment on UHudTutorialMysteryNotesPresenter");
static_assert(sizeof(UHudTutorialMysteryNotesPresenter) == 0x000140, "Wrong size on UHudTutorialMysteryNotesPresenter");
static_assert(offsetof(UHudTutorialMysteryNotesPresenter, CoreTutorialMysteryNoteWidget) == 0x000128, "Member 'UHudTutorialMysteryNotesPresenter::CoreTutorialMysteryNoteWidget' has a wrong offset!");

// Class DBDUIPresenters.UnlockPersonalPerksPopupPresenter
// 0x0010 (0x01D0 - 0x01C0)
class alignas(0x10) UUnlockPersonalPerksPopupPresenter final : public UGenericPopupPresenter
{
public:
	TArray<class UMenuPerkViewData*>              _perksData;                                        // 0x01C0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UnlockPersonalPerksPopupPresenter">();
	}
	static class UUnlockPersonalPerksPopupPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUnlockPersonalPerksPopupPresenter>();
	}
};
static_assert(alignof(UUnlockPersonalPerksPopupPresenter) == 0x000010, "Wrong alignment on UUnlockPersonalPerksPopupPresenter");
static_assert(sizeof(UUnlockPersonalPerksPopupPresenter) == 0x0001D0, "Wrong size on UUnlockPersonalPerksPopupPresenter");
static_assert(offsetof(UUnlockPersonalPerksPopupPresenter, _perksData) == 0x0001C0, "Member 'UUnlockPersonalPerksPopupPresenter::_perksData' has a wrong offset!");

// Class DBDUIPresenters.WatermarkPresenter
// 0x0018 (0x0100 - 0x00E8)
class UWatermarkPresenter final : public UPresenter
{
public:
	TSubclassOf<class UUserWidget>                WatermarkWidgetClass;                              // 0x00E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsNonShippingBuild();
	bool IsSteamBuild();
	bool IsUsingCommandLineArgument();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WatermarkPresenter">();
	}
	static class UWatermarkPresenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWatermarkPresenter>();
	}
};
static_assert(alignof(UWatermarkPresenter) == 0x000008, "Wrong alignment on UWatermarkPresenter");
static_assert(sizeof(UWatermarkPresenter) == 0x000100, "Wrong size on UWatermarkPresenter");
static_assert(offsetof(UWatermarkPresenter, WatermarkWidgetClass) == 0x0000E8, "Member 'UWatermarkPresenter::WatermarkWidgetClass' has a wrong offset!");

}

