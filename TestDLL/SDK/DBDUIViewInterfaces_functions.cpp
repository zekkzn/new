#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewInterfaces

#include "Basic.hpp"

#include "DBDUIViewInterfaces_classes.hpp"
#include "DBDUIViewInterfaces_parameters.hpp"


namespace SDK
{

// Function DBDUIViewInterfaces.AddonViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IAddonViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AddonViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.AddonViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAddonViewData                   BaseLoadoutPartViewData                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IAddonViewInterface::SetData(const struct FAddonViewData& BaseLoadoutPartViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AddonViewInterface", "SetData");

	Params::AddonViewInterface_SetData Parms{};

	Parms.BaseLoadoutPartViewData = std::move(BaseLoadoutPartViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreCharactersSelectionViewDataData                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreCharactersSelectionViewInterface::SetData(const struct FStoreCharactersSelectionViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersSelectionViewInterface", "SetData");

	Params::StoreCharactersSelectionViewInterface_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.SetKillerPower
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMenuPowerViewData*               KillerPowerViewData                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreCharactersSelectionViewInterface::SetKillerPower(class UMenuPowerViewData* KillerPowerViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersSelectionViewInterface", "SetKillerPower");

	Params::StoreCharactersSelectionViewInterface_SetKillerPower Parms{};

	Parms.KillerPowerViewData = KillerPowerViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.SetPerksData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UMenuPerkViewData*>        Perks                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreCharactersSelectionViewInterface::SetPerksData(EPlayerRole Role, const TArray<class UMenuPerkViewData*>& Perks)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersSelectionViewInterface", "SetPerksData");

	Params::StoreCharactersSelectionViewInterface_SetPerksData Parms{};

	Parms.Role = Role;
	Parms.Perks = std::move(Perks);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.UpdateSelectedCharacter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedCharacterIndex                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ScrollToSelection                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreCharactersSelectionViewInterface::UpdateSelectedCharacter(const int32 SelectedCharacterIndex, const bool ScrollToSelection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersSelectionViewInterface", "UpdateSelectedCharacter");

	Params::StoreCharactersSelectionViewInterface_UpdateSelectedCharacter Parms{};

	Parms.SelectedCharacterIndex = SelectedCharacterIndex;
	Parms.ScrollToSelection = ScrollToSelection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.GetSearchBarViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class ISearchBarViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class ISearchBarViewInterface> IStoreCharactersSelectionViewInterface::GetSearchBarViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersSelectionViewInterface", "GetSearchBarViewInterface");

	Params::StoreCharactersSelectionViewInterface_GetSearchBarViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.GetStoreCharactersFilterInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersFilterViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersFilterViewInterface> IStoreCharactersSelectionViewInterface::GetStoreCharactersFilterInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersSelectionViewInterface", "GetStoreCharactersFilterInterface");

	Params::StoreCharactersSelectionViewInterface_GetStoreCharactersFilterInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.GlobalProcessingIconViewInterface.SetGlobalLoadingIconVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGlobalProcessingIconViewInterface::SetGlobalLoadingIconVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalProcessingIconViewInterface", "SetGlobalLoadingIconVisibility");

	Params::GlobalProcessingIconViewInterface_SetGlobalLoadingIconVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.GlobalProcessingIconViewInterface.SetGlobalSavingIconVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGlobalProcessingIconViewInterface::SetGlobalSavingIconVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GlobalProcessingIconViewInterface", "SetGlobalSavingIconVisibility");

	Params::GlobalProcessingIconViewInterface_SetGlobalSavingIconVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.KillerStatusData.IsEqual
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UKillerStatusData*                Other                                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKillerStatusData::IsEqual(const class UKillerStatusData* Other) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerStatusData", "IsEqual");

	Params::KillerStatusData_IsEqual Parms{};

	Parms.Other = Other;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.AntiCampSelfUnhookMeterViewInterface.SetProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAntiCampSelfUnhookMeterViewInterface::SetProgress(const float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AntiCampSelfUnhookMeterViewInterface", "SetProgress");

	Params::AntiCampSelfUnhookMeterViewInterface_SetProgress Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.AntiCampSelfUnhookMeterViewInterface.SetState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAntiCampSelfUnhookMeterState           NewState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IAntiCampSelfUnhookMeterViewInterface::SetState(const EAntiCampSelfUnhookMeterState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AntiCampSelfUnhookMeterViewInterface", "SetState");

	Params::AntiCampSelfUnhookMeterViewInterface_SetState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveCompendiumViewInterface.SetPastTomesViewData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FCompendiumButtonData>    PastStoryButtonData                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveCompendiumViewInterface::SetPastTomesViewData(const TArray<struct FCompendiumButtonData>& PastStoryButtonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveCompendiumViewInterface", "SetPastTomesViewData");

	Params::ArchiveCompendiumViewInterface_SetPastTomesViewData Parms{};

	Parms.PastStoryButtonData = std::move(PastStoryButtonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveEditorViewInterface.DisplayEditorSaving
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveEditorViewInterface::DisplayEditorSaving(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveEditorViewInterface", "DisplayEditorSaving");

	Params::ArchiveEditorViewInterface_DisplayEditorSaving Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveEditorViewInterface.InitEditor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveEditorViewInterface::InitEditor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveEditorViewInterface", "InitEditor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetTextVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveImageViewerViewInterface::SetTextVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerViewInterface", "SetTextVisibility");

	Params::ArchiveImageViewerViewInterface_SetTextVisibility Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetVoiceOverAutoplay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VoiceOverAutoplay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveImageViewerViewInterface::SetVoiceOverAutoplay(bool VoiceOverAutoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerViewInterface", "SetVoiceOverAutoplay");

	Params::ArchiveImageViewerViewInterface_SetVoiceOverAutoplay Parms{};

	Parms.VoiceOverAutoplay = VoiceOverAutoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetVoiceOverPlaying
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VoiceOverPlaying                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveImageViewerViewInterface::SetVoiceOverPlaying(bool VoiceOverPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerViewInterface", "SetVoiceOverPlaying");

	Params::ArchiveImageViewerViewInterface_SetVoiceOverPlaying Parms{};

	Parms.VoiceOverPlaying = VoiceOverPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.UpdateContent
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchivesVignetteEntryViewData   Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveImageViewerViewInterface::UpdateContent(const struct FArchivesVignetteEntryViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveImageViewerViewInterface", "UpdateContent");

	Params::ArchiveImageViewerViewInterface_UpdateContent Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.OnImageViewerVoiceOverAutoplay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Autoplay                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::OnImageViewerVoiceOverAutoplay(bool Autoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "OnImageViewerVoiceOverAutoplay");

	Params::ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay Parms{};

	Parms.Autoplay = Autoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.OnImageViewerVoiceOverPlayed
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveJournalViewInterface::OnImageViewerVoiceOverPlayed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "OnImageViewerVoiceOverPlayed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetArrowButtonEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetArrowButtonEnabled(const bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "SetArrowButtonEnabled");

	Params::ArchiveJournalViewInterface_SetArrowButtonEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetCinematicButtonsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetCinematicButtonsEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "SetCinematicButtonsEnabled");

	Params::ArchiveJournalViewInterface_SetCinematicButtonsEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetEntryData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchivesVignetteEntryViewData   EntryViewData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetEntryData(const struct FArchivesVignetteEntryViewData& EntryViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "SetEntryData");

	Params::ArchiveJournalViewInterface_SetEntryData Parms{};

	Parms.EntryViewData = std::move(EntryViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchivesVignetteViewData        VignetteViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVignetteData(const struct FArchivesVignetteViewData& VignetteViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "SetVignetteData");

	Params::ArchiveJournalViewInterface_SetVignetteData Parms{};

	Parms.VignetteViewData = std::move(VignetteViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteInputsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVignetteInputsEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "SetVignetteInputsEnabled");

	Params::ArchiveJournalViewInterface_SetVignetteInputsEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteList
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FArchivesVignetteViewData>VignetteDataList                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVignetteList(const TArray<struct FArchivesVignetteViewData>& VignetteDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "SetVignetteList");

	Params::ArchiveJournalViewInterface_SetVignetteList Parms{};

	Parms.VignetteDataList = std::move(VignetteDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVoiceOverAutoplay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VoiceOverAutoplay                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVoiceOverAutoplay(bool VoiceOverAutoplay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "SetVoiceOverAutoplay");

	Params::ArchiveJournalViewInterface_SetVoiceOverAutoplay Parms{};

	Parms.VoiceOverAutoplay = VoiceOverAutoplay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVoiceOverPlaying
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    VoiceOverPlaying                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveJournalViewInterface::SetVoiceOverPlaying(bool VoiceOverPlaying)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveJournalViewInterface", "SetVoiceOverPlaying");

	Params::ArchiveJournalViewInterface_SetVoiceOverPlaying Parms{};

	Parms.VoiceOverPlaying = VoiceOverPlaying;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.GoToNextLevel
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LevelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::GoToNextLevel(int32 LevelIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveLevelProgressionViewInterface", "GoToNextLevel");

	Params::ArchiveLevelProgressionViewInterface_GoToNextLevel Parms{};

	Parms.LevelIndex = LevelIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.PlayRewardsAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveLevelProgressionViewInterface::PlayRewardsAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveLevelProgressionViewInterface", "PlayRewardsAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetActiveLevel
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   LevelIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    PerformAction                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetActiveLevel(int32 LevelIndex, bool PerformAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetActiveLevel");

	Params::ArchiveLevelProgressionViewInterface_SetActiveLevel Parms{};

	Parms.LevelIndex = LevelIndex;
	Parms.PerformAction = PerformAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetLevelSelectorEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetLevelSelectorEnabled(const bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetLevelSelectorEnabled");

	Params::ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetLevelSelectorVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetLevelSelectorVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetLevelSelectorVisibility");

	Params::ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetRewardsContainerVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetRewardsContainerVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetRewardsContainerVisibility");

	Params::ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetTomeLevelsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UArchiveStoryLevelViewData*>LevelsData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedLevel                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetTomeLevelsData(const TArray<class UArchiveStoryLevelViewData*>& LevelsData, int32 SelectedLevel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetTomeLevelsData");

	Params::ArchiveLevelProgressionViewInterface_SetTomeLevelsData Parms{};

	Parms.LevelsData = std::move(LevelsData);
	Parms.SelectedLevel = SelectedLevel;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetTomeRewardsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FRewardWrapperViewData>   RewardsData                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    AreLocked                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::SetTomeRewardsData(const TArray<struct FRewardWrapperViewData>& RewardsData, bool AreLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveLevelProgressionViewInterface", "SetTomeRewardsData");

	Params::ArchiveLevelProgressionViewInterface_SetTomeRewardsData Parms{};

	Parms.RewardsData = std::move(RewardsData);
	Parms.AreLocked = AreLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.UpdateLevelStatus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Level                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArchivesStoryLevelStatus               Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveLevelProgressionViewInterface::UpdateLevelStatus(int32 Level, EArchivesStoryLevelStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveLevelProgressionViewInterface", "UpdateLevelStatus");

	Params::ArchiveLevelProgressionViewInterface_UpdateLevelStatus Parms{};

	Parms.Level = Level;
	Parms.Status = Status;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ClearChallengeReminderData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::ClearChallengeReminderData(EPlayerRole Role)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "ClearChallengeReminderData");

	Params::ArchiveMenuViewInterface_ClearChallengeReminderData Parms{};

	Parms.Role = Role;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.CloseSlotSelector
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveMenuViewInterface::CloseSlotSelector()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "CloseSlotSelector");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.HideUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveMenuViewInterface::HideUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "HideUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.Init
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveMenuViewInterface::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetChallengeReminderData
// (Native, Event, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchiveChallengeReminderViewDataData                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    NeedsAnimation                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        AnimationOriginalPosition                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetChallengeReminderData(const struct FArchiveChallengeReminderViewData& Data, EPlayerRole Role, bool NeedsAnimation, const struct FVector2D& AnimationOriginalPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetChallengeReminderData");

	Params::ArchiveMenuViewInterface_SetChallengeReminderData Parms{};

	Parms.Data = std::move(Data);
	Parms.Role = Role;
	Parms.NeedsAnimation = NeedsAnimation;
	Parms.AnimationOriginalPosition = std::move(AnimationOriginalPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetChallengeReminderVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetChallengeReminderVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetChallengeReminderVisibility");

	Params::ArchiveMenuViewInterface_SetChallengeReminderVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetControllerElementsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetControllerElementsEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetControllerElementsEnabled");

	Params::ArchiveMenuViewInterface_SetControllerElementsEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetDisplayStandAreaEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetDisplayStandAreaEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetDisplayStandAreaEnabled");

	Params::ArchiveMenuViewInterface_SetDisplayStandAreaEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetEventLabel
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           EventLabel                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetEventLabel(const class FString& EventLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetEventLabel");

	Params::ArchiveMenuViewInterface_SetEventLabel Parms{};

	Parms.EventLabel = std::move(EventLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetInfoButtonEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetInfoButtonEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetInfoButtonEnabled");

	Params::ArchiveMenuViewInterface_SetInfoButtonEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetInfoButtonVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetInfoButtonVisible(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetInfoButtonVisible");

	Params::ArchiveMenuViewInterface_SetInfoButtonVisible Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EArchiveMenuState                       MenuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetMenuState(EArchiveMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetMenuState");

	Params::ArchiveMenuViewInterface_SetMenuState Parms{};

	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetQuestNodeHoverEffect
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsHovered                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetQuestNodeHoverEffect(EPlayerRole Role, bool IsHovered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetQuestNodeHoverEffect");

	Params::ArchiveMenuViewInterface_SetQuestNodeHoverEffect Parms{};

	Parms.Role = Role;
	Parms.IsHovered = IsHovered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRemainingTime
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           RemainingTime                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsMoreThanWarningThreshold                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EArchiveMenuState                       MenuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetRemainingTime(const class FString& RemainingTime, bool IsMoreThanWarningThreshold, EArchiveMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetRemainingTime");

	Params::ArchiveMenuViewInterface_SetRemainingTime Parms{};

	Parms.RemainingTime = std::move(RemainingTime);
	Parms.IsMoreThanWarningThreshold = IsMoreThanWarningThreshold;
	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRemainingTimeVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetRemainingTimeVisible(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetRemainingTimeVisible");

	Params::ArchiveMenuViewInterface_SetRemainingTimeVisible Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetReminderSlotsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetReminderSlotsEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetReminderSlotsEnabled");

	Params::ArchiveMenuViewInterface_SetReminderSlotsEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRiftPackButtonEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetRiftPackButtonEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetRiftPackButtonEnabled");

	Params::ArchiveMenuViewInterface_SetRiftPackButtonEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetSubtitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Subtitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetSubtitle(const class FText& Subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetSubtitle");

	Params::ArchiveMenuViewInterface_SetSubtitle Parms{};

	Parms.Subtitle = std::move(Subtitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetSubtitleVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetSubtitleVisible(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetSubtitleVisible");

	Params::ArchiveMenuViewInterface_SetSubtitleVisible Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTabEnabled(int32 Key, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetTabEnabled");

	Params::ArchiveMenuViewInterface_SetTabEnabled Parms{};

	Parms.Key = Key;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTabsData(const TArray<struct FTabWidgetData>& TabsData, int32 SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetTabsData");

	Params::ArchiveMenuViewInterface_SetTabsData Parms{};

	Parms.TabsData = std::move(TabsData);
	Parms.SelectedKey = SelectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabSelected
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTabSelected(int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetTabSelected");

	Params::ArchiveMenuViewInterface_SetTabSelected Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabsInputsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTabsInputsEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetTabsInputsEnabled");

	Params::ArchiveMenuViewInterface_SetTabsInputsEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::SetTitle(const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "SetTitle");

	Params::ArchiveMenuViewInterface_SetTitle Parms{};

	Parms.Title = std::move(Title);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ShowSlotSelector
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchiveNodeViewData             Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::ShowSlotSelector(const struct FArchiveNodeViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "ShowSlotSelector");

	Params::ArchiveMenuViewInterface_ShowSlotSelector Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ShowUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveMenuViewInterface::ShowUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "ShowUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.UpdateBackgroundSkin
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FArchiveTomeSkinData             Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IArchiveMenuViewInterface::UpdateBackgroundSkin(const int32 Key, const struct FArchiveTomeSkinData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "UpdateBackgroundSkin");

	Params::ArchiveMenuViewInterface_UpdateBackgroundSkin Parms{};

	Parms.Key = Key;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveCompendiumInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveCompendiumViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveCompendiumViewInterface> IArchiveMenuViewInterface::GetArchiveCompendiumInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "GetArchiveCompendiumInterface");

	Params::ArchiveMenuViewInterface_GetArchiveCompendiumInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveRiftInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveRiftViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveRiftViewInterface> IArchiveMenuViewInterface::GetArchiveRiftInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "GetArchiveRiftInterface");

	Params::ArchiveMenuViewInterface_GetArchiveRiftInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveTomeInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveTomeViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveTomeViewInterface> IArchiveMenuViewInterface::GetArchiveTomeInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "GetArchiveTomeInterface");

	Params::ArchiveMenuViewInterface_GetArchiveTomeInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetDisplayStandViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IDisplayStandViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IDisplayStandViewInterface> IArchiveMenuViewInterface::GetDisplayStandViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveMenuViewInterface", "GetDisplayStandViewInterface");

	Params::ArchiveMenuViewInterface_GetDisplayStandViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.Reset
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IArchiveQuestMapViewInterface::Reset()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapViewInterface", "Reset");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.SetLoadingSpinner
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLoading                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveQuestMapViewInterface::SetLoadingSpinner(bool IsLoading)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapViewInterface", "SetLoadingSpinner");

	Params::ArchiveQuestMapViewInterface_SetLoadingSpinner Parms{};

	Parms.IsLoading = IsLoading;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.SetQuestMapData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FArchiveNodeGraphViewData>NodeDataList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FArchiveMapPathViewData>  PathDataList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    NeedsCascadeAppear                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveQuestMapViewInterface::SetQuestMapData(const TArray<struct FArchiveNodeGraphViewData>& NodeDataList, const TArray<struct FArchiveMapPathViewData>& PathDataList, bool NeedsCascadeAppear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapViewInterface", "SetQuestMapData");

	Params::ArchiveQuestMapViewInterface_SetQuestMapData Parms{};

	Parms.NodeDataList = std::move(NodeDataList);
	Parms.PathDataList = std::move(PathDataList);
	Parms.NeedsCascadeAppear = NeedsCascadeAppear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.UpdateQuestMapData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FArchiveNodeGraphViewData>NodeDataList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FArchiveMapPathViewData>  PathDataList                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveQuestMapViewInterface::UpdateQuestMapData(const TArray<struct FArchiveNodeGraphViewData>& NodeDataList, const TArray<struct FArchiveMapPathViewData>& PathDataList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveQuestMapViewInterface", "UpdateQuestMapData");

	Params::ArchiveQuestMapViewInterface_UpdateQuestMapData Parms{};

	Parms.NodeDataList = std::move(NodeDataList);
	Parms.PathDataList = std::move(PathDataList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.PlayUnlockingAnimation
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchivesRiftUnlockSequenceData  Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::PlayUnlockingAnimation(const struct FArchivesRiftUnlockSequenceData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftViewInterface", "PlayUnlockingAnimation");

	Params::ArchiveRiftViewInterface_PlayUnlockingAnimation Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchivesRiftGenericViewData     Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetData(const struct FArchivesRiftGenericViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftViewInterface", "SetData");

	Params::ArchiveRiftViewInterface_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetImagePreviewAreaData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCustomizationItemPreviewAreaViewDataViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetImagePreviewAreaData(const struct FCustomizationItemPreviewAreaViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftViewInterface", "SetImagePreviewAreaData");

	Params::ArchiveRiftViewInterface_SetImagePreviewAreaData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetMatchmakingSoftlockState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsInMatchmakingSoftlock                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetMatchmakingSoftlockState(bool IsInMatchmakingSoftlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftViewInterface", "SetMatchmakingSoftlockState");

	Params::ArchiveRiftViewInterface_SetMatchmakingSoftlockState Parms{};

	Parms.IsInMatchmakingSoftlock = IsInMatchmakingSoftlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetOutfitPreviewButtonVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetOutfitPreviewButtonVisible(const bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftViewInterface", "SetOutfitPreviewButtonVisible");

	Params::ArchiveRiftViewInterface_SetOutfitPreviewButtonVisible Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetRewardTiersData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FArchiveRiftTierRewardsViewData>RiftTiersData                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetRewardTiersData(const TArray<struct FArchiveRiftTierRewardsViewData>& RiftTiersData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftViewInterface", "SetRewardTiersData");

	Params::ArchiveRiftViewInterface_SetRewardTiersData Parms{};

	Parms.RiftTiersData = std::move(RiftTiersData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetRiftFragmentTooltipViewData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCurrencyProgressionTooltipViewDataRiftFragmentTooltipViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IArchiveRiftViewInterface::SetRiftFragmentTooltipViewData(const struct FCurrencyProgressionTooltipViewData& RiftFragmentTooltipViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveRiftViewInterface", "SetRiftFragmentTooltipViewData");

	Params::ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData Parms{};

	Parms.RiftFragmentTooltipViewData = std::move(RiftFragmentTooltipViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PowerBundleViewInterface.ClearData
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IPowerBundleViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PowerBundleViewInterface", "ClearData");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewInterfaces.PowerBundleViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPowerBundleViewData             PowerBundleViewData                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPowerBundleViewInterface::SetData(const struct FPowerBundleViewData& PowerBundleViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PowerBundleViewInterface", "SetData");

	Params::PowerBundleViewInterface_SetData Parms{};

	Parms.PowerBundleViewData = std::move(PowerBundleViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EArchiveTomeMenuState                   MenuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetMenuState(EArchiveTomeMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "SetMenuState");

	Params::ArchiveTomeViewInterface_SetMenuState Parms{};

	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetNotificationVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    HasNotification                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetNotificationVisibility(int32 Key, bool HasNotification)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "SetNotificationVisibility");

	Params::ArchiveTomeViewInterface_SetNotificationVisibility Parms{};

	Parms.Key = Key;
	Parms.HasNotification = HasNotification;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetSideNavTabsData(const TArray<struct FTabWidgetData>& TabsData, int32 SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "SetSideNavTabsData");

	Params::ArchiveTomeViewInterface_SetSideNavTabsData Parms{};

	Parms.TabsData = std::move(TabsData);
	Parms.SelectedKey = SelectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetSideNavTabsEnabled(int32 Key, bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "SetSideNavTabsEnabled");

	Params::ArchiveTomeViewInterface_SetSideNavTabsEnabled Parms{};

	Parms.Key = Key;
	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetSideNavTabsVisibility(int32 Key, bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "SetSideNavTabsVisibility");

	Params::ArchiveTomeViewInterface_SetSideNavTabsVisibility Parms{};

	Parms.Key = Key;
	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetUiTakeoverActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::SetUiTakeoverActive(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "SetUiTakeoverActive");

	Params::ArchiveTomeViewInterface_SetUiTakeoverActive Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.ToggleEditor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::ToggleEditor(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "ToggleEditor");

	Params::ArchiveTomeViewInterface_ToggleEditor Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.UpdateBackgroundSkin
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               SkinMaterail                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IArchiveTomeViewInterface::UpdateBackgroundSkin(int32 Key, class UMaterialInterface* SkinMaterail)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "UpdateBackgroundSkin");

	Params::ArchiveTomeViewInterface_UpdateBackgroundSkin Parms{};

	Parms.Key = Key;
	Parms.SkinMaterail = SkinMaterail;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveEditorInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FEditorInterfaces                ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FEditorInterfaces IArchiveTomeViewInterface::GetArchiveEditorInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "GetArchiveEditorInterface");

	Params::ArchiveTomeViewInterface_GetArchiveEditorInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveJournalInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveJournalViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveJournalViewInterface> IArchiveTomeViewInterface::GetArchiveJournalInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "GetArchiveJournalInterface");

	Params::ArchiveTomeViewInterface_GetArchiveJournalInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveLevelProgressionInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveLevelProgressionViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveLevelProgressionViewInterface> IArchiveTomeViewInterface::GetArchiveLevelProgressionInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "GetArchiveLevelProgressionInterface");

	Params::ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveQuestMapInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IArchiveQuestMapViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IArchiveQuestMapViewInterface> IArchiveTomeViewInterface::GetArchiveQuestMapInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "GetArchiveQuestMapInterface");

	Params::ArchiveTomeViewInterface_GetArchiveQuestMapInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const EArchiveTomeMenuState             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EArchiveTomeMenuState IArchiveTomeViewInterface::GetMenuState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ArchiveTomeViewInterface", "GetMenuState");

	Params::ArchiveTomeViewInterface_GetMenuState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.AuricCellsViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAuricCellsViewData              ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IAuricCellsViewInterface::SetData(const struct FAuricCellsViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AuricCellsViewInterface", "SetData");

	Params::AuricCellsViewInterface_SetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.BasePopupViewInterface.Enter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBasePopupViewData*               Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IBasePopupViewInterface::Enter(class UBasePopupViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePopupViewInterface", "Enter");

	Params::BasePopupViewInterface_Enter Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.BasePopupViewInterface.Leave
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IBasePopupViewInterface::Leave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BasePopupViewInterface", "Leave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.SetEventVisuals
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           EventFrameLabel                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuChallengeSetViewInterface::SetEventVisuals(const class FString& EventFrameLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetViewInterface", "SetEventVisuals");

	Params::ChallengesMenuChallengeSetViewInterface_SetEventVisuals Parms{};

	Parms.EventFrameLabel = std::move(EventFrameLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.SetTabEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuChallengeSetViewInterface::SetTabEnabled(const int32 Key, const bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetViewInterface", "SetTabEnabled");

	Params::ChallengesMenuChallengeSetViewInterface_SetTabEnabled Parms{};

	Parms.Key = Key;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.SetTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedKey                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuChallengeSetViewInterface::SetTabsData(const TArray<struct FTabWidgetData>& TabsData, const int32 SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetViewInterface", "SetTabsData");

	Params::ChallengesMenuChallengeSetViewInterface_SetTabsData Parms{};

	Parms.TabsData = std::move(TabsData);
	Parms.SelectedKey = SelectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.SetTabSelected
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuChallengeSetViewInterface::SetTabSelected(const int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetViewInterface", "SetTabSelected");

	Params::ChallengesMenuChallengeSetViewInterface_SetTabSelected Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.GetRewardTrackInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IChallengesMenuRewardTrackViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IChallengesMenuRewardTrackViewInterface> IChallengesMenuChallengeSetViewInterface::GetRewardTrackInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetViewInterface", "GetRewardTrackInterface");

	Params::ChallengesMenuChallengeSetViewInterface_GetRewardTrackInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.GetRitualsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IChallengesMenuRitualsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IChallengesMenuRitualsViewInterface> IChallengesMenuChallengeSetViewInterface::GetRitualsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetViewInterface", "GetRitualsInterface");

	Params::ChallengesMenuChallengeSetViewInterface_GetRitualsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.GetStoreInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IChallengesMenuStoreViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IChallengesMenuStoreViewInterface> IChallengesMenuChallengeSetViewInterface::GetStoreInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuChallengeSetViewInterface", "GetStoreInterface");

	Params::ChallengesMenuChallengeSetViewInterface_GetStoreInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.Deinit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IProfileMenuCustomizationViewInterface::Deinit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationViewInterface", "Deinit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.DeselectItem
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IProfileMenuCustomizationViewInterface::DeselectItem()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationViewInterface", "DeselectItem");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.EnableInputs
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuCustomizationViewInterface::EnableInputs(const bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationViewInterface", "EnableInputs");

	Params::ProfileMenuCustomizationViewInterface_EnableInputs Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.Init
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECustomizationCategory                  CustomizationCategory                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESortingOption                          SortingOption                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuCustomizationViewInterface::Init(ECustomizationCategory CustomizationCategory, ESortingOption SortingOption)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationViewInterface", "Init");

	Params::ProfileMenuCustomizationViewInterface_Init Parms{};

	Parms.CustomizationCategory = CustomizationCategory;
	Parms.SortingOption = SortingOption;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.SetEquipButtonText
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanEquip                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEquipped                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuCustomizationViewInterface::SetEquipButtonText(const bool CanEquip, const bool IsEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationViewInterface", "SetEquipButtonText");

	Params::ProfileMenuCustomizationViewInterface_SetEquipButtonText Parms{};

	Parms.CanEquip = CanEquip;
	Parms.IsEquipped = IsEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.SetItemsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreCustomizationItemViewData*>CustomizationRewardsData                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuCustomizationViewInterface::SetItemsData(const TArray<class UStoreCustomizationItemViewData*>& CustomizationRewardsData, const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationViewInterface", "SetItemsData");

	Params::ProfileMenuCustomizationViewInterface_SetItemsData Parms{};

	Parms.CustomizationRewardsData = std::move(CustomizationRewardsData);
	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.SetPreviewAreaData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCustomizationItemPreviewAreaViewDataViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    NoCustomizationEquipped                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuCustomizationViewInterface::SetPreviewAreaData(const struct FCustomizationItemPreviewAreaViewData& ViewData, const bool NoCustomizationEquipped)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationViewInterface", "SetPreviewAreaData");

	Params::ProfileMenuCustomizationViewInterface_SetPreviewAreaData Parms{};

	Parms.ViewData = std::move(ViewData);
	Parms.NoCustomizationEquipped = NoCustomizationEquipped;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.SetSelectedItem
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuCustomizationViewInterface::SetSelectedItem(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuCustomizationViewInterface", "SetSelectedItem");

	Params::ProfileMenuCustomizationViewInterface_SetSelectedItem Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuRewardTrackViewInterface.SetEventVisuals
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           EventFrameLabel                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuRewardTrackViewInterface::SetEventVisuals(const class FString& EventFrameLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuRewardTrackViewInterface", "SetEventVisuals");

	Params::ChallengesMenuRewardTrackViewInterface_SetEventVisuals Parms{};

	Parms.EventFrameLabel = std::move(EventFrameLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.Deinit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IChallengesMenuStoreViewInterface::Deinit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreViewInterface", "Deinit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.DeselectReward
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IChallengesMenuStoreViewInterface::DeselectReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreViewInterface", "DeselectReward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.EnableStoreButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enable                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuStoreViewInterface::EnableStoreButton(const bool Enable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreViewInterface", "EnableStoreButton");

	Params::ChallengesMenuStoreViewInterface_EnableStoreButton Parms{};

	Parms.Enable = Enable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.Init
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IChallengesMenuStoreViewInterface::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreViewInterface", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.SetItemsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreCustomizationItemViewData*>CustomizationRewardsData                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuStoreViewInterface::SetItemsData(const TArray<class UStoreCustomizationItemViewData*>& CustomizationRewardsData, const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreViewInterface", "SetItemsData");

	Params::ChallengesMenuStoreViewInterface_SetItemsData Parms{};

	Parms.CustomizationRewardsData = std::move(CustomizationRewardsData);
	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.SetPreviewAreaData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCustomizationItemPreviewAreaViewDataViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengesMenuStoreViewInterface::SetPreviewAreaData(const struct FCustomizationItemPreviewAreaViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreViewInterface", "SetPreviewAreaData");

	Params::ChallengesMenuStoreViewInterface_SetPreviewAreaData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.SetSelectedReward
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuStoreViewInterface::SetSelectedReward(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuStoreViewInterface", "SetSelectedReward");

	Params::ChallengesMenuStoreViewInterface_SetSelectedReward Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.AddChallengeSet
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FChallengeSetViewData            ViewData                                               (ConstParm, Parm, NativeAccessSpecifierPublic)
// TScriptInterface<class IChallengesMenuChallengeSetViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IChallengesMenuChallengeSetViewInterface> IChallengesMenuViewInterface::AddChallengeSet(const struct FChallengeSetViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuViewInterface", "AddChallengeSet");

	Params::ChallengesMenuViewInterface_AddChallengeSet Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetEventVisuals
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           EventFrameLabel                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuViewInterface::SetEventVisuals(const class FString& EventFrameLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuViewInterface", "SetEventVisuals");

	Params::ChallengesMenuViewInterface_SetEventVisuals Parms{};

	Parms.EventFrameLabel = std::move(EventFrameLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetIsFocused
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFocused                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuViewInterface::SetIsFocused(const bool IsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuViewInterface", "SetIsFocused");

	Params::ChallengesMenuViewInterface_SetIsFocused Parms{};

	Parms.IsFocused = IsFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetSubtitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Subtitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengesMenuViewInterface::SetSubtitle(const class FText& Subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuViewInterface", "SetSubtitle");

	Params::ChallengesMenuViewInterface_SetSubtitle Parms{};

	Parms.Subtitle = std::move(Subtitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetTabEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuViewInterface::SetTabEnabled(const int32 Key, const bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuViewInterface", "SetTabEnabled");

	Params::ChallengesMenuViewInterface_SetTabEnabled Parms{};

	Parms.Key = Key;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedKey                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuViewInterface::SetTabsData(const TArray<struct FTabWidgetData>& TabsData, const int32 SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuViewInterface", "SetTabsData");

	Params::ChallengesMenuViewInterface_SetTabsData Parms{};

	Parms.TabsData = std::move(TabsData);
	Parms.SelectedKey = SelectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetTabSelected
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IChallengesMenuViewInterface::SetTabSelected(const int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuViewInterface", "SetTabSelected");

	Params::ChallengesMenuViewInterface_SetTabSelected Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetTitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengesMenuViewInterface::SetTitle(const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengesMenuViewInterface", "SetTitle");

	Params::ChallengesMenuViewInterface_SetTitle Parms{};

	Parms.Title = std::move(Title);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerContainerViewInterface.Deinitialize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IChallengeTrackerContainerViewInterface::Deinitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerContainerViewInterface", "Deinitialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerContainerViewInterface.InitWidgetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FChallengeTrackerViewData>ViewData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengeTrackerContainerViewInterface::InitWidgetData(const TArray<struct FChallengeTrackerViewData>& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerContainerViewInterface", "InitWidgetData");

	Params::ChallengeTrackerContainerViewInterface_InitWidgetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerContainerViewInterface.UpdateChallenges
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FChallengeTrackerViewData>ViewData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengeTrackerContainerViewInterface::UpdateChallenges(const TArray<struct FChallengeTrackerViewData>& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerContainerViewInterface", "UpdateChallenges");

	Params::ChallengeTrackerContainerViewInterface_UpdateChallenges Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.CloseWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IChallengeTrackerViewInterface::CloseWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerViewInterface", "CloseWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.InitWidgetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FChallengeTrackerViewData        ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengeTrackerViewInterface::InitWidgetData(const struct FChallengeTrackerViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerViewInterface", "InitWidgetData");

	Params::ChallengeTrackerViewInterface_InitWidgetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.OpenWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IChallengeTrackerViewInterface::OpenWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerViewInterface", "OpenWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.SetWidgetProgression
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchiveNodeObjectiveViewData    ProgressionData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengeTrackerViewInterface::SetWidgetProgression(const struct FArchiveNodeObjectiveViewData& ProgressionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerViewInterface", "SetWidgetProgression");

	Params::ChallengeTrackerViewInterface_SetWidgetProgression Parms{};

	Parms.ProgressionData = std::move(ProgressionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.SetWidgetVisuals
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FChallengeTrackerSkinData        SkinData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IChallengeTrackerViewInterface::SetWidgetVisuals(const struct FChallengeTrackerSkinData& SkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerViewInterface", "SetWidgetVisuals");

	Params::ChallengeTrackerViewInterface_SetWidgetVisuals Parms{};

	Parms.SkinData = std::move(SkinData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.UpdateWidgetProgression
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FArchiveNodeObjectiveViewData    ProgressionData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IChallengeTrackerViewInterface::UpdateWidgetProgression(const struct FArchiveNodeObjectiveViewData& ProgressionData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChallengeTrackerViewInterface", "UpdateWidgetProgression");

	Params::ChallengeTrackerViewInterface_UpdateWidgetProgression Parms{};

	Parms.ProgressionData = std::move(ProgressionData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ScreenIndicatorsContainerViewInterface.RemoveDirectionIndicator
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ID                                                     (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IScreenIndicatorsContainerViewInterface::RemoveDirectionIndicator(const class FString& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenIndicatorsContainerViewInterface", "RemoveDirectionIndicator");

	Params::ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator Parms{};

	Parms.ID = std::move(ID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ScreenIndicatorsContainerViewInterface.ShowDirectionIndicator
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FScreenIndicatorViewData         Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IScreenIndicatorsContainerViewInterface::ShowDirectionIndicator(const struct FScreenIndicatorViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScreenIndicatorsContainerViewInterface", "ShowDirectionIndicator");

	Params::ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CinematicViewInterface.FadeInAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeInDuration                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICinematicViewInterface::FadeInAnimation(const float FadeInDuration, const float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicViewInterface", "FadeInAnimation");

	Params::CinematicViewInterface_FadeInAnimation Parms{};

	Parms.FadeInDuration = FadeInDuration;
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CinematicViewInterface.FadeOutAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   FadeOutDuration                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICinematicViewInterface::FadeOutAnimation(const float FadeOutDuration, const float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicViewInterface", "FadeOutAnimation");

	Params::CinematicViewInterface_FadeOutAnimation Parms{};

	Parms.FadeOutDuration = FadeOutDuration;
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CinematicViewInterface.GetBinkVideoPlayer
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UBinkMediaPlayer*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBinkMediaPlayer* ICinematicViewInterface::GetBinkVideoPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicViewInterface", "GetBinkVideoPlayer");

	Params::CinematicViewInterface_GetBinkVideoPlayer Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.CinematicViewInterface.SetSize
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FVector2D                        Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICinematicViewInterface::SetSize(const struct FVector2D& Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicViewInterface", "SetSize");

	Params::CinematicViewInterface_SetSize Parms{};

	Parms.Size = std::move(Size);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CinematicViewInterface.SetSkipInputSwitcherEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICinematicViewInterface::SetSkipInputSwitcherEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicViewInterface", "SetSkipInputSwitcherEnabled");

	Params::CinematicViewInterface_SetSkipInputSwitcherEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CinematicViewInterface.SetSkipInputSwitcherVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICinematicViewInterface::SetSkipInputSwitcherVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CinematicViewInterface", "SetSkipInputSwitcherVisibility");

	Params::CinematicViewInterface_SetSkipInputSwitcherVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LobbyViewInterface.SetButtonBetaFeatureVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILobbyViewInterface::SetButtonBetaFeatureVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyViewInterface", "SetButtonBetaFeatureVisibility");

	Params::LobbyViewInterface_SetButtonBetaFeatureVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LobbyViewInterface.SetMenuState
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELobbyMenuState                         State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILobbyViewInterface::SetMenuState(const ELobbyMenuState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyViewInterface", "SetMenuState");

	Params::LobbyViewInterface_SetMenuState Parms{};

	Parms.State = State;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.LobbyViewInterface.UpdateBackButtonState
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ILobbyViewInterface::UpdateBackButtonState(const bool IsEnabled, const class FText& Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyViewInterface", "UpdateBackButtonState");

	Params::LobbyViewInterface_UpdateBackButtonState Parms{};

	Parms.IsEnabled = IsEnabled;
	Parms.Label = std::move(Label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LobbyViewInterface.GetLobbyCharactersInterface
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class ILobbyCharactersViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class ILobbyCharactersViewInterface> ILobbyViewInterface::GetLobbyCharactersInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyViewInterface", "GetLobbyCharactersInterface");

	Params::LobbyViewInterface_GetLobbyCharactersInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.LobbyViewInterface.GetPlayerListInterface
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class ILobbyPlayerListViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class ILobbyPlayerListViewInterface> ILobbyViewInterface::GetPlayerListInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyViewInterface", "GetPlayerListInterface");

	Params::LobbyViewInterface_GetPlayerListInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.CompetenceContainerViewInterface.GetPerkInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IPerkViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IPerkViewInterface> ICompetenceContainerViewInterface::GetPerkInterface(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompetenceContainerViewInterface", "GetPerkInterface");

	Params::CompetenceContainerViewInterface_GetPerkInterface Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.CompetenceContainerViewInterface.GetSkillInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class ISkillViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class ISkillViewInterface> ICompetenceContainerViewInterface::GetSkillInterface(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CompetenceContainerViewInterface", "GetSkillInterface");

	Params::CompetenceContainerViewInterface_GetSkillInterface Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.CoreBaseViewInterface.GetLockedFeatureElements
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<TScriptInterface<class ILockedFeatureElementViewInterface>>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)

TArray<TScriptInterface<class ILockedFeatureElementViewInterface>> ICoreBaseViewInterface::GetLockedFeatureElements()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseViewInterface", "GetLockedFeatureElements");

	Params::CoreBaseViewInterface_GetLockedFeatureElements Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.CoreBaseViewInterface.OnStartAsyncOperation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ICoreBaseViewInterface::OnStartAsyncOperation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseViewInterface", "OnStartAsyncOperation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CoreBaseViewInterface.OnStopAsyncOperation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ICoreBaseViewInterface::OnStopAsyncOperation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CoreBaseViewInterface", "OnStopAsyncOperation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LightSensitivityViewInterface.StartFadeOut
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ILightSensitivityViewInterface::StartFadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LightSensitivityViewInterface", "StartFadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CreditsViewInterface.ScrollToEnd
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ICreditsViewInterface::ScrollToEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreditsViewInterface", "ScrollToEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CreditsViewInterface.ScrollToName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Param_Name                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ICreditsViewInterface::ScrollToName(const class FString& Param_Name, float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreditsViewInterface", "ScrollToName");

	Params::CreditsViewInterface_ScrollToName Parms{};

	Parms.Param_Name = std::move(Param_Name);
	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.CreditsViewInterface.SetText
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Text                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ICreditsViewInterface::SetText(const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("CreditsViewInterface", "SetText");

	Params::CreditsViewInterface_SetText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillUnlockedNotificationViewInterface.Hide
// (Event, Public, BlueprintCallable, BlueprintEvent)

void ISkillUnlockedNotificationViewInterface::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillUnlockedNotificationViewInterface", "Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewInterfaces.SkillUnlockedNotificationViewInterface.Show
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSkillUnlockedNotificationViewDataSkillUnlockedNotificationData                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ISkillUnlockedNotificationViewInterface::Show(const struct FSkillUnlockedNotificationViewData& SkillUnlockedNotificationData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillUnlockedNotificationViewInterface", "Show");

	Params::SkillUnlockedNotificationViewInterface_Show Parms{};

	Parms.SkillUnlockedNotificationData = std::move(SkillUnlockedNotificationData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetAllDailyRitualTilesVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IDailyRitualsPopupViewInterface::SetAllDailyRitualTilesVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupViewInterface", "SetAllDailyRitualTilesVisible");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetCanRemoveDailyRitual
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanRemoveDailyRitual                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDailyRitualsPopupViewInterface::SetCanRemoveDailyRitual(const bool CanRemoveDailyRitual)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupViewInterface", "SetCanRemoveDailyRitual");

	Params::DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual Parms{};

	Parms.CanRemoveDailyRitual = CanRemoveDailyRitual;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetDailyRitualsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FDailyRitualViewData>     DailyRitualsData                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsAfterTrial                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDailyRitualsPopupViewInterface::SetDailyRitualsData(const TArray<struct FDailyRitualViewData>& DailyRitualsData, bool IsAfterTrial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupViewInterface", "SetDailyRitualsData");

	Params::DailyRitualsPopupViewInterface_SetDailyRitualsData Parms{};

	Parms.DailyRitualsData = std::move(DailyRitualsData);
	Parms.IsAfterTrial = IsAfterTrial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetIsOnboardingRitualsExperimentActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsOnboardingRitualsExperimentActive                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IDailyRitualsPopupViewInterface::SetIsOnboardingRitualsExperimentActive(bool IsOnboardingRitualsExperimentActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupViewInterface", "SetIsOnboardingRitualsExperimentActive");

	Params::DailyRitualsPopupViewInterface_SetIsOnboardingRitualsExperimentActive Parms{};

	Parms.IsOnboardingRitualsExperimentActive = IsOnboardingRitualsExperimentActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.StartAnim
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IDailyRitualsPopupViewInterface::StartAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DailyRitualsPopupViewInterface", "StartAnim");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.DisplayStandViewInterface.SetViewData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDisplayStandViewData            ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IDisplayStandViewInterface::SetViewData(const struct FDisplayStandViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DisplayStandViewInterface", "SetViewData");

	Params::DisplayStandViewInterface_SetViewData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EffectCardViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEffectCardViewData              EffectCardData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEffectCardViewInterface::SetData(const struct FEffectCardViewData& EffectCardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EffectCardViewInterface", "SetData");

	Params::EffectCardViewInterface_SetData Parms{};

	Parms.EffectCardData = std::move(EffectCardData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.InitEndGameScenario
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEndGameCollapseBarViewInterface::InitEndGameScenario()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EndGameCollapseBarViewInterface", "InitEndGameScenario");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.SetEndGameScenarioProgressionMode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsSlowMode                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEndGameCollapseBarViewInterface::SetEndGameScenarioProgressionMode(const bool IsSlowMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EndGameCollapseBarViewInterface", "SetEndGameScenarioProgressionMode");

	Params::EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode Parms{};

	Parms.IsSlowMode = IsSlowMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.SetEndGameScenarioProgressionValue
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Amount                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ForceUpdate                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEndGameCollapseBarViewInterface::SetEndGameScenarioProgressionValue(const float Amount, bool ForceUpdate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EndGameCollapseBarViewInterface", "SetEndGameScenarioProgressionValue");

	Params::EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue Parms{};

	Parms.Amount = Amount;
	Parms.ForceUpdate = ForceUpdate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.StartEndGameScenario
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEndGameCollapseBarViewInterface::StartEndGameScenario()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EndGameCollapseBarViewInterface", "StartEndGameScenario");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedItemViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    FullClear                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEquippedItemViewInterface::ClearData(bool FullClear)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippedItemViewInterface", "ClearData");

	Params::EquippedItemViewInterface_ClearData Parms{};

	Parms.FullClear = FullClear;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedItemViewInterface.GetIsEquippedItemVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IEquippedItemViewInterface::GetIsEquippedItemVisible()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippedItemViewInterface", "GetIsEquippedItemVisible");

	Params::EquippedItemViewInterface_GetIsEquippedItemVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetActiveState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEquippedItemViewInterface::SetActiveState(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippedItemViewInterface", "SetActiveState");

	Params::EquippedItemViewInterface_SetActiveState Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FItemBundleViewData              ItemBundleData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEquippedItemViewInterface::SetData(const struct FItemBundleViewData& ItemBundleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippedItemViewInterface", "SetData");

	Params::EquippedItemViewInterface_SetData Parms{};

	Parms.ItemBundleData = std::move(ItemBundleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetFakeItem
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsHoldingFakeItem                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture2D>        FakeItemIcon                                           (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKey                             InputKey                                               (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Count                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEquippedItemViewInterface::SetFakeItem(bool IsHoldingFakeItem, const TSoftObjectPtr<class UTexture2D>& FakeItemIcon, const struct FKey& InputKey, int32 Count)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippedItemViewInterface", "SetFakeItem");

	Params::EquippedItemViewInterface_SetFakeItem Parms{};

	Parms.IsHoldingFakeItem = IsHoldingFakeItem;
	Parms.FakeItemIcon = FakeItemIcon;
	Parms.InputKey = std::move(InputKey);
	Parms.Count = Count;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedPowerViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEquippedPowerViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippedPowerViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetActiveState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEquippedPowerViewInterface::SetActiveState(bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippedPowerViewInterface", "SetActiveState");

	Params::EquippedPowerViewInterface_SetActiveState Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetCarryingMode
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsCarrying                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPowerViewData                   CarryingViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEquippedPowerViewInterface::SetCarryingMode(const bool IsCarrying, const struct FPowerViewData& CarryingViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippedPowerViewInterface", "SetCarryingMode");

	Params::EquippedPowerViewInterface_SetCarryingMode Parms{};

	Parms.IsCarrying = IsCarrying;
	Parms.CarryingViewData = std::move(CarryingViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPowerBundleViewData             PowerBundleData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEquippedPowerViewInterface::SetData(const struct FPowerBundleViewData& PowerBundleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EquippedPowerViewInterface", "SetData");

	Params::EquippedPowerViewInterface_SetData Parms{};

	Parms.PowerBundleData = std::move(PowerBundleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ShrineOfSecretsViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FShrineOfSecretsViewData         ShrineOfSecretsViewData                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IShrineOfSecretsViewInterface::SetData(const struct FShrineOfSecretsViewData& ShrineOfSecretsViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShrineOfSecretsViewInterface", "SetData");

	Params::ShrineOfSecretsViewInterface_SetData Parms{};

	Parms.ShrineOfSecretsViewData = std::move(ShrineOfSecretsViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ShrineOfSecretsViewInterface.UpdateItemsFromPurchase
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FShrineOfSecretsViewData         ShrineOfSecretsViewData                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FShrineOfSecretsItemViewData     PurchasedItem                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IShrineOfSecretsViewInterface::UpdateItemsFromPurchase(const struct FShrineOfSecretsViewData& ShrineOfSecretsViewData, const struct FShrineOfSecretsItemViewData& PurchasedItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ShrineOfSecretsViewInterface", "UpdateItemsFromPurchase");

	Params::ShrineOfSecretsViewInterface_UpdateItemsFromPurchase Parms{};

	Parms.ShrineOfSecretsViewData = std::move(ShrineOfSecretsViewData);
	Parms.PurchasedItem = std::move(PurchasedItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.Deinit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventCollectionViewInterface::Deinit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "Deinit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.DeselectReward
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventCollectionViewInterface::DeselectReward()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "DeselectReward");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.DisableInstructionArchivesButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventCollectionViewInterface::DisableInstructionArchivesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "DisableInstructionArchivesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.DisableInstructionCurrencyButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventCollectionViewInterface::DisableInstructionCurrencyButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "DisableInstructionCurrencyButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.DisableInstructionInputs
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventCollectionViewInterface::DisableInstructionInputs()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "DisableInstructionInputs");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.DisableInstructionStoreButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventCollectionViewInterface::DisableInstructionStoreButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "DisableInstructionStoreButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.Init
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventEntryPopupSkinUIData       SkinData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEventCollectionViewInterface::Init(const struct FEventEntryPopupSkinUIData& SkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "Init");

	Params::EventCollectionViewInterface_Init Parms{};

	Parms.SkinData = std::move(SkinData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.SetInstructionWidgetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCustomizationItemOriginViewData ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEventCollectionViewInterface::SetInstructionWidgetData(const struct FCustomizationItemOriginViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "SetInstructionWidgetData");

	Params::EventCollectionViewInterface_SetInstructionWidgetData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.SetItemsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreCustomizationItemViewData*>CustomizationRewardsData                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventCollectionViewInterface::SetItemsData(const TArray<class UStoreCustomizationItemViewData*>& CustomizationRewardsData, const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "SetItemsData");

	Params::EventCollectionViewInterface_SetItemsData Parms{};

	Parms.CustomizationRewardsData = std::move(CustomizationRewardsData);
	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.SetPreviewAreaData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCustomizationItemPreviewAreaViewDataViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEventCollectionViewInterface::SetPreviewAreaData(const struct FCustomizationItemPreviewAreaViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "SetPreviewAreaData");

	Params::EventCollectionViewInterface_SetPreviewAreaData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventCollectionViewInterface.SetSelectedReward
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedIndex                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventCollectionViewInterface::SetSelectedReward(const int32 SelectedIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventCollectionViewInterface", "SetSelectedReward");

	Params::EventCollectionViewInterface_SetSelectedReward Parms{};

	Parms.SelectedIndex = SelectedIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventDetailsViewInterface.Deinit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventDetailsViewInterface::Deinit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventDetailsViewInterface", "Deinit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventDetailsViewInterface.Init
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FDetailsTabViewData              ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FEventEntryPopupSkinUIData       SkinData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEventDetailsViewInterface::Init(const struct FDetailsTabViewData& ViewData, const struct FEventEntryPopupSkinUIData& SkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventDetailsViewInterface", "Init");

	Params::EventDetailsViewInterface_Init Parms{};

	Parms.ViewData = std::move(ViewData);
	Parms.SkinData = std::move(SkinData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreItemViewData.GetHasNotification
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreItemViewData::GetHasNotification() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreItemViewData", "GetHasNotification");

	Params::StoreItemViewData_GetHasNotification Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreItemViewData.GetIcon
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UStoreItemViewData::GetIcon() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreItemViewData", "GetIcon");

	Params::StoreItemViewData_GetIcon Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreItemViewData.GetIsAvailable
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreItemViewData::GetIsAvailable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreItemViewData", "GetIsAvailable");

	Params::StoreItemViewData_GetIsAvailable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreItemViewData.GetIsBuyable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreItemViewData::GetIsBuyable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreItemViewData", "GetIsBuyable");

	Params::StoreItemViewData_GetIsBuyable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreItemViewData.GetIsEnabled
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreItemViewData::GetIsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreItemViewData", "GetIsEnabled");

	Params::StoreItemViewData_GetIsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreItemViewData.GetIsOwned
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreItemViewData::GetIsOwned() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreItemViewData", "GetIsOwned");

	Params::StoreItemViewData_GetIsOwned Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.ChangeSelectedTab
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventEntryViewInterface::ChangeSelectedTab(const int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "ChangeSelectedTab");

	Params::EventEntryViewInterface_ChangeSelectedTab Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.DeselectMilestoneTrackerItems
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventEntryViewInterface::DeselectMilestoneTrackerItems()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "DeselectMilestoneTrackerItems");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.GetRowDataFromEventSkinDataTable
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventEntryPopupSkinUIData       SkinData                                               (Parm, OutParm, NativeAccessSpecifierPublic)
// class FText                             EventFrameLabel                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IEventEntryViewInterface::GetRowDataFromEventSkinDataTable(struct FEventEntryPopupSkinUIData* SkinData, const class FText& EventFrameLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "GetRowDataFromEventSkinDataTable");

	Params::EventEntryViewInterface_GetRowDataFromEventSkinDataTable Parms{};

	Parms.EventFrameLabel = std::move(EventFrameLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SkinData != nullptr)
		*SkinData = std::move(Parms.SkinData);

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.InitializeOverlay
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEventEntryViewData*              ViewData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventEntryViewInterface::InitializeOverlay(class UEventEntryViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "InitializeOverlay");

	Params::EventEntryViewInterface_InitializeOverlay Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.RequestOverlayClosure
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventEntryViewInterface::RequestOverlayClosure()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "RequestOverlayClosure");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.SelectMilestoneTrackerItem
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventEntryViewInterface::SelectMilestoneTrackerItem(class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "SelectMilestoneTrackerItem");

	Params::EventEntryViewInterface_SelectMilestoneTrackerItem Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.SetMilestoneTrackerData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMilestoneTrackerViewData        ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEventEntryViewInterface::SetMilestoneTrackerData(const struct FMilestoneTrackerViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "SetMilestoneTrackerData");

	Params::EventEntryViewInterface_SetMilestoneTrackerData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.SetMilestoneTrackerVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventEntryViewInterface::SetMilestoneTrackerVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "SetMilestoneTrackerVisibility");

	Params::EventEntryViewInterface_SetMilestoneTrackerVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.SetOverlayState
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventEntryTabState                     TabState                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventEntryViewInterface::SetOverlayState(const EEventEntryTabState& TabState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "SetOverlayState");

	Params::EventEntryViewInterface_SetOverlayState Parms{};

	Parms.TabState = TabState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.SetTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedKey                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventEntryViewInterface::SetTabsData(const TArray<struct FTabWidgetData>& TabsData, const int32 SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "SetTabsData");

	Params::EventEntryViewInterface_SetTabsData Parms{};

	Parms.TabsData = std::move(TabsData);
	Parms.SelectedKey = SelectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.GetCollectionSubPresenterInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IEventCollectionViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IEventCollectionViewInterface> IEventEntryViewInterface::GetCollectionSubPresenterInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "GetCollectionSubPresenterInterface");

	Params::EventEntryViewInterface_GetCollectionSubPresenterInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.GetDetailsSubPresenterInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IEventDetailsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IEventDetailsViewInterface> IEventEntryViewInterface::GetDetailsSubPresenterInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "GetDetailsSubPresenterInterface");

	Params::EventEntryViewInterface_GetDetailsSubPresenterInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.GetEventSkinDataTable
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UDataTable*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UDataTable* IEventEntryViewInterface::GetEventSkinDataTable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "GetEventSkinDataTable");

	Params::EventEntryViewInterface_GetEventSkinDataTable Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.GetEventSubPresenterInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IEventInfoViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IEventInfoViewInterface> IEventEntryViewInterface::GetEventSubPresenterInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "GetEventSubPresenterInterface");

	Params::EventEntryViewInterface_GetEventSubPresenterInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.EventEntryViewInterface.GetStoreSubPresenterInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IEventCollectionViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IEventCollectionViewInterface> IEventEntryViewInterface::GetStoreSubPresenterInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventEntryViewInterface", "GetStoreSubPresenterInterface");

	Params::EventEntryViewInterface_GetStoreSubPresenterInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetArrowsVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISpectateBarViewInterface::SetArrowsVisibility(const bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectateBarViewInterface", "SetArrowsVisibility");

	Params::SpectateBarViewInterface_SetArrowsVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetBotTag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBot                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISpectateBarViewInterface::SetBotTag(const bool IsBot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectateBarViewInterface", "SetBotTag");

	Params::SpectateBarViewInterface_SetBotTag Parms{};

	Parms.IsBot = IsBot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetSpectateBarVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISpectateBarViewInterface::SetSpectateBarVisibility(const bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectateBarViewInterface", "SetSpectateBarVisibility");

	Params::SpectateBarViewInterface_SetSpectateBarVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetSpectatedName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISpectateBarViewInterface::SetSpectatedName(const class FString& PlayerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SpectateBarViewInterface", "SetSpectatedName");

	Params::SpectateBarViewInterface_SetSpectatedName Parms{};

	Parms.PlayerName = std::move(PlayerName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventInfoViewInterface.Deinit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventInfoViewInterface::Deinit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventInfoViewInterface", "Deinit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventInfoViewInterface.DisableArchivesButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IEventInfoViewInterface::DisableArchivesButton()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventInfoViewInterface", "DisableArchivesButton");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventInfoViewInterface.Init
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UEventTabViewData*                ViewData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FEventEntryPopupSkinUIData       SkinData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEventInfoViewInterface::Init(class UEventTabViewData* ViewData, const struct FEventEntryPopupSkinUIData& SkinData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventInfoViewInterface", "Init");

	Params::EventInfoViewInterface_Init Parms{};

	Parms.ViewData = ViewData;
	Parms.SkinData = std::move(SkinData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventInfoViewInterface.SetArchivesButtonVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventInfoViewInterface::SetArchivesButtonVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventInfoViewInterface", "SetArchivesButtonVisibility");

	Params::EventInfoViewInterface_SetArchivesButtonVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventInfoViewInterface.SetEventObjectiveTrackerData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FEventObjectiveTrackerViewData   ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IEventInfoViewInterface::SetEventObjectiveTrackerData(const struct FEventObjectiveTrackerViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventInfoViewInterface", "SetEventObjectiveTrackerData");

	Params::EventInfoViewInterface_SetEventObjectiveTrackerData Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.EventInfoViewInterface.SetEventObjectiveTrackerVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IEventInfoViewInterface::SetEventObjectiveTrackerVisibility(const bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("EventInfoViewInterface", "SetEventObjectiveTrackerVisibility");

	Params::EventInfoViewInterface_SetEventObjectiveTrackerVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetLayout
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameType                               GameType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISettingsMatchDetailsViewInterface::SetLayout(const EGameType GameType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsViewInterface", "SetLayout");

	Params::SettingsMatchDetailsViewInterface_SetLayout Parms{};

	Parms.GameType = GameType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetMapData
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             MapInfo                                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           MapThemeName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MapTileName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISettingsMatchDetailsViewInterface::SetMapData(const class FText& MapInfo, const class FString& MapThemeName, const class FString& MapTileName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsViewInterface", "SetMapData");

	Params::SettingsMatchDetailsViewInterface_SetMapData Parms{};

	Parms.MapInfo = std::move(MapInfo);
	Parms.MapThemeName = std::move(MapThemeName);
	Parms.MapTileName = std::move(MapTileName);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetOfferings
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMenuOfferingViewData*>    SurvivorOfferingsData                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<class UMenuOfferingViewData*>    KillerOfferingsData                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ISettingsMatchDetailsViewInterface::SetOfferings(const TArray<class UMenuOfferingViewData*>& SurvivorOfferingsData, const TArray<class UMenuOfferingViewData*>& KillerOfferingsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsViewInterface", "SetOfferings");

	Params::SettingsMatchDetailsViewInterface_SetOfferings Parms{};

	Parms.SurvivorOfferingsData = std::move(SurvivorOfferingsData);
	Parms.KillerOfferingsData = std::move(KillerOfferingsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetPerks
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMenuPerkViewData*>        PerksData                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ISettingsMatchDetailsViewInterface::SetPerks(const TArray<class UMenuPerkViewData*>& PerksData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsViewInterface", "SetPerks");

	Params::SettingsMatchDetailsViewInterface_SetPerks Parms{};

	Parms.PerksData = std::move(PerksData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetPlayersInfo
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPlayerInfoData>          SurvivorInfoData                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FPlayerInfoData>          KillerInfoData                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsLocalPlayerSurvivor                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISettingsMatchDetailsViewInterface::SetPlayersInfo(const TArray<struct FPlayerInfoData>& SurvivorInfoData, const TArray<struct FPlayerInfoData>& KillerInfoData, bool IsLocalPlayerSurvivor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsViewInterface", "SetPlayersInfo");

	Params::SettingsMatchDetailsViewInterface_SetPlayersInfo Parms{};

	Parms.SurvivorInfoData = std::move(SurvivorInfoData);
	Parms.KillerInfoData = std::move(KillerInfoData);
	Parms.IsLocalPlayerSurvivor = IsLocalPlayerSurvivor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetPlayersInfoButtonsEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISettingsMatchDetailsViewInterface::SetPlayersInfoButtonsEnabled(const bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsViewInterface", "SetPlayersInfoButtonsEnabled");

	Params::SettingsMatchDetailsViewInterface_SetPlayersInfoButtonsEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetPlayersPings
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, float>              PingData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ISettingsMatchDetailsViewInterface::SetPlayersPings(const TMap<class FString, float>& PingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsViewInterface", "SetPlayersPings");

	Params::SettingsMatchDetailsViewInterface_SetPlayersPings Parms{};

	Parms.PingData = std::move(PingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetSkills
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UMenuSkillViewData*>       SkillsData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ISettingsMatchDetailsViewInterface::SetSkills(const TArray<class UMenuSkillViewData*>& SkillsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsMatchDetailsViewInterface", "SetSkills");

	Params::SettingsMatchDetailsViewInterface_SetSkills Parms{};

	Parms.SkillsData = std::move(SkillsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExampleViewInterface.SetExampleProgressRatio
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Ratio                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IExampleViewInterface::SetExampleProgressRatio(float Ratio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExampleViewInterface", "SetExampleProgressRatio");

	Params::ExampleViewInterface_SetExampleProgressRatio Parms{};

	Parms.Ratio = Ratio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExampleViewInterface.SetExampleText
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Text                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IExampleViewInterface::SetExampleText(const class FString& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExampleViewInterface", "SetExampleText");

	Params::ExampleViewInterface_SetExampleText Parms{};

	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideAllExternalAddons
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IExternalEffectsViewInterface::HideAllExternalAddons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsViewInterface", "HideAllExternalAddons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideAllExternalPerks
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IExternalEffectsViewInterface::HideAllExternalPerks()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsViewInterface", "HideAllExternalPerks");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalAddon
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::HideExternalAddon(const class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsViewInterface", "HideExternalAddon");

	Params::ExternalEffectsViewInterface_HideExternalAddon Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalPerk
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::HideExternalPerk(const class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsViewInterface", "HideExternalPerk");

	Params::ExternalEffectsViewInterface_HideExternalPerk Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalSkill
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ItemId                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::HideExternalSkill(const class FName ItemId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsViewInterface", "HideExternalSkill");

	Params::ExternalEffectsViewInterface_HideExternalSkill Parms{};

	Parms.ItemId = ItemId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalAddon
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAddonViewData                   AddonViewData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::ShowExternalAddon(const struct FAddonViewData& AddonViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsViewInterface", "ShowExternalAddon");

	Params::ExternalEffectsViewInterface_ShowExternalAddon Parms{};

	Parms.AddonViewData = std::move(AddonViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalPerk
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPerkViewData                    PerkViewData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::ShowExternalPerk(const struct FPerkViewData& PerkViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsViewInterface", "ShowExternalPerk");

	Params::ExternalEffectsViewInterface_ShowExternalPerk Parms{};

	Parms.PerkViewData = std::move(PerkViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalSkill
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSkillViewData                   SkillViewData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IExternalEffectsViewInterface::ShowExternalSkill(const struct FSkillViewData& SkillViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ExternalEffectsViewInterface", "ShowExternalSkill");

	Params::ExternalEffectsViewInterface_ShowExternalSkill Parms{};

	Parms.SkillViewData = std::move(SkillViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.SetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStoreCollectionsMenuState              MenuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreCollectionsViewInterface::SetMenuState(EStoreCollectionsMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionsViewInterface", "SetMenuState");

	Params::StoreCollectionsViewInterface_SetMenuState Parms{};

	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.GetCollectionsCustomizationsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCollectionsCustomizationsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCollectionsCustomizationsViewInterface> IStoreCollectionsViewInterface::GetCollectionsCustomizationsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionsViewInterface", "GetCollectionsCustomizationsInterface");

	Params::StoreCollectionsViewInterface_GetCollectionsCustomizationsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.GetCollectionsListViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCollectionsListViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCollectionsListViewInterface> IStoreCollectionsViewInterface::GetCollectionsListViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionsViewInterface", "GetCollectionsListViewInterface");

	Params::StoreCollectionsViewInterface_GetCollectionsListViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.GetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// EStoreCollectionsMenuState              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EStoreCollectionsMenuState IStoreCollectionsViewInterface::GetMenuState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionsViewInterface", "GetMenuState");

	Params::StoreCollectionsViewInterface_GetMenuState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.GetStoreRightStickControllableViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreRightStickControllableViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreRightStickControllableViewInterface> IStoreCollectionsViewInterface::GetStoreRightStickControllableViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionsViewInterface", "GetStoreRightStickControllableViewInterface");

	Params::StoreCollectionsViewInterface_GetStoreRightStickControllableViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.GameManualViewInterface.SetCategoryData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHelpCategoryData                CategoryData                                           (ConstParm, Parm, NativeAccessSpecifierPublic)
// TArray<struct FHelpTopicData>           TopicsData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IGameManualViewInterface::SetCategoryData(const struct FHelpCategoryData& CategoryData, const TArray<struct FHelpTopicData>& TopicsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManualViewInterface", "SetCategoryData");

	Params::GameManualViewInterface_SetCategoryData Parms{};

	Parms.CategoryData = std::move(CategoryData);
	Parms.TopicsData = std::move(TopicsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.GameManualViewInterface.SetCurrentManualMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameManualMenuState                    MenuState                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGameManualViewInterface::SetCurrentManualMenuState(const EGameManualMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManualViewInterface", "SetCurrentManualMenuState");

	Params::GameManualViewInterface_SetCurrentManualMenuState Parms{};

	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.GameManualViewInterface.GetCurrentManualMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// const EGameManualMenuState              ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const EGameManualMenuState IGameManualViewInterface::GetCurrentManualMenuState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GameManualViewInterface", "GetCurrentManualMenuState");

	Params::GameManualViewInterface_GetCurrentManualMenuState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreCharactersCustomizationsViewDataData                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EScrollAction                           ScrollAction                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreCharactersCustomizationsViewInterface::SetData(const struct FStoreCharactersCustomizationsViewData& Data, const EScrollAction ScrollAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersCustomizationsViewInterface", "SetData");

	Params::StoreCharactersCustomizationsViewInterface_SetData Parms{};

	Parms.Data = std::move(Data);
	Parms.ScrollAction = ScrollAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.ToggleCharmSlotsVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IStoreCharactersCustomizationsViewInterface::ToggleCharmSlotsVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersCustomizationsViewInterface", "ToggleCharmSlotsVisibility");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.UpdateCategories
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStoreCategoryViewData>   Categories                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ECustomizationCategory                  SelectedCategory                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreCharactersCustomizationsViewInterface::UpdateCategories(const TArray<struct FStoreCategoryViewData>& Categories, const ECustomizationCategory SelectedCategory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersCustomizationsViewInterface", "UpdateCategories");

	Params::StoreCharactersCustomizationsViewInterface_UpdateCategories Parms{};

	Parms.Categories = std::move(Categories);
	Parms.SelectedCategory = SelectedCategory;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.UpdateCurrentPresetButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPreviewingAnyCustomization                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreCharactersCustomizationsViewInterface::UpdateCurrentPresetButton(const bool IsPreviewingAnyCustomization)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersCustomizationsViewInterface", "UpdateCurrentPresetButton");

	Params::StoreCharactersCustomizationsViewInterface_UpdateCurrentPresetButton Parms{};

	Parms.IsPreviewingAnyCustomization = IsPreviewingAnyCustomization;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.UpdateSelectedCustomizations
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreCustomizationItemViewData*>SelectedCustomizations                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedSlotIndex                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EScrollAction                           ScrollAction                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreCharactersCustomizationsViewInterface::UpdateSelectedCustomizations(const TArray<class UStoreCustomizationItemViewData*>& SelectedCustomizations, const int32 SelectedSlotIndex, const EScrollAction ScrollAction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersCustomizationsViewInterface", "UpdateSelectedCustomizations");

	Params::StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations Parms{};

	Parms.SelectedCustomizations = std::move(SelectedCustomizations);
	Parms.SelectedSlotIndex = SelectedSlotIndex;
	Parms.ScrollAction = ScrollAction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.GetSearchBarViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class ISearchBarViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class ISearchBarViewInterface> IStoreCharactersCustomizationsViewInterface::GetSearchBarViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersCustomizationsViewInterface", "GetSearchBarViewInterface");

	Params::StoreCharactersCustomizationsViewInterface_GetSearchBarViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.GetStoreCharactersFilterInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersFilterViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersFilterViewInterface> IStoreCharactersCustomizationsViewInterface::GetStoreCharactersFilterInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersCustomizationsViewInterface", "GetStoreCharactersFilterInterface");

	Params::StoreCharactersCustomizationsViewInterface_GetStoreCharactersFilterInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.FadeIn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudAlertViewInterface::FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudAlertViewInterface", "FadeIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.FadeOut
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Delay                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudAlertViewInterface::FadeOut(float Delay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudAlertViewInterface", "FadeOut");

	Params::HudAlertViewInterface_FadeOut Parms{};

	Parms.Delay = Delay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.SetScoreEventsVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudAlertViewInterface::SetScoreEventsVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudAlertViewInterface", "SetScoreEventsVisibility");

	Params::HudAlertViewInterface_SetScoreEventsVisibility Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.ShowScoreAlert
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FScoreAlertViewData              Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IHudAlertViewInterface::ShowScoreAlert(const struct FScoreAlertViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudAlertViewInterface", "ShowScoreAlert");

	Params::HudAlertViewInterface_ShowScoreAlert Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAlertViewInterface.ShowStatusEffectAlert
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStatusEffectAlertViewData       Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IHudAlertViewInterface::ShowStatusEffectAlert(const struct FStatusEffectAlertViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudAlertViewInterface", "ShowStatusEffectAlert");

	Params::HudAlertViewInterface_ShowStatusEffectAlert Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StatusEffectViewInterface.RemoveExistingStatusEffect
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             StatusEffectId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStatusEffectViewInterface::RemoveExistingStatusEffect(const class FName& StatusEffectId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusEffectViewInterface", "RemoveExistingStatusEffect");

	Params::StatusEffectViewInterface_RemoveExistingStatusEffect Parms{};

	Parms.StatusEffectId = StatusEffectId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StatusEffectViewInterface.ShowActiveStatusEffect
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStatusEffectViewData            StatusEffectData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStatusEffectViewInterface::ShowActiveStatusEffect(const struct FStatusEffectViewData& StatusEffectData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StatusEffectViewInterface", "ShowActiveStatusEffect");

	Params::StatusEffectViewInterface_ShowActiveStatusEffect Parms{};

	Parms.StatusEffectData = std::move(StatusEffectData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.GenericRefreshingPopupViewInterface.Refresh
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// float                                   RemainingTime                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IGenericRefreshingPopupViewInterface::Refresh(float RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GenericRefreshingPopupViewInterface", "Refresh");

	Params::GenericRefreshingPopupViewInterface_Refresh Parms{};

	Parms.RemainingTime = RemainingTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HookCountViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHookCountViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HookCountViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HookCountViewInterface.InitWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameType                               GameType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfSegments                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHookCountViewInterface::InitWidget(const EGameType GameType, const int32 NumberOfSegments)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HookCountViewInterface", "InitWidget");

	Params::HookCountViewInterface_InitWidget Parms{};

	Parms.GameType = GameType;
	Parms.NumberOfSegments = NumberOfSegments;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HookCountViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentHookCount                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxHookCount                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InitialMaxHookCount                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSet<int32>                             AssistedHookIndices                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsFinisherMoriAvailable                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHookCountViewInterface::SetData(const int32 CurrentHookCount, const int32 MaxHookCount, const int32 InitialMaxHookCount, const TSet<int32>& AssistedHookIndices, const bool IsFinisherMoriAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HookCountViewInterface", "SetData");

	Params::HookCountViewInterface_SetData Parms{};

	Parms.CurrentHookCount = CurrentHookCount;
	Parms.MaxHookCount = MaxHookCount;
	Parms.InitialMaxHookCount = InitialMaxHookCount;
	Parms.AssistedHookIndices = std::move(AssistedHookIndices);
	Parms.IsFinisherMoriAvailable = IsFinisherMoriAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HookCountViewInterface.SetHookCountVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHookCountViewInterface::SetHookCountVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HookCountViewInterface", "SetHookCountVisibility");

	Params::HookCountViewInterface_SetHookCountVisibility Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAimingCrosshairViewInterface.SetProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudAimingCrosshairViewInterface::SetProgress(const float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudAimingCrosshairViewInterface", "SetProgress");

	Params::HudAimingCrosshairViewInterface_SetProgress Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudAimingCrosshairViewInterface.SetState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EAimingCrosshairState                   NewState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudAimingCrosshairViewInterface::SetState(const EAimingCrosshairState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudAimingCrosshairViewInterface", "SetState");

	Params::HudAimingCrosshairViewInterface_SetState Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Hide
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IHudDirectionalMiniGameViewInterface::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudDirectionalMiniGameViewInterface", "Hide");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Init
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   MaxItems                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EDirectionalMiniGameType                Type                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudDirectionalMiniGameViewInterface::Init(int32 MaxItems, EDirectionalMiniGameType Type)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudDirectionalMiniGameViewInterface", "Init");

	Params::HudDirectionalMiniGameViewInterface_Init Parms{};

	Parms.MaxItems = MaxItems;
	Parms.Type = Type;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Show
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<EDirectionalInputKey>            Directions                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IHudDirectionalMiniGameViewInterface::Show(const TArray<EDirectionalInputKey>& Directions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudDirectionalMiniGameViewInterface", "Show");

	Params::HudDirectionalMiniGameViewInterface_Show Parms{};

	Parms.Directions = std::move(Directions);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.UpdateFinalResult
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EDirectionalMinigameResult              FinalResult                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudDirectionalMiniGameViewInterface::UpdateFinalResult(EDirectionalMinigameResult FinalResult)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudDirectionalMiniGameViewInterface", "UpdateFinalResult");

	Params::HudDirectionalMiniGameViewInterface_UpdateFinalResult Parms{};

	Parms.FinalResult = FinalResult;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.UpdateResult
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsSuccessful                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudDirectionalMiniGameViewInterface::UpdateResult(int32 Param_Index, bool IsSuccessful)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudDirectionalMiniGameViewInterface", "UpdateResult");

	Params::HudDirectionalMiniGameViewInterface_UpdateResult Parms{};

	Parms.Param_Index = Param_Index;
	Parms.IsSuccessful = IsSuccessful;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEffectCardViewInterface.ActivateNextCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudEffectCardViewInterface::ActivateNextCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardViewInterface", "ActivateNextCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEffectCardViewInterface.FadeIn
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudEffectCardViewInterface::FadeIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardViewInterface", "FadeIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEffectCardViewInterface.FadeOut
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudEffectCardViewInterface::FadeOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardViewInterface", "FadeOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEffectCardViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FEffectCardViewData>      EffectCardsViewData                                    (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ActiveCardIndex                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Points                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ActiveCardTime                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEffectCardViewInterface::SetData(const TArray<struct FEffectCardViewData>& EffectCardsViewData, const int32 ActiveCardIndex, const int32 Points, const float ActiveCardTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardViewInterface", "SetData");

	Params::HudEffectCardViewInterface_SetData Parms{};

	Parms.EffectCardsViewData = std::move(EffectCardsViewData);
	Parms.ActiveCardIndex = ActiveCardIndex;
	Parms.Points = Points;
	Parms.ActiveCardTime = ActiveCardTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEffectCardViewInterface.SetMatchPoints
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Points                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEffectCardViewInterface::SetMatchPoints(const int32 Points)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardViewInterface", "SetMatchPoints");

	Params::HudEffectCardViewInterface_SetMatchPoints Parms{};

	Parms.Points = Points;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEffectCardViewInterface.UpdateTimerFeedback
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ElapsedTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEffectCardViewInterface::UpdateTimerFeedback(const float ElapsedTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEffectCardViewInterface", "UpdateTimerFeedback");

	Params::HudEffectCardViewInterface_UpdateTimerFeedback Parms{};

	Parms.ElapsedTime = ElapsedTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.BP_OnStateAnimationFinished
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventObjectiveItemState                FinishedEventItemState                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventObjectiveItemViewInterface::BP_OnStateAnimationFinished(const EEventObjectiveItemState FinishedEventItemState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventObjectiveItemViewInterface", "BP_OnStateAnimationFinished");

	Params::HudEventObjectiveItemViewInterface_BP_OnStateAnimationFinished Parms{};

	Parms.FinishedEventItemState = FinishedEventItemState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudEventObjectiveItemViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventObjectiveItemViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.InitWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsLocalKiller                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventObjectiveItemViewInterface::InitWidget(bool IsLocalKiller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventObjectiveItemViewInterface", "InitWidget");

	Params::HudEventObjectiveItemViewInterface_InitWidget Parms{};

	Parms.IsLocalKiller = IsLocalKiller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetAvailableCharges
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Charges                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxCharges                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventObjectiveItemViewInterface::SetAvailableCharges(const int32 Charges, const int32 MaxCharges)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventObjectiveItemViewInterface", "SetAvailableCharges");

	Params::HudEventObjectiveItemViewInterface_SetAvailableCharges Parms{};

	Parms.Charges = Charges;
	Parms.MaxCharges = MaxCharges;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetChargePercentage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   ChargePercent                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventObjectiveItemViewInterface::SetChargePercentage(const float ChargePercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventObjectiveItemViewInterface", "SetChargePercentage");

	Params::HudEventObjectiveItemViewInterface_SetChargePercentage Parms{};

	Parms.ChargePercent = ChargePercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetCooldownPercentage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CooldownPercent                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventObjectiveItemViewInterface::SetCooldownPercentage(const float CooldownPercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventObjectiveItemViewInterface", "SetCooldownPercentage");

	Params::HudEventObjectiveItemViewInterface_SetCooldownPercentage Parms{};

	Parms.CooldownPercent = CooldownPercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetInputKey
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FKey                             InputKey                                               (ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventObjectiveItemViewInterface::SetInputKey(const struct FKey& InputKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventObjectiveItemViewInterface", "SetInputKey");

	Params::HudEventObjectiveItemViewInterface_SetInputKey Parms{};

	Parms.InputKey = std::move(InputKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetWidgetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventObjectiveItemState                EventItemState                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Charges                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxCharges                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ChargePercent                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventObjectiveItemViewInterface::SetWidgetData(const EEventObjectiveItemState EventItemState, const int32 Charges, const int32 MaxCharges, const float ChargePercent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventObjectiveItemViewInterface", "SetWidgetData");

	Params::HudEventObjectiveItemViewInterface_SetWidgetData Parms{};

	Parms.EventItemState = EventItemState;
	Parms.Charges = Charges;
	Parms.MaxCharges = MaxCharges;
	Parms.ChargePercent = ChargePercent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetWidgetState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EEventObjectiveItemState                EventItemState                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventObjectiveItemViewInterface::SetWidgetState(const EEventObjectiveItemState EventItemState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventObjectiveItemViewInterface", "SetWidgetState");

	Params::HudEventObjectiveItemViewInterface_SetWidgetState Parms{};

	Parms.EventItemState = EventItemState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.EnableEventProgression
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventProgression2023ViewInterface::EnableEventProgression(const bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventProgression2023ViewInterface", "EnableEventProgression");

	Params::HudEventProgression2023ViewInterface_EnableEventProgression Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.InitEventProgression
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHudEventProgression2023ViewData HudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudEventProgression2023ViewInterface::InitEventProgression(const struct FHudEventProgression2023ViewData& HudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventProgression2023ViewInterface", "InitEventProgression");

	Params::HudEventProgression2023ViewInterface_InitEventProgression Parms{};

	Parms.HudEventProgressionViewData = std::move(HudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.UpdateEnergyProgress
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHudEventProgression2023ViewData HudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudEventProgression2023ViewInterface::UpdateEnergyProgress(const struct FHudEventProgression2023ViewData& HudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventProgression2023ViewInterface", "UpdateEnergyProgress");

	Params::HudEventProgression2023ViewInterface_UpdateEnergyProgress Parms{};

	Parms.HudEventProgressionViewData = std::move(HudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.UpdateHauntTarget
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHudEventProgression2023ViewData HudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudEventProgression2023ViewInterface::UpdateHauntTarget(const struct FHudEventProgression2023ViewData& HudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventProgression2023ViewInterface", "UpdateHauntTarget");

	Params::HudEventProgression2023ViewInterface_UpdateHauntTarget Parms{};

	Parms.HudEventProgressionViewData = std::move(HudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.UpdateVoidZoneState
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHudEventProgression2023ViewData HudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudEventProgression2023ViewInterface::UpdateVoidZoneState(const struct FHudEventProgression2023ViewData& HudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventProgression2023ViewInterface", "UpdateVoidZoneState");

	Params::HudEventProgression2023ViewInterface_UpdateVoidZoneState Parms{};

	Parms.HudEventProgressionViewData = std::move(HudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventProgressionViewInterface.EnableEventProgression
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudEventProgressionViewInterface::EnableEventProgression(const bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventProgressionViewInterface", "EnableEventProgression");

	Params::HudEventProgressionViewInterface_EnableEventProgression Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventProgressionViewInterface.InitEventProgression
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHudEventProgressionViewData     HudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudEventProgressionViewInterface::InitEventProgression(const struct FHudEventProgressionViewData& HudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventProgressionViewInterface", "InitEventProgression");

	Params::HudEventProgressionViewInterface_InitEventProgression Parms{};

	Parms.HudEventProgressionViewData = std::move(HudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventProgressionViewInterface.UpdateEventBankedProgress
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHudEventProgressionViewData     HudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudEventProgressionViewInterface::UpdateEventBankedProgress(const struct FHudEventProgressionViewData& HudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventProgressionViewInterface", "UpdateEventBankedProgress");

	Params::HudEventProgressionViewInterface_UpdateEventBankedProgress Parms{};

	Parms.HudEventProgressionViewData = std::move(HudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudEventProgressionViewInterface.UpdateEventPendingProgress
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHudEventProgressionViewData     HudEventProgressionViewData                            (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudEventProgressionViewInterface::UpdateEventPendingProgress(const struct FHudEventProgressionViewData& HudEventProgressionViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudEventProgressionViewInterface", "UpdateEventPendingProgress");

	Params::HudEventProgressionViewInterface_UpdateEventPendingProgress Parms{};

	Parms.HudEventProgressionViewData = std::move(HudEventProgressionViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudItemPickupViewInterface.HideItemPickupPrompt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudItemPickupViewInterface::HideItemPickupPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudItemPickupViewInterface", "HideItemPickupPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudItemPickupViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FItemPickupViewData              ItemToPickUpData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FItemPickupViewData              CurrentItem                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IHudItemPickupViewInterface::SetData(const struct FItemPickupViewData& ItemToPickUpData, const struct FItemPickupViewData& CurrentItem)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudItemPickupViewInterface", "SetData");

	Params::HudItemPickupViewInterface_SetData Parms{};

	Parms.ItemToPickUpData = std::move(ItemToPickUpData);
	Parms.CurrentItem = std::move(CurrentItem);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudItemPickupViewInterface.ShowItemPickupPrompt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudItemPickupViewInterface::ShowItemPickupPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudItemPickupViewInterface", "ShowItemPickupPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudObjectivesViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudObjectivesViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.ClearHookCountData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IHudObjectivesViewInterface::ClearHookCountData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudObjectivesViewInterface", "ClearHookCountData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.InitWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameType                               GameType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NumberOfSegments                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::InitWidget(const EGameType GameType, const int32 NumberOfSegments)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudObjectivesViewInterface", "InitWidget");

	Params::HudObjectivesViewInterface_InitWidget Parms{};

	Parms.GameType = GameType;
	Parms.NumberOfSegments = NumberOfSegments;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHookCountData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   CurrentHookCount                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxHookCount                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   InitialMaxHookCount                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSet<int32>                             AssistedHookIndices                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsFinisherMoriAvailable                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::SetHookCountData(const int32 CurrentHookCount, const int32 MaxHookCount, const int32 InitialMaxHookCount, const TSet<int32>& AssistedHookIndices, const bool IsFinisherMoriAvailable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudObjectivesViewInterface", "SetHookCountData");

	Params::HudObjectivesViewInterface_SetHookCountData Parms{};

	Parms.CurrentHookCount = CurrentHookCount;
	Parms.MaxHookCount = MaxHookCount;
	Parms.InitialMaxHookCount = InitialMaxHookCount;
	Parms.AssistedHookIndices = std::move(AssistedHookIndices);
	Parms.IsFinisherMoriAvailable = IsFinisherMoriAvailable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHookCountVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::SetHookCountVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudObjectivesViewInterface", "SetHookCountVisibility");

	Params::HudObjectivesViewInterface_SetHookCountVisibility Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHudObjectiveData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FHudObjectivesViewData           HudObjectiveViewData                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IHudObjectivesViewInterface::SetHudObjectiveData(const struct FHudObjectivesViewData& HudObjectiveViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HudObjectivesViewInterface", "SetHudObjectiveData");

	Params::HudObjectivesViewInterface_SetHudObjectiveData Parms{};

	Parms.HudObjectiveViewData = std::move(HudObjectiveViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InboxViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// EInboxTab                               Tab                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInboxItemViewData*>       Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IInboxViewInterface::SetData(const EInboxTab Tab, const TArray<class UInboxItemViewData*>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InboxViewInterface", "SetData");

	Params::InboxViewInterface_SetData Parms{};

	Parms.Tab = Tab;
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InboxViewInterface.SetListError
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EInboxTab                               Tab                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInboxViewInterface::SetListError(const EInboxTab Tab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InboxViewInterface", "SetListError");

	Params::InboxViewInterface_SetListError Parms{};

	Parms.Tab = Tab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InboxViewInterface.SetLoading
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EInboxTab                               Tab                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInboxViewInterface::SetLoading(const EInboxTab Tab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InboxViewInterface", "SetLoading");

	Params::InboxViewInterface_SetLoading Parms{};

	Parms.Tab = Tab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InboxViewInterface.SetSelectedItem
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class UInboxItemViewData*               ViewData                                               (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInboxTab                               Tab                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInboxViewInterface::SetSelectedItem(const class UInboxItemViewData* ViewData, const EInboxTab Tab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InboxViewInterface", "SetSelectedItem");

	Params::InboxViewInterface_SetSelectedItem Parms{};

	Parms.ViewData = ViewData;
	Parms.Tab = Tab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InboxViewInterface.SetTabNotificationIcon
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EInboxTab                               Tab                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowNotificationIcon                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInboxViewInterface::SetTabNotificationIcon(const EInboxTab Tab, const bool ShowNotificationIcon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InboxViewInterface", "SetTabNotificationIcon");

	Params::InboxViewInterface_SetTabNotificationIcon Parms{};

	Parms.Tab = Tab;
	Parms.ShowNotificationIcon = ShowNotificationIcon;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InboxViewInterface.SetTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EInboxTab                               SelectedTab                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInboxViewInterface::SetTabsData(const TArray<struct FTabWidgetData>& TabsData, const EInboxTab SelectedTab)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InboxViewInterface", "SetTabsData");

	Params::InboxViewInterface_SetTabsData Parms{};

	Parms.TabsData = std::move(TabsData);
	Parms.SelectedTab = SelectedTab;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionProgressViewInterface.HideInputProgressPrompt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IInteractionProgressViewInterface::HideInputProgressPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionProgressViewInterface", "HideInputProgressPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionProgressViewInterface.PlayHemorrhageAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IInteractionProgressViewInterface::PlayHemorrhageAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionProgressViewInterface", "PlayHemorrhageAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionProgressViewInterface.SetInputProgressPrompt
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInteractionProgressViewData     Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IInteractionProgressViewInterface::SetInputProgressPrompt(const struct FInteractionProgressViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionProgressViewInterface", "SetInputProgressPrompt");

	Params::InteractionProgressViewInterface_SetInputProgressPrompt Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionProgressViewInterface.UpdateInputProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ItemCharge                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsBlocked                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PercentageStopDischarge                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInteractionProgressViewInterface::UpdateInputProgress(const float Progress, const float ItemCharge, bool IsBlocked, float PercentageStopDischarge)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionProgressViewInterface", "UpdateInputProgress");

	Params::InteractionProgressViewInterface_UpdateInputProgress Parms{};

	Parms.Progress = Progress;
	Parms.ItemCharge = ItemCharge;
	Parms.IsBlocked = IsBlocked;
	Parms.PercentageStopDischarge = PercentageStopDischarge;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.AddPrompt
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FInteractionPromptViewData       Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IInteractionPromptsContainerViewInterface::AddPrompt(const struct FInteractionPromptViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionPromptsContainerViewInterface", "AddPrompt");

	Params::InteractionPromptsContainerViewInterface_AddPrompt Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.RemoveAllPrompts
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IInteractionPromptsContainerViewInterface::RemoveAllPrompts()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionPromptsContainerViewInterface", "RemoveAllPrompts");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.RemovePrompt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ID                                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IInteractionPromptsContainerViewInterface::RemovePrompt(class FName ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InteractionPromptsContainerViewInterface", "RemovePrompt");

	Params::InteractionPromptsContainerViewInterface_RemovePrompt Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemBundleViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IItemBundleViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemBundleViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemBundleViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FItemBundleViewData              ItemBundleViewData                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IItemBundleViewInterface::SetData(const struct FItemBundleViewData& ItemBundleViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemBundleViewInterface", "SetData");

	Params::ItemBundleViewInterface_SetData Parms{};

	Parms.ItemBundleViewData = std::move(ItemBundleViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemInteractionViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IItemInteractionViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInteractionViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemInteractionViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FItemBundleViewData              ItemBundleData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IItemInteractionViewInterface::SetData(const struct FItemBundleViewData& ItemBundleData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemInteractionViewInterface", "SetData");

	Params::ItemInteractionViewInterface_SetData Parms{};

	Parms.ItemBundleData = std::move(ItemBundleData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IItemViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ItemViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FItemViewData                    ItemViewData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IItemViewInterface::SetData(const struct FItemViewData& ItemViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ItemViewInterface", "SetData");

	Params::ItemViewInterface_SetData Parms{};

	Parms.ItemViewData = std::move(ItemViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.KillerStatusViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IKillerStatusViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerStatusViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.KillerStatusViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerStatusViewData            Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IKillerStatusViewInterface::SetData(const struct FPlayerStatusViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerStatusViewInterface", "SetData");

	Params::KillerStatusViewInterface_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.KillerStatusViewInterface.SetPlayerNameVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IKillerStatusViewInterface::SetPlayerNameVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerStatusViewInterface", "SetPlayerNameVisibility");

	Params::KillerStatusViewInterface_SetPlayerNameVisibility Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LeaningArrowsViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELeanState                              LeanState                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILeaningArrowsViewInterface::SetData(const ELeanState& LeanState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LeaningArrowsViewInterface", "SetData");

	Params::LeaningArrowsViewInterface_SetData Parms{};

	Parms.LeanState = LeanState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadingScreenViewInterface.HasCustomWidgetForEvent
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventID                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILoadingScreenViewInterface::HasCustomWidgetForEvent(const class FName& EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingScreenViewInterface", "HasCustomWidgetForEvent");

	Params::LoadingScreenViewInterface_HasCustomWidgetForEvent Parms{};

	Parms.EventID = EventID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.LoadingScreenViewInterface.SetLoadingHint
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FLoadingHintViewData             LoadingHintData                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ILoadingScreenViewInterface::SetLoadingHint(const struct FLoadingHintViewData& LoadingHintData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingScreenViewInterface", "SetLoadingHint");

	Params::LoadingScreenViewInterface_SetLoadingHint Parms{};

	Parms.LoadingHintData = std::move(LoadingHintData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadingScreenViewInterface.SetLoadingScreenType
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ELoadingScreenType                      LoadingScreenType                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadingScreenViewInterface::SetLoadingScreenType(ELoadingScreenType LoadingScreenType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingScreenViewInterface", "SetLoadingScreenType");

	Params::LoadingScreenViewInterface_SetLoadingScreenType Parms{};

	Parms.LoadingScreenType = LoadingScreenType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadingScreenViewInterface.SetSpecialEventLoadingScreen
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             EventID                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadingScreenViewInterface::SetSpecialEventLoadingScreen(const class FName EventID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingScreenViewInterface", "SetSpecialEventLoadingScreen");

	Params::LoadingScreenViewInterface_SetSpecialEventLoadingScreen Parms{};

	Parms.EventID = EventID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadingScreenViewInterface.Setup
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ILoadingScreenViewInterface::Setup()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingScreenViewInterface", "Setup");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadingScreenViewInterface.ShowLoadingBannerImage
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsKiller                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadingScreenViewInterface::ShowLoadingBannerImage(const bool IsKiller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingScreenViewInterface", "ShowLoadingBannerImage");

	Params::LoadingScreenViewInterface_ShowLoadingBannerImage Parms{};

	Parms.IsKiller = IsKiller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadingScreenViewInterface.UpdateProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadingScreenViewInterface::UpdateProgress(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadingScreenViewInterface", "UpdateProgress");

	Params::LoadingScreenViewInterface_UpdateProgress Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetIsPerkSurfacingExperimentActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsPerkSurfacingExperimentActive                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadoutMenuViewInterface::SetIsPerkSurfacingExperimentActive(const bool IsPerkSurfacingExperimentActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuViewInterface", "SetIsPerkSurfacingExperimentActive");

	Params::LoadoutMenuViewInterface_SetIsPerkSurfacingExperimentActive Parms{};

	Parms.IsPerkSurfacingExperimentActive = IsPerkSurfacingExperimentActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetLoadoutMenuInventoryData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ULoadoutMenuViewData*>     LoadoutMenuSlotButtonData                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ELoadoutSlot                            SlotSelected                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsNextSlot                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadoutMenuViewInterface::SetLoadoutMenuInventoryData(const TArray<class ULoadoutMenuViewData*>& LoadoutMenuSlotButtonData, const ELoadoutSlot SlotSelected, const bool IsNextSlot)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuViewInterface", "SetLoadoutMenuInventoryData");

	Params::LoadoutMenuViewInterface_SetLoadoutMenuInventoryData Parms{};

	Parms.LoadoutMenuSlotButtonData = std::move(LoadoutMenuSlotButtonData);
	Parms.SlotSelected = SlotSelected;
	Parms.IsNextSlot = IsNextSlot;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetLoadoutMenuSlotData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class ULoadoutMenuViewData*>     LoadoutMenuSlotButtonData                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ILoadoutMenuViewInterface::SetLoadoutMenuSlotData(const TArray<class ULoadoutMenuViewData*>& LoadoutMenuSlotButtonData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuViewInterface", "SetLoadoutMenuSlotData");

	Params::LoadoutMenuViewInterface_SetLoadoutMenuSlotData Parms{};

	Parms.LoadoutMenuSlotButtonData = std::move(LoadoutMenuSlotButtonData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetSelectableCharacters
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           SelectableCharacters                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTabWidgetData                   SelectedCharacterData                                  (ConstParm, Parm, NativeAccessSpecifierPublic)
// int32                                   botIndex                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadoutMenuViewInterface::SetSelectableCharacters(const TArray<struct FTabWidgetData>& SelectableCharacters, const struct FTabWidgetData& SelectedCharacterData, const int32 botIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuViewInterface", "SetSelectableCharacters");

	Params::LoadoutMenuViewInterface_SetSelectableCharacters Parms{};

	Parms.SelectableCharacters = std::move(SelectableCharacters);
	Parms.SelectedCharacterData = std::move(SelectedCharacterData);
	Parms.botIndex = botIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetSelectedInventoryItem
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           SelectedIndex                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    IsUnequip                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadoutMenuViewInterface::SetSelectedInventoryItem(const TArray<int32>& SelectedIndex, const bool IsUnequip)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuViewInterface", "SetSelectedInventoryItem");

	Params::LoadoutMenuViewInterface_SetSelectedInventoryItem Parms{};

	Parms.SelectedIndex = std::move(SelectedIndex);
	Parms.IsUnequip = IsUnequip;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.UpdatePresetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<int32>                           PresetData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedPreset                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ILoadoutMenuViewInterface::UpdatePresetData(const TArray<int32>& PresetData, const int32 SelectedPreset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LoadoutMenuViewInterface", "UpdatePresetData");

	Params::LoadoutMenuViewInterface_UpdatePresetData Parms{};

	Parms.PresetData = std::move(PresetData);
	Parms.SelectedPreset = SelectedPreset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.LobbyCharactersViewInterface.GetStoreCharactersBioInterface
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersBioViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersBioViewInterface> ILobbyCharactersViewInterface::GetStoreCharactersBioInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyCharactersViewInterface", "GetStoreCharactersBioInterface");

	Params::LobbyCharactersViewInterface_GetStoreCharactersBioInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.LobbyCharactersViewInterface.GetStoreCharactersCustomizationsInterface
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersCustomizationsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersCustomizationsViewInterface> ILobbyCharactersViewInterface::GetStoreCharactersCustomizationsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyCharactersViewInterface", "GetStoreCharactersCustomizationsInterface");

	Params::LobbyCharactersViewInterface_GetStoreCharactersCustomizationsInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.LobbyCharactersViewInterface.GetStoreCharactersSelectionInterface
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersSelectionViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersSelectionViewInterface> ILobbyCharactersViewInterface::GetStoreCharactersSelectionInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyCharactersViewInterface", "GetStoreCharactersSelectionInterface");

	Params::LobbyCharactersViewInterface_GetStoreCharactersSelectionInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.LobbyCharactersViewInterface.GetWardrobeActionButtonsInterface
// (Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IWardrobeActionButtonsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IWardrobeActionButtonsViewInterface> ILobbyCharactersViewInterface::GetWardrobeActionButtonsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LobbyCharactersViewInterface", "GetWardrobeActionButtonsInterface");

	Params::LobbyCharactersViewInterface_GetWardrobeActionButtonsInterface Parms{};

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.LockedFeatureElementViewInterface.IsLockedFeature
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ILockedFeatureElementViewInterface::IsLockedFeature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("LockedFeatureElementViewInterface", "IsLockedFeature");

	Params::LockedFeatureElementViewInterface_IsLockedFeature Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.GetMainMenuButtonIndex
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 IMainMenuButtonViewInterface::GetMainMenuButtonIndex()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuButtonViewInterface", "GetMainMenuButtonIndex");

	Params::MainMenuButtonViewInterface_GetMainMenuButtonIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.GetMainMenuButtonType
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMainMenuButtonType IMainMenuButtonViewInterface::GetMainMenuButtonType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuButtonViewInterface", "GetMainMenuButtonType");

	Params::MainMenuButtonViewInterface_GetMainMenuButtonType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.SetMainMenuButtonIndex
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuButtonViewInterface::SetMainMenuButtonIndex(int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuButtonViewInterface", "SetMainMenuButtonIndex");

	Params::MainMenuButtonViewInterface_SetMainMenuButtonIndex Parms{};

	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.SetMainMenuButtonType
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     MainMenuButtonType                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuButtonViewInterface::SetMainMenuButtonType(EMainMenuButtonType MainMenuButtonType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuButtonViewInterface", "SetMainMenuButtonType");

	Params::MainMenuButtonViewInterface_SetMainMenuButtonType Parms{};

	Parms.MainMenuButtonType = MainMenuButtonType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.SetNotificationVisibility
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuButtonViewInterface::SetNotificationVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuButtonViewInterface", "SetNotificationVisibility");

	Params::MainMenuButtonViewInterface_SetNotificationVisibility Parms{};

	Parms.IsVisible = IsVisible;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.AddButtonTimerFlag
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerFlagViewData               TimerFlagViewData                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::AddButtonTimerFlag(EMainMenuButtonType ButtonType, const struct FTimerFlagViewData& TimerFlagViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "AddButtonTimerFlag");

	Params::MainMenuViewInterface_AddButtonTimerFlag Parms{};

	Parms.ButtonType = ButtonType;
	Parms.TimerFlagViewData = std::move(TimerFlagViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.ClearButtonTimerFlags
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::ClearButtonTimerFlags(EMainMenuButtonType ButtonType, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "ClearButtonTimerFlags");

	Params::MainMenuViewInterface_ClearButtonTimerFlags Parms{};

	Parms.ButtonType = ButtonType;
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.DisplayMainMenu
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    IsDisplayed                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::DisplayMainMenu(const bool IsDisplayed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "DisplayMainMenu");

	Params::MainMenuViewInterface_DisplayMainMenu Parms{};

	Parms.IsDisplayed = IsDisplayed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.ResetAllButtons
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IMainMenuViewInterface::ResetAllButtons()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "ResetAllButtons");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.ResetButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::ResetButton(EMainMenuButtonType ButtonType, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "ResetButton");

	Params::MainMenuViewInterface_ResetButton Parms{};

	Parms.ButtonType = ButtonType;
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonBetaFeatureVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetButtonBetaFeatureVisibility(EMainMenuButtonType ButtonType, bool IsVisible, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetButtonBetaFeatureVisibility");

	Params::MainMenuViewInterface_SetButtonBetaFeatureVisibility Parms{};

	Parms.ButtonType = ButtonType;
	Parms.IsVisible = IsVisible;
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonDecoration
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DecorationId                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetButtonDecoration(EMainMenuButtonType ButtonType, const class FString& DecorationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetButtonDecoration");

	Params::MainMenuViewInterface_SetButtonDecoration Parms{};

	Parms.ButtonType = ButtonType;
	Parms.DecorationId = std::move(DecorationId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonDecorationVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetButtonDecorationVisible(EMainMenuButtonType ButtonType, bool IsVisible, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetButtonDecorationVisible");

	Params::MainMenuViewInterface_SetButtonDecorationVisible Parms{};

	Parms.ButtonType = ButtonType;
	Parms.IsVisible = IsVisible;
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonDisableState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EButtonDisableState                     buttonDisableState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetButtonDisableState(const EMainMenuButtonType ButtonType, EButtonDisableState buttonDisableState, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetButtonDisableState");

	Params::MainMenuViewInterface_SetButtonDisableState Parms{};

	Parms.ButtonType = ButtonType;
	Parms.buttonDisableState = buttonDisableState;
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetButtonEnabled(const EMainMenuButtonType ButtonType, bool IsEnabled, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetButtonEnabled");

	Params::MainMenuViewInterface_SetButtonEnabled Parms{};

	Parms.ButtonType = ButtonType;
	Parms.IsEnabled = IsEnabled;
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonIcon
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           IconId                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetButtonIcon(EMainMenuButtonType ButtonType, const class FString& IconId, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetButtonIcon");

	Params::MainMenuViewInterface_SetButtonIcon Parms{};

	Parms.ButtonType = ButtonType;
	Parms.IconId = std::move(IconId);
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonNotificationVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetButtonNotificationVisibility(EMainMenuButtonType ButtonType, bool IsVisible, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetButtonNotificationVisibility");

	Params::MainMenuViewInterface_SetButtonNotificationVisibility Parms{};

	Parms.ButtonType = ButtonType;
	Parms.IsVisible = IsVisible;
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetButtonVisibility(EMainMenuButtonType ButtonType, bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetButtonVisibility");

	Params::MainMenuViewInterface_SetButtonVisibility Parms{};

	Parms.ButtonType = ButtonType;
	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetChallengesButtonVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetChallengesButtonVisibility(const bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetChallengesButtonVisibility");

	Params::MainMenuViewInterface_SetChallengesButtonVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetChangeAccountInputSwitcherPlayerNickname
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerNickname                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetChangeAccountInputSwitcherPlayerNickname(const class FString& PlayerNickname)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetChangeAccountInputSwitcherPlayerNickname");

	Params::MainMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname Parms{};

	Parms.PlayerNickname = std::move(PlayerNickname);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetChangeAccountInputSwitcherVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetChangeAccountInputSwitcherVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetChangeAccountInputSwitcherVisible");

	Params::MainMenuViewInterface_SetChangeAccountInputSwitcherVisible Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetLabelButton
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetLabelButton(EMainMenuButtonType ButtonType, const class FText& Label, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetLabelButton");

	Params::MainMenuViewInterface_SetLabelButton Parms{};

	Parms.ButtonType = ButtonType;
	Parms.Label = std::move(Label);
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetLTEButtons
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class FName>                     EventNames                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<EGameType>                       EventGameTypes                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetLTEButtons(const TArray<class FName>& EventNames, const TArray<EGameType>& EventGameTypes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetLTEButtons");

	Params::MainMenuViewInterface_SetLTEButtons Parms{};

	Parms.EventNames = std::move(EventNames);
	Parms.EventGameTypes = std::move(EventGameTypes);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetMatchmakingIncentive
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             GameMode                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPlayerRole                             Role                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PercentAmount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetMatchmakingIncentive(const class FName& GameMode, EPlayerRole Role, int32 PercentAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetMatchmakingIncentive");

	Params::MainMenuViewInterface_SetMatchmakingIncentive Parms{};

	Parms.GameMode = GameMode;
	Parms.Role = Role;
	Parms.PercentAmount = PercentAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetStoreButtonFlags
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    HasNewItem                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimerFlagViewData               RemainingLimitedItemTimeData                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTimerFlagViewData               RemainingSaleTimeData                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetStoreButtonFlags(bool HasNewItem, const struct FTimerFlagViewData& RemainingLimitedItemTimeData, const struct FTimerFlagViewData& RemainingSaleTimeData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetStoreButtonFlags");

	Params::MainMenuViewInterface_SetStoreButtonFlags Parms{};

	Parms.HasNewItem = HasNewItem;
	Parms.RemainingLimitedItemTimeData = std::move(RemainingLimitedItemTimeData);
	Parms.RemainingSaleTimeData = std::move(RemainingSaleTimeData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetSubtitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             Subtitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetSubtitle(EMainMenuButtonType ButtonType, const class FText& Subtitle, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetSubtitle");

	Params::MainMenuViewInterface_SetSubtitle Parms{};

	Parms.ButtonType = ButtonType;
	Parms.Subtitle = std::move(Subtitle);
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetSubtitleVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EMainMenuButtonType                     ButtonType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ButtonIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetSubtitleVisible(EMainMenuButtonType ButtonType, bool IsVisible, int32 ButtonIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetSubtitleVisible");

	Params::MainMenuViewInterface_SetSubtitleVisible Parms{};

	Parms.ButtonType = ButtonType;
	Parms.IsVisible = IsVisible;
	Parms.ButtonIndex = ButtonIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetUiTakeoverActive
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsActive                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetUiTakeoverActive(const bool IsActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetUiTakeoverActive");

	Params::MainMenuViewInterface_SetUiTakeoverActive Parms{};

	Parms.IsActive = IsActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetExitButtonEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetExitButtonEnabled(bool IsEnabled) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetExitButtonEnabled");

	Params::MainMenuViewInterface_SetExitButtonEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MainMenuViewInterface.SetMarketingInvitationPopupButtonIcon
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// ECurrencyType                           CurrencyType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMainMenuViewInterface::SetMarketingInvitationPopupButtonIcon(ECurrencyType CurrencyType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MainMenuViewInterface", "SetMarketingInvitationPopupButtonIcon");

	Params::MainMenuViewInterface_SetMarketingInvitationPopupButtonIcon Parms{};

	Parms.CurrencyType = CurrencyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MatchResultViewInterface.PlayAnimationSequence
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IMatchResultViewInterface::PlayAnimationSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchResultViewInterface", "PlayAnimationSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MatchResultViewInterface.SetMatchResultVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESlateVisibility                        Visibility                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMatchResultViewInterface::SetMatchResultVisibility(ESlateVisibility Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchResultViewInterface", "SetMatchResultVisibility");

	Params::MatchResultViewInterface_SetMatchResultVisibility Parms{};

	Parms.Visibility = Visibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MatchResultViewInterface.UpdateWidget
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FMatchResultViewData             Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IMatchResultViewInterface::UpdateWidget(const struct FMatchResultViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MatchResultViewInterface", "UpdateWidget");

	Params::MatchResultViewInterface_UpdateWidget Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.MultipleDisableStateButtonViewInterface.SetButtonDisableState
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// EButtonDisableState                     buttonDisableState                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IMultipleDisableStateButtonViewInterface::SetButtonDisableState(EButtonDisableState buttonDisableState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("MultipleDisableStateButtonViewInterface", "SetButtonDisableState");

	Params::MultipleDisableStateButtonViewInterface_SetButtonDisableState Parms{};

	Parms.buttonDisableState = buttonDisableState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.NewActiveTomePopupViewInterface.SetRemainingTime
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           RemainingTime                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void INewActiveTomePopupViewInterface::SetRemainingTime(const class FString& RemainingTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewActiveTomePopupViewInterface", "SetRemainingTime");

	Params::NewActiveTomePopupViewInterface_SetRemainingTime Parms{};

	Parms.RemainingTime = std::move(RemainingTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.NewActiveTomePopupViewInterface.SetRiftEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsEnabled                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void INewActiveTomePopupViewInterface::SetRiftEnabled(const bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NewActiveTomePopupViewInterface", "SetRiftEnabled");

	Params::NewActiveTomePopupViewInterface_SetRiftEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OfferingInteractionViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IOfferingInteractionViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OfferingInteractionViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OfferingInteractionViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FOfferingViewData                OfferingData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IOfferingInteractionViewInterface::SetData(const struct FOfferingViewData& OfferingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OfferingInteractionViewInterface", "SetData");

	Params::OfferingInteractionViewInterface_SetData Parms{};

	Parms.OfferingData = std::move(OfferingData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OfferingViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IOfferingViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OfferingViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OfferingViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FOfferingViewData                OfferingViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IOfferingViewInterface::SetData(const struct FOfferingViewData& OfferingViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OfferingViewInterface", "SetData");

	Params::OfferingViewInterface_SetData Parms{};

	Parms.OfferingViewData = std::move(OfferingViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetBackButtonVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetBackButtonVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuViewInterface", "SetBackButtonVisible");

	Params::OnboardingMenuViewInterface_SetBackButtonVisible Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetChangeAccountInputSwitcherPlayerNickname
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           PlayerNickname                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetChangeAccountInputSwitcherPlayerNickname(const class FString& PlayerNickname)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuViewInterface", "SetChangeAccountInputSwitcherPlayerNickname");

	Params::OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname Parms{};

	Parms.PlayerNickname = std::move(PlayerNickname);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetChangeAccountInputSwitcherVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetChangeAccountInputSwitcherVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuViewInterface", "SetChangeAccountInputSwitcherVisible");

	Params::OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetFirstTimeUserExperience
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Ftue                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetFirstTimeUserExperience(bool Ftue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuViewInterface", "SetFirstTimeUserExperience");

	Params::OnboardingMenuViewInterface_SetFirstTimeUserExperience Parms{};

	Parms.Ftue = Ftue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetOnboardingMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EOnboardingMenuState                    MenuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetOnboardingMenuState(EOnboardingMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuViewInterface", "SetOnboardingMenuState");

	Params::OnboardingMenuViewInterface_SetOnboardingMenuState Parms{};

	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetQuitGameButtonVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetQuitGameButtonVisible(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuViewInterface", "SetQuitGameButtonVisible");

	Params::OnboardingMenuViewInterface_SetQuitGameButtonVisible Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetUIEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingMenuViewInterface::SetUIEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuViewInterface", "SetUIEnabled");

	Params::OnboardingMenuViewInterface_SetUIEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.GetGameManualInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IGameManualViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IGameManualViewInterface> IOnboardingMenuViewInterface::GetGameManualInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuViewInterface", "GetGameManualInterface");

	Params::OnboardingMenuViewInterface_GetGameManualInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.GetOnboardingTutorialInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IOnboardingTutorialViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IOnboardingTutorialViewInterface> IOnboardingMenuViewInterface::GetOnboardingTutorialInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingMenuViewInterface", "GetOnboardingTutorialInterface");

	Params::OnboardingMenuViewInterface_GetOnboardingTutorialInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetCanShowGoToMainMenuTutorialButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    CanShowGoToMainMenuTutorialButton                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetCanShowGoToMainMenuTutorialButton(bool CanShowGoToMainMenuTutorialButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingTutorialViewInterface", "SetCanShowGoToMainMenuTutorialButton");

	Params::OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton Parms{};

	Parms.CanShowGoToMainMenuTutorialButton = CanShowGoToMainMenuTutorialButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetIsKillSwitch
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsKillSwitch                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetIsKillSwitch(bool IsKillSwitch)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingTutorialViewInterface", "SetIsKillSwitch");

	Params::OnboardingTutorialViewInterface_SetIsKillSwitch Parms{};

	Parms.IsKillSwitch = IsKillSwitch;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetProgress
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FOnboardingStepViewData>  Progress                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetProgress(const TArray<struct FOnboardingStepViewData>& Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingTutorialViewInterface", "SetProgress");

	Params::OnboardingTutorialViewInterface_SetProgress Parms{};

	Parms.Progress = std::move(Progress);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetTutorialProgressionFeedbacks
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CompletedStepId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsOnboardingEnabled                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetTutorialProgressionFeedbacks(const class FString& CompletedStepId, const bool IsOnboardingEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingTutorialViewInterface", "SetTutorialProgressionFeedbacks");

	Params::OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks Parms{};

	Parms.CompletedStepId = std::move(CompletedStepId);
	Parms.IsOnboardingEnabled = IsOnboardingEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetUIEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::SetUIEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingTutorialViewInterface", "SetUIEnabled");

	Params::OnboardingTutorialViewInterface_SetUIEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.StopLoadingSpinner
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IOnboardingTutorialViewInterface::StopLoadingSpinner()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingTutorialViewInterface", "StopLoadingSpinner");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.UpdateProgress
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FOnboardingStepViewData>  before                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FOnboardingStepViewData>  After                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FRewardWrapperViewData>   Rewards                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IOnboardingTutorialViewInterface::UpdateProgress(const TArray<struct FOnboardingStepViewData>& before, const TArray<struct FOnboardingStepViewData>& After, const TArray<struct FRewardWrapperViewData>& Rewards)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OnboardingTutorialViewInterface", "UpdateProgress");

	Params::OnboardingTutorialViewInterface_UpdateProgress Parms{};

	Parms.before = std::move(before);
	Parms.After = std::move(After);
	Parms.Rewards = std::move(Rewards);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PerkViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPerkViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerkViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PerkViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPerkViewData                    PerkViewData                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPerkViewInterface::SetData(const struct FPerkViewData& PerkViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerkViewInterface", "SetData");

	Params::PerkViewInterface_SetData Parms{};

	Parms.PerkViewData = std::move(PerkViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PerkViewInterface.TriggerRandomSuccess
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPerkRandomSuccessViewData       RandomSuccessViewData                                  (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IPerkViewInterface::TriggerRandomSuccess(const struct FPerkRandomSuccessViewData& RandomSuccessViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerkViewInterface", "TriggerRandomSuccess");

	Params::PerkViewInterface_TriggerRandomSuccess Parms{};

	Parms.RandomSuccessViewData = std::move(RandomSuccessViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.PerkViewInterface.UpdatePerkCooldown
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   CooldownValue                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsRechargeable                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsRechargeableActive                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPerkViewInterface::UpdatePerkCooldown(float CooldownValue, bool IsRechargeable, bool IsRechargeableActive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PerkViewInterface", "UpdatePerkCooldown");

	Params::PerkViewInterface_UpdatePerkCooldown Parms{};

	Parms.CooldownValue = CooldownValue;
	Parms.IsRechargeable = IsRechargeable;
	Parms.IsRechargeableActive = IsRechargeableActive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PingStatusViewInterface.InitPingStatus
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NumberOfSurvivors                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPingStatusViewInterface::InitPingStatus(const int32 NumberOfSurvivors)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingStatusViewInterface", "InitPingStatus");

	Params::PingStatusViewInterface_InitPingStatus Parms{};

	Parms.NumberOfSurvivors = NumberOfSurvivors;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PingStatusViewInterface.SetKillerConnectionQualityStatus
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EConnectionQuality                      KillerConnectionQuality                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPingStatusViewInterface::SetKillerConnectionQualityStatus(const EConnectionQuality& KillerConnectionQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingStatusViewInterface", "SetKillerConnectionQualityStatus");

	Params::PingStatusViewInterface_SetKillerConnectionQualityStatus Parms{};

	Parms.KillerConnectionQuality = KillerConnectionQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PingStatusViewInterface.SetLocalPacketLossStatus
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EConnectionQuality                      LocalPacketLoss                                        (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPingStatusViewInterface::SetLocalPacketLossStatus(const EConnectionQuality& LocalPacketLoss)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingStatusViewInterface", "SetLocalPacketLossStatus");

	Params::PingStatusViewInterface_SetLocalPacketLossStatus Parms{};

	Parms.LocalPacketLoss = LocalPacketLoss;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PingStatusViewInterface.SetLocalPingStatus
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EConnectionQuality                      LocalPing                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPingStatusViewInterface::SetLocalPingStatus(const EConnectionQuality& LocalPing)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PingStatusViewInterface", "SetLocalPingStatus");

	Params::PingStatusViewInterface_SetLocalPingStatus Parms{};

	Parms.LocalPing = LocalPing;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerCardAnimationViewInterface.OnPlayAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerCardAnimationViewInterface::OnPlayAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCardAnimationViewInterface", "OnPlayAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewInterfaces.PlayerCardAnimationViewInterface.OnStopAnimation
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerCardAnimationViewInterface::OnStopAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCardAnimationViewInterface", "OnStopAnimation");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewInterfaces.PlayerCardAnimationViewInterface.SetRetainerBoxMaterial
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        bannerTexture                                          (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerCardAnimationViewInterface::SetRetainerBoxMaterial(const TSoftObjectPtr<class UTexture2D>& bannerTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCardAnimationViewInterface", "SetRetainerBoxMaterial");

	Params::PlayerCardAnimationViewInterface_SetRetainerBoxMaterial Parms{};

	Parms.bannerTexture = bannerTexture;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.PlayerCardAnimationViewInterface.SetRetainerBoxOpacity
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Opacity                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerCardAnimationViewInterface::SetRetainerBoxOpacity(const float Opacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCardAnimationViewInterface", "SetRetainerBoxOpacity");

	Params::PlayerCardAnimationViewInterface_SetRetainerBoxOpacity Parms{};

	Parms.Opacity = Opacity;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.PlayerCardViewInterface.SetData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerCardViewData              PlayerCardData                                         (ConstParm, Parm, NativeAccessSpecifierPublic)

void IPlayerCardViewInterface::SetData(const struct FPlayerCardViewData& PlayerCardData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerCardViewInterface", "SetData");

	Params::PlayerCardViewInterface_SetData Parms{};

	Parms.PlayerCardData = std::move(PlayerCardData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.FullUpdateCurrency
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCurrencyLabelViewData           ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::FullUpdateCurrency(const struct FCurrencyLabelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "FullUpdateCurrency");

	Params::PlayerProfileViewInterface_FullUpdateCurrency Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.HidePlayerCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::HidePlayerCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "HidePlayerCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.HidePlayerName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::HidePlayerName()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "HidePlayerName");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.HideUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::HideUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "HideUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerCard
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerCardViewData              Badge                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPlayerCardViewData              Banner                                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::SetPlayerCard(const struct FPlayerCardViewData& Badge, const struct FPlayerCardViewData& Banner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "SetPlayerCard");

	Params::PlayerProfileViewInterface_SetPlayerCard Parms{};

	Parms.Badge = std::move(Badge);
	Parms.Banner = std::move(Banner);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerCardAnimationMode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCardAnimationMode                PlayerCardAnimationMode                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::SetPlayerCardAnimationMode(const EPlayerCardAnimationMode PlayerCardAnimationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "SetPlayerCardAnimationMode");

	Params::PlayerProfileViewInterface_SetPlayerCardAnimationMode Parms{};

	Parms.PlayerCardAnimationMode = PlayerCardAnimationMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerCardBannerOpacity
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Opacity                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::SetPlayerCardBannerOpacity(float Opacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "SetPlayerCardBannerOpacity");

	Params::PlayerProfileViewInterface_SetPlayerCardBannerOpacity Parms{};

	Parms.Opacity = Opacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerName
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             PlayerNameText                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::SetPlayerName(const class FText& PlayerNameText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "SetPlayerName");

	Params::PlayerProfileViewInterface_SetPlayerName Parms{};

	Parms.PlayerNameText = std::move(PlayerNameText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerProfileEnabled
// (Native, Public)
// Parameters:
// bool                                    IsEnabled                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::SetPlayerProfileEnabled(bool IsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "SetPlayerProfileEnabled");

	Params::PlayerProfileViewInterface_SetPlayerProfileEnabled Parms{};

	Parms.IsEnabled = IsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetWalletData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FCurrencyLabelViewData>   WalletData                                             (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::SetWalletData(const TArray<struct FCurrencyLabelViewData>& WalletData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "SetWalletData");

	Params::PlayerProfileViewInterface_SetWalletData Parms{};

	Parms.WalletData = std::move(WalletData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetWalletVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::SetWalletVisibility(const bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "SetWalletVisibility");

	Params::PlayerProfileViewInterface_SetWalletVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.ShowPlayerCard
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::ShowPlayerCard()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "ShowPlayerCard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.ShowUI
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerProfileViewInterface::ShowUI()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "ShowUI");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.UpdatePlayerCardButton
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsProfileMenuContextEntered                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::UpdatePlayerCardButton(const bool IsProfileMenuContextEntered)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "UpdatePlayerCardButton");

	Params::PlayerProfileViewInterface_UpdatePlayerCardButton Parms{};

	Parms.IsProfileMenuContextEntered = IsProfileMenuContextEntered;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.UpdatePlayerProfileOpacity
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFocused                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::UpdatePlayerProfileOpacity(const bool IsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "UpdatePlayerProfileOpacity");

	Params::PlayerProfileViewInterface_UpdatePlayerProfileOpacity Parms{};

	Parms.IsFocused = IsFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerProfileViewInterface.UpdateWallet
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ECurrencyType                           Type                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NewBalance                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PreviousBalance                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerProfileViewInterface::UpdateWallet(const ECurrencyType Type, int32 NewBalance, int32 PreviousBalance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerProfileViewInterface", "UpdateWallet");

	Params::PlayerProfileViewInterface_UpdateWallet Parms{};

	Parms.Type = Type;
	Parms.NewBalance = NewBalance;
	Parms.PreviousBalance = PreviousBalance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusesContainerViewInterface.GetPlayerStatusInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Param_Index                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TScriptInterface<class IPlayerStatusViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IPlayerStatusViewInterface> IPlayerStatusesContainerViewInterface::GetPlayerStatusInterface(int32 Param_Index)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusesContainerViewInterface", "GetPlayerStatusInterface");

	Params::PlayerStatusesContainerViewInterface_GetPlayerStatusInterface Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.PlayerStatusesContainerViewInterface.SetPlayerStatusesCount
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   TotalCount                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusesContainerViewInterface::SetPlayerStatusesCount(const int32 TotalCount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusesContainerViewInterface", "SetPlayerStatusesCount");

	Params::PlayerStatusesContainerViewInterface_SetPlayerStatusesCount Parms{};

	Parms.TotalCount = TotalCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.DimObsessionAndChaseClaws
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    DisableLeftClaw                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    DisableRightClaw                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::DimObsessionAndChaseClaws(const bool DisableLeftClaw, const bool DisableRightClaw)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "DimObsessionAndChaseClaws");

	Params::PlayerStatusViewInterface_DimObsessionAndChaseClaws Parms{};

	Parms.DisableLeftClaw = DisableLeftClaw;
	Parms.DisableRightClaw = DisableRightClaw;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.EnableChasesMode
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsChased                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::EnableChasesMode(const bool IsChased)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "EnableChasesMode");

	Params::PlayerStatusViewInterface_EnableChasesMode Parms{};

	Parms.IsChased = IsChased;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.HideSurvivorActivity
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::HideSurvivorActivity()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "HideSurvivorActivity");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.PlayHookEscapeFailedAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::PlayHookEscapeFailedAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "PlayHookEscapeFailedAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.PlayTimerAnimation
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::PlayTimerAnimation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "PlayTimerAnimation");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetCampProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsLocalPlayerAKiller                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetCampProgress(float Value, bool IsLocalPlayerAKiller)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "SetCampProgress");

	Params::PlayerStatusViewInterface_SetCampProgress Parms{};

	Parms.Value = Value;
	Parms.IsLocalPlayerAKiller = IsLocalPlayerAKiller;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerStatusViewData            Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetData(const struct FPlayerStatusViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "SetData");

	Params::PlayerStatusViewInterface_SetData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetKiller
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     KillerTag                                              (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetKiller(const struct FGameplayTag& KillerTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "SetKiller");

	Params::PlayerStatusViewInterface_SetKiller Parms{};

	Parms.KillerTag = std::move(KillerTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetPlayerNameVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Visible                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetPlayerNameVisibility(bool Visible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "SetPlayerNameVisibility");

	Params::PlayerStatusViewInterface_SetPlayerNameVisibility Parms{};

	Parms.Visible = Visible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetTimerProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsDeepWound                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::SetTimerProgress(float Value, bool IsDeepWound)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "SetTimerProgress");

	Params::PlayerStatusViewInterface_SetTimerProgress Parms{};

	Parms.Value = Value;
	Parms.IsDeepWound = IsDeepWound;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.ShowSurvivorActivity
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ActivityIcon                                           (ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShouldDisplayProgress                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::ShowSurvivorActivity(const TSoftObjectPtr<class UTexture2D>& ActivityIcon, const bool ShouldDisplayProgress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "ShowSurvivorActivity");

	Params::PlayerStatusViewInterface_ShowSurvivorActivity Parms{};

	Parms.ActivityIcon = ActivityIcon;
	Parms.ShouldDisplayProgress = ShouldDisplayProgress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.TriggerAfflictionHit
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPlayerStatusViewInterface::TriggerAfflictionHit()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "TriggerAfflictionHit");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.UpdateSurvivorActivityProgress
// (Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Progress                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::UpdateSurvivorActivityProgress(const float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "UpdateSurvivorActivityProgress");

	Params::PlayerStatusViewInterface_UpdateSurvivorActivityProgress Parms{};

	Parms.Progress = Progress;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.PlayerStatusViewInterface.UpdateSurvivorSpecificPingIcon
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EConnectionQuality                      ConnectionQuality                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IPlayerStatusViewInterface::UpdateSurvivorSpecificPingIcon(const EConnectionQuality& ConnectionQuality)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PlayerStatusViewInterface", "UpdateSurvivorSpecificPingIcon");

	Params::PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon Parms{};

	Parms.ConnectionQuality = ConnectionQuality;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PowerViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IPowerViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PowerViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.PowerViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPowerViewData                   PowerViewData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IPowerViewInterface::SetData(const struct FPowerViewData& PowerViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PowerViewInterface", "SetData");

	Params::PowerViewInterface_SetData Parms{};

	Parms.PowerViewData = std::move(PowerViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuStatsViewInterface.SetPlayerLevel
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FPlayerLevelViewData             ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IProfileMenuStatsViewInterface::SetPlayerLevel(const struct FPlayerLevelViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuStatsViewInterface", "SetPlayerLevel");

	Params::ProfileMenuStatsViewInterface_SetPlayerLevel Parms{};

	Parms.ViewData = std::move(ViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.ProfileMenuStatsViewInterface.SetPlayerRanks
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRankViewData                    SurvivorViewData                                       (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRankViewData                    KillerViewData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IProfileMenuStatsViewInterface::SetPlayerRanks(const struct FRankViewData& SurvivorViewData, const struct FRankViewData& KillerViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuStatsViewInterface", "SetPlayerRanks");

	Params::ProfileMenuStatsViewInterface_SetPlayerRanks Parms{};

	Parms.SurvivorViewData = std::move(SurvivorViewData);
	Parms.KillerViewData = std::move(KillerViewData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetIsFocused
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsFocused                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuViewInterface::SetIsFocused(const bool IsFocused)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "SetIsFocused");

	Params::ProfileMenuViewInterface_SetIsFocused Parms{};

	Parms.IsFocused = IsFocused;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EProfileMenuState                       MenuState                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuViewInterface::SetMenuState(EProfileMenuState MenuState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "SetMenuState");

	Params::ProfileMenuViewInterface_SetMenuState Parms{};

	Parms.MenuState = MenuState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetSubtitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Subtitle                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IProfileMenuViewInterface::SetSubtitle(const class FText& Subtitle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "SetSubtitle");

	Params::ProfileMenuViewInterface_SetSubtitle Parms{};

	Parms.Subtitle = std::move(Subtitle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetTabEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuViewInterface::SetTabEnabled(int32 Key, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "SetTabEnabled");

	Params::ProfileMenuViewInterface_SetTabEnabled Parms{};

	Parms.Key = Key;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuViewInterface::SetTabsData(const TArray<struct FTabWidgetData>& TabsData, int32 SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "SetTabsData");

	Params::ProfileMenuViewInterface_SetTabsData Parms{};

	Parms.TabsData = std::move(TabsData);
	Parms.SelectedKey = SelectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetTabSelected
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IProfileMenuViewInterface::SetTabSelected(int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "SetTabSelected");

	Params::ProfileMenuViewInterface_SetTabSelected Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetTitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Title                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IProfileMenuViewInterface::SetTitle(const class FText& Title)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "SetTitle");

	Params::ProfileMenuViewInterface_SetTitle Parms{};

	Parms.Title = std::move(Title);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.GetProfileMenuBadgeInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IProfileMenuCustomizationViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IProfileMenuCustomizationViewInterface> IProfileMenuViewInterface::GetProfileMenuBadgeInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "GetProfileMenuBadgeInterface");

	Params::ProfileMenuViewInterface_GetProfileMenuBadgeInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.GetProfileMenuBannerInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IProfileMenuCustomizationViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IProfileMenuCustomizationViewInterface> IProfileMenuViewInterface::GetProfileMenuBannerInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "GetProfileMenuBannerInterface");

	Params::ProfileMenuViewInterface_GetProfileMenuBannerInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ProfileMenuViewInterface.GetProfileMenuStatsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IProfileMenuStatsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IProfileMenuStatsViewInterface> IProfileMenuViewInterface::GetProfileMenuStatsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ProfileMenuViewInterface", "GetProfileMenuStatsInterface");

	Params::ProfileMenuViewInterface_GetProfileMenuStatsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.ScaleformTooltipViewInterface.OnLoadoutTooltipHovered
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTooltipTriggerGeometry          TriggeredGeometry                                      (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLoadoutTooltipData              TooltipData                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IScaleformTooltipViewInterface::OnLoadoutTooltipHovered(const struct FTooltipTriggerGeometry& TriggeredGeometry, const struct FLoadoutTooltipData& TooltipData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScaleformTooltipViewInterface", "OnLoadoutTooltipHovered");

	Params::ScaleformTooltipViewInterface_OnLoadoutTooltipHovered Parms{};

	Parms.TriggeredGeometry = std::move(TriggeredGeometry);
	Parms.TooltipData = std::move(TooltipData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ScaleformTooltipViewInterface.OnTooltipTargetUnhovered
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IScaleformTooltipViewInterface::OnTooltipTargetUnhovered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ScaleformTooltipViewInterface", "OnTooltipTargetUnhovered");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SettingsViewInterface.SetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EOverlayTabs                            State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISettingsViewInterface::SetMenuState(EOverlayTabs State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsViewInterface", "SetMenuState");

	Params::SettingsViewInterface_SetMenuState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SettingsViewInterface.GetSettingsMatchDetailsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class ISettingsMatchDetailsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class ISettingsMatchDetailsViewInterface> ISettingsViewInterface::GetSettingsMatchDetailsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SettingsViewInterface", "GetSettingsMatchDetailsInterface");

	Params::SettingsViewInterface_GetSettingsMatchDetailsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.ApplyScaleFactor
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Scale                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::ApplyScaleFactor(float Scale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillCheckViewInterface", "ApplyScaleFactor");

	Params::SkillCheckViewInterface_ApplyScaleFactor Parms{};

	Parms.Scale = Scale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.HideSkillCheck
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ISkillCheckViewInterface::HideSkillCheck()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillCheckViewInterface", "HideSkillCheck");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheck
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSkillCheckViewData              SkillCheckData                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::ShowSkillCheck(const struct FSkillCheckViewData& SkillCheckData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillCheckViewInterface", "ShowSkillCheck");

	Params::SkillCheckViewInterface_ShowSkillCheck Parms{};

	Parms.SkillCheckData = std::move(SkillCheckData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheckFail
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ISkillCheckViewInterface::ShowSkillCheckFail()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillCheckViewInterface", "ShowSkillCheckFail");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheckSuccess
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBonus                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::ShowSkillCheckSuccess(bool IsBonus)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillCheckViewInterface", "ShowSkillCheckSuccess");

	Params::SkillCheckViewInterface_ShowSkillCheckSuccess Parms{};

	Parms.IsBonus = IsBonus;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.UpdatePositionOffset
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   X                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Y                                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::UpdatePositionOffset(int32 X, int32 Y)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillCheckViewInterface", "UpdatePositionOffset");

	Params::SkillCheckViewInterface_UpdatePositionOffset Parms{};

	Parms.X = X;
	Parms.Y = Y;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillCheckViewInterface.UpdateProgress
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISkillCheckViewInterface::UpdateProgress(float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillCheckViewInterface", "UpdateProgress");

	Params::SkillCheckViewInterface_UpdateProgress Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillViewInterface.ClearData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ISkillViewInterface::ClearData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillViewInterface", "ClearData");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SkillViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FSkillViewData                   SkillViewData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ISkillViewInterface::SetData(const struct FSkillViewData& SkillViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SkillViewInterface", "SetData");

	Params::SkillViewInterface_SetData Parms{};

	Parms.SkillViewData = std::move(SkillViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StartSequenceViewInterface.HideStartSequence
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IStartSequenceViewInterface::HideStartSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StartSequenceViewInterface", "HideStartSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StartSequenceViewInterface.ShowStartSequence
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStartSequenceViewData           Data                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStartSequenceViewInterface::ShowStartSequence(const struct FStartSequenceViewData& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StartSequenceViewInterface", "ShowStartSequence");

	Params::StartSequenceViewInterface_ShowStartSequence Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StartSequenceViewInterface.GetIsStartSequenceVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IStartSequenceViewInterface::GetIsStartSequenceVisible() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StartSequenceViewInterface", "GetIsStartSequenceVisible");

	Params::StartSequenceViewInterface_GetIsStartSequenceVisible Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.ActivateSubTabContent
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   State                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreBaseSubTabsViewInterface::ActivateSubTabContent(const int32 State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreBaseSubTabsViewInterface", "ActivateSubTabContent");

	Params::StoreBaseSubTabsViewInterface_ActivateSubTabContent Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.HideSubTab
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SubTabId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreBaseSubTabsViewInterface::HideSubTab(const int32 SubTabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreBaseSubTabsViewInterface", "HideSubTab");

	Params::StoreBaseSubTabsViewInterface_HideSubTab Parms{};

	Parms.SubTabId = SubTabId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.IsSubTabVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SubTabId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IStoreBaseSubTabsViewInterface::IsSubTabVisible(const int32 SubTabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreBaseSubTabsViewInterface", "IsSubTabVisible");

	Params::StoreBaseSubTabsViewInterface_IsSubTabVisible Parms{};

	Parms.SubTabId = SubTabId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.SelectSubTab
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SelectedKey                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreBaseSubTabsViewInterface::SelectSubTab(const int32 SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreBaseSubTabsViewInterface", "SelectSubTab");

	Params::StoreBaseSubTabsViewInterface_SelectSubTab Parms{};

	Parms.SelectedKey = SelectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.SetSubTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreBaseSubTabsViewInterface::SetSubTabsData(const TArray<struct FTabWidgetData>& TabsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreBaseSubTabsViewInterface", "SetSubTabsData");

	Params::StoreBaseSubTabsViewInterface_SetSubTabsData Parms{};

	Parms.TabsData = std::move(TabsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.ShowSubTab
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SubTabId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreBaseSubTabsViewInterface::ShowSubTab(const int32 SubTabId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreBaseSubTabsViewInterface", "ShowSubTab");

	Params::StoreBaseSubTabsViewInterface_ShowSubTab Parms{};

	Parms.SubTabId = SubTabId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.UnselectCurrentTab
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IStoreBaseSubTabsViewInterface::UnselectCurrentTab()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreBaseSubTabsViewInterface", "UnselectCurrentTab");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.UpdateTabData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   SubTabId                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTabWidgetData                   TabWidgetData                                          (ConstParm, Parm, NativeAccessSpecifierPublic)

void IStoreBaseSubTabsViewInterface::UpdateTabData(const int32 SubTabId, const struct FTabWidgetData& TabWidgetData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreBaseSubTabsViewInterface", "UpdateTabData");

	Params::StoreBaseSubTabsViewInterface_UpdateTabData Parms{};

	Parms.SubTabId = SubTabId;
	Parms.TabWidgetData = std::move(TabWidgetData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersBioViewInterface.SetData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCharacterBioViewData            CharacterBioViewData                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreCharactersBioViewInterface::SetData(const struct FCharacterBioViewData& CharacterBioViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersBioViewInterface", "SetData");

	Params::StoreCharactersBioViewInterface_SetData Parms{};

	Parms.CharacterBioViewData = std::move(CharacterBioViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersFilterViewInterface.SetFiltersState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FStoreCharactersFiltersData      NewFiltersData                                         (Parm, NativeAccessSpecifierPublic)

void IStoreCharactersFilterViewInterface::SetFiltersState(const struct FStoreCharactersFiltersData& NewFiltersData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersFilterViewInterface", "SetFiltersState");

	Params::StoreCharactersFilterViewInterface_SetFiltersState Parms{};

	Parms.NewFiltersData = std::move(NewFiltersData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersFilterViewInterface.SetFiltersVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShowAvailabilityFilter                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowRarityFilters                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShowClearFiltersButton                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreCharactersFilterViewInterface::SetFiltersVisibility(bool ShowAvailabilityFilter, bool ShowRarityFilters, bool ShowClearFiltersButton)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersFilterViewInterface", "SetFiltersVisibility");

	Params::StoreCharactersFilterViewInterface_SetFiltersVisibility Parms{};

	Parms.ShowAvailabilityFilter = ShowAvailabilityFilter;
	Parms.ShowRarityFilters = ShowRarityFilters;
	Parms.ShowClearFiltersButton = ShowClearFiltersButton;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersViewInterface.SetCharacterData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             CharacterName                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreCharactersViewInterface::SetCharacterData(const class FText& CharacterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersViewInterface", "SetCharacterData");

	Params::StoreCharactersViewInterface_SetCharacterData Parms{};

	Parms.CharacterName = std::move(CharacterName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersViewInterface.SetCharacterNameVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    ShowCharacterName                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreCharactersViewInterface::SetCharacterNameVisibility(const bool ShowCharacterName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersViewInterface", "SetCharacterNameVisibility");

	Params::StoreCharactersViewInterface_SetCharacterNameVisibility Parms{};

	Parms.ShowCharacterName = ShowCharacterName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetStoreCharactersBioInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersBioViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersBioViewInterface> IStoreCharactersViewInterface::GetStoreCharactersBioInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersViewInterface", "GetStoreCharactersBioInterface");

	Params::StoreCharactersViewInterface_GetStoreCharactersBioInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetStoreCharactersCustomizationsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersCustomizationsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersCustomizationsViewInterface> IStoreCharactersViewInterface::GetStoreCharactersCustomizationsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersViewInterface", "GetStoreCharactersCustomizationsInterface");

	Params::StoreCharactersViewInterface_GetStoreCharactersCustomizationsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetStoreCharactersSelectionInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersSelectionViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersSelectionViewInterface> IStoreCharactersViewInterface::GetStoreCharactersSelectionInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersViewInterface", "GetStoreCharactersSelectionInterface");

	Params::StoreCharactersViewInterface_GetStoreCharactersSelectionInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetStoreRightStickControllableViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreRightStickControllableViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreRightStickControllableViewInterface> IStoreCharactersViewInterface::GetStoreRightStickControllableViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersViewInterface", "GetStoreRightStickControllableViewInterface");

	Params::StoreCharactersViewInterface_GetStoreRightStickControllableViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetWardrobeActionButtonsViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IWardrobeActionButtonsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IWardrobeActionButtonsViewInterface> IStoreCharactersViewInterface::GetWardrobeActionButtonsViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCharactersViewInterface", "GetWardrobeActionButtonsViewInterface");

	Params::StoreCharactersViewInterface_GetWardrobeActionButtonsViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionsCustomizationsViewInterface.GetStoreCharactersSelectionInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersCustomizationsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersCustomizationsViewInterface> IStoreCollectionsCustomizationsViewInterface::GetStoreCharactersSelectionInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionsCustomizationsViewInterface", "GetStoreCharactersSelectionInterface");

	Params::StoreCollectionsCustomizationsViewInterface_GetStoreCharactersSelectionInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionsCustomizationsViewInterface.GetStoreRightStickControllableViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreRightStickControllableViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreRightStickControllableViewInterface> IStoreCollectionsCustomizationsViewInterface::GetStoreRightStickControllableViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionsCustomizationsViewInterface", "GetStoreRightStickControllableViewInterface");

	Params::StoreCollectionsCustomizationsViewInterface_GetStoreRightStickControllableViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionsCustomizationsViewInterface.GetWardrobeActionButtonsViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IWardrobeActionButtonsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IWardrobeActionButtonsViewInterface> IStoreCollectionsCustomizationsViewInterface::GetWardrobeActionButtonsViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionsCustomizationsViewInterface", "GetWardrobeActionButtonsViewInterface");

	Params::StoreCollectionsCustomizationsViewInterface_GetWardrobeActionButtonsViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionsListViewInterface.GetSearchBarViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class ISearchBarViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class ISearchBarViewInterface> IStoreCollectionsListViewInterface::GetSearchBarViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionsListViewInterface", "GetSearchBarViewInterface");

	Params::StoreCollectionsListViewInterface_GetSearchBarViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionViewData.HasHeroImage
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreCollectionViewData::HasHeroImage() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionViewData", "HasHeroImage");

	Params::StoreCollectionViewData_HasHeroImage Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionViewData.HasHeroVideo
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreCollectionViewData::HasHeroVideo() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionViewData", "HasHeroVideo");

	Params::StoreCollectionViewData_HasHeroVideo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionViewData.IsCollectionActive
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreCollectionViewData::IsCollectionActive() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionViewData", "IsCollectionActive");

	Params::StoreCollectionViewData_IsCollectionActive Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionViewData.IsCollectionHidden
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreCollectionViewData::IsCollectionHidden() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionViewData", "IsCollectionHidden");

	Params::StoreCollectionViewData_IsCollectionHidden Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreCollectionViewData.IsSpecial
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreCollectionViewData::IsSpecial() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreCollectionViewData", "IsSpecial");

	Params::StoreCollectionViewData_IsSpecial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedChapterPack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreChapterPackViewData*        ViewData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreFeaturedViewInterface::InitFeaturedChapterPack(class UStoreChapterPackViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreFeaturedViewInterface", "InitFeaturedChapterPack");

	Params::StoreFeaturedViewInterface_InitFeaturedChapterPack Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedCharacters
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreCharacterItemViewData*>CharacterViewDataArray                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreFeaturedViewInterface::InitFeaturedCharacters(const TArray<class UStoreCharacterItemViewData*>& CharacterViewDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreFeaturedViewInterface", "InitFeaturedCharacters");

	Params::StoreFeaturedViewInterface_InitFeaturedCharacters Parms{};

	Parms.CharacterViewDataArray = std::move(CharacterViewDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedCrossPromotion
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FCrossPromoCampaignViewData      ViewData                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreFeaturedViewInterface::InitFeaturedCrossPromotion(const struct FCrossPromoCampaignViewData& ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreFeaturedViewInterface", "InitFeaturedCrossPromotion");

	Params::StoreFeaturedViewInterface_InitFeaturedCrossPromotion Parms{};

	Parms.ViewData = std::move(ViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedCustomizationItems
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreCustomizationItemViewData*>ViewDataArray                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreFeaturedViewInterface::InitFeaturedCustomizationItems(const TArray<class UStoreCustomizationItemViewData*>& ViewDataArray)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreFeaturedViewInterface", "InitFeaturedCustomizationItems");

	Params::StoreFeaturedViewInterface_InitFeaturedCustomizationItems Parms{};

	Parms.ViewDataArray = std::move(ViewDataArray);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedSpecialPack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreSpecialPackViewData*        ViewData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreFeaturedViewInterface::InitFeaturedSpecialPack(class UStoreSpecialPackViewData* ViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreFeaturedViewInterface", "InitFeaturedSpecialPack");

	Params::StoreFeaturedViewInterface_InitFeaturedSpecialPack Parms{};

	Parms.ViewData = ViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitMysteryBox
// (Native, Event, Public, HasOutParams, BlueprintEvent)
// Parameters:
// struct FStoreMysteryBoxViewData         MysteryBoxViewData                                     (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void IStoreFeaturedViewInterface::InitMysteryBox(const struct FStoreMysteryBoxViewData& MysteryBoxViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreFeaturedViewInterface", "InitMysteryBox");

	Params::StoreFeaturedViewInterface_InitMysteryBox Parms{};

	Parms.MysteryBoxViewData = std::move(MysteryBoxViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.HandlePageStateUpdate
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IStoreMenuViewInterface::HandlePageStateUpdate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "HandlePageStateUpdate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetBackButtonLabel
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             Label                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreMenuViewInterface::SetBackButtonLabel(const class FText& Label)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "SetBackButtonLabel");

	Params::StoreMenuViewInterface_SetBackButtonLabel Parms{};

	Parms.Label = std::move(Label);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetMenuState
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EStoreMenuState                         State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreMenuViewInterface::SetMenuState(EStoreMenuState State)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "SetMenuState");

	Params::StoreMenuViewInterface_SetMenuState Parms{};

	Parms.State = State;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetTabEnabled
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreMenuViewInterface::SetTabEnabled(int32 Key, bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "SetTabEnabled");

	Params::StoreMenuViewInterface_SetTabEnabled Parms{};

	Parms.Key = Key;
	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetTabsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTabWidgetData>           TabsData                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   SelectedKey                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreMenuViewInterface::SetTabsData(const TArray<struct FTabWidgetData>& TabsData, int32 SelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "SetTabsData");

	Params::StoreMenuViewInterface_SetTabsData Parms{};

	Parms.TabsData = std::move(TabsData);
	Parms.SelectedKey = SelectedKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetTabSelected
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Key                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreMenuViewInterface::SetTabSelected(int32 Key)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "SetTabSelected");

	Params::StoreMenuViewInterface_SetTabSelected Parms{};

	Parms.Key = Key;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetDisplayStandViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IDisplayStandViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IDisplayStandViewInterface> IStoreMenuViewInterface::GetDisplayStandViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "GetDisplayStandViewInterface");

	Params::StoreMenuViewInterface_GetDisplayStandViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreCollectionsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCollectionsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCollectionsViewInterface> IStoreMenuViewInterface::GetStoreCollectionsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "GetStoreCollectionsInterface");

	Params::StoreMenuViewInterface_GetStoreCollectionsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreFeaturedInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreFeaturedViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreFeaturedViewInterface> IStoreMenuViewInterface::GetStoreFeaturedInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "GetStoreFeaturedInterface");

	Params::StoreMenuViewInterface_GetStoreFeaturedInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreKillersInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersViewInterface> IStoreMenuViewInterface::GetStoreKillersInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "GetStoreKillersInterface");

	Params::StoreMenuViewInterface_GetStoreKillersInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreSpecialPacksInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreSpecialPacksViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreSpecialPacksViewInterface> IStoreMenuViewInterface::GetStoreSpecialPacksInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "GetStoreSpecialPacksInterface");

	Params::StoreMenuViewInterface_GetStoreSpecialPacksInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreSpecialsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreSpecialsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreSpecialsViewInterface> IStoreMenuViewInterface::GetStoreSpecialsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "GetStoreSpecialsInterface");

	Params::StoreMenuViewInterface_GetStoreSpecialsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreSurvivorsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreCharactersViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreCharactersViewInterface> IStoreMenuViewInterface::GetStoreSurvivorsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreMenuViewInterface", "GetStoreSurvivorsInterface");

	Params::StoreMenuViewInterface_GetStoreSurvivorsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StorePackContentData.GetIconTexturePtr
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UTexture2D>        ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture2D> UStorePackContentData::GetIconTexturePtr()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StorePackContentData", "GetIconTexturePtr");

	Params::StorePackContentData_GetIconTexturePtr Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StorePackContentData.GetId
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UStorePackContentData::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StorePackContentData", "GetId");

	Params::StorePackContentData_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StorePackContentData.GetPlayerRole
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlayerRole                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EPlayerRole UStorePackContentData::GetPlayerRole() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StorePackContentData", "GetPlayerRole");

	Params::StorePackContentData_GetPlayerRole Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StorePackContentData.GetRewardType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ERewardType                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERewardType UStorePackContentData::GetRewardType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StorePackContentData", "GetRewardType");

	Params::StorePackContentData_GetRewardType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreRightStickControllableViewInterface.ToggleRightStickMode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ERightStickMode                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ERightStickMode IStoreRightStickControllableViewInterface::ToggleRightStickMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreRightStickControllableViewInterface", "ToggleRightStickMode");

	Params::StoreRightStickControllableViewInterface_ToggleRightStickMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreRightStickControllableViewInterface.UpdateScrollPrompt
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IStoreRightStickControllableViewInterface::UpdateScrollPrompt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreRightStickControllableViewInterface", "UpdateScrollPrompt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksDetailsViewInterface.OnEnter
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IStoreSpecialPacksDetailsViewInterface::OnEnter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksDetailsViewInterface", "OnEnter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksDetailsViewInterface.OnLeave
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void IStoreSpecialPacksDetailsViewInterface::OnLeave()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksDetailsViewInterface", "OnLeave");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksDetailsViewInterface.SetChapterPackData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreChapterPackViewData*        Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreSpecialPacksDetailsViewInterface::SetChapterPackData(class UStoreChapterPackViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksDetailsViewInterface", "SetChapterPackData");

	Params::StoreSpecialPacksDetailsViewInterface_SetChapterPackData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksDetailsViewInterface.SetSpecialPackData
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UStoreSpecialPackViewData*        Data                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreSpecialPacksDetailsViewInterface::SetSpecialPackData(class UStoreSpecialPackViewData* Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksDetailsViewInterface", "SetSpecialPackData");

	Params::StoreSpecialPacksDetailsViewInterface_SetSpecialPackData Parms{};

	Parms.Data = Data;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksListViewInterface.SetChapterPacksData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreChapterPackViewData*>Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreSpecialPacksListViewInterface::SetChapterPacksData(const TArray<class UStoreChapterPackViewData*>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksListViewInterface", "SetChapterPacksData");

	Params::StoreSpecialPacksListViewInterface_SetChapterPacksData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksListViewInterface.SetHeritagePacksData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FStoreHeritagePackViewData>Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreSpecialPacksListViewInterface::SetHeritagePacksData(const TArray<struct FStoreHeritagePackViewData>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksListViewInterface", "SetHeritagePacksData");

	Params::StoreSpecialPacksListViewInterface_SetHeritagePacksData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksListViewInterface.SetSpecialPacksData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreSpecialPackViewData*>Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreSpecialPacksListViewInterface::SetSpecialPacksData(const TArray<class UStoreSpecialPackViewData*>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksListViewInterface", "SetSpecialPacksData");

	Params::StoreSpecialPacksListViewInterface_SetSpecialPacksData Parms{};

	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.IsAnimating
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IStoreSpecialPacksViewInterface::IsAnimating()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksViewInterface", "IsAnimating");

	Params::StoreSpecialPacksViewInterface_IsAnimating Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.SetScreenState
// (Event, Public, BlueprintEvent)
// Parameters:
// EStoreSpecialPacksScreenState           State                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShouldAnimate                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IStoreSpecialPacksViewInterface::SetScreenState(EStoreSpecialPacksScreenState State, bool ShouldAnimate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksViewInterface", "SetScreenState");

	Params::StoreSpecialPacksViewInterface_SetScreenState Parms{};

	Parms.State = State;
	Parms.ShouldAnimate = ShouldAnimate;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetDetailsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreSpecialPacksDetailsViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreSpecialPacksDetailsViewInterface> IStoreSpecialPacksViewInterface::GetDetailsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksViewInterface", "GetDetailsInterface");

	Params::StoreSpecialPacksViewInterface_GetDetailsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetStoreRightStickControllableViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreRightStickControllableViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreRightStickControllableViewInterface> IStoreSpecialPacksViewInterface::GetStoreRightStickControllableViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksViewInterface", "GetStoreRightStickControllableViewInterface");

	Params::StoreSpecialPacksViewInterface_GetStoreRightStickControllableViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetTabChaptersInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreSpecialPacksListViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreSpecialPacksListViewInterface> IStoreSpecialPacksViewInterface::GetTabChaptersInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksViewInterface", "GetTabChaptersInterface");

	Params::StoreSpecialPacksViewInterface_GetTabChaptersInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetTabHeritageInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreSpecialPacksListViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreSpecialPacksListViewInterface> IStoreSpecialPacksViewInterface::GetTabHeritageInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksViewInterface", "GetTabHeritageInterface");

	Params::StoreSpecialPacksViewInterface_GetTabHeritageInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetTabSpecialsInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreSpecialPacksListViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreSpecialPacksListViewInterface> IStoreSpecialPacksViewInterface::GetTabSpecialsInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPacksViewInterface", "GetTabSpecialsInterface");

	Params::StoreSpecialPacksViewInterface_GetTabSpecialsInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreSpecialPackViewData.ContainsArchivePass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreSpecialPackViewData::ContainsArchivePass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPackViewData", "ContainsArchivePass");

	Params::StoreSpecialPackViewData_ContainsArchivePass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreSpecialPackViewData.ContainsArchivePassFragments
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UStoreSpecialPackViewData::ContainsArchivePassFragments() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialPackViewData", "ContainsArchivePassFragments");

	Params::StoreSpecialPackViewData_ContainsArchivePassFragments Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.StoreSpecialsViewInterface.HideAuricCellsSpecialOffer
// (Event, Public, BlueprintCallable, BlueprintEvent)

void IStoreSpecialsViewInterface::HideAuricCellsSpecialOffer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialsViewInterface", "HideAuricCellsSpecialOffer");

	UObject::ProcessEvent(Func, nullptr);
}


// Function DBDUIViewInterfaces.StoreSpecialsViewInterface.SetAuricCellsSpecialOfferData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAuricCellsBundleViewData        AuricCellsSpecialOfferData                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FAuricCellsFirstPurchaseViewData AuricCellsFirstPurchaseViewData                        (ConstParm, Parm, NativeAccessSpecifierPublic)

void IStoreSpecialsViewInterface::SetAuricCellsSpecialOfferData(const struct FAuricCellsBundleViewData& AuricCellsSpecialOfferData, const struct FAuricCellsFirstPurchaseViewData& AuricCellsFirstPurchaseViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialsViewInterface", "SetAuricCellsSpecialOfferData");

	Params::StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData Parms{};

	Parms.AuricCellsSpecialOfferData = std::move(AuricCellsSpecialOfferData);
	Parms.AuricCellsFirstPurchaseViewData = std::move(AuricCellsFirstPurchaseViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialsViewInterface.SetSpecialsData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UStoreCustomizationItemViewData*>SpecialsData                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FStoreArchivePassViewData        ArchivePassViewData                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IStoreSpecialsViewInterface::SetSpecialsData(const TArray<class UStoreCustomizationItemViewData*>& SpecialsData, const struct FStoreArchivePassViewData& ArchivePassViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialsViewInterface", "SetSpecialsData");

	Params::StoreSpecialsViewInterface_SetSpecialsData Parms{};

	Parms.SpecialsData = std::move(SpecialsData);
	Parms.ArchivePassViewData = std::move(ArchivePassViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.StoreSpecialsViewInterface.GetStoreRightStickControllableViewInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class IStoreRightStickControllableViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class IStoreRightStickControllableViewInterface> IStoreSpecialsViewInterface::GetStoreRightStickControllableViewInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("StoreSpecialsViewInterface", "GetStoreRightStickControllableViewInterface");

	Params::StoreSpecialsViewInterface_GetStoreRightStickControllableViewInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.HideSubtitles
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ISubtitlesViewInterface::HideSubtitles()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesViewInterface", "HideSubtitles");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetConstrainAspectRatioChanged
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsConstrained                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AspectRatio                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::SetConstrainAspectRatioChanged(bool IsConstrained, float AspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesViewInterface", "SetConstrainAspectRatioChanged");

	Params::SubtitlesViewInterface_SetConstrainAspectRatioChanged Parms{};

	Parms.IsConstrained = IsConstrained;
	Parms.AspectRatio = AspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesBackgroundOpacity
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESubtitlesBackgroundOpacity             Opacity                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::SetSubtitlesBackgroundOpacity(ESubtitlesBackgroundOpacity Opacity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesViewInterface", "SetSubtitlesBackgroundOpacity");

	Params::SubtitlesViewInterface_SetSubtitlesBackgroundOpacity Parms{};

	Parms.Opacity = Opacity;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesPosition
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESubtitlesPosition                      Position                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::SetSubtitlesPosition(ESubtitlesPosition Position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesViewInterface", "SetSubtitlesPosition");

	Params::SubtitlesViewInterface_SetSubtitlesPosition Parms{};

	Parms.Position = Position;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesSize
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ESubtitlesSize                          Size                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::SetSubtitlesSize(ESubtitlesSize Size)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesViewInterface", "SetSubtitlesSize");

	Params::SubtitlesViewInterface_SetSubtitlesSize Parms{};

	Parms.Size = Size;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.SubtitlesViewInterface.ShowSubtitle
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FText                             SubtitleText                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ISubtitlesViewInterface::ShowSubtitle(const class FText& SubtitleText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SubtitlesViewInterface", "ShowSubtitle");

	Params::SubtitlesViewInterface_ShowSubtitle Parms{};

	Parms.SubtitleText = std::move(SubtitleText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TallyMenuViewInterface.SetBackgroundVisibility
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsVisible                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITallyMenuViewInterface::SetBackgroundVisibility(bool IsVisible)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TallyMenuViewInterface", "SetBackgroundVisibility");

	Params::TallyMenuViewInterface_SetBackgroundVisibility Parms{};

	Parms.IsVisible = IsVisible;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TallyMenuViewInterface.SetTabSelected
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETallyTabState                          TabState                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITallyMenuViewInterface::SetTabSelected(const ETallyTabState& TabState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TallyMenuViewInterface", "SetTabSelected");

	Params::TallyMenuViewInterface_SetTabSelected Parms{};

	Parms.TabState = TabState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TallyMenuViewInterface.GetTallyScoreboardInterface
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// TScriptInterface<class ITallyScoreboardViewInterface>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TScriptInterface<class ITallyScoreboardViewInterface> ITallyMenuViewInterface::GetTallyScoreboardInterface() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TallyMenuViewInterface", "GetTallyScoreboardInterface");

	Params::TallyMenuViewInterface_GetTallyScoreboardInterface Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.SetKillerLoadoutBlocked
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    IsBlocked                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITallyScoreboardViewInterface::SetKillerLoadoutBlocked(const bool IsBlocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TallyScoreboardViewInterface", "SetKillerLoadoutBlocked");

	Params::TallyScoreboardViewInterface_SetKillerLoadoutBlocked Parms{};

	Parms.IsBlocked = IsBlocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.SetPlayerCardAnimationMode
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EPlayerCardAnimationMode                PlayerCardAnimationMode                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITallyScoreboardViewInterface::SetPlayerCardAnimationMode(const EPlayerCardAnimationMode PlayerCardAnimationMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TallyScoreboardViewInterface", "SetPlayerCardAnimationMode");

	Params::TallyScoreboardViewInterface_SetPlayerCardAnimationMode Parms{};

	Parms.PlayerCardAnimationMode = PlayerCardAnimationMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.SetTallyPlayerStatusWidgets
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EGameType                               GameType                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITallyScoreboardViewInterface::SetTallyPlayerStatusWidgets(const EGameType GameType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TallyScoreboardViewInterface", "SetTallyPlayerStatusWidgets");

	Params::TallyScoreboardViewInterface_SetTallyPlayerStatusWidgets Parms{};

	Parms.GameType = GameType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.SetTallyScoreboardData
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FTallyPlayerStatusViewData>TallyPlayerStatus                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EGameType                               GameType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsUsingCharacterClass                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITallyScoreboardViewInterface::SetTallyScoreboardData(const TArray<struct FTallyPlayerStatusViewData>& TallyPlayerStatus, EGameType GameType, bool IsUsingCharacterClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TallyScoreboardViewInterface", "SetTallyScoreboardData");

	Params::TallyScoreboardViewInterface_SetTallyScoreboardData Parms{};

	Parms.TallyPlayerStatus = std::move(TallyPlayerStatus);
	Parms.GameType = GameType;
	Parms.IsUsingCharacterClass = IsUsingCharacterClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.ShowOptionsMenu
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FPlayerSocialOptionViewData>PlayerOptionsData                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ITallyScoreboardViewInterface::ShowOptionsMenu(const TArray<struct FPlayerSocialOptionViewData>& PlayerOptionsData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TallyScoreboardViewInterface", "ShowOptionsMenu");

	Params::TallyScoreboardViewInterface_ShowOptionsMenu Parms{};

	Parms.PlayerOptionsData = std::move(PlayerOptionsData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.UpdateReportedPlayer
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           MirrorsId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITallyScoreboardViewInterface::UpdateReportedPlayer(const class FString& MirrorsId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TallyScoreboardViewInterface", "UpdateReportedPlayer");

	Params::TallyScoreboardViewInterface_UpdateReportedPlayer Parms{};

	Parms.MirrorsId = std::move(MirrorsId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TemplateViewInterface.TemplateExampleFunction
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FTemplateViewData                TemplateData                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ITemplateViewInterface::TemplateExampleFunction(const struct FTemplateViewData& TemplateData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TemplateViewInterface", "TemplateExampleFunction");

	Params::TemplateViewInterface_TemplateExampleFunction Parms{};

	Parms.TemplateData = std::move(TemplateData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TestBuildFlagViewInterface.UpdateWidget
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// ETestBuildType                          TestBuildType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETestBuildFlagPosition                  TestBuildFlagPosition                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITestBuildFlagViewInterface::UpdateWidget(ETestBuildType TestBuildType, ETestBuildFlagPosition TestBuildFlagPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TestBuildFlagViewInterface", "UpdateWidget");

	Params::TestBuildFlagViewInterface_UpdateWidget Parms{};

	Parms.TestBuildType = TestBuildType;
	Parms.TestBuildFlagPosition = TestBuildFlagPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ToastNotificationContainerViewInterface.AddToastNotification
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FToastNotificationViewData       ToastData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void IToastNotificationContainerViewInterface::AddToastNotification(const struct FToastNotificationViewData& ToastData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToastNotificationContainerViewInterface", "AddToastNotification");

	Params::ToastNotificationContainerViewInterface_AddToastNotification Parms{};

	Parms.ToastData = std::move(ToastData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.ToastNotificationContainerViewInterface.RemoveToastNotification
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   NotificationId                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IToastNotificationContainerViewInterface::RemoveToastNotification(const int32 NotificationId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ToastNotificationContainerViewInterface", "RemoveToastNotification");

	Params::ToastNotificationContainerViewInterface_RemoveToastNotification Parms{};

	Parms.NotificationId = NotificationId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialHighlightViewInterface.SetTutorialHighlight
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    Show                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EHudComponent                           ComponentId                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITutorialHighlightViewInterface::SetTutorialHighlight(const bool Show, const EHudComponent& ComponentId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialHighlightViewInterface", "SetTutorialHighlight");

	Params::TutorialHighlightViewInterface_SetTutorialHighlight Parms{};

	Parms.Show = Show;
	Parms.ComponentId = ComponentId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialMysteryNoteViewInterface.HideMysteryNote
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ITutorialMysteryNoteViewInterface::HideMysteryNote()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialMysteryNoteViewInterface", "HideMysteryNote");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialMysteryNoteViewInterface.ShowMysteryNote
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FNotifTutorialPopupViewData      NotifData                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ITutorialMysteryNoteViewInterface::ShowMysteryNote(const struct FNotifTutorialPopupViewData& NotifData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialMysteryNoteViewInterface", "ShowMysteryNote");

	Params::TutorialMysteryNoteViewInterface_ShowMysteryNote Parms{};

	Parms.NotifData = std::move(NotifData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.AddTutorialObjective
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTutorialObjectivesViewData      InteractionPromptViewData                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ITutorialObjectivesViewInterface::AddTutorialObjective(const class FName& ID, const struct FTutorialObjectivesViewData& InteractionPromptViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialObjectivesViewInterface", "AddTutorialObjective");

	Params::TutorialObjectivesViewInterface_AddTutorialObjective Parms{};

	Parms.ID = ID;
	Parms.InteractionPromptViewData = std::move(InteractionPromptViewData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.CompleteTutorialObjective
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    RemoveAfterCompletion                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITutorialObjectivesViewInterface::CompleteTutorialObjective(const class FName& ID, bool RemoveAfterCompletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialObjectivesViewInterface", "CompleteTutorialObjective");

	Params::TutorialObjectivesViewInterface_CompleteTutorialObjective Parms{};

	Parms.ID = ID;
	Parms.RemoveAfterCompletion = RemoveAfterCompletion;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.RemoveAllTutorialObjectives
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void ITutorialObjectivesViewInterface::RemoveAllTutorialObjectives()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialObjectivesViewInterface", "RemoveAllTutorialObjectives");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.RemoveTutorialObjective
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             ID                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITutorialObjectivesViewInterface::RemoveTutorialObjective(const class FName& ID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialObjectivesViewInterface", "RemoveTutorialObjective");

	Params::TutorialObjectivesViewInterface_RemoveTutorialObjective Parms{};

	Parms.ID = ID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialPopupViewInterface.HideTutorialPopup
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// bool                                    PlaySoundEffect                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ITutorialPopupViewInterface::HideTutorialPopup(bool PlaySoundEffect)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPopupViewInterface", "HideTutorialPopup");

	Params::TutorialPopupViewInterface_HideTutorialPopup Parms{};

	Parms.PlaySoundEffect = PlaySoundEffect;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.TutorialPopupViewInterface.ShowNotifTutorialPopup
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FNotifTutorialPopupViewData      NotifTutoData                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void ITutorialPopupViewInterface::ShowNotifTutorialPopup(const struct FNotifTutorialPopupViewData& NotifTutoData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TutorialPopupViewInterface", "ShowNotifTutorialPopup");

	Params::TutorialPopupViewInterface_ShowNotifTutorialPopup Parms{};

	Parms.NotifTutoData = std::move(NotifTutoData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDUIViewInterfaces.UIUtilities.ConvertArchiveCurrentAndMaxProgressionInPercentage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   OutCurrentProgression                                  (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutMaxProgression                                      (Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UUIUtilities::ConvertArchiveCurrentAndMaxProgressionInPercentage(int32& OutCurrentProgression, int32& OutMaxProgression)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UIUtilities", "ConvertArchiveCurrentAndMaxProgressionInPercentage");

	Params::UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage Parms{};

	Parms.OutCurrentProgression = OutCurrentProgression;
	Parms.OutMaxProgression = OutMaxProgression;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	OutCurrentProgression = Parms.OutCurrentProgression;
	OutMaxProgression = Parms.OutMaxProgression;
}


// Function DBDUIViewInterfaces.WatermarkViewInterface.SetSteamValuesText
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           SteamName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SteamId                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IWatermarkViewInterface::SetSteamValuesText(const class FString& SteamName, const class FString& SteamId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WatermarkViewInterface", "SetSteamValuesText");

	Params::WatermarkViewInterface_SetSteamValuesText Parms{};

	Parms.SteamName = std::move(SteamName);
	Parms.SteamId = std::move(SteamId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

