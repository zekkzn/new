#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SocialParty

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "Customization_structs.hpp"


namespace SDK
{

// Enum SocialParty.EPartyError
// NumValues: 0x003B
enum class EPartyError : uint8
{
	None                                     = 0,
	CreatePartyFail                          = 1,
	CreatePartyFail_PlayerAlreadyInParty     = 2,
	ConnectionToPartyManagementLost          = 3,
	AcceptInvitationFail                     = 4,
	AcceptInvitationFail_InvitationExpired   = 5,
	AcceptInvitationFail_PartyIsFull         = 6,
	AcceptInvitationFail_PartyDoesNotExists  = 7,
	AcceptInvitationFail_VersionMismatch     = 8,
	AcceptInvitationFail_StreamingInstallationIncomplete = 9,
	AcceptInvitationFail_PartyAlreadyInMatchmaking = 10,
	AcceptInvitationFail_AllPartyMembersAreInMatch = 11,
	RejectInvitationFail                     = 12,
	RejectInvitationFail_PartyDoesNotExists  = 13,
	InvitationFail                           = 14,
	InvitationFail_PartyDoesNotExists        = 15,
	InvitationFail_PlayerAlreadyInParty      = 16,
	InvitationFail_NotFriendsWithUser        = 17,
	JoinRequestFail                          = 18,
	JoinRequestFail_PartyDoesNotExists       = 19,
	JoinRequestFail_PlayerAlreadyInPartyOrPartyFull = 20,
	JoinRequestFail_BannedFromParty          = 21,
	JoinRequestFail_FriendNotInParty         = 22,
	JoinRequestFail_PartyIsPrivate           = 23,
	JoinRequestAcceptedFail                  = 24,
	JoinRequestAcceptedFail_PartyDoesNotExists = 25,
	AcceptJoinRequestFail                    = 26,
	AcceptJoinRequestFail_RequestNotFound    = 27,
	AcceptJoinRequestFail_PartyDoesNotExists = 28,
	RejectJoinRequestFail                    = 29,
	RejectJoinRequestFail_RequestNotFound    = 30,
	RejectJoinRequestFail_PartyDoesNotExists = 31,
	CancelJoinRequestFail                    = 32,
	CancelJoinRequestFail_RequestNotFound    = 33,
	RealTimeMessagingDisconnected            = 34,
	FriendBlocked_UnableToJoinParty          = 35,
	FriendBlocked_UnableToRemainInParty      = 36,
	CancelInvitationFail                     = 37,
	CancelInvitationFail_PartyDoesNotExists  = 38,
	SendPartyChatMessageFail                 = 39,
	SendPartyChatMessageFail_PartyDoesNotExists = 40,
	SendPartyChatMessageFail_MessageNotAllowed = 41,
	InvitationValidationError                = 42,
	InvitationValidationError_StandardInviteFlowButActiveCrowdPlay = 43,
	InvitationValidationError_QueueToPlayInviteButInactiveCrowdPlay = 44,
	InvitationValidationError_PartyIsFull    = 45,
	InvitationValidationError_PartyDoesNotExists = 46,
	InvitationValidationError_VersionMismatch = 47,
	InvitationValidationError_StreamingInstallationIncomplete = 48,
	InvitationValidationError_FriendBlocked  = 49,
	InvitationValidationError_InsufficientPrivileges = 50,
	InvitationValidationError_PlayerBanned   = 51,
	InvitationValidationError_LocalCrossplayIncompatibility = 52,
	InvitationValidationError_RemoteCrossplayIncompatibility = 53,
	InvitationValidationError_ListenServerCrossplayIncompatibility = 54,
	RemovePlayerFromPartyFail                = 55,
	JoinFail_PlayerAlreadyInParty            = 56,
	UnknownError                             = 57,
	EPartyError_MAX                          = 58,
};

// Enum SocialParty.EPartyBusyReason
// NumValues: 0x0016
enum class EPartyBusyReason : uint8
{
	None                                     = 0,
	CreatingParty                            = 1,
	LeavingParty                             = 2,
	SyncingParty                             = 3,
	DestroyingParty                          = 4,
	InvitingPlayer                           = 5,
	AcceptingPartyInvite                     = 6,
	RejectingPartyInvite                     = 7,
	CancelingPartyInvite                     = 8,
	RequestingJoinParty                      = 9,
	ValidatingInvite                         = 10,
	AcceptingRequestJoinParty                = 11,
	RejectingRequestJoinParty                = 12,
	CancelingRequestJoinParty                = 13,
	AcceptingPlatformInvite                  = 14,
	KickingPlayerFromParty                   = 15,
	LeavingPartyFromKick                     = 16,
	CreatingPartyPlatformSession             = 17,
	LeavingCrossplatformPlatformSession      = 18,
	WaitingForPlatformSessionInfo            = 19,
	ProcessingPlatformSession                = 20,
	EPartyBusyReason_MAX                     = 21,
};

// Enum SocialParty.EJoinPartyMethod
// NumValues: 0x0005
enum class EJoinPartyMethod : uint8
{
	None                                     = 0,
	PlatformInvitation                       = 1,
	InGameInvitation                         = 2,
	JoinRequest                              = 3,
	EJoinPartyMethod_MAX                     = 4,
};

// Enum SocialParty.EPartyPostMatchmakingRole
// NumValues: 0x0004
enum class EPartyPostMatchmakingRole : uint8
{
	None                                     = 0,
	Client                                   = 1,
	Host                                     = 2,
	EPartyPostMatchmakingRole_MAX            = 3,
};

// Enum SocialParty.EPartyPostMatchmakingState
// NumValues: 0x0005
enum class EPartyPostMatchmakingState : uint8
{
	None                                     = 0,
	InProgress                               = 1,
	Completed                                = 2,
	Error                                    = 3,
	EPartyPostMatchmakingState_MAX           = 4,
};

// Enum SocialParty.EMatchmakingState
// NumValues: 0x0005
enum class EMatchmakingState : uint8
{
	None                                     = 0,
	Searching                                = 1,
	MatchFound                               = 2,
	Error                                    = 3,
	EMatchmakingState_MAX                    = 4,
};

// ScriptStruct SocialParty.CustomGameBot
// 0x0048 (0x0048 - 0x0000)
struct FCustomGameBot final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         _role;                                             // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         _diff;                                             // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _charIdx;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _botIdx;                                           // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _slotIdx;                                          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _guid;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FLoadout                               _loadout;                                          // 0x0020(0x0020)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomGameBot) == 0x000008, "Wrong alignment on FCustomGameBot");
static_assert(sizeof(FCustomGameBot) == 0x000048, "Wrong size on FCustomGameBot");
static_assert(offsetof(FCustomGameBot, _role) == 0x000001, "Member 'FCustomGameBot::_role' has a wrong offset!");
static_assert(offsetof(FCustomGameBot, _diff) == 0x000002, "Member 'FCustomGameBot::_diff' has a wrong offset!");
static_assert(offsetof(FCustomGameBot, _charIdx) == 0x000004, "Member 'FCustomGameBot::_charIdx' has a wrong offset!");
static_assert(offsetof(FCustomGameBot, _botIdx) == 0x000008, "Member 'FCustomGameBot::_botIdx' has a wrong offset!");
static_assert(offsetof(FCustomGameBot, _slotIdx) == 0x00000C, "Member 'FCustomGameBot::_slotIdx' has a wrong offset!");
static_assert(offsetof(FCustomGameBot, _guid) == 0x000010, "Member 'FCustomGameBot::_guid' has a wrong offset!");
static_assert(offsetof(FCustomGameBot, _loadout) == 0x000020, "Member 'FCustomGameBot::_loadout' has a wrong offset!");

// ScriptStruct SocialParty.CustomGameBotsData
// 0x0018 (0x0018 - 0x0000)
struct FCustomGameBotsData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCustomGameBot>                 _bots;                                             // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCustomGameBotsData) == 0x000008, "Wrong alignment on FCustomGameBotsData");
static_assert(sizeof(FCustomGameBotsData) == 0x000018, "Wrong size on FCustomGameBotsData");
static_assert(offsetof(FCustomGameBotsData, _bots) == 0x000008, "Member 'FCustomGameBotsData::_bots' has a wrong offset!");

// ScriptStruct SocialParty.SocialPartyMember
// 0x00F8 (0x00F8 - 0x0000)
struct FSocialPartyMember final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEquippedPlayerCustomization           _playerCustomization;                              // 0x0008(0x0038)(NativeAccessSpecifierPrivate)
	class FString                                 _playerName;                                       // 0x0040(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _platformSessionId;                                // 0x0050(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _uniquePlayerId;                                   // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _playerRank;                                       // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _characterLevel;                                   // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _prestigeLevel;                                    // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _gameRole;                                         // 0x007C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _characterId;                                      // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   _powerId;                                          // 0x0084(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _location;                                         // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _queueDelayIteration;                              // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _ready;                                            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _crossplayAllowed;                                 // 0x0099(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _playerPlatform;                                   // 0x00A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _playerProvider;                                   // 0x00B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _matchId;                                          // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPartyPostMatchmakingRole                     _postMatchmakingRole;                              // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EPartyPostMatchmakingState                    _postMatchmakingState;                             // 0x00D1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         _roleRequested;                                    // 0x00D2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         _anonymousSuffix;                                  // 0x00D3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isStateInitialized;                               // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   _characterClass;                                   // 0x00D8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         _disconnectionPenaltyEndOfBan;                     // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSocialPartyMember) == 0x000008, "Wrong alignment on FSocialPartyMember");
static_assert(sizeof(FSocialPartyMember) == 0x0000F8, "Wrong size on FSocialPartyMember");
static_assert(offsetof(FSocialPartyMember, _playerCustomization) == 0x000008, "Member 'FSocialPartyMember::_playerCustomization' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _playerName) == 0x000040, "Member 'FSocialPartyMember::_playerName' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _platformSessionId) == 0x000050, "Member 'FSocialPartyMember::_platformSessionId' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _uniquePlayerId) == 0x000060, "Member 'FSocialPartyMember::_uniquePlayerId' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _playerRank) == 0x000070, "Member 'FSocialPartyMember::_playerRank' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _characterLevel) == 0x000074, "Member 'FSocialPartyMember::_characterLevel' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _prestigeLevel) == 0x000078, "Member 'FSocialPartyMember::_prestigeLevel' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _gameRole) == 0x00007C, "Member 'FSocialPartyMember::_gameRole' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _characterId) == 0x000080, "Member 'FSocialPartyMember::_characterId' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _powerId) == 0x000084, "Member 'FSocialPartyMember::_powerId' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _location) == 0x000090, "Member 'FSocialPartyMember::_location' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _queueDelayIteration) == 0x000094, "Member 'FSocialPartyMember::_queueDelayIteration' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _ready) == 0x000098, "Member 'FSocialPartyMember::_ready' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _crossplayAllowed) == 0x000099, "Member 'FSocialPartyMember::_crossplayAllowed' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _playerPlatform) == 0x0000A0, "Member 'FSocialPartyMember::_playerPlatform' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _playerProvider) == 0x0000B0, "Member 'FSocialPartyMember::_playerProvider' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _matchId) == 0x0000C0, "Member 'FSocialPartyMember::_matchId' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _postMatchmakingRole) == 0x0000D0, "Member 'FSocialPartyMember::_postMatchmakingRole' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _postMatchmakingState) == 0x0000D1, "Member 'FSocialPartyMember::_postMatchmakingState' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _roleRequested) == 0x0000D2, "Member 'FSocialPartyMember::_roleRequested' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _anonymousSuffix) == 0x0000D3, "Member 'FSocialPartyMember::_anonymousSuffix' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _isStateInitialized) == 0x0000D4, "Member 'FSocialPartyMember::_isStateInitialized' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _characterClass) == 0x0000D8, "Member 'FSocialPartyMember::_characterClass' has a wrong offset!");
static_assert(offsetof(FSocialPartyMember, _disconnectionPenaltyEndOfBan) == 0x0000E8, "Member 'FSocialPartyMember::_disconnectionPenaltyEndOfBan' has a wrong offset!");

// ScriptStruct SocialParty.CustomGamePresetData
// 0x0038 (0x0038 - 0x0000)
struct FCustomGamePresetData final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 MapAvails;                                         // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          PerkAvail;                                         // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          OfferingAvail;                                     // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          ItemAvail;                                         // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          ItemAddonAvail;                                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          DlcContentAllowed;                                 // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          PrivateMatch;                                      // 0x001D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomGameBotsData                    bots;                                              // 0x0020(0x0018)(NativeAccessSpecifierPrivate)
};
static_assert(alignof(FCustomGamePresetData) == 0x000008, "Wrong alignment on FCustomGamePresetData");
static_assert(sizeof(FCustomGamePresetData) == 0x000038, "Wrong size on FCustomGamePresetData");
static_assert(offsetof(FCustomGamePresetData, MapAvails) == 0x000008, "Member 'FCustomGamePresetData::MapAvails' has a wrong offset!");
static_assert(offsetof(FCustomGamePresetData, PerkAvail) == 0x000018, "Member 'FCustomGamePresetData::PerkAvail' has a wrong offset!");
static_assert(offsetof(FCustomGamePresetData, OfferingAvail) == 0x000019, "Member 'FCustomGamePresetData::OfferingAvail' has a wrong offset!");
static_assert(offsetof(FCustomGamePresetData, ItemAvail) == 0x00001A, "Member 'FCustomGamePresetData::ItemAvail' has a wrong offset!");
static_assert(offsetof(FCustomGamePresetData, ItemAddonAvail) == 0x00001B, "Member 'FCustomGamePresetData::ItemAddonAvail' has a wrong offset!");
static_assert(offsetof(FCustomGamePresetData, DlcContentAllowed) == 0x00001C, "Member 'FCustomGamePresetData::DlcContentAllowed' has a wrong offset!");
static_assert(offsetof(FCustomGamePresetData, PrivateMatch) == 0x00001D, "Member 'FCustomGamePresetData::PrivateMatch' has a wrong offset!");
static_assert(offsetof(FCustomGamePresetData, bots) == 0x000020, "Member 'FCustomGamePresetData::bots' has a wrong offset!");

// ScriptStruct SocialParty.PartySessionSettings
// 0x0098 (0x0098 - 0x0000)
struct FPartySessionSettings final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _sessionId;                                        // 0x0008(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class FString, class FString>            _gameSessionInfos;                                 // 0x0018(0x0050)(NativeAccessSpecifierPrivate)
	class FString                                 _owningUserId;                                     // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FString                                 _owningUserName;                                   // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isDedicated;                                      // 0x0088(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         _matchmakingTimestamp;                             // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPartySessionSettings) == 0x000008, "Wrong alignment on FPartySessionSettings");
static_assert(sizeof(FPartySessionSettings) == 0x000098, "Wrong size on FPartySessionSettings");
static_assert(offsetof(FPartySessionSettings, _sessionId) == 0x000008, "Member 'FPartySessionSettings::_sessionId' has a wrong offset!");
static_assert(offsetof(FPartySessionSettings, _gameSessionInfos) == 0x000018, "Member 'FPartySessionSettings::_gameSessionInfos' has a wrong offset!");
static_assert(offsetof(FPartySessionSettings, _owningUserId) == 0x000068, "Member 'FPartySessionSettings::_owningUserId' has a wrong offset!");
static_assert(offsetof(FPartySessionSettings, _owningUserName) == 0x000078, "Member 'FPartySessionSettings::_owningUserName' has a wrong offset!");
static_assert(offsetof(FPartySessionSettings, _isDedicated) == 0x000088, "Member 'FPartySessionSettings::_isDedicated' has a wrong offset!");
static_assert(offsetof(FPartySessionSettings, _matchmakingTimestamp) == 0x000090, "Member 'FPartySessionSettings::_matchmakingTimestamp' has a wrong offset!");

// ScriptStruct SocialParty.PartyMatchmakingSettings
// 0x0038 (0x0038 - 0x0000)
struct FPartyMatchmakingSettings final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         _playerIds;                                        // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	EMatchmakingState                             _matchmakingState;                                 // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         _startMatchmakingDateTimestamp;                    // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint32                                        _matchIncentive;                                   // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isInFinalCountdown;                               // 0x002C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _postMatchmakingTransitionId;                      // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyMatchmakingSettings) == 0x000008, "Wrong alignment on FPartyMatchmakingSettings");
static_assert(sizeof(FPartyMatchmakingSettings) == 0x000038, "Wrong size on FPartyMatchmakingSettings");
static_assert(offsetof(FPartyMatchmakingSettings, _playerIds) == 0x000008, "Member 'FPartyMatchmakingSettings::_playerIds' has a wrong offset!");
static_assert(offsetof(FPartyMatchmakingSettings, _matchmakingState) == 0x000018, "Member 'FPartyMatchmakingSettings::_matchmakingState' has a wrong offset!");
static_assert(offsetof(FPartyMatchmakingSettings, _startMatchmakingDateTimestamp) == 0x000020, "Member 'FPartyMatchmakingSettings::_startMatchmakingDateTimestamp' has a wrong offset!");
static_assert(offsetof(FPartyMatchmakingSettings, _matchIncentive) == 0x000028, "Member 'FPartyMatchmakingSettings::_matchIncentive' has a wrong offset!");
static_assert(offsetof(FPartyMatchmakingSettings, _isInFinalCountdown) == 0x00002C, "Member 'FPartyMatchmakingSettings::_isInFinalCountdown' has a wrong offset!");
static_assert(offsetof(FPartyMatchmakingSettings, _postMatchmakingTransitionId) == 0x000030, "Member 'FPartyMatchmakingSettings::_postMatchmakingTransitionId' has a wrong offset!");

// ScriptStruct SocialParty.SocialPartyState
// 0x0190 (0x0190 - 0x0000)
struct FSocialPartyState final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCustomGamePresetData                  _customGamePresetData;                             // 0x0008(0x0038)(NativeAccessSpecifierPrivate)
	struct FPartySessionSettings                  _partySessionSettings;                             // 0x0040(0x0098)(NativeAccessSpecifierPrivate)
	struct FPartyMatchmakingSettings              _partyMatchmakingSettings;                         // 0x00D8(0x0038)(NativeAccessSpecifierPrivate)
	TArray<class FName>                           _playerJoinOrder;                                  // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class FName, uint8>                      _playerChatIndices;                                // 0x0120(0x0050)(NativeAccessSpecifierPrivate)
	int32                                         _gameType;                                         // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isCrowdPlay;                                      // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _isUsingDedicatedServer;                           // 0x0175(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_176[0x2];                                      // 0x0176(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 _version;                                          // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _lastUpdatedTime;                                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _lastSentTime;                                     // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSocialPartyState) == 0x000008, "Wrong alignment on FSocialPartyState");
static_assert(sizeof(FSocialPartyState) == 0x000190, "Wrong size on FSocialPartyState");
static_assert(offsetof(FSocialPartyState, _customGamePresetData) == 0x000008, "Member 'FSocialPartyState::_customGamePresetData' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _partySessionSettings) == 0x000040, "Member 'FSocialPartyState::_partySessionSettings' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _partyMatchmakingSettings) == 0x0000D8, "Member 'FSocialPartyState::_partyMatchmakingSettings' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _playerJoinOrder) == 0x000110, "Member 'FSocialPartyState::_playerJoinOrder' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _playerChatIndices) == 0x000120, "Member 'FSocialPartyState::_playerChatIndices' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _gameType) == 0x000170, "Member 'FSocialPartyState::_gameType' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _isCrowdPlay) == 0x000174, "Member 'FSocialPartyState::_isCrowdPlay' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _isUsingDedicatedServer) == 0x000175, "Member 'FSocialPartyState::_isUsingDedicatedServer' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _version) == 0x000178, "Member 'FSocialPartyState::_version' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _lastUpdatedTime) == 0x000188, "Member 'FSocialPartyState::_lastUpdatedTime' has a wrong offset!");
static_assert(offsetof(FSocialPartyState, _lastSentTime) == 0x00018C, "Member 'FSocialPartyState::_lastSentTime' has a wrong offset!");

}

