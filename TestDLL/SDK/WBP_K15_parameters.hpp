#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_K15

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "UMG_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"


namespace SDK::Params
{

// Function WBP_K15.WBP_K15_C.SetPlagueVisibility
// 0x0006 (0x0006 - 0x0000)
struct WBP_K15_C_SetPlagueVisibility final
{
public:
	ESicknessLevel                                Param_IsVisible;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESicknessLevel                                Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_3;                              // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K15_C_SetPlagueVisibility) == 0x000001, "Wrong alignment on WBP_K15_C_SetPlagueVisibility");
static_assert(sizeof(WBP_K15_C_SetPlagueVisibility) == 0x000006, "Wrong size on WBP_K15_C_SetPlagueVisibility");
static_assert(offsetof(WBP_K15_C_SetPlagueVisibility, Param_IsVisible) == 0x000000, "Member 'WBP_K15_C_SetPlagueVisibility::Param_IsVisible' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueVisibility, Temp_byte_Variable) == 0x000001, "Member 'WBP_K15_C_SetPlagueVisibility::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueVisibility, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_K15_C_SetPlagueVisibility::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueVisibility, Temp_byte_Variable_2) == 0x000003, "Member 'WBP_K15_C_SetPlagueVisibility::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueVisibility, Temp_byte_Variable_3) == 0x000004, "Member 'WBP_K15_C_SetPlagueVisibility::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueVisibility, K2Node_Select_Default) == 0x000005, "Member 'WBP_K15_C_SetPlagueVisibility::K2Node_Select_Default' has a wrong offset!");

// Function WBP_K15.WBP_K15_C.SetPlagueData
// 0x0040 (0x0040 - 0x0000)
struct WBP_K15_C_SetPlagueData final
{
public:
	bool                                          IsLocalKiller;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlagueStatusData*                      KillerData;                                        // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Status_Change;                                     // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_ByteByte_ReturnValue;            // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue_1;       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K15_C_SetPlagueData) == 0x000008, "Wrong alignment on WBP_K15_C_SetPlagueData");
static_assert(sizeof(WBP_K15_C_SetPlagueData) == 0x000040, "Wrong size on WBP_K15_C_SetPlagueData");
static_assert(offsetof(WBP_K15_C_SetPlagueData, IsLocalKiller) == 0x000000, "Member 'WBP_K15_C_SetPlagueData::IsLocalKiller' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueData, KillerData) == 0x000008, "Member 'WBP_K15_C_SetPlagueData::KillerData' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueData, Status_Change) == 0x000010, "Member 'WBP_K15_C_SetPlagueData::Status_Change' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueData, K2Node_SwitchEnum_CmpSuccess) == 0x000011, "Member 'WBP_K15_C_SetPlagueData::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueData, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000018, "Member 'WBP_K15_C_SetPlagueData::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueData, CallFunc_NotEqual_ByteByte_ReturnValue) == 0x000020, "Member 'WBP_K15_C_SetPlagueData::CallFunc_NotEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueData, CallFunc_PlayAnimationForward_ReturnValue) == 0x000028, "Member 'WBP_K15_C_SetPlagueData::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueData, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000030, "Member 'WBP_K15_C_SetPlagueData::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_SetPlagueData, CallFunc_PlayAnimationForward_ReturnValue_1) == 0x000038, "Member 'WBP_K15_C_SetPlagueData::CallFunc_PlayAnimationForward_ReturnValue_1' has a wrong offset!");

// Function WBP_K15.WBP_K15_C.SetKillerData
// 0x0098 (0x0098 - 0x0000)
struct WBP_K15_C_SetKillerData final
{
public:
	struct FPlayerStatusViewData                  Data;                                              // 0x0000(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_K15_C_SetKillerData) == 0x000008, "Wrong alignment on WBP_K15_C_SetKillerData");
static_assert(sizeof(WBP_K15_C_SetKillerData) == 0x000098, "Wrong size on WBP_K15_C_SetKillerData");
static_assert(offsetof(WBP_K15_C_SetKillerData, Data) == 0x000000, "Member 'WBP_K15_C_SetKillerData::Data' has a wrong offset!");

// Function WBP_K15.WBP_K15_C.ExecuteUbergraph_WBP_K15
// 0x00B8 (0x00B8 - 0x0000)
struct WBP_K15_C_ExecuteUbergraph_WBP_K15 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerStatusViewData                  K2Node_Event_data;                                 // 0x0008(0x0098)(ConstParm)
	class UPlagueStatusData*                      K2Node_DynamicCast_AsPlague_Status_Data;           // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlagueStatusData*                      CallFunc_SpawnObject_ReturnValue;                  // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K15_C_ExecuteUbergraph_WBP_K15) == 0x000008, "Wrong alignment on WBP_K15_C_ExecuteUbergraph_WBP_K15");
static_assert(sizeof(WBP_K15_C_ExecuteUbergraph_WBP_K15) == 0x0000B8, "Wrong size on WBP_K15_C_ExecuteUbergraph_WBP_K15");
static_assert(offsetof(WBP_K15_C_ExecuteUbergraph_WBP_K15, EntryPoint) == 0x000000, "Member 'WBP_K15_C_ExecuteUbergraph_WBP_K15::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_ExecuteUbergraph_WBP_K15, K2Node_Event_data) == 0x000008, "Member 'WBP_K15_C_ExecuteUbergraph_WBP_K15::K2Node_Event_data' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_ExecuteUbergraph_WBP_K15, K2Node_DynamicCast_AsPlague_Status_Data) == 0x0000A0, "Member 'WBP_K15_C_ExecuteUbergraph_WBP_K15::K2Node_DynamicCast_AsPlague_Status_Data' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_ExecuteUbergraph_WBP_K15, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'WBP_K15_C_ExecuteUbergraph_WBP_K15::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_K15_C_ExecuteUbergraph_WBP_K15, CallFunc_SpawnObject_ReturnValue) == 0x0000B0, "Member 'WBP_K15_C_ExecuteUbergraph_WBP_K15::CallFunc_SpawnObject_ReturnValue' has a wrong offset!");

}

