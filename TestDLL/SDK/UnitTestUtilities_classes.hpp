#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UnitTestUtilities

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class UnitTestUtilities.TestInterface
// 0x0000 (0x0030 - 0x0030)
class ITestInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestInterface">();
	}
	static class ITestInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITestInterface>();
	}
};
static_assert(alignof(ITestInterface) == 0x000008, "Wrong alignment on ITestInterface");
static_assert(sizeof(ITestInterface) == 0x000030, "Wrong size on ITestInterface");

// Class UnitTestUtilities.TestActor
// 0x0000 (0x02A0 - 0x02A0)
class ATestActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestActor">();
	}
	static class ATestActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATestActor>();
	}
};
static_assert(alignof(ATestActor) == 0x000008, "Wrong alignment on ATestActor");
static_assert(sizeof(ATestActor) == 0x0002A0, "Wrong size on ATestActor");

// Class UnitTestUtilities.TestActorComponent
// 0x0000 (0x00A8 - 0x00A8)
class UTestActorComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestActorComponent">();
	}
	static class UTestActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestActorComponent>();
	}
};
static_assert(alignof(UTestActorComponent) == 0x000008, "Wrong alignment on UTestActorComponent");
static_assert(sizeof(UTestActorComponent) == 0x0000A8, "Wrong size on UTestActorComponent");

// Class UnitTestUtilities.TestActorComponentImplementingTestInterface
// 0x0008 (0x00B0 - 0x00A8)
class UTestActorComponentImplementingTestInterface final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestActorComponentImplementingTestInterface">();
	}
	static class UTestActorComponentImplementingTestInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestActorComponentImplementingTestInterface>();
	}
};
static_assert(alignof(UTestActorComponentImplementingTestInterface) == 0x000008, "Wrong alignment on UTestActorComponentImplementingTestInterface");
static_assert(sizeof(UTestActorComponentImplementingTestInterface) == 0x0000B0, "Wrong size on UTestActorComponentImplementingTestInterface");

// Class UnitTestUtilities.TestActorImplementingTestInterface
// 0x0008 (0x02A8 - 0x02A0)
class ATestActorImplementingTestInterface final : public AActor
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestActorImplementingTestInterface">();
	}
	static class ATestActorImplementingTestInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATestActorImplementingTestInterface>();
	}
};
static_assert(alignof(ATestActorImplementingTestInterface) == 0x000008, "Wrong alignment on ATestActorImplementingTestInterface");
static_assert(sizeof(ATestActorImplementingTestInterface) == 0x0002A8, "Wrong size on ATestActorImplementingTestInterface");

// Class UnitTestUtilities.TestMovableActor
// 0x0008 (0x02A8 - 0x02A0)
class ATestMovableActor final : public AActor
{
public:
	class UBoxComponent*                          BoxComponent;                                      // 0x02A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestMovableActor">();
	}
	static class ATestMovableActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATestMovableActor>();
	}
};
static_assert(alignof(ATestMovableActor) == 0x000008, "Wrong alignment on ATestMovableActor");
static_assert(sizeof(ATestMovableActor) == 0x0002A8, "Wrong size on ATestMovableActor");
static_assert(offsetof(ATestMovableActor, BoxComponent) == 0x0002A0, "Member 'ATestMovableActor::BoxComponent' has a wrong offset!");

}

