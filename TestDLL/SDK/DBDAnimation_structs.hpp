#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDAnimation

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK
{

// Enum DBDAnimation.EArmIkMode
// NumValues: 0x0007
enum class EArmIkMode : uint8
{
	None                                     = 0,
	BothHand                                 = 1,
	OnlyRight                                = 2,
	OnlyLeft                                 = 3,
	OneHandAtTime                            = 4,
	BothAtSameTime                           = 5,
	EArmIkMode_MAX                           = 6,
};

// ScriptStruct DBDAnimation.AnimationLayerRow
// 0x0058 (0x0060 - 0x0008)
struct FAnimationLayerRow final : public FDBDTableRowBase
{
public:
	struct FGameplayTag                           Group;                                             // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Tags;                                              // 0x0018(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NotTags;                                           // 0x0038(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              AnimInstance;                                      // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAnimationLayerRow) == 0x000008, "Wrong alignment on FAnimationLayerRow");
static_assert(sizeof(FAnimationLayerRow) == 0x000060, "Wrong size on FAnimationLayerRow");
static_assert(offsetof(FAnimationLayerRow, Group) == 0x000008, "Member 'FAnimationLayerRow::Group' has a wrong offset!");
static_assert(offsetof(FAnimationLayerRow, Tags) == 0x000018, "Member 'FAnimationLayerRow::Tags' has a wrong offset!");
static_assert(offsetof(FAnimationLayerRow, NotTags) == 0x000038, "Member 'FAnimationLayerRow::NotTags' has a wrong offset!");
static_assert(offsetof(FAnimationLayerRow, AnimInstance) == 0x000058, "Member 'FAnimationLayerRow::AnimInstance' has a wrong offset!");

// ScriptStruct DBDAnimation.CustomizationCategoryAnimationMappingInfo
// 0x0018 (0x0018 - 0x0000)
struct FCustomizationCategoryAnimationMappingInfo final
{
public:
	ECustomizationCategory                        CustomizationCategory;                             // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           Tags;                                              // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationCategoryAnimationMappingInfo) == 0x000008, "Wrong alignment on FCustomizationCategoryAnimationMappingInfo");
static_assert(sizeof(FCustomizationCategoryAnimationMappingInfo) == 0x000018, "Wrong size on FCustomizationCategoryAnimationMappingInfo");
static_assert(offsetof(FCustomizationCategoryAnimationMappingInfo, CustomizationCategory) == 0x000000, "Member 'FCustomizationCategoryAnimationMappingInfo::CustomizationCategory' has a wrong offset!");
static_assert(offsetof(FCustomizationCategoryAnimationMappingInfo, Tags) == 0x000008, "Member 'FCustomizationCategoryAnimationMappingInfo::Tags' has a wrong offset!");

// ScriptStruct DBDAnimation.CustomizationAnimationMapping
// 0x0028 (0x0030 - 0x0008)
struct FCustomizationAnimationMapping final : public FDBDTableRowBase
{
public:
	int32                                         ID;                                                // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AnimTags;                                          // 0x0010(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCustomizationCategoryAnimationMappingInfo> _mappingInfos;                                     // 0x0020(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationAnimationMapping) == 0x000008, "Wrong alignment on FCustomizationAnimationMapping");
static_assert(sizeof(FCustomizationAnimationMapping) == 0x000030, "Wrong size on FCustomizationAnimationMapping");
static_assert(offsetof(FCustomizationAnimationMapping, ID) == 0x000008, "Member 'FCustomizationAnimationMapping::ID' has a wrong offset!");
static_assert(offsetof(FCustomizationAnimationMapping, AnimTags) == 0x000010, "Member 'FCustomizationAnimationMapping::AnimTags' has a wrong offset!");
static_assert(offsetof(FCustomizationAnimationMapping, _mappingInfos) == 0x000020, "Member 'FCustomizationAnimationMapping::_mappingInfos' has a wrong offset!");

// ScriptStruct DBDAnimation.KillerSpecificSurvivorAnimationsRow
// 0x0048 (0x0050 - 0x0008)
struct FKillerSpecificSurvivorAnimationsRow final : public FDBDTableRowBase
{
public:
	struct FGameplayTag                           KillerPresenceStateTag;                            // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   KillerSpecificSurvivorAnimation;                   // 0x0018(0x0038)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKillerSpecificSurvivorAnimationsRow) == 0x000008, "Wrong alignment on FKillerSpecificSurvivorAnimationsRow");
static_assert(sizeof(FKillerSpecificSurvivorAnimationsRow) == 0x000050, "Wrong size on FKillerSpecificSurvivorAnimationsRow");
static_assert(offsetof(FKillerSpecificSurvivorAnimationsRow, KillerPresenceStateTag) == 0x000008, "Member 'FKillerSpecificSurvivorAnimationsRow::KillerPresenceStateTag' has a wrong offset!");
static_assert(offsetof(FKillerSpecificSurvivorAnimationsRow, KillerSpecificSurvivorAnimation) == 0x000018, "Member 'FKillerSpecificSurvivorAnimationsRow::KillerSpecificSurvivorAnimation' has a wrong offset!");

// ScriptStruct DBDAnimation.FootBoneData
// 0x0030 (0x0030 - 0x0000)
struct FFootBoneData final
{
public:
	class UCurveVector*                           RightFootCurve;                                    // 0x0000(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           LeftFootCurve;                                     // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFootBoneData) == 0x000008, "Wrong alignment on FFootBoneData");
static_assert(sizeof(FFootBoneData) == 0x000030, "Wrong size on FFootBoneData");
static_assert(offsetof(FFootBoneData, RightFootCurve) == 0x000000, "Member 'FFootBoneData::RightFootCurve' has a wrong offset!");
static_assert(offsetof(FFootBoneData, LeftFootCurve) == 0x000018, "Member 'FFootBoneData::LeftFootCurve' has a wrong offset!");

// ScriptStruct DBDAnimation.PerspectiveDependentAnimSequenceSelector
// 0x0018 (0x0018 - 0x0000)
struct FPerspectiveDependentAnimSequenceSelector final
{
public:
	class UAnimSequence*                          _current;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _thirdPerson;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimSequence*                          _firstPerson;                                      // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FPerspectiveDependentAnimSequenceSelector) == 0x000008, "Wrong alignment on FPerspectiveDependentAnimSequenceSelector");
static_assert(sizeof(FPerspectiveDependentAnimSequenceSelector) == 0x000018, "Wrong size on FPerspectiveDependentAnimSequenceSelector");
static_assert(offsetof(FPerspectiveDependentAnimSequenceSelector, _current) == 0x000000, "Member 'FPerspectiveDependentAnimSequenceSelector::_current' has a wrong offset!");
static_assert(offsetof(FPerspectiveDependentAnimSequenceSelector, _thirdPerson) == 0x000008, "Member 'FPerspectiveDependentAnimSequenceSelector::_thirdPerson' has a wrong offset!");
static_assert(offsetof(FPerspectiveDependentAnimSequenceSelector, _firstPerson) == 0x000010, "Member 'FPerspectiveDependentAnimSequenceSelector::_firstPerson' has a wrong offset!");

}

