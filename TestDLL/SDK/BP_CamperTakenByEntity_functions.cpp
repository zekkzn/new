#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_CamperTakenByEntity

#include "Basic.hpp"

#include "BP_CamperTakenByEntity_classes.hpp"
#include "BP_CamperTakenByEntity_parameters.hpp"


namespace SDK
{

// Function BP_CamperTakenByEntity.BP_CamperTakenByEntity_C.AssignSacrificeMaterialToBase
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UDBDClipRegionComponent*>  Hook_Regions                                           (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_CamperTakenByEntity_C::AssignSacrificeMaterialToBase(TArray<class UDBDClipRegionComponent*>& Hook_Regions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CamperTakenByEntity_C", "AssignSacrificeMaterialToBase");

	Params::BP_CamperTakenByEntity_C_AssignSacrificeMaterialToBase Parms{};

	Parms.Hook_Regions = std::move(Hook_Regions);

	UObject::ProcessEvent(Func, &Parms);

	Hook_Regions = std::move(Parms.Hook_Regions);
}


// Function BP_CamperTakenByEntity.BP_CamperTakenByEntity_C.AssignSacrificeMaterialToClone
// (Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UDBDClipRegionComponent*>  HookClipRegions                                        (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_CamperTakenByEntity_C::AssignSacrificeMaterialToClone(TArray<class UDBDClipRegionComponent*>& HookClipRegions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CamperTakenByEntity_C", "AssignSacrificeMaterialToClone");

	Params::BP_CamperTakenByEntity_C_AssignSacrificeMaterialToClone Parms{};

	Parms.HookClipRegions = std::move(HookClipRegions);

	UObject::ProcessEvent(Func, &Parms);

	HookClipRegions = std::move(Parms.HookClipRegions);
}


// Function BP_CamperTakenByEntity.BP_CamperTakenByEntity_C.DoTransitionBegin
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UDBDClipRegionComponent*>  Hook_Clip_Region                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_CamperTakenByEntity_C::DoTransitionBegin(TArray<class UDBDClipRegionComponent*>& Hook_Clip_Region)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CamperTakenByEntity_C", "DoTransitionBegin");

	Params::BP_CamperTakenByEntity_C_DoTransitionBegin Parms{};

	Parms.Hook_Clip_Region = std::move(Hook_Clip_Region);

	UObject::ProcessEvent(Func, &Parms);

	Hook_Clip_Region = std::move(Parms.Hook_Clip_Region);
}


// Function BP_CamperTakenByEntity.BP_CamperTakenByEntity_C.DoTransitionEnd
// (Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class UDBDClipRegionComponent*>  Hook_Clip_Regions                                      (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, ContainsInstancedReference)

void UBP_CamperTakenByEntity_C::DoTransitionEnd(TArray<class UDBDClipRegionComponent*>& Hook_Clip_Regions)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CamperTakenByEntity_C", "DoTransitionEnd");

	Params::BP_CamperTakenByEntity_C_DoTransitionEnd Parms{};

	Parms.Hook_Clip_Regions = std::move(Hook_Clip_Regions);

	UObject::ProcessEvent(Func, &Parms);

	Hook_Clip_Regions = std::move(Parms.Hook_Clip_Regions);
}


// Function BP_CamperTakenByEntity.BP_CamperTakenByEntity_C.DoTransitionUpdate
// (Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CamperTakenByEntity_C::DoTransitionUpdate(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CamperTakenByEntity_C", "DoTransitionUpdate");

	Params::BP_CamperTakenByEntity_C_DoTransitionUpdate Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}


// Function BP_CamperTakenByEntity.BP_CamperTakenByEntity_C.MakeBaseMaterialsDynamic
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)

void UBP_CamperTakenByEntity_C::MakeBaseMaterialsDynamic()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CamperTakenByEntity_C", "MakeBaseMaterialsDynamic");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BP_CamperTakenByEntity.BP_CamperTakenByEntity_C.TransitionProgress
// (Private, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Time                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBP_CamperTakenByEntity_C::TransitionProgress(double Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BP_CamperTakenByEntity_C", "TransitionProgress");

	Params::BP_CamperTakenByEntity_C_TransitionProgress Parms{};

	Parms.Time = Time;

	UObject::ProcessEvent(Func, &Parms);
}

}

