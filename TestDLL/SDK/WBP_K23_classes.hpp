#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_K23

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DBDUIViewsCore_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_K23.WBP_K23_C
// 0x0060 (0x0398 - 0x0338)
class UWBP_K23_C final : public UCorePlayerStatusKillerEffectWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0338(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       LacerationFull;                                    // 0x0340(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LacerationGlassReset;                              // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LacerationRed;                                     // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LacerationWhite;                                   // 0x0358(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimation*                       LacerationHit;                                     // 0x0360(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDBDImage*                              LacerationGlass;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              LacerationMeter;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOverlay*                               LacerationOverlay;                                 // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTricksterStatusData*                   CacheData;                                         // 0x0380(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MeterMaterial;                                     // 0x0388(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               GlassMaterial;                                     // 0x0390(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void TricksterLacerationFinished();
	void Trickster_End_Animation();
	void SetLacerationVisiblity(double& Current_Laceration_Level, double& Max_Laceration_Level);
	void SetLacerationData(class UTricksterStatusData* KillerData);
	void SetKillerData(const struct FPlayerStatusViewData& Data);
	void Set_Laceration_Segments(double& Max_Laceration_);
	void ExecuteUbergraph_WBP_K23(int32 EntryPoint);
	void Construct();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_K23_C">();
	}
	static class UWBP_K23_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_K23_C>();
	}
};
static_assert(alignof(UWBP_K23_C) == 0x000008, "Wrong alignment on UWBP_K23_C");
static_assert(sizeof(UWBP_K23_C) == 0x000398, "Wrong size on UWBP_K23_C");
static_assert(offsetof(UWBP_K23_C, UberGraphFrame) == 0x000338, "Member 'UWBP_K23_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, LacerationFull) == 0x000340, "Member 'UWBP_K23_C::LacerationFull' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, LacerationGlassReset) == 0x000348, "Member 'UWBP_K23_C::LacerationGlassReset' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, LacerationRed) == 0x000350, "Member 'UWBP_K23_C::LacerationRed' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, LacerationWhite) == 0x000358, "Member 'UWBP_K23_C::LacerationWhite' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, LacerationHit) == 0x000360, "Member 'UWBP_K23_C::LacerationHit' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, LacerationGlass) == 0x000368, "Member 'UWBP_K23_C::LacerationGlass' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, LacerationMeter) == 0x000370, "Member 'UWBP_K23_C::LacerationMeter' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, LacerationOverlay) == 0x000378, "Member 'UWBP_K23_C::LacerationOverlay' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, CacheData) == 0x000380, "Member 'UWBP_K23_C::CacheData' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, MeterMaterial) == 0x000388, "Member 'UWBP_K23_C::MeterMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_K23_C, GlassMaterial) == 0x000390, "Member 'UWBP_K23_C::GlassMaterial' has a wrong offset!");

}

