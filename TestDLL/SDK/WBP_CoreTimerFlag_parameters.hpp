#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreTimerFlag

#include "Basic.hpp"

#include "DBDUIViewInterfaces_structs.hpp"
#include "SlateCore_structs.hpp"


namespace SDK::Params
{

// Function WBP_CoreTimerFlag.WBP_CoreTimerFlag_C.ExecuteUbergraph_WBP_CoreTimerFlag
// 0x00E8 (0x00E8 - 0x0000)
struct WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFlagType                                     Temp_byte_Variable;                                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFlagType                                     Temp_byte_Variable_1;                              // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerFlagViewData                     K2Node_Event_data;                                 // 0x0008(0x0030)(ConstParm)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerFlagViewData                     CallFunc_GetCachedData_ReturnValue;                // 0x0040(0x0030)()
	bool                                          Temp_bool_Variable;                                // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EFlagSize                                     CallFunc_GetCurrentFlagSize_ReturnValue;           // 0x0071(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0072(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_73[0x5];                                       // 0x0073(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerFlagViewData                     K2Node_Select_Default;                             // 0x0078(0x0030)()
	EFlagType                                     Temp_byte_Variable_2;                              // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x00AC(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_2;                           // 0x00C0(0x0014)()
	struct FSlateColor                            K2Node_Select_Default_3;                           // 0x00D4(0x0014)()
};
static_assert(alignof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag) == 0x000008, "Wrong alignment on WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag");
static_assert(sizeof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag) == 0x0000E8, "Wrong size on WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, EntryPoint) == 0x000000, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, Temp_byte_Variable) == 0x000004, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, Temp_byte_Variable_1) == 0x000005, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, K2Node_Event_data) == 0x000008, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::K2Node_Event_data' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, K2Node_Event_IsDesignTime) == 0x000038, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, CallFunc_GetCachedData_ReturnValue) == 0x000040, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::CallFunc_GetCachedData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, Temp_bool_Variable) == 0x000070, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, CallFunc_GetCurrentFlagSize_ReturnValue) == 0x000071, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::CallFunc_GetCurrentFlagSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, K2Node_SwitchEnum_CmpSuccess) == 0x000072, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, K2Node_Select_Default) == 0x000078, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, Temp_byte_Variable_2) == 0x0000A8, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, K2Node_Select_Default_1) == 0x0000AC, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, K2Node_Select_Default_2) == 0x0000C0, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag, K2Node_Select_Default_3) == 0x0000D4, "Member 'WBP_CoreTimerFlag_C_ExecuteUbergraph_WBP_CoreTimerFlag::K2Node_Select_Default_3' has a wrong offset!");

// Function WBP_CoreTimerFlag.WBP_CoreTimerFlag_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreTimerFlag_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreTimerFlag_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_CoreTimerFlag_C_PreConstruct");
static_assert(sizeof(WBP_CoreTimerFlag_C_PreConstruct) == 0x000001, "Wrong size on WBP_CoreTimerFlag_C_PreConstruct");
static_assert(offsetof(WBP_CoreTimerFlag_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_CoreTimerFlag_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_CoreTimerFlag.WBP_CoreTimerFlag_C.SetData
// 0x0030 (0x0030 - 0x0000)
struct WBP_CoreTimerFlag_C_SetData final
{
public:
	struct FTimerFlagViewData                     Data;                                              // 0x0000(0x0030)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_CoreTimerFlag_C_SetData) == 0x000008, "Wrong alignment on WBP_CoreTimerFlag_C_SetData");
static_assert(sizeof(WBP_CoreTimerFlag_C_SetData) == 0x000030, "Wrong size on WBP_CoreTimerFlag_C_SetData");
static_assert(offsetof(WBP_CoreTimerFlag_C_SetData, Data) == 0x000000, "Member 'WBP_CoreTimerFlag_C_SetData::Data' has a wrong offset!");

// Function WBP_CoreTimerFlag.WBP_CoreTimerFlag_C.UpdateLayout
// 0x00A0 (0x00A0 - 0x0000)
struct WBP_CoreTimerFlag_C_UpdateLayout final
{
public:
	struct FTimerFlagViewData                     Data;                                              // 0x0000(0x0030)(BlueprintVisible, BlueprintReadOnly, Parm)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable_1;                   // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable_1;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UWidget*                                CallFunc_Array_Get_Item;                           // 0x0048(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue;               // 0x0058(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Length_ReturnValue_1;               // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue;              // 0x0068(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue_1;                 // 0x006C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Subtract_IntInt_ReturnValue_1;            // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        CallFunc_GetAllChildren_ReturnValue;               // 0x0078(0x0010)(ReferenceParm, ContainsInstancedReference)
	class UWidget*                                CallFunc_Array_Get_Item_1;                         // 0x0088(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UGridSlot*                              CallFunc_SlotAsGridSlot_ReturnValue_1;             // 0x0090(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue_2;               // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue_1;                // 0x009C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreTimerFlag_C_UpdateLayout) == 0x000008, "Wrong alignment on WBP_CoreTimerFlag_C_UpdateLayout");
static_assert(sizeof(WBP_CoreTimerFlag_C_UpdateLayout) == 0x0000A0, "Wrong size on WBP_CoreTimerFlag_C_UpdateLayout");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, Data) == 0x000000, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::Data' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, Temp_int_Loop_Counter_Variable) == 0x000030, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, K2Node_SwitchEnum_CmpSuccess) == 0x000034, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Add_IntInt_ReturnValue) == 0x000038, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, Temp_int_Array_Index_Variable) == 0x00003C, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, Temp_int_Array_Index_Variable_1) == 0x000040, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::Temp_int_Array_Index_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, Temp_int_Loop_Counter_Variable_1) == 0x000044, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::Temp_int_Loop_Counter_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Array_Get_Item) == 0x000048, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Array_Length_ReturnValue) == 0x000050, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_SlotAsGridSlot_ReturnValue) == 0x000058, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_SlotAsGridSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Less_IntInt_ReturnValue) == 0x000060, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Array_Length_ReturnValue_1) == 0x000064, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Array_Length_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Subtract_IntInt_ReturnValue) == 0x000068, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Subtract_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Add_IntInt_ReturnValue_1) == 0x00006C, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Add_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Subtract_IntInt_ReturnValue_1) == 0x000070, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Subtract_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_GetAllChildren_ReturnValue) == 0x000078, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_GetAllChildren_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Array_Get_Item_1) == 0x000088, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_SlotAsGridSlot_ReturnValue_1) == 0x000090, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_SlotAsGridSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Array_Length_ReturnValue_2) == 0x000098, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Array_Length_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreTimerFlag_C_UpdateLayout, CallFunc_Less_IntInt_ReturnValue_1) == 0x00009C, "Member 'WBP_CoreTimerFlag_C_UpdateLayout::CallFunc_Less_IntInt_ReturnValue_1' has a wrong offset!");

}

