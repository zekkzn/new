#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreEquippedPower

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DBDUIViewsCore_classes.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CoreEquippedPower.WBP_CoreEquippedPower_C
// 0x0050 (0x0390 - 0x0340)
class UWBP_CoreEquippedPower_C final : public UCoreEquippedPowerWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0340(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       CarryingTransition;                                // 0x0348(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDBDImage*                              ImageBG;                                           // 0x0350(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              ImageIcon;                                         // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              ImageRarity;                                       // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              LayoutIconScale;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCanvasPanel*                           RootCanvas;                                        // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              Separator;                                         // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_CorePowerBundle_C*                 WBP_PowerBundle;                                   // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	bool                                          IsCarrying;                                        // 0x0388(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UpdateControlMode(EControlMode ControlMode);
	void SetData(const struct FPowerBundleViewData& PowerBundleData);
	void SetCarryingVisualFeedback(bool Param_IsCarrying);
	void SetCarryingMode(const bool Param_IsCarrying, const struct FPowerViewData& CarryingViewData);
	void SetActiveState(bool IsActive);
	void OnControlModeChangedBP(EControlMode ControlMode);
	void ExecuteUbergraph_WBP_CoreEquippedPower(int32 EntryPoint);
	void Construct();
	void ClearData();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CoreEquippedPower_C">();
	}
	static class UWBP_CoreEquippedPower_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CoreEquippedPower_C>();
	}
};
static_assert(alignof(UWBP_CoreEquippedPower_C) == 0x000008, "Wrong alignment on UWBP_CoreEquippedPower_C");
static_assert(sizeof(UWBP_CoreEquippedPower_C) == 0x000390, "Wrong size on UWBP_CoreEquippedPower_C");
static_assert(offsetof(UWBP_CoreEquippedPower_C, UberGraphFrame) == 0x000340, "Member 'UWBP_CoreEquippedPower_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CoreEquippedPower_C, CarryingTransition) == 0x000348, "Member 'UWBP_CoreEquippedPower_C::CarryingTransition' has a wrong offset!");
static_assert(offsetof(UWBP_CoreEquippedPower_C, ImageBG) == 0x000350, "Member 'UWBP_CoreEquippedPower_C::ImageBG' has a wrong offset!");
static_assert(offsetof(UWBP_CoreEquippedPower_C, ImageIcon) == 0x000358, "Member 'UWBP_CoreEquippedPower_C::ImageIcon' has a wrong offset!");
static_assert(offsetof(UWBP_CoreEquippedPower_C, ImageRarity) == 0x000360, "Member 'UWBP_CoreEquippedPower_C::ImageRarity' has a wrong offset!");
static_assert(offsetof(UWBP_CoreEquippedPower_C, LayoutIconScale) == 0x000368, "Member 'UWBP_CoreEquippedPower_C::LayoutIconScale' has a wrong offset!");
static_assert(offsetof(UWBP_CoreEquippedPower_C, RootCanvas) == 0x000370, "Member 'UWBP_CoreEquippedPower_C::RootCanvas' has a wrong offset!");
static_assert(offsetof(UWBP_CoreEquippedPower_C, Separator) == 0x000378, "Member 'UWBP_CoreEquippedPower_C::Separator' has a wrong offset!");
static_assert(offsetof(UWBP_CoreEquippedPower_C, WBP_PowerBundle) == 0x000380, "Member 'UWBP_CoreEquippedPower_C::WBP_PowerBundle' has a wrong offset!");
static_assert(offsetof(UWBP_CoreEquippedPower_C, IsCarrying) == 0x000388, "Member 'UWBP_CoreEquippedPower_C::IsCarrying' has a wrong offset!");

}

