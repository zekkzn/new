#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK37

#include "Basic.hpp"

#include "AnimationUtilities_structs.hpp"
#include "TheK37_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK::Params
{

// Function TheK37.K37WolfAbility.OnAttackSubstateChanged
// 0x0001 (0x0001 - 0x0000)
struct K37WolfAbility_OnAttackSubstateChanged final
{
public:
	EAttackSubstate                               Substate;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37WolfAbility_OnAttackSubstateChanged) == 0x000001, "Wrong alignment on K37WolfAbility_OnAttackSubstateChanged");
static_assert(sizeof(K37WolfAbility_OnAttackSubstateChanged) == 0x000001, "Wrong size on K37WolfAbility_OnAttackSubstateChanged");
static_assert(offsetof(K37WolfAbility_OnAttackSubstateChanged, Substate) == 0x000000, "Member 'K37WolfAbility_OnAttackSubstateChanged::Substate' has a wrong offset!");

// Function TheK37.FlamePillarExitGateMinigame.Authority_SpawnFlamePillarAtLocation
// 0x0018 (0x0018 - 0x0000)
struct FlamePillarExitGateMinigame_Authority_SpawnFlamePillarAtLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlamePillarExitGateMinigame_Authority_SpawnFlamePillarAtLocation) == 0x000008, "Wrong alignment on FlamePillarExitGateMinigame_Authority_SpawnFlamePillarAtLocation");
static_assert(sizeof(FlamePillarExitGateMinigame_Authority_SpawnFlamePillarAtLocation) == 0x000018, "Wrong size on FlamePillarExitGateMinigame_Authority_SpawnFlamePillarAtLocation");
static_assert(offsetof(FlamePillarExitGateMinigame_Authority_SpawnFlamePillarAtLocation, Location) == 0x000000, "Member 'FlamePillarExitGateMinigame_Authority_SpawnFlamePillarAtLocation::Location' has a wrong offset!");

// Function TheK37.FlamePillarExitGateMinigame.GetExitArea
// 0x0008 (0x0008 - 0x0000)
struct FlamePillarExitGateMinigame_GetExitArea final
{
public:
	class UBoxComponent*                          ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FlamePillarExitGateMinigame_GetExitArea) == 0x000008, "Wrong alignment on FlamePillarExitGateMinigame_GetExitArea");
static_assert(sizeof(FlamePillarExitGateMinigame_GetExitArea) == 0x000008, "Wrong size on FlamePillarExitGateMinigame_GetExitArea");
static_assert(offsetof(FlamePillarExitGateMinigame_GetExitArea, ReturnValue) == 0x000000, "Member 'FlamePillarExitGateMinigame_GetExitArea::ReturnValue' has a wrong offset!");

// Function TheK37.K37BatAbility.Cosmetic_OnTeleportFinished
// 0x0008 (0x0008 - 0x0000)
struct K37BatAbility_Cosmetic_OnTeleportFinished final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37BatAbility_Cosmetic_OnTeleportFinished) == 0x000008, "Wrong alignment on K37BatAbility_Cosmetic_OnTeleportFinished");
static_assert(sizeof(K37BatAbility_Cosmetic_OnTeleportFinished) == 0x000008, "Wrong size on K37BatAbility_Cosmetic_OnTeleportFinished");
static_assert(offsetof(K37BatAbility_Cosmetic_OnTeleportFinished, TargetActor) == 0x000000, "Member 'K37BatAbility_Cosmetic_OnTeleportFinished::TargetActor' has a wrong offset!");

// Function TheK37.K37BatAbility.Cosmetic_OnTeleportProgressChanged
// 0x0010 (0x0010 - 0x0000)
struct K37BatAbility_Cosmetic_OnTeleportProgressChanged final
{
public:
	float                                         ProgressPercentage;                                // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37BatAbility_Cosmetic_OnTeleportProgressChanged) == 0x000008, "Wrong alignment on K37BatAbility_Cosmetic_OnTeleportProgressChanged");
static_assert(sizeof(K37BatAbility_Cosmetic_OnTeleportProgressChanged) == 0x000010, "Wrong size on K37BatAbility_Cosmetic_OnTeleportProgressChanged");
static_assert(offsetof(K37BatAbility_Cosmetic_OnTeleportProgressChanged, ProgressPercentage) == 0x000000, "Member 'K37BatAbility_Cosmetic_OnTeleportProgressChanged::ProgressPercentage' has a wrong offset!");
static_assert(offsetof(K37BatAbility_Cosmetic_OnTeleportProgressChanged, TargetActor) == 0x000008, "Member 'K37BatAbility_Cosmetic_OnTeleportProgressChanged::TargetActor' has a wrong offset!");

// Function TheK37.K37BatAbility.Cosmetic_OnTeleportStarted
// 0x0008 (0x0008 - 0x0000)
struct K37BatAbility_Cosmetic_OnTeleportStarted final
{
public:
	class AActor*                                 TargetActor;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37BatAbility_Cosmetic_OnTeleportStarted) == 0x000008, "Wrong alignment on K37BatAbility_Cosmetic_OnTeleportStarted");
static_assert(sizeof(K37BatAbility_Cosmetic_OnTeleportStarted) == 0x000008, "Wrong size on K37BatAbility_Cosmetic_OnTeleportStarted");
static_assert(offsetof(K37BatAbility_Cosmetic_OnTeleportStarted, TargetActor) == 0x000000, "Member 'K37BatAbility_Cosmetic_OnTeleportStarted::TargetActor' has a wrong offset!");

// Function TheK37.K37BatAbility.GetMaxRangeForTeleport
// 0x0004 (0x0004 - 0x0000)
struct K37BatAbility_GetMaxRangeForTeleport final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37BatAbility_GetMaxRangeForTeleport) == 0x000004, "Wrong alignment on K37BatAbility_GetMaxRangeForTeleport");
static_assert(sizeof(K37BatAbility_GetMaxRangeForTeleport) == 0x000004, "Wrong size on K37BatAbility_GetMaxRangeForTeleport");
static_assert(offsetof(K37BatAbility_GetMaxRangeForTeleport, ReturnValue) == 0x000000, "Member 'K37BatAbility_GetMaxRangeForTeleport::ReturnValue' has a wrong offset!");

// Function TheK37.K37FlamePillar.Authority_OnOverlap
// 0x0110 (0x0110 - 0x0000)
struct K37FlamePillar_Authority_OnOverlap final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37FlamePillar_Authority_OnOverlap) == 0x000008, "Wrong alignment on K37FlamePillar_Authority_OnOverlap");
static_assert(sizeof(K37FlamePillar_Authority_OnOverlap) == 0x000110, "Wrong size on K37FlamePillar_Authority_OnOverlap");
static_assert(offsetof(K37FlamePillar_Authority_OnOverlap, OverlappedComponent) == 0x000000, "Member 'K37FlamePillar_Authority_OnOverlap::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K37FlamePillar_Authority_OnOverlap, OtherActor) == 0x000008, "Member 'K37FlamePillar_Authority_OnOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(K37FlamePillar_Authority_OnOverlap, OtherComp) == 0x000010, "Member 'K37FlamePillar_Authority_OnOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(K37FlamePillar_Authority_OnOverlap, OtherBodyIndex) == 0x000018, "Member 'K37FlamePillar_Authority_OnOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K37FlamePillar_Authority_OnOverlap, bFromSweep) == 0x00001C, "Member 'K37FlamePillar_Authority_OnOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(K37FlamePillar_Authority_OnOverlap, SweepResult) == 0x000020, "Member 'K37FlamePillar_Authority_OnOverlap::SweepResult' has a wrong offset!");

// Function TheK37.K37FlamePillar.Authority_SetCurrentState
// 0x0001 (0x0001 - 0x0000)
struct K37FlamePillar_Authority_SetCurrentState final
{
public:
	EK37FlamePillarState                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37FlamePillar_Authority_SetCurrentState) == 0x000001, "Wrong alignment on K37FlamePillar_Authority_SetCurrentState");
static_assert(sizeof(K37FlamePillar_Authority_SetCurrentState) == 0x000001, "Wrong size on K37FlamePillar_Authority_SetCurrentState");
static_assert(offsetof(K37FlamePillar_Authority_SetCurrentState, State) == 0x000000, "Member 'K37FlamePillar_Authority_SetCurrentState::State' has a wrong offset!");

// Function TheK37.K37FlamePillar.Authority_StartSpawning
// 0x0070 (0x0070 - 0x0000)
struct K37FlamePillar_Authority_StartSpawning final
{
public:
	struct FTransform                             SpawnTransform;                                    // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK37FlamePillarData*                    FlamePillarData;                                   // 0x0060(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K37FlamePillar_Authority_StartSpawning) == 0x000010, "Wrong alignment on K37FlamePillar_Authority_StartSpawning");
static_assert(sizeof(K37FlamePillar_Authority_StartSpawning) == 0x000070, "Wrong size on K37FlamePillar_Authority_StartSpawning");
static_assert(offsetof(K37FlamePillar_Authority_StartSpawning, SpawnTransform) == 0x000000, "Member 'K37FlamePillar_Authority_StartSpawning::SpawnTransform' has a wrong offset!");
static_assert(offsetof(K37FlamePillar_Authority_StartSpawning, FlamePillarData) == 0x000060, "Member 'K37FlamePillar_Authority_StartSpawning::FlamePillarData' has a wrong offset!");

// Function TheK37.K37FlamePillar.Cosmetic_OnFlamePillarHit
// 0x0008 (0x0008 - 0x0000)
struct K37FlamePillar_Cosmetic_OnFlamePillarHit final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37FlamePillar_Cosmetic_OnFlamePillarHit) == 0x000008, "Wrong alignment on K37FlamePillar_Cosmetic_OnFlamePillarHit");
static_assert(sizeof(K37FlamePillar_Cosmetic_OnFlamePillarHit) == 0x000008, "Wrong size on K37FlamePillar_Cosmetic_OnFlamePillarHit");
static_assert(offsetof(K37FlamePillar_Cosmetic_OnFlamePillarHit, Survivor) == 0x000000, "Member 'K37FlamePillar_Cosmetic_OnFlamePillarHit::Survivor' has a wrong offset!");

// Function TheK37.K37FlamePillar.GetDurationForFlamePillarState
// 0x0008 (0x0008 - 0x0000)
struct K37FlamePillar_GetDurationForFlamePillarState final
{
public:
	EK37FlamePillarState                          State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37FlamePillar_GetDurationForFlamePillarState) == 0x000004, "Wrong alignment on K37FlamePillar_GetDurationForFlamePillarState");
static_assert(sizeof(K37FlamePillar_GetDurationForFlamePillarState) == 0x000008, "Wrong size on K37FlamePillar_GetDurationForFlamePillarState");
static_assert(offsetof(K37FlamePillar_GetDurationForFlamePillarState, State) == 0x000000, "Member 'K37FlamePillar_GetDurationForFlamePillarState::State' has a wrong offset!");
static_assert(offsetof(K37FlamePillar_GetDurationForFlamePillarState, ReturnValue) == 0x000004, "Member 'K37FlamePillar_GetDurationForFlamePillarState::ReturnValue' has a wrong offset!");

// Function TheK37.K37FlamePillar.Multicast_HitSurvivor
// 0x0008 (0x0008 - 0x0000)
struct K37FlamePillar_Multicast_HitSurvivor final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37FlamePillar_Multicast_HitSurvivor) == 0x000008, "Wrong alignment on K37FlamePillar_Multicast_HitSurvivor");
static_assert(sizeof(K37FlamePillar_Multicast_HitSurvivor) == 0x000008, "Wrong size on K37FlamePillar_Multicast_HitSurvivor");
static_assert(offsetof(K37FlamePillar_Multicast_HitSurvivor, Survivor) == 0x000000, "Member 'K37FlamePillar_Multicast_HitSurvivor::Survivor' has a wrong offset!");

// Function TheK37.K37FlamePillar.GetPillarHeight
// 0x0004 (0x0004 - 0x0000)
struct K37FlamePillar_GetPillarHeight final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37FlamePillar_GetPillarHeight) == 0x000004, "Wrong alignment on K37FlamePillar_GetPillarHeight");
static_assert(sizeof(K37FlamePillar_GetPillarHeight) == 0x000004, "Wrong size on K37FlamePillar_GetPillarHeight");
static_assert(offsetof(K37FlamePillar_GetPillarHeight, ReturnValue) == 0x000000, "Member 'K37FlamePillar_GetPillarHeight::ReturnValue' has a wrong offset!");

// Function TheK37.K37FlamePillar.GetPillarRadius
// 0x0004 (0x0004 - 0x0000)
struct K37FlamePillar_GetPillarRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37FlamePillar_GetPillarRadius) == 0x000004, "Wrong alignment on K37FlamePillar_GetPillarRadius");
static_assert(sizeof(K37FlamePillar_GetPillarRadius) == 0x000004, "Wrong size on K37FlamePillar_GetPillarRadius");
static_assert(offsetof(K37FlamePillar_GetPillarRadius, ReturnValue) == 0x000000, "Member 'K37FlamePillar_GetPillarRadius::ReturnValue' has a wrong offset!");

// Function TheK37.K37FlamePillar.GetPillarSpawnHitResult
// 0x00F0 (0x00F0 - 0x0000)
struct K37FlamePillar_GetPillarSpawnHitResult final
{
public:
	struct FHitResult                             ReturnValue;                                       // 0x0000(0x00F0)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37FlamePillar_GetPillarSpawnHitResult) == 0x000008, "Wrong alignment on K37FlamePillar_GetPillarSpawnHitResult");
static_assert(sizeof(K37FlamePillar_GetPillarSpawnHitResult) == 0x0000F0, "Wrong size on K37FlamePillar_GetPillarSpawnHitResult");
static_assert(offsetof(K37FlamePillar_GetPillarSpawnHitResult, ReturnValue) == 0x000000, "Member 'K37FlamePillar_GetPillarSpawnHitResult::ReturnValue' has a wrong offset!");

// Function TheK37.K37P01.Authority_OnObsessionChanged
// 0x0010 (0x0010 - 0x0000)
struct K37P01_Authority_OnObsessionChanged final
{
public:
	class ACamperPlayer*                          NewObsession;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACamperPlayer*                          PreviousObsession;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P01_Authority_OnObsessionChanged) == 0x000008, "Wrong alignment on K37P01_Authority_OnObsessionChanged");
static_assert(sizeof(K37P01_Authority_OnObsessionChanged) == 0x000010, "Wrong size on K37P01_Authority_OnObsessionChanged");
static_assert(offsetof(K37P01_Authority_OnObsessionChanged, NewObsession) == 0x000000, "Member 'K37P01_Authority_OnObsessionChanged::NewObsession' has a wrong offset!");
static_assert(offsetof(K37P01_Authority_OnObsessionChanged, PreviousObsession) == 0x000008, "Member 'K37P01_Authority_OnObsessionChanged::PreviousObsession' has a wrong offset!");

// Function TheK37.K37P01.GetHexTotemAuraRevealRangeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K37P01_GetHexTotemAuraRevealRangeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P01_GetHexTotemAuraRevealRangeAtLevel) == 0x000004, "Wrong alignment on K37P01_GetHexTotemAuraRevealRangeAtLevel");
static_assert(sizeof(K37P01_GetHexTotemAuraRevealRangeAtLevel) == 0x000004, "Wrong size on K37P01_GetHexTotemAuraRevealRangeAtLevel");
static_assert(offsetof(K37P01_GetHexTotemAuraRevealRangeAtLevel, ReturnValue) == 0x000000, "Member 'K37P01_GetHexTotemAuraRevealRangeAtLevel::ReturnValue' has a wrong offset!");

// Function TheK37.K37P01.GetRepairSpeedPenaltyValueAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K37P01_GetRepairSpeedPenaltyValueAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P01_GetRepairSpeedPenaltyValueAtLevel) == 0x000004, "Wrong alignment on K37P01_GetRepairSpeedPenaltyValueAtLevel");
static_assert(sizeof(K37P01_GetRepairSpeedPenaltyValueAtLevel) == 0x000004, "Wrong size on K37P01_GetRepairSpeedPenaltyValueAtLevel");
static_assert(offsetof(K37P01_GetRepairSpeedPenaltyValueAtLevel, ReturnValue) == 0x000000, "Member 'K37P01_GetRepairSpeedPenaltyValueAtLevel::ReturnValue' has a wrong offset!");

// Function TheK37.K37P02.Authority_OnChestIsOpenedChanged
// 0x0010 (0x0010 - 0x0000)
struct K37P02_Authority_OnChestIsOpenedChanged final
{
public:
	bool                                          IsOpened;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASearchable*                            Chest;                                             // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P02_Authority_OnChestIsOpenedChanged) == 0x000008, "Wrong alignment on K37P02_Authority_OnChestIsOpenedChanged");
static_assert(sizeof(K37P02_Authority_OnChestIsOpenedChanged) == 0x000010, "Wrong size on K37P02_Authority_OnChestIsOpenedChanged");
static_assert(offsetof(K37P02_Authority_OnChestIsOpenedChanged, IsOpened) == 0x000000, "Member 'K37P02_Authority_OnChestIsOpenedChanged::IsOpened' has a wrong offset!");
static_assert(offsetof(K37P02_Authority_OnChestIsOpenedChanged, Chest) == 0x000008, "Member 'K37P02_Authority_OnChestIsOpenedChanged::Chest' has a wrong offset!");

// Function TheK37.K37P02.Authority_OnCloseChestInteractionFinished
// 0x0010 (0x0010 - 0x0000)
struct K37P02_Authority_OnCloseChestInteractionFinished final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasInteractionStarted;                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K37P02_Authority_OnCloseChestInteractionFinished) == 0x000008, "Wrong alignment on K37P02_Authority_OnCloseChestInteractionFinished");
static_assert(sizeof(K37P02_Authority_OnCloseChestInteractionFinished) == 0x000010, "Wrong size on K37P02_Authority_OnCloseChestInteractionFinished");
static_assert(offsetof(K37P02_Authority_OnCloseChestInteractionFinished, Player) == 0x000000, "Member 'K37P02_Authority_OnCloseChestInteractionFinished::Player' has a wrong offset!");
static_assert(offsetof(K37P02_Authority_OnCloseChestInteractionFinished, HasInteractionStarted) == 0x000008, "Member 'K37P02_Authority_OnCloseChestInteractionFinished::HasInteractionStarted' has a wrong offset!");

// Function TheK37.K37P02.Authority_PlayerInRangeFromChestChanged
// 0x0018 (0x0018 - 0x0000)
struct K37P02_Authority_PlayerInRangeFromChestChanged final
{
public:
	class AActor*                                 Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInRange;                                         // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ASearchable*                            Chest;                                             // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P02_Authority_PlayerInRangeFromChestChanged) == 0x000008, "Wrong alignment on K37P02_Authority_PlayerInRangeFromChestChanged");
static_assert(sizeof(K37P02_Authority_PlayerInRangeFromChestChanged) == 0x000018, "Wrong size on K37P02_Authority_PlayerInRangeFromChestChanged");
static_assert(offsetof(K37P02_Authority_PlayerInRangeFromChestChanged, Player) == 0x000000, "Member 'K37P02_Authority_PlayerInRangeFromChestChanged::Player' has a wrong offset!");
static_assert(offsetof(K37P02_Authority_PlayerInRangeFromChestChanged, IsInRange) == 0x000008, "Member 'K37P02_Authority_PlayerInRangeFromChestChanged::IsInRange' has a wrong offset!");
static_assert(offsetof(K37P02_Authority_PlayerInRangeFromChestChanged, Chest) == 0x000010, "Member 'K37P02_Authority_PlayerInRangeFromChestChanged::Chest' has a wrong offset!");

// Function TheK37.K37P02.GetChestAuraRevealDuration
// 0x0004 (0x0004 - 0x0000)
struct K37P02_GetChestAuraRevealDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P02_GetChestAuraRevealDuration) == 0x000004, "Wrong alignment on K37P02_GetChestAuraRevealDuration");
static_assert(sizeof(K37P02_GetChestAuraRevealDuration) == 0x000004, "Wrong size on K37P02_GetChestAuraRevealDuration");
static_assert(offsetof(K37P02_GetChestAuraRevealDuration, ReturnValue) == 0x000000, "Member 'K37P02_GetChestAuraRevealDuration::ReturnValue' has a wrong offset!");

// Function TheK37.K37P02.GetChestAuraRevealRange
// 0x0004 (0x0004 - 0x0000)
struct K37P02_GetChestAuraRevealRange final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P02_GetChestAuraRevealRange) == 0x000004, "Wrong alignment on K37P02_GetChestAuraRevealRange");
static_assert(sizeof(K37P02_GetChestAuraRevealRange) == 0x000004, "Wrong size on K37P02_GetChestAuraRevealRange");
static_assert(offsetof(K37P02_GetChestAuraRevealRange, ReturnValue) == 0x000000, "Member 'K37P02_GetChestAuraRevealRange::ReturnValue' has a wrong offset!");

// Function TheK37.K37P02.GetCooldownDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct K37P02_GetCooldownDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P02_GetCooldownDurationAtLevel) == 0x000004, "Wrong alignment on K37P02_GetCooldownDurationAtLevel");
static_assert(sizeof(K37P02_GetCooldownDurationAtLevel) == 0x000004, "Wrong size on K37P02_GetCooldownDurationAtLevel");
static_assert(offsetof(K37P02_GetCooldownDurationAtLevel, ReturnValue) == 0x000000, "Member 'K37P02_GetCooldownDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheK37.K37P03.Authority_OnInteractableBlockChanged
// 0x0008 (0x0008 - 0x0000)
struct K37P03_Authority_OnInteractableBlockChanged final
{
public:
	class AInteractable*                          Interactable;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P03_Authority_OnInteractableBlockChanged) == 0x000008, "Wrong alignment on K37P03_Authority_OnInteractableBlockChanged");
static_assert(sizeof(K37P03_Authority_OnInteractableBlockChanged) == 0x000008, "Wrong size on K37P03_Authority_OnInteractableBlockChanged");
static_assert(offsetof(K37P03_Authority_OnInteractableBlockChanged, Interactable) == 0x000000, "Member 'K37P03_Authority_OnInteractableBlockChanged::Interactable' has a wrong offset!");

// Function TheK37.K37P03.Authority_OnInteractorLockChanged
// 0x0018 (0x0018 - 0x0000)
struct K37P03_Authority_OnInteractorLockChanged final
{
public:
	bool                                          IsLocked;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AInteractable*                          Interactable;                                      // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P03_Authority_OnInteractorLockChanged) == 0x000008, "Wrong alignment on K37P03_Authority_OnInteractorLockChanged");
static_assert(sizeof(K37P03_Authority_OnInteractorLockChanged) == 0x000018, "Wrong size on K37P03_Authority_OnInteractorLockChanged");
static_assert(offsetof(K37P03_Authority_OnInteractorLockChanged, IsLocked) == 0x000000, "Member 'K37P03_Authority_OnInteractorLockChanged::IsLocked' has a wrong offset!");
static_assert(offsetof(K37P03_Authority_OnInteractorLockChanged, Player) == 0x000008, "Member 'K37P03_Authority_OnInteractorLockChanged::Player' has a wrong offset!");
static_assert(offsetof(K37P03_Authority_OnInteractorLockChanged, Interactable) == 0x000010, "Member 'K37P03_Authority_OnInteractorLockChanged::Interactable' has a wrong offset!");

// Function TheK37.K37P03.Authority_OnMontageEnded
// 0x0030 (0x0030 - 0x0000)
struct K37P03_Authority_OnMontageEnded final
{
public:
	struct FAnimationMontageDescriptor            Montage;                                           // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             Player;                                            // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P03_Authority_OnMontageEnded) == 0x000008, "Wrong alignment on K37P03_Authority_OnMontageEnded");
static_assert(sizeof(K37P03_Authority_OnMontageEnded) == 0x000030, "Wrong size on K37P03_Authority_OnMontageEnded");
static_assert(offsetof(K37P03_Authority_OnMontageEnded, Montage) == 0x000000, "Member 'K37P03_Authority_OnMontageEnded::Montage' has a wrong offset!");
static_assert(offsetof(K37P03_Authority_OnMontageEnded, Interrupted) == 0x000020, "Member 'K37P03_Authority_OnMontageEnded::Interrupted' has a wrong offset!");
static_assert(offsetof(K37P03_Authority_OnMontageEnded, Player) == 0x000028, "Member 'K37P03_Authority_OnMontageEnded::Player' has a wrong offset!");

// Function TheK37.K37P03.Multicast_OnPlayerReacting
// 0x0008 (0x0008 - 0x0000)
struct K37P03_Multicast_OnPlayerReacting final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P03_Multicast_OnPlayerReacting) == 0x000008, "Wrong alignment on K37P03_Multicast_OnPlayerReacting");
static_assert(sizeof(K37P03_Multicast_OnPlayerReacting) == 0x000008, "Wrong size on K37P03_Multicast_OnPlayerReacting");
static_assert(offsetof(K37P03_Multicast_OnPlayerReacting, Player) == 0x000000, "Member 'K37P03_Multicast_OnPlayerReacting::Player' has a wrong offset!");

// Function TheK37.K37P03.GetBlockDuration
// 0x0004 (0x0004 - 0x0000)
struct K37P03_GetBlockDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37P03_GetBlockDuration) == 0x000004, "Wrong alignment on K37P03_GetBlockDuration");
static_assert(sizeof(K37P03_GetBlockDuration) == 0x000004, "Wrong size on K37P03_GetBlockDuration");
static_assert(offsetof(K37P03_GetBlockDuration, ReturnValue) == 0x000000, "Member 'K37P03_GetBlockDuration::ReturnValue' has a wrong offset!");

// Function TheK37.K37ScentTrailParticle.Cosmetic_OnVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct K37ScentTrailParticle_Cosmetic_OnVisibilityChanged final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37ScentTrailParticle_Cosmetic_OnVisibilityChanged) == 0x000001, "Wrong alignment on K37ScentTrailParticle_Cosmetic_OnVisibilityChanged");
static_assert(sizeof(K37ScentTrailParticle_Cosmetic_OnVisibilityChanged) == 0x000001, "Wrong size on K37ScentTrailParticle_Cosmetic_OnVisibilityChanged");
static_assert(offsetof(K37ScentTrailParticle_Cosmetic_OnVisibilityChanged, IsVisible) == 0x000000, "Member 'K37ScentTrailParticle_Cosmetic_OnVisibilityChanged::IsVisible' has a wrong offset!");

// Function TheK37.K37ScentTrailParticle.Cosmetic_UpdateScentTrailParticleLifetimeState
// 0x0004 (0x0004 - 0x0000)
struct K37ScentTrailParticle_Cosmetic_UpdateScentTrailParticleLifetimeState final
{
public:
	float                                         RemainingTimerPercent;                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37ScentTrailParticle_Cosmetic_UpdateScentTrailParticleLifetimeState) == 0x000004, "Wrong alignment on K37ScentTrailParticle_Cosmetic_UpdateScentTrailParticleLifetimeState");
static_assert(sizeof(K37ScentTrailParticle_Cosmetic_UpdateScentTrailParticleLifetimeState) == 0x000004, "Wrong size on K37ScentTrailParticle_Cosmetic_UpdateScentTrailParticleLifetimeState");
static_assert(offsetof(K37ScentTrailParticle_Cosmetic_UpdateScentTrailParticleLifetimeState, RemainingTimerPercent) == 0x000000, "Member 'K37ScentTrailParticle_Cosmetic_UpdateScentTrailParticleLifetimeState::RemainingTimerPercent' has a wrong offset!");

// Function TheK37.K37ScentTrailParticle.GetScentTrailAngle
// 0x0004 (0x0004 - 0x0000)
struct K37ScentTrailParticle_GetScentTrailAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37ScentTrailParticle_GetScentTrailAngle) == 0x000004, "Wrong alignment on K37ScentTrailParticle_GetScentTrailAngle");
static_assert(sizeof(K37ScentTrailParticle_GetScentTrailAngle) == 0x000004, "Wrong size on K37ScentTrailParticle_GetScentTrailAngle");
static_assert(offsetof(K37ScentTrailParticle_GetScentTrailAngle, ReturnValue) == 0x000000, "Member 'K37ScentTrailParticle_GetScentTrailAngle::ReturnValue' has a wrong offset!");

// Function TheK37.K37ScentTrailParticle.OnScentParticleCollisionZoneOverlapped
// 0x0110 (0x0110 - 0x0000)
struct K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped) == 0x000008, "Wrong alignment on K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped");
static_assert(sizeof(K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped) == 0x000110, "Wrong size on K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped");
static_assert(offsetof(K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped, OverlappedComponent) == 0x000000, "Member 'K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped, OtherActor) == 0x000008, "Member 'K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped::OtherActor' has a wrong offset!");
static_assert(offsetof(K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped, OtherComp) == 0x000010, "Member 'K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped::OtherComp' has a wrong offset!");
static_assert(offsetof(K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped, OtherBodyIndex) == 0x000018, "Member 'K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped, bFromSweep) == 0x00001C, "Member 'K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped::bFromSweep' has a wrong offset!");
static_assert(offsetof(K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped, SweepResult) == 0x000020, "Member 'K37ScentTrailParticle_OnScentParticleCollisionZoneOverlapped::SweepResult' has a wrong offset!");

// Function TheK37.K37ScentTrailParticle.OnScentTrailParticleAcquiredChanged
// 0x0001 (0x0001 - 0x0000)
struct K37ScentTrailParticle_OnScentTrailParticleAcquiredChanged final
{
public:
	bool                                          IsAcquired;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37ScentTrailParticle_OnScentTrailParticleAcquiredChanged) == 0x000001, "Wrong alignment on K37ScentTrailParticle_OnScentTrailParticleAcquiredChanged");
static_assert(sizeof(K37ScentTrailParticle_OnScentTrailParticleAcquiredChanged) == 0x000001, "Wrong size on K37ScentTrailParticle_OnScentTrailParticleAcquiredChanged");
static_assert(offsetof(K37ScentTrailParticle_OnScentTrailParticleAcquiredChanged, IsAcquired) == 0x000000, "Member 'K37ScentTrailParticle_OnScentTrailParticleAcquiredChanged::IsAcquired' has a wrong offset!");

// Function TheK37.K37SurvivorScentTrailParticleSpawner.Authority_OnIsRunningAndMovingChanged
// 0x0001 (0x0001 - 0x0000)
struct K37SurvivorScentTrailParticleSpawner_Authority_OnIsRunningAndMovingChanged final
{
public:
	bool                                          IsRunningAndMoving;                                // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37SurvivorScentTrailParticleSpawner_Authority_OnIsRunningAndMovingChanged) == 0x000001, "Wrong alignment on K37SurvivorScentTrailParticleSpawner_Authority_OnIsRunningAndMovingChanged");
static_assert(sizeof(K37SurvivorScentTrailParticleSpawner_Authority_OnIsRunningAndMovingChanged) == 0x000001, "Wrong size on K37SurvivorScentTrailParticleSpawner_Authority_OnIsRunningAndMovingChanged");
static_assert(offsetof(K37SurvivorScentTrailParticleSpawner_Authority_OnIsRunningAndMovingChanged, IsRunningAndMoving) == 0x000000, "Member 'K37SurvivorScentTrailParticleSpawner_Authority_OnIsRunningAndMovingChanged::IsRunningAndMoving' has a wrong offset!");

// Function TheK37.K37TeleportInteraction.Server_SetTeleportTarget
// 0x0008 (0x0008 - 0x0000)
struct K37TeleportInteraction_Server_SetTeleportTarget final
{
public:
	class UTargetableComponent*                   Target;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37TeleportInteraction_Server_SetTeleportTarget) == 0x000008, "Wrong alignment on K37TeleportInteraction_Server_SetTeleportTarget");
static_assert(sizeof(K37TeleportInteraction_Server_SetTeleportTarget) == 0x000008, "Wrong size on K37TeleportInteraction_Server_SetTeleportTarget");
static_assert(offsetof(K37TeleportInteraction_Server_SetTeleportTarget, Target) == 0x000000, "Member 'K37TeleportInteraction_Server_SetTeleportTarget::Target' has a wrong offset!");

// Function TheK37.K37VampireAbility.Authority_TrySpawnFlamePillarNearLocation
// 0x0028 (0x0028 - 0x0000)
struct K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UK37FlamePillarData*                    FlamePillarData;                                   // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK37FlamePillar*                        ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation) == 0x000008, "Wrong alignment on K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation");
static_assert(sizeof(K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation) == 0x000028, "Wrong size on K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation");
static_assert(offsetof(K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation, Location) == 0x000000, "Member 'K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation::Location' has a wrong offset!");
static_assert(offsetof(K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation, FlamePillarData) == 0x000018, "Member 'K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation::FlamePillarData' has a wrong offset!");
static_assert(offsetof(K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation, ReturnValue) == 0x000020, "Member 'K37VampireAbility_Authority_TrySpawnFlamePillarNearLocation::ReturnValue' has a wrong offset!");

}

