#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDGameplay

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "AIModule_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "StatSystem_structs.hpp"


namespace SDK
{

// Enum DBDGameplay.EPassageCosmeticState
// NumValues: 0x0004
enum class EPassageCosmeticState : uint8
{
	Open                                     = 0,
	InUse                                    = 1,
	CLOSED                                   = 2,
	EPassageCosmeticState_MAX                = 3,
};

// Enum DBDGameplay.EKillerPowerSpawnableComponentsParent
// NumValues: 0x0003
enum class EKillerPowerSpawnableComponentsParent : uint8
{
	Killer                                   = 0,
	Power                                    = 1,
	EKillerPowerSpawnableComponentsParent_MAX = 2,
};

// Enum DBDGameplay.EKillerPowerSpawnableComponentsSpawnType
// NumValues: 0x0004
enum class EKillerPowerSpawnableComponentsSpawnType : uint8
{
	Replicated                               = 0,
	Local                                    = 1,
	PureCosmetic                             = 2,
	EKillerPowerSpawnableComponentsSpawnType_MAX = 3,
};

// Enum DBDGameplay.EBubbleShowedPlayerType
// NumValues: 0x0004
enum class EBubbleShowedPlayerType : uint8
{
	AllPlayers                               = 0,
	Killer                                   = 1,
	Survivor                                 = 2,
	EBubbleShowedPlayerType_MAX              = 3,
};

// Enum DBDGameplay.EInteractionOwnerType
// NumValues: 0x0006
enum class EInteractionOwnerType : uint8
{
	SurvivorsSelfInteractor                  = 0,
	OwningSurvivorSelfInteractor             = 1,
	SurvivorsKillerInteractor                = 2,
	SurvivorsHealingInteractor1              = 3,
	OwningSurvivorHealingInteractor          = 4,
	EInteractionOwnerType_MAX                = 5,
};

// Enum DBDGameplay.ESteamPipeState
// NumValues: 0x0006
enum class ESteamPipeState : uint8
{
	Ready                                    = 0,
	Charged                                  = 1,
	Warning                                  = 2,
	Activated                                = 3,
	Disabled                                 = 4,
	ESteamPipeState_MAX                      = 5,
};

// ScriptStruct DBDGameplay.TerrorRadiusVisualIndicatorHeartStateRange
// 0x0010 (0x0010 - 0x0000)
struct FTerrorRadiusVisualIndicatorHeartStateRange final
{
public:
	float                                         StartVolume;                                       // 0x0000(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HeartTag;                                          // 0x0004(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTerrorRadiusVisualIndicatorHeartStateRange) == 0x000004, "Wrong alignment on FTerrorRadiusVisualIndicatorHeartStateRange");
static_assert(sizeof(FTerrorRadiusVisualIndicatorHeartStateRange) == 0x000010, "Wrong size on FTerrorRadiusVisualIndicatorHeartStateRange");
static_assert(offsetof(FTerrorRadiusVisualIndicatorHeartStateRange, StartVolume) == 0x000000, "Member 'FTerrorRadiusVisualIndicatorHeartStateRange::StartVolume' has a wrong offset!");
static_assert(offsetof(FTerrorRadiusVisualIndicatorHeartStateRange, HeartTag) == 0x000004, "Member 'FTerrorRadiusVisualIndicatorHeartStateRange::HeartTag' has a wrong offset!");

// ScriptStruct DBDGameplay.LullabyKillerData
// 0x0028 (0x0028 - 0x0000)
struct FLullabyKillerData final
{
public:
	struct FGameplayTag                           KillerPresenceTag;                                 // 0x0000(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           KillerLullabyActivationState;                      // 0x000C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SurvivorLullabyActivationState;                    // 0x0018(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillerLullabyDistance;                             // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLullabyKillerData) == 0x000004, "Wrong alignment on FLullabyKillerData");
static_assert(sizeof(FLullabyKillerData) == 0x000028, "Wrong size on FLullabyKillerData");
static_assert(offsetof(FLullabyKillerData, KillerPresenceTag) == 0x000000, "Member 'FLullabyKillerData::KillerPresenceTag' has a wrong offset!");
static_assert(offsetof(FLullabyKillerData, KillerLullabyActivationState) == 0x00000C, "Member 'FLullabyKillerData::KillerLullabyActivationState' has a wrong offset!");
static_assert(offsetof(FLullabyKillerData, SurvivorLullabyActivationState) == 0x000018, "Member 'FLullabyKillerData::SurvivorLullabyActivationState' has a wrong offset!");
static_assert(offsetof(FLullabyKillerData, KillerLullabyDistance) == 0x000024, "Member 'FLullabyKillerData::KillerLullabyDistance' has a wrong offset!");

// ScriptStruct DBDGameplay.PassagePlayerHandles
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FPassagePlayerHandles final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPassagePlayerHandles) == 0x000008, "Wrong alignment on FPassagePlayerHandles");
static_assert(sizeof(FPassagePlayerHandles) == 0x000028, "Wrong size on FPassagePlayerHandles");

// ScriptStruct DBDGameplay.RangedExplosiveEffectData
// 0x0010 (0x0010 - 0x0000)
struct FRangedExplosiveEffectData final
{
public:
	class ARangedExplosive*                       RangedExplosive;                                   // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInRange;                                         // 0x0008(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFirstTime;                                       // 0x0009(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRangedExplosiveEffectData) == 0x000008, "Wrong alignment on FRangedExplosiveEffectData");
static_assert(sizeof(FRangedExplosiveEffectData) == 0x000010, "Wrong size on FRangedExplosiveEffectData");
static_assert(offsetof(FRangedExplosiveEffectData, RangedExplosive) == 0x000000, "Member 'FRangedExplosiveEffectData::RangedExplosive' has a wrong offset!");
static_assert(offsetof(FRangedExplosiveEffectData, IsInRange) == 0x000008, "Member 'FRangedExplosiveEffectData::IsInRange' has a wrong offset!");
static_assert(offsetof(FRangedExplosiveEffectData, IsFirstTime) == 0x000009, "Member 'FRangedExplosiveEffectData::IsFirstTime' has a wrong offset!");

// ScriptStruct DBDGameplay.RandomAnimationMontage
// 0x0010 (0x0010 - 0x0000)
struct FRandomAnimationMontage final
{
public:
	class UAnimMontage*                           _animationMontage;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         _randomizationWeight;                              // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FRandomAnimationMontage) == 0x000008, "Wrong alignment on FRandomAnimationMontage");
static_assert(sizeof(FRandomAnimationMontage) == 0x000010, "Wrong size on FRandomAnimationMontage");
static_assert(offsetof(FRandomAnimationMontage, _animationMontage) == 0x000000, "Member 'FRandomAnimationMontage::_animationMontage' has a wrong offset!");
static_assert(offsetof(FRandomAnimationMontage, _randomizationWeight) == 0x000008, "Member 'FRandomAnimationMontage::_randomizationWeight' has a wrong offset!");

// ScriptStruct DBDGameplay.KillerPowerSpawnableComponents
// 0x0010 (0x0010 - 0x0000)
struct FKillerPowerSpawnableComponents final
{
public:
	TSubclassOf<class UActorComponent>            ComponentClass;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKillerPowerSpawnableComponentsSpawnType      SpawnType;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EKillerPowerSpawnableComponentsParent         Parent;                                            // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKillerPowerSpawnableComponents) == 0x000008, "Wrong alignment on FKillerPowerSpawnableComponents");
static_assert(sizeof(FKillerPowerSpawnableComponents) == 0x000010, "Wrong size on FKillerPowerSpawnableComponents");
static_assert(offsetof(FKillerPowerSpawnableComponents, ComponentClass) == 0x000000, "Member 'FKillerPowerSpawnableComponents::ComponentClass' has a wrong offset!");
static_assert(offsetof(FKillerPowerSpawnableComponents, SpawnType) == 0x000008, "Member 'FKillerPowerSpawnableComponents::SpawnType' has a wrong offset!");
static_assert(offsetof(FKillerPowerSpawnableComponents, Parent) == 0x000009, "Member 'FKillerPowerSpawnableComponents::Parent' has a wrong offset!");

// ScriptStruct DBDGameplay.AITerrorEvent
// 0x0030 (0x0030 - 0x0000)
struct FAITerrorEvent final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Instigator;                                        // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTerrorRadiusEmitterComponent*          TerrorEmitter;                                     // 0x0020(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGenericTeamId                         TeamIdentifier;                                    // 0x0028(0x0001)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAITerrorEvent) == 0x000008, "Wrong alignment on FAITerrorEvent");
static_assert(sizeof(FAITerrorEvent) == 0x000030, "Wrong size on FAITerrorEvent");
static_assert(offsetof(FAITerrorEvent, Location) == 0x000000, "Member 'FAITerrorEvent::Location' has a wrong offset!");
static_assert(offsetof(FAITerrorEvent, Instigator) == 0x000018, "Member 'FAITerrorEvent::Instigator' has a wrong offset!");
static_assert(offsetof(FAITerrorEvent, TerrorEmitter) == 0x000020, "Member 'FAITerrorEvent::TerrorEmitter' has a wrong offset!");
static_assert(offsetof(FAITerrorEvent, TeamIdentifier) == 0x000028, "Member 'FAITerrorEvent::TeamIdentifier' has a wrong offset!");

// ScriptStruct DBDGameplay.KillerPowerSpawnableStatusEffectData
// 0x0010 (0x0010 - 0x0000)
struct FKillerPowerSpawnableStatusEffectData final
{
public:
	TSubclassOf<class UStatusEffect>              StatusEffectClass;                                 // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomParam;                                       // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKillerPowerSpawnableStatusEffectData) == 0x000008, "Wrong alignment on FKillerPowerSpawnableStatusEffectData");
static_assert(sizeof(FKillerPowerSpawnableStatusEffectData) == 0x000010, "Wrong size on FKillerPowerSpawnableStatusEffectData");
static_assert(offsetof(FKillerPowerSpawnableStatusEffectData, StatusEffectClass) == 0x000000, "Member 'FKillerPowerSpawnableStatusEffectData::StatusEffectClass' has a wrong offset!");
static_assert(offsetof(FKillerPowerSpawnableStatusEffectData, CustomParam) == 0x000008, "Member 'FKillerPowerSpawnableStatusEffectData::CustomParam' has a wrong offset!");

// ScriptStruct DBDGameplay.AimDirection
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x08) FAimDirection final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAimDirection) == 0x000008, "Wrong alignment on FAimDirection");
static_assert(sizeof(FAimDirection) == 0x000048, "Wrong size on FAimDirection");

// ScriptStruct DBDGameplay.SurvivorLookStatus
// 0x0010 (0x0010 - 0x0000)
struct FSurvivorLookStatus final
{
public:
	class ACamperPlayer*                          OwningSurvivor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLookingAtKiller;                                 // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSurvivorLookStatus) == 0x000008, "Wrong alignment on FSurvivorLookStatus");
static_assert(sizeof(FSurvivorLookStatus) == 0x000010, "Wrong size on FSurvivorLookStatus");
static_assert(offsetof(FSurvivorLookStatus, OwningSurvivor) == 0x000000, "Member 'FSurvivorLookStatus::OwningSurvivor' has a wrong offset!");
static_assert(offsetof(FSurvivorLookStatus, IsLookingAtKiller) == 0x000008, "Member 'FSurvivorLookStatus::IsLookingAtKiller' has a wrong offset!");

// ScriptStruct DBDGameplay.DBDBidirectionalTimer
// 0x0000 (0x0028 - 0x0028)
struct FDBDBidirectionalTimer final : public FDBDTimer
{
};
static_assert(alignof(FDBDBidirectionalTimer) == 0x000008, "Wrong alignment on FDBDBidirectionalTimer");
static_assert(sizeof(FDBDBidirectionalTimer) == 0x000028, "Wrong size on FDBDBidirectionalTimer");

// ScriptStruct DBDGameplay.BlindTargetViewData
// 0x0070 (0x0070 - 0x0000)
struct alignas(0x10) FBlindTargetViewData final
{
public:
	uint8                                         Pad_0[0x70];                                       // 0x0000(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBlindTargetViewData) == 0x000010, "Wrong alignment on FBlindTargetViewData");
static_assert(sizeof(FBlindTargetViewData) == 0x000070, "Wrong size on FBlindTargetViewData");

// ScriptStruct DBDGameplay.BlockFeedbackStyleOverride
// 0x0030 (0x0030 - 0x0000)
struct FBlockFeedbackStyleOverride final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABlockFeedbackBase*>             BlockSelfFeedbacks;                                // 0x0010(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class ABlockFeedbackBase*>             BlockOtherFeedbacks;                               // 0x0020(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBlockFeedbackStyleOverride) == 0x000008, "Wrong alignment on FBlockFeedbackStyleOverride");
static_assert(sizeof(FBlockFeedbackStyleOverride) == 0x000030, "Wrong size on FBlockFeedbackStyleOverride");
static_assert(offsetof(FBlockFeedbackStyleOverride, BlockSelfFeedbacks) == 0x000010, "Member 'FBlockFeedbackStyleOverride::BlockSelfFeedbacks' has a wrong offset!");
static_assert(offsetof(FBlockFeedbackStyleOverride, BlockOtherFeedbacks) == 0x000020, "Member 'FBlockFeedbackStyleOverride::BlockOtherFeedbacks' has a wrong offset!");

// ScriptStruct DBDGameplay.FootstepSpawnParameters
// 0x0020 (0x0020 - 0x0000)
struct FFootstepSpawnParameters final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FadeCurve;                                         // 0x0010(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            VeinsCurve;                                        // 0x0018(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFootstepSpawnParameters) == 0x000008, "Wrong alignment on FFootstepSpawnParameters");
static_assert(sizeof(FFootstepSpawnParameters) == 0x000020, "Wrong size on FFootstepSpawnParameters");
static_assert(offsetof(FFootstepSpawnParameters, FadeCurve) == 0x000010, "Member 'FFootstepSpawnParameters::FadeCurve' has a wrong offset!");
static_assert(offsetof(FFootstepSpawnParameters, VeinsCurve) == 0x000018, "Member 'FFootstepSpawnParameters::VeinsCurve' has a wrong offset!");

// ScriptStruct DBDGameplay.Footstep
// 0x0050 (0x0050 - 0x0000)
struct FFootstep final
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FadeCurve;                                         // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            VeinsCurve;                                        // 0x0028(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDDecalComponent*                     _decal;                                            // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFootstep) == 0x000008, "Wrong alignment on FFootstep");
static_assert(sizeof(FFootstep) == 0x000050, "Wrong size on FFootstep");
static_assert(offsetof(FFootstep, FadeCurve) == 0x000020, "Member 'FFootstep::FadeCurve' has a wrong offset!");
static_assert(offsetof(FFootstep, VeinsCurve) == 0x000028, "Member 'FFootstep::VeinsCurve' has a wrong offset!");
static_assert(offsetof(FFootstep, _decal) == 0x000040, "Member 'FFootstep::_decal' has a wrong offset!");

// ScriptStruct DBDGameplay.ForAllSurvivorsStatusEffectImposer
// 0x0018 (0x0018 - 0x0000)
struct FForAllSurvivorsStatusEffectImposer final
{
public:
	TSubclassOf<class UStatusEffect>              _effectClass;                                      // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_8[0x10];                                       // 0x0008(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FForAllSurvivorsStatusEffectImposer) == 0x000008, "Wrong alignment on FForAllSurvivorsStatusEffectImposer");
static_assert(sizeof(FForAllSurvivorsStatusEffectImposer) == 0x000018, "Wrong size on FForAllSurvivorsStatusEffectImposer");
static_assert(offsetof(FForAllSurvivorsStatusEffectImposer, _effectClass) == 0x000000, "Member 'FForAllSurvivorsStatusEffectImposer::_effectClass' has a wrong offset!");

// ScriptStruct DBDGameplay.CustomKillerInstinctData
// 0x0028 (0x0028 - 0x0000)
struct FCustomKillerInstinctData final
{
public:
	class UNiagaraSystem*                         ParticleSystemAsset;                               // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   SurvivorStateTags;                                 // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   KillerStateTags;                                   // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomKillerInstinctData) == 0x000008, "Wrong alignment on FCustomKillerInstinctData");
static_assert(sizeof(FCustomKillerInstinctData) == 0x000028, "Wrong size on FCustomKillerInstinctData");
static_assert(offsetof(FCustomKillerInstinctData, ParticleSystemAsset) == 0x000000, "Member 'FCustomKillerInstinctData::ParticleSystemAsset' has a wrong offset!");
static_assert(offsetof(FCustomKillerInstinctData, SurvivorStateTags) == 0x000008, "Member 'FCustomKillerInstinctData::SurvivorStateTags' has a wrong offset!");
static_assert(offsetof(FCustomKillerInstinctData, KillerStateTags) == 0x000018, "Member 'FCustomKillerInstinctData::KillerStateTags' has a wrong offset!");

// ScriptStruct DBDGameplay.HideHeartIndicatorWithDelay
// 0x0010 (0x0010 - 0x0000)
struct FHideHeartIndicatorWithDelay final
{
public:
	struct FGameplayTag                           HideTag;                                           // 0x0000(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayWhenTagRemoved;                               // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHideHeartIndicatorWithDelay) == 0x000004, "Wrong alignment on FHideHeartIndicatorWithDelay");
static_assert(sizeof(FHideHeartIndicatorWithDelay) == 0x000010, "Wrong size on FHideHeartIndicatorWithDelay");
static_assert(offsetof(FHideHeartIndicatorWithDelay, HideTag) == 0x000000, "Member 'FHideHeartIndicatorWithDelay::HideTag' has a wrong offset!");
static_assert(offsetof(FHideHeartIndicatorWithDelay, DelayWhenTagRemoved) == 0x00000C, "Member 'FHideHeartIndicatorWithDelay::DelayWhenTagRemoved' has a wrong offset!");

// ScriptStruct DBDGameplay.TestableStat
// 0x0008 (0x0088 - 0x0080)
struct FTestableStat final : public FTunableStat
{
public:
	uint8                                         Pad_80[0x8];                                       // 0x0080(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTestableStat) == 0x000008, "Wrong alignment on FTestableStat");
static_assert(sizeof(FTestableStat) == 0x000088, "Wrong size on FTestableStat");

// ScriptStruct DBDGameplay.TestableStatModifier
// 0x0000 (0x0030 - 0x0030)
struct FTestableStatModifier final : public FStatModifier
{
};
static_assert(alignof(FTestableStatModifier) == 0x000008, "Wrong alignment on FTestableStatModifier");
static_assert(sizeof(FTestableStatModifier) == 0x000030, "Wrong size on FTestableStatModifier");

}

