#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheNurse

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDCompetence_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "DBDAttack_classes.hpp"
#include "StatSystem_structs.hpp"
#include "DataTableUtilities_structs.hpp"
#include "TheNurse_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "Competence_classes.hpp"
#include "DBDAnimation_classes.hpp"
#include "DBDGameplay_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class TheNurse.BaseInstantBlinkInteraction
// 0x0030 (0x07B0 - 0x0780)
#pragma pack(push, 0x1)
class alignas(0x10) UBaseInstantBlinkInteraction : public UInteractionDefinition
{
public:
	float                                         _blinkTimePercentage;                              // 0x0778(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_77C[0x2C];                                     // 0x077C(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseInstantBlinkInteraction">();
	}
	static class UBaseInstantBlinkInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseInstantBlinkInteraction>();
	}
};
#pragma pack(pop)
static_assert(alignof(UBaseInstantBlinkInteraction) == 0x000010, "Wrong alignment on UBaseInstantBlinkInteraction");
static_assert(sizeof(UBaseInstantBlinkInteraction) == 0x0007B0, "Wrong size on UBaseInstantBlinkInteraction");
static_assert(offsetof(UBaseInstantBlinkInteraction, _blinkTimePercentage) == 0x000778, "Member 'UBaseInstantBlinkInteraction::_blinkTimePercentage' has a wrong offset!");

// Class TheNurse.BlinkBackInteraction
// 0x0000 (0x07B0 - 0x07B0)
class UBlinkBackInteraction final : public UBaseInstantBlinkInteraction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkBackInteraction">();
	}
	static class UBlinkBackInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkBackInteraction>();
	}
};
static_assert(alignof(UBlinkBackInteraction) == 0x000010, "Wrong alignment on UBlinkBackInteraction");
static_assert(sizeof(UBlinkBackInteraction) == 0x0007B0, "Wrong size on UBlinkBackInteraction");

// Class TheNurse.ActivateByBlinkAttackTimedEffect
// 0x0008 (0x0388 - 0x0380)
class UActivateByBlinkAttackTimedEffect final : public UStatusEffect
{
public:
	float                                         _activationDuration;                               // 0x0380(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_384[0x4];                                      // 0x0384(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivateByBlinkAttackTimedEffect">();
	}
	static class UActivateByBlinkAttackTimedEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivateByBlinkAttackTimedEffect>();
	}
};
static_assert(alignof(UActivateByBlinkAttackTimedEffect) == 0x000008, "Wrong alignment on UActivateByBlinkAttackTimedEffect");
static_assert(sizeof(UActivateByBlinkAttackTimedEffect) == 0x000388, "Wrong size on UActivateByBlinkAttackTimedEffect");
static_assert(offsetof(UActivateByBlinkAttackTimedEffect, _activationDuration) == 0x000380, "Member 'UActivateByBlinkAttackTimedEffect::_activationDuration' has a wrong offset!");

// Class TheNurse.AutomaticBlinkInteraction
// 0x0030 (0x07E0 - 0x07B0)
class UAutomaticBlinkInteraction final : public UBaseInstantBlinkInteraction
{
public:
	float                                         _blinkDistancePercent;                             // 0x07A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7AC[0x34];                                     // 0x07AC(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutomaticBlinkInteraction">();
	}
	static class UAutomaticBlinkInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutomaticBlinkInteraction>();
	}
};
static_assert(alignof(UAutomaticBlinkInteraction) == 0x000010, "Wrong alignment on UAutomaticBlinkInteraction");
static_assert(sizeof(UAutomaticBlinkInteraction) == 0x0007E0, "Wrong size on UAutomaticBlinkInteraction");
static_assert(offsetof(UAutomaticBlinkInteraction, _blinkDistancePercent) == 0x0007A8, "Member 'UAutomaticBlinkInteraction::_blinkDistancePercent' has a wrong offset!");

// Class TheNurse.BadMansLastBreathAddon
// 0x0028 (0x0310 - 0x02E8)
class UBadMansLastBreathAddon final : public UItemAddon
{
public:
	float                                         _activationDuration;                               // 0x02E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _cooldownDuration;                                 // 0x02EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _badMansLastBreathCooldownIndicatorStatusEffect;   // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _badMansLastBreathUndetectableStatusEffect;        // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _cooldownIndicator;                                // 0x0300(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _undetectableEffect;                               // 0x0308(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BadMansLastBreathAddon">();
	}
	static class UBadMansLastBreathAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBadMansLastBreathAddon>();
	}
};
static_assert(alignof(UBadMansLastBreathAddon) == 0x000008, "Wrong alignment on UBadMansLastBreathAddon");
static_assert(sizeof(UBadMansLastBreathAddon) == 0x000310, "Wrong size on UBadMansLastBreathAddon");
static_assert(offsetof(UBadMansLastBreathAddon, _activationDuration) == 0x0002E8, "Member 'UBadMansLastBreathAddon::_activationDuration' has a wrong offset!");
static_assert(offsetof(UBadMansLastBreathAddon, _cooldownDuration) == 0x0002EC, "Member 'UBadMansLastBreathAddon::_cooldownDuration' has a wrong offset!");
static_assert(offsetof(UBadMansLastBreathAddon, _badMansLastBreathCooldownIndicatorStatusEffect) == 0x0002F0, "Member 'UBadMansLastBreathAddon::_badMansLastBreathCooldownIndicatorStatusEffect' has a wrong offset!");
static_assert(offsetof(UBadMansLastBreathAddon, _badMansLastBreathUndetectableStatusEffect) == 0x0002F8, "Member 'UBadMansLastBreathAddon::_badMansLastBreathUndetectableStatusEffect' has a wrong offset!");
static_assert(offsetof(UBadMansLastBreathAddon, _cooldownIndicator) == 0x000300, "Member 'UBadMansLastBreathAddon::_cooldownIndicator' has a wrong offset!");
static_assert(offsetof(UBadMansLastBreathAddon, _undetectableEffect) == 0x000308, "Member 'UBadMansLastBreathAddon::_undetectableEffect' has a wrong offset!");

// Class TheNurse.BaseNursePerk
// 0x0000 (0x04A0 - 0x04A0)
class UBaseNursePerk : public USpawningEffectPerk
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseNursePerk">();
	}
	static class UBaseNursePerk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseNursePerk>();
	}
};
static_assert(alignof(UBaseNursePerk) == 0x000008, "Wrong alignment on UBaseNursePerk");
static_assert(sizeof(UBaseNursePerk) == 0x0004A0, "Wrong size on UBaseNursePerk");

// Class TheNurse.BlinkAttack
// 0x0000 (0x0420 - 0x0420)
class UBlinkAttack final : public UPounceAttack
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkAttack">();
	}
	static class UBlinkAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkAttack>();
	}
};
static_assert(alignof(UBlinkAttack) == 0x000010, "Wrong alignment on UBlinkAttack");
static_assert(sizeof(UBlinkAttack) == 0x000420, "Wrong size on UBlinkAttack");

// Class TheNurse.BlinkAttackSuccessSubstate
// 0x0000 (0x0118 - 0x0118)
class UBlinkAttackSuccessSubstate final : public UPounceAttackSuccessSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkAttackSuccessSubstate">();
	}
	static class UBlinkAttackSuccessSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkAttackSuccessSubstate>();
	}
};
static_assert(alignof(UBlinkAttackSuccessSubstate) == 0x000008, "Wrong alignment on UBlinkAttackSuccessSubstate");
static_assert(sizeof(UBlinkAttackSuccessSubstate) == 0x000118, "Wrong size on UBlinkAttackSuccessSubstate");

// Class TheNurse.BlinkIndicatorController
// 0x0098 (0x0140 - 0x00A8)
class UBlinkIndicatorController final : public UActorComponent
{
public:
	TSubclassOf<class AActor>                     _indicatorClass;                                   // 0x00A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _activationFlag;                                   // 0x00B0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _indicatorMinimumVelocity;                         // 0x00BC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _indicatorVelocityEasingFactor;                    // 0x00C0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 _indicator;                                        // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x70];                                      // 0x00D0(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkIndicatorController">();
	}
	static class UBlinkIndicatorController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkIndicatorController>();
	}
};
static_assert(alignof(UBlinkIndicatorController) == 0x000008, "Wrong alignment on UBlinkIndicatorController");
static_assert(sizeof(UBlinkIndicatorController) == 0x000140, "Wrong size on UBlinkIndicatorController");
static_assert(offsetof(UBlinkIndicatorController, _indicatorClass) == 0x0000A8, "Member 'UBlinkIndicatorController::_indicatorClass' has a wrong offset!");
static_assert(offsetof(UBlinkIndicatorController, _activationFlag) == 0x0000B0, "Member 'UBlinkIndicatorController::_activationFlag' has a wrong offset!");
static_assert(offsetof(UBlinkIndicatorController, _indicatorMinimumVelocity) == 0x0000BC, "Member 'UBlinkIndicatorController::_indicatorMinimumVelocity' has a wrong offset!");
static_assert(offsetof(UBlinkIndicatorController, _indicatorVelocityEasingFactor) == 0x0000C0, "Member 'UBlinkIndicatorController::_indicatorVelocityEasingFactor' has a wrong offset!");
static_assert(offsetof(UBlinkIndicatorController, _indicator) == 0x0000C8, "Member 'UBlinkIndicatorController::_indicator' has a wrong offset!");

// Class TheNurse.BlinkInteraction
// 0x0140 (0x0A00 - 0x08C0)
class UBlinkInteraction final : public UChargeableInteractionDefinition
{
public:
	uint8                                         Pad_8C0[0x78];                                     // 0x08C0(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStatProperty                          _chargeTime;                                       // 0x0938(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9C0[0x40];                                     // 0x09C0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkInteraction">();
	}
	static class UBlinkInteraction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkInteraction>();
	}
};
static_assert(alignof(UBlinkInteraction) == 0x000010, "Wrong alignment on UBlinkInteraction");
static_assert(sizeof(UBlinkInteraction) == 0x000A00, "Wrong size on UBlinkInteraction");
static_assert(offsetof(UBlinkInteraction, _chargeTime) == 0x000938, "Member 'UBlinkInteraction::_chargeTime' has a wrong offset!");

// Class TheNurse.BlinkPlayerComponent
// 0x0148 (0x01F0 - 0x00A8)
class UBlinkPlayerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _maxBlinkDuration;                                 // 0x00C0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _minBlinkDuration;                                 // 0x0140(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _blinkFOVCurve;                                    // 0x0168(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x80];                                     // 0x0170(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Local_OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void Multicast_EndBlink();
	void Multicast_StartBlink(const struct FBlinkParams& Params_0);
	void Server_EndBlink();
	void Server_StartBlink(const struct FBlinkParams& Params_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPlayerComponent">();
	}
	static class UBlinkPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkPlayerComponent>();
	}
};
static_assert(alignof(UBlinkPlayerComponent) == 0x000008, "Wrong alignment on UBlinkPlayerComponent");
static_assert(sizeof(UBlinkPlayerComponent) == 0x0001F0, "Wrong size on UBlinkPlayerComponent");
static_assert(offsetof(UBlinkPlayerComponent, _maxBlinkDuration) == 0x0000C0, "Member 'UBlinkPlayerComponent::_maxBlinkDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPlayerComponent, _minBlinkDuration) == 0x000140, "Member 'UBlinkPlayerComponent::_minBlinkDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPlayerComponent, _blinkFOVCurve) == 0x000168, "Member 'UBlinkPlayerComponent::_blinkFOVCurve' has a wrong offset!");

// Class TheNurse.BlinkPowerDebugComponent
// 0x0070 (0x0118 - 0x00A8)
class UBlinkPowerDebugComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x70];                                      // 0x00A8(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPowerDebugComponent">();
	}
	static class UBlinkPowerDebugComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkPowerDebugComponent>();
	}
};
static_assert(alignof(UBlinkPowerDebugComponent) == 0x000008, "Wrong alignment on UBlinkPowerDebugComponent");
static_assert(sizeof(UBlinkPowerDebugComponent) == 0x000118, "Wrong size on UBlinkPowerDebugComponent");

// Class TheNurse.BlinkPowerEventDispatcher
// 0x0200 (0x02A8 - 0x00A8)
class UBlinkPowerEventDispatcher final : public UActorComponent
{
public:
	FMulticastInlineDelegateProperty_             OnFinishPlaying;                                   // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStartBlinkChargeEvent;                           // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUpdateBlinkChargeEvent;                          // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnStopBlinkChargeEvent;                            // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEnterBlinkEvent;                                 // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUpdateBlinkEvent;                                // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnExitBlinkEvent;                                  // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEnterChainBlinkEvent;                            // 0x0118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUpdateChainBlinkEvent;                           // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnExitChainBlinkEvent;                             // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnEnterCooldownEvent;                              // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnUpdateCooldownEvent;                             // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnExitCooldownEvent;                               // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnIsBlinkingChangedEvent;                          // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnIsChargingBlinkChangedEvent;                     // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBlinkChargeFullEvent;                            // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBlinkPowerStateChangedEvent;                     // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	FMulticastInlineDelegateProperty_             OnBlinkChargesChangedEvent;                        // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0xE0];                                     // 0x01C8(0x00E0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPowerEventDispatcher">();
	}
	static class UBlinkPowerEventDispatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkPowerEventDispatcher>();
	}
};
static_assert(alignof(UBlinkPowerEventDispatcher) == 0x000008, "Wrong alignment on UBlinkPowerEventDispatcher");
static_assert(sizeof(UBlinkPowerEventDispatcher) == 0x0002A8, "Wrong size on UBlinkPowerEventDispatcher");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnFinishPlaying) == 0x0000A8, "Member 'UBlinkPowerEventDispatcher::OnFinishPlaying' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnStartBlinkChargeEvent) == 0x0000B8, "Member 'UBlinkPowerEventDispatcher::OnStartBlinkChargeEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnUpdateBlinkChargeEvent) == 0x0000C8, "Member 'UBlinkPowerEventDispatcher::OnUpdateBlinkChargeEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnStopBlinkChargeEvent) == 0x0000D8, "Member 'UBlinkPowerEventDispatcher::OnStopBlinkChargeEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnEnterBlinkEvent) == 0x0000E8, "Member 'UBlinkPowerEventDispatcher::OnEnterBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnUpdateBlinkEvent) == 0x0000F8, "Member 'UBlinkPowerEventDispatcher::OnUpdateBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnExitBlinkEvent) == 0x000108, "Member 'UBlinkPowerEventDispatcher::OnExitBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnEnterChainBlinkEvent) == 0x000118, "Member 'UBlinkPowerEventDispatcher::OnEnterChainBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnUpdateChainBlinkEvent) == 0x000128, "Member 'UBlinkPowerEventDispatcher::OnUpdateChainBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnExitChainBlinkEvent) == 0x000138, "Member 'UBlinkPowerEventDispatcher::OnExitChainBlinkEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnEnterCooldownEvent) == 0x000148, "Member 'UBlinkPowerEventDispatcher::OnEnterCooldownEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnUpdateCooldownEvent) == 0x000158, "Member 'UBlinkPowerEventDispatcher::OnUpdateCooldownEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnExitCooldownEvent) == 0x000168, "Member 'UBlinkPowerEventDispatcher::OnExitCooldownEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnIsBlinkingChangedEvent) == 0x000178, "Member 'UBlinkPowerEventDispatcher::OnIsBlinkingChangedEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnIsChargingBlinkChangedEvent) == 0x000188, "Member 'UBlinkPowerEventDispatcher::OnIsChargingBlinkChangedEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnBlinkChargeFullEvent) == 0x000198, "Member 'UBlinkPowerEventDispatcher::OnBlinkChargeFullEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnBlinkPowerStateChangedEvent) == 0x0001A8, "Member 'UBlinkPowerEventDispatcher::OnBlinkPowerStateChangedEvent' has a wrong offset!");
static_assert(offsetof(UBlinkPowerEventDispatcher, OnBlinkChargesChangedEvent) == 0x0001B8, "Member 'UBlinkPowerEventDispatcher::OnBlinkChargesChangedEvent' has a wrong offset!");

// Class TheNurse.BlinkPowerItem
// 0x0028 (0x0578 - 0x0550)
class ABlinkPowerItem final : public ACollectable
{
public:
	class UInteractor*                            _powerInteractor;                                  // 0x0550(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _blinkChargeable;                                  // 0x0558(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_560[0x18];                                     // 0x0560(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPowerItem">();
	}
	static class ABlinkPowerItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlinkPowerItem>();
	}
};
static_assert(alignof(ABlinkPowerItem) == 0x000008, "Wrong alignment on ABlinkPowerItem");
static_assert(sizeof(ABlinkPowerItem) == 0x000578, "Wrong size on ABlinkPowerItem");
static_assert(offsetof(ABlinkPowerItem, _powerInteractor) == 0x000550, "Member 'ABlinkPowerItem::_powerInteractor' has a wrong offset!");
static_assert(offsetof(ABlinkPowerItem, _blinkChargeable) == 0x000558, "Member 'ABlinkPowerItem::_blinkChargeable' has a wrong offset!");

// Class TheNurse.BlinkPowerPlayerComponent
// 0x0528 (0x05D0 - 0x00A8)
class UBlinkPowerPlayerComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x30];                                      // 0x00A8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _maxBlinkCharges;                                  // 0x00D8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _rechargeDuration;                                 // 0x0158(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _chainBlinkDuration;                               // 0x01D8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  _allowedInteractionSemancticsDuringChainBlink;     // 0x0258(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _fatigueDuration;                                  // 0x0278(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _fatigueChainBlinkPenalty;                         // 0x02F8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _fatigueAttackPenalty;                             // 0x0378(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _fatigueAttackMissPenaltyModifier;                 // 0x03F8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _fatigueSpeedCurve;                                // 0x0408(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_410[0xA4];                                     // 0x0410(0x00A4)(Fixing Size After Last Property [ Dumper-7 ])
	EBlinkPowerState                              _powerState;                                       // 0x04B4(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B5[0x3];                                      // 0x04B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         _blinkCharges;                                     // 0x04B8(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _wasCurrentChargeSetByRecharge;                    // 0x04BC(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4BD[0xF3];                                     // 0x04BD(0x00F3)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _authority_chainBlinkTimer;                        // 0x05B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTimerObject*                           _authority_cooldownTimer;                          // 0x05B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UTimerObject*                           _authority_rechargeTimer;                          // 0x05C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C8[0x8];                                      // 0x05C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttackFinished(const EAttackType AttackType);
	void OnAttackStarted(const EAttackType AttackType);
	void OnLevelReadyToPlay();
	void OnRep_BlinkCharges();
	void OnRep_BlinkState(EBlinkPowerState OldState);
	void Server_InterruptDuringChainBlink(class AActor* InterruptedPlayer);
	void Server_SetState(EBlinkPowerState State);
	void Server_TriggerChainBlink(int32 RemainingBlinkCharges, float blinkTimeStamp);
	void Server_TriggerCooldown(float Duration);
	void Setup(const struct FBlinkPowerSetupParams& Params_0);

	int32 GetBlinkCharges() const;
	float GetChainBlinkProgressPercent() const;
	float GetChainBlinkRemainingTime() const;
	float GetChainBlinkTimerDuration() const;
	float GetCooldownProgressPercent() const;
	float GetCooldownRemainingTime() const;
	float GetCooldownTimerDuration() const;
	EBlinkPowerState GetPowerState() const;
	float GetRechargeProgressPercent() const;
	bool IsBlinking() const;
	bool IsChargeFull() const;
	bool IsChargingBlink() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkPowerPlayerComponent">();
	}
	static class UBlinkPowerPlayerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkPowerPlayerComponent>();
	}
};
static_assert(alignof(UBlinkPowerPlayerComponent) == 0x000008, "Wrong alignment on UBlinkPowerPlayerComponent");
static_assert(sizeof(UBlinkPowerPlayerComponent) == 0x0005D0, "Wrong size on UBlinkPowerPlayerComponent");
static_assert(offsetof(UBlinkPowerPlayerComponent, _maxBlinkCharges) == 0x0000D8, "Member 'UBlinkPowerPlayerComponent::_maxBlinkCharges' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _rechargeDuration) == 0x000158, "Member 'UBlinkPowerPlayerComponent::_rechargeDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _chainBlinkDuration) == 0x0001D8, "Member 'UBlinkPowerPlayerComponent::_chainBlinkDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _allowedInteractionSemancticsDuringChainBlink) == 0x000258, "Member 'UBlinkPowerPlayerComponent::_allowedInteractionSemancticsDuringChainBlink' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueDuration) == 0x000278, "Member 'UBlinkPowerPlayerComponent::_fatigueDuration' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueChainBlinkPenalty) == 0x0002F8, "Member 'UBlinkPowerPlayerComponent::_fatigueChainBlinkPenalty' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueAttackPenalty) == 0x000378, "Member 'UBlinkPowerPlayerComponent::_fatigueAttackPenalty' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueAttackMissPenaltyModifier) == 0x0003F8, "Member 'UBlinkPowerPlayerComponent::_fatigueAttackMissPenaltyModifier' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _fatigueSpeedCurve) == 0x000408, "Member 'UBlinkPowerPlayerComponent::_fatigueSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _powerState) == 0x0004B4, "Member 'UBlinkPowerPlayerComponent::_powerState' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _blinkCharges) == 0x0004B8, "Member 'UBlinkPowerPlayerComponent::_blinkCharges' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _wasCurrentChargeSetByRecharge) == 0x0004BC, "Member 'UBlinkPowerPlayerComponent::_wasCurrentChargeSetByRecharge' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _authority_chainBlinkTimer) == 0x0005B0, "Member 'UBlinkPowerPlayerComponent::_authority_chainBlinkTimer' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _authority_cooldownTimer) == 0x0005B8, "Member 'UBlinkPowerPlayerComponent::_authority_cooldownTimer' has a wrong offset!");
static_assert(offsetof(UBlinkPowerPlayerComponent, _authority_rechargeTimer) == 0x0005C0, "Member 'UBlinkPowerPlayerComponent::_authority_rechargeTimer' has a wrong offset!");

// Class TheNurse.BlinkTargetFinder
// 0x0140 (0x01E8 - 0x00A8)
class UBlinkTargetFinder final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _minDistance;                                      // 0x00C0(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _maxDistance;                                      // 0x00E8(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	float                                         _floorRaycastStartZOffset;                         // 0x0168(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _floorRaycastLength;                               // 0x016C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _locationClearStepHeight;                          // 0x0170(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 _horizontalSamplePercentages;                      // 0x0178(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPrivate)
	float                                         _blinkBlockerSphereCastRadius;                     // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18C[0x5C];                                     // 0x018C(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlinkTargetFinder">();
	}
	static class UBlinkTargetFinder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlinkTargetFinder>();
	}
};
static_assert(alignof(UBlinkTargetFinder) == 0x000008, "Wrong alignment on UBlinkTargetFinder");
static_assert(sizeof(UBlinkTargetFinder) == 0x0001E8, "Wrong size on UBlinkTargetFinder");
static_assert(offsetof(UBlinkTargetFinder, _minDistance) == 0x0000C0, "Member 'UBlinkTargetFinder::_minDistance' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _maxDistance) == 0x0000E8, "Member 'UBlinkTargetFinder::_maxDistance' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _floorRaycastStartZOffset) == 0x000168, "Member 'UBlinkTargetFinder::_floorRaycastStartZOffset' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _floorRaycastLength) == 0x00016C, "Member 'UBlinkTargetFinder::_floorRaycastLength' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _locationClearStepHeight) == 0x000170, "Member 'UBlinkTargetFinder::_locationClearStepHeight' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _horizontalSamplePercentages) == 0x000178, "Member 'UBlinkTargetFinder::_horizontalSamplePercentages' has a wrong offset!");
static_assert(offsetof(UBlinkTargetFinder, _blinkBlockerSphereCastRadius) == 0x000188, "Member 'UBlinkTargetFinder::_blinkBlockerSphereCastRadius' has a wrong offset!");

// Class TheNurse.DarkCinctureAddon
// 0x0018 (0x0300 - 0x02E8)
class UDarkCinctureAddon final : public UItemAddon
{
public:
	class UStatusEffect*                          _speedEffect;                                      // 0x02E8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _speedEffectClass;                                 // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _movementSpeedMultiplier;                          // 0x02F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DarkCinctureAddon">();
	}
	static class UDarkCinctureAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDarkCinctureAddon>();
	}
};
static_assert(alignof(UDarkCinctureAddon) == 0x000008, "Wrong alignment on UDarkCinctureAddon");
static_assert(sizeof(UDarkCinctureAddon) == 0x000300, "Wrong size on UDarkCinctureAddon");
static_assert(offsetof(UDarkCinctureAddon, _speedEffect) == 0x0002E8, "Member 'UDarkCinctureAddon::_speedEffect' has a wrong offset!");
static_assert(offsetof(UDarkCinctureAddon, _speedEffectClass) == 0x0002F0, "Member 'UDarkCinctureAddon::_speedEffectClass' has a wrong offset!");
static_assert(offsetof(UDarkCinctureAddon, _movementSpeedMultiplier) == 0x0002F8, "Member 'UDarkCinctureAddon::_movementSpeedMultiplier' has a wrong offset!");

// Class TheNurse.FragileWheezeAddon
// 0x0010 (0x02F8 - 0x02E8)
class UFragileWheezeAddon final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _mangledEffectClass;                               // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _mangledEffectLifetime;                            // 0x02F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2F4[0x4];                                      // 0x02F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FragileWheezeAddon">();
	}
	static class UFragileWheezeAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFragileWheezeAddon>();
	}
};
static_assert(alignof(UFragileWheezeAddon) == 0x000008, "Wrong alignment on UFragileWheezeAddon");
static_assert(sizeof(UFragileWheezeAddon) == 0x0002F8, "Wrong size on UFragileWheezeAddon");
static_assert(offsetof(UFragileWheezeAddon, _mangledEffectClass) == 0x0002E8, "Member 'UFragileWheezeAddon::_mangledEffectClass' has a wrong offset!");
static_assert(offsetof(UFragileWheezeAddon, _mangledEffectLifetime) == 0x0002F0, "Member 'UFragileWheezeAddon::_mangledEffectLifetime' has a wrong offset!");

// Class TheNurse.IsChainBlinkingCondition
// 0x0010 (0x00F0 - 0x00E0)
class UIsChainBlinkingCondition final : public UEventDrivenModifierCondition
{
public:
	uint8                                         Pad_E0[0x10];                                      // 0x00E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsChainBlinkingCondition">();
	}
	static class UIsChainBlinkingCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsChainBlinkingCondition>();
	}
};
static_assert(alignof(UIsChainBlinkingCondition) == 0x000008, "Wrong alignment on UIsChainBlinkingCondition");
static_assert(sizeof(UIsChainBlinkingCondition) == 0x0000F0, "Wrong size on UIsChainBlinkingCondition");

// Class TheNurse.IsInChainBlinkWindowCondition
// 0x0028 (0x0108 - 0x00E0)
class UIsInChainBlinkWindowCondition final : public UEventDrivenModifierCondition
{
public:
	uint8                                         Pad_E0[0x28];                                      // 0x00E0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IsInChainBlinkWindowCondition">();
	}
	static class UIsInChainBlinkWindowCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIsInChainBlinkWindowCondition>();
	}
};
static_assert(alignof(UIsInChainBlinkWindowCondition) == 0x000008, "Wrong alignment on UIsInChainBlinkWindowCondition");
static_assert(sizeof(UIsInChainBlinkWindowCondition) == 0x000108, "Wrong size on UIsInChainBlinkWindowCondition");

// Class TheNurse.K04AnimInstance
// 0x0060 (0x0780 - 0x0720)
class UK04AnimInstance final : public UKillerAnimInstance
{
public:
	bool                                          _isFullyCharged;                                   // 0x0720(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_721[0x3];                                      // 0x0721(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _blinkPlayRate;                                    // 0x0724(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _cooldownPlayRate;                                 // 0x0728(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBlinking;                                       // 0x072C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBlinkReady;                                     // 0x072D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInCooldown;                                     // 0x072E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChargingBlink;                                  // 0x072F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChainBlinking;                                  // 0x0730(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInterrupting;                                   // 0x0731(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_732[0x6];                                      // 0x0732(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          _blinkSequence;                                    // 0x0738(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _cooldownSequence;                                 // 0x0740(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChainBlinkAttacking;                            // 0x0748(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_749[0x37];                                     // 0x0749(0x0037)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBlinkTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"K04AnimInstance">();
	}
	static class UK04AnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UK04AnimInstance>();
	}
};
static_assert(alignof(UK04AnimInstance) == 0x000010, "Wrong alignment on UK04AnimInstance");
static_assert(sizeof(UK04AnimInstance) == 0x000780, "Wrong size on UK04AnimInstance");
static_assert(offsetof(UK04AnimInstance, _isFullyCharged) == 0x000720, "Member 'UK04AnimInstance::_isFullyCharged' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _blinkPlayRate) == 0x000724, "Member 'UK04AnimInstance::_blinkPlayRate' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _cooldownPlayRate) == 0x000728, "Member 'UK04AnimInstance::_cooldownPlayRate' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _isBlinking) == 0x00072C, "Member 'UK04AnimInstance::_isBlinking' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _isBlinkReady) == 0x00072D, "Member 'UK04AnimInstance::_isBlinkReady' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _isInCooldown) == 0x00072E, "Member 'UK04AnimInstance::_isInCooldown' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _isChargingBlink) == 0x00072F, "Member 'UK04AnimInstance::_isChargingBlink' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _isChainBlinking) == 0x000730, "Member 'UK04AnimInstance::_isChainBlinking' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _isInterrupting) == 0x000731, "Member 'UK04AnimInstance::_isInterrupting' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _blinkSequence) == 0x000738, "Member 'UK04AnimInstance::_blinkSequence' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _cooldownSequence) == 0x000740, "Member 'UK04AnimInstance::_cooldownSequence' has a wrong offset!");
static_assert(offsetof(UK04AnimInstance, _isChainBlinkAttacking) == 0x000748, "Member 'UK04AnimInstance::_isChainBlinkAttacking' has a wrong offset!");

// Class TheNurse.KavanaghsLastBreathAddon
// 0x0020 (0x0308 - 0x02E8)
class UKavanaghsLastBreathAddon final : public UItemAddon
{
public:
	uint8                                         Pad_2E8[0x10];                                     // 0x02E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _blindnessEffectClass;                             // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _maxBlindnessRange;                                // 0x0300(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _blindedEffectDuration;                            // 0x0304(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KavanaghsLastBreathAddon">();
	}
	static class UKavanaghsLastBreathAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKavanaghsLastBreathAddon>();
	}
};
static_assert(alignof(UKavanaghsLastBreathAddon) == 0x000008, "Wrong alignment on UKavanaghsLastBreathAddon");
static_assert(sizeof(UKavanaghsLastBreathAddon) == 0x000308, "Wrong size on UKavanaghsLastBreathAddon");
static_assert(offsetof(UKavanaghsLastBreathAddon, _blindnessEffectClass) == 0x0002F8, "Member 'UKavanaghsLastBreathAddon::_blindnessEffectClass' has a wrong offset!");
static_assert(offsetof(UKavanaghsLastBreathAddon, _maxBlindnessRange) == 0x000300, "Member 'UKavanaghsLastBreathAddon::_maxBlindnessRange' has a wrong offset!");
static_assert(offsetof(UKavanaghsLastBreathAddon, _blindedEffectDuration) == 0x000304, "Member 'UKavanaghsLastBreathAddon::_blindedEffectDuration' has a wrong offset!");

// Class TheNurse.MatchboxAddon
// 0x0010 (0x02F8 - 0x02E8)
class UMatchboxAddon final : public UItemAddon
{
public:
	float                                         _speedModifier;                                    // 0x02E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USpeedOverrideEffect>       _speedOverrideEffectClass;                         // 0x02F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MatchboxAddon">();
	}
	static class UMatchboxAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMatchboxAddon>();
	}
};
static_assert(alignof(UMatchboxAddon) == 0x000008, "Wrong alignment on UMatchboxAddon");
static_assert(sizeof(UMatchboxAddon) == 0x0002F8, "Wrong size on UMatchboxAddon");
static_assert(offsetof(UMatchboxAddon, _speedModifier) == 0x0002E8, "Member 'UMatchboxAddon::_speedModifier' has a wrong offset!");
static_assert(offsetof(UMatchboxAddon, _speedOverrideEffectClass) == 0x0002F0, "Member 'UMatchboxAddon::_speedOverrideEffectClass' has a wrong offset!");

// Class TheNurse.NurseAnimInstance
// 0x0080 (0x03D0 - 0x0350)
class UNurseAnimInstance final : public UAnimInstance
{
public:
	bool                                          _isBlinkReady;                                     // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChargingBlink;                                  // 0x0351(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isFullyCharged;                                   // 0x0352(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_353[0x5];                                      // 0x0353(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          _blinkSequence;                                    // 0x0358(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChainBlinking;                                  // 0x0360(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isBlinking;                                       // 0x0361(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_362[0x2];                                      // 0x0362(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _blinkPlayRate;                                    // 0x0364(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          _cooldownSequence;                                 // 0x0368(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isInCooldown;                                     // 0x0370(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_371[0x3];                                      // 0x0371(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _cooldownPlayRate;                                 // 0x0374(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isChainBlinkAttacking;                            // 0x0378(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _isNurse;                                          // 0x0379(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37A[0x2E];                                     // 0x037A(0x002E)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimEffectHandler*                     _animEffectHandlerForSFX;                          // 0x03A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimEffectHandler*                     _animEffectHandlerForVFX;                          // 0x03B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UAnimEffectHandler>         _animEffectHandlerClassForSFX;                     // 0x03B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UAnimEffectHandler>         _animEffectHandlerClassForVFX;                     // 0x03C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ASlasherPlayer*                         _mySlasher;                                        // 0x03C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnBlinkTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NurseAnimInstance">();
	}
	static class UNurseAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNurseAnimInstance>();
	}
};
static_assert(alignof(UNurseAnimInstance) == 0x000010, "Wrong alignment on UNurseAnimInstance");
static_assert(sizeof(UNurseAnimInstance) == 0x0003D0, "Wrong size on UNurseAnimInstance");
static_assert(offsetof(UNurseAnimInstance, _isBlinkReady) == 0x000350, "Member 'UNurseAnimInstance::_isBlinkReady' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isChargingBlink) == 0x000351, "Member 'UNurseAnimInstance::_isChargingBlink' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isFullyCharged) == 0x000352, "Member 'UNurseAnimInstance::_isFullyCharged' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _blinkSequence) == 0x000358, "Member 'UNurseAnimInstance::_blinkSequence' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isChainBlinking) == 0x000360, "Member 'UNurseAnimInstance::_isChainBlinking' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isBlinking) == 0x000361, "Member 'UNurseAnimInstance::_isBlinking' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _blinkPlayRate) == 0x000364, "Member 'UNurseAnimInstance::_blinkPlayRate' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _cooldownSequence) == 0x000368, "Member 'UNurseAnimInstance::_cooldownSequence' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isInCooldown) == 0x000370, "Member 'UNurseAnimInstance::_isInCooldown' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _cooldownPlayRate) == 0x000374, "Member 'UNurseAnimInstance::_cooldownPlayRate' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isChainBlinkAttacking) == 0x000378, "Member 'UNurseAnimInstance::_isChainBlinkAttacking' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _isNurse) == 0x000379, "Member 'UNurseAnimInstance::_isNurse' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _animEffectHandlerForSFX) == 0x0003A8, "Member 'UNurseAnimInstance::_animEffectHandlerForSFX' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _animEffectHandlerForVFX) == 0x0003B0, "Member 'UNurseAnimInstance::_animEffectHandlerForVFX' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _animEffectHandlerClassForSFX) == 0x0003B8, "Member 'UNurseAnimInstance::_animEffectHandlerClassForSFX' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _animEffectHandlerClassForVFX) == 0x0003C0, "Member 'UNurseAnimInstance::_animEffectHandlerClassForVFX' has a wrong offset!");
static_assert(offsetof(UNurseAnimInstance, _mySlasher) == 0x0003C8, "Member 'UNurseAnimInstance::_mySlasher' has a wrong offset!");

// Class TheNurse.NurseAttackPicker
// 0x0018 (0x00C0 - 0x00A8)
class UNurseAttackPicker final : public USlasherAttackPickerComponent
{
public:
	uint8                                         Pad_A8[0x18];                                      // 0x00A8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NurseAttackPicker">();
	}
	static class UNurseAttackPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNurseAttackPicker>();
	}
};
static_assert(alignof(UNurseAttackPicker) == 0x000008, "Wrong alignment on UNurseAttackPicker");
static_assert(sizeof(UNurseAttackPicker) == 0x0000C0, "Wrong size on UNurseAttackPicker");

// Class TheNurse.NurseCalling
// 0x0028 (0x0448 - 0x0420)
class UNurseCalling final : public UPerk
{
public:
	float                                         _auraRevealDistance[0x3];                          // 0x0420(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FForAllSurvivorsStatusEffectImposer    _nurseCallingEffectImposer;                        // 0x0430(0x0018)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NurseCalling">();
	}
	static class UNurseCalling* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNurseCalling>();
	}
};
static_assert(alignof(UNurseCalling) == 0x000008, "Wrong alignment on UNurseCalling");
static_assert(sizeof(UNurseCalling) == 0x000448, "Wrong size on UNurseCalling");
static_assert(offsetof(UNurseCalling, _auraRevealDistance) == 0x000420, "Member 'UNurseCalling::_auraRevealDistance' has a wrong offset!");
static_assert(offsetof(UNurseCalling, _nurseCallingEffectImposer) == 0x000430, "Member 'UNurseCalling::_nurseCallingEffectImposer' has a wrong offset!");

// Class TheNurse.NurseFXInterface
// 0x0000 (0x0030 - 0x0030)
class INurseFXInterface final : public IInterface
{
public:
	void Cosmetic_OnSpasmodicBreathAddonEffectActive(bool ActiveValue);
	void Cosmetic_SpawnSpasmodicBreathVignette();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NurseFXInterface">();
	}
	static class INurseFXInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<INurseFXInterface>();
	}
};
static_assert(alignof(INurseFXInterface) == 0x000008, "Wrong alignment on INurseFXInterface");
static_assert(sizeof(INurseFXInterface) == 0x000030, "Wrong size on INurseFXInterface");

// Class TheNurse.NurseHelper
// 0x0000 (0x0030 - 0x0030)
class UNurseHelper final : public UBlueprintFunctionLibrary
{
public:
	static class ABlinkPowerItem* GetBlinkPowerItem(class ADBDPlayer* Player);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NurseHelper">();
	}
	static class UNurseHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNurseHelper>();
	}
};
static_assert(alignof(UNurseHelper) == 0x000008, "Wrong alignment on UNurseHelper");
static_assert(sizeof(UNurseHelper) == 0x000030, "Wrong size on UNurseHelper");

// Class TheNurse.SpasmodicBreathAddon
// 0x0050 (0x0338 - 0x02E8)
class USpasmodicBreathAddon final : public UItemAddon
{
public:
	uint8                                         Pad_2E8[0x10];                                     // 0x02E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _spasmodicBreathIndicatorStatusEffect;             // 0x02F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _speedEffectClass;                                 // 0x0300(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _disableBlinkEffectClass;                          // 0x0308(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _speedEffect;                                      // 0x0310(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _indicatorEffect;                                  // 0x0318(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStatusEffect*                          _disableBlinkEffect;                               // 0x0320(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_328[0x4];                                      // 0x0328(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _speedModifier;                                    // 0x032C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _activationDuration;                               // 0x0330(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_334[0x4];                                      // 0x0334(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpasmodicBreathAddon">();
	}
	static class USpasmodicBreathAddon* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpasmodicBreathAddon>();
	}
};
static_assert(alignof(USpasmodicBreathAddon) == 0x000008, "Wrong alignment on USpasmodicBreathAddon");
static_assert(sizeof(USpasmodicBreathAddon) == 0x000338, "Wrong size on USpasmodicBreathAddon");
static_assert(offsetof(USpasmodicBreathAddon, _spasmodicBreathIndicatorStatusEffect) == 0x0002F8, "Member 'USpasmodicBreathAddon::_spasmodicBreathIndicatorStatusEffect' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _speedEffectClass) == 0x000300, "Member 'USpasmodicBreathAddon::_speedEffectClass' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _disableBlinkEffectClass) == 0x000308, "Member 'USpasmodicBreathAddon::_disableBlinkEffectClass' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _speedEffect) == 0x000310, "Member 'USpasmodicBreathAddon::_speedEffect' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _indicatorEffect) == 0x000318, "Member 'USpasmodicBreathAddon::_indicatorEffect' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _disableBlinkEffect) == 0x000320, "Member 'USpasmodicBreathAddon::_disableBlinkEffect' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _speedModifier) == 0x00032C, "Member 'USpasmodicBreathAddon::_speedModifier' has a wrong offset!");
static_assert(offsetof(USpasmodicBreathAddon, _activationDuration) == 0x000330, "Member 'USpasmodicBreathAddon::_activationDuration' has a wrong offset!");

// Class TheNurse.SpeedOverrideEffect
// 0x0000 (0x0380 - 0x0380)
class USpeedOverrideEffect final : public UStatusEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpeedOverrideEffect">();
	}
	static class USpeedOverrideEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpeedOverrideEffect>();
	}
};
static_assert(alignof(USpeedOverrideEffect) == 0x000008, "Wrong alignment on USpeedOverrideEffect");
static_assert(sizeof(USpeedOverrideEffect) == 0x000380, "Wrong size on USpeedOverrideEffect");

// Class TheNurse.TeleportNearSurvivorScream
// 0x0090 (0x00D0 - 0x0040)
class UTeleportNearSurvivorScream final : public UCompetenceAction
{
public:
	class UAkAudioEvent*                          _screamSoundEvent;                                 // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTag                           _scoreEventTag;                                    // 0x0048(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _detectionCapsuleHalfHeight;                       // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _detectionCapsuleRadius;                           // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCapsuleComponent*                      _survivorDetector;                                 // 0x0060(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           _alreadyDetectedPlayers;                           // 0x0068(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDetectorOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TeleportNearSurvivorScream">();
	}
	static class UTeleportNearSurvivorScream* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeleportNearSurvivorScream>();
	}
};
static_assert(alignof(UTeleportNearSurvivorScream) == 0x000008, "Wrong alignment on UTeleportNearSurvivorScream");
static_assert(sizeof(UTeleportNearSurvivorScream) == 0x0000D0, "Wrong size on UTeleportNearSurvivorScream");
static_assert(offsetof(UTeleportNearSurvivorScream, _screamSoundEvent) == 0x000040, "Member 'UTeleportNearSurvivorScream::_screamSoundEvent' has a wrong offset!");
static_assert(offsetof(UTeleportNearSurvivorScream, _scoreEventTag) == 0x000048, "Member 'UTeleportNearSurvivorScream::_scoreEventTag' has a wrong offset!");
static_assert(offsetof(UTeleportNearSurvivorScream, _detectionCapsuleHalfHeight) == 0x000054, "Member 'UTeleportNearSurvivorScream::_detectionCapsuleHalfHeight' has a wrong offset!");
static_assert(offsetof(UTeleportNearSurvivorScream, _detectionCapsuleRadius) == 0x000058, "Member 'UTeleportNearSurvivorScream::_detectionCapsuleRadius' has a wrong offset!");
static_assert(offsetof(UTeleportNearSurvivorScream, _survivorDetector) == 0x000060, "Member 'UTeleportNearSurvivorScream::_survivorDetector' has a wrong offset!");
static_assert(offsetof(UTeleportNearSurvivorScream, _alreadyDetectedPlayers) == 0x000068, "Member 'UTeleportNearSurvivorScream::_alreadyDetectedPlayers' has a wrong offset!");

// Class TheNurse.ThanatophobiaEffect
// 0x0008 (0x0388 - 0x0380)
class UThanatophobiaEffect final : public UStatusEffect
{
public:
	uint8                                         Pad_380[0x8];                                      // 0x0380(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ThanatophobiaEffect">();
	}
	static class UThanatophobiaEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThanatophobiaEffect>();
	}
};
static_assert(alignof(UThanatophobiaEffect) == 0x000008, "Wrong alignment on UThanatophobiaEffect");
static_assert(sizeof(UThanatophobiaEffect) == 0x000388, "Wrong size on UThanatophobiaEffect");

// Class TheNurse.ThanatophobiaPerk
// 0x0080 (0x0520 - 0x04A0)
class UThanatophobiaPerk final : public UBaseNursePerk
{
public:
	uint8                                         Pad_4A0[0x18];                                     // 0x04A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _actionSpeedModifier[0x3];                         // 0x04B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _additionalActionSpeedModifier[0x3];               // 0x04C4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         _numSurvivorsForAdditionalSpeedModifier;           // 0x04D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D4[0x4C];                                     // 0x04D4(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetActionSpeedModifierAtLevel() const;
	float GetAdditionalActionSpeedModifierAtLevel() const;
	int32 GetNumSurvivorsForAdditionalSpeedModifier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ThanatophobiaPerk">();
	}
	static class UThanatophobiaPerk* GetDefaultObj()
	{
		return GetDefaultObjImpl<UThanatophobiaPerk>();
	}
};
static_assert(alignof(UThanatophobiaPerk) == 0x000008, "Wrong alignment on UThanatophobiaPerk");
static_assert(sizeof(UThanatophobiaPerk) == 0x000520, "Wrong size on UThanatophobiaPerk");
static_assert(offsetof(UThanatophobiaPerk, _actionSpeedModifier) == 0x0004B8, "Member 'UThanatophobiaPerk::_actionSpeedModifier' has a wrong offset!");
static_assert(offsetof(UThanatophobiaPerk, _additionalActionSpeedModifier) == 0x0004C4, "Member 'UThanatophobiaPerk::_additionalActionSpeedModifier' has a wrong offset!");
static_assert(offsetof(UThanatophobiaPerk, _numSurvivorsForAdditionalSpeedModifier) == 0x0004D0, "Member 'UThanatophobiaPerk::_numSurvivorsForAdditionalSpeedModifier' has a wrong offset!");

}

