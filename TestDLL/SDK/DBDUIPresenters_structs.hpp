#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIPresenters

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// Enum DBDUIPresenters.EPresenterPhase
// NumValues: 0x0003
enum class EPresenterPhase : uint8
{
	Initialization                           = 0,
	StartPresenting                          = 1,
	EPresenterPhase_MAX                      = 2,
};

// Enum DBDUIPresenters.EGameLayer
// NumValues: 0x000A
enum class EGameLayer : uint8
{
	Default                                  = 0,
	LowOverlay                               = 1,
	Overlay                                  = 2,
	ToastNotifications                       = 3,
	UMGPopup                                 = 4,
	HighOverlay                              = 5,
	Alerts                                   = 6,
	Tooltip                                  = 7,
	Watermark                                = 8,
	EGameLayer_MAX                           = 9,
};

// ScriptStruct DBDUIPresenters.QuestEventsTrackingData
// 0x0020 (0x0020 - 0x0000)
struct FQuestEventsTrackingData final
{
public:
	class FString                                 QuestEventId;                                      // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentProgressionValue;                           // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxProgressionValue;                               // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EQuestOperationType                           OperationType;                                     // 0x0018(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestEventsTrackingData) == 0x000008, "Wrong alignment on FQuestEventsTrackingData");
static_assert(sizeof(FQuestEventsTrackingData) == 0x000020, "Wrong size on FQuestEventsTrackingData");
static_assert(offsetof(FQuestEventsTrackingData, QuestEventId) == 0x000000, "Member 'FQuestEventsTrackingData::QuestEventId' has a wrong offset!");
static_assert(offsetof(FQuestEventsTrackingData, CurrentProgressionValue) == 0x000010, "Member 'FQuestEventsTrackingData::CurrentProgressionValue' has a wrong offset!");
static_assert(offsetof(FQuestEventsTrackingData, MaxProgressionValue) == 0x000014, "Member 'FQuestEventsTrackingData::MaxProgressionValue' has a wrong offset!");
static_assert(offsetof(FQuestEventsTrackingData, OperationType) == 0x000018, "Member 'FQuestEventsTrackingData::OperationType' has a wrong offset!");

// ScriptStruct DBDUIPresenters.QuestObjectiveTrackingData
// 0x0080 (0x0080 - 0x0000)
struct alignas(0x08) FQuestObjectiveTrackingData final
{
public:
	uint8                                         Pad_0[0x80];                                       // 0x0000(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuestObjectiveTrackingData) == 0x000008, "Wrong alignment on FQuestObjectiveTrackingData");
static_assert(sizeof(FQuestObjectiveTrackingData) == 0x000080, "Wrong size on FQuestObjectiveTrackingData");

// ScriptStruct DBDUIPresenters.PresenterGroupData
// 0x0008 (0x0010 - 0x0008)
struct FPresenterGroupData final : public FDBDTableRowBase
{
public:
	TSubclassOf<class UPresenterGroup>            PresenterGroup;                                    // 0x0008(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPresenterGroupData) == 0x000008, "Wrong alignment on FPresenterGroupData");
static_assert(sizeof(FPresenterGroupData) == 0x000010, "Wrong size on FPresenterGroupData");
static_assert(offsetof(FPresenterGroupData, PresenterGroup) == 0x000008, "Member 'FPresenterGroupData::PresenterGroup' has a wrong offset!");

// ScriptStruct DBDUIPresenters.SubtitlesEntry
// 0x0018 (0x0018 - 0x0000)
struct FSubtitlesEntry final
{
public:
	class FString                                 Subtitle;                                          // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAOneLiner;                                       // 0x0010(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasDurationOverride;                               // 0x0011(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationOverride;                                  // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSubtitlesEntry) == 0x000008, "Wrong alignment on FSubtitlesEntry");
static_assert(sizeof(FSubtitlesEntry) == 0x000018, "Wrong size on FSubtitlesEntry");
static_assert(offsetof(FSubtitlesEntry, Subtitle) == 0x000000, "Member 'FSubtitlesEntry::Subtitle' has a wrong offset!");
static_assert(offsetof(FSubtitlesEntry, IsAOneLiner) == 0x000010, "Member 'FSubtitlesEntry::IsAOneLiner' has a wrong offset!");
static_assert(offsetof(FSubtitlesEntry, HasDurationOverride) == 0x000011, "Member 'FSubtitlesEntry::HasDurationOverride' has a wrong offset!");
static_assert(offsetof(FSubtitlesEntry, DurationOverride) == 0x000014, "Member 'FSubtitlesEntry::DurationOverride' has a wrong offset!");

}

