#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: StatSystem

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// Enum StatSystem.EModifierCompoundStrategy
// NumValues: 0x000A
enum class EModifierCompoundStrategy : uint8
{
	Add                                      = 0,
	AddPlusOne                               = 1,
	Min                                      = 2,
	Max                                      = 3,
	Mult                                     = 4,
	MultWithCompoundNegative                 = 5,
	MultWithCompoundNegativeMinusOne         = 6,
	Average                                  = 7,
	Compounded                               = 8,
	EModifierCompoundStrategy_MAX            = 9,
};

// Enum StatSystem.EModifierOperationStrategy
// NumValues: 0x0006
enum class EModifierOperationStrategy : uint8
{
	Add                                      = 0,
	Subs                                     = 1,
	Mult                                     = 2,
	Div                                      = 3,
	MultIncludingZero                        = 4,
	EModifierOperationStrategy_MAX           = 5,
};

// ScriptStruct StatSystem.StatModifier
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x08) FStatModifier
{
public:
	EModifierOperationStrategy                    OperationStrategy;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ModifierTag;                                       // 0x0004(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EModifierCompoundStrategy                     CompoundStrategy;                                  // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x1F];                                      // 0x0011(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStatModifier) == 0x000008, "Wrong alignment on FStatModifier");
static_assert(sizeof(FStatModifier) == 0x000030, "Wrong size on FStatModifier");
static_assert(offsetof(FStatModifier, OperationStrategy) == 0x000000, "Member 'FStatModifier::OperationStrategy' has a wrong offset!");
static_assert(offsetof(FStatModifier, ModifierTag) == 0x000004, "Member 'FStatModifier::ModifierTag' has a wrong offset!");
static_assert(offsetof(FStatModifier, CompoundStrategy) == 0x000010, "Member 'FStatModifier::CompoundStrategy' has a wrong offset!");

// ScriptStruct StatSystem.BaseStat
// 0x0058 (0x0058 - 0x0000)
struct FBaseStat
{
public:
	uint8                                         Pad_0[0x20];                                       // 0x0000(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FStatModifier>                  _statModifiers;                                    // 0x0020(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseStat) == 0x000008, "Wrong alignment on FBaseStat");
static_assert(sizeof(FBaseStat) == 0x000058, "Wrong size on FBaseStat");
static_assert(offsetof(FBaseStat, _statModifiers) == 0x000020, "Member 'FBaseStat::_statModifiers' has a wrong offset!");

// ScriptStruct StatSystem.TunableStat
// 0x0028 (0x0080 - 0x0058)
struct FTunableStat : public FBaseStat
{
public:
	struct FDBDTunableRowHandle                   _baseValue;                                        // 0x0058(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FTunableStat) == 0x000008, "Wrong alignment on FTunableStat");
static_assert(sizeof(FTunableStat) == 0x000080, "Wrong size on FTunableStat");
static_assert(offsetof(FTunableStat, _baseValue) == 0x000058, "Member 'FTunableStat::_baseValue' has a wrong offset!");

// ScriptStruct StatSystem.NonTunableStat
// 0x0008 (0x0060 - 0x0058)
struct FNonTunableStat final : public FBaseStat
{
public:
	float                                         _baseValue;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNonTunableStat) == 0x000008, "Wrong alignment on FNonTunableStat");
static_assert(sizeof(FNonTunableStat) == 0x000060, "Wrong size on FNonTunableStat");
static_assert(offsetof(FNonTunableStat, _baseValue) == 0x000058, "Member 'FNonTunableStat::_baseValue' has a wrong offset!");

// ScriptStruct StatSystem.StatProperty
// 0x0030 (0x0088 - 0x0058)
struct FStatProperty final : public FBaseStat
{
public:
	bool                                          _useTunable;                                       // 0x0058(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _nonTunableValue;                                  // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _tunableValue;                                     // 0x0060(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FStatProperty) == 0x000008, "Wrong alignment on FStatProperty");
static_assert(sizeof(FStatProperty) == 0x000088, "Wrong size on FStatProperty");
static_assert(offsetof(FStatProperty, _useTunable) == 0x000058, "Member 'FStatProperty::_useTunable' has a wrong offset!");
static_assert(offsetof(FStatProperty, _nonTunableValue) == 0x00005C, "Member 'FStatProperty::_nonTunableValue' has a wrong offset!");
static_assert(offsetof(FStatProperty, _tunableValue) == 0x000060, "Member 'FStatProperty::_tunableValue' has a wrong offset!");

}

