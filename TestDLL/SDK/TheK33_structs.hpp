#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK33

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum TheK33.EControlStationState
// NumValues: 0x0005
enum class EControlStationState : uint8
{
	Available                                = 0,
	SpawningTurret                           = 1,
	SpawnedTurret                            = 2,
	Cooldown                                 = 3,
	EControlStationState_MAX                 = 4,
};

// Enum TheK33.EK33Foot
// NumValues: 0x0003
enum class EK33Foot : uint8
{
	LeftFoot                                 = 0,
	RightFoot                                = 1,
	EK33Foot_MAX                             = 2,
};

// Enum TheK33.EK33KillerBlockCollisionType
// NumValues: 0x0004
enum class EK33KillerBlockCollisionType : uint8
{
	AllCollisionsEnabled                     = 0,
	WorldCollisionsOnly                      = 1,
	TunnelCollisionsOnly                     = 2,
	EK33KillerBlockCollisionType_MAX         = 3,
};

// Enum TheK33.EK33SpecialModeChargeState
// NumValues: 0x0004
enum class EK33SpecialModeChargeState : uint32
{
	Idle                                     = 0,
	Charging                                 = 1,
	Discharging                              = 2,
	EK33SpecialModeChargeState_MAX           = 3,
};

// Enum TheK33.EK33TunnelBlockType
// NumValues: 0x0007
enum class EK33TunnelBlockType : uint8
{
	None                                     = 0,
	Straight                                 = 1,
	Corner                                   = 2,
	T_Junction                               = 3,
	CrossJunction                            = 4,
	DeadEnd                                  = 5,
	EK33TunnelBlockType_MAX                  = 6,
};

// Enum TheK33.EFatherKeyCardState
// NumValues: 0x0005
enum class EFatherKeyCardState : uint8
{
	None                                     = 0,
	Undiscovered                             = 1,
	Discovered                               = 2,
	Secured                                  = 3,
	EFatherKeyCardState_MAX                  = 4,
};

// ScriptStruct TheK33.TurretRangeChangedHandleData
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FTurretRangeChangedHandleData final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTurretRangeChangedHandleData) == 0x000008, "Wrong alignment on FTurretRangeChangedHandleData");
static_assert(sizeof(FTurretRangeChangedHandleData) == 0x000018, "Wrong size on FTurretRangeChangedHandleData");

// ScriptStruct TheK33.K33CosmeticTunnelBlockVariationInfo
// 0x0040 (0x0040 - 0x0000)
struct FK33CosmeticTunnelBlockVariationInfo final
{
public:
	float                                         PercentageChance;                                  // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   TunnelBlockCosmeticClass;                          // 0x0008(0x0038)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK33CosmeticTunnelBlockVariationInfo) == 0x000008, "Wrong alignment on FK33CosmeticTunnelBlockVariationInfo");
static_assert(sizeof(FK33CosmeticTunnelBlockVariationInfo) == 0x000040, "Wrong size on FK33CosmeticTunnelBlockVariationInfo");
static_assert(offsetof(FK33CosmeticTunnelBlockVariationInfo, PercentageChance) == 0x000000, "Member 'FK33CosmeticTunnelBlockVariationInfo::PercentageChance' has a wrong offset!");
static_assert(offsetof(FK33CosmeticTunnelBlockVariationInfo, TunnelBlockCosmeticClass) == 0x000008, "Member 'FK33CosmeticTunnelBlockVariationInfo::TunnelBlockCosmeticClass' has a wrong offset!");

// ScriptStruct TheK33.QuesitaPropStruct
// 0x0018 (0x0018 - 0x0000)
struct FQuesitaPropStruct final
{
public:
	TSubclassOf<class AActor>                     PropActorClass;                                    // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FQuesitaPropStruct) == 0x000008, "Wrong alignment on FQuesitaPropStruct");
static_assert(sizeof(FQuesitaPropStruct) == 0x000018, "Wrong size on FQuesitaPropStruct");
static_assert(offsetof(FQuesitaPropStruct, PropActorClass) == 0x000000, "Member 'FQuesitaPropStruct::PropActorClass' has a wrong offset!");
static_assert(offsetof(FQuesitaPropStruct, SocketName) == 0x000008, "Member 'FQuesitaPropStruct::SocketName' has a wrong offset!");

// ScriptStruct TheK33.K33CosmeticTunnelBlockSpawnInfo
// 0x0048 (0x0048 - 0x0000)
struct FK33CosmeticTunnelBlockSpawnInfo final
{
public:
	TSoftClassPtr<class UClass>                   DefaultClassType;                                  // 0x0000(0x0038)(Edit, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FK33CosmeticTunnelBlockVariationInfo> Variations;                                        // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK33CosmeticTunnelBlockSpawnInfo) == 0x000008, "Wrong alignment on FK33CosmeticTunnelBlockSpawnInfo");
static_assert(sizeof(FK33CosmeticTunnelBlockSpawnInfo) == 0x000048, "Wrong size on FK33CosmeticTunnelBlockSpawnInfo");
static_assert(offsetof(FK33CosmeticTunnelBlockSpawnInfo, DefaultClassType) == 0x000000, "Member 'FK33CosmeticTunnelBlockSpawnInfo::DefaultClassType' has a wrong offset!");
static_assert(offsetof(FK33CosmeticTunnelBlockSpawnInfo, Variations) == 0x000038, "Member 'FK33CosmeticTunnelBlockSpawnInfo::Variations' has a wrong offset!");

// ScriptStruct TheK33.K33GridCellLocation
// 0x0008 (0x0008 - 0x0000)
struct FK33GridCellLocation final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK33GridCellLocation) == 0x000004, "Wrong alignment on FK33GridCellLocation");
static_assert(sizeof(FK33GridCellLocation) == 0x000008, "Wrong size on FK33GridCellLocation");
static_assert(offsetof(FK33GridCellLocation, X) == 0x000000, "Member 'FK33GridCellLocation::X' has a wrong offset!");
static_assert(offsetof(FK33GridCellLocation, Y) == 0x000004, "Member 'FK33GridCellLocation::Y' has a wrong offset!");

// ScriptStruct TheK33.K33TunnelGridCellData
// 0x0030 (0x0030 - 0x0000)
struct FK33TunnelGridCellData final
{
public:
	struct FVector                                GridWorldLocation;                                 // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AK33ControlStation>      ControlStation;                                    // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FK33GridCellLocation                   _gridLocation;                                     // 0x0020(0x0008)(NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK33TunnelGridCellData) == 0x000008, "Wrong alignment on FK33TunnelGridCellData");
static_assert(sizeof(FK33TunnelGridCellData) == 0x000030, "Wrong size on FK33TunnelGridCellData");
static_assert(offsetof(FK33TunnelGridCellData, GridWorldLocation) == 0x000000, "Member 'FK33TunnelGridCellData::GridWorldLocation' has a wrong offset!");
static_assert(offsetof(FK33TunnelGridCellData, ControlStation) == 0x000018, "Member 'FK33TunnelGridCellData::ControlStation' has a wrong offset!");
static_assert(offsetof(FK33TunnelGridCellData, _gridLocation) == 0x000020, "Member 'FK33TunnelGridCellData::_gridLocation' has a wrong offset!");

// ScriptStruct TheK33.K33TunnelBlockSpawnDatum
// 0x0050 (0x0050 - 0x0000)
struct FK33TunnelBlockSpawnDatum final
{
public:
	struct FRotator                               _worldRotation;                                    // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	EK33TunnelBlockType                           _blockType;                                        // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FK33TunnelGridCellData                 _gridInfo;                                         // 0x0020(0x0030)(NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FK33TunnelBlockSpawnDatum) == 0x000008, "Wrong alignment on FK33TunnelBlockSpawnDatum");
static_assert(sizeof(FK33TunnelBlockSpawnDatum) == 0x000050, "Wrong size on FK33TunnelBlockSpawnDatum");
static_assert(offsetof(FK33TunnelBlockSpawnDatum, _worldRotation) == 0x000000, "Member 'FK33TunnelBlockSpawnDatum::_worldRotation' has a wrong offset!");
static_assert(offsetof(FK33TunnelBlockSpawnDatum, _blockType) == 0x000018, "Member 'FK33TunnelBlockSpawnDatum::_blockType' has a wrong offset!");
static_assert(offsetof(FK33TunnelBlockSpawnDatum, _gridInfo) == 0x000020, "Member 'FK33TunnelBlockSpawnDatum::_gridInfo' has a wrong offset!");

// ScriptStruct TheK33.K33TunnelBlockSpawnData
// 0x0018 (0x0018 - 0x0000)
struct FK33TunnelBlockSpawnData final
{
public:
	TArray<struct FK33TunnelBlockSpawnDatum>      Data;                                              // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsDataSet;                                         // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK33TunnelBlockSpawnData) == 0x000008, "Wrong alignment on FK33TunnelBlockSpawnData");
static_assert(sizeof(FK33TunnelBlockSpawnData) == 0x000018, "Wrong size on FK33TunnelBlockSpawnData");
static_assert(offsetof(FK33TunnelBlockSpawnData, Data) == 0x000000, "Member 'FK33TunnelBlockSpawnData::Data' has a wrong offset!");
static_assert(offsetof(FK33TunnelBlockSpawnData, IsDataSet) == 0x000010, "Member 'FK33TunnelBlockSpawnData::IsDataSet' has a wrong offset!");

// ScriptStruct TheK33.TurretInRangeAudioData
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FTurretInRangeAudioData final
{
public:
	uint8                                         Pad_0[0x28];                                       // 0x0000(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTurretInRangeAudioData) == 0x000008, "Wrong alignment on FTurretInRangeAudioData");
static_assert(sizeof(FTurretInRangeAudioData) == 0x000028, "Wrong size on FTurretInRangeAudioData");

// ScriptStruct TheK33.RaycastProperties
// 0x0008 (0x0008 - 0x0000)
struct FRaycastProperties final
{
public:
	float                                         HalfHeightPercentage;                              // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusPercentage;                                  // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRaycastProperties) == 0x000004, "Wrong alignment on FRaycastProperties");
static_assert(sizeof(FRaycastProperties) == 0x000008, "Wrong size on FRaycastProperties");
static_assert(offsetof(FRaycastProperties, HalfHeightPercentage) == 0x000000, "Member 'FRaycastProperties::HalfHeightPercentage' has a wrong offset!");
static_assert(offsetof(FRaycastProperties, RadiusPercentage) == 0x000004, "Member 'FRaycastProperties::RadiusPercentage' has a wrong offset!");

}

