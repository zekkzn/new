#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InterchangeCore

#include "Basic.hpp"

#include "InterchangeCore_classes.hpp"
#include "InterchangeCore_parameters.hpp"


namespace SDK
{

// Function InterchangeCore.InterchangeBaseNodeContainer.AddNode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             Node                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInterchangeBaseNodeContainer::AddNode(class UInterchangeBaseNode* Node)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "AddNode");

	Params::InterchangeBaseNodeContainer_AddNode Parms{};

	Parms.Node = Node;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.ComputeChildrenCache
// (Final, Native, Public, BlueprintCallable)

void UInterchangeBaseNodeContainer::ComputeChildrenCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "ComputeChildrenCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.GetNodeChildren
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NodeUniqueID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ChildIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInterchangeBaseNode*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInterchangeBaseNode* UInterchangeBaseNodeContainer::GetNodeChildren(const class FString& NodeUniqueID, int32 ChildIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "GetNodeChildren");

	Params::InterchangeBaseNodeContainer_GetNodeChildren Parms{};

	Parms.NodeUniqueID = std::move(NodeUniqueID);
	Parms.ChildIndex = ChildIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.LoadFromFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangeBaseNodeContainer::LoadFromFile(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "LoadFromFile");

	Params::InterchangeBaseNodeContainer_LoadFromFile Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.ResetChildrenCache
// (Final, Native, Public, BlueprintCallable)

void UInterchangeBaseNodeContainer::ResetChildrenCache()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "ResetChildrenCache");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.SaveToFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangeBaseNodeContainer::SaveToFile(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "SaveToFile");

	Params::InterchangeBaseNodeContainer_SaveToFile Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.SetNodeParentUid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           NodeUniqueID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           NewParentNodeUid                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNodeContainer::SetNodeParentUid(const class FString& NodeUniqueID, const class FString& NewParentNodeUid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "SetNodeParentUid");

	Params::InterchangeBaseNodeContainer_SetNodeParentUid Parms{};

	Parms.NodeUniqueID = std::move(NodeUniqueID);
	Parms.NewParentNodeUid = std::move(NewParentNodeUid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.GetFactoryNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           NodeUniqueID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInterchangeFactoryBaseNode*      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInterchangeFactoryBaseNode* UInterchangeBaseNodeContainer::GetFactoryNode(const class FString& NodeUniqueID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "GetFactoryNode");

	Params::InterchangeBaseNodeContainer_GetFactoryNode Parms{};

	Parms.NodeUniqueID = std::move(NodeUniqueID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.GetNode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           NodeUniqueID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class UInterchangeBaseNode*       ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UInterchangeBaseNode* UInterchangeBaseNodeContainer::GetNode(const class FString& NodeUniqueID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "GetNode");

	Params::InterchangeBaseNodeContainer_GetNode Parms{};

	Parms.NodeUniqueID = std::move(NodeUniqueID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.GetNodeChildrenCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           NodeUniqueID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInterchangeBaseNodeContainer::GetNodeChildrenCount(const class FString& NodeUniqueID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "GetNodeChildrenCount");

	Params::InterchangeBaseNodeContainer_GetNodeChildrenCount Parms{};

	Parms.NodeUniqueID = std::move(NodeUniqueID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.GetNodeChildrenUids
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           NodeUniqueID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UInterchangeBaseNodeContainer::GetNodeChildrenUids(const class FString& NodeUniqueID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "GetNodeChildrenUids");

	Params::InterchangeBaseNodeContainer_GetNodeChildrenUids Parms{};

	Parms.NodeUniqueID = std::move(NodeUniqueID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNodeContainer.GetNodes
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           ClassNode                                              (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   OutNodes                                               (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInterchangeBaseNodeContainer::GetNodes(const class UClass* ClassNode, TArray<class FString>* OutNodes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "GetNodes");

	Params::InterchangeBaseNodeContainer_GetNodes Parms{};

	Parms.ClassNode = ClassNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNodes != nullptr)
		*OutNodes = std::move(Parms.OutNodes);
}


// Function InterchangeCore.InterchangeBaseNodeContainer.GetRoots
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   RootNodes                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInterchangeBaseNodeContainer::GetRoots(TArray<class FString>* RootNodes) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "GetRoots");

	Params::InterchangeBaseNodeContainer_GetRoots Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (RootNodes != nullptr)
		*RootNodes = std::move(Parms.RootNodes);
}


// Function InterchangeCore.InterchangeBaseNodeContainer.IsNodeUidValid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           NodeUniqueID                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNodeContainer::IsNodeUidValid(const class FString& NodeUniqueID) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNodeContainer", "IsNodeUidValid");

	Params::InterchangeBaseNodeContainer_IsNodeUidValid Parms{};

	Parms.NodeUniqueID = std::move(NodeUniqueID);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.AddBooleanAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::AddBooleanAttribute(const class FName& NodeAttributeKey, const bool& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "AddBooleanAttribute");

	Params::InterchangeBaseNode_AddBooleanAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.AddDoubleAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::AddDoubleAttribute(const class FName& NodeAttributeKey, const double& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "AddDoubleAttribute");

	Params::InterchangeBaseNode_AddDoubleAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.AddFloatAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::AddFloatAttribute(const class FName& NodeAttributeKey, const float& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "AddFloatAttribute");

	Params::InterchangeBaseNode_AddFloatAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.AddGuidAttribute
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::AddGuidAttribute(const class FName& NodeAttributeKey, const struct FGuid& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "AddGuidAttribute");

	Params::InterchangeBaseNode_AddGuidAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.AddInt32Attribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::AddInt32Attribute(const class FName& NodeAttributeKey, const int32& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "AddInt32Attribute");

	Params::InterchangeBaseNode_AddInt32Attribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.AddLinearColorAttribute
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::AddLinearColorAttribute(const class FName& NodeAttributeKey, const struct FLinearColor& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "AddLinearColorAttribute");

	Params::InterchangeBaseNode_AddLinearColorAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.AddStringAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::AddStringAttribute(const class FName& NodeAttributeKey, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "AddStringAttribute");

	Params::InterchangeBaseNode_AddStringAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.AddVector2Attribute
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2f                        Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::AddVector2Attribute(const class FName& NodeAttributeKey, const struct FVector2f& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "AddVector2Attribute");

	Params::InterchangeBaseNode_AddVector2Attribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.InitializeNode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           UniqueId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DisplayLabel                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInterchangeNodeContainerType           NodeContainerType                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangeBaseNode::InitializeNode(const class FString& UniqueId, const class FString& DisplayLabel, const EInterchangeNodeContainerType NodeContainerType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "InitializeNode");

	Params::InterchangeBaseNode_InitializeNode Parms{};

	Parms.UniqueId = std::move(UniqueId);
	Parms.DisplayLabel = std::move(DisplayLabel);
	Parms.NodeContainerType = NodeContainerType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangeBaseNode.RemoveAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::RemoveAttribute(const class FName& NodeAttributeKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "RemoveAttribute");

	Params::InterchangeBaseNode_RemoveAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.SetAssetName
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetName                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::SetAssetName(const class FString& AssetName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "SetAssetName");

	Params::InterchangeBaseNode_SetAssetName Parms{};

	Parms.AssetName = std::move(AssetName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.SetDisplayLabel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DisplayName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::SetDisplayLabel(const class FString& DisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "SetDisplayLabel");

	Params::InterchangeBaseNode_SetDisplayLabel Parms{};

	Parms.DisplayName = std::move(DisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.SetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bIsEnabled                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::SetEnabled(const bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "SetEnabled");

	Params::InterchangeBaseNode_SetEnabled Parms{};

	Parms.bIsEnabled = bIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.SetParentUid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ParentUid                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::SetParentUid(const class FString& ParentUid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "SetParentUid");

	Params::InterchangeBaseNode_SetParentUid Parms{};

	Parms.ParentUid = std::move(ParentUid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.AddTargetNodeUid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           AssetUid                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::AddTargetNodeUid(const class FString& AssetUid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "AddTargetNodeUid");

	Params::InterchangeBaseNode_AddTargetNodeUid Parms{};

	Parms.AssetUid = std::move(AssetUid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetAssetName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInterchangeBaseNode::GetAssetName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetAssetName");

	Params::InterchangeBaseNode_GetAssetName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetBooleanAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::GetBooleanAttribute(const class FName& NodeAttributeKey, bool* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetBooleanAttribute");

	Params::InterchangeBaseNode_GetBooleanAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetDisplayLabel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInterchangeBaseNode::GetDisplayLabel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetDisplayLabel");

	Params::InterchangeBaseNode_GetDisplayLabel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetDoubleAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::GetDoubleAttribute(const class FName& NodeAttributeKey, double* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetDoubleAttribute");

	Params::InterchangeBaseNode_GetDoubleAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetFloatAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::GetFloatAttribute(const class FName& NodeAttributeKey, float* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetFloatAttribute");

	Params::InterchangeBaseNode_GetFloatAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetGuidAttribute
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGuid                            OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::GetGuidAttribute(const class FName& NodeAttributeKey, struct FGuid* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetGuidAttribute");

	Params::InterchangeBaseNode_GetGuidAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetInt32Attribute
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::GetInt32Attribute(const class FName& NodeAttributeKey, int32* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetInt32Attribute");

	Params::InterchangeBaseNode_GetInt32Attribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetLinearColorAttribute
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::GetLinearColorAttribute(const class FName& NodeAttributeKey, struct FLinearColor* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetLinearColorAttribute");

	Params::InterchangeBaseNode_GetLinearColorAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetNodeContainerType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EInterchangeNodeContainerType           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInterchangeNodeContainerType UInterchangeBaseNode::GetNodeContainerType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetNodeContainerType");

	Params::InterchangeBaseNode_GetNodeContainerType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetParentUid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInterchangeBaseNode::GetParentUid() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetParentUid");

	Params::InterchangeBaseNode_GetParentUid Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetStringAttribute
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutValue                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::GetStringAttribute(const class FName& NodeAttributeKey, class FString* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetStringAttribute");

	Params::InterchangeBaseNode_GetStringAttribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetTargetNodeCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInterchangeBaseNode::GetTargetNodeCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetTargetNodeCount");

	Params::InterchangeBaseNode_GetTargetNodeCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetTargetNodeUids
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   OutTargetAssets                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInterchangeBaseNode::GetTargetNodeUids(TArray<class FString>* OutTargetAssets) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetTargetNodeUids");

	Params::InterchangeBaseNode_GetTargetNodeUids Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTargetAssets != nullptr)
		*OutTargetAssets = std::move(Parms.OutTargetAssets);
}


// Function InterchangeCore.InterchangeBaseNode.GetUniqueID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInterchangeBaseNode::GetUniqueID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetUniqueID");

	Params::InterchangeBaseNode_GetUniqueID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.GetVector2Attribute
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             NodeAttributeKey                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2f                        OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::GetVector2Attribute(const class FName& NodeAttributeKey, struct FVector2f* OutValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "GetVector2Attribute");

	Params::InterchangeBaseNode_GetVector2Attribute Parms{};

	Parms.NodeAttributeKey = NodeAttributeKey;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.IsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::IsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "IsEnabled");

	Params::InterchangeBaseNode_IsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeBaseNode.RemoveTargetNodeUid
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           AssetUid                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeBaseNode::RemoveTargetNodeUid(const class FString& AssetUid) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeBaseNode", "RemoveTargetNodeUid");

	Params::InterchangeBaseNode_RemoveTargetNodeUid Parms{};

	Parms.AssetUid = std::move(AssetUid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBaseNode.AddFactoryDependencyUid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DependencyUid                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeFactoryBaseNode::AddFactoryDependencyUid(const class FString& DependencyUid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "AddFactoryDependencyUid");

	Params::InterchangeFactoryBaseNode_AddFactoryDependencyUid Parms{};

	Parms.DependencyUid = std::move(DependencyUid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBaseNode.RemoveFactoryDependencyUid
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DependencyUid                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeFactoryBaseNode::RemoveFactoryDependencyUid(const class FString& DependencyUid)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "RemoveFactoryDependencyUid");

	Params::InterchangeFactoryBaseNode_RemoveFactoryDependencyUid Parms{};

	Parms.DependencyUid = std::move(DependencyUid);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBaseNode.SetCustomReferenceObject
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSoftObjectPath                  AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeFactoryBaseNode::SetCustomReferenceObject(const struct FSoftObjectPath& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "SetCustomReferenceObject");

	Params::InterchangeFactoryBaseNode_SetCustomReferenceObject Parms{};

	Parms.AttributeValue = std::move(AttributeValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBaseNode.SetCustomSubPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AttributeValue                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeFactoryBaseNode::SetCustomSubPath(const class FString& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "SetCustomSubPath");

	Params::InterchangeFactoryBaseNode_SetCustomSubPath Parms{};

	Parms.AttributeValue = std::move(AttributeValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBaseNode.SetReimportStrategyFlags
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// EReimportStrategyFlags                  ReimportStrategyFlags                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeFactoryBaseNode::SetReimportStrategyFlags(const EReimportStrategyFlags& ReimportStrategyFlags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "SetReimportStrategyFlags");

	Params::InterchangeFactoryBaseNode_SetReimportStrategyFlags Parms{};

	Parms.ReimportStrategyFlags = ReimportStrategyFlags;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBaseNode.GetCustomReferenceObject
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FSoftObjectPath                  AttributeValue                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeFactoryBaseNode::GetCustomReferenceObject(struct FSoftObjectPath* AttributeValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "GetCustomReferenceObject");

	Params::InterchangeFactoryBaseNode_GetCustomReferenceObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = std::move(Parms.AttributeValue);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBaseNode.GetCustomSubPath
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           AttributeValue                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeFactoryBaseNode::GetCustomSubPath(class FString* AttributeValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "GetCustomSubPath");

	Params::InterchangeFactoryBaseNode_GetCustomSubPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = std::move(Parms.AttributeValue);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBaseNode.GetFactoryDependencies
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<class FString>                   OutDependencies                                        (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInterchangeFactoryBaseNode::GetFactoryDependencies(TArray<class FString>* OutDependencies) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "GetFactoryDependencies");

	Params::InterchangeFactoryBaseNode_GetFactoryDependencies Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDependencies != nullptr)
		*OutDependencies = std::move(Parms.OutDependencies);
}


// Function InterchangeCore.InterchangeFactoryBaseNode.GetFactoryDependenciesCount
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UInterchangeFactoryBaseNode::GetFactoryDependenciesCount() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "GetFactoryDependenciesCount");

	Params::InterchangeFactoryBaseNode_GetFactoryDependenciesCount Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBaseNode.GetFactoryDependency
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   Param_Index                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutDependency                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangeFactoryBaseNode::GetFactoryDependency(const int32 Param_Index, class FString* OutDependency) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "GetFactoryDependency");

	Params::InterchangeFactoryBaseNode_GetFactoryDependency Parms{};

	Parms.Param_Index = Param_Index;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDependency != nullptr)
		*OutDependency = std::move(Parms.OutDependency);
}


// Function InterchangeCore.InterchangeFactoryBaseNode.GetReimportStrategyFlags
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EReimportStrategyFlags                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EReimportStrategyFlags UInterchangeFactoryBaseNode::GetReimportStrategyFlags() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBaseNode", "GetReimportStrategyFlags");

	Params::InterchangeFactoryBaseNode_GetReimportStrategyFlags Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeFactoryBase.GetFactoryClass
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UClass*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UClass* UInterchangeFactoryBase::GetFactoryClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeFactoryBase", "GetFactoryClass");

	Params::InterchangeFactoryBase_GetFactoryClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangePipelineBase.FindOrAddPropertyStates
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             PropertyPath                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInterchangePipelinePropertyStatesReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FInterchangePipelinePropertyStates UInterchangePipelineBase::FindOrAddPropertyStates(const class FName PropertyPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangePipelineBase", "FindOrAddPropertyStates");

	Params::InterchangePipelineBase_FindOrAddPropertyStates Parms{};

	Parms.PropertyPath = PropertyPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangePipelineBase.ScriptedCanExecuteOnAnyThread
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EInterchangePipelineTask                PipelineTask                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangePipelineBase::ScriptedCanExecuteOnAnyThread(EInterchangePipelineTask PipelineTask)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangePipelineBase", "ScriptedCanExecuteOnAnyThread");

	Params::InterchangePipelineBase_ScriptedCanExecuteOnAnyThread Parms{};

	Parms.PipelineTask = PipelineTask;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangePipelineBase.ScriptedExecuteExportPipeline
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInterchangeBaseNodeContainer*    BaseNodeContainer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangePipelineBase::ScriptedExecuteExportPipeline(class UInterchangeBaseNodeContainer* BaseNodeContainer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangePipelineBase", "ScriptedExecuteExportPipeline");

	Params::InterchangePipelineBase_ScriptedExecuteExportPipeline Parms{};

	Parms.BaseNodeContainer = BaseNodeContainer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangePipelineBase.ScriptedExecutePipeline
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInterchangeBaseNodeContainer*    BaseNodeContainer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInterchangeSourceData*>   SourceDatas                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UInterchangePipelineBase::ScriptedExecutePipeline(class UInterchangeBaseNodeContainer* BaseNodeContainer, const TArray<class UInterchangeSourceData*>& SourceDatas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangePipelineBase", "ScriptedExecutePipeline");

	Params::InterchangePipelineBase_ScriptedExecutePipeline Parms{};

	Parms.BaseNodeContainer = BaseNodeContainer;
	Parms.SourceDatas = std::move(SourceDatas);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangePipelineBase.ScriptedExecutePostFactoryPipeline
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInterchangeBaseNodeContainer*    BaseNodeContainer                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FactoryNodeKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CreatedAsset                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAReimport                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangePipelineBase::ScriptedExecutePostFactoryPipeline(const class UInterchangeBaseNodeContainer* BaseNodeContainer, const class FString& FactoryNodeKey, class UObject* CreatedAsset, bool bIsAReimport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangePipelineBase", "ScriptedExecutePostFactoryPipeline");

	Params::InterchangePipelineBase_ScriptedExecutePostFactoryPipeline Parms{};

	Parms.BaseNodeContainer = BaseNodeContainer;
	Parms.FactoryNodeKey = std::move(FactoryNodeKey);
	Parms.CreatedAsset = CreatedAsset;
	Parms.bIsAReimport = bIsAReimport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangePipelineBase.ScriptedExecutePostImportPipeline
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInterchangeBaseNodeContainer*    BaseNodeContainer                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FactoryNodeKey                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          CreatedAsset                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsAReimport                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangePipelineBase::ScriptedExecutePostImportPipeline(const class UInterchangeBaseNodeContainer* BaseNodeContainer, const class FString& FactoryNodeKey, class UObject* CreatedAsset, bool bIsAReimport)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangePipelineBase", "ScriptedExecutePostImportPipeline");

	Params::InterchangePipelineBase_ScriptedExecutePostImportPipeline Parms{};

	Parms.BaseNodeContainer = BaseNodeContainer;
	Parms.FactoryNodeKey = std::move(FactoryNodeKey);
	Parms.CreatedAsset = CreatedAsset;
	Parms.bIsAReimport = bIsAReimport;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangePipelineBase.ScriptedExecutePreImportPipeline
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UInterchangeBaseNodeContainer*    BaseNodeContainer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UInterchangeSourceData*>   SourceDatas                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UInterchangePipelineBase::ScriptedExecutePreImportPipeline(class UInterchangeBaseNodeContainer* BaseNodeContainer, const TArray<class UInterchangeSourceData*>& SourceDatas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangePipelineBase", "ScriptedExecutePreImportPipeline");

	Params::InterchangePipelineBase_ScriptedExecutePreImportPipeline Parms{};

	Parms.BaseNodeContainer = BaseNodeContainer;
	Parms.SourceDatas = std::move(SourceDatas);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangePipelineBase.ScriptedSetReimportSourceIndex
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           ReimportObjectClass                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SourceFileIndex                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangePipelineBase::ScriptedSetReimportSourceIndex(class UClass* ReimportObjectClass, const int32 SourceFileIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangePipelineBase", "ScriptedSetReimportSourceIndex");

	Params::InterchangePipelineBase_ScriptedSetReimportSourceIndex Parms{};

	Parms.ReimportObjectClass = ReimportObjectClass;
	Parms.SourceFileIndex = SourceFileIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangePipelineBase.DoesPropertyStatesExist
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             PropertyPath                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangePipelineBase::DoesPropertyStatesExist(const class FName PropertyPath) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangePipelineBase", "DoesPropertyStatesExist");

	Params::InterchangePipelineBase_DoesPropertyStatesExist Parms{};

	Parms.PropertyPath = PropertyPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceData.SetFilename
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InFilename                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceData::SetFilename(const class FString& InFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceData", "SetFilename");

	Params::InterchangeSourceData_SetFilename Parms{};

	Parms.InFilename = std::move(InFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceData.GetFilename
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInterchangeSourceData::GetFilename() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceData", "GetFilename");

	Params::InterchangeSourceData_GetFilename Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.GetCustomIsNodeTransformAnimated
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::GetCustomIsNodeTransformAnimated(const class UInterchangeBaseNode* InterchangeBaseNode, bool* AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "GetCustomIsNodeTransformAnimated");

	Params::InterchangeAnimationAPI_GetCustomIsNodeTransformAnimated Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.GetCustomNodeTransformAnimationEndTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::GetCustomNodeTransformAnimationEndTime(const class UInterchangeBaseNode* InterchangeBaseNode, double* AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "GetCustomNodeTransformAnimationEndTime");

	Params::InterchangeAnimationAPI_GetCustomNodeTransformAnimationEndTime Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.GetCustomNodeTransformAnimationKeyCount
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::GetCustomNodeTransformAnimationKeyCount(const class UInterchangeBaseNode* InterchangeBaseNode, int32* AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "GetCustomNodeTransformAnimationKeyCount");

	Params::InterchangeAnimationAPI_GetCustomNodeTransformAnimationKeyCount Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.GetCustomNodeTransformAnimationStartTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::GetCustomNodeTransformAnimationStartTime(const class UInterchangeBaseNode* InterchangeBaseNode, double* AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "GetCustomNodeTransformAnimationStartTime");

	Params::InterchangeAnimationAPI_GetCustomNodeTransformAnimationStartTime Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.GetCustomNodeTransformPayloadKey
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AttributeValue                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::GetCustomNodeTransformPayloadKey(const class UInterchangeBaseNode* InterchangeBaseNode, class FString* AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "GetCustomNodeTransformPayloadKey");

	Params::InterchangeAnimationAPI_GetCustomNodeTransformPayloadKey Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = std::move(Parms.AttributeValue);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.SetCustomIsNodeTransformAnimated
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::SetCustomIsNodeTransformAnimated(class UInterchangeBaseNode* InterchangeBaseNode, const bool& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "SetCustomIsNodeTransformAnimated");

	Params::InterchangeAnimationAPI_SetCustomIsNodeTransformAnimated Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;
	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.SetCustomNodeTransformAnimationEndTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::SetCustomNodeTransformAnimationEndTime(class UInterchangeBaseNode* InterchangeBaseNode, const double& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "SetCustomNodeTransformAnimationEndTime");

	Params::InterchangeAnimationAPI_SetCustomNodeTransformAnimationEndTime Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;
	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.SetCustomNodeTransformAnimationKeyCount
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::SetCustomNodeTransformAnimationKeyCount(class UInterchangeBaseNode* InterchangeBaseNode, const int32& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "SetCustomNodeTransformAnimationKeyCount");

	Params::InterchangeAnimationAPI_SetCustomNodeTransformAnimationKeyCount Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;
	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.SetCustomNodeTransformAnimationStartTime
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::SetCustomNodeTransformAnimationStartTime(class UInterchangeBaseNode* InterchangeBaseNode, const double& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "SetCustomNodeTransformAnimationStartTime");

	Params::InterchangeAnimationAPI_SetCustomNodeTransformAnimationStartTime Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;
	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeAnimationAPI.SetCustomNodeTransformPayloadKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeBaseNode                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           AttributeValue                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeAnimationAPI::SetCustomNodeTransformPayloadKey(class UInterchangeBaseNode* InterchangeBaseNode, const class FString& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeAnimationAPI", "SetCustomNodeTransformPayloadKey");

	Params::InterchangeAnimationAPI_SetCustomNodeTransformPayloadKey Parms{};

	Parms.InterchangeBaseNode = InterchangeBaseNode;
	Parms.AttributeValue = std::move(AttributeValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.InitializeSourceNode
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           UniqueId                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DisplayLabel                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangeSourceNode::InitializeSourceNode(const class FString& UniqueId, const class FString& DisplayLabel)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "InitializeSourceNode");

	Params::InterchangeSourceNode_InitializeSourceNode Parms{};

	Parms.UniqueId = std::move(UniqueId);
	Parms.DisplayLabel = std::move(DisplayLabel);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangeSourceNode.SetCustomAnimatedTimeEnd
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// double                                  AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::SetCustomAnimatedTimeEnd(const double& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "SetCustomAnimatedTimeEnd");

	Params::InterchangeSourceNode_SetCustomAnimatedTimeEnd Parms{};

	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.SetCustomAnimatedTimeStart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// double                                  AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::SetCustomAnimatedTimeStart(const double& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "SetCustomAnimatedTimeStart");

	Params::InterchangeSourceNode_SetCustomAnimatedTimeStart Parms{};

	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.SetCustomImportUnusedMaterial
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// bool                                    AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::SetCustomImportUnusedMaterial(const bool& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "SetCustomImportUnusedMaterial");

	Params::InterchangeSourceNode_SetCustomImportUnusedMaterial Parms{};

	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.SetCustomSourceFrameRateDenominator
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::SetCustomSourceFrameRateDenominator(const int32& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "SetCustomSourceFrameRateDenominator");

	Params::InterchangeSourceNode_SetCustomSourceFrameRateDenominator Parms{};

	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.SetCustomSourceFrameRateNumerator
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// int32                                   AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::SetCustomSourceFrameRateNumerator(const int32& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "SetCustomSourceFrameRateNumerator");

	Params::InterchangeSourceNode_SetCustomSourceFrameRateNumerator Parms{};

	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.SetCustomSourceTimelineEnd
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// double                                  AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::SetCustomSourceTimelineEnd(const double& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "SetCustomSourceTimelineEnd");

	Params::InterchangeSourceNode_SetCustomSourceTimelineEnd Parms{};

	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.SetCustomSourceTimelineStart
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// double                                  AttributeValue                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::SetCustomSourceTimelineStart(const double& AttributeValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "SetCustomSourceTimelineStart");

	Params::InterchangeSourceNode_SetCustomSourceTimelineStart Parms{};

	Parms.AttributeValue = AttributeValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.GetCustomAnimatedTimeEnd
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::GetCustomAnimatedTimeEnd(double* AttributeValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "GetCustomAnimatedTimeEnd");

	Params::InterchangeSourceNode_GetCustomAnimatedTimeEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.GetCustomAnimatedTimeStart
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::GetCustomAnimatedTimeStart(double* AttributeValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "GetCustomAnimatedTimeStart");

	Params::InterchangeSourceNode_GetCustomAnimatedTimeStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.GetCustomImportUnusedMaterial
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::GetCustomImportUnusedMaterial(bool* AttributeValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "GetCustomImportUnusedMaterial");

	Params::InterchangeSourceNode_GetCustomImportUnusedMaterial Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.GetCustomSourceFrameRateDenominator
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::GetCustomSourceFrameRateDenominator(int32* AttributeValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "GetCustomSourceFrameRateDenominator");

	Params::InterchangeSourceNode_GetCustomSourceFrameRateDenominator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.GetCustomSourceFrameRateNumerator
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::GetCustomSourceFrameRateNumerator(int32* AttributeValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "GetCustomSourceFrameRateNumerator");

	Params::InterchangeSourceNode_GetCustomSourceFrameRateNumerator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.GetCustomSourceTimelineEnd
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::GetCustomSourceTimelineEnd(double* AttributeValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "GetCustomSourceTimelineEnd");

	Params::InterchangeSourceNode_GetCustomSourceTimelineEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeSourceNode.GetCustomSourceTimelineStart
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  AttributeValue                                         (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeSourceNode::GetCustomSourceTimelineStart(double* AttributeValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InterchangeSourceNode", "GetCustomSourceTimelineStart");

	Params::InterchangeSourceNode_GetCustomSourceTimelineStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AttributeValue != nullptr)
		*AttributeValue = Parms.AttributeValue;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.CreateUserDefinedAttribute_Boolean
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PayloadKey                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::CreateUserDefinedAttribute_Boolean(class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, const bool& Value, const class FString& PayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "CreateUserDefinedAttribute_Boolean");

	Params::InterchangeUserDefinedAttributesAPI_CreateUserDefinedAttribute_Boolean Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);
	Parms.Value = Value;
	Parms.PayloadKey = std::move(PayloadKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.CreateUserDefinedAttribute_Double
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PayloadKey                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::CreateUserDefinedAttribute_Double(class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, const double& Value, const class FString& PayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "CreateUserDefinedAttribute_Double");

	Params::InterchangeUserDefinedAttributesAPI_CreateUserDefinedAttribute_Double Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);
	Parms.Value = Value;
	Parms.PayloadKey = std::move(PayloadKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.CreateUserDefinedAttribute_Float
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PayloadKey                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::CreateUserDefinedAttribute_Float(class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, const float& Value, const class FString& PayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "CreateUserDefinedAttribute_Float");

	Params::InterchangeUserDefinedAttributesAPI_CreateUserDefinedAttribute_Float Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);
	Parms.Value = Value;
	Parms.PayloadKey = std::move(PayloadKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.CreateUserDefinedAttribute_FString
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PayloadKey                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::CreateUserDefinedAttribute_FString(class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, const class FString& Value, const class FString& PayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "CreateUserDefinedAttribute_FString");

	Params::InterchangeUserDefinedAttributesAPI_CreateUserDefinedAttribute_FString Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);
	Parms.Value = std::move(Value);
	Parms.PayloadKey = std::move(PayloadKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.CreateUserDefinedAttribute_Int32
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PayloadKey                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::CreateUserDefinedAttribute_Int32(class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, const int32& Value, const class FString& PayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "CreateUserDefinedAttribute_Int32");

	Params::InterchangeUserDefinedAttributesAPI_CreateUserDefinedAttribute_Int32 Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);
	Parms.Value = Value;
	Parms.PayloadKey = std::move(PayloadKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.DuplicateAllUserDefinedAttribute
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeSourceNode                                  (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInterchangeBaseNode*             InterchangeDestinationNode                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAddSourceNodeName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInterchangeUserDefinedAttributesAPI::DuplicateAllUserDefinedAttribute(const class UInterchangeBaseNode* InterchangeSourceNode, class UInterchangeBaseNode* InterchangeDestinationNode, bool bAddSourceNodeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "DuplicateAllUserDefinedAttribute");

	Params::InterchangeUserDefinedAttributesAPI_DuplicateAllUserDefinedAttribute Parms{};

	Parms.InterchangeSourceNode = InterchangeSourceNode;
	Parms.InterchangeDestinationNode = InterchangeDestinationNode;
	Parms.bAddSourceNodeName = bAddSourceNodeName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.GetUserDefinedAttribute_Boolean
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutPayloadKey                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::GetUserDefinedAttribute_Boolean(const class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, bool* OutValue, class FString* OutPayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "GetUserDefinedAttribute_Boolean");

	Params::InterchangeUserDefinedAttributesAPI_GetUserDefinedAttribute_Boolean Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	if (OutPayloadKey != nullptr)
		*OutPayloadKey = std::move(Parms.OutPayloadKey);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.GetUserDefinedAttribute_Double
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutPayloadKey                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::GetUserDefinedAttribute_Double(const class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, double* OutValue, class FString* OutPayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "GetUserDefinedAttribute_Double");

	Params::InterchangeUserDefinedAttributesAPI_GetUserDefinedAttribute_Double Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	if (OutPayloadKey != nullptr)
		*OutPayloadKey = std::move(Parms.OutPayloadKey);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.GetUserDefinedAttribute_Float
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutPayloadKey                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::GetUserDefinedAttribute_Float(const class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, float* OutValue, class FString* OutPayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "GetUserDefinedAttribute_Float");

	Params::InterchangeUserDefinedAttributesAPI_GetUserDefinedAttribute_Float Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	if (OutPayloadKey != nullptr)
		*OutPayloadKey = std::move(Parms.OutPayloadKey);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.GetUserDefinedAttribute_FString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutValue                                               (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutPayloadKey                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::GetUserDefinedAttribute_FString(const class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, class FString* OutValue, class FString* OutPayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "GetUserDefinedAttribute_FString");

	Params::InterchangeUserDefinedAttributesAPI_GetUserDefinedAttribute_FString Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = std::move(Parms.OutValue);

	if (OutPayloadKey != nullptr)
		*OutPayloadKey = std::move(Parms.OutPayloadKey);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.GetUserDefinedAttribute_Int32
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OutValue                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           OutPayloadKey                                          (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::GetUserDefinedAttribute_Int32(const class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName, int32* OutValue, class FString* OutPayloadKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "GetUserDefinedAttribute_Int32");

	Params::InterchangeUserDefinedAttributesAPI_GetUserDefinedAttribute_Int32 Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutValue != nullptr)
		*OutValue = Parms.OutValue;

	if (OutPayloadKey != nullptr)
		*OutPayloadKey = std::move(Parms.OutPayloadKey);

	return Parms.ReturnValue;
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.GetUserDefinedAttributeInfos
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FInterchangeUserDefinedAttributeInfo>UserDefinedAttributeInfos                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void UInterchangeUserDefinedAttributesAPI::GetUserDefinedAttributeInfos(const class UInterchangeBaseNode* InterchangeNode, TArray<struct FInterchangeUserDefinedAttributeInfo>* UserDefinedAttributeInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "GetUserDefinedAttributeInfos");

	Params::InterchangeUserDefinedAttributesAPI_GetUserDefinedAttributeInfos Parms{};

	Parms.InterchangeNode = InterchangeNode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (UserDefinedAttributeInfos != nullptr)
		*UserDefinedAttributeInfos = std::move(Parms.UserDefinedAttributeInfos);
}


// Function InterchangeCore.InterchangeUserDefinedAttributesAPI.RemoveUserDefinedAttribute
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInterchangeBaseNode*             InterchangeNode                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           UserDefinedAttributeName                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInterchangeUserDefinedAttributesAPI::RemoveUserDefinedAttribute(class UInterchangeBaseNode* InterchangeNode, const class FString& UserDefinedAttributeName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InterchangeUserDefinedAttributesAPI", "RemoveUserDefinedAttribute");

	Params::InterchangeUserDefinedAttributesAPI_RemoveUserDefinedAttribute Parms{};

	Parms.InterchangeNode = InterchangeNode;
	Parms.UserDefinedAttributeName = std::move(UserDefinedAttributeName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

