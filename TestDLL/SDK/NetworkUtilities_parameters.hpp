#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NetworkUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "NetworkUtilities_structs.hpp"


namespace SDK::Params
{

// Function NetworkUtilities.NetSynchedClock.Client_ReportServerTime
// 0x0004 (0x0004 - 0x0000)
struct NetSynchedClock_Client_ReportServerTime final
{
public:
	float                                         ServerTime;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetSynchedClock_Client_ReportServerTime) == 0x000004, "Wrong alignment on NetSynchedClock_Client_ReportServerTime");
static_assert(sizeof(NetSynchedClock_Client_ReportServerTime) == 0x000004, "Wrong size on NetSynchedClock_Client_ReportServerTime");
static_assert(offsetof(NetSynchedClock_Client_ReportServerTime, ServerTime) == 0x000000, "Member 'NetSynchedClock_Client_ReportServerTime::ServerTime' has a wrong offset!");

// Function NetworkUtilities.NetUtils.IsDedicatedServerInstance
// 0x0010 (0x0010 - 0x0000)
struct NetUtils_IsDedicatedServerInstance final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NetUtils_IsDedicatedServerInstance) == 0x000008, "Wrong alignment on NetUtils_IsDedicatedServerInstance");
static_assert(sizeof(NetUtils_IsDedicatedServerInstance) == 0x000010, "Wrong size on NetUtils_IsDedicatedServerInstance");
static_assert(offsetof(NetUtils_IsDedicatedServerInstance, WorldContextObject) == 0x000000, "Member 'NetUtils_IsDedicatedServerInstance::WorldContextObject' has a wrong offset!");
static_assert(offsetof(NetUtils_IsDedicatedServerInstance, ReturnValue) == 0x000008, "Member 'NetUtils_IsDedicatedServerInstance::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.NetworkFenceActor.Client_AllPassedFence
// 0x0010 (0x0010 - 0x0000)
struct NetworkFenceActor_Client_AllPassedFence final
{
public:
	TArray<struct FGuid>                          Fences;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkFenceActor_Client_AllPassedFence) == 0x000008, "Wrong alignment on NetworkFenceActor_Client_AllPassedFence");
static_assert(sizeof(NetworkFenceActor_Client_AllPassedFence) == 0x000010, "Wrong size on NetworkFenceActor_Client_AllPassedFence");
static_assert(offsetof(NetworkFenceActor_Client_AllPassedFence, Fences) == 0x000000, "Member 'NetworkFenceActor_Client_AllPassedFence::Fences' has a wrong offset!");

// Function NetworkUtilities.NetworkFenceActor.Server_ClientPassedFence
// 0x0010 (0x0010 - 0x0000)
struct NetworkFenceActor_Server_ClientPassedFence final
{
public:
	TArray<struct FGuid>                          Fences;                                            // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(NetworkFenceActor_Server_ClientPassedFence) == 0x000008, "Wrong alignment on NetworkFenceActor_Server_ClientPassedFence");
static_assert(sizeof(NetworkFenceActor_Server_ClientPassedFence) == 0x000010, "Wrong size on NetworkFenceActor_Server_ClientPassedFence");
static_assert(offsetof(NetworkFenceActor_Server_ClientPassedFence, Fences) == 0x000000, "Member 'NetworkFenceActor_Server_ClientPassedFence::Fences' has a wrong offset!");

// Function NetworkUtilities.ServerCorrectionDisablerComponent.Multicast_SetServerCorrectionEnabled
// 0x0010 (0x0010 - 0x0000)
struct ServerCorrectionDisablerComponent_Multicast_SetServerCorrectionEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Channel;                                           // 0x0004(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerCorrectionDisablerComponent_Multicast_SetServerCorrectionEnabled) == 0x000004, "Wrong alignment on ServerCorrectionDisablerComponent_Multicast_SetServerCorrectionEnabled");
static_assert(sizeof(ServerCorrectionDisablerComponent_Multicast_SetServerCorrectionEnabled) == 0x000010, "Wrong size on ServerCorrectionDisablerComponent_Multicast_SetServerCorrectionEnabled");
static_assert(offsetof(ServerCorrectionDisablerComponent_Multicast_SetServerCorrectionEnabled, Enabled) == 0x000000, "Member 'ServerCorrectionDisablerComponent_Multicast_SetServerCorrectionEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(ServerCorrectionDisablerComponent_Multicast_SetServerCorrectionEnabled, Channel) == 0x000004, "Member 'ServerCorrectionDisablerComponent_Multicast_SetServerCorrectionEnabled::Channel' has a wrong offset!");

// Function NetworkUtilities.ServerCorrectionDisablerComponent.SetServerCorrectionEnabled
// 0x0010 (0x0010 - 0x0000)
struct ServerCorrectionDisablerComponent_SetServerCorrectionEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           Channel;                                           // 0x0004(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerCorrectionDisablerComponent_SetServerCorrectionEnabled) == 0x000004, "Wrong alignment on ServerCorrectionDisablerComponent_SetServerCorrectionEnabled");
static_assert(sizeof(ServerCorrectionDisablerComponent_SetServerCorrectionEnabled) == 0x000010, "Wrong size on ServerCorrectionDisablerComponent_SetServerCorrectionEnabled");
static_assert(offsetof(ServerCorrectionDisablerComponent_SetServerCorrectionEnabled, Enabled) == 0x000000, "Member 'ServerCorrectionDisablerComponent_SetServerCorrectionEnabled::Enabled' has a wrong offset!");
static_assert(offsetof(ServerCorrectionDisablerComponent_SetServerCorrectionEnabled, Channel) == 0x000004, "Member 'ServerCorrectionDisablerComponent_SetServerCorrectionEnabled::Channel' has a wrong offset!");

// Function NetworkUtilities.ServerCorrectionDisablerComponent.GetServerCorrectionEnabled
// 0x0001 (0x0001 - 0x0000)
struct ServerCorrectionDisablerComponent_GetServerCorrectionEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ServerCorrectionDisablerComponent_GetServerCorrectionEnabled) == 0x000001, "Wrong alignment on ServerCorrectionDisablerComponent_GetServerCorrectionEnabled");
static_assert(sizeof(ServerCorrectionDisablerComponent_GetServerCorrectionEnabled) == 0x000001, "Wrong size on ServerCorrectionDisablerComponent_GetServerCorrectionEnabled");
static_assert(offsetof(ServerCorrectionDisablerComponent_GetServerCorrectionEnabled, ReturnValue) == 0x000000, "Member 'ServerCorrectionDisablerComponent_GetServerCorrectionEnabled::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.TimerObject.CreateTimer
// 0x0010 (0x0010 - 0x0000)
struct TimerObject_CreateTimer final
{
public:
	class AActor*                                 Owner;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTimerObject*                           ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_CreateTimer) == 0x000008, "Wrong alignment on TimerObject_CreateTimer");
static_assert(sizeof(TimerObject_CreateTimer) == 0x000010, "Wrong size on TimerObject_CreateTimer");
static_assert(offsetof(TimerObject_CreateTimer, Owner) == 0x000000, "Member 'TimerObject_CreateTimer::Owner' has a wrong offset!");
static_assert(offsetof(TimerObject_CreateTimer, ReturnValue) == 0x000008, "Member 'TimerObject_CreateTimer::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.TimerObject.Authority_SetPaused
// 0x0001 (0x0001 - 0x0000)
struct TimerObject_Authority_SetPaused final
{
public:
	bool                                          Paused;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_Authority_SetPaused) == 0x000001, "Wrong alignment on TimerObject_Authority_SetPaused");
static_assert(sizeof(TimerObject_Authority_SetPaused) == 0x000001, "Wrong size on TimerObject_Authority_SetPaused");
static_assert(offsetof(TimerObject_Authority_SetPaused, Paused) == 0x000000, "Member 'TimerObject_Authority_SetPaused::Paused' has a wrong offset!");

// Function NetworkUtilities.TimerObject.Authority_Start
// 0x0004 (0x0004 - 0x0000)
struct TimerObject_Authority_Start final
{
public:
	float                                         Duration;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_Authority_Start) == 0x000004, "Wrong alignment on TimerObject_Authority_Start");
static_assert(sizeof(TimerObject_Authority_Start) == 0x000004, "Wrong size on TimerObject_Authority_Start");
static_assert(offsetof(TimerObject_Authority_Start, Duration) == 0x000000, "Member 'TimerObject_Authority_Start::Duration' has a wrong offset!");

// Function NetworkUtilities.TimerObject.OnRep_TimerDataUpdated
// 0x0014 (0x0014 - 0x0000)
struct TimerObject_OnRep_TimerDataUpdated final
{
public:
	struct FReplicationTimerData                  OldData;                                           // 0x0000(0x0014)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_OnRep_TimerDataUpdated) == 0x000004, "Wrong alignment on TimerObject_OnRep_TimerDataUpdated");
static_assert(sizeof(TimerObject_OnRep_TimerDataUpdated) == 0x000014, "Wrong size on TimerObject_OnRep_TimerDataUpdated");
static_assert(offsetof(TimerObject_OnRep_TimerDataUpdated, OldData) == 0x000000, "Member 'TimerObject_OnRep_TimerDataUpdated::OldData' has a wrong offset!");

// Function NetworkUtilities.TimerObject.GetDuration
// 0x0004 (0x0004 - 0x0000)
struct TimerObject_GetDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_GetDuration) == 0x000004, "Wrong alignment on TimerObject_GetDuration");
static_assert(sizeof(TimerObject_GetDuration) == 0x000004, "Wrong size on TimerObject_GetDuration");
static_assert(offsetof(TimerObject_GetDuration, ReturnValue) == 0x000000, "Member 'TimerObject_GetDuration::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.TimerObject.GetElapsedTime
// 0x0004 (0x0004 - 0x0000)
struct TimerObject_GetElapsedTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_GetElapsedTime) == 0x000004, "Wrong alignment on TimerObject_GetElapsedTime");
static_assert(sizeof(TimerObject_GetElapsedTime) == 0x000004, "Wrong size on TimerObject_GetElapsedTime");
static_assert(offsetof(TimerObject_GetElapsedTime, ReturnValue) == 0x000000, "Member 'TimerObject_GetElapsedTime::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.TimerObject.GetElapsedTimePercent
// 0x0004 (0x0004 - 0x0000)
struct TimerObject_GetElapsedTimePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_GetElapsedTimePercent) == 0x000004, "Wrong alignment on TimerObject_GetElapsedTimePercent");
static_assert(sizeof(TimerObject_GetElapsedTimePercent) == 0x000004, "Wrong size on TimerObject_GetElapsedTimePercent");
static_assert(offsetof(TimerObject_GetElapsedTimePercent, ReturnValue) == 0x000000, "Member 'TimerObject_GetElapsedTimePercent::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.TimerObject.GetRemainingTime
// 0x0004 (0x0004 - 0x0000)
struct TimerObject_GetRemainingTime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_GetRemainingTime) == 0x000004, "Wrong alignment on TimerObject_GetRemainingTime");
static_assert(sizeof(TimerObject_GetRemainingTime) == 0x000004, "Wrong size on TimerObject_GetRemainingTime");
static_assert(offsetof(TimerObject_GetRemainingTime, ReturnValue) == 0x000000, "Member 'TimerObject_GetRemainingTime::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.TimerObject.GetRemainingTimePercent
// 0x0004 (0x0004 - 0x0000)
struct TimerObject_GetRemainingTimePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_GetRemainingTimePercent) == 0x000004, "Wrong alignment on TimerObject_GetRemainingTimePercent");
static_assert(sizeof(TimerObject_GetRemainingTimePercent) == 0x000004, "Wrong size on TimerObject_GetRemainingTimePercent");
static_assert(offsetof(TimerObject_GetRemainingTimePercent, ReturnValue) == 0x000000, "Member 'TimerObject_GetRemainingTimePercent::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.TimerObject.IsDone
// 0x0001 (0x0001 - 0x0000)
struct TimerObject_IsDone final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_IsDone) == 0x000001, "Wrong alignment on TimerObject_IsDone");
static_assert(sizeof(TimerObject_IsDone) == 0x000001, "Wrong size on TimerObject_IsDone");
static_assert(offsetof(TimerObject_IsDone, ReturnValue) == 0x000000, "Member 'TimerObject_IsDone::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.TimerObject.IsPaused
// 0x0001 (0x0001 - 0x0000)
struct TimerObject_IsPaused final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_IsPaused) == 0x000001, "Wrong alignment on TimerObject_IsPaused");
static_assert(sizeof(TimerObject_IsPaused) == 0x000001, "Wrong size on TimerObject_IsPaused");
static_assert(offsetof(TimerObject_IsPaused, ReturnValue) == 0x000000, "Member 'TimerObject_IsPaused::ReturnValue' has a wrong offset!");

// Function NetworkUtilities.TimerObject.IsTimerActive
// 0x0001 (0x0001 - 0x0000)
struct TimerObject_IsTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TimerObject_IsTimerActive) == 0x000001, "Wrong alignment on TimerObject_IsTimerActive");
static_assert(sizeof(TimerObject_IsTimerActive) == 0x000001, "Wrong size on TimerObject_IsTimerActive");
static_assert(offsetof(TimerObject_IsTimerActive, ReturnValue) == 0x000000, "Member 'TimerObject_IsTimerActive::ReturnValue' has a wrong offset!");

}

