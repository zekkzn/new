#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreDirectionalMiniGameItem_Wormhole

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function WBP_CoreDirectionalMiniGameItem_Wormhole.WBP_CoreDirectionalMiniGameItem_Wormhole_C.UpdateResult
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateResult final
{
public:
	bool                                          IsSuccessful;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateResult) == 0x000001, "Wrong alignment on WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateResult");
static_assert(sizeof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateResult) == 0x000001, "Wrong size on WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateResult");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateResult, IsSuccessful) == 0x000000, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateResult::IsSuccessful' has a wrong offset!");

// Function WBP_CoreDirectionalMiniGameItem_Wormhole.WBP_CoreDirectionalMiniGameItem_Wormhole_C.UpdateMaterial
// 0x0008 (0x0008 - 0x0000)
struct WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateMaterial final
{
public:
	class UMaterialInstanceDynamic*               DynamicMaterial;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateMaterial) == 0x000008, "Wrong alignment on WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateMaterial");
static_assert(sizeof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateMaterial) == 0x000008, "Wrong size on WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateMaterial");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateMaterial, DynamicMaterial) == 0x000000, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateMaterial::DynamicMaterial' has a wrong offset!");

// Function WBP_CoreDirectionalMiniGameItem_Wormhole.WBP_CoreDirectionalMiniGameItem_Wormhole_C.UpdateFinaleVisualState
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateFinaleVisualState final
{
public:
	bool                                          IsSuccessful;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateFinaleVisualState) == 0x000001, "Wrong alignment on WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateFinaleVisualState");
static_assert(sizeof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateFinaleVisualState) == 0x000001, "Wrong size on WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateFinaleVisualState");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateFinaleVisualState, IsSuccessful) == 0x000000, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_UpdateFinaleVisualState::IsSuccessful' has a wrong offset!");

// Function WBP_CoreDirectionalMiniGameItem_Wormhole.WBP_CoreDirectionalMiniGameItem_Wormhole_C.RotateIcon
// 0x0040 (0x0040 - 0x0000)
struct WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon final
{
public:
	EDirectionalInputKey                          Param_Direction;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EDirectionalInputKey                          Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Temp_real_Variable;                                // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_1;                              // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_2;                              // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_3;                              // 0x0020(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Temp_real_Variable_4;                              // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_Select_Default;                             // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_ReturnValue;            // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Divide_FloatFloat_A_ImplicitCast;         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon) == 0x000008, "Wrong alignment on WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon");
static_assert(sizeof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon) == 0x000040, "Wrong size on WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, Param_Direction) == 0x000000, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::Param_Direction' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, Temp_byte_Variable) == 0x000001, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, Temp_real_Variable) == 0x000008, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, Temp_real_Variable_1) == 0x000010, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, Temp_real_Variable_2) == 0x000018, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::Temp_real_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, Temp_real_Variable_3) == 0x000020, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::Temp_real_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, Temp_real_Variable_4) == 0x000028, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::Temp_real_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, K2Node_Select_Default) == 0x000030, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, CallFunc_Divide_FloatFloat_ReturnValue) == 0x000038, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::CallFunc_Divide_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon, CallFunc_Divide_FloatFloat_A_ImplicitCast) == 0x00003C, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RotateIcon::CallFunc_Divide_FloatFloat_A_ImplicitCast' has a wrong offset!");

// Function WBP_CoreDirectionalMiniGameItem_Wormhole.WBP_CoreDirectionalMiniGameItem_Wormhole_C.RevealDirection
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreDirectionalMiniGameItem_Wormhole_C_RevealDirection final
{
public:
	bool                                          WithAnimation;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RevealDirection) == 0x000001, "Wrong alignment on WBP_CoreDirectionalMiniGameItem_Wormhole_C_RevealDirection");
static_assert(sizeof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RevealDirection) == 0x000001, "Wrong size on WBP_CoreDirectionalMiniGameItem_Wormhole_C_RevealDirection");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_RevealDirection, WithAnimation) == 0x000000, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_RevealDirection::WithAnimation' has a wrong offset!");

// Function WBP_CoreDirectionalMiniGameItem_Wormhole.WBP_CoreDirectionalMiniGameItem_Wormhole_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreDirectionalMiniGameItem_Wormhole_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_CoreDirectionalMiniGameItem_Wormhole_C_PreConstruct");
static_assert(sizeof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_PreConstruct) == 0x000001, "Wrong size on WBP_CoreDirectionalMiniGameItem_Wormhole_C_PreConstruct");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_CoreDirectionalMiniGameItem_Wormhole.WBP_CoreDirectionalMiniGameItem_Wormhole_C.Init
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreDirectionalMiniGameItem_Wormhole_C_Init final
{
public:
	EDirectionalInputKey                          Param_Direction;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_Init) == 0x000001, "Wrong alignment on WBP_CoreDirectionalMiniGameItem_Wormhole_C_Init");
static_assert(sizeof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_Init) == 0x000001, "Wrong size on WBP_CoreDirectionalMiniGameItem_Wormhole_C_Init");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_Init, Param_Direction) == 0x000000, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_Init::Param_Direction' has a wrong offset!");

// Function WBP_CoreDirectionalMiniGameItem_Wormhole.WBP_CoreDirectionalMiniGameItem_Wormhole_C.ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole
// 0x00C8 (0x00C8 - 0x0000)
struct WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_MakeStruct_LinearColor;                     // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_1;            // 0x0028(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDesignTime;                         // 0x003C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_CreatePlayAnimationTimeRangeProxyObject_Result; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimationPlayCallbackProxy*      CallFunc_CreatePlayAnimationTimeRangeProxyObject_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate_2;            // 0x005C(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_CreatePlayAnimationTimeRangeProxyObject_Result_1; // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimationPlayCallbackProxy*      CallFunc_CreatePlayAnimationTimeRangeProxyObject_ReturnValue_1; // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_withAnimation;                        // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_2;              // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EDirectionalInputKey                          K2Node_Event_direction;                            // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_CreatePlayAnimationTimeRangeProxyObject_Result_2; // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UWidgetAnimationPlayCallbackProxy*      CallFunc_CreatePlayAnimationTimeRangeProxyObject_ReturnValue_2; // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isSuccessful_1;                       // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isSuccessful;                         // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole) == 0x000008, "Wrong alignment on WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole");
static_assert(sizeof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole) == 0x0000C8, "Wrong size on WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, EntryPoint) == 0x000000, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, K2Node_MakeStruct_LinearColor) == 0x000018, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::K2Node_MakeStruct_LinearColor' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, K2Node_CreateDelegate_OutputDelegate_1) == 0x000028, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, K2Node_Event_IsDesignTime) == 0x00003C, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000040, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_CreatePlayAnimationTimeRangeProxyObject_Result) == 0x000048, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_CreatePlayAnimationTimeRangeProxyObject_Result' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_CreatePlayAnimationTimeRangeProxyObject_ReturnValue) == 0x000050, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_CreatePlayAnimationTimeRangeProxyObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_IsValid_ReturnValue) == 0x000058, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, K2Node_CreateDelegate_OutputDelegate_2) == 0x00005C, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_CreatePlayAnimationTimeRangeProxyObject_Result_1) == 0x000070, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_CreatePlayAnimationTimeRangeProxyObject_Result_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_CreatePlayAnimationTimeRangeProxyObject_ReturnValue_1) == 0x000078, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_CreatePlayAnimationTimeRangeProxyObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_IsValid_ReturnValue_1) == 0x000080, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_PlayAnimation_ReturnValue) == 0x000088, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, K2Node_Event_withAnimation) == 0x000090, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::K2Node_Event_withAnimation' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_PlayAnimation_ReturnValue_1) == 0x000098, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_PlayAnimation_ReturnValue_2) == 0x0000A0, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_PlayAnimation_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, K2Node_Event_direction) == 0x0000A8, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::K2Node_Event_direction' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_CreatePlayAnimationTimeRangeProxyObject_Result_2) == 0x0000B0, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_CreatePlayAnimationTimeRangeProxyObject_Result_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_CreatePlayAnimationTimeRangeProxyObject_ReturnValue_2) == 0x0000B8, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_CreatePlayAnimationTimeRangeProxyObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, CallFunc_IsValid_ReturnValue_2) == 0x0000C0, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, K2Node_Event_isSuccessful_1) == 0x0000C1, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::K2Node_Event_isSuccessful_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole, K2Node_Event_isSuccessful) == 0x0000C2, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_ExecuteUbergraph_WBP_CoreDirectionalMiniGameItem_Wormhole::K2Node_Event_isSuccessful' has a wrong offset!");

// Function WBP_CoreDirectionalMiniGameItem_Wormhole.WBP_CoreDirectionalMiniGameItem_Wormhole_C.CreateDynamicMaterial
// 0x0018 (0x0018 - 0x0000)
struct WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial final
{
public:
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_1; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue_2; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial) == 0x000008, "Wrong alignment on WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial");
static_assert(sizeof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial) == 0x000018, "Wrong size on WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000000, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue_1) == 0x000008, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial, CallFunc_CreateDynamicMaterialInstance_ReturnValue_2) == 0x000010, "Member 'WBP_CoreDirectionalMiniGameItem_Wormhole_C_CreateDynamicMaterial::CallFunc_CreateDynamicMaterialInstance_ReturnValue_2' has a wrong offset!");

}

