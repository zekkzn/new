#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_K36

#include "Basic.hpp"

#include "DBDUIViewInterfaces_structs.hpp"


namespace SDK::Params
{

// Function WBP_K36.WBP_K36_C.SetVecnaItem
// 0x0020 (0x0020 - 0x0000)
struct WBP_K36_C_SetVecnaItem final
{
public:
	class UWBP_K36_ItemSlot_C*                    ItemSlotWidget;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          HasVecnaItem;                                      // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsActive;                                          // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             SlotIcon;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K36_C_SetVecnaItem) == 0x000008, "Wrong alignment on WBP_K36_C_SetVecnaItem");
static_assert(sizeof(WBP_K36_C_SetVecnaItem) == 0x000020, "Wrong size on WBP_K36_C_SetVecnaItem");
static_assert(offsetof(WBP_K36_C_SetVecnaItem, ItemSlotWidget) == 0x000000, "Member 'WBP_K36_C_SetVecnaItem::ItemSlotWidget' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetVecnaItem, HasVecnaItem) == 0x000008, "Member 'WBP_K36_C_SetVecnaItem::HasVecnaItem' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetVecnaItem, IsActive) == 0x000009, "Member 'WBP_K36_C_SetVecnaItem::IsActive' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetVecnaItem, SlotIcon) == 0x000010, "Member 'WBP_K36_C_SetVecnaItem::SlotIcon' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetVecnaItem, CallFunc_Not_PreBool_ReturnValue) == 0x000018, "Member 'WBP_K36_C_SetVecnaItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WBP_K36.WBP_K36_C.SetKillerData
// 0x0098 (0x0098 - 0x0000)
struct WBP_K36_C_SetKillerData final
{
public:
	struct FPlayerStatusViewData                  Data;                                              // 0x0000(0x0098)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_K36_C_SetKillerData) == 0x000008, "Wrong alignment on WBP_K36_C_SetKillerData");
static_assert(sizeof(WBP_K36_C_SetKillerData) == 0x000098, "Wrong size on WBP_K36_C_SetKillerData");
static_assert(offsetof(WBP_K36_C_SetKillerData, Data) == 0x000000, "Member 'WBP_K36_C_SetKillerData::Data' has a wrong offset!");

// Function WBP_K36.WBP_K36_C.SetK36Data
// 0x0038 (0x0038 - 0x0000)
struct WBP_K36_C_SetK36Data final
{
public:
	class UK36StatusData*                         ViewData;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          IsLocalKiller;                                     // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDetected;                                        // 0x0009(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x000B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_Array_Get_Item;                           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_DoubleDouble_ReturnValue;         // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_Array_Get_Item_1;                         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_SetGauge_Progress_ImplicitCast;           // 0x0028(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Greater_DoubleDouble_A_ImplicitCast;      // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K36_C_SetK36Data) == 0x000008, "Wrong alignment on WBP_K36_C_SetK36Data");
static_assert(sizeof(WBP_K36_C_SetK36Data) == 0x000038, "Wrong size on WBP_K36_C_SetK36Data");
static_assert(offsetof(WBP_K36_C_SetK36Data, ViewData) == 0x000000, "Member 'WBP_K36_C_SetK36Data::ViewData' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, IsLocalKiller) == 0x000008, "Member 'WBP_K36_C_SetK36Data::IsLocalKiller' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, IsDetected) == 0x000009, "Member 'WBP_K36_C_SetK36Data::IsDetected' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, CallFunc_Not_PreBool_ReturnValue) == 0x00000A, "Member 'WBP_K36_C_SetK36Data::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, CallFunc_BooleanAND_ReturnValue) == 0x00000B, "Member 'WBP_K36_C_SetK36Data::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, CallFunc_Array_Get_Item) == 0x000010, "Member 'WBP_K36_C_SetK36Data::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, CallFunc_BooleanOR_ReturnValue) == 0x000018, "Member 'WBP_K36_C_SetK36Data::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, CallFunc_Greater_DoubleDouble_ReturnValue) == 0x000019, "Member 'WBP_K36_C_SetK36Data::CallFunc_Greater_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, CallFunc_Array_Get_Item_1) == 0x000020, "Member 'WBP_K36_C_SetK36Data::CallFunc_Array_Get_Item_1' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, CallFunc_SetGauge_Progress_ImplicitCast) == 0x000028, "Member 'WBP_K36_C_SetK36Data::CallFunc_SetGauge_Progress_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetK36Data, CallFunc_Greater_DoubleDouble_A_ImplicitCast) == 0x000030, "Member 'WBP_K36_C_SetK36Data::CallFunc_Greater_DoubleDouble_A_ImplicitCast' has a wrong offset!");

// Function WBP_K36.WBP_K36_C.SetItem
// 0x0028 (0x0028 - 0x0000)
struct WBP_K36_C_SetItem final
{
public:
	class UWBP_K36_ItemSlot_C*                    ItemSlotWidget;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          IsKiller;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HasItem;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsDetected;                                        // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x1];                                        // 0x000B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SpellID;                                           // 0x000C(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SlotIcon;                                          // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SpellIcon;                                         // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          ShouldKillerSeeCounterSpell;                       // 0x0020(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K36_C_SetItem) == 0x000008, "Wrong alignment on WBP_K36_C_SetItem");
static_assert(sizeof(WBP_K36_C_SetItem) == 0x000028, "Wrong size on WBP_K36_C_SetItem");
static_assert(offsetof(WBP_K36_C_SetItem, ItemSlotWidget) == 0x000000, "Member 'WBP_K36_C_SetItem::ItemSlotWidget' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetItem, IsKiller) == 0x000008, "Member 'WBP_K36_C_SetItem::IsKiller' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetItem, HasItem) == 0x000009, "Member 'WBP_K36_C_SetItem::HasItem' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetItem, IsDetected) == 0x00000A, "Member 'WBP_K36_C_SetItem::IsDetected' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetItem, SpellID) == 0x00000C, "Member 'WBP_K36_C_SetItem::SpellID' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetItem, SlotIcon) == 0x000010, "Member 'WBP_K36_C_SetItem::SlotIcon' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetItem, SpellIcon) == 0x000018, "Member 'WBP_K36_C_SetItem::SpellIcon' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetItem, ShouldKillerSeeCounterSpell) == 0x000020, "Member 'WBP_K36_C_SetItem::ShouldKillerSeeCounterSpell' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetItem, CallFunc_Not_PreBool_ReturnValue) == 0x000021, "Member 'WBP_K36_C_SetItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WBP_K36.WBP_K36_C.SetGauge
// 0x0020 (0x0020 - 0x0000)
struct WBP_K36_C_SetGauge final
{
public:
	double                                        Progress;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NearlyEqual_FloatFloat_ReturnValue;       // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K36_C_SetGauge) == 0x000008, "Wrong alignment on WBP_K36_C_SetGauge");
static_assert(sizeof(WBP_K36_C_SetGauge) == 0x000020, "Wrong size on WBP_K36_C_SetGauge");
static_assert(offsetof(WBP_K36_C_SetGauge, Progress) == 0x000000, "Member 'WBP_K36_C_SetGauge::Progress' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetGauge, CallFunc_NearlyEqual_FloatFloat_ReturnValue) == 0x000008, "Member 'WBP_K36_C_SetGauge::CallFunc_NearlyEqual_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetGauge, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WBP_K36_C_SetGauge::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_SetGauge, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000018, "Member 'WBP_K36_C_SetGauge::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function WBP_K36.WBP_K36_C.ExecuteUbergraph_WBP_K36
// 0x00B0 (0x00B0 - 0x0000)
struct WBP_K36_C_ExecuteUbergraph_WBP_K36 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPlayerStatusViewData                  K2Node_Event_data;                                 // 0x0008(0x0098)(ConstParm)
	class UK36StatusData*                         K2Node_DynamicCast_AsK36Status_Data;               // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_K36_C_ExecuteUbergraph_WBP_K36) == 0x000008, "Wrong alignment on WBP_K36_C_ExecuteUbergraph_WBP_K36");
static_assert(sizeof(WBP_K36_C_ExecuteUbergraph_WBP_K36) == 0x0000B0, "Wrong size on WBP_K36_C_ExecuteUbergraph_WBP_K36");
static_assert(offsetof(WBP_K36_C_ExecuteUbergraph_WBP_K36, EntryPoint) == 0x000000, "Member 'WBP_K36_C_ExecuteUbergraph_WBP_K36::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_ExecuteUbergraph_WBP_K36, K2Node_Event_data) == 0x000008, "Member 'WBP_K36_C_ExecuteUbergraph_WBP_K36::K2Node_Event_data' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_ExecuteUbergraph_WBP_K36, K2Node_DynamicCast_AsK36Status_Data) == 0x0000A0, "Member 'WBP_K36_C_ExecuteUbergraph_WBP_K36::K2Node_DynamicCast_AsK36Status_Data' has a wrong offset!");
static_assert(offsetof(WBP_K36_C_ExecuteUbergraph_WBP_K36, K2Node_DynamicCast_bSuccess) == 0x0000A8, "Member 'WBP_K36_C_ExecuteUbergraph_WBP_K36::K2Node_DynamicCast_bSuccess' has a wrong offset!");

}

