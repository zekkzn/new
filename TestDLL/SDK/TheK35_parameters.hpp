#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK35

#include "Basic.hpp"

#include "TheK35_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "PhysicsCore_structs.hpp"


namespace SDK::Params
{

// Function TheK35.K35AnimInstance.OnGameEventReceived
// 0x0040 (0x0040 - 0x0000)
struct K35AnimInstance_OnGameEventReceived final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35AnimInstance_OnGameEventReceived) == 0x000008, "Wrong alignment on K35AnimInstance_OnGameEventReceived");
static_assert(sizeof(K35AnimInstance_OnGameEventReceived) == 0x000040, "Wrong size on K35AnimInstance_OnGameEventReceived");
static_assert(offsetof(K35AnimInstance_OnGameEventReceived, GameplayTag) == 0x000000, "Member 'K35AnimInstance_OnGameEventReceived::GameplayTag' has a wrong offset!");
static_assert(offsetof(K35AnimInstance_OnGameEventReceived, GameEventData) == 0x000010, "Member 'K35AnimInstance_OnGameEventReceived::GameEventData' has a wrong offset!");

// Function TheK35.K35AreaBlast.Cosmetic_OnStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K35AreaBlast_Cosmetic_OnStateChanged final
{
public:
	EK35AreaBlastState                            NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35AreaBlast_Cosmetic_OnStateChanged) == 0x000001, "Wrong alignment on K35AreaBlast_Cosmetic_OnStateChanged");
static_assert(sizeof(K35AreaBlast_Cosmetic_OnStateChanged) == 0x000001, "Wrong size on K35AreaBlast_Cosmetic_OnStateChanged");
static_assert(offsetof(K35AreaBlast_Cosmetic_OnStateChanged, NewState) == 0x000000, "Member 'K35AreaBlast_Cosmetic_OnStateChanged::NewState' has a wrong offset!");

// Function TheK35.K35AreaBlast.Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast
// 0x0010 (0x0010 - 0x0000)
struct K35AreaBlast_Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            CurrentHealthState;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35AreaBlast_Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast) == 0x000008, "Wrong alignment on K35AreaBlast_Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast");
static_assert(sizeof(K35AreaBlast_Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast) == 0x000010, "Wrong size on K35AreaBlast_Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast");
static_assert(offsetof(K35AreaBlast_Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast, Survivor) == 0x000000, "Member 'K35AreaBlast_Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast::Survivor' has a wrong offset!");
static_assert(offsetof(K35AreaBlast_Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast, CurrentHealthState) == 0x000008, "Member 'K35AreaBlast_Cosmetic_OnSurvivorAfflictedWithKillerEffectByAreaBlast::CurrentHealthState' has a wrong offset!");

// Function TheK35.K35AreaBlast.Cosmetic_OnSurvivorDamagedByAreaBlast
// 0x0010 (0x0010 - 0x0000)
struct K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            TargetHealthState;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAnySurvivorAlreadyHit;                           // 0x0009(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast) == 0x000008, "Wrong alignment on K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast");
static_assert(sizeof(K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast) == 0x000010, "Wrong size on K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast");
static_assert(offsetof(K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast, Survivor) == 0x000000, "Member 'K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast::Survivor' has a wrong offset!");
static_assert(offsetof(K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast, TargetHealthState) == 0x000008, "Member 'K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast::TargetHealthState' has a wrong offset!");
static_assert(offsetof(K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast, IsAnySurvivorAlreadyHit) == 0x000009, "Member 'K35AreaBlast_Cosmetic_OnSurvivorDamagedByAreaBlast::IsAnySurvivorAlreadyHit' has a wrong offset!");

// Function TheK35.K35AreaBlast.Multicast_Spawn
// 0x0018 (0x0018 - 0x0000)
struct K35AreaBlast_Multicast_Spawn final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35AreaBlast_Multicast_Spawn) == 0x000008, "Wrong alignment on K35AreaBlast_Multicast_Spawn");
static_assert(sizeof(K35AreaBlast_Multicast_Spawn) == 0x000018, "Wrong size on K35AreaBlast_Multicast_Spawn");
static_assert(offsetof(K35AreaBlast_Multicast_Spawn, SpawnLocation) == 0x000000, "Member 'K35AreaBlast_Multicast_Spawn::SpawnLocation' has a wrong offset!");

// Function TheK35.K35AreaBlast.Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast
// 0x0010 (0x0010 - 0x0000)
struct K35AreaBlast_Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            CurrentHealthState;                                // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35AreaBlast_Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast) == 0x000008, "Wrong alignment on K35AreaBlast_Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast");
static_assert(sizeof(K35AreaBlast_Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast) == 0x000010, "Wrong size on K35AreaBlast_Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast");
static_assert(offsetof(K35AreaBlast_Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast, Survivor) == 0x000000, "Member 'K35AreaBlast_Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast::Survivor' has a wrong offset!");
static_assert(offsetof(K35AreaBlast_Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast, CurrentHealthState) == 0x000008, "Member 'K35AreaBlast_Multicast_SurvivorAfflictedWithKillerEffectByAreaBlast::CurrentHealthState' has a wrong offset!");

// Function TheK35.K35AreaBlast.Multicast_SurvivorDamagedByAreaBlast
// 0x0010 (0x0010 - 0x0000)
struct K35AreaBlast_Multicast_SurvivorDamagedByAreaBlast final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            TargetHealthState;                                 // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35AreaBlast_Multicast_SurvivorDamagedByAreaBlast) == 0x000008, "Wrong alignment on K35AreaBlast_Multicast_SurvivorDamagedByAreaBlast");
static_assert(sizeof(K35AreaBlast_Multicast_SurvivorDamagedByAreaBlast) == 0x000010, "Wrong size on K35AreaBlast_Multicast_SurvivorDamagedByAreaBlast");
static_assert(offsetof(K35AreaBlast_Multicast_SurvivorDamagedByAreaBlast, Survivor) == 0x000000, "Member 'K35AreaBlast_Multicast_SurvivorDamagedByAreaBlast::Survivor' has a wrong offset!");
static_assert(offsetof(K35AreaBlast_Multicast_SurvivorDamagedByAreaBlast, TargetHealthState) == 0x000008, "Member 'K35AreaBlast_Multicast_SurvivorDamagedByAreaBlast::TargetHealthState' has a wrong offset!");

// Function TheK35.K35Decoy.Cosmetic_OnVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct K35Decoy_Cosmetic_OnVisibilityChanged final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35Decoy_Cosmetic_OnVisibilityChanged) == 0x000001, "Wrong alignment on K35Decoy_Cosmetic_OnVisibilityChanged");
static_assert(sizeof(K35Decoy_Cosmetic_OnVisibilityChanged) == 0x000001, "Wrong size on K35Decoy_Cosmetic_OnVisibilityChanged");
static_assert(offsetof(K35Decoy_Cosmetic_OnVisibilityChanged, IsVisible) == 0x000000, "Member 'K35Decoy_Cosmetic_OnVisibilityChanged::IsVisible' has a wrong offset!");

// Function TheK35.K35Decoy.Multicast_Spawn
// 0x0018 (0x0018 - 0x0000)
struct K35Decoy_Multicast_Spawn final
{
public:
	struct FVector                                SpawnLocation;                                     // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35Decoy_Multicast_Spawn) == 0x000008, "Wrong alignment on K35Decoy_Multicast_Spawn");
static_assert(sizeof(K35Decoy_Multicast_Spawn) == 0x000018, "Wrong size on K35Decoy_Multicast_Spawn");
static_assert(offsetof(K35Decoy_Multicast_Spawn, SpawnLocation) == 0x000000, "Member 'K35Decoy_Multicast_Spawn::SpawnLocation' has a wrong offset!");

// Function TheK35.K35Decoy.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K35Decoy_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35Decoy_OnKillerSet) == 0x000008, "Wrong alignment on K35Decoy_OnKillerSet");
static_assert(sizeof(K35Decoy_OnKillerSet) == 0x000008, "Wrong size on K35Decoy_OnKillerSet");
static_assert(offsetof(K35Decoy_OnKillerSet, Killer) == 0x000000, "Member 'K35Decoy_OnKillerSet::Killer' has a wrong offset!");

// Function TheK35.K35Decoy.OnPlayerOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct K35Decoy_OnPlayerOverlapBegin final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35Decoy_OnPlayerOverlapBegin) == 0x000008, "Wrong alignment on K35Decoy_OnPlayerOverlapBegin");
static_assert(sizeof(K35Decoy_OnPlayerOverlapBegin) == 0x000110, "Wrong size on K35Decoy_OnPlayerOverlapBegin");
static_assert(offsetof(K35Decoy_OnPlayerOverlapBegin, HitComponent) == 0x000000, "Member 'K35Decoy_OnPlayerOverlapBegin::HitComponent' has a wrong offset!");
static_assert(offsetof(K35Decoy_OnPlayerOverlapBegin, OtherActor) == 0x000008, "Member 'K35Decoy_OnPlayerOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(K35Decoy_OnPlayerOverlapBegin, OtherComponent) == 0x000010, "Member 'K35Decoy_OnPlayerOverlapBegin::OtherComponent' has a wrong offset!");
static_assert(offsetof(K35Decoy_OnPlayerOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'K35Decoy_OnPlayerOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K35Decoy_OnPlayerOverlapBegin, bFromSweep) == 0x00001C, "Member 'K35Decoy_OnPlayerOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(K35Decoy_OnPlayerOverlapBegin, SweepResult) == 0x000020, "Member 'K35Decoy_OnPlayerOverlapBegin::SweepResult' has a wrong offset!");

// Function TheK35.K35Decoy.OnPlayerOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct K35Decoy_OnPlayerOverlapEnd final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35Decoy_OnPlayerOverlapEnd) == 0x000008, "Wrong alignment on K35Decoy_OnPlayerOverlapEnd");
static_assert(sizeof(K35Decoy_OnPlayerOverlapEnd) == 0x000020, "Wrong size on K35Decoy_OnPlayerOverlapEnd");
static_assert(offsetof(K35Decoy_OnPlayerOverlapEnd, HitComponent) == 0x000000, "Member 'K35Decoy_OnPlayerOverlapEnd::HitComponent' has a wrong offset!");
static_assert(offsetof(K35Decoy_OnPlayerOverlapEnd, OtherActor) == 0x000008, "Member 'K35Decoy_OnPlayerOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(K35Decoy_OnPlayerOverlapEnd, OtherComponent) == 0x000010, "Member 'K35Decoy_OnPlayerOverlapEnd::OtherComponent' has a wrong offset!");
static_assert(offsetof(K35Decoy_OnPlayerOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'K35Decoy_OnPlayerOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function TheK35.K35Decoy.SetHuskVisibilityChecked
// 0x0001 (0x0001 - 0x0000)
struct K35Decoy_SetHuskVisibilityChecked final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35Decoy_SetHuskVisibilityChecked) == 0x000001, "Wrong alignment on K35Decoy_SetHuskVisibilityChecked");
static_assert(sizeof(K35Decoy_SetHuskVisibilityChecked) == 0x000001, "Wrong size on K35Decoy_SetHuskVisibilityChecked");
static_assert(offsetof(K35Decoy_SetHuskVisibilityChecked, IsVisible) == 0x000000, "Member 'K35Decoy_SetHuskVisibilityChecked::IsVisible' has a wrong offset!");

// Function TheK35.K35Decoy.IsLocalPlayerOverlapping
// 0x0001 (0x0001 - 0x0000)
struct K35Decoy_IsLocalPlayerOverlapping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35Decoy_IsLocalPlayerOverlapping) == 0x000001, "Wrong alignment on K35Decoy_IsLocalPlayerOverlapping");
static_assert(sizeof(K35Decoy_IsLocalPlayerOverlapping) == 0x000001, "Wrong size on K35Decoy_IsLocalPlayerOverlapping");
static_assert(offsetof(K35Decoy_IsLocalPlayerOverlapping, ReturnValue) == 0x000000, "Member 'K35Decoy_IsLocalPlayerOverlapping::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerAreaBlastTravelProjectile.Authority_OnEnvironmentCollisionComponentHit
// 0x0120 (0x0120 - 0x0000)
struct K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit) == 0x000008, "Wrong alignment on K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit");
static_assert(sizeof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit) == 0x000120, "Wrong size on K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit, HitComponent) == 0x000000, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit::HitComponent' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit, OtherActor) == 0x000008, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit::OtherActor' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit, OtherComp) == 0x000010, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit::OtherComp' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit, NormalImpulse) == 0x000018, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit, Hit) == 0x000030, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentHit::Hit' has a wrong offset!");

// Function TheK35.K35KillerAreaBlastTravelProjectile.Authority_OnEnvironmentCollisionComponentOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFromSweep;                                       // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin) == 0x000008, "Wrong alignment on K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin");
static_assert(sizeof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin) == 0x000110, "Wrong size on K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin, OverlappedComponent) == 0x000000, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin, OtherActor) == 0x000008, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin, OtherComp) == 0x000010, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin, IsFromSweep) == 0x00001C, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin::IsFromSweep' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin, SweepResult) == 0x000020, "Member 'K35KillerAreaBlastTravelProjectile_Authority_OnEnvironmentCollisionComponentOverlapBegin::SweepResult' has a wrong offset!");

// Function TheK35.K35KillerAreaBlastTravelProjectile.Cosmetic_OnProjectileHitEnvironment
// 0x0038 (0x0038 - 0x0000)
struct K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment final
{
public:
	struct FVector                                ImpactLocation;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ImpactNormal;                                      // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              SurfaceType;                                       // 0x0030(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment) == 0x000008, "Wrong alignment on K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment");
static_assert(sizeof(K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment) == 0x000038, "Wrong size on K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment, ImpactLocation) == 0x000000, "Member 'K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment::ImpactLocation' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment, ImpactNormal) == 0x000018, "Member 'K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment::ImpactNormal' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment, SurfaceType) == 0x000030, "Member 'K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitEnvironment::SurfaceType' has a wrong offset!");

// Function TheK35.K35KillerAreaBlastTravelProjectile.Cosmetic_OnProjectileHitSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitSurvivor final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HinderedLifetime;                                  // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitSurvivor) == 0x000008, "Wrong alignment on K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitSurvivor");
static_assert(sizeof(K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitSurvivor) == 0x000010, "Wrong size on K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitSurvivor");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitSurvivor, Survivor) == 0x000000, "Member 'K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitSurvivor::Survivor' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitSurvivor, HinderedLifetime) == 0x000008, "Member 'K35KillerAreaBlastTravelProjectile_Cosmetic_OnProjectileHitSurvivor::HinderedLifetime' has a wrong offset!");

// Function TheK35.K35KillerAreaBlastTravelProjectile.Multicast_OnProjectileReachedEnd
// 0x0018 (0x0018 - 0x0000)
struct K35KillerAreaBlastTravelProjectile_Multicast_OnProjectileReachedEnd final
{
public:
	struct FVector                                EndLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerAreaBlastTravelProjectile_Multicast_OnProjectileReachedEnd) == 0x000008, "Wrong alignment on K35KillerAreaBlastTravelProjectile_Multicast_OnProjectileReachedEnd");
static_assert(sizeof(K35KillerAreaBlastTravelProjectile_Multicast_OnProjectileReachedEnd) == 0x000018, "Wrong size on K35KillerAreaBlastTravelProjectile_Multicast_OnProjectileReachedEnd");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_Multicast_OnProjectileReachedEnd, EndLocation) == 0x000000, "Member 'K35KillerAreaBlastTravelProjectile_Multicast_OnProjectileReachedEnd::EndLocation' has a wrong offset!");

// Function TheK35.K35KillerAreaBlastTravelProjectile.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K35KillerAreaBlastTravelProjectile_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerAreaBlastTravelProjectile_OnKillerSet) == 0x000008, "Wrong alignment on K35KillerAreaBlastTravelProjectile_OnKillerSet");
static_assert(sizeof(K35KillerAreaBlastTravelProjectile_OnKillerSet) == 0x000008, "Wrong size on K35KillerAreaBlastTravelProjectile_OnKillerSet");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_OnKillerSet, Killer) == 0x000000, "Member 'K35KillerAreaBlastTravelProjectile_OnKillerSet::Killer' has a wrong offset!");

// Function TheK35.K35KillerAreaBlastTravelProjectile.OnSurvivorHitDetected
// 0x00F8 (0x00F8 - 0x0000)
struct K35KillerAreaBlastTravelProjectile_OnSurvivorHitDetected final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0008(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerAreaBlastTravelProjectile_OnSurvivorHitDetected) == 0x000008, "Wrong alignment on K35KillerAreaBlastTravelProjectile_OnSurvivorHitDetected");
static_assert(sizeof(K35KillerAreaBlastTravelProjectile_OnSurvivorHitDetected) == 0x0000F8, "Wrong size on K35KillerAreaBlastTravelProjectile_OnSurvivorHitDetected");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_OnSurvivorHitDetected, Component) == 0x000000, "Member 'K35KillerAreaBlastTravelProjectile_OnSurvivorHitDetected::Component' has a wrong offset!");
static_assert(offsetof(K35KillerAreaBlastTravelProjectile_OnSurvivorHitDetected, Hit) == 0x000008, "Member 'K35KillerAreaBlastTravelProjectile_OnSurvivorHitDetected::Hit' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Authority_OnSurvivorAdded
// 0x0010 (0x0010 - 0x0000)
struct K35KillerEffectTracker_Authority_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASlasherPlayer*                         Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Authority_OnSurvivorAdded) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Authority_OnSurvivorAdded");
static_assert(sizeof(K35KillerEffectTracker_Authority_OnSurvivorAdded) == 0x000010, "Wrong size on K35KillerEffectTracker_Authority_OnSurvivorAdded");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorAdded, Survivor) == 0x000000, "Member 'K35KillerEffectTracker_Authority_OnSurvivorAdded::Survivor' has a wrong offset!");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorAdded, Killer) == 0x000008, "Member 'K35KillerEffectTracker_Authority_OnSurvivorAdded::Killer' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Authority_OnSurvivorDowned
// 0x0040 (0x0040 - 0x0000)
struct K35KillerEffectTracker_Authority_OnSurvivorDowned final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Authority_OnSurvivorDowned) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Authority_OnSurvivorDowned");
static_assert(sizeof(K35KillerEffectTracker_Authority_OnSurvivorDowned) == 0x000040, "Wrong size on K35KillerEffectTracker_Authority_OnSurvivorDowned");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorDowned, GameEventType) == 0x000000, "Member 'K35KillerEffectTracker_Authority_OnSurvivorDowned::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorDowned, GameEventData) == 0x000010, "Member 'K35KillerEffectTracker_Authority_OnSurvivorDowned::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Authority_OnSurvivorEscaped
// 0x0040 (0x0040 - 0x0000)
struct K35KillerEffectTracker_Authority_OnSurvivorEscaped final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Authority_OnSurvivorEscaped) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Authority_OnSurvivorEscaped");
static_assert(sizeof(K35KillerEffectTracker_Authority_OnSurvivorEscaped) == 0x000040, "Wrong size on K35KillerEffectTracker_Authority_OnSurvivorEscaped");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorEscaped, GameEventType) == 0x000000, "Member 'K35KillerEffectTracker_Authority_OnSurvivorEscaped::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorEscaped, GameEventData) == 0x000010, "Member 'K35KillerEffectTracker_Authority_OnSurvivorEscaped::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Authority_OnSurvivorFinishedRepairingGenerator
// 0x0040 (0x0040 - 0x0000)
struct K35KillerEffectTracker_Authority_OnSurvivorFinishedRepairingGenerator final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Authority_OnSurvivorFinishedRepairingGenerator) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Authority_OnSurvivorFinishedRepairingGenerator");
static_assert(sizeof(K35KillerEffectTracker_Authority_OnSurvivorFinishedRepairingGenerator) == 0x000040, "Wrong size on K35KillerEffectTracker_Authority_OnSurvivorFinishedRepairingGenerator");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorFinishedRepairingGenerator, GameEventType) == 0x000000, "Member 'K35KillerEffectTracker_Authority_OnSurvivorFinishedRepairingGenerator::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorFinishedRepairingGenerator, GameEventData) == 0x000010, "Member 'K35KillerEffectTracker_Authority_OnSurvivorFinishedRepairingGenerator::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Authority_OnSurvivorInjuredByAreaBlast
// 0x0040 (0x0040 - 0x0000)
struct K35KillerEffectTracker_Authority_OnSurvivorInjuredByAreaBlast final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Authority_OnSurvivorInjuredByAreaBlast) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Authority_OnSurvivorInjuredByAreaBlast");
static_assert(sizeof(K35KillerEffectTracker_Authority_OnSurvivorInjuredByAreaBlast) == 0x000040, "Wrong size on K35KillerEffectTracker_Authority_OnSurvivorInjuredByAreaBlast");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorInjuredByAreaBlast, GameEventType) == 0x000000, "Member 'K35KillerEffectTracker_Authority_OnSurvivorInjuredByAreaBlast::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerEffectTracker_Authority_OnSurvivorInjuredByAreaBlast, GameEventData) == 0x000010, "Member 'K35KillerEffectTracker_Authority_OnSurvivorInjuredByAreaBlast::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Cosmetic_SurvivorGainedKillerEffect
// 0x0008 (0x0008 - 0x0000)
struct K35KillerEffectTracker_Cosmetic_SurvivorGainedKillerEffect final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Cosmetic_SurvivorGainedKillerEffect) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Cosmetic_SurvivorGainedKillerEffect");
static_assert(sizeof(K35KillerEffectTracker_Cosmetic_SurvivorGainedKillerEffect) == 0x000008, "Wrong size on K35KillerEffectTracker_Cosmetic_SurvivorGainedKillerEffect");
static_assert(offsetof(K35KillerEffectTracker_Cosmetic_SurvivorGainedKillerEffect, Survivor) == 0x000000, "Member 'K35KillerEffectTracker_Cosmetic_SurvivorGainedKillerEffect::Survivor' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Cosmetic_SurvivorKillerEffectIncreased
// 0x0008 (0x0008 - 0x0000)
struct K35KillerEffectTracker_Cosmetic_SurvivorKillerEffectIncreased final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Cosmetic_SurvivorKillerEffectIncreased) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Cosmetic_SurvivorKillerEffectIncreased");
static_assert(sizeof(K35KillerEffectTracker_Cosmetic_SurvivorKillerEffectIncreased) == 0x000008, "Wrong size on K35KillerEffectTracker_Cosmetic_SurvivorKillerEffectIncreased");
static_assert(offsetof(K35KillerEffectTracker_Cosmetic_SurvivorKillerEffectIncreased, Survivor) == 0x000000, "Member 'K35KillerEffectTracker_Cosmetic_SurvivorKillerEffectIncreased::Survivor' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Cosmetic_SurvivorLostKillerEffect
// 0x0008 (0x0008 - 0x0000)
struct K35KillerEffectTracker_Cosmetic_SurvivorLostKillerEffect final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Cosmetic_SurvivorLostKillerEffect) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Cosmetic_SurvivorLostKillerEffect");
static_assert(sizeof(K35KillerEffectTracker_Cosmetic_SurvivorLostKillerEffect) == 0x000008, "Wrong size on K35KillerEffectTracker_Cosmetic_SurvivorLostKillerEffect");
static_assert(offsetof(K35KillerEffectTracker_Cosmetic_SurvivorLostKillerEffect, Survivor) == 0x000000, "Member 'K35KillerEffectTracker_Cosmetic_SurvivorLostKillerEffect::Survivor' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Cosmetic_SurvivorStartsRemovingKillerEffect
// 0x0008 (0x0008 - 0x0000)
struct K35KillerEffectTracker_Cosmetic_SurvivorStartsRemovingKillerEffect final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Cosmetic_SurvivorStartsRemovingKillerEffect) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Cosmetic_SurvivorStartsRemovingKillerEffect");
static_assert(sizeof(K35KillerEffectTracker_Cosmetic_SurvivorStartsRemovingKillerEffect) == 0x000008, "Wrong size on K35KillerEffectTracker_Cosmetic_SurvivorStartsRemovingKillerEffect");
static_assert(offsetof(K35KillerEffectTracker_Cosmetic_SurvivorStartsRemovingKillerEffect, Survivor) == 0x000000, "Member 'K35KillerEffectTracker_Cosmetic_SurvivorStartsRemovingKillerEffect::Survivor' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.Cosmetic_SurvivorStopsRemovingKillerEffect
// 0x0008 (0x0008 - 0x0000)
struct K35KillerEffectTracker_Cosmetic_SurvivorStopsRemovingKillerEffect final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_Cosmetic_SurvivorStopsRemovingKillerEffect) == 0x000008, "Wrong alignment on K35KillerEffectTracker_Cosmetic_SurvivorStopsRemovingKillerEffect");
static_assert(sizeof(K35KillerEffectTracker_Cosmetic_SurvivorStopsRemovingKillerEffect) == 0x000008, "Wrong size on K35KillerEffectTracker_Cosmetic_SurvivorStopsRemovingKillerEffect");
static_assert(offsetof(K35KillerEffectTracker_Cosmetic_SurvivorStopsRemovingKillerEffect, Survivor) == 0x000000, "Member 'K35KillerEffectTracker_Cosmetic_SurvivorStopsRemovingKillerEffect::Survivor' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.OnRep_KillerEffectData
// 0x0010 (0x0010 - 0x0000)
struct K35KillerEffectTracker_OnRep_KillerEffectData final
{
public:
	TArray<struct FK35KillerEffectData>           OldKillerEffectData;                               // 0x0000(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerEffectTracker_OnRep_KillerEffectData) == 0x000008, "Wrong alignment on K35KillerEffectTracker_OnRep_KillerEffectData");
static_assert(sizeof(K35KillerEffectTracker_OnRep_KillerEffectData) == 0x000010, "Wrong size on K35KillerEffectTracker_OnRep_KillerEffectData");
static_assert(offsetof(K35KillerEffectTracker_OnRep_KillerEffectData, OldKillerEffectData) == 0x000000, "Member 'K35KillerEffectTracker_OnRep_KillerEffectData::OldKillerEffectData' has a wrong offset!");

// Function TheK35.K35KillerEffectTracker.GetKillerEffectRemovalProgressionForSurvivor
// 0x0010 (0x0010 - 0x0000)
struct K35KillerEffectTracker_GetKillerEffectRemovalProgressionForSurvivor final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35KillerEffectTracker_GetKillerEffectRemovalProgressionForSurvivor) == 0x000008, "Wrong alignment on K35KillerEffectTracker_GetKillerEffectRemovalProgressionForSurvivor");
static_assert(sizeof(K35KillerEffectTracker_GetKillerEffectRemovalProgressionForSurvivor) == 0x000010, "Wrong size on K35KillerEffectTracker_GetKillerEffectRemovalProgressionForSurvivor");
static_assert(offsetof(K35KillerEffectTracker_GetKillerEffectRemovalProgressionForSurvivor, Survivor) == 0x000000, "Member 'K35KillerEffectTracker_GetKillerEffectRemovalProgressionForSurvivor::Survivor' has a wrong offset!");
static_assert(offsetof(K35KillerEffectTracker_GetKillerEffectRemovalProgressionForSurvivor, ReturnValue) == 0x000008, "Member 'K35KillerEffectTracker_GetKillerEffectRemovalProgressionForSurvivor::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition.Authority_OnKillerTeleportPointSpawn
// 0x0040 (0x0040 - 0x0000)
struct K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Authority_OnKillerTeleportPointSpawn final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Authority_OnKillerTeleportPointSpawn) == 0x000008, "Wrong alignment on K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Authority_OnKillerTeleportPointSpawn");
static_assert(sizeof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Authority_OnKillerTeleportPointSpawn) == 0x000040, "Wrong size on K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Authority_OnKillerTeleportPointSpawn");
static_assert(offsetof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Authority_OnKillerTeleportPointSpawn, GameEventType) == 0x000000, "Member 'K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Authority_OnKillerTeleportPointSpawn::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Authority_OnKillerTeleportPointSpawn, GameEventData) == 0x000010, "Member 'K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Authority_OnKillerTeleportPointSpawn::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition.Cosmetic_OnCooldownComplete
// 0x0008 (0x0008 - 0x0000)
struct K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Cosmetic_OnCooldownComplete final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Cosmetic_OnCooldownComplete) == 0x000008, "Wrong alignment on K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Cosmetic_OnCooldownComplete");
static_assert(sizeof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Cosmetic_OnCooldownComplete) == 0x000008, "Wrong size on K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Cosmetic_OnCooldownComplete");
static_assert(offsetof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Cosmetic_OnCooldownComplete, Killer) == 0x000000, "Member 'K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_Cosmetic_OnCooldownComplete::Killer' has a wrong offset!");

// Function TheK35.K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_OnKillerSet) == 0x000008, "Wrong alignment on K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_OnKillerSet");
static_assert(sizeof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_OnKillerSet) == 0x000008, "Wrong size on K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_OnKillerSet");
static_assert(offsetof(K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_OnKillerSet, Killer) == 0x000000, "Member 'K35KillerShootAreaBlastTravelProjectileChargeableInteractionDefinition_OnKillerSet::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.Cosmetic_OnCancelledDestroyInteraction
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPoint_Cosmetic_OnCancelledDestroyInteraction final
{
public:
	class ADBDPlayer*                             CaughtSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_Cosmetic_OnCancelledDestroyInteraction) == 0x000008, "Wrong alignment on K35KillerTeleportPoint_Cosmetic_OnCancelledDestroyInteraction");
static_assert(sizeof(K35KillerTeleportPoint_Cosmetic_OnCancelledDestroyInteraction) == 0x000008, "Wrong size on K35KillerTeleportPoint_Cosmetic_OnCancelledDestroyInteraction");
static_assert(offsetof(K35KillerTeleportPoint_Cosmetic_OnCancelledDestroyInteraction, CaughtSurvivor) == 0x000000, "Member 'K35KillerTeleportPoint_Cosmetic_OnCancelledDestroyInteraction::CaughtSurvivor' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.Cosmetic_OnKillerTeleportPointStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_Cosmetic_OnKillerTeleportPointStateChanged final
{
public:
	EK35KillerTeleportPointState                  NewKillerTeleportPointState;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_Cosmetic_OnKillerTeleportPointStateChanged) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_Cosmetic_OnKillerTeleportPointStateChanged");
static_assert(sizeof(K35KillerTeleportPoint_Cosmetic_OnKillerTeleportPointStateChanged) == 0x000001, "Wrong size on K35KillerTeleportPoint_Cosmetic_OnKillerTeleportPointStateChanged");
static_assert(offsetof(K35KillerTeleportPoint_Cosmetic_OnKillerTeleportPointStateChanged, NewKillerTeleportPointState) == 0x000000, "Member 'K35KillerTeleportPoint_Cosmetic_OnKillerTeleportPointStateChanged::NewKillerTeleportPointState' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.Cosmetic_OnVisibilityChanged
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_Cosmetic_OnVisibilityChanged final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_Cosmetic_OnVisibilityChanged) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_Cosmetic_OnVisibilityChanged");
static_assert(sizeof(K35KillerTeleportPoint_Cosmetic_OnVisibilityChanged) == 0x000001, "Wrong size on K35KillerTeleportPoint_Cosmetic_OnVisibilityChanged");
static_assert(offsetof(K35KillerTeleportPoint_Cosmetic_OnVisibilityChanged, IsVisible) == 0x000000, "Member 'K35KillerTeleportPoint_Cosmetic_OnVisibilityChanged::IsVisible' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.Multicast_OnCancelledDestroyInteraction
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPoint_Multicast_OnCancelledDestroyInteraction final
{
public:
	class ADBDPlayer*                             CaughtSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_Multicast_OnCancelledDestroyInteraction) == 0x000008, "Wrong alignment on K35KillerTeleportPoint_Multicast_OnCancelledDestroyInteraction");
static_assert(sizeof(K35KillerTeleportPoint_Multicast_OnCancelledDestroyInteraction) == 0x000008, "Wrong size on K35KillerTeleportPoint_Multicast_OnCancelledDestroyInteraction");
static_assert(offsetof(K35KillerTeleportPoint_Multicast_OnCancelledDestroyInteraction, CaughtSurvivor) == 0x000000, "Member 'K35KillerTeleportPoint_Multicast_OnCancelledDestroyInteraction::CaughtSurvivor' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.OnDecoySpawn
// 0x0018 (0x0018 - 0x0000)
struct K35KillerTeleportPoint_OnDecoySpawn final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_OnDecoySpawn) == 0x000008, "Wrong alignment on K35KillerTeleportPoint_OnDecoySpawn");
static_assert(sizeof(K35KillerTeleportPoint_OnDecoySpawn) == 0x000018, "Wrong size on K35KillerTeleportPoint_OnDecoySpawn");
static_assert(offsetof(K35KillerTeleportPoint_OnDecoySpawn, Location) == 0x000000, "Member 'K35KillerTeleportPoint_OnDecoySpawn::Location' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPoint_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_OnKillerSet) == 0x000008, "Wrong alignment on K35KillerTeleportPoint_OnKillerSet");
static_assert(sizeof(K35KillerTeleportPoint_OnKillerSet) == 0x000008, "Wrong size on K35KillerTeleportPoint_OnKillerSet");
static_assert(offsetof(K35KillerTeleportPoint_OnKillerSet, Killer) == 0x000000, "Member 'K35KillerTeleportPoint_OnKillerSet::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.OnKillerTeleportPointStateChanged
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_OnKillerTeleportPointStateChanged final
{
public:
	EK35KillerTeleportPointState                  NewKillerTeleportPointState;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_OnKillerTeleportPointStateChanged) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_OnKillerTeleportPointStateChanged");
static_assert(sizeof(K35KillerTeleportPoint_OnKillerTeleportPointStateChanged) == 0x000001, "Wrong size on K35KillerTeleportPoint_OnKillerTeleportPointStateChanged");
static_assert(offsetof(K35KillerTeleportPoint_OnKillerTeleportPointStateChanged, NewKillerTeleportPointState) == 0x000000, "Member 'K35KillerTeleportPoint_OnKillerTeleportPointStateChanged::NewKillerTeleportPointState' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.OnPlayerOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct K35KillerTeleportPoint_OnPlayerOverlapBegin final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_OnPlayerOverlapBegin) == 0x000008, "Wrong alignment on K35KillerTeleportPoint_OnPlayerOverlapBegin");
static_assert(sizeof(K35KillerTeleportPoint_OnPlayerOverlapBegin) == 0x000110, "Wrong size on K35KillerTeleportPoint_OnPlayerOverlapBegin");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapBegin, HitComponent) == 0x000000, "Member 'K35KillerTeleportPoint_OnPlayerOverlapBegin::HitComponent' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapBegin, OtherActor) == 0x000008, "Member 'K35KillerTeleportPoint_OnPlayerOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapBegin, OtherComponent) == 0x000010, "Member 'K35KillerTeleportPoint_OnPlayerOverlapBegin::OtherComponent' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'K35KillerTeleportPoint_OnPlayerOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapBegin, bFromSweep) == 0x00001C, "Member 'K35KillerTeleportPoint_OnPlayerOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapBegin, SweepResult) == 0x000020, "Member 'K35KillerTeleportPoint_OnPlayerOverlapBegin::SweepResult' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.OnPlayerOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct K35KillerTeleportPoint_OnPlayerOverlapEnd final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComponent;                                    // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35KillerTeleportPoint_OnPlayerOverlapEnd) == 0x000008, "Wrong alignment on K35KillerTeleportPoint_OnPlayerOverlapEnd");
static_assert(sizeof(K35KillerTeleportPoint_OnPlayerOverlapEnd) == 0x000020, "Wrong size on K35KillerTeleportPoint_OnPlayerOverlapEnd");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapEnd, HitComponent) == 0x000000, "Member 'K35KillerTeleportPoint_OnPlayerOverlapEnd::HitComponent' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapEnd, OtherActor) == 0x000008, "Member 'K35KillerTeleportPoint_OnPlayerOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapEnd, OtherComponent) == 0x000010, "Member 'K35KillerTeleportPoint_OnPlayerOverlapEnd::OtherComponent' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPoint_OnPlayerOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'K35KillerTeleportPoint_OnPlayerOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.OnRep_IsAcquiredFromPool
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_OnRep_IsAcquiredFromPool final
{
public:
	bool                                          OldIsAcquiredFromPool;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_OnRep_IsAcquiredFromPool) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_OnRep_IsAcquiredFromPool");
static_assert(sizeof(K35KillerTeleportPoint_OnRep_IsAcquiredFromPool) == 0x000001, "Wrong size on K35KillerTeleportPoint_OnRep_IsAcquiredFromPool");
static_assert(offsetof(K35KillerTeleportPoint_OnRep_IsAcquiredFromPool, OldIsAcquiredFromPool) == 0x000000, "Member 'K35KillerTeleportPoint_OnRep_IsAcquiredFromPool::OldIsAcquiredFromPool' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.SetHuskVisibilityChecked
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_SetHuskVisibilityChecked final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_SetHuskVisibilityChecked) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_SetHuskVisibilityChecked");
static_assert(sizeof(K35KillerTeleportPoint_SetHuskVisibilityChecked) == 0x000001, "Wrong size on K35KillerTeleportPoint_SetHuskVisibilityChecked");
static_assert(offsetof(K35KillerTeleportPoint_SetHuskVisibilityChecked, IsVisible) == 0x000000, "Member 'K35KillerTeleportPoint_SetHuskVisibilityChecked::IsVisible' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.GetState
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_GetState final
{
public:
	EK35KillerTeleportPointState                  ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_GetState) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_GetState");
static_assert(sizeof(K35KillerTeleportPoint_GetState) == 0x000001, "Wrong size on K35KillerTeleportPoint_GetState");
static_assert(offsetof(K35KillerTeleportPoint_GetState, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPoint_GetState::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.IsKillerAbleToTeleportToThisPoint
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_IsKillerAbleToTeleportToThisPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_IsKillerAbleToTeleportToThisPoint) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_IsKillerAbleToTeleportToThisPoint");
static_assert(sizeof(K35KillerTeleportPoint_IsKillerAbleToTeleportToThisPoint) == 0x000001, "Wrong size on K35KillerTeleportPoint_IsKillerAbleToTeleportToThisPoint");
static_assert(offsetof(K35KillerTeleportPoint_IsKillerAbleToTeleportToThisPoint, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPoint_IsKillerAbleToTeleportToThisPoint::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.IsKillerTeleportingToThis
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_IsKillerTeleportingToThis final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_IsKillerTeleportingToThis) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_IsKillerTeleportingToThis");
static_assert(sizeof(K35KillerTeleportPoint_IsKillerTeleportingToThis) == 0x000001, "Wrong size on K35KillerTeleportPoint_IsKillerTeleportingToThis");
static_assert(offsetof(K35KillerTeleportPoint_IsKillerTeleportingToThis, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPoint_IsKillerTeleportingToThis::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.IsLocalPlayerOverlapping
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_IsLocalPlayerOverlapping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_IsLocalPlayerOverlapping) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_IsLocalPlayerOverlapping");
static_assert(sizeof(K35KillerTeleportPoint_IsLocalPlayerOverlapping) == 0x000001, "Wrong size on K35KillerTeleportPoint_IsLocalPlayerOverlapping");
static_assert(offsetof(K35KillerTeleportPoint_IsLocalPlayerOverlapping, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPoint_IsLocalPlayerOverlapping::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPoint.IsSurvivorAbleToDestroyHusk
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPoint_IsSurvivorAbleToDestroyHusk final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPoint_IsSurvivorAbleToDestroyHusk) == 0x000001, "Wrong alignment on K35KillerTeleportPoint_IsSurvivorAbleToDestroyHusk");
static_assert(sizeof(K35KillerTeleportPoint_IsSurvivorAbleToDestroyHusk) == 0x000001, "Wrong size on K35KillerTeleportPoint_IsSurvivorAbleToDestroyHusk");
static_assert(offsetof(K35KillerTeleportPoint_IsSurvivorAbleToDestroyHusk, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPoint_IsSurvivorAbleToDestroyHusk::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointAnimInstance.OnGameEventReceived
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportPointAnimInstance_OnGameEventReceived final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointAnimInstance_OnGameEventReceived) == 0x000008, "Wrong alignment on K35KillerTeleportPointAnimInstance_OnGameEventReceived");
static_assert(sizeof(K35KillerTeleportPointAnimInstance_OnGameEventReceived) == 0x000040, "Wrong size on K35KillerTeleportPointAnimInstance_OnGameEventReceived");
static_assert(offsetof(K35KillerTeleportPointAnimInstance_OnGameEventReceived, GameplayTag) == 0x000000, "Member 'K35KillerTeleportPointAnimInstance_OnGameEventReceived::GameplayTag' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointAnimInstance_OnGameEventReceived, GameEventData) == 0x000010, "Member 'K35KillerTeleportPointAnimInstance_OnGameEventReceived::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointOutlineStrategy.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointOutlineStrategy_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointOutlineStrategy_OnKillerSet) == 0x000008, "Wrong alignment on K35KillerTeleportPointOutlineStrategy_OnKillerSet");
static_assert(sizeof(K35KillerTeleportPointOutlineStrategy_OnKillerSet) == 0x000008, "Wrong size on K35KillerTeleportPointOutlineStrategy_OnKillerSet");
static_assert(offsetof(K35KillerTeleportPointOutlineStrategy_OnKillerSet, Killer) == 0x000000, "Member 'K35KillerTeleportPointOutlineStrategy_OnKillerSet::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointPool.Authority_OnInRangeChanged
// 0x0010 (0x0010 - 0x0000)
struct K35KillerTeleportPointPool_Authority_OnInRangeChanged final
{
public:
	bool                                          IsInRange;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          Survivor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointPool_Authority_OnInRangeChanged) == 0x000008, "Wrong alignment on K35KillerTeleportPointPool_Authority_OnInRangeChanged");
static_assert(sizeof(K35KillerTeleportPointPool_Authority_OnInRangeChanged) == 0x000010, "Wrong size on K35KillerTeleportPointPool_Authority_OnInRangeChanged");
static_assert(offsetof(K35KillerTeleportPointPool_Authority_OnInRangeChanged, IsInRange) == 0x000000, "Member 'K35KillerTeleportPointPool_Authority_OnInRangeChanged::IsInRange' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointPool_Authority_OnInRangeChanged, Survivor) == 0x000008, "Member 'K35KillerTeleportPointPool_Authority_OnInRangeChanged::Survivor' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointPool.Authority_OnSurvivorDamaged
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportPointPool_Authority_OnSurvivorDamaged final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointPool_Authority_OnSurvivorDamaged) == 0x000008, "Wrong alignment on K35KillerTeleportPointPool_Authority_OnSurvivorDamaged");
static_assert(sizeof(K35KillerTeleportPointPool_Authority_OnSurvivorDamaged) == 0x000040, "Wrong size on K35KillerTeleportPointPool_Authority_OnSurvivorDamaged");
static_assert(offsetof(K35KillerTeleportPointPool_Authority_OnSurvivorDamaged, GameEventType) == 0x000000, "Member 'K35KillerTeleportPointPool_Authority_OnSurvivorDamaged::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointPool_Authority_OnSurvivorDamaged, GameEventData) == 0x000010, "Member 'K35KillerTeleportPointPool_Authority_OnSurvivorDamaged::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointPool.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointPool_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointPool_OnKillerSet) == 0x000008, "Wrong alignment on K35KillerTeleportPointPool_OnKillerSet");
static_assert(sizeof(K35KillerTeleportPointPool_OnKillerSet) == 0x000008, "Wrong size on K35KillerTeleportPointPool_OnKillerSet");
static_assert(offsetof(K35KillerTeleportPointPool_OnKillerSet, Killer) == 0x000000, "Member 'K35KillerTeleportPointPool_OnKillerSet::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointPool.OnKillerTeleportPointAcquiredChanged
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPointPool_OnKillerTeleportPointAcquiredChanged final
{
public:
	bool                                          IsAcquired;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointPool_OnKillerTeleportPointAcquiredChanged) == 0x000001, "Wrong alignment on K35KillerTeleportPointPool_OnKillerTeleportPointAcquiredChanged");
static_assert(sizeof(K35KillerTeleportPointPool_OnKillerTeleportPointAcquiredChanged) == 0x000001, "Wrong size on K35KillerTeleportPointPool_OnKillerTeleportPointAcquiredChanged");
static_assert(offsetof(K35KillerTeleportPointPool_OnKillerTeleportPointAcquiredChanged, IsAcquired) == 0x000000, "Member 'K35KillerTeleportPointPool_OnKillerTeleportPointAcquiredChanged::IsAcquired' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointPool.OnKillerTeleportPointCreated
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointPool_OnKillerTeleportPointCreated final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointPool_OnKillerTeleportPointCreated) == 0x000008, "Wrong alignment on K35KillerTeleportPointPool_OnKillerTeleportPointCreated");
static_assert(sizeof(K35KillerTeleportPointPool_OnKillerTeleportPointCreated) == 0x000008, "Wrong size on K35KillerTeleportPointPool_OnKillerTeleportPointCreated");
static_assert(offsetof(K35KillerTeleportPointPool_OnKillerTeleportPointCreated, Actor) == 0x000000, "Member 'K35KillerTeleportPointPool_OnKillerTeleportPointCreated::Actor' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.Authority_OnSurvivorHookedChanged
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportPointSpawningManager_Authority_OnSurvivorHookedChanged final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_Authority_OnSurvivorHookedChanged) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_Authority_OnSurvivorHookedChanged");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_Authority_OnSurvivorHookedChanged) == 0x000040, "Wrong size on K35KillerTeleportPointSpawningManager_Authority_OnSurvivorHookedChanged");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Authority_OnSurvivorHookedChanged, GameEventType) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_Authority_OnSurvivorHookedChanged::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Authority_OnSurvivorHookedChanged, GameEventData) == 0x000010, "Member 'K35KillerTeleportPointSpawningManager_Authority_OnSurvivorHookedChanged::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.Cosmetic_OnChargeTimerReduced
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointSpawningManager_Cosmetic_OnChargeTimerReduced final
{
public:
	const class ASlasherPlayer*                   Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargeTimerReduced) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_Cosmetic_OnChargeTimerReduced");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargeTimerReduced) == 0x000008, "Wrong size on K35KillerTeleportPointSpawningManager_Cosmetic_OnChargeTimerReduced");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargeTimerReduced, Killer) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_Cosmetic_OnChargeTimerReduced::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.Cosmetic_OnChargingComplete
// 0x0010 (0x0010 - 0x0000)
struct K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingComplete final
{
public:
	const class ASlasherPlayer*                   Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSpawningPossible;                                // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingComplete) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingComplete");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingComplete) == 0x000010, "Wrong size on K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingComplete");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingComplete, Killer) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingComplete::Killer' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingComplete, IsSpawningPossible) == 0x000008, "Member 'K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingComplete::IsSpawningPossible' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.Cosmetic_OnChargingStarted
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingStarted final
{
public:
	const class ASlasherPlayer*                   Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingStarted) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingStarted");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingStarted) == 0x000008, "Wrong size on K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingStarted");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingStarted, Killer) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_Cosmetic_OnChargingStarted::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.Cosmetic_OnSpawnComplete
// 0x0010 (0x0010 - 0x0000)
struct K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawnComplete final
{
public:
	const class ASlasherPlayer*                   Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AK35KillerTeleportPoint*          AcquiredTeleportPoint;                             // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawnComplete) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawnComplete");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawnComplete) == 0x000010, "Wrong size on K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawnComplete");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawnComplete, Killer) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawnComplete::Killer' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawnComplete, AcquiredTeleportPoint) == 0x000008, "Member 'K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawnComplete::AcquiredTeleportPoint' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.Cosmetic_OnSpawningCancelled
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningCancelled final
{
public:
	const class ASlasherPlayer*                   Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningCancelled) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningCancelled");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningCancelled) == 0x000008, "Wrong size on K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningCancelled");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningCancelled, Killer) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningCancelled::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.Cosmetic_OnSpawningStarted
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningStarted final
{
public:
	const class ASlasherPlayer*                   Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningStarted) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningStarted");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningStarted) == 0x000008, "Wrong size on K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningStarted");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningStarted, Killer) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_Cosmetic_OnSpawningStarted::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.Multicast_OnSpawningComplete
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointSpawningManager_Multicast_OnSpawningComplete final
{
public:
	class AK35KillerTeleportPoint*                AcquiredTeleportPoint;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_Multicast_OnSpawningComplete) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_Multicast_OnSpawningComplete");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_Multicast_OnSpawningComplete) == 0x000008, "Wrong size on K35KillerTeleportPointSpawningManager_Multicast_OnSpawningComplete");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_Multicast_OnSpawningComplete, AcquiredTeleportPoint) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_Multicast_OnSpawningComplete::AcquiredTeleportPoint' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.OnBreakWallOrPallet
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportPointSpawningManager_OnBreakWallOrPallet final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_OnBreakWallOrPallet) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_OnBreakWallOrPallet");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_OnBreakWallOrPallet) == 0x000040, "Wrong size on K35KillerTeleportPointSpawningManager_OnBreakWallOrPallet");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnBreakWallOrPallet, GameEventType) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_OnBreakWallOrPallet::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnBreakWallOrPallet, GameEventData) == 0x000010, "Member 'K35KillerTeleportPointSpawningManager_OnBreakWallOrPallet::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.OnGeneratorFixed
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportPointSpawningManager_OnGeneratorFixed final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_OnGeneratorFixed) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_OnGeneratorFixed");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_OnGeneratorFixed) == 0x000040, "Wrong size on K35KillerTeleportPointSpawningManager_OnGeneratorFixed");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnGeneratorFixed, GameEventType) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_OnGeneratorFixed::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnGeneratorFixed, GameEventData) == 0x000010, "Member 'K35KillerTeleportPointSpawningManager_OnGeneratorFixed::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.OnKillerManuallyDestroyedKillerTeleportPoint
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportPointSpawningManager_OnKillerManuallyDestroyedKillerTeleportPoint final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_OnKillerManuallyDestroyedKillerTeleportPoint) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_OnKillerManuallyDestroyedKillerTeleportPoint");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_OnKillerManuallyDestroyedKillerTeleportPoint) == 0x000040, "Wrong size on K35KillerTeleportPointSpawningManager_OnKillerManuallyDestroyedKillerTeleportPoint");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnKillerManuallyDestroyedKillerTeleportPoint, GameEventType) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_OnKillerManuallyDestroyedKillerTeleportPoint::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnKillerManuallyDestroyedKillerTeleportPoint, GameEventData) == 0x000010, "Member 'K35KillerTeleportPointSpawningManager_OnKillerManuallyDestroyedKillerTeleportPoint::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointSpawningManager_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_OnKillerSet) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_OnKillerSet");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_OnKillerSet) == 0x000008, "Wrong size on K35KillerTeleportPointSpawningManager_OnKillerSet");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnKillerSet, Killer) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_OnKillerSet::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.OnSurvivorAfflictedWithKillerEffect
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportPointSpawningManager_OnSurvivorAfflictedWithKillerEffect final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_OnSurvivorAfflictedWithKillerEffect) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_OnSurvivorAfflictedWithKillerEffect");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_OnSurvivorAfflictedWithKillerEffect) == 0x000040, "Wrong size on K35KillerTeleportPointSpawningManager_OnSurvivorAfflictedWithKillerEffect");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnSurvivorAfflictedWithKillerEffect, GameEventType) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_OnSurvivorAfflictedWithKillerEffect::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnSurvivorAfflictedWithKillerEffect, GameEventData) == 0x000010, "Member 'K35KillerTeleportPointSpawningManager_OnSurvivorAfflictedWithKillerEffect::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.OnSurvivorInjuredWithKillerEffect
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportPointSpawningManager_OnSurvivorInjuredWithKillerEffect final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_OnSurvivorInjuredWithKillerEffect) == 0x000008, "Wrong alignment on K35KillerTeleportPointSpawningManager_OnSurvivorInjuredWithKillerEffect");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_OnSurvivorInjuredWithKillerEffect) == 0x000040, "Wrong size on K35KillerTeleportPointSpawningManager_OnSurvivorInjuredWithKillerEffect");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnSurvivorInjuredWithKillerEffect, GameEventType) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_OnSurvivorInjuredWithKillerEffect::GameEventType' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_OnSurvivorInjuredWithKillerEffect, GameEventData) == 0x000010, "Member 'K35KillerTeleportPointSpawningManager_OnSurvivorInjuredWithKillerEffect::GameEventData' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.GetChargeTimerProgress
// 0x0004 (0x0004 - 0x0000)
struct K35KillerTeleportPointSpawningManager_GetChargeTimerProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_GetChargeTimerProgress) == 0x000004, "Wrong alignment on K35KillerTeleportPointSpawningManager_GetChargeTimerProgress");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_GetChargeTimerProgress) == 0x000004, "Wrong size on K35KillerTeleportPointSpawningManager_GetChargeTimerProgress");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_GetChargeTimerProgress, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_GetChargeTimerProgress::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.GetSpawnTimerProgress
// 0x0004 (0x0004 - 0x0000)
struct K35KillerTeleportPointSpawningManager_GetSpawnTimerProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_GetSpawnTimerProgress) == 0x000004, "Wrong alignment on K35KillerTeleportPointSpawningManager_GetSpawnTimerProgress");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_GetSpawnTimerProgress) == 0x000004, "Wrong size on K35KillerTeleportPointSpawningManager_GetSpawnTimerProgress");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_GetSpawnTimerProgress, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_GetSpawnTimerProgress::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.IsAbleToSpawnKillerTeleportPoint
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPointSpawningManager_IsAbleToSpawnKillerTeleportPoint final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_IsAbleToSpawnKillerTeleportPoint) == 0x000001, "Wrong alignment on K35KillerTeleportPointSpawningManager_IsAbleToSpawnKillerTeleportPoint");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_IsAbleToSpawnKillerTeleportPoint) == 0x000001, "Wrong size on K35KillerTeleportPointSpawningManager_IsAbleToSpawnKillerTeleportPoint");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_IsAbleToSpawnKillerTeleportPoint, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_IsAbleToSpawnKillerTeleportPoint::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.IsChargeTimerActive
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPointSpawningManager_IsChargeTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_IsChargeTimerActive) == 0x000001, "Wrong alignment on K35KillerTeleportPointSpawningManager_IsChargeTimerActive");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_IsChargeTimerActive) == 0x000001, "Wrong size on K35KillerTeleportPointSpawningManager_IsChargeTimerActive");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_IsChargeTimerActive, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_IsChargeTimerActive::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointSpawningManager.IsSpawnTimerActive
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPointSpawningManager_IsSpawnTimerActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointSpawningManager_IsSpawnTimerActive) == 0x000001, "Wrong alignment on K35KillerTeleportPointSpawningManager_IsSpawnTimerActive");
static_assert(sizeof(K35KillerTeleportPointSpawningManager_IsSpawnTimerActive) == 0x000001, "Wrong size on K35KillerTeleportPointSpawningManager_IsSpawnTimerActive");
static_assert(offsetof(K35KillerTeleportPointSpawningManager_IsSpawnTimerActive, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPointSpawningManager_IsSpawnTimerActive::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointTargetingComponent.Cosmetic_Local_NewKillerKillerTeleportPointTargeted
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointTargetingComponent_Cosmetic_Local_NewKillerKillerTeleportPointTargeted final
{
public:
	class AK35KillerTeleportPoint*                NewTarget;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointTargetingComponent_Cosmetic_Local_NewKillerKillerTeleportPointTargeted) == 0x000008, "Wrong alignment on K35KillerTeleportPointTargetingComponent_Cosmetic_Local_NewKillerKillerTeleportPointTargeted");
static_assert(sizeof(K35KillerTeleportPointTargetingComponent_Cosmetic_Local_NewKillerKillerTeleportPointTargeted) == 0x000008, "Wrong size on K35KillerTeleportPointTargetingComponent_Cosmetic_Local_NewKillerKillerTeleportPointTargeted");
static_assert(offsetof(K35KillerTeleportPointTargetingComponent_Cosmetic_Local_NewKillerKillerTeleportPointTargeted, NewTarget) == 0x000000, "Member 'K35KillerTeleportPointTargetingComponent_Cosmetic_Local_NewKillerKillerTeleportPointTargeted::NewTarget' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointTargetingComponent.GetTarget
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportPointTargetingComponent_GetTarget final
{
public:
	class AK35KillerTeleportPoint*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointTargetingComponent_GetTarget) == 0x000008, "Wrong alignment on K35KillerTeleportPointTargetingComponent_GetTarget");
static_assert(sizeof(K35KillerTeleportPointTargetingComponent_GetTarget) == 0x000008, "Wrong size on K35KillerTeleportPointTargetingComponent_GetTarget");
static_assert(offsetof(K35KillerTeleportPointTargetingComponent_GetTarget, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPointTargetingComponent_GetTarget::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointTargetingComponent.HasTarget
// 0x0001 (0x0001 - 0x0000)
struct K35KillerTeleportPointTargetingComponent_HasTarget final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointTargetingComponent_HasTarget) == 0x000001, "Wrong alignment on K35KillerTeleportPointTargetingComponent_HasTarget");
static_assert(sizeof(K35KillerTeleportPointTargetingComponent_HasTarget) == 0x000001, "Wrong size on K35KillerTeleportPointTargetingComponent_HasTarget");
static_assert(offsetof(K35KillerTeleportPointTargetingComponent_HasTarget, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPointTargetingComponent_HasTarget::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointTargetingIndicator.Cosmetic_OnSettingsChanged
// 0x0070 (0x0070 - 0x0000)
struct K35KillerTeleportPointTargetingIndicator_Cosmetic_OnSettingsChanged final
{
public:
	struct FK35KillerTeleportPointTargetIndicatorSettings PreviousSettings;                                  // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FK35KillerTeleportPointTargetIndicatorSettings Settings;                                          // 0x0038(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointTargetingIndicator_Cosmetic_OnSettingsChanged) == 0x000008, "Wrong alignment on K35KillerTeleportPointTargetingIndicator_Cosmetic_OnSettingsChanged");
static_assert(sizeof(K35KillerTeleportPointTargetingIndicator_Cosmetic_OnSettingsChanged) == 0x000070, "Wrong size on K35KillerTeleportPointTargetingIndicator_Cosmetic_OnSettingsChanged");
static_assert(offsetof(K35KillerTeleportPointTargetingIndicator_Cosmetic_OnSettingsChanged, PreviousSettings) == 0x000000, "Member 'K35KillerTeleportPointTargetingIndicator_Cosmetic_OnSettingsChanged::PreviousSettings' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportPointTargetingIndicator_Cosmetic_OnSettingsChanged, Settings) == 0x000038, "Member 'K35KillerTeleportPointTargetingIndicator_Cosmetic_OnSettingsChanged::Settings' has a wrong offset!");

// Function TheK35.K35KillerTeleportPointTargetingIndicator.GetSettings
// 0x0038 (0x0038 - 0x0000)
struct K35KillerTeleportPointTargetingIndicator_GetSettings final
{
public:
	struct FK35KillerTeleportPointTargetIndicatorSettings ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportPointTargetingIndicator_GetSettings) == 0x000008, "Wrong alignment on K35KillerTeleportPointTargetingIndicator_GetSettings");
static_assert(sizeof(K35KillerTeleportPointTargetingIndicator_GetSettings) == 0x000038, "Wrong size on K35KillerTeleportPointTargetingIndicator_GetSettings");
static_assert(offsetof(K35KillerTeleportPointTargetingIndicator_GetSettings, ReturnValue) == 0x000000, "Member 'K35KillerTeleportPointTargetingIndicator_GetSettings::ReturnValue' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.Cosmetic_DisableTeleportVignette
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_DisableTeleportVignette final
{
public:
	class ADBDPlayer*                             Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_DisableTeleportVignette) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_DisableTeleportVignette");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_DisableTeleportVignette) == 0x000008, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_DisableTeleportVignette");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_DisableTeleportVignette, Killer) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_DisableTeleportVignette::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.Cosmetic_EnableTeleportVignette
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_EnableTeleportVignette final
{
public:
	class ADBDPlayer*                             Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_EnableTeleportVignette) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_EnableTeleportVignette");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_EnableTeleportVignette) == 0x000008, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_EnableTeleportVignette");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_EnableTeleportVignette, Killer) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_EnableTeleportVignette::Killer' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.Cosmetic_OnSurvivorScream
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnSurvivorScream final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnSurvivorScream) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnSurvivorScream");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnSurvivorScream) == 0x000008, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnSurvivorScream");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnSurvivorScream, Survivor) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnSurvivorScream::Survivor' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.Cosmetic_OnTeleportEnd
// 0x0018 (0x0018 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportEnd final
{
public:
	struct FVector                                TeleportEndLocation;                               // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportEnd) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportEnd");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportEnd) == 0x000018, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportEnd");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportEnd, TeleportEndLocation) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportEnd::TeleportEndLocation' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.Cosmetic_OnTeleportStart
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart final
{
public:
	struct FVector                                TeleportStartLocation;                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportEndLocation;                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class AK35KillerTeleportPoint*          TeleportPoint;                                     // 0x0030(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACamperPlayer*                    InteractingSurvivor;                               // 0x0038(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart) == 0x000040, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart, TeleportStartLocation) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart::TeleportStartLocation' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart, TeleportEndLocation) == 0x000018, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart::TeleportEndLocation' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart, TeleportPoint) == 0x000030, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart::TeleportPoint' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart, InteractingSurvivor) == 0x000038, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Cosmetic_OnTeleportStart::InteractingSurvivor' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.Multicast_OnTeleportEnded
// 0x0020 (0x0020 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportEnded final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportEndLocation;                               // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportEnded) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportEnded");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportEnded) == 0x000020, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportEnded");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportEnded, Player) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportEnded::Player' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportEnded, TeleportEndLocation) == 0x000008, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportEnded::TeleportEndLocation' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.Multicast_OnTeleportStarted
// 0x0040 (0x0040 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportStartLocation;                             // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportEndLocation;                               // 0x0020(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK35KillerTeleportPoint*                TargetTeleportPoint;                               // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted) == 0x000040, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted, Player) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted::Player' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted, TeleportStartLocation) == 0x000008, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted::TeleportStartLocation' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted, TeleportEndLocation) == 0x000020, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted::TeleportEndLocation' has a wrong offset!");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted, TargetTeleportPoint) == 0x000038, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_OnTeleportStarted::TargetTeleportPoint' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.Multicast_SetTeleportPoint
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_SetTeleportPoint final
{
public:
	class AK35KillerTeleportPoint*                KillerTeleportPoint;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_SetTeleportPoint) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_SetTeleportPoint");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_SetTeleportPoint) == 0x000008, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_SetTeleportPoint");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_SetTeleportPoint, KillerTeleportPoint) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Multicast_SetTeleportPoint::KillerTeleportPoint' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.OnKillerCollisionIgnoreLingerComplete
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnKillerCollisionIgnoreLingerComplete final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnKillerCollisionIgnoreLingerComplete) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnKillerCollisionIgnoreLingerComplete");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnKillerCollisionIgnoreLingerComplete) == 0x000008, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnKillerCollisionIgnoreLingerComplete");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnKillerCollisionIgnoreLingerComplete, Player) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnKillerCollisionIgnoreLingerComplete::Player' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.OnTeleportationComplete
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnTeleportationComplete final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnTeleportationComplete) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnTeleportationComplete");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnTeleportationComplete) == 0x000008, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnTeleportationComplete");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnTeleportationComplete, Player) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_OnTeleportationComplete::Player' has a wrong offset!");

// Function TheK35.K35KillerTeleportToKillerTeleportPointInteractionDefinition.Server_SetTeleportPoint
// 0x0008 (0x0008 - 0x0000)
struct K35KillerTeleportToKillerTeleportPointInteractionDefinition_Server_SetTeleportPoint final
{
public:
	class AK35KillerTeleportPoint*                KillerTeleportPoint;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Server_SetTeleportPoint) == 0x000008, "Wrong alignment on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Server_SetTeleportPoint");
static_assert(sizeof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Server_SetTeleportPoint) == 0x000008, "Wrong size on K35KillerTeleportToKillerTeleportPointInteractionDefinition_Server_SetTeleportPoint");
static_assert(offsetof(K35KillerTeleportToKillerTeleportPointInteractionDefinition_Server_SetTeleportPoint, KillerTeleportPoint) == 0x000000, "Member 'K35KillerTeleportToKillerTeleportPointInteractionDefinition_Server_SetTeleportPoint::KillerTeleportPoint' has a wrong offset!");

// Function TheK35.K35NeckWormAnimInstance.OnGameEventReceived
// 0x0040 (0x0040 - 0x0000)
struct K35NeckWormAnimInstance_OnGameEventReceived final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35NeckWormAnimInstance_OnGameEventReceived) == 0x000008, "Wrong alignment on K35NeckWormAnimInstance_OnGameEventReceived");
static_assert(sizeof(K35NeckWormAnimInstance_OnGameEventReceived) == 0x000040, "Wrong size on K35NeckWormAnimInstance_OnGameEventReceived");
static_assert(offsetof(K35NeckWormAnimInstance_OnGameEventReceived, GameplayTag) == 0x000000, "Member 'K35NeckWormAnimInstance_OnGameEventReceived::GameplayTag' has a wrong offset!");
static_assert(offsetof(K35NeckWormAnimInstance_OnGameEventReceived, GameEventData) == 0x000010, "Member 'K35NeckWormAnimInstance_OnGameEventReceived::GameEventData' has a wrong offset!");

// Function TheK35.K35NeckWormAnimInstance.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct K35NeckWormAnimInstance_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35NeckWormAnimInstance_OnKillerSet) == 0x000008, "Wrong alignment on K35NeckWormAnimInstance_OnKillerSet");
static_assert(sizeof(K35NeckWormAnimInstance_OnKillerSet) == 0x000008, "Wrong size on K35NeckWormAnimInstance_OnKillerSet");
static_assert(offsetof(K35NeckWormAnimInstance_OnKillerSet, Killer) == 0x000000, "Member 'K35NeckWormAnimInstance_OnKillerSet::Killer' has a wrong offset!");

// Function TheK35.K35Power.OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct K35Power_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35Power_OnSurvivorAdded) == 0x000008, "Wrong alignment on K35Power_OnSurvivorAdded");
static_assert(sizeof(K35Power_OnSurvivorAdded) == 0x000008, "Wrong size on K35Power_OnSurvivorAdded");
static_assert(offsetof(K35Power_OnSurvivorAdded, Survivor) == 0x000000, "Member 'K35Power_OnSurvivorAdded::Survivor' has a wrong offset!");

// Function TheK35.K35SurvivorAnimInstance.OnGameEventReceived
// 0x0040 (0x0040 - 0x0000)
struct K35SurvivorAnimInstance_OnGameEventReceived final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35SurvivorAnimInstance_OnGameEventReceived) == 0x000008, "Wrong alignment on K35SurvivorAnimInstance_OnGameEventReceived");
static_assert(sizeof(K35SurvivorAnimInstance_OnGameEventReceived) == 0x000040, "Wrong size on K35SurvivorAnimInstance_OnGameEventReceived");
static_assert(offsetof(K35SurvivorAnimInstance_OnGameEventReceived, GameplayTag) == 0x000000, "Member 'K35SurvivorAnimInstance_OnGameEventReceived::GameplayTag' has a wrong offset!");
static_assert(offsetof(K35SurvivorAnimInstance_OnGameEventReceived, GameEventData) == 0x000010, "Member 'K35SurvivorAnimInstance_OnGameEventReceived::GameEventData' has a wrong offset!");

// Function TheK35.K35SurvivorCosmeticHelperActor.OnPlayerLeftGame
// 0x0040 (0x0040 - 0x0000)
struct K35SurvivorCosmeticHelperActor_OnPlayerLeftGame final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35SurvivorCosmeticHelperActor_OnPlayerLeftGame) == 0x000008, "Wrong alignment on K35SurvivorCosmeticHelperActor_OnPlayerLeftGame");
static_assert(sizeof(K35SurvivorCosmeticHelperActor_OnPlayerLeftGame) == 0x000040, "Wrong size on K35SurvivorCosmeticHelperActor_OnPlayerLeftGame");
static_assert(offsetof(K35SurvivorCosmeticHelperActor_OnPlayerLeftGame, GameplayTag) == 0x000000, "Member 'K35SurvivorCosmeticHelperActor_OnPlayerLeftGame::GameplayTag' has a wrong offset!");
static_assert(offsetof(K35SurvivorCosmeticHelperActor_OnPlayerLeftGame, GameEventData) == 0x000010, "Member 'K35SurvivorCosmeticHelperActor_OnPlayerLeftGame::GameEventData' has a wrong offset!");

// Function TheK35.K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition.Cosmetic_OnInteractionAvailable
// 0x0008 (0x0008 - 0x0000)
struct K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionAvailable final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionAvailable) == 0x000008, "Wrong alignment on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionAvailable");
static_assert(sizeof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionAvailable) == 0x000008, "Wrong size on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionAvailable");
static_assert(offsetof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionAvailable, Survivor) == 0x000000, "Member 'K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionAvailable::Survivor' has a wrong offset!");

// Function TheK35.K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition.Cosmetic_OnInteractionNoLongerAvailable
// 0x0008 (0x0008 - 0x0000)
struct K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionNoLongerAvailable final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionNoLongerAvailable) == 0x000008, "Wrong alignment on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionNoLongerAvailable");
static_assert(sizeof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionNoLongerAvailable) == 0x000008, "Wrong size on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionNoLongerAvailable");
static_assert(offsetof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionNoLongerAvailable, Survivor) == 0x000000, "Member 'K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnInteractionNoLongerAvailable::Survivor' has a wrong offset!");

// Function TheK35.K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition.Cosmetic_OnSurvivorCancelledInteraction
// 0x0008 (0x0008 - 0x0000)
struct K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteraction final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteraction) == 0x000008, "Wrong alignment on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteraction");
static_assert(sizeof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteraction) == 0x000008, "Wrong size on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteraction");
static_assert(offsetof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteraction, Survivor) == 0x000000, "Member 'K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteraction::Survivor' has a wrong offset!");

// Function TheK35.K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition.Cosmetic_OnSurvivorCancelledInteractionDuringGracePeriod
// 0x0008 (0x0008 - 0x0000)
struct K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteractionDuringGracePeriod final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteractionDuringGracePeriod) == 0x000008, "Wrong alignment on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteractionDuringGracePeriod");
static_assert(sizeof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteractionDuringGracePeriod) == 0x000008, "Wrong size on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteractionDuringGracePeriod");
static_assert(offsetof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteractionDuringGracePeriod, Survivor) == 0x000000, "Member 'K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorCancelledInteractionDuringGracePeriod::Survivor' has a wrong offset!");

// Function TheK35.K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition.Cosmetic_OnSurvivorFinishedInteraction
// 0x0008 (0x0008 - 0x0000)
struct K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorFinishedInteraction final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorFinishedInteraction) == 0x000008, "Wrong alignment on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorFinishedInteraction");
static_assert(sizeof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorFinishedInteraction) == 0x000008, "Wrong size on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorFinishedInteraction");
static_assert(offsetof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorFinishedInteraction, Survivor) == 0x000000, "Member 'K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorFinishedInteraction::Survivor' has a wrong offset!");

// Function TheK35.K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition.Cosmetic_OnSurvivorStartInteraction
// 0x0008 (0x0008 - 0x0000)
struct K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorStartInteraction final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorStartInteraction) == 0x000008, "Wrong alignment on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorStartInteraction");
static_assert(sizeof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorStartInteraction) == 0x000008, "Wrong size on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorStartInteraction");
static_assert(offsetof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorStartInteraction, Survivor) == 0x000000, "Member 'K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_Cosmetic_OnSurvivorStartInteraction::Survivor' has a wrong offset!");

// Function TheK35.K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition.GetOwningKillerTeleportPoint
// 0x0008 (0x0008 - 0x0000)
struct K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_GetOwningKillerTeleportPoint final
{
public:
	class AK35KillerTeleportPoint*                ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_GetOwningKillerTeleportPoint) == 0x000008, "Wrong alignment on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_GetOwningKillerTeleportPoint");
static_assert(sizeof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_GetOwningKillerTeleportPoint) == 0x000008, "Wrong size on K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_GetOwningKillerTeleportPoint");
static_assert(offsetof(K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_GetOwningKillerTeleportPoint, ReturnValue) == 0x000000, "Member 'K35SurvivorDestroyKillerTeleportPointChargeableInteractionDefinition_GetOwningKillerTeleportPoint::ReturnValue' has a wrong offset!");

// Function TheK35.K35Utilities.GetK35Power
// 0x0010 (0x0010 - 0x0000)
struct K35Utilities_GetK35Power final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AK35Power*                              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K35Utilities_GetK35Power) == 0x000008, "Wrong alignment on K35Utilities_GetK35Power");
static_assert(sizeof(K35Utilities_GetK35Power) == 0x000010, "Wrong size on K35Utilities_GetK35Power");
static_assert(offsetof(K35Utilities_GetK35Power, WorldContextObject) == 0x000000, "Member 'K35Utilities_GetK35Power::WorldContextObject' has a wrong offset!");
static_assert(offsetof(K35Utilities_GetK35Power, ReturnValue) == 0x000008, "Member 'K35Utilities_GetK35Power::ReturnValue' has a wrong offset!");

// Function TheK35.K35Utilities.IsSurvivorAbleToBeAffectedByPower
// 0x0018 (0x0018 - 0x0000)
struct K35Utilities_IsSurvivorAbleToBeAffectedByPower final
{
public:
	const class ACamperPlayer*                    Survivor;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ASlasherPlayer*                   Killer;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K35Utilities_IsSurvivorAbleToBeAffectedByPower) == 0x000008, "Wrong alignment on K35Utilities_IsSurvivorAbleToBeAffectedByPower");
static_assert(sizeof(K35Utilities_IsSurvivorAbleToBeAffectedByPower) == 0x000018, "Wrong size on K35Utilities_IsSurvivorAbleToBeAffectedByPower");
static_assert(offsetof(K35Utilities_IsSurvivorAbleToBeAffectedByPower, Survivor) == 0x000000, "Member 'K35Utilities_IsSurvivorAbleToBeAffectedByPower::Survivor' has a wrong offset!");
static_assert(offsetof(K35Utilities_IsSurvivorAbleToBeAffectedByPower, Killer) == 0x000008, "Member 'K35Utilities_IsSurvivorAbleToBeAffectedByPower::Killer' has a wrong offset!");
static_assert(offsetof(K35Utilities_IsSurvivorAbleToBeAffectedByPower, ReturnValue) == 0x000010, "Member 'K35Utilities_IsSurvivorAbleToBeAffectedByPower::ReturnValue' has a wrong offset!");

}

