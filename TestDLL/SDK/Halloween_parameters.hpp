#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Halloween

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Halloween_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Halloween.DepositVoidEnergyTierQEEvaluator.OnVoidEnergyDeposited
// 0x0040 (0x0040 - 0x0000)
struct DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited) == 0x000008, "Wrong alignment on DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited");
static_assert(sizeof(DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited) == 0x000040, "Wrong size on DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited");
static_assert(offsetof(DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited, GameEventType) == 0x000000, "Member 'DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited::GameEventType' has a wrong offset!");
static_assert(offsetof(DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited, GameEventData) == 0x000010, "Member 'DepositVoidEnergyTierQEEvaluator_OnVoidEnergyDeposited::GameEventData' has a wrong offset!");

// Function Halloween.FloatingVoidEnergyOrb.Authority_OnPlayerEnterZone
// 0x0008 (0x0008 - 0x0000)
struct FloatingVoidEnergyOrb_Authority_OnPlayerEnterZone final
{
public:
	class ADBDPlayer*                             PlayerToTravelTo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatingVoidEnergyOrb_Authority_OnPlayerEnterZone) == 0x000008, "Wrong alignment on FloatingVoidEnergyOrb_Authority_OnPlayerEnterZone");
static_assert(sizeof(FloatingVoidEnergyOrb_Authority_OnPlayerEnterZone) == 0x000008, "Wrong size on FloatingVoidEnergyOrb_Authority_OnPlayerEnterZone");
static_assert(offsetof(FloatingVoidEnergyOrb_Authority_OnPlayerEnterZone, PlayerToTravelTo) == 0x000000, "Member 'FloatingVoidEnergyOrb_Authority_OnPlayerEnterZone::PlayerToTravelTo' has a wrong offset!");

// Function Halloween.FloatingVoidEnergyOrb.Authority_OnPlayerExitZone
// 0x0008 (0x0008 - 0x0000)
struct FloatingVoidEnergyOrb_Authority_OnPlayerExitZone final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatingVoidEnergyOrb_Authority_OnPlayerExitZone) == 0x000008, "Wrong alignment on FloatingVoidEnergyOrb_Authority_OnPlayerExitZone");
static_assert(sizeof(FloatingVoidEnergyOrb_Authority_OnPlayerExitZone) == 0x000008, "Wrong size on FloatingVoidEnergyOrb_Authority_OnPlayerExitZone");
static_assert(offsetof(FloatingVoidEnergyOrb_Authority_OnPlayerExitZone, Player) == 0x000000, "Member 'FloatingVoidEnergyOrb_Authority_OnPlayerExitZone::Player' has a wrong offset!");

// Function Halloween.FloatingVoidEnergyOrb.Multicast_StartTravelToPlayer
// 0x0008 (0x0008 - 0x0000)
struct FloatingVoidEnergyOrb_Multicast_StartTravelToPlayer final
{
public:
	class ADBDPlayer*                             PlayerToTravelTo;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatingVoidEnergyOrb_Multicast_StartTravelToPlayer) == 0x000008, "Wrong alignment on FloatingVoidEnergyOrb_Multicast_StartTravelToPlayer");
static_assert(sizeof(FloatingVoidEnergyOrb_Multicast_StartTravelToPlayer) == 0x000008, "Wrong size on FloatingVoidEnergyOrb_Multicast_StartTravelToPlayer");
static_assert(offsetof(FloatingVoidEnergyOrb_Multicast_StartTravelToPlayer, PlayerToTravelTo) == 0x000000, "Member 'FloatingVoidEnergyOrb_Multicast_StartTravelToPlayer::PlayerToTravelTo' has a wrong offset!");

// DelegateFunction Halloween.FloatingVoidEnergyOrb.OnPlayerInteract__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct FloatingVoidEnergyOrb_OnPlayerInteract__DelegateSignature final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FloatingVoidEnergyOrb_OnPlayerInteract__DelegateSignature) == 0x000008, "Wrong alignment on FloatingVoidEnergyOrb_OnPlayerInteract__DelegateSignature");
static_assert(sizeof(FloatingVoidEnergyOrb_OnPlayerInteract__DelegateSignature) == 0x000008, "Wrong size on FloatingVoidEnergyOrb_OnPlayerInteract__DelegateSignature");
static_assert(offsetof(FloatingVoidEnergyOrb_OnPlayerInteract__DelegateSignature, Player) == 0x000000, "Member 'FloatingVoidEnergyOrb_OnPlayerInteract__DelegateSignature::Player' has a wrong offset!");

// Function Halloween.HalloweenCentrifugeAnimInstance.OnBlendValueChanged
// 0x0004 (0x0004 - 0x0000)
struct HalloweenCentrifugeAnimInstance_OnBlendValueChanged final
{
public:
	float                                         blendValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenCentrifugeAnimInstance_OnBlendValueChanged) == 0x000004, "Wrong alignment on HalloweenCentrifugeAnimInstance_OnBlendValueChanged");
static_assert(sizeof(HalloweenCentrifugeAnimInstance_OnBlendValueChanged) == 0x000004, "Wrong size on HalloweenCentrifugeAnimInstance_OnBlendValueChanged");
static_assert(offsetof(HalloweenCentrifugeAnimInstance_OnBlendValueChanged, blendValue) == 0x000000, "Member 'HalloweenCentrifugeAnimInstance_OnBlendValueChanged::blendValue' has a wrong offset!");

// Function Halloween.HalloweenCentrifugeAnimInstance.OnEnergySpawned
// 0x0008 (0x0008 - 0x0000)
struct HalloweenCentrifugeAnimInstance_OnEnergySpawned final
{
public:
	int32                                         PreviousEnergy;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentEnergy;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenCentrifugeAnimInstance_OnEnergySpawned) == 0x000004, "Wrong alignment on HalloweenCentrifugeAnimInstance_OnEnergySpawned");
static_assert(sizeof(HalloweenCentrifugeAnimInstance_OnEnergySpawned) == 0x000008, "Wrong size on HalloweenCentrifugeAnimInstance_OnEnergySpawned");
static_assert(offsetof(HalloweenCentrifugeAnimInstance_OnEnergySpawned, PreviousEnergy) == 0x000000, "Member 'HalloweenCentrifugeAnimInstance_OnEnergySpawned::PreviousEnergy' has a wrong offset!");
static_assert(offsetof(HalloweenCentrifugeAnimInstance_OnEnergySpawned, CurrentEnergy) == 0x000004, "Member 'HalloweenCentrifugeAnimInstance_OnEnergySpawned::CurrentEnergy' has a wrong offset!");

// Function Halloween.HalloweenCentrifugeAnimInstance.SetDesiredBlendValue
// 0x0004 (0x0004 - 0x0000)
struct HalloweenCentrifugeAnimInstance_SetDesiredBlendValue final
{
public:
	float                                         blendValue;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenCentrifugeAnimInstance_SetDesiredBlendValue) == 0x000004, "Wrong alignment on HalloweenCentrifugeAnimInstance_SetDesiredBlendValue");
static_assert(sizeof(HalloweenCentrifugeAnimInstance_SetDesiredBlendValue) == 0x000004, "Wrong size on HalloweenCentrifugeAnimInstance_SetDesiredBlendValue");
static_assert(offsetof(HalloweenCentrifugeAnimInstance_SetDesiredBlendValue, blendValue) == 0x000000, "Member 'HalloweenCentrifugeAnimInstance_SetDesiredBlendValue::blendValue' has a wrong offset!");

// Function Halloween.GeneratorCentrifugeAnimInstance.OnStartRepair
// 0x0008 (0x0008 - 0x0000)
struct GeneratorCentrifugeAnimInstance_OnStartRepair final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorCentrifugeAnimInstance_OnStartRepair) == 0x000008, "Wrong alignment on GeneratorCentrifugeAnimInstance_OnStartRepair");
static_assert(sizeof(GeneratorCentrifugeAnimInstance_OnStartRepair) == 0x000008, "Wrong size on GeneratorCentrifugeAnimInstance_OnStartRepair");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_OnStartRepair, Generator) == 0x000000, "Member 'GeneratorCentrifugeAnimInstance_OnStartRepair::Generator' has a wrong offset!");

// Function Halloween.GeneratorCentrifugeAnimInstance.OnStopRepair
// 0x0008 (0x0008 - 0x0000)
struct GeneratorCentrifugeAnimInstance_OnStopRepair final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorCentrifugeAnimInstance_OnStopRepair) == 0x000008, "Wrong alignment on GeneratorCentrifugeAnimInstance_OnStopRepair");
static_assert(sizeof(GeneratorCentrifugeAnimInstance_OnStopRepair) == 0x000008, "Wrong size on GeneratorCentrifugeAnimInstance_OnStopRepair");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_OnStopRepair, Generator) == 0x000000, "Member 'GeneratorCentrifugeAnimInstance_OnStopRepair::Generator' has a wrong offset!");

// Function Halloween.GeneratorCentrifugeAnimInstance.StartRepairing
// 0x0040 (0x0040 - 0x0000)
struct GeneratorCentrifugeAnimInstance_StartRepairing final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorCentrifugeAnimInstance_StartRepairing) == 0x000008, "Wrong alignment on GeneratorCentrifugeAnimInstance_StartRepairing");
static_assert(sizeof(GeneratorCentrifugeAnimInstance_StartRepairing) == 0x000040, "Wrong size on GeneratorCentrifugeAnimInstance_StartRepairing");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_StartRepairing, GameEventType) == 0x000000, "Member 'GeneratorCentrifugeAnimInstance_StartRepairing::GameEventType' has a wrong offset!");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_StartRepairing, GameEventData) == 0x000010, "Member 'GeneratorCentrifugeAnimInstance_StartRepairing::GameEventData' has a wrong offset!");

// Function Halloween.GeneratorCentrifugeAnimInstance.StopRepairing
// 0x0040 (0x0040 - 0x0000)
struct GeneratorCentrifugeAnimInstance_StopRepairing final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GeneratorCentrifugeAnimInstance_StopRepairing) == 0x000008, "Wrong alignment on GeneratorCentrifugeAnimInstance_StopRepairing");
static_assert(sizeof(GeneratorCentrifugeAnimInstance_StopRepairing) == 0x000040, "Wrong size on GeneratorCentrifugeAnimInstance_StopRepairing");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_StopRepairing, GameEventType) == 0x000000, "Member 'GeneratorCentrifugeAnimInstance_StopRepairing::GameEventType' has a wrong offset!");
static_assert(offsetof(GeneratorCentrifugeAnimInstance_StopRepairing, GameEventData) == 0x000010, "Member 'GeneratorCentrifugeAnimInstance_StopRepairing::GameEventData' has a wrong offset!");

// Function Halloween.HalloweenEventComponent.Authority_PlayerPreTeleportInToVoidZone
// 0x0008 (0x0008 - 0x0000)
struct HalloweenEventComponent_Authority_PlayerPreTeleportInToVoidZone final
{
public:
	class ADBDPlayer*                             PlayerTeleported;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenEventComponent_Authority_PlayerPreTeleportInToVoidZone) == 0x000008, "Wrong alignment on HalloweenEventComponent_Authority_PlayerPreTeleportInToVoidZone");
static_assert(sizeof(HalloweenEventComponent_Authority_PlayerPreTeleportInToVoidZone) == 0x000008, "Wrong size on HalloweenEventComponent_Authority_PlayerPreTeleportInToVoidZone");
static_assert(offsetof(HalloweenEventComponent_Authority_PlayerPreTeleportInToVoidZone, PlayerTeleported) == 0x000000, "Member 'HalloweenEventComponent_Authority_PlayerPreTeleportInToVoidZone::PlayerTeleported' has a wrong offset!");

// Function Halloween.HalloweenEventComponent.Authority_PlayerPreTeleportOutOfVoidZone
// 0x0008 (0x0008 - 0x0000)
struct HalloweenEventComponent_Authority_PlayerPreTeleportOutOfVoidZone final
{
public:
	class ADBDPlayer*                             PlayerTeleported;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenEventComponent_Authority_PlayerPreTeleportOutOfVoidZone) == 0x000008, "Wrong alignment on HalloweenEventComponent_Authority_PlayerPreTeleportOutOfVoidZone");
static_assert(sizeof(HalloweenEventComponent_Authority_PlayerPreTeleportOutOfVoidZone) == 0x000008, "Wrong size on HalloweenEventComponent_Authority_PlayerPreTeleportOutOfVoidZone");
static_assert(offsetof(HalloweenEventComponent_Authority_PlayerPreTeleportOutOfVoidZone, PlayerTeleported) == 0x000000, "Member 'HalloweenEventComponent_Authority_PlayerPreTeleportOutOfVoidZone::PlayerTeleported' has a wrong offset!");

// Function Halloween.HalloweenEventComponent.Authority_PlayerTeleportedInToVoidZone
// 0x0010 (0x0010 - 0x0000)
struct HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone final
{
public:
	class ADBDPlayer*                             PlayerTeleported;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULinkedTeleporterComponent*             TeleporterUsed;                                    // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone) == 0x000008, "Wrong alignment on HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone");
static_assert(sizeof(HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone) == 0x000010, "Wrong size on HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone");
static_assert(offsetof(HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone, PlayerTeleported) == 0x000000, "Member 'HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone::PlayerTeleported' has a wrong offset!");
static_assert(offsetof(HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone, TeleporterUsed) == 0x000008, "Member 'HalloweenEventComponent_Authority_PlayerTeleportedInToVoidZone::TeleporterUsed' has a wrong offset!");

// Function Halloween.HalloweenEventComponent.Authority_PlayerTeleportedOutOfVoidZone
// 0x0008 (0x0008 - 0x0000)
struct HalloweenEventComponent_Authority_PlayerTeleportedOutOfVoidZone final
{
public:
	class ADBDPlayer*                             PlayerTeleported;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenEventComponent_Authority_PlayerTeleportedOutOfVoidZone) == 0x000008, "Wrong alignment on HalloweenEventComponent_Authority_PlayerTeleportedOutOfVoidZone");
static_assert(sizeof(HalloweenEventComponent_Authority_PlayerTeleportedOutOfVoidZone) == 0x000008, "Wrong size on HalloweenEventComponent_Authority_PlayerTeleportedOutOfVoidZone");
static_assert(offsetof(HalloweenEventComponent_Authority_PlayerTeleportedOutOfVoidZone, PlayerTeleported) == 0x000000, "Member 'HalloweenEventComponent_Authority_PlayerTeleportedOutOfVoidZone::PlayerTeleported' has a wrong offset!");

// Function Halloween.HalloweenEventComponent.Authority_TurnAllRiftsIntoTeleporters
// 0x0001 (0x0001 - 0x0000)
struct HalloweenEventComponent_Authority_TurnAllRiftsIntoTeleporters final
{
public:
	bool                                          TurnOnTeleporters;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenEventComponent_Authority_TurnAllRiftsIntoTeleporters) == 0x000001, "Wrong alignment on HalloweenEventComponent_Authority_TurnAllRiftsIntoTeleporters");
static_assert(sizeof(HalloweenEventComponent_Authority_TurnAllRiftsIntoTeleporters) == 0x000001, "Wrong size on HalloweenEventComponent_Authority_TurnAllRiftsIntoTeleporters");
static_assert(offsetof(HalloweenEventComponent_Authority_TurnAllRiftsIntoTeleporters, TurnOnTeleporters) == 0x000000, "Member 'HalloweenEventComponent_Authority_TurnAllRiftsIntoTeleporters::TurnOnTeleporters' has a wrong offset!");

// Function Halloween.HalloweenEventComponent.Cosmetic_OnPlayerTeleported
// 0x0010 (0x0010 - 0x0000)
struct HalloweenEventComponent_Cosmetic_OnPlayerTeleported final
{
public:
	class ADBDPlayer*                             PlayerTeleported;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TeleportIntoVoid;                                  // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HalloweenEventComponent_Cosmetic_OnPlayerTeleported) == 0x000008, "Wrong alignment on HalloweenEventComponent_Cosmetic_OnPlayerTeleported");
static_assert(sizeof(HalloweenEventComponent_Cosmetic_OnPlayerTeleported) == 0x000010, "Wrong size on HalloweenEventComponent_Cosmetic_OnPlayerTeleported");
static_assert(offsetof(HalloweenEventComponent_Cosmetic_OnPlayerTeleported, PlayerTeleported) == 0x000000, "Member 'HalloweenEventComponent_Cosmetic_OnPlayerTeleported::PlayerTeleported' has a wrong offset!");
static_assert(offsetof(HalloweenEventComponent_Cosmetic_OnPlayerTeleported, TeleportIntoVoid) == 0x000008, "Member 'HalloweenEventComponent_Cosmetic_OnPlayerTeleported::TeleportIntoVoid' has a wrong offset!");

// Function Halloween.HalloweenHauntAnimInstance.OnHauntHitPlayer
// 0x0008 (0x0008 - 0x0000)
struct HalloweenHauntAnimInstance_OnHauntHitPlayer final
{
public:
	class ADBDPlayer*                             HitPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenHauntAnimInstance_OnHauntHitPlayer) == 0x000008, "Wrong alignment on HalloweenHauntAnimInstance_OnHauntHitPlayer");
static_assert(sizeof(HalloweenHauntAnimInstance_OnHauntHitPlayer) == 0x000008, "Wrong size on HalloweenHauntAnimInstance_OnHauntHitPlayer");
static_assert(offsetof(HalloweenHauntAnimInstance_OnHauntHitPlayer, HitPlayer) == 0x000000, "Member 'HalloweenHauntAnimInstance_OnHauntHitPlayer::HitPlayer' has a wrong offset!");

// Function Halloween.HalloweenHauntProjectile.Authority_OnCollisionOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComp;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromSweep;                                         // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin) == 0x000008, "Wrong alignment on HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin");
static_assert(sizeof(HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin) == 0x000110, "Wrong size on HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin");
static_assert(offsetof(HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin, OverlappedComp) == 0x000000, "Member 'HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin::OverlappedComp' has a wrong offset!");
static_assert(offsetof(HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin, OtherActor) == 0x000008, "Member 'HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin, OtherComp) == 0x000010, "Member 'HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin, FromSweep) == 0x00001C, "Member 'HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin::FromSweep' has a wrong offset!");
static_assert(offsetof(HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin, SweepResult) == 0x000020, "Member 'HalloweenHauntProjectile_Authority_OnCollisionOverlapBegin::SweepResult' has a wrong offset!");

// Function Halloween.HalloweenHauntProjectile.Cosmetic_OnCollisionHit
// 0x0008 (0x0008 - 0x0000)
struct HalloweenHauntProjectile_Cosmetic_OnCollisionHit final
{
public:
	class AActor*                                 ActorHit;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenHauntProjectile_Cosmetic_OnCollisionHit) == 0x000008, "Wrong alignment on HalloweenHauntProjectile_Cosmetic_OnCollisionHit");
static_assert(sizeof(HalloweenHauntProjectile_Cosmetic_OnCollisionHit) == 0x000008, "Wrong size on HalloweenHauntProjectile_Cosmetic_OnCollisionHit");
static_assert(offsetof(HalloweenHauntProjectile_Cosmetic_OnCollisionHit, ActorHit) == 0x000000, "Member 'HalloweenHauntProjectile_Cosmetic_OnCollisionHit::ActorHit' has a wrong offset!");

// Function Halloween.HalloweenHauntProjectile.Cosmetic_OnPlayerHit
// 0x0008 (0x0008 - 0x0000)
struct HalloweenHauntProjectile_Cosmetic_OnPlayerHit final
{
public:
	class ADBDPlayer*                             PlayerHit;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenHauntProjectile_Cosmetic_OnPlayerHit) == 0x000008, "Wrong alignment on HalloweenHauntProjectile_Cosmetic_OnPlayerHit");
static_assert(sizeof(HalloweenHauntProjectile_Cosmetic_OnPlayerHit) == 0x000008, "Wrong size on HalloweenHauntProjectile_Cosmetic_OnPlayerHit");
static_assert(offsetof(HalloweenHauntProjectile_Cosmetic_OnPlayerHit, PlayerHit) == 0x000000, "Member 'HalloweenHauntProjectile_Cosmetic_OnPlayerHit::PlayerHit' has a wrong offset!");

// Function Halloween.HalloweenHauntProjectile.Multicast_OnActorHit
// 0x0008 (0x0008 - 0x0000)
struct HalloweenHauntProjectile_Multicast_OnActorHit final
{
public:
	class AActor*                                 ActorHit;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenHauntProjectile_Multicast_OnActorHit) == 0x000008, "Wrong alignment on HalloweenHauntProjectile_Multicast_OnActorHit");
static_assert(sizeof(HalloweenHauntProjectile_Multicast_OnActorHit) == 0x000008, "Wrong size on HalloweenHauntProjectile_Multicast_OnActorHit");
static_assert(offsetof(HalloweenHauntProjectile_Multicast_OnActorHit, ActorHit) == 0x000000, "Member 'HalloweenHauntProjectile_Multicast_OnActorHit::ActorHit' has a wrong offset!");

// Function Halloween.HalloweenHauntProjectile.Multicast_OnPlayerHit
// 0x0008 (0x0008 - 0x0000)
struct HalloweenHauntProjectile_Multicast_OnPlayerHit final
{
public:
	class ADBDPlayer*                             PlayerHit;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenHauntProjectile_Multicast_OnPlayerHit) == 0x000008, "Wrong alignment on HalloweenHauntProjectile_Multicast_OnPlayerHit");
static_assert(sizeof(HalloweenHauntProjectile_Multicast_OnPlayerHit) == 0x000008, "Wrong size on HalloweenHauntProjectile_Multicast_OnPlayerHit");
static_assert(offsetof(HalloweenHauntProjectile_Multicast_OnPlayerHit, PlayerHit) == 0x000000, "Member 'HalloweenHauntProjectile_Multicast_OnPlayerHit::PlayerHit' has a wrong offset!");

// Function Halloween.HalloweenHauntProjectile.Multicast_SetLocationAndRotation
// 0x0030 (0x0030 - 0x0000)
struct HalloweenHauntProjectile_Multicast_SetLocationAndRotation final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenHauntProjectile_Multicast_SetLocationAndRotation) == 0x000008, "Wrong alignment on HalloweenHauntProjectile_Multicast_SetLocationAndRotation");
static_assert(sizeof(HalloweenHauntProjectile_Multicast_SetLocationAndRotation) == 0x000030, "Wrong size on HalloweenHauntProjectile_Multicast_SetLocationAndRotation");
static_assert(offsetof(HalloweenHauntProjectile_Multicast_SetLocationAndRotation, Location) == 0x000000, "Member 'HalloweenHauntProjectile_Multicast_SetLocationAndRotation::Location' has a wrong offset!");
static_assert(offsetof(HalloweenHauntProjectile_Multicast_SetLocationAndRotation, Rotation) == 0x000018, "Member 'HalloweenHauntProjectile_Multicast_SetLocationAndRotation::Rotation' has a wrong offset!");

// Function Halloween.HalloweenVoidHookSurvivorDefinition.Authority_SetPlayerOnStandardHook
// 0x0008 (0x0008 - 0x0000)
struct HalloweenVoidHookSurvivorDefinition_Authority_SetPlayerOnStandardHook final
{
public:
	class ACamperPlayer*                          Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenVoidHookSurvivorDefinition_Authority_SetPlayerOnStandardHook) == 0x000008, "Wrong alignment on HalloweenVoidHookSurvivorDefinition_Authority_SetPlayerOnStandardHook");
static_assert(sizeof(HalloweenVoidHookSurvivorDefinition_Authority_SetPlayerOnStandardHook) == 0x000008, "Wrong size on HalloweenVoidHookSurvivorDefinition_Authority_SetPlayerOnStandardHook");
static_assert(offsetof(HalloweenVoidHookSurvivorDefinition_Authority_SetPlayerOnStandardHook, Player) == 0x000000, "Member 'HalloweenVoidHookSurvivorDefinition_Authority_SetPlayerOnStandardHook::Player' has a wrong offset!");

// Function Halloween.HalloweenVoidHookSurvivorDefinition.Multicast_OnPlayerMovedToStandardHook
// 0x0010 (0x0010 - 0x0000)
struct HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook final
{
public:
	class ACamperPlayer*                          Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMeatHook*                              ClosestMeatHook;                                   // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook) == 0x000008, "Wrong alignment on HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook");
static_assert(sizeof(HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook) == 0x000010, "Wrong size on HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook");
static_assert(offsetof(HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook, Player) == 0x000000, "Member 'HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook::Player' has a wrong offset!");
static_assert(offsetof(HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook, ClosestMeatHook) == 0x000008, "Member 'HalloweenVoidHookSurvivorDefinition_Multicast_OnPlayerMovedToStandardHook::ClosestMeatHook' has a wrong offset!");

// Function Halloween.HalloweenVoidHookSurvivorDefinition.Multicast_PlacePlayerOnHook
// 0x0008 (0x0008 - 0x0000)
struct HalloweenVoidHookSurvivorDefinition_Multicast_PlacePlayerOnHook final
{
public:
	class ACamperPlayer*                          SurvivorBeingHooked;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenVoidHookSurvivorDefinition_Multicast_PlacePlayerOnHook) == 0x000008, "Wrong alignment on HalloweenVoidHookSurvivorDefinition_Multicast_PlacePlayerOnHook");
static_assert(sizeof(HalloweenVoidHookSurvivorDefinition_Multicast_PlacePlayerOnHook) == 0x000008, "Wrong size on HalloweenVoidHookSurvivorDefinition_Multicast_PlacePlayerOnHook");
static_assert(offsetof(HalloweenVoidHookSurvivorDefinition_Multicast_PlacePlayerOnHook, SurvivorBeingHooked) == 0x000000, "Member 'HalloweenVoidHookSurvivorDefinition_Multicast_PlacePlayerOnHook::SurvivorBeingHooked' has a wrong offset!");

// DelegateFunction Halloween.HalloweenVoidHookSurvivorDefinition.OnHookEvent__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct HalloweenVoidHookSurvivorDefinition_OnHookEvent__DelegateSignature final
{
public:
	class ACamperPlayer*                          Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HalloweenVoidHookSurvivorDefinition_OnHookEvent__DelegateSignature) == 0x000008, "Wrong alignment on HalloweenVoidHookSurvivorDefinition_OnHookEvent__DelegateSignature");
static_assert(sizeof(HalloweenVoidHookSurvivorDefinition_OnHookEvent__DelegateSignature) == 0x000008, "Wrong size on HalloweenVoidHookSurvivorDefinition_OnHookEvent__DelegateSignature");
static_assert(offsetof(HalloweenVoidHookSurvivorDefinition_OnHookEvent__DelegateSignature, Survivor) == 0x000000, "Member 'HalloweenVoidHookSurvivorDefinition_OnHookEvent__DelegateSignature::Survivor' has a wrong offset!");

// Function Halloween.HauntProjectilePlayerInventoryComponent.Cosmetic_OnHauntCountChange
// 0x0004 (0x0004 - 0x0000)
struct HauntProjectilePlayerInventoryComponent_Cosmetic_OnHauntCountChange final
{
public:
	int32                                         HauntCount;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HauntProjectilePlayerInventoryComponent_Cosmetic_OnHauntCountChange) == 0x000004, "Wrong alignment on HauntProjectilePlayerInventoryComponent_Cosmetic_OnHauntCountChange");
static_assert(sizeof(HauntProjectilePlayerInventoryComponent_Cosmetic_OnHauntCountChange) == 0x000004, "Wrong size on HauntProjectilePlayerInventoryComponent_Cosmetic_OnHauntCountChange");
static_assert(offsetof(HauntProjectilePlayerInventoryComponent_Cosmetic_OnHauntCountChange, HauntCount) == 0x000000, "Member 'HauntProjectilePlayerInventoryComponent_Cosmetic_OnHauntCountChange::HauntCount' has a wrong offset!");

// Function Halloween.HauntProjectilePlayerInventoryComponent.OnRep_CurrentHauntCount
// 0x0004 (0x0004 - 0x0000)
struct HauntProjectilePlayerInventoryComponent_OnRep_CurrentHauntCount final
{
public:
	int32                                         PreviousHauntCount;                                // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HauntProjectilePlayerInventoryComponent_OnRep_CurrentHauntCount) == 0x000004, "Wrong alignment on HauntProjectilePlayerInventoryComponent_OnRep_CurrentHauntCount");
static_assert(sizeof(HauntProjectilePlayerInventoryComponent_OnRep_CurrentHauntCount) == 0x000004, "Wrong size on HauntProjectilePlayerInventoryComponent_OnRep_CurrentHauntCount");
static_assert(offsetof(HauntProjectilePlayerInventoryComponent_OnRep_CurrentHauntCount, PreviousHauntCount) == 0x000000, "Member 'HauntProjectilePlayerInventoryComponent_OnRep_CurrentHauntCount::PreviousHauntCount' has a wrong offset!");

// Function Halloween.LinkedTeleporterComponent.Multicast_TeleportPlayer
// 0x0020 (0x0020 - 0x0000)
struct LinkedTeleporterComponent_Multicast_TeleportPlayer final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TeleportLocation;                                  // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedTeleporterComponent_Multicast_TeleportPlayer) == 0x000008, "Wrong alignment on LinkedTeleporterComponent_Multicast_TeleportPlayer");
static_assert(sizeof(LinkedTeleporterComponent_Multicast_TeleportPlayer) == 0x000020, "Wrong size on LinkedTeleporterComponent_Multicast_TeleportPlayer");
static_assert(offsetof(LinkedTeleporterComponent_Multicast_TeleportPlayer, Player) == 0x000000, "Member 'LinkedTeleporterComponent_Multicast_TeleportPlayer::Player' has a wrong offset!");
static_assert(offsetof(LinkedTeleporterComponent_Multicast_TeleportPlayer, TeleportLocation) == 0x000008, "Member 'LinkedTeleporterComponent_Multicast_TeleportPlayer::TeleportLocation' has a wrong offset!");

// DelegateFunction Halloween.LinkedTeleporterComponent.OnTeleportEnabled__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct LinkedTeleporterComponent_OnTeleportEnabled__DelegateSignature final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedTeleporterComponent_OnTeleportEnabled__DelegateSignature) == 0x000001, "Wrong alignment on LinkedTeleporterComponent_OnTeleportEnabled__DelegateSignature");
static_assert(sizeof(LinkedTeleporterComponent_OnTeleportEnabled__DelegateSignature) == 0x000001, "Wrong size on LinkedTeleporterComponent_OnTeleportEnabled__DelegateSignature");
static_assert(offsetof(LinkedTeleporterComponent_OnTeleportEnabled__DelegateSignature, IsEnabled) == 0x000000, "Member 'LinkedTeleporterComponent_OnTeleportEnabled__DelegateSignature::IsEnabled' has a wrong offset!");

// Function Halloween.LinkedTeleporterComponent.OnTeleporterTriggered
// 0x0040 (0x0040 - 0x0000)
struct LinkedTeleporterComponent_OnTeleporterTriggered final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedTeleporterComponent_OnTeleporterTriggered) == 0x000008, "Wrong alignment on LinkedTeleporterComponent_OnTeleporterTriggered");
static_assert(sizeof(LinkedTeleporterComponent_OnTeleporterTriggered) == 0x000040, "Wrong size on LinkedTeleporterComponent_OnTeleporterTriggered");
static_assert(offsetof(LinkedTeleporterComponent_OnTeleporterTriggered, GameEventType) == 0x000000, "Member 'LinkedTeleporterComponent_OnTeleporterTriggered::GameEventType' has a wrong offset!");
static_assert(offsetof(LinkedTeleporterComponent_OnTeleporterTriggered, GameEventData) == 0x000010, "Member 'LinkedTeleporterComponent_OnTeleporterTriggered::GameEventData' has a wrong offset!");

// DelegateFunction Halloween.LinkedTeleporterComponent.OnTeleportInteractWithPlayer__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct LinkedTeleporterComponent_OnTeleportInteractWithPlayer__DelegateSignature final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedTeleporterComponent_OnTeleportInteractWithPlayer__DelegateSignature) == 0x000008, "Wrong alignment on LinkedTeleporterComponent_OnTeleportInteractWithPlayer__DelegateSignature");
static_assert(sizeof(LinkedTeleporterComponent_OnTeleportInteractWithPlayer__DelegateSignature) == 0x000008, "Wrong size on LinkedTeleporterComponent_OnTeleportInteractWithPlayer__DelegateSignature");
static_assert(offsetof(LinkedTeleporterComponent_OnTeleportInteractWithPlayer__DelegateSignature, Player) == 0x000000, "Member 'LinkedTeleporterComponent_OnTeleportInteractWithPlayer__DelegateSignature::Player' has a wrong offset!");

// Function Halloween.LinkedTeleporterComponent.OnTimerEnd
// 0x0008 (0x0008 - 0x0000)
struct LinkedTeleporterComponent_OnTimerEnd final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LinkedTeleporterComponent_OnTimerEnd) == 0x000008, "Wrong alignment on LinkedTeleporterComponent_OnTimerEnd");
static_assert(sizeof(LinkedTeleporterComponent_OnTimerEnd) == 0x000008, "Wrong size on LinkedTeleporterComponent_OnTimerEnd");
static_assert(offsetof(LinkedTeleporterComponent_OnTimerEnd, Player) == 0x000000, "Member 'LinkedTeleporterComponent_OnTimerEnd::Player' has a wrong offset!");

// Function Halloween.MeatHookCentrifugeAnimInstance.OnPlayerHooked
// 0x0008 (0x0008 - 0x0000)
struct MeatHookCentrifugeAnimInstance_OnPlayerHooked final
{
public:
	class AMeatHook*                              MeatHook;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHookCentrifugeAnimInstance_OnPlayerHooked) == 0x000008, "Wrong alignment on MeatHookCentrifugeAnimInstance_OnPlayerHooked");
static_assert(sizeof(MeatHookCentrifugeAnimInstance_OnPlayerHooked) == 0x000008, "Wrong size on MeatHookCentrifugeAnimInstance_OnPlayerHooked");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_OnPlayerHooked, MeatHook) == 0x000000, "Member 'MeatHookCentrifugeAnimInstance_OnPlayerHooked::MeatHook' has a wrong offset!");

// Function Halloween.MeatHookCentrifugeAnimInstance.OnPlayerNoLongerOnHook
// 0x0008 (0x0008 - 0x0000)
struct MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook final
{
public:
	class AMeatHook*                              MeatHook;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook) == 0x000008, "Wrong alignment on MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook");
static_assert(sizeof(MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook) == 0x000008, "Wrong size on MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook, MeatHook) == 0x000000, "Member 'MeatHookCentrifugeAnimInstance_OnPlayerNoLongerOnHook::MeatHook' has a wrong offset!");

// Function Halloween.MeatHookCentrifugeAnimInstance.PlayerHooked
// 0x0040 (0x0040 - 0x0000)
struct MeatHookCentrifugeAnimInstance_PlayerHooked final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHookCentrifugeAnimInstance_PlayerHooked) == 0x000008, "Wrong alignment on MeatHookCentrifugeAnimInstance_PlayerHooked");
static_assert(sizeof(MeatHookCentrifugeAnimInstance_PlayerHooked) == 0x000040, "Wrong size on MeatHookCentrifugeAnimInstance_PlayerHooked");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_PlayerHooked, GameEventType) == 0x000000, "Member 'MeatHookCentrifugeAnimInstance_PlayerHooked::GameEventType' has a wrong offset!");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_PlayerHooked, GameEventData) == 0x000010, "Member 'MeatHookCentrifugeAnimInstance_PlayerHooked::GameEventData' has a wrong offset!");

// Function Halloween.MeatHookCentrifugeAnimInstance.PlayerNoLongerOnHook
// 0x0040 (0x0040 - 0x0000)
struct MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook) == 0x000008, "Wrong alignment on MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook");
static_assert(sizeof(MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook) == 0x000040, "Wrong size on MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook, GameEventType) == 0x000000, "Member 'MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook::GameEventType' has a wrong offset!");
static_assert(offsetof(MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook, GameEventData) == 0x000010, "Member 'MeatHookCentrifugeAnimInstance_PlayerNoLongerOnHook::GameEventData' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.Multicast_AddVoidEnergy
// 0x0008 (0x0008 - 0x0000)
struct PlayerVoidEnergy_Multicast_AddVoidEnergy final
{
public:
	int32                                         AmountToAdd;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVoidEnergyType                               VoidEnergyType;                                    // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerVoidEnergy_Multicast_AddVoidEnergy) == 0x000004, "Wrong alignment on PlayerVoidEnergy_Multicast_AddVoidEnergy");
static_assert(sizeof(PlayerVoidEnergy_Multicast_AddVoidEnergy) == 0x000008, "Wrong size on PlayerVoidEnergy_Multicast_AddVoidEnergy");
static_assert(offsetof(PlayerVoidEnergy_Multicast_AddVoidEnergy, AmountToAdd) == 0x000000, "Member 'PlayerVoidEnergy_Multicast_AddVoidEnergy::AmountToAdd' has a wrong offset!");
static_assert(offsetof(PlayerVoidEnergy_Multicast_AddVoidEnergy, VoidEnergyType) == 0x000004, "Member 'PlayerVoidEnergy_Multicast_AddVoidEnergy::VoidEnergyType' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.Multicast_ShowVoidEnergyChanges
// 0x0008 (0x0008 - 0x0000)
struct PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges final
{
public:
	int32                                         PreviousVoidEnergyCount;                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewVoidEnergyCount;                                // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges) == 0x000004, "Wrong alignment on PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges");
static_assert(sizeof(PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges) == 0x000008, "Wrong size on PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges");
static_assert(offsetof(PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges, PreviousVoidEnergyCount) == 0x000000, "Member 'PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges::PreviousVoidEnergyCount' has a wrong offset!");
static_assert(offsetof(PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges, NewVoidEnergyCount) == 0x000004, "Member 'PlayerVoidEnergy_Multicast_ShowVoidEnergyChanges::NewVoidEnergyCount' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.OnLocallyControlledChanged
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoidEnergy_OnLocallyControlledChanged final
{
public:
	bool                                          IsLocallyControlled;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_OnLocallyControlledChanged) == 0x000001, "Wrong alignment on PlayerVoidEnergy_OnLocallyControlledChanged");
static_assert(sizeof(PlayerVoidEnergy_OnLocallyControlledChanged) == 0x000001, "Wrong size on PlayerVoidEnergy_OnLocallyControlledChanged");
static_assert(offsetof(PlayerVoidEnergy_OnLocallyControlledChanged, IsLocallyControlled) == 0x000000, "Member 'PlayerVoidEnergy_OnLocallyControlledChanged::IsLocallyControlled' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.OnLocallyObservedChanged
// 0x0008 (0x0008 - 0x0000)
struct PlayerVoidEnergy_OnLocallyObservedChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_OnLocallyObservedChanged) == 0x000008, "Wrong alignment on PlayerVoidEnergy_OnLocallyObservedChanged");
static_assert(sizeof(PlayerVoidEnergy_OnLocallyObservedChanged) == 0x000008, "Wrong size on PlayerVoidEnergy_OnLocallyObservedChanged");
static_assert(offsetof(PlayerVoidEnergy_OnLocallyObservedChanged, Player) == 0x000000, "Member 'PlayerVoidEnergy_OnLocallyObservedChanged::Player' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.OnRep_CurrentVoidEnergy
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_OnRep_CurrentVoidEnergy final
{
public:
	int32                                         PreviousEnergyCount;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_OnRep_CurrentVoidEnergy) == 0x000004, "Wrong alignment on PlayerVoidEnergy_OnRep_CurrentVoidEnergy");
static_assert(sizeof(PlayerVoidEnergy_OnRep_CurrentVoidEnergy) == 0x000004, "Wrong size on PlayerVoidEnergy_OnRep_CurrentVoidEnergy");
static_assert(offsetof(PlayerVoidEnergy_OnRep_CurrentVoidEnergy, PreviousEnergyCount) == 0x000000, "Member 'PlayerVoidEnergy_OnRep_CurrentVoidEnergy::PreviousEnergyCount' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.OnRep_TotalVoidEnergySpent
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_OnRep_TotalVoidEnergySpent final
{
public:
	int32                                         PreviousTotalVoidEnergySpent;                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_OnRep_TotalVoidEnergySpent) == 0x000004, "Wrong alignment on PlayerVoidEnergy_OnRep_TotalVoidEnergySpent");
static_assert(sizeof(PlayerVoidEnergy_OnRep_TotalVoidEnergySpent) == 0x000004, "Wrong size on PlayerVoidEnergy_OnRep_TotalVoidEnergySpent");
static_assert(offsetof(PlayerVoidEnergy_OnRep_TotalVoidEnergySpent, PreviousTotalVoidEnergySpent) == 0x000000, "Member 'PlayerVoidEnergy_OnRep_TotalVoidEnergySpent::PreviousTotalVoidEnergySpent' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.OnVoidEnergyLost
// 0x0001 (0x0001 - 0x0000)
struct PlayerVoidEnergy_OnVoidEnergyLost final
{
public:
	EVoidEnergyChangeReason                       ChangeReason;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_OnVoidEnergyLost) == 0x000001, "Wrong alignment on PlayerVoidEnergy_OnVoidEnergyLost");
static_assert(sizeof(PlayerVoidEnergy_OnVoidEnergyLost) == 0x000001, "Wrong size on PlayerVoidEnergy_OnVoidEnergyLost");
static_assert(offsetof(PlayerVoidEnergy_OnVoidEnergyLost, ChangeReason) == 0x000000, "Member 'PlayerVoidEnergy_OnVoidEnergyLost::ChangeReason' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.GetCurrentVoidEnergyCount
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_GetCurrentVoidEnergyCount final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_GetCurrentVoidEnergyCount) == 0x000004, "Wrong alignment on PlayerVoidEnergy_GetCurrentVoidEnergyCount");
static_assert(sizeof(PlayerVoidEnergy_GetCurrentVoidEnergyCount) == 0x000004, "Wrong size on PlayerVoidEnergy_GetCurrentVoidEnergyCount");
static_assert(offsetof(PlayerVoidEnergy_GetCurrentVoidEnergyCount, ReturnValue) == 0x000000, "Member 'PlayerVoidEnergy_GetCurrentVoidEnergyCount::ReturnValue' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.GetMaxAmountOfVoidEnergyCanReceive
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive) == 0x000004, "Wrong alignment on PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive");
static_assert(sizeof(PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive) == 0x000004, "Wrong size on PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive");
static_assert(offsetof(PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive, ReturnValue) == 0x000000, "Member 'PlayerVoidEnergy_GetMaxAmountOfVoidEnergyCanReceive::ReturnValue' has a wrong offset!");

// Function Halloween.PlayerVoidEnergy.GetTotalVoidEnergyDeposited
// 0x0004 (0x0004 - 0x0000)
struct PlayerVoidEnergy_GetTotalVoidEnergyDeposited final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerVoidEnergy_GetTotalVoidEnergyDeposited) == 0x000004, "Wrong alignment on PlayerVoidEnergy_GetTotalVoidEnergyDeposited");
static_assert(sizeof(PlayerVoidEnergy_GetTotalVoidEnergyDeposited) == 0x000004, "Wrong size on PlayerVoidEnergy_GetTotalVoidEnergyDeposited");
static_assert(offsetof(PlayerVoidEnergy_GetTotalVoidEnergyDeposited, ReturnValue) == 0x000000, "Member 'PlayerVoidEnergy_GetTotalVoidEnergyDeposited::ReturnValue' has a wrong offset!");

// Function Halloween.Pumpkin.Cosmetic_OnInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct Pumpkin_Cosmetic_OnInteractionCompleted final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pumpkin_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong alignment on Pumpkin_Cosmetic_OnInteractionCompleted");
static_assert(sizeof(Pumpkin_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong size on Pumpkin_Cosmetic_OnInteractionCompleted");
static_assert(offsetof(Pumpkin_Cosmetic_OnInteractionCompleted, InteractingPlayer) == 0x000000, "Member 'Pumpkin_Cosmetic_OnInteractionCompleted::InteractingPlayer' has a wrong offset!");

// Function Halloween.Pumpkin.Cosmetic_OnStartedInteracting
// 0x0010 (0x0010 - 0x0000)
struct Pumpkin_Cosmetic_OnStartedInteracting final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionDuration;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Pumpkin_Cosmetic_OnStartedInteracting) == 0x000008, "Wrong alignment on Pumpkin_Cosmetic_OnStartedInteracting");
static_assert(sizeof(Pumpkin_Cosmetic_OnStartedInteracting) == 0x000010, "Wrong size on Pumpkin_Cosmetic_OnStartedInteracting");
static_assert(offsetof(Pumpkin_Cosmetic_OnStartedInteracting, InteractingPlayer) == 0x000000, "Member 'Pumpkin_Cosmetic_OnStartedInteracting::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(Pumpkin_Cosmetic_OnStartedInteracting, InteractionDuration) == 0x000008, "Member 'Pumpkin_Cosmetic_OnStartedInteracting::InteractionDuration' has a wrong offset!");

// Function Halloween.Pumpkin.OnInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct Pumpkin_OnInteractionCompleted final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Pumpkin_OnInteractionCompleted) == 0x000008, "Wrong alignment on Pumpkin_OnInteractionCompleted");
static_assert(sizeof(Pumpkin_OnInteractionCompleted) == 0x000008, "Wrong size on Pumpkin_OnInteractionCompleted");
static_assert(offsetof(Pumpkin_OnInteractionCompleted, InteractingPlayer) == 0x000000, "Member 'Pumpkin_OnInteractionCompleted::InteractingPlayer' has a wrong offset!");

// Function Halloween.SpawnHauntProjectileInteraction.Cosmetic_OnWindUpTimerStart
// 0x0010 (0x0010 - 0x0000)
struct SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimerDuration;                                     // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart) == 0x000008, "Wrong alignment on SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart");
static_assert(sizeof(SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart) == 0x000010, "Wrong size on SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart");
static_assert(offsetof(SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart, Player) == 0x000000, "Member 'SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart::Player' has a wrong offset!");
static_assert(offsetof(SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart, TimerDuration) == 0x000008, "Member 'SpawnHauntProjectileInteraction_Cosmetic_OnWindUpTimerStart::TimerDuration' has a wrong offset!");

// Function Halloween.UnstableRift.Cosmetic_ChangeUnstableVisibility
// 0x0001 (0x0001 - 0x0000)
struct UnstableRift_Cosmetic_ChangeUnstableVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnstableRift_Cosmetic_ChangeUnstableVisibility) == 0x000001, "Wrong alignment on UnstableRift_Cosmetic_ChangeUnstableVisibility");
static_assert(sizeof(UnstableRift_Cosmetic_ChangeUnstableVisibility) == 0x000001, "Wrong size on UnstableRift_Cosmetic_ChangeUnstableVisibility");
static_assert(offsetof(UnstableRift_Cosmetic_ChangeUnstableVisibility, IsVisible) == 0x000000, "Member 'UnstableRift_Cosmetic_ChangeUnstableVisibility::IsVisible' has a wrong offset!");

// Function Halloween.UnstableRift.Cosmetic_OnInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct UnstableRift_Cosmetic_OnInteractionCompleted final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnstableRift_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong alignment on UnstableRift_Cosmetic_OnInteractionCompleted");
static_assert(sizeof(UnstableRift_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong size on UnstableRift_Cosmetic_OnInteractionCompleted");
static_assert(offsetof(UnstableRift_Cosmetic_OnInteractionCompleted, InteractingPlayer) == 0x000000, "Member 'UnstableRift_Cosmetic_OnInteractionCompleted::InteractingPlayer' has a wrong offset!");

// Function Halloween.UnstableRift.Cosmetic_OnStartedInteracting
// 0x0010 (0x0010 - 0x0000)
struct UnstableRift_Cosmetic_OnStartedInteracting final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionDuration;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(UnstableRift_Cosmetic_OnStartedInteracting) == 0x000008, "Wrong alignment on UnstableRift_Cosmetic_OnStartedInteracting");
static_assert(sizeof(UnstableRift_Cosmetic_OnStartedInteracting) == 0x000010, "Wrong size on UnstableRift_Cosmetic_OnStartedInteracting");
static_assert(offsetof(UnstableRift_Cosmetic_OnStartedInteracting, InteractingPlayer) == 0x000000, "Member 'UnstableRift_Cosmetic_OnStartedInteracting::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(UnstableRift_Cosmetic_OnStartedInteracting, InteractionDuration) == 0x000008, "Member 'UnstableRift_Cosmetic_OnStartedInteracting::InteractionDuration' has a wrong offset!");

// Function Halloween.UnstableRift.OnInRangeChanged
// 0x0010 (0x0010 - 0x0000)
struct UnstableRift_OnInRangeChanged final
{
public:
	bool                                          IsWithinRange;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           TrackedActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UnstableRift_OnInRangeChanged) == 0x000008, "Wrong alignment on UnstableRift_OnInRangeChanged");
static_assert(sizeof(UnstableRift_OnInRangeChanged) == 0x000010, "Wrong size on UnstableRift_OnInRangeChanged");
static_assert(offsetof(UnstableRift_OnInRangeChanged, IsWithinRange) == 0x000000, "Member 'UnstableRift_OnInRangeChanged::IsWithinRange' has a wrong offset!");
static_assert(offsetof(UnstableRift_OnInRangeChanged, TrackedActor) == 0x000008, "Member 'UnstableRift_OnInRangeChanged::TrackedActor' has a wrong offset!");

// Function Halloween.VoidEnergyProducer.Cosmetic_OnVoidOrbsSpawned
// 0x0004 (0x0004 - 0x0000)
struct VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned final
{
public:
	int32                                         OrbsSpawned;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned) == 0x000004, "Wrong alignment on VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned");
static_assert(sizeof(VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned) == 0x000004, "Wrong size on VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned");
static_assert(offsetof(VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned, OrbsSpawned) == 0x000000, "Member 'VoidEnergyProducer_Cosmetic_OnVoidOrbsSpawned::OrbsSpawned' has a wrong offset!");

// Function Halloween.VoidEnergyProducer.OnRep_TotalEnergyGiven
// 0x0004 (0x0004 - 0x0000)
struct VoidEnergyProducer_OnRep_TotalEnergyGiven final
{
public:
	int32                                         LastTotalEnergyGivenValue;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyProducer_OnRep_TotalEnergyGiven) == 0x000004, "Wrong alignment on VoidEnergyProducer_OnRep_TotalEnergyGiven");
static_assert(sizeof(VoidEnergyProducer_OnRep_TotalEnergyGiven) == 0x000004, "Wrong size on VoidEnergyProducer_OnRep_TotalEnergyGiven");
static_assert(offsetof(VoidEnergyProducer_OnRep_TotalEnergyGiven, LastTotalEnergyGivenValue) == 0x000000, "Member 'VoidEnergyProducer_OnRep_TotalEnergyGiven::LastTotalEnergyGivenValue' has a wrong offset!");

// Function Halloween.VoidEnergyProducer.GetRemainingEnergy
// 0x0004 (0x0004 - 0x0000)
struct VoidEnergyProducer_GetRemainingEnergy final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyProducer_GetRemainingEnergy) == 0x000004, "Wrong alignment on VoidEnergyProducer_GetRemainingEnergy");
static_assert(sizeof(VoidEnergyProducer_GetRemainingEnergy) == 0x000004, "Wrong size on VoidEnergyProducer_GetRemainingEnergy");
static_assert(offsetof(VoidEnergyProducer_GetRemainingEnergy, ReturnValue) == 0x000000, "Member 'VoidEnergyProducer_GetRemainingEnergy::ReturnValue' has a wrong offset!");

// Function Halloween.VoidEnergyProducer.HasEnergyLeftToGive
// 0x0001 (0x0001 - 0x0000)
struct VoidEnergyProducer_HasEnergyLeftToGive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyProducer_HasEnergyLeftToGive) == 0x000001, "Wrong alignment on VoidEnergyProducer_HasEnergyLeftToGive");
static_assert(sizeof(VoidEnergyProducer_HasEnergyLeftToGive) == 0x000001, "Wrong size on VoidEnergyProducer_HasEnergyLeftToGive");
static_assert(offsetof(VoidEnergyProducer_HasEnergyLeftToGive, ReturnValue) == 0x000000, "Member 'VoidEnergyProducer_HasEnergyLeftToGive::ReturnValue' has a wrong offset!");

// Function Halloween.VoidEnergyGeneratorComponent.GetCurrentTimeDoneOnGenerator
// 0x0010 (0x0010 - 0x0000)
struct VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator) == 0x000008, "Wrong alignment on VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator");
static_assert(sizeof(VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator) == 0x000010, "Wrong size on VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator");
static_assert(offsetof(VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator, Player) == 0x000000, "Member 'VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator::Player' has a wrong offset!");
static_assert(offsetof(VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator, ReturnValue) == 0x000008, "Member 'VoidEnergyGeneratorComponent_GetCurrentTimeDoneOnGenerator::ReturnValue' has a wrong offset!");

// Function Halloween.VoidEnergyOrb.Cosmetic_DelayBeforeCollection
// 0x0008 (0x0008 - 0x0000)
struct VoidEnergyOrb_Cosmetic_DelayBeforeCollection final
{
public:
	class ADBDPlayer*                             PlayerGivingOrbTo;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrb_Cosmetic_DelayBeforeCollection) == 0x000008, "Wrong alignment on VoidEnergyOrb_Cosmetic_DelayBeforeCollection");
static_assert(sizeof(VoidEnergyOrb_Cosmetic_DelayBeforeCollection) == 0x000008, "Wrong size on VoidEnergyOrb_Cosmetic_DelayBeforeCollection");
static_assert(offsetof(VoidEnergyOrb_Cosmetic_DelayBeforeCollection, PlayerGivingOrbTo) == 0x000000, "Member 'VoidEnergyOrb_Cosmetic_DelayBeforeCollection::PlayerGivingOrbTo' has a wrong offset!");

// Function Halloween.VoidEnergyOrb.Cosmetic_OnOrbDisappearWithCollection
// 0x0008 (0x0008 - 0x0000)
struct VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection final
{
public:
	class ADBDPlayer*                             PlayerGivingOrbTo;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection) == 0x000008, "Wrong alignment on VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection");
static_assert(sizeof(VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection) == 0x000008, "Wrong size on VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection");
static_assert(offsetof(VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection, PlayerGivingOrbTo) == 0x000000, "Member 'VoidEnergyOrb_Cosmetic_OnOrbDisappearWithCollection::PlayerGivingOrbTo' has a wrong offset!");

// Function Halloween.VoidEnergyOrb.Cosmetic_OnOrbSpawned
// 0x0008 (0x0008 - 0x0000)
struct VoidEnergyOrb_Cosmetic_OnOrbSpawned final
{
public:
	class ADBDPlayer*                             PlayerGivingOrbTo;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrb_Cosmetic_OnOrbSpawned) == 0x000008, "Wrong alignment on VoidEnergyOrb_Cosmetic_OnOrbSpawned");
static_assert(sizeof(VoidEnergyOrb_Cosmetic_OnOrbSpawned) == 0x000008, "Wrong size on VoidEnergyOrb_Cosmetic_OnOrbSpawned");
static_assert(offsetof(VoidEnergyOrb_Cosmetic_OnOrbSpawned, PlayerGivingOrbTo) == 0x000000, "Member 'VoidEnergyOrb_Cosmetic_OnOrbSpawned::PlayerGivingOrbTo' has a wrong offset!");

// Function Halloween.VoidEnergyOrbSpawner.Authority_GiveVoidEnergyToPlayer
// 0x0008 (0x0008 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer final
{
public:
	EVoidEnergyType                               VoidEnergyType;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoidEnergyToAdd;                                   // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer) == 0x000004, "Wrong alignment on VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer) == 0x000008, "Wrong size on VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer, VoidEnergyType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer::VoidEnergyType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer, VoidEnergyToAdd) == 0x000004, "Member 'VoidEnergyOrbSpawner_Authority_GiveVoidEnergyToPlayer::VoidEnergyToAdd' has a wrong offset!");

// Function Halloween.VoidEnergyOrbSpawner.Authority_KillerDownSurvivor
// 0x0040 (0x0040 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_KillerDownSurvivor final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_KillerDownSurvivor) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Authority_KillerDownSurvivor");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_KillerDownSurvivor) == 0x000040, "Wrong size on VoidEnergyOrbSpawner_Authority_KillerDownSurvivor");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_KillerDownSurvivor, GameEventType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_KillerDownSurvivor::GameEventType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_KillerDownSurvivor, GameEventData) == 0x000010, "Member 'VoidEnergyOrbSpawner_Authority_KillerDownSurvivor::GameEventData' has a wrong offset!");

// Function Halloween.VoidEnergyOrbSpawner.Authority_SurvivorBlindKiller
// 0x0040 (0x0040 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller) == 0x000040, "Wrong size on VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller, GameEventType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller::GameEventType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller, GameEventData) == 0x000010, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorBlindKiller::GameEventData' has a wrong offset!");

// Function Halloween.VoidEnergyOrbSpawner.Authority_SurvivorStunKiller
// 0x0040 (0x0040 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_SurvivorStunKiller final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_SurvivorStunKiller) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Authority_SurvivorStunKiller");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_SurvivorStunKiller) == 0x000040, "Wrong size on VoidEnergyOrbSpawner_Authority_SurvivorStunKiller");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunKiller, GameEventType) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunKiller::GameEventType' has a wrong offset!");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_SurvivorStunKiller, GameEventData) == 0x000010, "Member 'VoidEnergyOrbSpawner_Authority_SurvivorStunKiller::GameEventData' has a wrong offset!");

// Function Halloween.VoidEnergyOrbSpawner.Authority_TimerSpawnVoidEnergyOrb
// 0x0058 (0x0058 - 0x0000)
struct VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb final
{
public:
	struct FOrbProperties                         OrbProperties;                                     // 0x0000(0x0058)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb");
static_assert(sizeof(VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb) == 0x000058, "Wrong size on VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb");
static_assert(offsetof(VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb, OrbProperties) == 0x000000, "Member 'VoidEnergyOrbSpawner_Authority_TimerSpawnVoidEnergyOrb::OrbProperties' has a wrong offset!");

// Function Halloween.VoidEnergyOrbSpawner.Multicast_SpawnVoidEnergyOrb
// 0x0058 (0x0058 - 0x0000)
struct VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb final
{
public:
	struct FOrbProperties                         OrbProperties;                                     // 0x0000(0x0058)(ConstParm, Parm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb) == 0x000008, "Wrong alignment on VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb");
static_assert(sizeof(VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb) == 0x000058, "Wrong size on VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb");
static_assert(offsetof(VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb, OrbProperties) == 0x000000, "Member 'VoidEnergyOrbSpawner_Multicast_SpawnVoidEnergyOrb::OrbProperties' has a wrong offset!");

// Function Halloween.VoidZonePlayerComponent.Cosmetic_OnPlayerTeleported
// 0x0001 (0x0001 - 0x0000)
struct VoidZonePlayerComponent_Cosmetic_OnPlayerTeleported final
{
public:
	bool                                          TeleportIntoVoid;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZonePlayerComponent_Cosmetic_OnPlayerTeleported) == 0x000001, "Wrong alignment on VoidZonePlayerComponent_Cosmetic_OnPlayerTeleported");
static_assert(sizeof(VoidZonePlayerComponent_Cosmetic_OnPlayerTeleported) == 0x000001, "Wrong size on VoidZonePlayerComponent_Cosmetic_OnPlayerTeleported");
static_assert(offsetof(VoidZonePlayerComponent_Cosmetic_OnPlayerTeleported, TeleportIntoVoid) == 0x000000, "Member 'VoidZonePlayerComponent_Cosmetic_OnPlayerTeleported::TeleportIntoVoid' has a wrong offset!");

// Function Halloween.VoidZonePlayerComponent.PlayerDreamStateChanged
// 0x0002 (0x0002 - 0x0000)
struct VoidZonePlayerComponent_PlayerDreamStateChanged final
{
public:
	bool                                          IsInDreamworld;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LocallyObservedChanged;                            // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZonePlayerComponent_PlayerDreamStateChanged) == 0x000001, "Wrong alignment on VoidZonePlayerComponent_PlayerDreamStateChanged");
static_assert(sizeof(VoidZonePlayerComponent_PlayerDreamStateChanged) == 0x000002, "Wrong size on VoidZonePlayerComponent_PlayerDreamStateChanged");
static_assert(offsetof(VoidZonePlayerComponent_PlayerDreamStateChanged, IsInDreamworld) == 0x000000, "Member 'VoidZonePlayerComponent_PlayerDreamStateChanged::IsInDreamworld' has a wrong offset!");
static_assert(offsetof(VoidZonePlayerComponent_PlayerDreamStateChanged, LocallyObservedChanged) == 0x000001, "Member 'VoidZonePlayerComponent_PlayerDreamStateChanged::LocallyObservedChanged' has a wrong offset!");

}

