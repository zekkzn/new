#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BhvrAssetViewer

#include "Basic.hpp"

#include "BhvrAssetViewer_classes.hpp"
#include "BhvrAssetViewer_parameters.hpp"


namespace SDK
{

// DelegateFunction BhvrAssetViewer.BhvrAssetEnvironmentSystem.SelectedEnvironmentChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ABhvrAssetEnvironmentSystem::SelectedEnvironmentChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetEnvironmentSystem", "SelectedEnvironmentChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BhvrAssetViewer.BhvrAssetEnvironmentSystem.SelectEnvironment
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InDisplayName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetEnvironmentSystem::SelectEnvironment(const class FString& InDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetEnvironmentSystem", "SelectEnvironment");

	Params::BhvrAssetEnvironmentSystem_SelectEnvironment Parms{};

	Parms.InDisplayName = std::move(InDisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetLightGroup.SetIntensityMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewIntensityMultiplier                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBhvrAssetLightGroup::SetIntensityMultiplier(float NewIntensityMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightGroup", "SetIntensityMultiplier");

	Params::BhvrAssetLightGroup_SetIntensityMultiplier Parms{};

	Parms.NewIntensityMultiplier = NewIntensityMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetLightGroup.SetIsEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBhvrAssetLightGroup::SetIsEnabled(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightGroup", "SetIsEnabled");

	Params::BhvrAssetLightGroup_SetIsEnabled Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetLightGroup.GetIntensityMultiplier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UBhvrAssetLightGroup::GetIntensityMultiplier() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightGroup", "GetIntensityMultiplier");

	Params::BhvrAssetLightGroup_GetIntensityMultiplier Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetLightGroup.GetIsEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBhvrAssetLightGroup::GetIsEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightGroup", "GetIsEnabled");

	Params::BhvrAssetLightGroup_GetIsEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetLightGroup.HasLights
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBhvrAssetLightGroup::HasLights() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightGroup", "HasLights");

	Params::BhvrAssetLightGroup_HasLights Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetLightingRig.AddFillLight
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ULightComponent*                  InLight                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetLightingRig::AddFillLight(class ULightComponent* InLight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightingRig", "AddFillLight");

	Params::BhvrAssetLightingRig_AddFillLight Parms{};

	Parms.InLight = InLight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetLightingRig.AddFogLight
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ULightComponent*                  InLight                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetLightingRig::AddFogLight(class ULightComponent* InLight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightingRig", "AddFogLight");

	Params::BhvrAssetLightingRig_AddFogLight Parms{};

	Parms.InLight = InLight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetLightingRig.AddKeyLight
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ULightComponent*                  InLight                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetLightingRig::AddKeyLight(class ULightComponent* InLight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightingRig", "AddKeyLight");

	Params::BhvrAssetLightingRig_AddKeyLight Parms{};

	Parms.InLight = InLight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetLightingRig.AddKickLight
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ULightComponent*                  InLight                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetLightingRig::AddKickLight(class ULightComponent* InLight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightingRig", "AddKickLight");

	Params::BhvrAssetLightingRig_AddKickLight Parms{};

	Parms.InLight = InLight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetLightingRig.AddRimLight
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ULightComponent*                  InLight                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetLightingRig::AddRimLight(class ULightComponent* InLight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightingRig", "AddRimLight");

	Params::BhvrAssetLightingRig_AddRimLight Parms{};

	Parms.InLight = InLight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetLightingRig.GetDisplayName
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABhvrAssetLightingRig::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightingRig", "GetDisplayName");

	Params::BhvrAssetLightingRig_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction BhvrAssetViewer.BhvrAssetLightingSystem.SelectedLightingRigChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ABhvrAssetLightingSystem::SelectedLightingRigChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightingSystem", "SelectedLightingRigChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BhvrAssetViewer.BhvrAssetLightingSystem.SelectLightingRig
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InDisplayName                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetLightingSystem::SelectLightingRig(const class FString& InDisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetLightingSystem", "SelectLightingRig");

	Params::BhvrAssetLightingSystem_SelectLightingRig Parms{};

	Parms.InDisplayName = std::move(InDisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.PickFocusWithCursor
// (Final, Native, Public, BlueprintCallable)

void ABhvrAssetViewCamera::PickFocusWithCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "PickFocusWithCursor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.PickPivotWithCursor
// (Final, Native, Public, BlueprintCallable)

void ABhvrAssetViewCamera::PickPivotWithCursor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "PickPivotWithCursor");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.ResetPivot
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowCameraLag                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::ResetPivot(bool bAllowCameraLag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "ResetPivot");

	Params::BhvrAssetViewCamera_ResetPivot Parms{};

	Parms.bAllowCameraLag = bAllowCameraLag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.ResetRotation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowCameraLag                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::ResetRotation(bool bAllowCameraLag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "ResetRotation");

	Params::BhvrAssetViewCamera_ResetRotation Parms{};

	Parms.bAllowCameraLag = bAllowCameraLag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.ResetZoom
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bAllowCameraLag                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::ResetZoom(bool bAllowCameraLag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "ResetZoom");

	Params::BhvrAssetViewCamera_ResetZoom Parms{};

	Parms.bAllowCameraLag = bAllowCameraLag;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.SetAspectRatio
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewAspectRatio                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::SetAspectRatio(float NewAspectRatio)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "SetAspectRatio");

	Params::BhvrAssetViewCamera_SetAspectRatio Parms{};

	Parms.NewAspectRatio = NewAspectRatio;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.SetAutoFocusOffset
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewFocusTargetOffsetXY                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::SetAutoFocusOffset(const struct FVector& NewFocusTargetOffsetXY)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "SetAutoFocusOffset");

	Params::BhvrAssetViewCamera_SetAutoFocusOffset Parms{};

	Parms.NewFocusTargetOffsetXY = std::move(NewFocusTargetOffsetXY);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.SetBlurAmount
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewBlurAmount                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::SetBlurAmount(float NewBlurAmount)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "SetBlurAmount");

	Params::BhvrAssetViewCamera_SetBlurAmount Parms{};

	Parms.NewBlurAmount = NewBlurAmount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.SetExposureBias
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewExposureBias                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::SetExposureBias(float NewExposureBias)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "SetExposureBias");

	Params::BhvrAssetViewCamera_SetExposureBias Parms{};

	Parms.NewExposureBias = NewExposureBias;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.SetFieldOfView
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewFieldOfView                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::SetFieldOfView(float NewFieldOfView)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "SetFieldOfView");

	Params::BhvrAssetViewCamera_SetFieldOfView Parms{};

	Parms.NewFieldOfView = NewFieldOfView;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.SetRollAngle
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewRollAngle                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::SetRollAngle(float NewRollAngle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "SetRollAngle");

	Params::BhvrAssetViewCamera_SetRollAngle Parms{};

	Parms.NewRollAngle = NewRollAngle;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.SetShowAutoFocusTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::SetShowAutoFocusTarget(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "SetShowAutoFocusTarget");

	Params::BhvrAssetViewCamera_SetShowAutoFocusTarget Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.SetUseAutoFocus
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::SetUseAutoFocus(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "SetUseAutoFocus");

	Params::BhvrAssetViewCamera_SetUseAutoFocus Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.SetUseDepthOfField
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::SetUseDepthOfField(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "SetUseDepthOfField");

	Params::BhvrAssetViewCamera_SetUseDepthOfField Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.ZoomFit
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CenterOfMass                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             Bounds                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Padding                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCamera::ZoomFit(const struct FVector& CenterOfMass, const struct FBox& Bounds, const struct FVector& Padding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "ZoomFit");

	Params::BhvrAssetViewCamera_ZoomFit Parms{};

	Parms.CenterOfMass = std::move(CenterOfMass);
	Parms.Bounds = std::move(Bounds);
	Parms.Padding = std::move(Padding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.GetAspectRatio
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABhvrAssetViewCamera::GetAspectRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "GetAspectRatio");

	Params::BhvrAssetViewCamera_GetAspectRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.GetExposureBias
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABhvrAssetViewCamera::GetExposureBias() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "GetExposureBias");

	Params::BhvrAssetViewCamera_GetExposureBias Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.GetFieldOfView
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABhvrAssetViewCamera::GetFieldOfView() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "GetFieldOfView");

	Params::BhvrAssetViewCamera_GetFieldOfView Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewCamera.GetRollAngle
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABhvrAssetViewCamera::GetRollAngle() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCamera", "GetRollAngle");

	Params::BhvrAssetViewCamera_GetRollAngle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.LoadSequences
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FAssetData>               SequenceAssetDatas                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void ABhvrAssetViewCameraSequenceSystem::LoadSequences(const TArray<struct FAssetData>& SequenceAssetDatas)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "LoadSequences");

	Params::BhvrAssetViewCameraSequenceSystem_LoadSequences Parms{};

	Parms.SequenceAssetDatas = std::move(SequenceAssetDatas);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.PauseSequence
// (Final, Native, Public, BlueprintCallable)

void ABhvrAssetViewCameraSequenceSystem::PauseSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "PauseSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.PlaySequence
// (Final, Native, Public, BlueprintCallable)

void ABhvrAssetViewCameraSequenceSystem::PlaySequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "PlaySequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.RecordSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMoviePipelinePrimaryConfig*      Configuration                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCameraSequenceSystem::RecordSequence(const class FString& Filename, class UMoviePipelinePrimaryConfig* Configuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "RecordSequence");

	Params::BhvrAssetViewCameraSequenceSystem_RecordSequence Parms{};

	Parms.Filename = std::move(Filename);
	Parms.Configuration = Configuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.RestartSequence
// (Final, Native, Public, BlueprintCallable)

void ABhvrAssetViewCameraSequenceSystem::RestartSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "RestartSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.SelectCameraSequence
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DisplayName                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCameraSequenceSystem::SelectCameraSequence(const class FString& DisplayName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "SelectCameraSequence");

	Params::BhvrAssetViewCameraSequenceSystem_SelectCameraSequence Parms{};

	Parms.DisplayName = std::move(DisplayName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.SetIsLooping
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCameraSequenceSystem::SetIsLooping(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "SetIsLooping");

	Params::BhvrAssetViewCameraSequenceSystem_SetIsLooping Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.SetPlaybackPosition
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewPlaybackPosition                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewCameraSequenceSystem::SetPlaybackPosition(int32 NewPlaybackPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "SetPlaybackPosition");

	Params::BhvrAssetViewCameraSequenceSystem_SetPlaybackPosition Parms{};

	Parms.NewPlaybackPosition = NewPlaybackPosition;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.StopSequence
// (Final, Native, Public, BlueprintCallable)

void ABhvrAssetViewCameraSequenceSystem::StopSequence()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "StopSequence");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.GetIsLooping
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABhvrAssetViewCameraSequenceSystem::GetIsLooping() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "GetIsLooping");

	Params::BhvrAssetViewCameraSequenceSystem_GetIsLooping Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.GetMaxPlaybackPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABhvrAssetViewCameraSequenceSystem::GetMaxPlaybackPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "GetMaxPlaybackPosition");

	Params::BhvrAssetViewCameraSequenceSystem_GetMaxPlaybackPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.GetPlaybackPosition
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ABhvrAssetViewCameraSequenceSystem::GetPlaybackPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "GetPlaybackPosition");

	Params::BhvrAssetViewCameraSequenceSystem_GetPlaybackPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.GetSelectedCameraSequenceName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString ABhvrAssetViewCameraSequenceSystem::GetSelectedCameraSequenceName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewCameraSequenceSystem", "GetSelectedCameraSequenceName");

	Params::BhvrAssetViewCameraSequenceSystem_GetSelectedCameraSequenceName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewController.CalculateBounds
// (Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutCenterOfMass                                        (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBox                             OutBounds                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void UBhvrAssetViewController::CalculateBounds(struct FVector* OutCenterOfMass, struct FBox* OutBounds) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewController", "CalculateBounds");

	Params::BhvrAssetViewController_CalculateBounds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutCenterOfMass != nullptr)
		*OutCenterOfMass = std::move(Parms.OutCenterOfMass);

	if (OutBounds != nullptr)
		*OutBounds = std::move(Parms.OutBounds);
}


// Function BhvrAssetViewer.BhvrAssetViewController.GetScreenshotName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBhvrAssetViewController::GetScreenshotName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewController", "GetScreenshotName");

	Params::BhvrAssetViewController_GetScreenshotName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewController.IsLoading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBhvrAssetViewController::IsLoading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewController", "IsLoading");

	Params::BhvrAssetViewController_IsLoading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewData.GetDisplayName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBhvrAssetViewData::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewData", "GetDisplayName");

	Params::BhvrAssetViewData_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewData.GetId
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBhvrAssetViewData::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewData", "GetId");

	Params::BhvrAssetViewData_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewData.IsLoading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBhvrAssetViewData::IsLoading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewData", "IsLoading");

	Params::BhvrAssetViewData_IsLoading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewDataSource.GetSelectedAssetViewData
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UBhvrAssetViewData*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UBhvrAssetViewData* UBhvrAssetViewDataSource::GetSelectedAssetViewData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewDataSource", "GetSelectedAssetViewData");

	Params::BhvrAssetViewDataSource_GetSelectedAssetViewData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewDataSource.SelectAssetViewData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetViewDataId                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBhvrAssetViewDataSource::SelectAssetViewData(const class FString& AssetViewDataId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewDataSource", "SelectAssetViewData");

	Params::BhvrAssetViewDataSource_SelectAssetViewData Parms{};

	Parms.AssetViewDataId = std::move(AssetViewDataId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewDataSource.GetDisplayName
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBhvrAssetViewDataSource::GetDisplayName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewDataSource", "GetDisplayName");

	Params::BhvrAssetViewDataSource_GetDisplayName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewDataSource.GetId
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UBhvrAssetViewDataSource::GetId() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewDataSource", "GetId");

	Params::BhvrAssetViewDataSource_GetId Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewDataSource.IsLoading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UBhvrAssetViewDataSource::IsLoading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewDataSource", "IsLoading");

	Params::BhvrAssetViewDataSource_IsLoading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewer.BeginPlay
// (Native, Public, BlueprintCallable)

void ABhvrAssetViewer::BeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewer", "BeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewer.OnSelectedAssetViewDataChanged
// (Final, Native, Private)
// Parameters:
// class UBhvrAssetViewData*               OldAssetViewData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UBhvrAssetViewData*               NewAssetViewData                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewer::OnSelectedAssetViewDataChanged(class UBhvrAssetViewData* OldAssetViewData, class UBhvrAssetViewData* NewAssetViewData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewer", "OnSelectedAssetViewDataChanged");

	Params::BhvrAssetViewer_OnSelectedAssetViewDataChanged Parms{};

	Parms.OldAssetViewData = OldAssetViewData;
	Parms.NewAssetViewData = NewAssetViewData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewer.SelectAssetViewDataSource
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           AssetViewDataSourceId                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewer::SelectAssetViewDataSource(const class FString& AssetViewDataSourceId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewer", "SelectAssetViewDataSource");

	Params::BhvrAssetViewer_SelectAssetViewDataSource Parms{};

	Parms.AssetViewDataSourceId = std::move(AssetViewDataSourceId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewer.GetSelectedAssetViewController
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBhvrAssetViewController*   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UBhvrAssetViewController* ABhvrAssetViewer::GetSelectedAssetViewController() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewer", "GetSelectedAssetViewController");

	Params::BhvrAssetViewer_GetSelectedAssetViewController Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewer.GetSelectedAssetViewDataSource
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class UBhvrAssetViewDataSource*   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class UBhvrAssetViewDataSource* ABhvrAssetViewer::GetSelectedAssetViewDataSource() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewer", "GetSelectedAssetViewDataSource");

	Params::BhvrAssetViewer_GetSelectedAssetViewDataSource Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewer.IsLoading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABhvrAssetViewer::IsLoading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewer", "IsLoading");

	Params::BhvrAssetViewer_IsLoading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewScreenshotSystem.GetBufferVisualizationMaterialNames
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   InOutBufferVisualizationMaterialNames                  (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void ABhvrAssetViewScreenshotSystem::GetBufferVisualizationMaterialNames(TArray<class FString>* InOutBufferVisualizationMaterialNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BhvrAssetViewScreenshotSystem", "GetBufferVisualizationMaterialNames");

	Params::BhvrAssetViewScreenshotSystem_GetBufferVisualizationMaterialNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutBufferVisualizationMaterialNames != nullptr)
		*InOutBufferVisualizationMaterialNames = std::move(Parms.InOutBufferVisualizationMaterialNames);
}


// Function BhvrAssetViewer.BhvrAssetViewScreenshotSystem.CaptureScreen
// (Final, Native, Protected, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FIntVector                       ResolutionXY                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FBhvrScreenshotCaptureRegion     CaptureRegion                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void ABhvrAssetViewScreenshotSystem::CaptureScreen(const class FString& Filename, const struct FIntVector& ResolutionXY, const struct FBhvrScreenshotCaptureRegion& CaptureRegion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewScreenshotSystem", "CaptureScreen");

	Params::BhvrAssetViewScreenshotSystem_CaptureScreen Parms{};

	Parms.Filename = std::move(Filename);
	Parms.ResolutionXY = std::move(ResolutionXY);
	Parms.CaptureRegion = std::move(CaptureRegion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewScreenshotSystem.IsBufferVisualizationMaterialEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           BufferVisualizationMaterialName                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABhvrAssetViewScreenshotSystem::IsBufferVisualizationMaterialEnabled(const class FString& BufferVisualizationMaterialName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewScreenshotSystem", "IsBufferVisualizationMaterialEnabled");

	Params::BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled Parms{};

	Parms.BufferVisualizationMaterialName = std::move(BufferVisualizationMaterialName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewScreenshotSystem.SetBufferVisualizationMaterialEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           BufferVisualizationMaterialName                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsEnabled                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewScreenshotSystem::SetBufferVisualizationMaterialEnabled(const class FString& BufferVisualizationMaterialName, bool bIsEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewScreenshotSystem", "SetBufferVisualizationMaterialEnabled");

	Params::BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled Parms{};

	Parms.BufferVisualizationMaterialName = std::move(BufferVisualizationMaterialName);
	Parms.bIsEnabled = bIsEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction BhvrAssetViewer.BhvrAssetViewSocket.PropertyChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void ABhvrAssetViewSocket::PropertyChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "PropertyChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAssetLocation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewLocation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewSocket::SetAssetLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "SetAssetLocation");

	Params::BhvrAssetViewSocket_SetAssetLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAssetRotation
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         NewRotation                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

void ABhvrAssetViewSocket::SetAssetRotation(const struct FRotator& NewRotation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "SetAssetRotation");

	Params::BhvrAssetViewSocket_SetAssetRotation Parms{};

	Parms.NewRotation = std::move(NewRotation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAutoRotateDirection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EBhvrAssetViewRotation                  NewDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewSocket::SetAutoRotateDirection(EBhvrAssetViewRotation NewDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "SetAutoRotateDirection");

	Params::BhvrAssetViewSocket_SetAutoRotateDirection Parms{};

	Parms.NewDirection = NewDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAutoRotateEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewValue                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewSocket::SetAutoRotateEnabled(bool bNewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "SetAutoRotateEnabled");

	Params::BhvrAssetViewSocket_SetAutoRotateEnabled Parms{};

	Parms.bNewValue = bNewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAutoRotateSpeed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   NewSpeed                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ABhvrAssetViewSocket::SetAutoRotateSpeed(float NewSpeed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "SetAutoRotateSpeed");

	Params::BhvrAssetViewSocket_SetAutoRotateSpeed Parms{};

	Parms.NewSpeed = NewSpeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrAssetViewSocket.GetAssetTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FTransform                 ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FTransform ABhvrAssetViewSocket::GetAssetTransform() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "GetAssetTransform");

	Params::BhvrAssetViewSocket_GetAssetTransform Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewSocket.GetAutoRotateDirection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EBhvrAssetViewRotation                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EBhvrAssetViewRotation ABhvrAssetViewSocket::GetAutoRotateDirection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "GetAutoRotateDirection");

	Params::BhvrAssetViewSocket_GetAutoRotateDirection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewSocket.GetAutoRotateEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ABhvrAssetViewSocket::GetAutoRotateEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "GetAutoRotateEnabled");

	Params::BhvrAssetViewSocket_GetAutoRotateEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrAssetViewSocket.GetAutoRotateSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ABhvrAssetViewSocket::GetAutoRotateSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrAssetViewSocket", "GetAutoRotateSpeed");

	Params::BhvrAssetViewSocket_GetAutoRotateSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrWatermarkComponent.GetWatermarkLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UBhvrWatermarkComponent::GetWatermarkLocation()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrWatermarkComponent", "GetWatermarkLocation");

	Params::BhvrWatermarkComponent_GetWatermarkLocation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function BhvrAssetViewer.BhvrWatermarkComponent.SetWatermarkHidden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNewHidden                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBhvrWatermarkComponent::SetWatermarkHidden(bool bNewHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrWatermarkComponent", "SetWatermarkHidden");

	Params::BhvrWatermarkComponent_SetWatermarkHidden Parms{};

	Parms.bNewHidden = bNewHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrWatermarkComponent.SetWatermarkLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          NewLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBhvrWatermarkComponent::SetWatermarkLocation(const struct FVector& NewLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrWatermarkComponent", "SetWatermarkLocation");

	Params::BhvrWatermarkComponent_SetWatermarkLocation Parms{};

	Parms.NewLocation = std::move(NewLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function BhvrAssetViewer.BhvrWatermarkComponent.SetWatermarkSize
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// double                                  NewSize                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UBhvrWatermarkComponent::SetWatermarkSize(double NewSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BhvrWatermarkComponent", "SetWatermarkSize");

	Params::BhvrWatermarkComponent_SetWatermarkSize Parms{};

	Parms.NewSize = NewSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

