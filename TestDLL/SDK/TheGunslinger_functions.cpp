#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheGunslinger

#include "Basic.hpp"

#include "TheGunslinger_classes.hpp"
#include "TheGunslinger_parameters.hpp"


namespace SDK
{

// Function TheGunslinger.ChainPlayerMovementStatusEffect.OnIsChainCollidingChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsColliding                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChainPlayerMovementStatusEffect::OnIsChainCollidingChanged(bool IsColliding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainPlayerMovementStatusEffect", "OnIsChainCollidingChanged");

	Params::ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged Parms{};

	Parms.IsColliding = IsColliding;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.ChainLinkableComponent.OnKillerSet
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ASlasherPlayer*                   Killer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChainLinkableComponent::OnKillerSet(class ASlasherPlayer* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainLinkableComponent", "OnKillerSet");

	Params::ChainLinkableComponent_OnKillerSet Parms{};

	Parms.Killer = Killer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.ChainLinkableComponent.OnRep_OwningKiller
// (Final, Native, Private)

void UChainLinkableComponent::OnRep_OwningKiller()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChainLinkableComponent", "OnRep_OwningKiller");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.DeadMansSwitch.OnRep_BlockedGenerator
// (Final, Native, Private)
// Parameters:
// class AGenerator*                       PreviouslyBlockedGenerator                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDeadMansSwitch::OnRep_BlockedGenerator(class AGenerator* PreviouslyBlockedGenerator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeadMansSwitch", "OnRep_BlockedGenerator");

	Params::DeadMansSwitch_OnRep_BlockedGenerator Parms{};

	Parms.PreviouslyBlockedGenerator = PreviouslyBlockedGenerator;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.DeadMansSwitch.GetActivationDurationAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UDeadMansSwitch::GetActivationDurationAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DeadMansSwitch", "GetActivationDurationAtLevel");

	Params::DeadMansSwitch_GetActivationDurationAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction TheGunslinger.FireHarpoonRifleInteraction.OnFireHarpoon__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UFireHarpoonRifleInteraction::OnFireHarpoon__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireHarpoonRifleInteraction", "OnFireHarpoon__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction TheGunslinger.FireHarpoonRifleInteraction.OnHitPlayer__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UFireHarpoonRifleInteraction::OnHitPlayer__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireHarpoonRifleInteraction", "OnHitPlayer__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheGunslinger.FireHarpoonRifleInteraction.Server_HandleMissShotScores
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// TArray<class ADBDPlayer*>               NearMissedPlayers                                      (ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UFireHarpoonRifleInteraction::Server_HandleMissShotScores(const TArray<class ADBDPlayer*>& NearMissedPlayers)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireHarpoonRifleInteraction", "Server_HandleMissShotScores");

	Params::FireHarpoonRifleInteraction_Server_HandleMissShotScores Parms{};

	Parms.NearMissedPlayers = std::move(NearMissedPlayers);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.FireHarpoonRifleInteraction.Server_SetAimingSubstate
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// EFireHarpoonRifleAimingInteractionSubStateNewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UFireHarpoonRifleInteraction::Server_SetAimingSubstate(EFireHarpoonRifleAimingInteractionSubState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("FireHarpoonRifleInteraction", "Server_SetAimingSubstate");

	Params::FireHarpoonRifleInteraction_Server_SetAimingSubstate Parms{};

	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.Gearhead.Authority_OnCamperHealthStateChange
// (Final, Native, Private)
// Parameters:
// ECamperDamageState                      OldDamageState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECamperDamageState                      NewDamageState                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGearhead::Authority_OnCamperHealthStateChange(ECamperDamageState OldDamageState, ECamperDamageState NewDamageState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gearhead", "Authority_OnCamperHealthStateChange");

	Params::Gearhead_Authority_OnCamperHealthStateChange Parms{};

	Parms.OldDamageState = OldDamageState;
	Parms.NewDamageState = NewDamageState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.Gearhead.Authority_OnCamperRemoved
// (Final, Native, Private)
// Parameters:
// class ACamperPlayer*                    RemovedPlayer                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGearhead::Authority_OnCamperRemoved(class ACamperPlayer* RemovedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Gearhead", "Authority_OnCamperRemoved");

	Params::Gearhead_Authority_OnCamperRemoved Parms{};

	Parms.RemovedPlayer = RemovedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.GunslingerEffectsComponent.Multicast_PlayOutOfAmmoSound
// (Final, Net, Native, Event, NetMulticast, Private)

void UGunslingerEffectsComponent::Multicast_PlayOutOfAmmoSound()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GunslingerEffectsComponent", "Multicast_PlayOutOfAmmoSound");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TheGunslinger.GunslingerEffectsComponent.OnIsAimingChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    IsAiming                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGunslingerEffectsComponent::OnIsAimingChanged__DelegateSignature(bool IsAiming)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GunslingerEffectsComponent", "OnIsAimingChanged__DelegateSignature");

	Params::GunslingerEffectsComponent_OnIsAimingChanged__DelegateSignature Parms{};

	Parms.IsAiming = IsAiming;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.GunslingerEffectsComponent.OnItemUsedStateChanged
// (Final, Native, Private)
// Parameters:
// bool                                    IsPressed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UGunslingerEffectsComponent::OnItemUsedStateChanged(bool IsPressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GunslingerEffectsComponent", "OnItemUsedStateChanged");

	Params::GunslingerEffectsComponent_OnItemUsedStateChanged Parms{};

	Parms.IsPressed = IsPressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TheGunslinger.GunslingerEffectsComponent.PlayOutOfAmmoSound__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UGunslingerEffectsComponent::PlayOutOfAmmoSound__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("GunslingerEffectsComponent", "PlayOutOfAmmoSound__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheGunslinger.GunslingerUtilities.GetHarpoonRifle
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AHarpoonRifle*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AHarpoonRifle* UGunslingerUtilities::GetHarpoonRifle(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("GunslingerUtilities", "GetHarpoonRifle");

	Params::GunslingerUtilities_GetHarpoonRifle Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.HarpoonChainPositioner.AttachToAnimSocket
// (Final, Native, Public, BlueprintCallable)

void UHarpoonChainPositioner::AttachToAnimSocket()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HarpoonChainPositioner", "AttachToAnimSocket");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.HarpoonChainPositioner.AttachToRifle
// (Final, Native, Public, BlueprintCallable)

void UHarpoonChainPositioner::AttachToRifle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HarpoonChainPositioner", "AttachToRifle");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.HarpoonChainPositioner.OnCurrentHarpoonChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AActor*                           CurrentHarpoon                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarpoonChainPositioner::OnCurrentHarpoonChanged(class AActor* CurrentHarpoon)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HarpoonChainPositioner", "OnCurrentHarpoonChanged");

	Params::HarpoonChainPositioner_OnCurrentHarpoonChanged Parms{};

	Parms.CurrentHarpoon = CurrentHarpoon;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.HarpoonChainPositioner.OnHarpoonLoadedOnRifle
// (Event, Protected, BlueprintEvent)

void UHarpoonChainPositioner::OnHarpoonLoadedOnRifle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HarpoonChainPositioner", "OnHarpoonLoadedOnRifle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheGunslinger.HarpoonChainPositioner.OnHarpoonTravelingChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsTravelling                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarpoonChainPositioner::OnHarpoonTravelingChanged(bool IsTravelling)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HarpoonChainPositioner", "OnHarpoonTravelingChanged");

	Params::HarpoonChainPositioner_OnHarpoonTravelingChanged Parms{};

	Parms.IsTravelling = IsTravelling;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.HarpoonChainPositioner.OnOwnerCollected
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Collector                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHarpoonChainPositioner::OnOwnerCollected(class ADBDPlayer* Collector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HarpoonChainPositioner", "OnOwnerCollected");

	Params::HarpoonChainPositioner_OnOwnerCollected Parms{};

	Parms.Collector = Collector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.HarpoonProjectile.OnHarpoonStop
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FHitResult                       Result                                                 (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void AHarpoonProjectile::OnHarpoonStop(const struct FHitResult& Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HarpoonProjectile", "OnHarpoonStop");

	Params::HarpoonProjectile_OnHarpoonStop Parms{};

	Parms.Result = std::move(Result);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.HarpoonRifle.Authority_OnFireHarpoon
// (Final, Native, Private)

void AHarpoonRifle::Authority_OnFireHarpoon()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HarpoonRifle", "Authority_OnFireHarpoon");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.HarpoonRifle.GetChain
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ARifleChain*                      ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ARifleChain* AHarpoonRifle::GetChain() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("HarpoonRifle", "GetChain");

	Params::HarpoonRifle_GetChain Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.K19Utilities.K19CreateDecalSpawner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             DecalSpawnerName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               DecalMaterial                                          (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PoolSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESpawnerStrategyType                    SpawnerStrategyType                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK19Utilities::K19CreateDecalSpawner(const class UObject* WorldContextObject, class FName DecalSpawnerName, class UMaterialInterface* DecalMaterial, int32 PoolSize, ESpawnerStrategyType SpawnerStrategyType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("K19Utilities", "K19CreateDecalSpawner");

	Params::K19Utilities_K19CreateDecalSpawner Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DecalSpawnerName = DecalSpawnerName;
	Parms.DecalMaterial = DecalMaterial;
	Parms.PoolSize = PoolSize;
	Parms.SpawnerStrategyType = SpawnerStrategyType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.K19Utilities.K19ReleaseDecalSpawner
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             DecalSpawnerName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK19Utilities::K19ReleaseDecalSpawner(const class UObject* WorldContextObject, class FName DecalSpawnerName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("K19Utilities", "K19ReleaseDecalSpawner");

	Params::K19Utilities_K19ReleaseDecalSpawner Parms{};

	Parms.WorldContextObject = WorldContextObject;
	Parms.DecalSpawnerName = DecalSpawnerName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.RifleChain.BindToLinkedPlayer
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class ADBDPlayer*                       LinkedPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARifleChain::BindToLinkedPlayer(class ADBDPlayer* LinkedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "BindToLinkedPlayer");

	Params::RifleChain_BindToLinkedPlayer Parms{};

	Parms.LinkedPlayer = LinkedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.RifleChain.OnAttachToPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARifleChain::OnAttachToPlayer(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "OnAttachToPlayer");

	Params::RifleChain_OnAttachToPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TheGunslinger.RifleChain.OnIsCollidingChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    IsColliding                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARifleChain::OnIsCollidingChanged__DelegateSignature(bool IsColliding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "OnIsCollidingChanged__DelegateSignature");

	Params::RifleChain_OnIsCollidingChanged__DelegateSignature Parms{};

	Parms.IsColliding = IsColliding;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.RifleChain.OnLaunch
// (Event, Public, BlueprintEvent)

void ARifleChain::OnLaunch()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "OnLaunch");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheGunslinger.RifleChain.OnLinkedPlayerPerspectiveChanged
// (Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARifleChain::OnLinkedPlayerPerspectiveChanged(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "OnLinkedPlayerPerspectiveChanged");

	Params::RifleChain_OnLinkedPlayerPerspectiveChanged Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// DelegateFunction TheGunslinger.RifleChain.OnProjectileSet__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class AActor*                           Projectile                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARifleChain::OnProjectileSet__DelegateSignature(class AActor* Projectile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "OnProjectileSet__DelegateSignature");

	Params::RifleChain_OnProjectileSet__DelegateSignature Parms{};

	Parms.Projectile = Projectile;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.RifleChain.OnReelBackToRifle
// (Event, Public, BlueprintEvent)

void ARifleChain::OnReelBackToRifle()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "OnReelBackToRifle");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheGunslinger.RifleChain.OnUnattachFromPlayer
// (Event, Public, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARifleChain::OnUnattachFromPlayer(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "OnUnattachFromPlayer");

	Params::RifleChain_OnUnattachFromPlayer Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.RifleChain.SpawnChainPoints
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          Start                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Stop                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UCurveFloat*                      InfluenceCurve                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PointYPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PointZPosition                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    UseOffset                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 Spline                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 ARifleChain::SpawnChainPoints(const struct FVector& Start, const struct FVector& Stop, class UCurveFloat* InfluenceCurve, float PointYPosition, float PointZPosition, bool UseOffset, class USplineComponent* Spline)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "SpawnChainPoints");

	Params::RifleChain_SpawnChainPoints Parms{};

	Parms.Start = std::move(Start);
	Parms.Stop = std::move(Stop);
	Parms.InfluenceCurve = InfluenceCurve;
	Parms.PointYPosition = PointYPosition;
	Parms.PointZPosition = PointZPosition;
	Parms.UseOffset = UseOffset;
	Parms.Spline = Spline;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RifleChain.UnbindFromLinkedPlayer
// (Final, Native, Protected, BlueprintCallable)

void ARifleChain::UnbindFromLinkedPlayer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "UnbindFromLinkedPlayer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.RifleChain.UpdateChainMesh
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInstancedStaticMeshComponent*    Mesh                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USplineComponent*                 Spline                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Alpha                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ARifleChain::UpdateChainMesh(class UInstancedStaticMeshComponent* Mesh, class USplineComponent* Spline, float Alpha)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "UpdateChainMesh");

	Params::RifleChain_UpdateChainMesh Parms{};

	Parms.Mesh = Mesh;
	Parms.Spline = Spline;
	Parms.Alpha = Alpha;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.RifleChain.GetChainEnd
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ARifleChain::GetChainEnd() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "GetChainEnd");

	Params::RifleChain_GetChainEnd Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RifleChain.GetChainStart
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector ARifleChain::GetChainStart() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "GetChainStart");

	Params::RifleChain_GetChainStart Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RifleChain.GetChainTensionComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class URifleChainTensionComponent*      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URifleChainTensionComponent* ARifleChain::GetChainTensionComponent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "GetChainTensionComponent");

	Params::RifleChain_GetChainTensionComponent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RifleChain.GetFirstAndLastCollisionHits
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TArray<struct FHitResult>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<struct FHitResult> ARifleChain::GetFirstAndLastCollisionHits() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "GetFirstAndLastCollisionHits");

	Params::RifleChain_GetFirstAndLastCollisionHits Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RifleChain.GetOwningKiller
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ASlasherPlayer*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ASlasherPlayer* ARifleChain::GetOwningKiller() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "GetOwningKiller");

	Params::RifleChain_GetOwningKiller Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RifleChain.GetRiflePlayerLinker
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class URiflePlayerLinker*               ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class URiflePlayerLinker* ARifleChain::GetRiflePlayerLinker() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "GetRiflePlayerLinker");

	Params::RifleChain_GetRiflePlayerLinker Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RifleChain.GetUnwindingSpeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float ARifleChain::GetUnwindingSpeed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "GetUnwindingSpeed");

	Params::RifleChain_GetUnwindingSpeed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RifleChain.IsColliding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool ARifleChain::IsColliding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChain", "IsColliding");

	Params::RifleChain_IsColliding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// DelegateFunction TheGunslinger.RifleChainTensionComponent.OnIsBuildingTensionChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// bool                                    IsBuildingTension                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URifleChainTensionComponent::OnIsBuildingTensionChanged__DelegateSignature(bool IsBuildingTension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChainTensionComponent", "OnIsBuildingTensionChanged__DelegateSignature");

	Params::RifleChainTensionComponent_OnIsBuildingTensionChanged__DelegateSignature Parms{};

	Parms.IsBuildingTension = IsBuildingTension;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.RifleChainTensionComponent.OnRep_IsBuildingTension
// (Final, Native, Private)

void URifleChainTensionComponent::OnRep_IsBuildingTension()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChainTensionComponent", "OnRep_IsBuildingTension");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.RifleChainTensionComponent.OnTensionChargeableCompletionChanged
// (Final, Native, Private, HasOutParams)
// Parameters:
// bool                                    COMPLETED                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AActor*>                   InstigatorsForCompletion                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void URifleChainTensionComponent::OnTensionChargeableCompletionChanged(bool COMPLETED, const TArray<class AActor*>& InstigatorsForCompletion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChainTensionComponent", "OnTensionChargeableCompletionChanged");

	Params::RifleChainTensionComponent_OnTensionChargeableCompletionChanged Parms{};

	Parms.COMPLETED = COMPLETED;
	Parms.InstigatorsForCompletion = std::move(InstigatorsForCompletion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.RifleChainTensionComponent.GetProgress
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float URifleChainTensionComponent::GetProgress() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChainTensionComponent", "GetProgress");

	Params::RifleChainTensionComponent_GetProgress Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RifleChainTensionComponent.IsBuildingTension
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URifleChainTensionComponent::IsBuildingTension() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RifleChainTensionComponent", "IsBuildingTension");

	Params::RifleChainTensionComponent_IsBuildingTension Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RiflePlayerLinker.Client_OnAuthorityTensionBreakChain
// (Final, Net, NetReliable, Native, Event, Private, NetClient)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiflePlayerLinker::Client_OnAuthorityTensionBreakChain(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RiflePlayerLinker", "Client_OnAuthorityTensionBreakChain");

	Params::RiflePlayerLinker_Client_OnAuthorityTensionBreakChain Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.RiflePlayerLinker.Multicast_Link
// (Net, NetReliable, Native, Event, NetMulticast, Public)
// Parameters:
// class ADBDPlayer*                       LinkedPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiflePlayerLinker::Multicast_Link(class ADBDPlayer* LinkedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RiflePlayerLinker", "Multicast_Link");

	Params::RiflePlayerLinker_Multicast_Link Parms{};

	Parms.LinkedPlayer = LinkedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.RiflePlayerLinker.Multicast_Unlink
// (Net, NetReliable, Native, Event, NetMulticast, Public)

void URiflePlayerLinker::Multicast_Unlink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RiflePlayerLinker", "Multicast_Unlink");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TheGunslinger.RiflePlayerLinker.OnLinkedPlayerSet__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// class ADBDPlayer*                       LinkedPlayer                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiflePlayerLinker::OnLinkedPlayerSet__DelegateSignature(class ADBDPlayer* LinkedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RiflePlayerLinker", "OnLinkedPlayerSet__DelegateSignature");

	Params::RiflePlayerLinker_OnLinkedPlayerSet__DelegateSignature Parms{};

	Parms.LinkedPlayer = LinkedPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.RiflePlayerLinker.Server_OnClientConfirmTensionBreakChain
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URiflePlayerLinker::Server_OnClientConfirmTensionBreakChain(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RiflePlayerLinker", "Server_OnClientConfirmTensionBreakChain");

	Params::RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain Parms{};

	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.RiflePlayerLinker.GetLinkedPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADBDPlayer*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADBDPlayer* URiflePlayerLinker::GetLinkedPlayer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RiflePlayerLinker", "GetLinkedPlayer");

	Params::RiflePlayerLinker_GetLinkedPlayer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.RiflePlayerLinker.GetLinkOwner
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ADBDPlayer*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ADBDPlayer* URiflePlayerLinker::GetLinkOwner() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RiflePlayerLinker", "GetLinkOwner");

	Params::RiflePlayerLinker_GetLinkOwner Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheGunslinger.SurvivorChainLinkableComponent.OnLocallyObservedChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USurvivorChainLinkableComponent::OnLocallyObservedChanged(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorChainLinkableComponent", "OnLocallyObservedChanged");

	Params::SurvivorChainLinkableComponent_OnLocallyObservedChanged Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.SurvivorChainLinkableComponent.OnSightStatusChanged
// (Event, Protected, BlueprintEvent)
// Parameters:
// ESightStatus                            Status                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USurvivorChainLinkableComponent::OnSightStatusChanged(ESightStatus Status)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorChainLinkableComponent", "OnSightStatusChanged");

	Params::SurvivorChainLinkableComponent_OnSightStatusChanged Parms{};

	Parms.Status = Status;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.SurvivorChainLinkableComponent.OnSurvivorBreakFreeFromHarpoon
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USurvivorChainLinkableComponent::OnSurvivorBreakFreeFromHarpoon(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorChainLinkableComponent", "OnSurvivorBreakFreeFromHarpoon");

	Params::SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheGunslinger.SurvivorChainLinkableComponent.OnRep_VelocityAdditiveStrategy
// (Final, Native, Private, Const)

void USurvivorChainLinkableComponent::OnRep_VelocityAdditiveStrategy() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorChainLinkableComponent", "OnRep_VelocityAdditiveStrategy");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheGunslinger.SurvivorReelVelocityAdditiveStrategy.OnRep_OwningKiller
// (Final, Native, Private)

void USurvivorReelVelocityAdditiveStrategy::OnRep_OwningKiller()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SurvivorReelVelocityAdditiveStrategy", "OnRep_OwningKiller");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

