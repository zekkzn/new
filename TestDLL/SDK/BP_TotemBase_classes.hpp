#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TotemBase

#include "Basic.hpp"

#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "TheClown_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_TotemBase.BP_TotemBase_C
// 0x01D0 (0x06B8 - 0x04E8)
class ABP_TotemBase_C final : public ATotem
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04E8(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   SM_HexTotem_DestroyVAT;                            // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDBDNavModifierComponent*               DBDNavModifier;                                    // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_HexTotem01_Broken_Atl;                          // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDestructibleComponent*                 DestructibleMesh;                                  // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak_Audio_Totem;                                    // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          MapActorPrimitive;                                 // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDBDOutlineComponent*                   DBDOutline;                                        // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractor*                            MainInteractor;                                    // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MainMesh;                                          // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_BoonTotemGlow_Cylinder;                         // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Totem_Boon_CandleFlame_03;                       // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Totem_Boon_CandleFlame_02;                       // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Totem_Boon_CandleFlame_01;                       // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SM_TotemBlocker_Entity_Perk;                       // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator;                                         // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_SnuffTotem_C*                       SnuffTotem;                                        // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    WIP_BoonBlueLight_remove_after_replacement_;       // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_CleanseTotem_C*                     CleanseTotem;                                      // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_BlessTotem_C*                       BlessTotem;                                        // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChargeableComponent*                   BlessTotemChargeable;                              // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBlessTotemInterrupt_C*                 BlessTotemInterrupt;                               // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPointLightComponent*                   ATL_PointLight;                                    // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_MK_InfectedObject_Totem;                         // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator8;                                        // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator7;                                        // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator6;                                        // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator5;                                        // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator4;                                        // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator3;                                        // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator2;                                        // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator1;                                        // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMapActorComponent*                     MapActor;                                          // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChargeableComponent*                   CleanseTotemChargeable;                            // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UCleanseTotemInterrupt_C*               CleanseTotemInterrupt;                             // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractorZone;                                    // 0x0600(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_TotemBurst;                                      // 0x0608(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USpotLightComponent*                    SpotLight;                                         // 0x0610(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Totem;                                           // 0x0618(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	float                                         HexTotem_PlayVAT_VAT_Frame_F6129D1B49155BCBB2CC34AF2C681A3D; // 0x0620(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            HexTotem_PlayVAT__Direction_F6129D1B49155BCBB2CC34AF2C681A3D; // 0x0624(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_625[0x3];                                      // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     HexTotem_PlayVAT;                                  // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FVector                                TML_BoonLightBeamController_Boon_Light_Beam_Scale_FA82EC074C208BD75DE496959CAFA119; // 0x0630(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         TML_BoonLightBeamController_Boon_Light_Beam_Intensity_FA82EC074C208BD75DE496959CAFA119; // 0x0648(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TML_BoonLightBeamController__Direction_FA82EC074C208BD75DE496959CAFA119; // 0x064C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_64D[0x3];                                      // 0x064D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TML_BoonLightBeamController;                       // 0x0650(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         TML_EntityBlockerDissolve_Dissolve_Progress_F044324145C4D89C63D23EB80754A1DA; // 0x0658(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETimelineDirection                            TML_EntityBlockerDissolve__Direction_F044324145C4D89C63D23EB80754A1DA; // 0x065C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimelineComponent*                     TML_EntityBlockerDissolve;                         // 0x0660(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      OutlineFadeSlasher;                                // 0x0668(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           RevealedColorForCamper;                            // 0x0670(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Totem_Blocker_Entity;                            // 0x0680(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class UParticleSystemComponent*>       BoonCandleFlames;                                  // 0x0688(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	class UParticleSystemComponent*               P_Totem_Boon_01;                                   // 0x0698(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Totem_Boon_Zone_01;                              // 0x06A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_Totem_Rekindled;                                 // 0x06A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               DMI_HexDestroyVAT;                                 // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void TML_EntityBlockerDissolve__UpdateFunc();
	void TML_EntityBlockerDissolve__FinishedFunc();
	void TML_BoonLightBeamController__UpdateFunc();
	void TML_BoonLightBeamController__FinishedFunc();
	void Switch_Oni_Weapons_To_Normal();
	void Switch_Kanobo_to_Normal_Mode();
	void Switch_Kanobo_To_Demon_Mode();
	void Survivor_BoonRadius_Exit();
	void Survivor_BoonRadius_Enter();
	void Stop_Travelling_PP();
	void Stop_Travelling_Dissolve();
	void Stop_Saliva_VFX();
	void Stop_Pounce_VFX();
	void StartDeathBedRelocateVignette();
	void StartDeathBedDissolve();
	void Start_Travelling_PP();
	void Start_Travelling_Dissolve();
	void Start_Saliva_VFX();
	void Start_Pounce_VFX();
	void SpawnFullScreenBlood();
	void SpawnFakeBullet();
	void ShowSyringe();
	void ShowGunBullet();
	void ShowDemonCosmetic();
	void Show_Oni_Katana();
	void SetPlayerExposedVFX();
	void SetHighlightedVFX();
	void ReturnToDemonMode();
	void ReturnOniToNormal();
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void ReceiveBeginPlay();
	void PostCleanseAkEventss(ETotemState OldTotemState);
	void OnUnblockTotemCosmetic(class ADBDPlayer* Player);
	void OnTotemStateChanged(const ETotemState OldTotemState, const ETotemState NewTotemState);
	void OnHexUnbound();
	void OnHexBound();
	void OnCleanseTotem(class ATotem* Totem, const ETotemState OldTotemState);
	void OnBoonUnbound();
	void OnBoonBound();
	void OnBlockTotemCosmetic(class ADBDPlayer* Player);
	void On_Execution();
	void Killer_LungeAttack_Start();
	void Killer_LungeAttack_End();
	void K22_WrongLandingVignette(bool WrongLanding);
	void K22_WrongLanding(bool Wrong_Landing);
	void K22_SpawnWipeVFX();
	void K22_ReleaseBrother();
	void K22_QuickDissolveBrother();
	void K22_MembraneRecovery();
	void K22_MembraneDelete();
	void K22_JumpTrail_Deactivate();
	void K22_JumpTrail_Activate();
	void K22_Jump_Inactive();
	void K22_Jump_Active();
	void K22_IsAttachedLocker(bool IsAttachedLocker);
	void K22_HighlightSuccessfulAttackStop();
	void K22_HighlightSuccessfulAttack();
	void K22_HighlightDormantMain(bool IsDormantMain_);
	void K22_HighlightMissJump_Stop();
	void K22_HighlightDormant(bool IsDormant_);
	void K22_HighlightMissJump();
	void K22_DetachedFromSurvivor_VFX();
	void K22_BrotherDissolveLocker();
	void K22_BabyRespawn();
	void K22_BabyBloodDissolve();
	void K22_AttachedToSurvivor_VFX();
	void K12_Killer_RemoveVignette();
	void K12_Killer_PlaceVignette();
	void K12_Killer_BombSmokeColor();
	void K12_Killer_AntidoteEnd();
	void K12_Killer_AntidoteBegin();
	void K12_GetToxinVignette(EBombType Bomb_Type);
	void K12_GetAntidoteVignette();
	void K22_DormantAttachedSlasher();
	void K05_TrapImpactOff();
	void K05_TrapImpact();
	void K05_SetTrap();
	void K05_BloodDrops();
	void K04_TelekinesisOn();
	void K04_TelekinesisOff();
	void K04_InvisibleOn();
	void K04_InvisibleOff();
	void HideSyringeOnStun();
	void HideSyringe();
	void HideGunBullet();
	void HideDemonCosmetic();
	void Hide_Oni_Katana_TPV();
	void Hide_Oni_Katana();
	void HexTotem_PlayVAT__UpdateFunc();
	void HexTotem_PlayVAT__FinishedFunc();
	void ExecuteUbergraph_BP_TotemBase(int32 EntryPoint);
	void DisableDemonMode();
	void Destroy_Blood_Orb();
	void DeactivateKnockoutVFX();
	void Camper_AntidoteBoostVignette_Start();
	void Camper_AntidoteBoostVignette_End();
	void Boon_Unbound();
	void AnimateLiquidSyringe();
	void AddBloodDrippingGKMoriMale();
	void ActivateVignetteOnWallCollision();
	void ActivateSacrificeCamBlood();
	void ActivatePounceStateVFX();
	void ActivatePlayerLightningVFX(const class UMaterialInstanceDynamic*& LightningFX, bool Intense);
	void ActivatePlayerGlitchVFX(const class UMaterialInstanceDynamic*& GlitchFX, const bool Face, bool Madness, bool Killer);
	void ActivatePlayerExposedVFX();
	void ActivateLocalPlayerExposedVFX();
	void ActivateKnockoutVFX();
	void ActivateEndGameVignette(bool IsActive);
	void ActivateAttemptEscapeVFX();

	bool IsInterruptionPossible(const class ADBDPlayer* Interruptor, const class ADBDPlayer* Interruptee, const class UInteractor* Interactor, const class UInteractionDefinition* Definition, const class UInterruptionDefinition* Interruption) const;
	class UInteractor* GetMainInteractor() const;
	void GetInfectedParticles(TArray<class UParticleSystemComponent*>* InfectedParticleArray) const;
	void GetInfectedDecals(TArray<class UDecalComponent*>* InfectedDecals) const;
	class UChargeableInteractionDefinition* GetCleanseTotemInteraction() const;
	class UChargeableInteractionDefinition* GetBlessTotemInteraction() const;
	class UAkComponent* GetAkAudioComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_TotemBase_C">();
	}
	static class ABP_TotemBase_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_TotemBase_C>();
	}
};
static_assert(alignof(ABP_TotemBase_C) == 0x000008, "Wrong alignment on ABP_TotemBase_C");
static_assert(sizeof(ABP_TotemBase_C) == 0x0006B8, "Wrong size on ABP_TotemBase_C");
static_assert(offsetof(ABP_TotemBase_C, UberGraphFrame) == 0x0004E8, "Member 'ABP_TotemBase_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, SM_HexTotem_DestroyVAT) == 0x0004F0, "Member 'ABP_TotemBase_C::SM_HexTotem_DestroyVAT' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, DBDNavModifier) == 0x0004F8, "Member 'ABP_TotemBase_C::DBDNavModifier' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, SM_HexTotem01_Broken_Atl) == 0x000500, "Member 'ABP_TotemBase_C::SM_HexTotem01_Broken_Atl' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, DestructibleMesh) == 0x000508, "Member 'ABP_TotemBase_C::DestructibleMesh' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Ak_Audio_Totem) == 0x000510, "Member 'ABP_TotemBase_C::Ak_Audio_Totem' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, MapActorPrimitive) == 0x000518, "Member 'ABP_TotemBase_C::MapActorPrimitive' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, DBDOutline) == 0x000520, "Member 'ABP_TotemBase_C::DBDOutline' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, MainInteractor) == 0x000528, "Member 'ABP_TotemBase_C::MainInteractor' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, MainMesh) == 0x000530, "Member 'ABP_TotemBase_C::MainMesh' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, SM_BoonTotemGlow_Cylinder) == 0x000538, "Member 'ABP_TotemBase_C::SM_BoonTotemGlow_Cylinder' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_Totem_Boon_CandleFlame_03) == 0x000540, "Member 'ABP_TotemBase_C::P_Totem_Boon_CandleFlame_03' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_Totem_Boon_CandleFlame_02) == 0x000548, "Member 'ABP_TotemBase_C::P_Totem_Boon_CandleFlame_02' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_Totem_Boon_CandleFlame_01) == 0x000550, "Member 'ABP_TotemBase_C::P_Totem_Boon_CandleFlame_01' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, SM_TotemBlocker_Entity_Perk) == 0x000558, "Member 'ABP_TotemBase_C::SM_TotemBlocker_Entity_Perk' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Validator) == 0x000560, "Member 'ABP_TotemBase_C::Validator' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, SnuffTotem) == 0x000568, "Member 'ABP_TotemBase_C::SnuffTotem' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, WIP_BoonBlueLight_remove_after_replacement_) == 0x000570, "Member 'ABP_TotemBase_C::WIP_BoonBlueLight_remove_after_replacement_' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, CleanseTotem) == 0x000578, "Member 'ABP_TotemBase_C::CleanseTotem' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, BlessTotem) == 0x000580, "Member 'ABP_TotemBase_C::BlessTotem' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, BlessTotemChargeable) == 0x000588, "Member 'ABP_TotemBase_C::BlessTotemChargeable' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, BlessTotemInterrupt) == 0x000590, "Member 'ABP_TotemBase_C::BlessTotemInterrupt' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, ATL_PointLight) == 0x000598, "Member 'ABP_TotemBase_C::ATL_PointLight' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_MK_InfectedObject_Totem) == 0x0005A0, "Member 'ABP_TotemBase_C::P_MK_InfectedObject_Totem' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Validator8) == 0x0005A8, "Member 'ABP_TotemBase_C::Validator8' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Validator7) == 0x0005B0, "Member 'ABP_TotemBase_C::Validator7' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Validator6) == 0x0005B8, "Member 'ABP_TotemBase_C::Validator6' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Validator5) == 0x0005C0, "Member 'ABP_TotemBase_C::Validator5' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Validator4) == 0x0005C8, "Member 'ABP_TotemBase_C::Validator4' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Validator3) == 0x0005D0, "Member 'ABP_TotemBase_C::Validator3' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Validator2) == 0x0005D8, "Member 'ABP_TotemBase_C::Validator2' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, Validator1) == 0x0005E0, "Member 'ABP_TotemBase_C::Validator1' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, MapActor) == 0x0005E8, "Member 'ABP_TotemBase_C::MapActor' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, CleanseTotemChargeable) == 0x0005F0, "Member 'ABP_TotemBase_C::CleanseTotemChargeable' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, CleanseTotemInterrupt) == 0x0005F8, "Member 'ABP_TotemBase_C::CleanseTotemInterrupt' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, InteractorZone) == 0x000600, "Member 'ABP_TotemBase_C::InteractorZone' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_TotemBurst) == 0x000608, "Member 'ABP_TotemBase_C::P_TotemBurst' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, SpotLight) == 0x000610, "Member 'ABP_TotemBase_C::SpotLight' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_Totem) == 0x000618, "Member 'ABP_TotemBase_C::P_Totem' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, HexTotem_PlayVAT_VAT_Frame_F6129D1B49155BCBB2CC34AF2C681A3D) == 0x000620, "Member 'ABP_TotemBase_C::HexTotem_PlayVAT_VAT_Frame_F6129D1B49155BCBB2CC34AF2C681A3D' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, HexTotem_PlayVAT__Direction_F6129D1B49155BCBB2CC34AF2C681A3D) == 0x000624, "Member 'ABP_TotemBase_C::HexTotem_PlayVAT__Direction_F6129D1B49155BCBB2CC34AF2C681A3D' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, HexTotem_PlayVAT) == 0x000628, "Member 'ABP_TotemBase_C::HexTotem_PlayVAT' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, TML_BoonLightBeamController_Boon_Light_Beam_Scale_FA82EC074C208BD75DE496959CAFA119) == 0x000630, "Member 'ABP_TotemBase_C::TML_BoonLightBeamController_Boon_Light_Beam_Scale_FA82EC074C208BD75DE496959CAFA119' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, TML_BoonLightBeamController_Boon_Light_Beam_Intensity_FA82EC074C208BD75DE496959CAFA119) == 0x000648, "Member 'ABP_TotemBase_C::TML_BoonLightBeamController_Boon_Light_Beam_Intensity_FA82EC074C208BD75DE496959CAFA119' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, TML_BoonLightBeamController__Direction_FA82EC074C208BD75DE496959CAFA119) == 0x00064C, "Member 'ABP_TotemBase_C::TML_BoonLightBeamController__Direction_FA82EC074C208BD75DE496959CAFA119' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, TML_BoonLightBeamController) == 0x000650, "Member 'ABP_TotemBase_C::TML_BoonLightBeamController' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, TML_EntityBlockerDissolve_Dissolve_Progress_F044324145C4D89C63D23EB80754A1DA) == 0x000658, "Member 'ABP_TotemBase_C::TML_EntityBlockerDissolve_Dissolve_Progress_F044324145C4D89C63D23EB80754A1DA' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, TML_EntityBlockerDissolve__Direction_F044324145C4D89C63D23EB80754A1DA) == 0x00065C, "Member 'ABP_TotemBase_C::TML_EntityBlockerDissolve__Direction_F044324145C4D89C63D23EB80754A1DA' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, TML_EntityBlockerDissolve) == 0x000660, "Member 'ABP_TotemBase_C::TML_EntityBlockerDissolve' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, OutlineFadeSlasher) == 0x000668, "Member 'ABP_TotemBase_C::OutlineFadeSlasher' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, RevealedColorForCamper) == 0x000670, "Member 'ABP_TotemBase_C::RevealedColorForCamper' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_Totem_Blocker_Entity) == 0x000680, "Member 'ABP_TotemBase_C::P_Totem_Blocker_Entity' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, BoonCandleFlames) == 0x000688, "Member 'ABP_TotemBase_C::BoonCandleFlames' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_Totem_Boon_01) == 0x000698, "Member 'ABP_TotemBase_C::P_Totem_Boon_01' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_Totem_Boon_Zone_01) == 0x0006A0, "Member 'ABP_TotemBase_C::P_Totem_Boon_Zone_01' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, P_Totem_Rekindled) == 0x0006A8, "Member 'ABP_TotemBase_C::P_Totem_Rekindled' has a wrong offset!");
static_assert(offsetof(ABP_TotemBase_C, DMI_HexDestroyVAT) == 0x0006B0, "Member 'ABP_TotemBase_C::DMI_HexDestroyVAT' has a wrong offset!");

}

