#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheBlight

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "DBDBots_classes.hpp"
#include "DBDAnimation_classes.hpp"
#include "TheBlight_structs.hpp"
#include "DBDAttack_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "StatSystem_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"
#include "DBDCompetence_classes.hpp"


namespace SDK
{

// Class TheBlight.ActivateBlightPower
// 0x0000 (0x08C0 - 0x08C0)
class UActivateBlightPower final : public UChargeableInteractionDefinition
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActivateBlightPower">();
	}
	static class UActivateBlightPower* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActivateBlightPower>();
	}
};
static_assert(alignof(UActivateBlightPower) == 0x000010, "Wrong alignment on UActivateBlightPower");
static_assert(sizeof(UActivateBlightPower) == 0x0008C0, "Wrong size on UActivateBlightPower");

// Class TheBlight.Addon_TheBlight_18
// 0x0008 (0x02F0 - 0x02E8)
class UAddon_TheBlight_18 final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _blightUndetectableEffect;                         // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_18">();
	}
	static class UAddon_TheBlight_18* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_18>();
	}
};
static_assert(alignof(UAddon_TheBlight_18) == 0x000008, "Wrong alignment on UAddon_TheBlight_18");
static_assert(sizeof(UAddon_TheBlight_18) == 0x0002F0, "Wrong size on UAddon_TheBlight_18");
static_assert(offsetof(UAddon_TheBlight_18, _blightUndetectableEffect) == 0x0002E8, "Member 'UAddon_TheBlight_18::_blightUndetectableEffect' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_19
// 0x0010 (0x02F8 - 0x02E8)
class UAddon_TheBlight_19 final : public UItemAddon
{
public:
	TSubclassOf<class UStatusEffect>              _timedRevealToKillerEffectClass;                   // 0x02E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _survivorInRangeDistance;                          // 0x02F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _survivorRevealTime;                               // 0x02F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_19">();
	}
	static class UAddon_TheBlight_19* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_19>();
	}
};
static_assert(alignof(UAddon_TheBlight_19) == 0x000008, "Wrong alignment on UAddon_TheBlight_19");
static_assert(sizeof(UAddon_TheBlight_19) == 0x0002F8, "Wrong size on UAddon_TheBlight_19");
static_assert(offsetof(UAddon_TheBlight_19, _timedRevealToKillerEffectClass) == 0x0002E8, "Member 'UAddon_TheBlight_19::_timedRevealToKillerEffectClass' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_19, _survivorInRangeDistance) == 0x0002F0, "Member 'UAddon_TheBlight_19::_survivorInRangeDistance' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_19, _survivorRevealTime) == 0x0002F4, "Member 'UAddon_TheBlight_19::_survivorRevealTime' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_BaseConsecutiveDashModifier
// 0x0018 (0x0300 - 0x02E8)
class UAddon_TheBlight_BaseConsecutiveDashModifier final : public UItemAddon
{
public:
	struct FGameplayTag                           _modifierTag;                                      // 0x02E8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _increasePerDash;                                  // 0x02F4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _defaultModifierValue;                             // 0x02F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_BaseConsecutiveDashModifier">();
	}
	static class UAddon_TheBlight_BaseConsecutiveDashModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_BaseConsecutiveDashModifier>();
	}
};
static_assert(alignof(UAddon_TheBlight_BaseConsecutiveDashModifier) == 0x000008, "Wrong alignment on UAddon_TheBlight_BaseConsecutiveDashModifier");
static_assert(sizeof(UAddon_TheBlight_BaseConsecutiveDashModifier) == 0x000300, "Wrong size on UAddon_TheBlight_BaseConsecutiveDashModifier");
static_assert(offsetof(UAddon_TheBlight_BaseConsecutiveDashModifier, _modifierTag) == 0x0002E8, "Member 'UAddon_TheBlight_BaseConsecutiveDashModifier::_modifierTag' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_BaseConsecutiveDashModifier, _increasePerDash) == 0x0002F4, "Member 'UAddon_TheBlight_BaseConsecutiveDashModifier::_increasePerDash' has a wrong offset!");
static_assert(offsetof(UAddon_TheBlight_BaseConsecutiveDashModifier, _defaultModifierValue) == 0x0002F8, "Member 'UAddon_TheBlight_BaseConsecutiveDashModifier::_defaultModifierValue' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_BaseForceMaxToken
// 0x0008 (0x02F0 - 0x02E8)
class UAddon_TheBlight_BaseForceMaxToken final : public UItemAddon
{
public:
	uint8                                         _overridenMaxDashToken;                            // 0x02E8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2E9[0x7];                                      // 0x02E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_BaseForceMaxToken">();
	}
	static class UAddon_TheBlight_BaseForceMaxToken* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_BaseForceMaxToken>();
	}
};
static_assert(alignof(UAddon_TheBlight_BaseForceMaxToken) == 0x000008, "Wrong alignment on UAddon_TheBlight_BaseForceMaxToken");
static_assert(sizeof(UAddon_TheBlight_BaseForceMaxToken) == 0x0002F0, "Wrong size on UAddon_TheBlight_BaseForceMaxToken");
static_assert(offsetof(UAddon_TheBlight_BaseForceMaxToken, _overridenMaxDashToken) == 0x0002E8, "Member 'UAddon_TheBlight_BaseForceMaxToken::_overridenMaxDashToken' has a wrong offset!");

// Class TheBlight.Addon_TheBlight_SoulChemical
// 0x0008 (0x02F0 - 0x02E8)
class UAddon_TheBlight_SoulChemical final : public UItemAddon
{
public:
	float                                         _firstDashSpeedIncrease;                           // 0x02E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2EC[0x4];                                      // 0x02EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Addon_TheBlight_SoulChemical">();
	}
	static class UAddon_TheBlight_SoulChemical* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAddon_TheBlight_SoulChemical>();
	}
};
static_assert(alignof(UAddon_TheBlight_SoulChemical) == 0x000008, "Wrong alignment on UAddon_TheBlight_SoulChemical");
static_assert(sizeof(UAddon_TheBlight_SoulChemical) == 0x0002F0, "Wrong size on UAddon_TheBlight_SoulChemical");
static_assert(offsetof(UAddon_TheBlight_SoulChemical, _firstDashSpeedIncrease) == 0x0002E8, "Member 'UAddon_TheBlight_SoulChemical::_firstDashSpeedIncrease' has a wrong offset!");

// Class TheBlight.AISkill_Interaction_BlightDash
// 0x0448 (0x06F8 - 0x02B0)
class UAISkill_Interaction_BlightDash final : public UAISkill_Interaction_KillerPower
{
public:
	float                                         FirstDashCheckInterval;                            // 0x02B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ChainDashCheckInterval;                            // 0x02B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    MinimumFirstDashDistance;                          // 0x02B8(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    MinimumTraversalDistance;                          // 0x0318(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    MinimumEdgeDistance;                               // 0x0378(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    MaxDistancePerDash;                                // 0x03D8(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    MaxDistanceFirstDashSearchRadius;                  // 0x0438(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    MaxDistanceChainDashSearchRadius;                  // 0x0498(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    ChaseLoopSearchDistance;                           // 0x04F8(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    ChaseLoopSearchRadius;                             // 0x0558(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    ChaseSearchRadius;                                 // 0x05B8(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         SearchVerticalHeight;                              // 0x0618(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxCollisionAngle;                                 // 0x061C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FAITunableParameter                    SafeCollisionAngle;                                // 0x0620(0x0060)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         DashDistanceToAngleCoefficient;                    // 0x0680(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DashDistanceToAnglePower;                          // 0x0684(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurveSegmentIntervalDistance;                      // 0x0688(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DashStartAdjustDistance;                           // 0x068C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NavRaycastHitTargetDistanceMargin;                 // 0x0690(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PalletDetectionForwardDistance;                    // 0x0694(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PalletDetectionRadius;                             // 0x0698(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_69C[0x5C];                                     // 0x069C(0x005C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AISkill_Interaction_BlightDash">();
	}
	static class UAISkill_Interaction_BlightDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAISkill_Interaction_BlightDash>();
	}
};
static_assert(alignof(UAISkill_Interaction_BlightDash) == 0x000008, "Wrong alignment on UAISkill_Interaction_BlightDash");
static_assert(sizeof(UAISkill_Interaction_BlightDash) == 0x0006F8, "Wrong size on UAISkill_Interaction_BlightDash");
static_assert(offsetof(UAISkill_Interaction_BlightDash, FirstDashCheckInterval) == 0x0002B0, "Member 'UAISkill_Interaction_BlightDash::FirstDashCheckInterval' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, ChainDashCheckInterval) == 0x0002B4, "Member 'UAISkill_Interaction_BlightDash::ChainDashCheckInterval' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, MinimumFirstDashDistance) == 0x0002B8, "Member 'UAISkill_Interaction_BlightDash::MinimumFirstDashDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, MinimumTraversalDistance) == 0x000318, "Member 'UAISkill_Interaction_BlightDash::MinimumTraversalDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, MinimumEdgeDistance) == 0x000378, "Member 'UAISkill_Interaction_BlightDash::MinimumEdgeDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, MaxDistancePerDash) == 0x0003D8, "Member 'UAISkill_Interaction_BlightDash::MaxDistancePerDash' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, MaxDistanceFirstDashSearchRadius) == 0x000438, "Member 'UAISkill_Interaction_BlightDash::MaxDistanceFirstDashSearchRadius' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, MaxDistanceChainDashSearchRadius) == 0x000498, "Member 'UAISkill_Interaction_BlightDash::MaxDistanceChainDashSearchRadius' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, ChaseLoopSearchDistance) == 0x0004F8, "Member 'UAISkill_Interaction_BlightDash::ChaseLoopSearchDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, ChaseLoopSearchRadius) == 0x000558, "Member 'UAISkill_Interaction_BlightDash::ChaseLoopSearchRadius' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, ChaseSearchRadius) == 0x0005B8, "Member 'UAISkill_Interaction_BlightDash::ChaseSearchRadius' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, SearchVerticalHeight) == 0x000618, "Member 'UAISkill_Interaction_BlightDash::SearchVerticalHeight' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, MaxCollisionAngle) == 0x00061C, "Member 'UAISkill_Interaction_BlightDash::MaxCollisionAngle' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, SafeCollisionAngle) == 0x000620, "Member 'UAISkill_Interaction_BlightDash::SafeCollisionAngle' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, DashDistanceToAngleCoefficient) == 0x000680, "Member 'UAISkill_Interaction_BlightDash::DashDistanceToAngleCoefficient' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, DashDistanceToAnglePower) == 0x000684, "Member 'UAISkill_Interaction_BlightDash::DashDistanceToAnglePower' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, CurveSegmentIntervalDistance) == 0x000688, "Member 'UAISkill_Interaction_BlightDash::CurveSegmentIntervalDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, DashStartAdjustDistance) == 0x00068C, "Member 'UAISkill_Interaction_BlightDash::DashStartAdjustDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, NavRaycastHitTargetDistanceMargin) == 0x000690, "Member 'UAISkill_Interaction_BlightDash::NavRaycastHitTargetDistanceMargin' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, PalletDetectionForwardDistance) == 0x000694, "Member 'UAISkill_Interaction_BlightDash::PalletDetectionForwardDistance' has a wrong offset!");
static_assert(offsetof(UAISkill_Interaction_BlightDash, PalletDetectionRadius) == 0x000698, "Member 'UAISkill_Interaction_BlightDash::PalletDetectionRadius' has a wrong offset!");

// Class TheBlight.BlightAnimInstance
// 0x0020 (0x0740 - 0x0720)
class UBlightAnimInstance final : public UKillerAnimInstance
{
public:
	class UBlightPowerStateComponent*             _blightPowerStateComponent;                        // 0x0720(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EWallGrabState                                _powerState;                                       // 0x0728(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_729[0x3];                                      // 0x0729(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _stateTimeRemaining;                               // 0x072C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _lookAngle;                                        // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_734[0xC];                                      // 0x0734(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightAnimInstance">();
	}
	static class UBlightAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightAnimInstance>();
	}
};
static_assert(alignof(UBlightAnimInstance) == 0x000010, "Wrong alignment on UBlightAnimInstance");
static_assert(sizeof(UBlightAnimInstance) == 0x000740, "Wrong size on UBlightAnimInstance");
static_assert(offsetof(UBlightAnimInstance, _blightPowerStateComponent) == 0x000720, "Member 'UBlightAnimInstance::_blightPowerStateComponent' has a wrong offset!");
static_assert(offsetof(UBlightAnimInstance, _powerState) == 0x000728, "Member 'UBlightAnimInstance::_powerState' has a wrong offset!");
static_assert(offsetof(UBlightAnimInstance, _stateTimeRemaining) == 0x00072C, "Member 'UBlightAnimInstance::_stateTimeRemaining' has a wrong offset!");
static_assert(offsetof(UBlightAnimInstance, _lookAngle) == 0x000730, "Member 'UBlightAnimInstance::_lookAngle' has a wrong offset!");

// Class TheBlight.BlightAttackPicker
// 0x0000 (0x00A8 - 0x00A8)
class UBlightAttackPicker final : public USlasherAttackPickerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightAttackPicker">();
	}
	static class UBlightAttackPicker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightAttackPicker>();
	}
};
static_assert(alignof(UBlightAttackPicker) == 0x000008, "Wrong alignment on UBlightAttackPicker");
static_assert(sizeof(UBlightAttackPicker) == 0x0000A8, "Wrong size on UBlightAttackPicker");

// Class TheBlight.BlightDashAttack
// 0x0010 (0x0430 - 0x0420)
class UBlightDashAttack final : public UPounceAttack
{
public:
	uint8                                         Pad_420[0x10];                                     // 0x0420(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttack">();
	}
	static class UBlightDashAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttack>();
	}
};
static_assert(alignof(UBlightDashAttack) == 0x000010, "Wrong alignment on UBlightDashAttack");
static_assert(sizeof(UBlightDashAttack) == 0x000430, "Wrong size on UBlightDashAttack");

// Class TheBlight.BlightDashAttackOpenSubstate
// 0x0000 (0x0130 - 0x0130)
class UBlightDashAttackOpenSubstate final : public UPounceAttackOpenSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttackOpenSubstate">();
	}
	static class UBlightDashAttackOpenSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttackOpenSubstate>();
	}
};
static_assert(alignof(UBlightDashAttackOpenSubstate) == 0x000008, "Wrong alignment on UBlightDashAttackOpenSubstate");
static_assert(sizeof(UBlightDashAttackOpenSubstate) == 0x000130, "Wrong size on UBlightDashAttackOpenSubstate");

// Class TheBlight.BlightDashAttackSuccessSubstate
// 0x0000 (0x0118 - 0x0118)
class UBlightDashAttackSuccessSubstate final : public UPounceAttackSuccessSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttackSuccessSubstate">();
	}
	static class UBlightDashAttackSuccessSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttackSuccessSubstate>();
	}
};
static_assert(alignof(UBlightDashAttackSuccessSubstate) == 0x000008, "Wrong alignment on UBlightDashAttackSuccessSubstate");
static_assert(sizeof(UBlightDashAttackSuccessSubstate) == 0x000118, "Wrong size on UBlightDashAttackSuccessSubstate");

// Class TheBlight.BlightDashAttackMissSubstate
// 0x0000 (0x0120 - 0x0120)
class UBlightDashAttackMissSubstate final : public UPounceAttackMissSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttackMissSubstate">();
	}
	static class UBlightDashAttackMissSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttackMissSubstate>();
	}
};
static_assert(alignof(UBlightDashAttackMissSubstate) == 0x000008, "Wrong alignment on UBlightDashAttackMissSubstate");
static_assert(sizeof(UBlightDashAttackMissSubstate) == 0x000120, "Wrong size on UBlightDashAttackMissSubstate");

// Class TheBlight.BlightDashAttackObstructSubstate
// 0x0000 (0x0128 - 0x0128)
class UBlightDashAttackObstructSubstate final : public UPounceAttackObstructSubstate
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightDashAttackObstructSubstate">();
	}
	static class UBlightDashAttackObstructSubstate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightDashAttackObstructSubstate>();
	}
};
static_assert(alignof(UBlightDashAttackObstructSubstate) == 0x000008, "Wrong alignment on UBlightDashAttackObstructSubstate");
static_assert(sizeof(UBlightDashAttackObstructSubstate) == 0x000128, "Wrong size on UBlightDashAttackObstructSubstate");

// Class TheBlight.BlightPower
// 0x0158 (0x06A8 - 0x0550)
class ABlightPower final : public ACollectable
{
public:
	class UPowerChargeComponent*                  _blightPowerCharge;                                // 0x0550(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPowerToggleComponent*                  _blightPowerToggle;                                // 0x0558(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChargeableComponent*                   _blightPowerActivateChargeable;                    // 0x0560(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UBlightPowerStateComponent*             _blightPowerStateComponent;                        // 0x0568(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _blightPowerActivateMaxCharge;                     // 0x0570(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _blightPowerMaxCharge;                             // 0x0598(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _blightPowerRechargeRate;                          // 0x0618(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _inPowerEffect;                                    // 0x0640(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _outOfPowerEffect;                                 // 0x0648(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_650[0x58];                                     // 0x0650(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPowerStateChanged(const EWallGrabState PreviousState, const EWallGrabState NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPower">();
	}
	static class ABlightPower* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlightPower>();
	}
};
static_assert(alignof(ABlightPower) == 0x000008, "Wrong alignment on ABlightPower");
static_assert(sizeof(ABlightPower) == 0x0006A8, "Wrong size on ABlightPower");
static_assert(offsetof(ABlightPower, _blightPowerCharge) == 0x000550, "Member 'ABlightPower::_blightPowerCharge' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerToggle) == 0x000558, "Member 'ABlightPower::_blightPowerToggle' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerActivateChargeable) == 0x000560, "Member 'ABlightPower::_blightPowerActivateChargeable' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerStateComponent) == 0x000568, "Member 'ABlightPower::_blightPowerStateComponent' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerActivateMaxCharge) == 0x000570, "Member 'ABlightPower::_blightPowerActivateMaxCharge' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerMaxCharge) == 0x000598, "Member 'ABlightPower::_blightPowerMaxCharge' has a wrong offset!");
static_assert(offsetof(ABlightPower, _blightPowerRechargeRate) == 0x000618, "Member 'ABlightPower::_blightPowerRechargeRate' has a wrong offset!");
static_assert(offsetof(ABlightPower, _inPowerEffect) == 0x000640, "Member 'ABlightPower::_inPowerEffect' has a wrong offset!");
static_assert(offsetof(ABlightPower, _outOfPowerEffect) == 0x000648, "Member 'ABlightPower::_outOfPowerEffect' has a wrong offset!");

// Class TheBlight.BlightPowerChargePresentationPowerFadeComponent
// 0x0010 (0x00B8 - 0x00A8)
class UBlightPowerChargePresentationPowerFadeComponent final : public UPresentationPowerFadeComponent
{
public:
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerChargePresentationPowerFadeComponent">();
	}
	static class UBlightPowerChargePresentationPowerFadeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerChargePresentationPowerFadeComponent>();
	}
};
static_assert(alignof(UBlightPowerChargePresentationPowerFadeComponent) == 0x000008, "Wrong alignment on UBlightPowerChargePresentationPowerFadeComponent");
static_assert(sizeof(UBlightPowerChargePresentationPowerFadeComponent) == 0x0000B8, "Wrong size on UBlightPowerChargePresentationPowerFadeComponent");

// Class TheBlight.BlightPowerEstimatedCollisionIndicator
// 0x0008 (0x02A8 - 0x02A0)
class ABlightPowerEstimatedCollisionIndicator final : public AActor
{
public:
	uint8                                         Pad_2A0[0x8];                                      // 0x02A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnHideIndicator_Cosmetic();
	void OnShowIndicator_Cosmetic();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerEstimatedCollisionIndicator">();
	}
	static class ABlightPowerEstimatedCollisionIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABlightPowerEstimatedCollisionIndicator>();
	}
};
static_assert(alignof(ABlightPowerEstimatedCollisionIndicator) == 0x000008, "Wrong alignment on ABlightPowerEstimatedCollisionIndicator");
static_assert(sizeof(ABlightPowerEstimatedCollisionIndicator) == 0x0002A8, "Wrong size on ABlightPowerEstimatedCollisionIndicator");

// Class TheBlight.BlightPowerPresentationComponent
// 0x0010 (0x00C0 - 0x00B0)
class UBlightPowerPresentationComponent final : public UPresentationItemProgressComponent
{
public:
	uint8                                         Pad_B0[0x10];                                      // 0x00B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerPresentationComponent">();
	}
	static class UBlightPowerPresentationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerPresentationComponent>();
	}
};
static_assert(alignof(UBlightPowerPresentationComponent) == 0x000008, "Wrong alignment on UBlightPowerPresentationComponent");
static_assert(sizeof(UBlightPowerPresentationComponent) == 0x0000C0, "Wrong size on UBlightPowerPresentationComponent");

// Class TheBlight.BlightPowerState
// 0x01B0 (0x01E0 - 0x0030)
class UBlightPowerState : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            _stateSpeedCurve;                                  // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTunableStat                           _stateDuration;                                    // 0x0048(0x0080)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _cameraPitchRecenterTime;                          // 0x00C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _wallDashCollisionRadius;                          // 0x00F0(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _wallDashCollisionHeight;                          // 0x0118(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _wallDashCollisionRange;                           // 0x0140(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          _playerCanCancelEarly;                             // 0x0168(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_169[0xF];                                      // 0x0169(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          _displayCollisionIndicator;                        // 0x0178(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNonTunableStat                        _dashSpeedModifier;                                // 0x0180(0x0060)(Protected, NativeAccessSpecifierProtected)

public:
	float GetStateDuration() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerState">();
	}
	static class UBlightPowerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerState>();
	}
};
static_assert(alignof(UBlightPowerState) == 0x000008, "Wrong alignment on UBlightPowerState");
static_assert(sizeof(UBlightPowerState) == 0x0001E0, "Wrong size on UBlightPowerState");
static_assert(offsetof(UBlightPowerState, _stateSpeedCurve) == 0x000040, "Member 'UBlightPowerState::_stateSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _stateDuration) == 0x000048, "Member 'UBlightPowerState::_stateDuration' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _cameraPitchRecenterTime) == 0x0000C8, "Member 'UBlightPowerState::_cameraPitchRecenterTime' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _wallDashCollisionRadius) == 0x0000F0, "Member 'UBlightPowerState::_wallDashCollisionRadius' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _wallDashCollisionHeight) == 0x000118, "Member 'UBlightPowerState::_wallDashCollisionHeight' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _wallDashCollisionRange) == 0x000140, "Member 'UBlightPowerState::_wallDashCollisionRange' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _playerCanCancelEarly) == 0x000168, "Member 'UBlightPowerState::_playerCanCancelEarly' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _displayCollisionIndicator) == 0x000178, "Member 'UBlightPowerState::_displayCollisionIndicator' has a wrong offset!");
static_assert(offsetof(UBlightPowerState, _dashSpeedModifier) == 0x000180, "Member 'UBlightPowerState::_dashSpeedModifier' has a wrong offset!");

// Class TheBlight.BlightPowerStateAdjusting
// 0x0048 (0x0228 - 0x01E0)
class UBlightPowerStateAdjusting final : public UBlightPowerState
{
public:
	bool                                          _bounceAwayFromCollision;                          // 0x01E0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _allowNavigation;                                  // 0x01E1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _smashBreakables;                                  // 0x01E2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E3[0x5];                                      // 0x01E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _maxDistanceForSurvivorFacing;                     // 0x01E8(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_210[0x18];                                     // 0x0210(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateAdjusting">();
	}
	static class UBlightPowerStateAdjusting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateAdjusting>();
	}
};
static_assert(alignof(UBlightPowerStateAdjusting) == 0x000008, "Wrong alignment on UBlightPowerStateAdjusting");
static_assert(sizeof(UBlightPowerStateAdjusting) == 0x000228, "Wrong size on UBlightPowerStateAdjusting");
static_assert(offsetof(UBlightPowerStateAdjusting, _bounceAwayFromCollision) == 0x0001E0, "Member 'UBlightPowerStateAdjusting::_bounceAwayFromCollision' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateAdjusting, _allowNavigation) == 0x0001E1, "Member 'UBlightPowerStateAdjusting::_allowNavigation' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateAdjusting, _smashBreakables) == 0x0001E2, "Member 'UBlightPowerStateAdjusting::_smashBreakables' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateAdjusting, _maxDistanceForSurvivorFacing) == 0x0001E8, "Member 'UBlightPowerStateAdjusting::_maxDistanceForSurvivorFacing' has a wrong offset!");

// Class TheBlight.BlightPowerStateDash
// 0x00F0 (0x02D0 - 0x01E0)
class UBlightPowerStateDash : public UBlightPowerState
{
public:
	uint8                                         Pad_1E0[0x8];                                      // 0x01E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _vectorInterpToSpeed;                              // 0x01E8(0x0080)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _noDashTimeLimitSpeedCurve;                        // 0x0268(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _lookAngleToTurnRateCurveController;               // 0x0270(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _lookAngleToTurnRateCurveMouse;                    // 0x0278(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            _lookAngleToMaxTurnRateCurveMouse;                 // 0x0280(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_288[0x48];                                     // 0x0288(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateDash">();
	}
	static class UBlightPowerStateDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateDash>();
	}
};
static_assert(alignof(UBlightPowerStateDash) == 0x000008, "Wrong alignment on UBlightPowerStateDash");
static_assert(sizeof(UBlightPowerStateDash) == 0x0002D0, "Wrong size on UBlightPowerStateDash");
static_assert(offsetof(UBlightPowerStateDash, _vectorInterpToSpeed) == 0x0001E8, "Member 'UBlightPowerStateDash::_vectorInterpToSpeed' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateDash, _noDashTimeLimitSpeedCurve) == 0x000268, "Member 'UBlightPowerStateDash::_noDashTimeLimitSpeedCurve' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateDash, _lookAngleToTurnRateCurveController) == 0x000270, "Member 'UBlightPowerStateDash::_lookAngleToTurnRateCurveController' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateDash, _lookAngleToTurnRateCurveMouse) == 0x000278, "Member 'UBlightPowerStateDash::_lookAngleToTurnRateCurveMouse' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateDash, _lookAngleToMaxTurnRateCurveMouse) == 0x000280, "Member 'UBlightPowerStateDash::_lookAngleToMaxTurnRateCurveMouse' has a wrong offset!");

// Class TheBlight.BlightPowerStateAttack
// 0x0030 (0x0300 - 0x02D0)
class UBlightPowerStateAttack final : public UBlightPowerStateDash
{
public:
	uint8                                         Pad_2D0[0x30];                                     // 0x02D0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateAttack">();
	}
	static class UBlightPowerStateAttack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateAttack>();
	}
};
static_assert(alignof(UBlightPowerStateAttack) == 0x000008, "Wrong alignment on UBlightPowerStateAttack");
static_assert(sizeof(UBlightPowerStateAttack) == 0x000300, "Wrong size on UBlightPowerStateAttack");

// Class TheBlight.BlightPowerStateComponent
// 0x0330 (0x03D8 - 0x00A8)
class UBlightPowerStateComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A8[0x20];                                      // 0x00A8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnPowerCollided;                                   // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UBlightPowerState>>  _blightPowerStateClasses;                          // 0x00D8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _canDashCheckCollisionRadius;                      // 0x00E8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _canDashCheckCollisionHeight;                      // 0x0110(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _canDashCheckCollisionRange;                       // 0x0138(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagQuery                      _killerTagsForWallHitQuery;                        // 0x0160(0x0048)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  _canWallGrabPlayerTags;                            // 0x01A8(0x0020)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FDBDTunableRowHandle                   _blightLethalDashDodgeRadius;                      // 0x01C8(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class UInteractionDefinition*                 _powerInteractionDefinition;                       // 0x01F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F8[0x30];                                     // 0x01F8(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UTimerObject*                           _stateTimer;                                       // 0x0228(0x0008)(ExportObject, Net, ZeroConstructor, Transient, InstancedReference, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UBlightPowerState*>              _blightPowerStates;                                // 0x0230(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UBlightPowerState*                      _currentBlightPowerState;                          // 0x0240(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         _dashTokens;                                       // 0x0248(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_249[0x7];                                      // 0x0249(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTunableStat                           _maximumDashTokens;                                // 0x0250(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	struct FTunableStat                           _tokenChargeRate;                                  // 0x02D0(0x0080)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	uint8                                         Pad_350[0x88];                                     // 0x0350(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Multicast_SetWallGrabState(const EWallGrabState NewState);
	void OnLevelReadyToPlay();
	void OnRep_StateTimer();
	void Server_SetWallGrabState(const EWallGrabState NewState);

	bool CanDash() const;
	class UBlightPowerState* GetCurrentPowerState() const;
	float GetLookAngleDegrees() const;
	EWallGrabState GetPowerState() const;
	class UBlightPowerState* GetPowerStateByEnum(const EWallGrabState StateEnum) const;
	float GetStateTimeElapsed() const;
	class UTimerObject* GetStateTimer() const;
	float GetStateTimeRemaining() const;
	void OnRep_DashTokens() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateComponent">();
	}
	static class UBlightPowerStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateComponent>();
	}
};
static_assert(alignof(UBlightPowerStateComponent) == 0x000008, "Wrong alignment on UBlightPowerStateComponent");
static_assert(sizeof(UBlightPowerStateComponent) == 0x0003D8, "Wrong size on UBlightPowerStateComponent");
static_assert(offsetof(UBlightPowerStateComponent, OnPowerCollided) == 0x0000C8, "Member 'UBlightPowerStateComponent::OnPowerCollided' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _blightPowerStateClasses) == 0x0000D8, "Member 'UBlightPowerStateComponent::_blightPowerStateClasses' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _canDashCheckCollisionRadius) == 0x0000E8, "Member 'UBlightPowerStateComponent::_canDashCheckCollisionRadius' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _canDashCheckCollisionHeight) == 0x000110, "Member 'UBlightPowerStateComponent::_canDashCheckCollisionHeight' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _canDashCheckCollisionRange) == 0x000138, "Member 'UBlightPowerStateComponent::_canDashCheckCollisionRange' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _killerTagsForWallHitQuery) == 0x000160, "Member 'UBlightPowerStateComponent::_killerTagsForWallHitQuery' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _canWallGrabPlayerTags) == 0x0001A8, "Member 'UBlightPowerStateComponent::_canWallGrabPlayerTags' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _blightLethalDashDodgeRadius) == 0x0001C8, "Member 'UBlightPowerStateComponent::_blightLethalDashDodgeRadius' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _powerInteractionDefinition) == 0x0001F0, "Member 'UBlightPowerStateComponent::_powerInteractionDefinition' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _stateTimer) == 0x000228, "Member 'UBlightPowerStateComponent::_stateTimer' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _blightPowerStates) == 0x000230, "Member 'UBlightPowerStateComponent::_blightPowerStates' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _currentBlightPowerState) == 0x000240, "Member 'UBlightPowerStateComponent::_currentBlightPowerState' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _dashTokens) == 0x000248, "Member 'UBlightPowerStateComponent::_dashTokens' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _maximumDashTokens) == 0x000250, "Member 'UBlightPowerStateComponent::_maximumDashTokens' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateComponent, _tokenChargeRate) == 0x0002D0, "Member 'UBlightPowerStateComponent::_tokenChargeRate' has a wrong offset!");

// Class TheBlight.BlightPowerStateCooldown
// 0x0000 (0x01E0 - 0x01E0)
class UBlightPowerStateCooldown final : public UBlightPowerState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateCooldown">();
	}
	static class UBlightPowerStateCooldown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateCooldown>();
	}
};
static_assert(alignof(UBlightPowerStateCooldown) == 0x000008, "Wrong alignment on UBlightPowerStateCooldown");
static_assert(sizeof(UBlightPowerStateCooldown) == 0x0001E0, "Wrong size on UBlightPowerStateCooldown");

// Class TheBlight.BlightPowerStateHolding
// 0x0040 (0x0220 - 0x01E0)
class UBlightPowerStateHolding final : public UBlightPowerState
{
public:
	struct FSecondaryInteractionProperties        _secondaryInteractionProperties;                   // 0x01E0(0x0038)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          _allowNavigation;                                  // 0x0218(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _dashSpeedForProjection;                           // 0x021C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateHolding">();
	}
	static class UBlightPowerStateHolding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateHolding>();
	}
};
static_assert(alignof(UBlightPowerStateHolding) == 0x000008, "Wrong alignment on UBlightPowerStateHolding");
static_assert(sizeof(UBlightPowerStateHolding) == 0x000220, "Wrong size on UBlightPowerStateHolding");
static_assert(offsetof(UBlightPowerStateHolding, _secondaryInteractionProperties) == 0x0001E0, "Member 'UBlightPowerStateHolding::_secondaryInteractionProperties' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateHolding, _allowNavigation) == 0x000218, "Member 'UBlightPowerStateHolding::_allowNavigation' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateHolding, _dashSpeedForProjection) == 0x00021C, "Member 'UBlightPowerStateHolding::_dashSpeedForProjection' has a wrong offset!");

// Class TheBlight.BlightPowerStateInterface
// 0x0000 (0x0030 - 0x0030)
class IBlightPowerStateInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateInterface">();
	}
	static class IBlightPowerStateInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBlightPowerStateInterface>();
	}
};
static_assert(alignof(IBlightPowerStateInterface) == 0x000008, "Wrong alignment on IBlightPowerStateInterface");
static_assert(sizeof(IBlightPowerStateInterface) == 0x000030, "Wrong size on IBlightPowerStateInterface");

// Class TheBlight.BlightPowerStateLethalDash
// 0x0040 (0x0310 - 0x02D0)
class UBlightPowerStateLethalDash final : public UBlightPowerStateDash
{
public:
	struct FSecondaryInteractionProperties        _secondaryInteractionProperties;                   // 0x02D0(0x0038)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          _smashBreakables;                                  // 0x0308(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_309[0x7];                                      // 0x0309(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateLethalDash">();
	}
	static class UBlightPowerStateLethalDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateLethalDash>();
	}
};
static_assert(alignof(UBlightPowerStateLethalDash) == 0x000008, "Wrong alignment on UBlightPowerStateLethalDash");
static_assert(sizeof(UBlightPowerStateLethalDash) == 0x000310, "Wrong size on UBlightPowerStateLethalDash");
static_assert(offsetof(UBlightPowerStateLethalDash, _secondaryInteractionProperties) == 0x0002D0, "Member 'UBlightPowerStateLethalDash::_secondaryInteractionProperties' has a wrong offset!");
static_assert(offsetof(UBlightPowerStateLethalDash, _smashBreakables) == 0x000308, "Member 'UBlightPowerStateLethalDash::_smashBreakables' has a wrong offset!");

// Class TheBlight.BlightPowerStateNonLethalDash
// 0x0008 (0x02D8 - 0x02D0)
class UBlightPowerStateNonLethalDash final : public UBlightPowerStateDash
{
public:
	bool                                          _smashBreakables;                                  // 0x02D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D1[0x7];                                      // 0x02D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateNonLethalDash">();
	}
	static class UBlightPowerStateNonLethalDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateNonLethalDash>();
	}
};
static_assert(alignof(UBlightPowerStateNonLethalDash) == 0x000008, "Wrong alignment on UBlightPowerStateNonLethalDash");
static_assert(sizeof(UBlightPowerStateNonLethalDash) == 0x0002D8, "Wrong size on UBlightPowerStateNonLethalDash");
static_assert(offsetof(UBlightPowerStateNonLethalDash, _smashBreakables) == 0x0002D0, "Member 'UBlightPowerStateNonLethalDash::_smashBreakables' has a wrong offset!");

// Class TheBlight.BlightPowerStateReady
// 0x0000 (0x01E0 - 0x01E0)
class UBlightPowerStateReady final : public UBlightPowerState
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlightPowerStateReady">();
	}
	static class UBlightPowerStateReady* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlightPowerStateReady>();
	}
};
static_assert(alignof(UBlightPowerStateReady) == 0x000008, "Wrong alignment on UBlightPowerStateReady");
static_assert(sizeof(UBlightPowerStateReady) == 0x0001E0, "Wrong size on UBlightPowerStateReady");

// Class TheBlight.DragonsGrip
// 0x0068 (0x0488 - 0x0420)
class UDragonsGrip final : public UPerk
{
public:
	class AGenerator*                             _kickedGenerator;                                  // 0x0420(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class UStatusEffect>              _exposedStatusEffect;                              // 0x0428(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _activationDuration[0x3];                          // 0x0430(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _cooldownDuration[0x3];                            // 0x043C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _exposedEffectDuration[0x3];                       // 0x0448(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _onlyExposeFirstSurvivor;                          // 0x0454(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_455[0xB];                                      // 0x0455(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDBDTunableRowHandle                   _loudNoiseRange;                                   // 0x0460(0x0028)(Edit, NativeAccessSpecifierPrivate)

public:
	void Multicast_OnRevealSurvivor(class ADBDPlayer* Survivor);
	void OnRevealSurvivor(class ADBDPlayer* Instigator);

	float GetActivationDurationAtLevel() const;
	float GetCooldownDurationAtLevel() const;
	float GetExposedEffectDurationAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DragonsGrip">();
	}
	static class UDragonsGrip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDragonsGrip>();
	}
};
static_assert(alignof(UDragonsGrip) == 0x000008, "Wrong alignment on UDragonsGrip");
static_assert(sizeof(UDragonsGrip) == 0x000488, "Wrong size on UDragonsGrip");
static_assert(offsetof(UDragonsGrip, _kickedGenerator) == 0x000420, "Member 'UDragonsGrip::_kickedGenerator' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _exposedStatusEffect) == 0x000428, "Member 'UDragonsGrip::_exposedStatusEffect' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _activationDuration) == 0x000430, "Member 'UDragonsGrip::_activationDuration' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _cooldownDuration) == 0x00043C, "Member 'UDragonsGrip::_cooldownDuration' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _exposedEffectDuration) == 0x000448, "Member 'UDragonsGrip::_exposedEffectDuration' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _onlyExposeFirstSurvivor) == 0x000454, "Member 'UDragonsGrip::_onlyExposeFirstSurvivor' has a wrong offset!");
static_assert(offsetof(UDragonsGrip, _loudNoiseRange) == 0x000460, "Member 'UDragonsGrip::_loudNoiseRange' has a wrong offset!");

// Class TheBlight.HexBloodFavor
// 0x0018 (0x04B8 - 0x04A0)
class UHexBloodFavor final : public UHexPerk
{
public:
	float                                         _palletInRange[0x3];                               // 0x04A0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         _palletPulldownBlockTime[0x3];                     // 0x04AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	float GetPalletInRangeAtLevel() const;
	float GetPalletPulldownBlockTimeAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexBloodFavor">();
	}
	static class UHexBloodFavor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexBloodFavor>();
	}
};
static_assert(alignof(UHexBloodFavor) == 0x000008, "Wrong alignment on UHexBloodFavor");
static_assert(sizeof(UHexBloodFavor) == 0x0004B8, "Wrong size on UHexBloodFavor");
static_assert(offsetof(UHexBloodFavor, _palletInRange) == 0x0004A0, "Member 'UHexBloodFavor::_palletInRange' has a wrong offset!");
static_assert(offsetof(UHexBloodFavor, _palletPulldownBlockTime) == 0x0004AC, "Member 'UHexBloodFavor::_palletPulldownBlockTime' has a wrong offset!");

// Class TheBlight.HexUndying
// 0x0070 (0x0510 - 0x04A0)
class UHexUndying final : public UHexPerk
{
public:
	uint8                                         Pad_4A0[0x50];                                     // 0x04A0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UStatusEffect>              _revealSurvivorEffectClass;                        // 0x04F0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _revealAuraDistanceFromTotem[0x3];                 // 0x0500(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50C[0x4];                                      // 0x050C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Authority_OnCamperCleansedHexPerk(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData);
	void Authority_OnSurvivorAdded(class ACamperPlayer* Survivor);
	void Authority_UpdateHexPerkStatusView(class UGameplayModifierContainer* GameplayModifierContainer, bool Param_IsApplicable);

	float GetRevealAuraDistanceFromTotemAtLevel() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HexUndying">();
	}
	static class UHexUndying* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHexUndying>();
	}
};
static_assert(alignof(UHexUndying) == 0x000008, "Wrong alignment on UHexUndying");
static_assert(sizeof(UHexUndying) == 0x000510, "Wrong size on UHexUndying");
static_assert(offsetof(UHexUndying, _revealSurvivorEffectClass) == 0x0004F0, "Member 'UHexUndying::_revealSurvivorEffectClass' has a wrong offset!");
static_assert(offsetof(UHexUndying, _revealAuraDistanceFromTotem) == 0x000500, "Member 'UHexUndying::_revealAuraDistanceFromTotem' has a wrong offset!");

// Class TheBlight.WallGrabInteractionDefinition
// 0x0040 (0x07C0 - 0x0780)
class UWallGrabInteractionDefinition final : public UInteractionDefinition
{
public:
	class UBlightPowerStateComponent*             _blightPowerStateComponent;                        // 0x0778(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FDBDTunableRowHandle                   _wallDashAccelerationMultiplier;                   // 0x0780(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPrivate)
	class ABlightPowerEstimatedCollisionIndicator* _blightPowerCollisionIndicator;                    // 0x07A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class ABlightPowerEstimatedCollisionIndicator> _collisionIndicatorActorClass;                     // 0x07B0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_7B8[0x8];                                      // 0x07B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WallGrabInteractionDefinition">();
	}
	static class UWallGrabInteractionDefinition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWallGrabInteractionDefinition>();
	}
};
static_assert(alignof(UWallGrabInteractionDefinition) == 0x000010, "Wrong alignment on UWallGrabInteractionDefinition");
static_assert(sizeof(UWallGrabInteractionDefinition) == 0x0007C0, "Wrong size on UWallGrabInteractionDefinition");
static_assert(offsetof(UWallGrabInteractionDefinition, _blightPowerStateComponent) == 0x000778, "Member 'UWallGrabInteractionDefinition::_blightPowerStateComponent' has a wrong offset!");
static_assert(offsetof(UWallGrabInteractionDefinition, _wallDashAccelerationMultiplier) == 0x000780, "Member 'UWallGrabInteractionDefinition::_wallDashAccelerationMultiplier' has a wrong offset!");
static_assert(offsetof(UWallGrabInteractionDefinition, _blightPowerCollisionIndicator) == 0x0007A8, "Member 'UWallGrabInteractionDefinition::_blightPowerCollisionIndicator' has a wrong offset!");
static_assert(offsetof(UWallGrabInteractionDefinition, _collisionIndicatorActorClass) == 0x0007B0, "Member 'UWallGrabInteractionDefinition::_collisionIndicatorActorClass' has a wrong offset!");

}

