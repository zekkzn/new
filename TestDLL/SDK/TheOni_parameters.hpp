#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheOni

#include "Basic.hpp"

#include "AnimationUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "TheOni_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function TheOni.AbsorbBloodOrbsInteraction.SetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct AbsorbBloodOrbsInteraction_SetPlayerOwner final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AbsorbBloodOrbsInteraction_SetPlayerOwner) == 0x000008, "Wrong alignment on AbsorbBloodOrbsInteraction_SetPlayerOwner");
static_assert(sizeof(AbsorbBloodOrbsInteraction_SetPlayerOwner) == 0x000008, "Wrong size on AbsorbBloodOrbsInteraction_SetPlayerOwner");
static_assert(offsetof(AbsorbBloodOrbsInteraction_SetPlayerOwner, Player) == 0x000000, "Member 'AbsorbBloodOrbsInteraction_SetPlayerOwner::Player' has a wrong offset!");

// Function TheOni.BloodOrb.Authority_OnDropped
// 0x0010 (0x0010 - 0x0000)
struct BloodOrb_Authority_OnDropped final
{
public:
	const class ADBDPlayer*                       DroppedBy;                                         // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseFactor;                                     // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BloodOrb_Authority_OnDropped) == 0x000008, "Wrong alignment on BloodOrb_Authority_OnDropped");
static_assert(sizeof(BloodOrb_Authority_OnDropped) == 0x000010, "Wrong size on BloodOrb_Authority_OnDropped");
static_assert(offsetof(BloodOrb_Authority_OnDropped, DroppedBy) == 0x000000, "Member 'BloodOrb_Authority_OnDropped::DroppedBy' has a wrong offset!");
static_assert(offsetof(BloodOrb_Authority_OnDropped, ImpulseFactor) == 0x000008, "Member 'BloodOrb_Authority_OnDropped::ImpulseFactor' has a wrong offset!");

// Function TheOni.BloodOrb.OnIsAttractedChangedCosmetic
// 0x0001 (0x0001 - 0x0000)
struct BloodOrb_OnIsAttractedChangedCosmetic final
{
public:
	bool                                          IsAttracted;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrb_OnIsAttractedChangedCosmetic) == 0x000001, "Wrong alignment on BloodOrb_OnIsAttractedChangedCosmetic");
static_assert(sizeof(BloodOrb_OnIsAttractedChangedCosmetic) == 0x000001, "Wrong size on BloodOrb_OnIsAttractedChangedCosmetic");
static_assert(offsetof(BloodOrb_OnIsAttractedChangedCosmetic, IsAttracted) == 0x000000, "Member 'BloodOrb_OnIsAttractedChangedCosmetic::IsAttracted' has a wrong offset!");

// Function TheOni.BloodOrb.OnRep_State
// 0x0001 (0x0001 - 0x0000)
struct BloodOrb_OnRep_State final
{
public:
	EBloodOrbState                                OldState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrb_OnRep_State) == 0x000001, "Wrong alignment on BloodOrb_OnRep_State");
static_assert(sizeof(BloodOrb_OnRep_State) == 0x000001, "Wrong size on BloodOrb_OnRep_State");
static_assert(offsetof(BloodOrb_OnRep_State, OldState) == 0x000000, "Member 'BloodOrb_OnRep_State::OldState' has a wrong offset!");

// Function TheOni.BloodOrb.UpdateAbsorbed_Cosmetic
// 0x0028 (0x0028 - 0x0000)
struct BloodOrb_UpdateAbsorbed_Cosmetic final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Absorber;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BloodOrb_UpdateAbsorbed_Cosmetic) == 0x000008, "Wrong alignment on BloodOrb_UpdateAbsorbed_Cosmetic");
static_assert(sizeof(BloodOrb_UpdateAbsorbed_Cosmetic) == 0x000028, "Wrong size on BloodOrb_UpdateAbsorbed_Cosmetic");
static_assert(offsetof(BloodOrb_UpdateAbsorbed_Cosmetic, Destination) == 0x000000, "Member 'BloodOrb_UpdateAbsorbed_Cosmetic::Destination' has a wrong offset!");
static_assert(offsetof(BloodOrb_UpdateAbsorbed_Cosmetic, Absorber) == 0x000018, "Member 'BloodOrb_UpdateAbsorbed_Cosmetic::Absorber' has a wrong offset!");
static_assert(offsetof(BloodOrb_UpdateAbsorbed_Cosmetic, DeltaTime) == 0x000020, "Member 'BloodOrb_UpdateAbsorbed_Cosmetic::DeltaTime' has a wrong offset!");

// Function TheOni.BloodOrb.UpdateAttracted_Cosmetic
// 0x0028 (0x0028 - 0x0000)
struct BloodOrb_UpdateAttracted_Cosmetic final
{
public:
	struct FVector                                Destination;                                       // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Absorber;                                          // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BloodOrb_UpdateAttracted_Cosmetic) == 0x000008, "Wrong alignment on BloodOrb_UpdateAttracted_Cosmetic");
static_assert(sizeof(BloodOrb_UpdateAttracted_Cosmetic) == 0x000028, "Wrong size on BloodOrb_UpdateAttracted_Cosmetic");
static_assert(offsetof(BloodOrb_UpdateAttracted_Cosmetic, Destination) == 0x000000, "Member 'BloodOrb_UpdateAttracted_Cosmetic::Destination' has a wrong offset!");
static_assert(offsetof(BloodOrb_UpdateAttracted_Cosmetic, Absorber) == 0x000018, "Member 'BloodOrb_UpdateAttracted_Cosmetic::Absorber' has a wrong offset!");
static_assert(offsetof(BloodOrb_UpdateAttracted_Cosmetic, DeltaTime) == 0x000020, "Member 'BloodOrb_UpdateAttracted_Cosmetic::DeltaTime' has a wrong offset!");

// Function TheOni.BloodOrb.GetDroppingPlayer
// 0x0008 (0x0008 - 0x0000)
struct BloodOrb_GetDroppingPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrb_GetDroppingPlayer) == 0x000008, "Wrong alignment on BloodOrb_GetDroppingPlayer");
static_assert(sizeof(BloodOrb_GetDroppingPlayer) == 0x000008, "Wrong size on BloodOrb_GetDroppingPlayer");
static_assert(offsetof(BloodOrb_GetDroppingPlayer, ReturnValue) == 0x000000, "Member 'BloodOrb_GetDroppingPlayer::ReturnValue' has a wrong offset!");

// Function TheOni.BloodOrbAbsorberComponent.SetInAbsorbMode
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbAbsorberComponent_SetInAbsorbMode final
{
public:
	bool                                          InAbsorptionMode;                                  // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbAbsorberComponent_SetInAbsorbMode) == 0x000001, "Wrong alignment on BloodOrbAbsorberComponent_SetInAbsorbMode");
static_assert(sizeof(BloodOrbAbsorberComponent_SetInAbsorbMode) == 0x000001, "Wrong size on BloodOrbAbsorberComponent_SetInAbsorbMode");
static_assert(offsetof(BloodOrbAbsorberComponent_SetInAbsorbMode, InAbsorptionMode) == 0x000000, "Member 'BloodOrbAbsorberComponent_SetInAbsorbMode::InAbsorptionMode' has a wrong offset!");

// Function TheOni.BloodOrbAbsorberComponent.IsInAbsorbMode
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbAbsorberComponent_IsInAbsorbMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbAbsorberComponent_IsInAbsorbMode) == 0x000001, "Wrong alignment on BloodOrbAbsorberComponent_IsInAbsorbMode");
static_assert(sizeof(BloodOrbAbsorberComponent_IsInAbsorbMode) == 0x000001, "Wrong size on BloodOrbAbsorberComponent_IsInAbsorbMode");
static_assert(offsetof(BloodOrbAbsorberComponent_IsInAbsorbMode, ReturnValue) == 0x000000, "Member 'BloodOrbAbsorberComponent_IsInAbsorbMode::ReturnValue' has a wrong offset!");

// Function TheOni.BloodOrbConfiguratorComponent.Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier final
{
public:
	const class ADBDPlayer*                       Killer;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier) == 0x000008, "Wrong alignment on BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier");
static_assert(sizeof(BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier) == 0x000008, "Wrong size on BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier");
static_assert(offsetof(BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier, Killer) == 0x000000, "Member 'BloodOrbConfiguratorComponent_Authority_UpdateSurvivorBloodOrbDropperOnCrouchModifier::Killer' has a wrong offset!");

// Function TheOni.BloodOrbConfiguratorComponent.UpdateBloodOrbAttractSpeed
// 0x0010 (0x0010 - 0x0000)
struct BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed final
{
public:
	class UBloodOrbAbsorberComponent*             BloodOrbAbsorberComponent;                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed) == 0x000008, "Wrong alignment on BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed");
static_assert(sizeof(BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed) == 0x000010, "Wrong size on BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed, BloodOrbAbsorberComponent) == 0x000000, "Member 'BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed::BloodOrbAbsorberComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed, Killer) == 0x000008, "Member 'BloodOrbConfiguratorComponent_UpdateBloodOrbAttractSpeed::Killer' has a wrong offset!");

// Function TheOni.BloodOrbConfiguratorComponent.UpdateKillerBloodOrbVisiblityRanges
// 0x0010 (0x0010 - 0x0000)
struct BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges final
{
public:
	class UBloodOrbVisibilityComponent*           BloodOrbVisibilityComponent;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             Killer;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges) == 0x000008, "Wrong alignment on BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges");
static_assert(sizeof(BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges) == 0x000010, "Wrong size on BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges, BloodOrbVisibilityComponent) == 0x000000, "Member 'BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges::BloodOrbVisibilityComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges, Killer) == 0x000008, "Member 'BloodOrbConfiguratorComponent_UpdateKillerBloodOrbVisiblityRanges::Killer' has a wrong offset!");

// Function TheOni.BloodOrbConfiguratorComponent.UpdateSurvivorBloodOrbVisibilityRange
// 0x0010 (0x0010 - 0x0000)
struct BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange final
{
public:
	class UBloodOrbVisibilityComponent*           BloodOrbVisibilityComponent;                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ADBDPlayer*                       Killer;                                            // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange) == 0x000008, "Wrong alignment on BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange");
static_assert(sizeof(BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange) == 0x000010, "Wrong size on BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange, BloodOrbVisibilityComponent) == 0x000000, "Member 'BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange::BloodOrbVisibilityComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange, Killer) == 0x000008, "Member 'BloodOrbConfiguratorComponent_UpdateSurvivorBloodOrbVisibilityRange::Killer' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnCamperCrouched
// 0x0040 (0x0040 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnCamperCrouched final
{
public:
	struct FGameplayTag                           GameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnCamperCrouched) == 0x000008, "Wrong alignment on BloodOrbDropperComponent_Authority_OnCamperCrouched");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnCamperCrouched) == 0x000040, "Wrong size on BloodOrbDropperComponent_Authority_OnCamperCrouched");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperCrouched, GameEvent) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnCamperCrouched::GameEvent' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperCrouched, GameEventData) == 0x000010, "Member 'BloodOrbDropperComponent_Authority_OnCamperCrouched::GameEventData' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnCamperUnhooked
// 0x0040 (0x0040 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnCamperUnhooked final
{
public:
	struct FGameplayTag                           GameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnCamperUnhooked) == 0x000008, "Wrong alignment on BloodOrbDropperComponent_Authority_OnCamperUnhooked");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnCamperUnhooked) == 0x000040, "Wrong size on BloodOrbDropperComponent_Authority_OnCamperUnhooked");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperUnhooked, GameEvent) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnCamperUnhooked::GameEvent' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperUnhooked, GameEventData) == 0x000010, "Member 'BloodOrbDropperComponent_Authority_OnCamperUnhooked::GameEventData' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnOwningCamperDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged final
{
public:
	ECamperDamageState                            OldState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            NewState;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged) == 0x000001, "Wrong alignment on BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged) == 0x000002, "Wrong size on BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged, OldState) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged, NewState) == 0x000001, "Member 'BloodOrbDropperComponent_Authority_OnOwningCamperDamageStateChanged::NewState' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_SetPaused
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbDropperComponent_Authority_SetPaused final
{
public:
	bool                                          Paused;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_SetPaused) == 0x000001, "Wrong alignment on BloodOrbDropperComponent_Authority_SetPaused");
static_assert(sizeof(BloodOrbDropperComponent_Authority_SetPaused) == 0x000001, "Wrong size on BloodOrbDropperComponent_Authority_SetPaused");
static_assert(offsetof(BloodOrbDropperComponent_Authority_SetPaused, Paused) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_SetPaused::Paused' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnCamperHooked
// 0x0040 (0x0040 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnCamperHooked final
{
public:
	struct FGameplayTag                           GameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnCamperHooked) == 0x000008, "Wrong alignment on BloodOrbDropperComponent_Authority_OnCamperHooked");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnCamperHooked) == 0x000040, "Wrong size on BloodOrbDropperComponent_Authority_OnCamperHooked");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperHooked, GameEvent) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnCamperHooked::GameEvent' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnCamperHooked, GameEventData) == 0x000010, "Member 'BloodOrbDropperComponent_Authority_OnCamperHooked::GameEventData' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.Authority_OnDropOrbsGameEvent
// 0x0048 (0x0048 - 0x0000)
struct BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent final
{
public:
	struct FGameplayTag                           GameEvent;                                         // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FBloodOrbDropParams                    DropParams;                                        // 0x0040(0x0008)(ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent) == 0x000008, "Wrong alignment on BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent");
static_assert(sizeof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent) == 0x000048, "Wrong size on BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent, GameEvent) == 0x000000, "Member 'BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent::GameEvent' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent, GameEventData) == 0x000010, "Member 'BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent::GameEventData' has a wrong offset!");
static_assert(offsetof(BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent, DropParams) == 0x000040, "Member 'BloodOrbDropperComponent_Authority_OnDropOrbsGameEvent::DropParams' has a wrong offset!");

// Function TheOni.BloodOrbDropperComponent.DBD_DropBloodOrbs
// 0x0004 (0x0004 - 0x0000)
struct BloodOrbDropperComponent_DBD_DropBloodOrbs final
{
public:
	int32                                         NumOrbs;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbDropperComponent_DBD_DropBloodOrbs) == 0x000004, "Wrong alignment on BloodOrbDropperComponent_DBD_DropBloodOrbs");
static_assert(sizeof(BloodOrbDropperComponent_DBD_DropBloodOrbs) == 0x000004, "Wrong size on BloodOrbDropperComponent_DBD_DropBloodOrbs");
static_assert(offsetof(BloodOrbDropperComponent_DBD_DropBloodOrbs, NumOrbs) == 0x000000, "Member 'BloodOrbDropperComponent_DBD_DropBloodOrbs::NumOrbs' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.Authority_OnBloodOrbBeginOverlap
// 0x0110 (0x0110 - 0x0000)
struct BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap) == 0x000008, "Wrong alignment on BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap");
static_assert(sizeof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap) == 0x000110, "Wrong size on BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, HitComponent) == 0x000000, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::HitComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, OtherActor) == 0x000008, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, OtherComp) == 0x000010, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, OtherBodyIndex) == 0x000018, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, bFromSweep) == 0x00001C, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::bFromSweep' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap, SweepResult) == 0x000020, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbBeginOverlap::SweepResult' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.Authority_OnBloodOrbEndOverlap
// 0x0020 (0x0020 - 0x0000)
struct BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap) == 0x000008, "Wrong alignment on BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap");
static_assert(sizeof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap) == 0x000020, "Wrong size on BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap, HitComponent) == 0x000000, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap::HitComponent' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap, OtherActor) == 0x000008, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap::OtherActor' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap, OtherComp) == 0x000010, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap::OtherComp' has a wrong offset!");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap, OtherBodyIndex) == 0x000018, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbEndOverlap::OtherBodyIndex' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.Authority_OnBloodOrbVisibilityModeChanged
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged final
{
public:
	EBloodOrbVisibilityMode                       VisibilityMode;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged) == 0x000001, "Wrong alignment on BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged");
static_assert(sizeof(BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged) == 0x000001, "Wrong size on BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged, VisibilityMode) == 0x000000, "Member 'BloodOrbOverlapComponent_Authority_OnBloodOrbVisibilityModeChanged::VisibilityMode' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.Authority_OnDestroyedBloodOrb
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb) == 0x000008, "Wrong alignment on BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb");
static_assert(sizeof(BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb) == 0x000008, "Wrong size on BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb");
static_assert(offsetof(BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb, DestroyedActor) == 0x000000, "Member 'BloodOrbOverlapComponent_Authority_OnDestroyedBloodOrb::DestroyedActor' has a wrong offset!");

// Function TheOni.BloodOrbOverlapComponent.OnRep_CurrentOverlappingOrbs
// 0x0004 (0x0004 - 0x0000)
struct BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs final
{
public:
	int32                                         PreviousOverlappingOrbs;                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs) == 0x000004, "Wrong alignment on BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs");
static_assert(sizeof(BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs) == 0x000004, "Wrong size on BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs");
static_assert(offsetof(BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs, PreviousOverlappingOrbs) == 0x000000, "Member 'BloodOrbOverlapComponent_OnRep_CurrentOverlappingOrbs::PreviousOverlappingOrbs' has a wrong offset!");

// Function TheOni.BloodOrbStateMonitorComponent.OnBloodOrbDestroyed
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbStateMonitorComponent_OnBloodOrbDestroyed final
{
public:
	const class ABloodOrb*                        BloodOrb;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbStateMonitorComponent_OnBloodOrbDestroyed) == 0x000008, "Wrong alignment on BloodOrbStateMonitorComponent_OnBloodOrbDestroyed");
static_assert(sizeof(BloodOrbStateMonitorComponent_OnBloodOrbDestroyed) == 0x000008, "Wrong size on BloodOrbStateMonitorComponent_OnBloodOrbDestroyed");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbDestroyed, BloodOrb) == 0x000000, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbDestroyed::BloodOrb' has a wrong offset!");

// Function TheOni.BloodOrbStateMonitorComponent.OnBloodOrbSpawned
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbStateMonitorComponent_OnBloodOrbSpawned final
{
public:
	const class ABloodOrb*                        BloodOrb;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbStateMonitorComponent_OnBloodOrbSpawned) == 0x000008, "Wrong alignment on BloodOrbStateMonitorComponent_OnBloodOrbSpawned");
static_assert(sizeof(BloodOrbStateMonitorComponent_OnBloodOrbSpawned) == 0x000008, "Wrong size on BloodOrbStateMonitorComponent_OnBloodOrbSpawned");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbSpawned, BloodOrb) == 0x000000, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbSpawned::BloodOrb' has a wrong offset!");

// Function TheOni.BloodOrbStateMonitorComponent.OnBloodOrbStateChanged
// 0x0010 (0x0010 - 0x0000)
struct BloodOrbStateMonitorComponent_OnBloodOrbStateChanged final
{
public:
	EBloodOrbState                                OldState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBloodOrbState                                NewState;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x6];                                        // 0x0002(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class ABloodOrb*                        BloodOrb;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged) == 0x000008, "Wrong alignment on BloodOrbStateMonitorComponent_OnBloodOrbStateChanged");
static_assert(sizeof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged) == 0x000010, "Wrong size on BloodOrbStateMonitorComponent_OnBloodOrbStateChanged");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged, OldState) == 0x000000, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged, NewState) == 0x000001, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbStateChanged::NewState' has a wrong offset!");
static_assert(offsetof(BloodOrbStateMonitorComponent_OnBloodOrbStateChanged, BloodOrb) == 0x000008, "Member 'BloodOrbStateMonitorComponent_OnBloodOrbStateChanged::BloodOrb' has a wrong offset!");

// Function TheOni.BloodOrbUtilities.GetAllBloodOrbs
// 0x0018 (0x0018 - 0x0000)
struct BloodOrbUtilities_GetAllBloodOrbs final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class ABloodOrb*>                      ReturnValue;                                       // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbUtilities_GetAllBloodOrbs) == 0x000008, "Wrong alignment on BloodOrbUtilities_GetAllBloodOrbs");
static_assert(sizeof(BloodOrbUtilities_GetAllBloodOrbs) == 0x000018, "Wrong size on BloodOrbUtilities_GetAllBloodOrbs");
static_assert(offsetof(BloodOrbUtilities_GetAllBloodOrbs, WorldContextObject) == 0x000000, "Member 'BloodOrbUtilities_GetAllBloodOrbs::WorldContextObject' has a wrong offset!");
static_assert(offsetof(BloodOrbUtilities_GetAllBloodOrbs, ReturnValue) == 0x000008, "Member 'BloodOrbUtilities_GetAllBloodOrbs::ReturnValue' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.SetAuraVisibilityRange
// 0x0004 (0x0004 - 0x0000)
struct BloodOrbVisibilityComponent_SetAuraVisibilityRange final
{
public:
	float                                         AuraVisibilityRange;                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_SetAuraVisibilityRange) == 0x000004, "Wrong alignment on BloodOrbVisibilityComponent_SetAuraVisibilityRange");
static_assert(sizeof(BloodOrbVisibilityComponent_SetAuraVisibilityRange) == 0x000004, "Wrong size on BloodOrbVisibilityComponent_SetAuraVisibilityRange");
static_assert(offsetof(BloodOrbVisibilityComponent_SetAuraVisibilityRange, AuraVisibilityRange) == 0x000000, "Member 'BloodOrbVisibilityComponent_SetAuraVisibilityRange::AuraVisibilityRange' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.SetShowAttractedBloodOrbsAuras
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras) == 0x000001, "Wrong alignment on BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras");
static_assert(sizeof(BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras) == 0x000001, "Wrong size on BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras");
static_assert(offsetof(BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras, Show) == 0x000000, "Member 'BloodOrbVisibilityComponent_SetShowAttractedBloodOrbsAuras::Show' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.SetVisibilityMode
// 0x0001 (0x0001 - 0x0000)
struct BloodOrbVisibilityComponent_SetVisibilityMode final
{
public:
	EBloodOrbVisibilityMode                       VisibilityMode;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_SetVisibilityMode) == 0x000001, "Wrong alignment on BloodOrbVisibilityComponent_SetVisibilityMode");
static_assert(sizeof(BloodOrbVisibilityComponent_SetVisibilityMode) == 0x000001, "Wrong size on BloodOrbVisibilityComponent_SetVisibilityMode");
static_assert(offsetof(BloodOrbVisibilityComponent_SetVisibilityMode, VisibilityMode) == 0x000000, "Member 'BloodOrbVisibilityComponent_SetVisibilityMode::VisibilityMode' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.SetVisibilityRange
// 0x0004 (0x0004 - 0x0000)
struct BloodOrbVisibilityComponent_SetVisibilityRange final
{
public:
	float                                         VisibilityRange;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_SetVisibilityRange) == 0x000004, "Wrong alignment on BloodOrbVisibilityComponent_SetVisibilityRange");
static_assert(sizeof(BloodOrbVisibilityComponent_SetVisibilityRange) == 0x000004, "Wrong size on BloodOrbVisibilityComponent_SetVisibilityRange");
static_assert(offsetof(BloodOrbVisibilityComponent_SetVisibilityRange, VisibilityRange) == 0x000000, "Member 'BloodOrbVisibilityComponent_SetVisibilityRange::VisibilityRange' has a wrong offset!");

// Function TheOni.BloodOrbVisibilityComponent.OnBloodOrbSpawned
// 0x0008 (0x0008 - 0x0000)
struct BloodOrbVisibilityComponent_OnBloodOrbSpawned final
{
public:
	const class ABloodOrb*                        BloodOrb;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodOrbVisibilityComponent_OnBloodOrbSpawned) == 0x000008, "Wrong alignment on BloodOrbVisibilityComponent_OnBloodOrbSpawned");
static_assert(sizeof(BloodOrbVisibilityComponent_OnBloodOrbSpawned) == 0x000008, "Wrong size on BloodOrbVisibilityComponent_OnBloodOrbSpawned");
static_assert(offsetof(BloodOrbVisibilityComponent_OnBloodOrbSpawned, BloodOrb) == 0x000000, "Member 'BloodOrbVisibilityComponent_OnBloodOrbSpawned::BloodOrb' has a wrong offset!");

// Function TheOni.DemonModeComponent.Authority_AddCharge
// 0x0004 (0x0004 - 0x0000)
struct DemonModeComponent_Authority_AddCharge final
{
public:
	float                                         ChargeAmount;                                      // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_Authority_AddCharge) == 0x000004, "Wrong alignment on DemonModeComponent_Authority_AddCharge");
static_assert(sizeof(DemonModeComponent_Authority_AddCharge) == 0x000004, "Wrong size on DemonModeComponent_Authority_AddCharge");
static_assert(offsetof(DemonModeComponent_Authority_AddCharge, ChargeAmount) == 0x000000, "Member 'DemonModeComponent_Authority_AddCharge::ChargeAmount' has a wrong offset!");

// Function TheOni.DemonModeComponent.Authority_InterruptedMontage
// 0x0028 (0x0028 - 0x0000)
struct DemonModeComponent_Authority_InterruptedMontage final
{
public:
	struct FAnimationMontageDescriptor            Montage;                                           // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DemonModeComponent_Authority_InterruptedMontage) == 0x000008, "Wrong alignment on DemonModeComponent_Authority_InterruptedMontage");
static_assert(sizeof(DemonModeComponent_Authority_InterruptedMontage) == 0x000028, "Wrong size on DemonModeComponent_Authority_InterruptedMontage");
static_assert(offsetof(DemonModeComponent_Authority_InterruptedMontage, Montage) == 0x000000, "Member 'DemonModeComponent_Authority_InterruptedMontage::Montage' has a wrong offset!");
static_assert(offsetof(DemonModeComponent_Authority_InterruptedMontage, Interrupted) == 0x000020, "Member 'DemonModeComponent_Authority_InterruptedMontage::Interrupted' has a wrong offset!");

// Function TheOni.DemonModeComponent.Authority_OnChargeChanged
// 0x0004 (0x0004 - 0x0000)
struct DemonModeComponent_Authority_OnChargeChanged final
{
public:
	float                                         CurrentChargePercent;                              // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_Authority_OnChargeChanged) == 0x000004, "Wrong alignment on DemonModeComponent_Authority_OnChargeChanged");
static_assert(sizeof(DemonModeComponent_Authority_OnChargeChanged) == 0x000004, "Wrong size on DemonModeComponent_Authority_OnChargeChanged");
static_assert(offsetof(DemonModeComponent_Authority_OnChargeChanged, CurrentChargePercent) == 0x000000, "Member 'DemonModeComponent_Authority_OnChargeChanged::CurrentChargePercent' has a wrong offset!");

// Function TheOni.DemonModeComponent.Authority_SetDemonModeCooldownInteraction
// 0x0008 (0x0008 - 0x0000)
struct DemonModeComponent_Authority_SetDemonModeCooldownInteraction final
{
public:
	class UInteractionDefinition*                 Interaction;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_Authority_SetDemonModeCooldownInteraction) == 0x000008, "Wrong alignment on DemonModeComponent_Authority_SetDemonModeCooldownInteraction");
static_assert(sizeof(DemonModeComponent_Authority_SetDemonModeCooldownInteraction) == 0x000008, "Wrong size on DemonModeComponent_Authority_SetDemonModeCooldownInteraction");
static_assert(offsetof(DemonModeComponent_Authority_SetDemonModeCooldownInteraction, Interaction) == 0x000000, "Member 'DemonModeComponent_Authority_SetDemonModeCooldownInteraction::Interaction' has a wrong offset!");

// Function TheOni.DemonModeComponent.DBD_DemonModeForever
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_DBD_DemonModeForever final
{
public:
	bool                                          Forever;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_DBD_DemonModeForever) == 0x000001, "Wrong alignment on DemonModeComponent_DBD_DemonModeForever");
static_assert(sizeof(DemonModeComponent_DBD_DemonModeForever) == 0x000001, "Wrong size on DemonModeComponent_DBD_DemonModeForever");
static_assert(offsetof(DemonModeComponent_DBD_DemonModeForever, Forever) == 0x000000, "Member 'DemonModeComponent_DBD_DemonModeForever::Forever' has a wrong offset!");

// Function TheOni.DemonModeComponent.ShowDemonModeCustomization
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_ShowDemonModeCustomization final
{
public:
	bool                                          ShowDemonMode;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_ShowDemonModeCustomization) == 0x000001, "Wrong alignment on DemonModeComponent_ShowDemonModeCustomization");
static_assert(sizeof(DemonModeComponent_ShowDemonModeCustomization) == 0x000001, "Wrong size on DemonModeComponent_ShowDemonModeCustomization");
static_assert(offsetof(DemonModeComponent_ShowDemonModeCustomization, ShowDemonMode) == 0x000000, "Member 'DemonModeComponent_ShowDemonModeCustomization::ShowDemonMode' has a wrong offset!");

// Function TheOni.DemonModeComponent.CanStartDemonMode
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_CanStartDemonMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_CanStartDemonMode) == 0x000001, "Wrong alignment on DemonModeComponent_CanStartDemonMode");
static_assert(sizeof(DemonModeComponent_CanStartDemonMode) == 0x000001, "Wrong size on DemonModeComponent_CanStartDemonMode");
static_assert(offsetof(DemonModeComponent_CanStartDemonMode, ReturnValue) == 0x000000, "Member 'DemonModeComponent_CanStartDemonMode::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.GetChargePercent
// 0x0004 (0x0004 - 0x0000)
struct DemonModeComponent_GetChargePercent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_GetChargePercent) == 0x000004, "Wrong alignment on DemonModeComponent_GetChargePercent");
static_assert(sizeof(DemonModeComponent_GetChargePercent) == 0x000004, "Wrong size on DemonModeComponent_GetChargePercent");
static_assert(offsetof(DemonModeComponent_GetChargePercent, ReturnValue) == 0x000000, "Member 'DemonModeComponent_GetChargePercent::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.GetCurrentCharge
// 0x0004 (0x0004 - 0x0000)
struct DemonModeComponent_GetCurrentCharge final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_GetCurrentCharge) == 0x000004, "Wrong alignment on DemonModeComponent_GetCurrentCharge");
static_assert(sizeof(DemonModeComponent_GetCurrentCharge) == 0x000004, "Wrong size on DemonModeComponent_GetCurrentCharge");
static_assert(offsetof(DemonModeComponent_GetCurrentCharge, ReturnValue) == 0x000000, "Member 'DemonModeComponent_GetCurrentCharge::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.GetDemonModeCustomization
// 0x0010 (0x0010 - 0x0000)
struct DemonModeComponent_GetDemonModeCustomization final
{
public:
	TArray<class USkeletalMeshComponent*>         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_GetDemonModeCustomization) == 0x000008, "Wrong alignment on DemonModeComponent_GetDemonModeCustomization");
static_assert(sizeof(DemonModeComponent_GetDemonModeCustomization) == 0x000010, "Wrong size on DemonModeComponent_GetDemonModeCustomization");
static_assert(offsetof(DemonModeComponent_GetDemonModeCustomization, ReturnValue) == 0x000000, "Member 'DemonModeComponent_GetDemonModeCustomization::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.GetDemonModeState
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_GetDemonModeState final
{
public:
	EDemonModeState                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_GetDemonModeState) == 0x000001, "Wrong alignment on DemonModeComponent_GetDemonModeState");
static_assert(sizeof(DemonModeComponent_GetDemonModeState) == 0x000001, "Wrong size on DemonModeComponent_GetDemonModeState");
static_assert(offsetof(DemonModeComponent_GetDemonModeState, ReturnValue) == 0x000000, "Member 'DemonModeComponent_GetDemonModeState::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.GetNormalModeCustomization
// 0x0010 (0x0010 - 0x0000)
struct DemonModeComponent_GetNormalModeCustomization final
{
public:
	TArray<class USkeletalMeshComponent*>         ReturnValue;                                       // 0x0000(0x0010)(ConstParm, ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_GetNormalModeCustomization) == 0x000008, "Wrong alignment on DemonModeComponent_GetNormalModeCustomization");
static_assert(sizeof(DemonModeComponent_GetNormalModeCustomization) == 0x000010, "Wrong size on DemonModeComponent_GetNormalModeCustomization");
static_assert(offsetof(DemonModeComponent_GetNormalModeCustomization, ReturnValue) == 0x000000, "Member 'DemonModeComponent_GetNormalModeCustomization::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.IsInDemonMode
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_IsInDemonMode final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_IsInDemonMode) == 0x000001, "Wrong alignment on DemonModeComponent_IsInDemonMode");
static_assert(sizeof(DemonModeComponent_IsInDemonMode) == 0x000001, "Wrong size on DemonModeComponent_IsInDemonMode");
static_assert(offsetof(DemonModeComponent_IsInDemonMode, ReturnValue) == 0x000000, "Member 'DemonModeComponent_IsInDemonMode::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeComponent.OnIsPowerChanged
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_OnIsPowerChanged final
{
public:
	bool                                          IsInPower;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_OnIsPowerChanged) == 0x000001, "Wrong alignment on DemonModeComponent_OnIsPowerChanged");
static_assert(sizeof(DemonModeComponent_OnIsPowerChanged) == 0x000001, "Wrong size on DemonModeComponent_OnIsPowerChanged");
static_assert(offsetof(DemonModeComponent_OnIsPowerChanged, IsInPower) == 0x000000, "Member 'DemonModeComponent_OnIsPowerChanged::IsInPower' has a wrong offset!");

// Function TheOni.DemonModeComponent.ShouldLoseDemonModeOnStun
// 0x0001 (0x0001 - 0x0000)
struct DemonModeComponent_ShouldLoseDemonModeOnStun final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeComponent_ShouldLoseDemonModeOnStun) == 0x000001, "Wrong alignment on DemonModeComponent_ShouldLoseDemonModeOnStun");
static_assert(sizeof(DemonModeComponent_ShouldLoseDemonModeOnStun) == 0x000001, "Wrong size on DemonModeComponent_ShouldLoseDemonModeOnStun");
static_assert(offsetof(DemonModeComponent_ShouldLoseDemonModeOnStun, ReturnValue) == 0x000000, "Member 'DemonModeComponent_ShouldLoseDemonModeOnStun::ReturnValue' has a wrong offset!");

// Function TheOni.DemonModeCooldownInteraction.SetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct DemonModeCooldownInteraction_SetPlayerOwner final
{
public:
	const class ADBDPlayer*                       Owner;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeCooldownInteraction_SetPlayerOwner) == 0x000008, "Wrong alignment on DemonModeCooldownInteraction_SetPlayerOwner");
static_assert(sizeof(DemonModeCooldownInteraction_SetPlayerOwner) == 0x000008, "Wrong size on DemonModeCooldownInteraction_SetPlayerOwner");
static_assert(offsetof(DemonModeCooldownInteraction_SetPlayerOwner, Owner) == 0x000000, "Member 'DemonModeCooldownInteraction_SetPlayerOwner::Owner' has a wrong offset!");

// Function TheOni.DemonModeMenuComponent.SetInMenuDemonMode
// 0x0001 (0x0001 - 0x0000)
struct DemonModeMenuComponent_SetInMenuDemonMode final
{
public:
	bool                                          InMenuDemonMode;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DemonModeMenuComponent_SetInMenuDemonMode) == 0x000001, "Wrong alignment on DemonModeMenuComponent_SetInMenuDemonMode");
static_assert(sizeof(DemonModeMenuComponent_SetInMenuDemonMode) == 0x000001, "Wrong size on DemonModeMenuComponent_SetInMenuDemonMode");
static_assert(offsetof(DemonModeMenuComponent_SetInMenuDemonMode, InMenuDemonMode) == 0x000000, "Member 'DemonModeMenuComponent_SetInMenuDemonMode::InMenuDemonMode' has a wrong offset!");

// Function TheOni.OniCustomizationItemAnimInstance.SetIsInDemonMode
// 0x0001 (0x0001 - 0x0000)
struct OniCustomizationItemAnimInstance_SetIsInDemonMode final
{
public:
	bool                                          IsInDemonMode;                                     // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniCustomizationItemAnimInstance_SetIsInDemonMode) == 0x000001, "Wrong alignment on OniCustomizationItemAnimInstance_SetIsInDemonMode");
static_assert(sizeof(OniCustomizationItemAnimInstance_SetIsInDemonMode) == 0x000001, "Wrong size on OniCustomizationItemAnimInstance_SetIsInDemonMode");
static_assert(offsetof(OniCustomizationItemAnimInstance_SetIsInDemonMode, IsInDemonMode) == 0x000000, "Member 'OniCustomizationItemAnimInstance_SetIsInDemonMode::IsInDemonMode' has a wrong offset!");

// Function TheOni.OniDashInteraction.OnChargeBegin
// 0x0008 (0x0008 - 0x0000)
struct OniDashInteraction_OnChargeBegin final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniDashInteraction_OnChargeBegin) == 0x000008, "Wrong alignment on OniDashInteraction_OnChargeBegin");
static_assert(sizeof(OniDashInteraction_OnChargeBegin) == 0x000008, "Wrong size on OniDashInteraction_OnChargeBegin");
static_assert(offsetof(OniDashInteraction_OnChargeBegin, Player) == 0x000000, "Member 'OniDashInteraction_OnChargeBegin::Player' has a wrong offset!");

// Function TheOni.OniDashInteraction.OnChargeEnd
// 0x0010 (0x0010 - 0x0000)
struct OniDashInteraction_OnChargeEnd final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ChargeCompleted;                                   // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OniDashInteraction_OnChargeEnd) == 0x000008, "Wrong alignment on OniDashInteraction_OnChargeEnd");
static_assert(sizeof(OniDashInteraction_OnChargeEnd) == 0x000010, "Wrong size on OniDashInteraction_OnChargeEnd");
static_assert(offsetof(OniDashInteraction_OnChargeEnd, Player) == 0x000000, "Member 'OniDashInteraction_OnChargeEnd::Player' has a wrong offset!");
static_assert(offsetof(OniDashInteraction_OnChargeEnd, ChargeCompleted) == 0x000008, "Member 'OniDashInteraction_OnChargeEnd::ChargeCompleted' has a wrong offset!");

// Function TheOni.OniDashInteraction.OnDashBegin
// 0x0008 (0x0008 - 0x0000)
struct OniDashInteraction_OnDashBegin final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniDashInteraction_OnDashBegin) == 0x000008, "Wrong alignment on OniDashInteraction_OnDashBegin");
static_assert(sizeof(OniDashInteraction_OnDashBegin) == 0x000008, "Wrong size on OniDashInteraction_OnDashBegin");
static_assert(offsetof(OniDashInteraction_OnDashBegin, Player) == 0x000000, "Member 'OniDashInteraction_OnDashBegin::Player' has a wrong offset!");

// Function TheOni.OniDashInteraction.OnDashEnd
// 0x0008 (0x0008 - 0x0000)
struct OniDashInteraction_OnDashEnd final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniDashInteraction_OnDashEnd) == 0x000008, "Wrong alignment on OniDashInteraction_OnDashEnd");
static_assert(sizeof(OniDashInteraction_OnDashEnd) == 0x000008, "Wrong size on OniDashInteraction_OnDashEnd");
static_assert(offsetof(OniDashInteraction_OnDashEnd, Player) == 0x000000, "Member 'OniDashInteraction_OnDashEnd::Player' has a wrong offset!");

// Function TheOni.OniDashInteraction.SetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct OniDashInteraction_SetPlayerOwner final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OniDashInteraction_SetPlayerOwner) == 0x000008, "Wrong alignment on OniDashInteraction_SetPlayerOwner");
static_assert(sizeof(OniDashInteraction_SetPlayerOwner) == 0x000008, "Wrong size on OniDashInteraction_SetPlayerOwner");
static_assert(offsetof(OniDashInteraction_SetPlayerOwner, Player) == 0x000000, "Member 'OniDashInteraction_SetPlayerOwner::Player' has a wrong offset!");

// Function TheOni.RenjirosBloodyGlove.Authority_OnBloodOrbOverlapBegin
// 0x0010 (0x0010 - 0x0000)
struct RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin final
{
public:
	const class AActor*                           OverlappingActor;                                  // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ABloodOrb*                        BloodOrb;                                          // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin) == 0x000008, "Wrong alignment on RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin");
static_assert(sizeof(RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin) == 0x000010, "Wrong size on RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin");
static_assert(offsetof(RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin, OverlappingActor) == 0x000000, "Member 'RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin::OverlappingActor' has a wrong offset!");
static_assert(offsetof(RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin, BloodOrb) == 0x000008, "Member 'RenjirosBloodyGlove_Authority_OnBloodOrbOverlapBegin::BloodOrb' has a wrong offset!");

// Function TheOni.StartDemonModeInteraction.SetPlayerOwner
// 0x0008 (0x0008 - 0x0000)
struct StartDemonModeInteraction_SetPlayerOwner final
{
public:
	const class ADBDPlayer*                       Owner;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartDemonModeInteraction_SetPlayerOwner) == 0x000008, "Wrong alignment on StartDemonModeInteraction_SetPlayerOwner");
static_assert(sizeof(StartDemonModeInteraction_SetPlayerOwner) == 0x000008, "Wrong size on StartDemonModeInteraction_SetPlayerOwner");
static_assert(offsetof(StartDemonModeInteraction_SetPlayerOwner, Owner) == 0x000000, "Member 'StartDemonModeInteraction_SetPlayerOwner::Owner' has a wrong offset!");

}

