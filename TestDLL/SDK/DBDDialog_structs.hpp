#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDDialog

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum DBDDialog.EDialogConditionSubject
// NumValues: 0x0004
enum class EDialogConditionSubject : uint8
{
	Instigator                               = 0,
	Target                                   = 1,
	NoCondition                              = 2,
	EDialogConditionSubject_MAX              = 3,
};

// ScriptStruct DBDDialog.NegatableDialogHandlerCondition
// 0x0018 (0x0018 - 0x0000)
struct FNegatableDialogHandlerCondition final
{
public:
	TSubclassOf<class UDialogHandlerCondition>    ConditionClass;                                    // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDialogHandlerCondition*                ConditionInstance;                                 // 0x0008(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNegated;                                         // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNegatableDialogHandlerCondition) == 0x000008, "Wrong alignment on FNegatableDialogHandlerCondition");
static_assert(sizeof(FNegatableDialogHandlerCondition) == 0x000018, "Wrong size on FNegatableDialogHandlerCondition");
static_assert(offsetof(FNegatableDialogHandlerCondition, ConditionClass) == 0x000000, "Member 'FNegatableDialogHandlerCondition::ConditionClass' has a wrong offset!");
static_assert(offsetof(FNegatableDialogHandlerCondition, ConditionInstance) == 0x000008, "Member 'FNegatableDialogHandlerCondition::ConditionInstance' has a wrong offset!");
static_assert(offsetof(FNegatableDialogHandlerCondition, IsNegated) == 0x000010, "Member 'FNegatableDialogHandlerCondition::IsNegated' has a wrong offset!");

// ScriptStruct DBDDialog.DialogHandlerConditionContainer
// 0x0010 (0x0010 - 0x0000)
struct FDialogHandlerConditionContainer final
{
public:
	TArray<struct FNegatableDialogHandlerCondition> Conditions;                                        // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogHandlerConditionContainer) == 0x000008, "Wrong alignment on FDialogHandlerConditionContainer");
static_assert(sizeof(FDialogHandlerConditionContainer) == 0x000010, "Wrong size on FDialogHandlerConditionContainer");
static_assert(offsetof(FDialogHandlerConditionContainer, Conditions) == 0x000000, "Member 'FDialogHandlerConditionContainer::Conditions' has a wrong offset!");

// ScriptStruct DBDDialog.DialogClipSettings
// 0x0028 (0x0028 - 0x0000)
struct FDialogClipSettings final
{
public:
	class UAkAudioEvent*                          Clip;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDialogHandlerConditionContainer       ConditionContainer;                                // 0x0008(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         Priority;                                          // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Weight;                                            // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnlyPlayingOnce;                                 // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasSubtitles;                                      // 0x0021(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogClipSettings) == 0x000008, "Wrong alignment on FDialogClipSettings");
static_assert(sizeof(FDialogClipSettings) == 0x000028, "Wrong size on FDialogClipSettings");
static_assert(offsetof(FDialogClipSettings, Clip) == 0x000000, "Member 'FDialogClipSettings::Clip' has a wrong offset!");
static_assert(offsetof(FDialogClipSettings, ConditionContainer) == 0x000008, "Member 'FDialogClipSettings::ConditionContainer' has a wrong offset!");
static_assert(offsetof(FDialogClipSettings, Priority) == 0x000018, "Member 'FDialogClipSettings::Priority' has a wrong offset!");
static_assert(offsetof(FDialogClipSettings, Weight) == 0x00001C, "Member 'FDialogClipSettings::Weight' has a wrong offset!");
static_assert(offsetof(FDialogClipSettings, IsOnlyPlayingOnce) == 0x000020, "Member 'FDialogClipSettings::IsOnlyPlayingOnce' has a wrong offset!");
static_assert(offsetof(FDialogClipSettings, HasSubtitles) == 0x000021, "Member 'FDialogClipSettings::HasSubtitles' has a wrong offset!");

// ScriptStruct DBDDialog.DialogEventSettings
// 0x0038 (0x0038 - 0x0000)
struct FDialogEventSettings final
{
public:
	struct FGameplayTag                           GameEventTrigger;                                  // 0x0000(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDialogConditionSubject                       ConditionSubject;                                  // 0x000C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyPlayIfLocallyObserved;                         // 0x000D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E[0x2];                                        // 0x000E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FDialogClipSettings>            Clips;                                             // 0x0010(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          OverrideCurrentAudio;                              // 0x0020(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x3];                                       // 0x0021(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayUntilPlay;                                    // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayProbability;                                   // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverridesMaximumSubtitleDistance;                  // 0x002C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D[0x3];                                       // 0x002D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaximumSubtitleDistance;                           // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EventPriority;                                     // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDialogEventSettings) == 0x000008, "Wrong alignment on FDialogEventSettings");
static_assert(sizeof(FDialogEventSettings) == 0x000038, "Wrong size on FDialogEventSettings");
static_assert(offsetof(FDialogEventSettings, GameEventTrigger) == 0x000000, "Member 'FDialogEventSettings::GameEventTrigger' has a wrong offset!");
static_assert(offsetof(FDialogEventSettings, ConditionSubject) == 0x00000C, "Member 'FDialogEventSettings::ConditionSubject' has a wrong offset!");
static_assert(offsetof(FDialogEventSettings, OnlyPlayIfLocallyObserved) == 0x00000D, "Member 'FDialogEventSettings::OnlyPlayIfLocallyObserved' has a wrong offset!");
static_assert(offsetof(FDialogEventSettings, Clips) == 0x000010, "Member 'FDialogEventSettings::Clips' has a wrong offset!");
static_assert(offsetof(FDialogEventSettings, OverrideCurrentAudio) == 0x000020, "Member 'FDialogEventSettings::OverrideCurrentAudio' has a wrong offset!");
static_assert(offsetof(FDialogEventSettings, DelayUntilPlay) == 0x000024, "Member 'FDialogEventSettings::DelayUntilPlay' has a wrong offset!");
static_assert(offsetof(FDialogEventSettings, PlayProbability) == 0x000028, "Member 'FDialogEventSettings::PlayProbability' has a wrong offset!");
static_assert(offsetof(FDialogEventSettings, OverridesMaximumSubtitleDistance) == 0x00002C, "Member 'FDialogEventSettings::OverridesMaximumSubtitleDistance' has a wrong offset!");
static_assert(offsetof(FDialogEventSettings, MaximumSubtitleDistance) == 0x000030, "Member 'FDialogEventSettings::MaximumSubtitleDistance' has a wrong offset!");
static_assert(offsetof(FDialogEventSettings, EventPriority) == 0x000034, "Member 'FDialogEventSettings::EventPriority' has a wrong offset!");

// ScriptStruct DBDDialog.DialogPlannedPlayback
// 0x0020 (0x0020 - 0x0000)
struct FDialogPlannedPlayback final
{
public:
	TArray<struct FAkEventWithSubtitle>           PlannedClip;                                       // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GameEventTrigger;                                  // 0x0010(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeletingAfterTrigger;                            // 0x001C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDialogPlannedPlayback) == 0x000008, "Wrong alignment on FDialogPlannedPlayback");
static_assert(sizeof(FDialogPlannedPlayback) == 0x000020, "Wrong size on FDialogPlannedPlayback");
static_assert(offsetof(FDialogPlannedPlayback, PlannedClip) == 0x000000, "Member 'FDialogPlannedPlayback::PlannedClip' has a wrong offset!");
static_assert(offsetof(FDialogPlannedPlayback, GameEventTrigger) == 0x000010, "Member 'FDialogPlannedPlayback::GameEventTrigger' has a wrong offset!");
static_assert(offsetof(FDialogPlannedPlayback, IsDeletingAfterTrigger) == 0x00001C, "Member 'FDialogPlannedPlayback::IsDeletingAfterTrigger' has a wrong offset!");

}

