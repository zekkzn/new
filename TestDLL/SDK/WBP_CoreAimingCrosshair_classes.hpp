#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreAimingCrosshair

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "DBDUIViewsCore_classes.hpp"
#include "DataTableUtilities_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CoreAimingCrosshair.WBP_CoreAimingCrosshair_C
// 0x0160 (0x04A8 - 0x0348)
class UWBP_CoreAimingCrosshair_C final : public UCoreHudAimingCrosshairWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0348(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UWidgetAnimation*                       OpeningAnim;                                       // 0x0350(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, RepSkip, NoDestructor, HasGetValueTypeHash)
	class UDBDImage*                              LeftBackgroundDecor;                               // 0x0358(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LeftDecor;                                         // 0x0360(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LeftLineDecor_1;                                   // 0x0368(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 LeftLineDecor_2;                                   // 0x0370(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              Reticle;                                           // 0x0378(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RightBackgroundDecor;                              // 0x0380(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RightLineDecor_1;                                  // 0x0388(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RightLineDecor_2;                                  // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWBP_K32BinaryTextAnim_C*               WBP_K32BinaryTextAnim;                             // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FDBDTunableRowHandle                   LockOnScreenCoveragePercentageY;                   // 0x03A0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	class UMaterialInstanceDynamic*               ReticleMaterial;                                   // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultReticleColor;                               // 0x03D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DefaultDecorColor;                                 // 0x03E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDBDTunableRowHandle                   CooldownDuration;                                  // 0x03F0(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FLinearColor                           CooldownReticleColor;                              // 0x0418(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CooldownDecorColor;                                // 0x0428(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TeleportingReticleColor;                           // 0x0438(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           TeleportingDecorColor;                             // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DisabledReticleColor;                              // 0x0458(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           DisabledDecorColor;                                // 0x0468(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ReticleScreenRatioY;                               // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDBDTunableRowHandle                   PodDisableDuration;                                // 0x0480(0x0028)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void SetTextAnim(EAimingCrosshairState State);
	void SetState(const EAimingCrosshairState NewState);
	void SetReticleColour(const struct FLinearColor& MainColor, const struct FLinearColor& ReticleColor, const struct FLinearColor& DecorColor);
	void SetProgress(const float Progress);
	void SetGlitch(EAimingCrosshairState State);
	void SetGauge(bool IsTargetting, bool AreGaugeVisible, bool AreGaugeVertical);
	void SetCross(bool IsActive, bool HasReticleGauge);
	void ResetMaterial();
	void PreConstruct(bool IsDesignTime);
	void PlayOpeningAnim(EAimingCrosshairState State);
	void ExecuteUbergraph_WBP_CoreAimingCrosshair(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CoreAimingCrosshair_C">();
	}
	static class UWBP_CoreAimingCrosshair_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CoreAimingCrosshair_C>();
	}
};
static_assert(alignof(UWBP_CoreAimingCrosshair_C) == 0x000008, "Wrong alignment on UWBP_CoreAimingCrosshair_C");
static_assert(sizeof(UWBP_CoreAimingCrosshair_C) == 0x0004A8, "Wrong size on UWBP_CoreAimingCrosshair_C");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, UberGraphFrame) == 0x000348, "Member 'UWBP_CoreAimingCrosshair_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, OpeningAnim) == 0x000350, "Member 'UWBP_CoreAimingCrosshair_C::OpeningAnim' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, LeftBackgroundDecor) == 0x000358, "Member 'UWBP_CoreAimingCrosshair_C::LeftBackgroundDecor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, LeftDecor) == 0x000360, "Member 'UWBP_CoreAimingCrosshair_C::LeftDecor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, LeftLineDecor_1) == 0x000368, "Member 'UWBP_CoreAimingCrosshair_C::LeftLineDecor_1' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, LeftLineDecor_2) == 0x000370, "Member 'UWBP_CoreAimingCrosshair_C::LeftLineDecor_2' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, Reticle) == 0x000378, "Member 'UWBP_CoreAimingCrosshair_C::Reticle' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, RightBackgroundDecor) == 0x000380, "Member 'UWBP_CoreAimingCrosshair_C::RightBackgroundDecor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, RightLineDecor_1) == 0x000388, "Member 'UWBP_CoreAimingCrosshair_C::RightLineDecor_1' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, RightLineDecor_2) == 0x000390, "Member 'UWBP_CoreAimingCrosshair_C::RightLineDecor_2' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, WBP_K32BinaryTextAnim) == 0x000398, "Member 'UWBP_CoreAimingCrosshair_C::WBP_K32BinaryTextAnim' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, LockOnScreenCoveragePercentageY) == 0x0003A0, "Member 'UWBP_CoreAimingCrosshair_C::LockOnScreenCoveragePercentageY' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, ReticleMaterial) == 0x0003C8, "Member 'UWBP_CoreAimingCrosshair_C::ReticleMaterial' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, DefaultReticleColor) == 0x0003D0, "Member 'UWBP_CoreAimingCrosshair_C::DefaultReticleColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, DefaultDecorColor) == 0x0003E0, "Member 'UWBP_CoreAimingCrosshair_C::DefaultDecorColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, CooldownDuration) == 0x0003F0, "Member 'UWBP_CoreAimingCrosshair_C::CooldownDuration' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, CooldownReticleColor) == 0x000418, "Member 'UWBP_CoreAimingCrosshair_C::CooldownReticleColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, CooldownDecorColor) == 0x000428, "Member 'UWBP_CoreAimingCrosshair_C::CooldownDecorColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, TeleportingReticleColor) == 0x000438, "Member 'UWBP_CoreAimingCrosshair_C::TeleportingReticleColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, TeleportingDecorColor) == 0x000448, "Member 'UWBP_CoreAimingCrosshair_C::TeleportingDecorColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, DisabledReticleColor) == 0x000458, "Member 'UWBP_CoreAimingCrosshair_C::DisabledReticleColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, DisabledDecorColor) == 0x000468, "Member 'UWBP_CoreAimingCrosshair_C::DisabledDecorColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, ReticleScreenRatioY) == 0x000478, "Member 'UWBP_CoreAimingCrosshair_C::ReticleScreenRatioY' has a wrong offset!");
static_assert(offsetof(UWBP_CoreAimingCrosshair_C, PodDisableDuration) == 0x000480, "Member 'UWBP_CoreAimingCrosshair_C::PodDisableDuration' has a wrong offset!");

}

