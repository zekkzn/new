#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheGunslinger

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "TheGunslinger_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GameplayUtilities_structs.hpp"


namespace SDK::Params
{

// Function TheGunslinger.ChainPlayerMovementStatusEffect.OnIsChainCollidingChanged
// 0x0001 (0x0001 - 0x0000)
struct ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged final
{
public:
	bool                                          IsColliding;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged) == 0x000001, "Wrong alignment on ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged");
static_assert(sizeof(ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged) == 0x000001, "Wrong size on ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged");
static_assert(offsetof(ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged, IsColliding) == 0x000000, "Member 'ChainPlayerMovementStatusEffect_OnIsChainCollidingChanged::IsColliding' has a wrong offset!");

// Function TheGunslinger.ChainLinkableComponent.OnKillerSet
// 0x0008 (0x0008 - 0x0000)
struct ChainLinkableComponent_OnKillerSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChainLinkableComponent_OnKillerSet) == 0x000008, "Wrong alignment on ChainLinkableComponent_OnKillerSet");
static_assert(sizeof(ChainLinkableComponent_OnKillerSet) == 0x000008, "Wrong size on ChainLinkableComponent_OnKillerSet");
static_assert(offsetof(ChainLinkableComponent_OnKillerSet, Killer) == 0x000000, "Member 'ChainLinkableComponent_OnKillerSet::Killer' has a wrong offset!");

// Function TheGunslinger.DeadMansSwitch.OnRep_BlockedGenerator
// 0x0008 (0x0008 - 0x0000)
struct DeadMansSwitch_OnRep_BlockedGenerator final
{
public:
	class AGenerator*                             PreviouslyBlockedGenerator;                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeadMansSwitch_OnRep_BlockedGenerator) == 0x000008, "Wrong alignment on DeadMansSwitch_OnRep_BlockedGenerator");
static_assert(sizeof(DeadMansSwitch_OnRep_BlockedGenerator) == 0x000008, "Wrong size on DeadMansSwitch_OnRep_BlockedGenerator");
static_assert(offsetof(DeadMansSwitch_OnRep_BlockedGenerator, PreviouslyBlockedGenerator) == 0x000000, "Member 'DeadMansSwitch_OnRep_BlockedGenerator::PreviouslyBlockedGenerator' has a wrong offset!");

// Function TheGunslinger.DeadMansSwitch.GetActivationDurationAtLevel
// 0x0004 (0x0004 - 0x0000)
struct DeadMansSwitch_GetActivationDurationAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DeadMansSwitch_GetActivationDurationAtLevel) == 0x000004, "Wrong alignment on DeadMansSwitch_GetActivationDurationAtLevel");
static_assert(sizeof(DeadMansSwitch_GetActivationDurationAtLevel) == 0x000004, "Wrong size on DeadMansSwitch_GetActivationDurationAtLevel");
static_assert(offsetof(DeadMansSwitch_GetActivationDurationAtLevel, ReturnValue) == 0x000000, "Member 'DeadMansSwitch_GetActivationDurationAtLevel::ReturnValue' has a wrong offset!");

// Function TheGunslinger.FireHarpoonRifleInteraction.Server_HandleMissShotScores
// 0x0010 (0x0010 - 0x0000)
struct FireHarpoonRifleInteraction_Server_HandleMissShotScores final
{
public:
	TArray<class ADBDPlayer*>                     NearMissedPlayers;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireHarpoonRifleInteraction_Server_HandleMissShotScores) == 0x000008, "Wrong alignment on FireHarpoonRifleInteraction_Server_HandleMissShotScores");
static_assert(sizeof(FireHarpoonRifleInteraction_Server_HandleMissShotScores) == 0x000010, "Wrong size on FireHarpoonRifleInteraction_Server_HandleMissShotScores");
static_assert(offsetof(FireHarpoonRifleInteraction_Server_HandleMissShotScores, NearMissedPlayers) == 0x000000, "Member 'FireHarpoonRifleInteraction_Server_HandleMissShotScores::NearMissedPlayers' has a wrong offset!");

// Function TheGunslinger.FireHarpoonRifleInteraction.Server_SetAimingSubstate
// 0x0001 (0x0001 - 0x0000)
struct FireHarpoonRifleInteraction_Server_SetAimingSubstate final
{
public:
	EFireHarpoonRifleAimingInteractionSubState    NewState;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FireHarpoonRifleInteraction_Server_SetAimingSubstate) == 0x000001, "Wrong alignment on FireHarpoonRifleInteraction_Server_SetAimingSubstate");
static_assert(sizeof(FireHarpoonRifleInteraction_Server_SetAimingSubstate) == 0x000001, "Wrong size on FireHarpoonRifleInteraction_Server_SetAimingSubstate");
static_assert(offsetof(FireHarpoonRifleInteraction_Server_SetAimingSubstate, NewState) == 0x000000, "Member 'FireHarpoonRifleInteraction_Server_SetAimingSubstate::NewState' has a wrong offset!");

// Function TheGunslinger.Gearhead.Authority_OnCamperHealthStateChange
// 0x0002 (0x0002 - 0x0000)
struct Gearhead_Authority_OnCamperHealthStateChange final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            NewDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Gearhead_Authority_OnCamperHealthStateChange) == 0x000001, "Wrong alignment on Gearhead_Authority_OnCamperHealthStateChange");
static_assert(sizeof(Gearhead_Authority_OnCamperHealthStateChange) == 0x000002, "Wrong size on Gearhead_Authority_OnCamperHealthStateChange");
static_assert(offsetof(Gearhead_Authority_OnCamperHealthStateChange, OldDamageState) == 0x000000, "Member 'Gearhead_Authority_OnCamperHealthStateChange::OldDamageState' has a wrong offset!");
static_assert(offsetof(Gearhead_Authority_OnCamperHealthStateChange, NewDamageState) == 0x000001, "Member 'Gearhead_Authority_OnCamperHealthStateChange::NewDamageState' has a wrong offset!");

// Function TheGunslinger.Gearhead.Authority_OnCamperRemoved
// 0x0008 (0x0008 - 0x0000)
struct Gearhead_Authority_OnCamperRemoved final
{
public:
	class ACamperPlayer*                          RemovedPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Gearhead_Authority_OnCamperRemoved) == 0x000008, "Wrong alignment on Gearhead_Authority_OnCamperRemoved");
static_assert(sizeof(Gearhead_Authority_OnCamperRemoved) == 0x000008, "Wrong size on Gearhead_Authority_OnCamperRemoved");
static_assert(offsetof(Gearhead_Authority_OnCamperRemoved, RemovedPlayer) == 0x000000, "Member 'Gearhead_Authority_OnCamperRemoved::RemovedPlayer' has a wrong offset!");

// DelegateFunction TheGunslinger.GunslingerEffectsComponent.OnIsAimingChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct GunslingerEffectsComponent_OnIsAimingChanged__DelegateSignature final
{
public:
	bool                                          IsAiming;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunslingerEffectsComponent_OnIsAimingChanged__DelegateSignature) == 0x000001, "Wrong alignment on GunslingerEffectsComponent_OnIsAimingChanged__DelegateSignature");
static_assert(sizeof(GunslingerEffectsComponent_OnIsAimingChanged__DelegateSignature) == 0x000001, "Wrong size on GunslingerEffectsComponent_OnIsAimingChanged__DelegateSignature");
static_assert(offsetof(GunslingerEffectsComponent_OnIsAimingChanged__DelegateSignature, IsAiming) == 0x000000, "Member 'GunslingerEffectsComponent_OnIsAimingChanged__DelegateSignature::IsAiming' has a wrong offset!");

// Function TheGunslinger.GunslingerEffectsComponent.OnItemUsedStateChanged
// 0x0001 (0x0001 - 0x0000)
struct GunslingerEffectsComponent_OnItemUsedStateChanged final
{
public:
	bool                                          IsPressed;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunslingerEffectsComponent_OnItemUsedStateChanged) == 0x000001, "Wrong alignment on GunslingerEffectsComponent_OnItemUsedStateChanged");
static_assert(sizeof(GunslingerEffectsComponent_OnItemUsedStateChanged) == 0x000001, "Wrong size on GunslingerEffectsComponent_OnItemUsedStateChanged");
static_assert(offsetof(GunslingerEffectsComponent_OnItemUsedStateChanged, IsPressed) == 0x000000, "Member 'GunslingerEffectsComponent_OnItemUsedStateChanged::IsPressed' has a wrong offset!");

// Function TheGunslinger.GunslingerUtilities.GetHarpoonRifle
// 0x0010 (0x0010 - 0x0000)
struct GunslingerUtilities_GetHarpoonRifle final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHarpoonRifle*                          ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GunslingerUtilities_GetHarpoonRifle) == 0x000008, "Wrong alignment on GunslingerUtilities_GetHarpoonRifle");
static_assert(sizeof(GunslingerUtilities_GetHarpoonRifle) == 0x000010, "Wrong size on GunslingerUtilities_GetHarpoonRifle");
static_assert(offsetof(GunslingerUtilities_GetHarpoonRifle, Player) == 0x000000, "Member 'GunslingerUtilities_GetHarpoonRifle::Player' has a wrong offset!");
static_assert(offsetof(GunslingerUtilities_GetHarpoonRifle, ReturnValue) == 0x000008, "Member 'GunslingerUtilities_GetHarpoonRifle::ReturnValue' has a wrong offset!");

// Function TheGunslinger.HarpoonChainPositioner.OnCurrentHarpoonChanged
// 0x0008 (0x0008 - 0x0000)
struct HarpoonChainPositioner_OnCurrentHarpoonChanged final
{
public:
	class AActor*                                 CurrentHarpoon;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonChainPositioner_OnCurrentHarpoonChanged) == 0x000008, "Wrong alignment on HarpoonChainPositioner_OnCurrentHarpoonChanged");
static_assert(sizeof(HarpoonChainPositioner_OnCurrentHarpoonChanged) == 0x000008, "Wrong size on HarpoonChainPositioner_OnCurrentHarpoonChanged");
static_assert(offsetof(HarpoonChainPositioner_OnCurrentHarpoonChanged, CurrentHarpoon) == 0x000000, "Member 'HarpoonChainPositioner_OnCurrentHarpoonChanged::CurrentHarpoon' has a wrong offset!");

// Function TheGunslinger.HarpoonChainPositioner.OnHarpoonTravelingChanged
// 0x0001 (0x0001 - 0x0000)
struct HarpoonChainPositioner_OnHarpoonTravelingChanged final
{
public:
	bool                                          IsTravelling;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonChainPositioner_OnHarpoonTravelingChanged) == 0x000001, "Wrong alignment on HarpoonChainPositioner_OnHarpoonTravelingChanged");
static_assert(sizeof(HarpoonChainPositioner_OnHarpoonTravelingChanged) == 0x000001, "Wrong size on HarpoonChainPositioner_OnHarpoonTravelingChanged");
static_assert(offsetof(HarpoonChainPositioner_OnHarpoonTravelingChanged, IsTravelling) == 0x000000, "Member 'HarpoonChainPositioner_OnHarpoonTravelingChanged::IsTravelling' has a wrong offset!");

// Function TheGunslinger.HarpoonChainPositioner.OnOwnerCollected
// 0x0008 (0x0008 - 0x0000)
struct HarpoonChainPositioner_OnOwnerCollected final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonChainPositioner_OnOwnerCollected) == 0x000008, "Wrong alignment on HarpoonChainPositioner_OnOwnerCollected");
static_assert(sizeof(HarpoonChainPositioner_OnOwnerCollected) == 0x000008, "Wrong size on HarpoonChainPositioner_OnOwnerCollected");
static_assert(offsetof(HarpoonChainPositioner_OnOwnerCollected, Collector) == 0x000000, "Member 'HarpoonChainPositioner_OnOwnerCollected::Collector' has a wrong offset!");

// Function TheGunslinger.HarpoonProjectile.OnHarpoonStop
// 0x00F0 (0x00F0 - 0x0000)
struct HarpoonProjectile_OnHarpoonStop final
{
public:
	struct FHitResult                             Result;                                            // 0x0000(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonProjectile_OnHarpoonStop) == 0x000008, "Wrong alignment on HarpoonProjectile_OnHarpoonStop");
static_assert(sizeof(HarpoonProjectile_OnHarpoonStop) == 0x0000F0, "Wrong size on HarpoonProjectile_OnHarpoonStop");
static_assert(offsetof(HarpoonProjectile_OnHarpoonStop, Result) == 0x000000, "Member 'HarpoonProjectile_OnHarpoonStop::Result' has a wrong offset!");

// Function TheGunslinger.HarpoonRifle.GetChain
// 0x0008 (0x0008 - 0x0000)
struct HarpoonRifle_GetChain final
{
public:
	class ARifleChain*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HarpoonRifle_GetChain) == 0x000008, "Wrong alignment on HarpoonRifle_GetChain");
static_assert(sizeof(HarpoonRifle_GetChain) == 0x000008, "Wrong size on HarpoonRifle_GetChain");
static_assert(offsetof(HarpoonRifle_GetChain, ReturnValue) == 0x000000, "Member 'HarpoonRifle_GetChain::ReturnValue' has a wrong offset!");

// Function TheGunslinger.K19Utilities.K19CreateDecalSpawner
// 0x0028 (0x0028 - 0x0000)
struct K19Utilities_K19CreateDecalSpawner final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DecalSpawnerName;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0018(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PoolSize;                                          // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnerStrategyType                          SpawnerStrategyType;                               // 0x0024(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K19Utilities_K19CreateDecalSpawner) == 0x000008, "Wrong alignment on K19Utilities_K19CreateDecalSpawner");
static_assert(sizeof(K19Utilities_K19CreateDecalSpawner) == 0x000028, "Wrong size on K19Utilities_K19CreateDecalSpawner");
static_assert(offsetof(K19Utilities_K19CreateDecalSpawner, WorldContextObject) == 0x000000, "Member 'K19Utilities_K19CreateDecalSpawner::WorldContextObject' has a wrong offset!");
static_assert(offsetof(K19Utilities_K19CreateDecalSpawner, DecalSpawnerName) == 0x000008, "Member 'K19Utilities_K19CreateDecalSpawner::DecalSpawnerName' has a wrong offset!");
static_assert(offsetof(K19Utilities_K19CreateDecalSpawner, DecalMaterial) == 0x000018, "Member 'K19Utilities_K19CreateDecalSpawner::DecalMaterial' has a wrong offset!");
static_assert(offsetof(K19Utilities_K19CreateDecalSpawner, PoolSize) == 0x000020, "Member 'K19Utilities_K19CreateDecalSpawner::PoolSize' has a wrong offset!");
static_assert(offsetof(K19Utilities_K19CreateDecalSpawner, SpawnerStrategyType) == 0x000024, "Member 'K19Utilities_K19CreateDecalSpawner::SpawnerStrategyType' has a wrong offset!");

// Function TheGunslinger.K19Utilities.K19ReleaseDecalSpawner
// 0x0018 (0x0018 - 0x0000)
struct K19Utilities_K19ReleaseDecalSpawner final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DecalSpawnerName;                                  // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(K19Utilities_K19ReleaseDecalSpawner) == 0x000008, "Wrong alignment on K19Utilities_K19ReleaseDecalSpawner");
static_assert(sizeof(K19Utilities_K19ReleaseDecalSpawner) == 0x000018, "Wrong size on K19Utilities_K19ReleaseDecalSpawner");
static_assert(offsetof(K19Utilities_K19ReleaseDecalSpawner, WorldContextObject) == 0x000000, "Member 'K19Utilities_K19ReleaseDecalSpawner::WorldContextObject' has a wrong offset!");
static_assert(offsetof(K19Utilities_K19ReleaseDecalSpawner, DecalSpawnerName) == 0x000008, "Member 'K19Utilities_K19ReleaseDecalSpawner::DecalSpawnerName' has a wrong offset!");

// Function TheGunslinger.RifleChain.BindToLinkedPlayer
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_BindToLinkedPlayer final
{
public:
	class ADBDPlayer*                             LinkedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_BindToLinkedPlayer) == 0x000008, "Wrong alignment on RifleChain_BindToLinkedPlayer");
static_assert(sizeof(RifleChain_BindToLinkedPlayer) == 0x000008, "Wrong size on RifleChain_BindToLinkedPlayer");
static_assert(offsetof(RifleChain_BindToLinkedPlayer, LinkedPlayer) == 0x000000, "Member 'RifleChain_BindToLinkedPlayer::LinkedPlayer' has a wrong offset!");

// Function TheGunslinger.RifleChain.OnAttachToPlayer
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_OnAttachToPlayer final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_OnAttachToPlayer) == 0x000008, "Wrong alignment on RifleChain_OnAttachToPlayer");
static_assert(sizeof(RifleChain_OnAttachToPlayer) == 0x000008, "Wrong size on RifleChain_OnAttachToPlayer");
static_assert(offsetof(RifleChain_OnAttachToPlayer, Player) == 0x000000, "Member 'RifleChain_OnAttachToPlayer::Player' has a wrong offset!");

// DelegateFunction TheGunslinger.RifleChain.OnIsCollidingChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RifleChain_OnIsCollidingChanged__DelegateSignature final
{
public:
	bool                                          IsColliding;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_OnIsCollidingChanged__DelegateSignature) == 0x000001, "Wrong alignment on RifleChain_OnIsCollidingChanged__DelegateSignature");
static_assert(sizeof(RifleChain_OnIsCollidingChanged__DelegateSignature) == 0x000001, "Wrong size on RifleChain_OnIsCollidingChanged__DelegateSignature");
static_assert(offsetof(RifleChain_OnIsCollidingChanged__DelegateSignature, IsColliding) == 0x000000, "Member 'RifleChain_OnIsCollidingChanged__DelegateSignature::IsColliding' has a wrong offset!");

// Function TheGunslinger.RifleChain.OnLinkedPlayerPerspectiveChanged
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_OnLinkedPlayerPerspectiveChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_OnLinkedPlayerPerspectiveChanged) == 0x000008, "Wrong alignment on RifleChain_OnLinkedPlayerPerspectiveChanged");
static_assert(sizeof(RifleChain_OnLinkedPlayerPerspectiveChanged) == 0x000008, "Wrong size on RifleChain_OnLinkedPlayerPerspectiveChanged");
static_assert(offsetof(RifleChain_OnLinkedPlayerPerspectiveChanged, Player) == 0x000000, "Member 'RifleChain_OnLinkedPlayerPerspectiveChanged::Player' has a wrong offset!");

// DelegateFunction TheGunslinger.RifleChain.OnProjectileSet__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_OnProjectileSet__DelegateSignature final
{
public:
	class AActor*                                 Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_OnProjectileSet__DelegateSignature) == 0x000008, "Wrong alignment on RifleChain_OnProjectileSet__DelegateSignature");
static_assert(sizeof(RifleChain_OnProjectileSet__DelegateSignature) == 0x000008, "Wrong size on RifleChain_OnProjectileSet__DelegateSignature");
static_assert(offsetof(RifleChain_OnProjectileSet__DelegateSignature, Projectile) == 0x000000, "Member 'RifleChain_OnProjectileSet__DelegateSignature::Projectile' has a wrong offset!");

// Function TheGunslinger.RifleChain.OnUnattachFromPlayer
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_OnUnattachFromPlayer final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_OnUnattachFromPlayer) == 0x000008, "Wrong alignment on RifleChain_OnUnattachFromPlayer");
static_assert(sizeof(RifleChain_OnUnattachFromPlayer) == 0x000008, "Wrong size on RifleChain_OnUnattachFromPlayer");
static_assert(offsetof(RifleChain_OnUnattachFromPlayer, Player) == 0x000000, "Member 'RifleChain_OnUnattachFromPlayer::Player' has a wrong offset!");

// Function TheGunslinger.RifleChain.SpawnChainPoints
// 0x0058 (0x0058 - 0x0000)
struct RifleChain_SpawnChainPoints final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Stop;                                              // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            InfluenceCurve;                                    // 0x0030(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointYPosition;                                    // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PointZPosition;                                    // 0x003C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseOffset;                                         // 0x0040(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       Spline;                                            // 0x0048(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0050(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RifleChain_SpawnChainPoints) == 0x000008, "Wrong alignment on RifleChain_SpawnChainPoints");
static_assert(sizeof(RifleChain_SpawnChainPoints) == 0x000058, "Wrong size on RifleChain_SpawnChainPoints");
static_assert(offsetof(RifleChain_SpawnChainPoints, Start) == 0x000000, "Member 'RifleChain_SpawnChainPoints::Start' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, Stop) == 0x000018, "Member 'RifleChain_SpawnChainPoints::Stop' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, InfluenceCurve) == 0x000030, "Member 'RifleChain_SpawnChainPoints::InfluenceCurve' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, PointYPosition) == 0x000038, "Member 'RifleChain_SpawnChainPoints::PointYPosition' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, PointZPosition) == 0x00003C, "Member 'RifleChain_SpawnChainPoints::PointZPosition' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, UseOffset) == 0x000040, "Member 'RifleChain_SpawnChainPoints::UseOffset' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, Spline) == 0x000048, "Member 'RifleChain_SpawnChainPoints::Spline' has a wrong offset!");
static_assert(offsetof(RifleChain_SpawnChainPoints, ReturnValue) == 0x000050, "Member 'RifleChain_SpawnChainPoints::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.UpdateChainMesh
// 0x0018 (0x0018 - 0x0000)
struct RifleChain_UpdateChainMesh final
{
public:
	class UInstancedStaticMeshComponent*          Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       Spline;                                            // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Alpha;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(RifleChain_UpdateChainMesh) == 0x000008, "Wrong alignment on RifleChain_UpdateChainMesh");
static_assert(sizeof(RifleChain_UpdateChainMesh) == 0x000018, "Wrong size on RifleChain_UpdateChainMesh");
static_assert(offsetof(RifleChain_UpdateChainMesh, Mesh) == 0x000000, "Member 'RifleChain_UpdateChainMesh::Mesh' has a wrong offset!");
static_assert(offsetof(RifleChain_UpdateChainMesh, Spline) == 0x000008, "Member 'RifleChain_UpdateChainMesh::Spline' has a wrong offset!");
static_assert(offsetof(RifleChain_UpdateChainMesh, Alpha) == 0x000010, "Member 'RifleChain_UpdateChainMesh::Alpha' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetChainEnd
// 0x0018 (0x0018 - 0x0000)
struct RifleChain_GetChainEnd final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetChainEnd) == 0x000008, "Wrong alignment on RifleChain_GetChainEnd");
static_assert(sizeof(RifleChain_GetChainEnd) == 0x000018, "Wrong size on RifleChain_GetChainEnd");
static_assert(offsetof(RifleChain_GetChainEnd, ReturnValue) == 0x000000, "Member 'RifleChain_GetChainEnd::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetChainStart
// 0x0018 (0x0018 - 0x0000)
struct RifleChain_GetChainStart final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetChainStart) == 0x000008, "Wrong alignment on RifleChain_GetChainStart");
static_assert(sizeof(RifleChain_GetChainStart) == 0x000018, "Wrong size on RifleChain_GetChainStart");
static_assert(offsetof(RifleChain_GetChainStart, ReturnValue) == 0x000000, "Member 'RifleChain_GetChainStart::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetChainTensionComponent
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_GetChainTensionComponent final
{
public:
	class URifleChainTensionComponent*            ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetChainTensionComponent) == 0x000008, "Wrong alignment on RifleChain_GetChainTensionComponent");
static_assert(sizeof(RifleChain_GetChainTensionComponent) == 0x000008, "Wrong size on RifleChain_GetChainTensionComponent");
static_assert(offsetof(RifleChain_GetChainTensionComponent, ReturnValue) == 0x000000, "Member 'RifleChain_GetChainTensionComponent::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetFirstAndLastCollisionHits
// 0x0010 (0x0010 - 0x0000)
struct RifleChain_GetFirstAndLastCollisionHits final
{
public:
	TArray<struct FHitResult>                     ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetFirstAndLastCollisionHits) == 0x000008, "Wrong alignment on RifleChain_GetFirstAndLastCollisionHits");
static_assert(sizeof(RifleChain_GetFirstAndLastCollisionHits) == 0x000010, "Wrong size on RifleChain_GetFirstAndLastCollisionHits");
static_assert(offsetof(RifleChain_GetFirstAndLastCollisionHits, ReturnValue) == 0x000000, "Member 'RifleChain_GetFirstAndLastCollisionHits::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetOwningKiller
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_GetOwningKiller final
{
public:
	class ASlasherPlayer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetOwningKiller) == 0x000008, "Wrong alignment on RifleChain_GetOwningKiller");
static_assert(sizeof(RifleChain_GetOwningKiller) == 0x000008, "Wrong size on RifleChain_GetOwningKiller");
static_assert(offsetof(RifleChain_GetOwningKiller, ReturnValue) == 0x000000, "Member 'RifleChain_GetOwningKiller::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetRiflePlayerLinker
// 0x0008 (0x0008 - 0x0000)
struct RifleChain_GetRiflePlayerLinker final
{
public:
	class URiflePlayerLinker*                     ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetRiflePlayerLinker) == 0x000008, "Wrong alignment on RifleChain_GetRiflePlayerLinker");
static_assert(sizeof(RifleChain_GetRiflePlayerLinker) == 0x000008, "Wrong size on RifleChain_GetRiflePlayerLinker");
static_assert(offsetof(RifleChain_GetRiflePlayerLinker, ReturnValue) == 0x000000, "Member 'RifleChain_GetRiflePlayerLinker::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.GetUnwindingSpeed
// 0x0004 (0x0004 - 0x0000)
struct RifleChain_GetUnwindingSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_GetUnwindingSpeed) == 0x000004, "Wrong alignment on RifleChain_GetUnwindingSpeed");
static_assert(sizeof(RifleChain_GetUnwindingSpeed) == 0x000004, "Wrong size on RifleChain_GetUnwindingSpeed");
static_assert(offsetof(RifleChain_GetUnwindingSpeed, ReturnValue) == 0x000000, "Member 'RifleChain_GetUnwindingSpeed::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChain.IsColliding
// 0x0001 (0x0001 - 0x0000)
struct RifleChain_IsColliding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChain_IsColliding) == 0x000001, "Wrong alignment on RifleChain_IsColliding");
static_assert(sizeof(RifleChain_IsColliding) == 0x000001, "Wrong size on RifleChain_IsColliding");
static_assert(offsetof(RifleChain_IsColliding, ReturnValue) == 0x000000, "Member 'RifleChain_IsColliding::ReturnValue' has a wrong offset!");

// DelegateFunction TheGunslinger.RifleChainTensionComponent.OnIsBuildingTensionChanged__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct RifleChainTensionComponent_OnIsBuildingTensionChanged__DelegateSignature final
{
public:
	bool                                          IsBuildingTension;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChainTensionComponent_OnIsBuildingTensionChanged__DelegateSignature) == 0x000001, "Wrong alignment on RifleChainTensionComponent_OnIsBuildingTensionChanged__DelegateSignature");
static_assert(sizeof(RifleChainTensionComponent_OnIsBuildingTensionChanged__DelegateSignature) == 0x000001, "Wrong size on RifleChainTensionComponent_OnIsBuildingTensionChanged__DelegateSignature");
static_assert(offsetof(RifleChainTensionComponent_OnIsBuildingTensionChanged__DelegateSignature, IsBuildingTension) == 0x000000, "Member 'RifleChainTensionComponent_OnIsBuildingTensionChanged__DelegateSignature::IsBuildingTension' has a wrong offset!");

// Function TheGunslinger.RifleChainTensionComponent.OnTensionChargeableCompletionChanged
// 0x0018 (0x0018 - 0x0000)
struct RifleChainTensionComponent_OnTensionChargeableCompletionChanged final
{
public:
	bool                                          COMPLETED;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InstigatorsForCompletion;                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChainTensionComponent_OnTensionChargeableCompletionChanged) == 0x000008, "Wrong alignment on RifleChainTensionComponent_OnTensionChargeableCompletionChanged");
static_assert(sizeof(RifleChainTensionComponent_OnTensionChargeableCompletionChanged) == 0x000018, "Wrong size on RifleChainTensionComponent_OnTensionChargeableCompletionChanged");
static_assert(offsetof(RifleChainTensionComponent_OnTensionChargeableCompletionChanged, COMPLETED) == 0x000000, "Member 'RifleChainTensionComponent_OnTensionChargeableCompletionChanged::COMPLETED' has a wrong offset!");
static_assert(offsetof(RifleChainTensionComponent_OnTensionChargeableCompletionChanged, InstigatorsForCompletion) == 0x000008, "Member 'RifleChainTensionComponent_OnTensionChargeableCompletionChanged::InstigatorsForCompletion' has a wrong offset!");

// Function TheGunslinger.RifleChainTensionComponent.GetProgress
// 0x0004 (0x0004 - 0x0000)
struct RifleChainTensionComponent_GetProgress final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChainTensionComponent_GetProgress) == 0x000004, "Wrong alignment on RifleChainTensionComponent_GetProgress");
static_assert(sizeof(RifleChainTensionComponent_GetProgress) == 0x000004, "Wrong size on RifleChainTensionComponent_GetProgress");
static_assert(offsetof(RifleChainTensionComponent_GetProgress, ReturnValue) == 0x000000, "Member 'RifleChainTensionComponent_GetProgress::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RifleChainTensionComponent.IsBuildingTension
// 0x0001 (0x0001 - 0x0000)
struct RifleChainTensionComponent_IsBuildingTension final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RifleChainTensionComponent_IsBuildingTension) == 0x000001, "Wrong alignment on RifleChainTensionComponent_IsBuildingTension");
static_assert(sizeof(RifleChainTensionComponent_IsBuildingTension) == 0x000001, "Wrong size on RifleChainTensionComponent_IsBuildingTension");
static_assert(offsetof(RifleChainTensionComponent_IsBuildingTension, ReturnValue) == 0x000000, "Member 'RifleChainTensionComponent_IsBuildingTension::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.Client_OnAuthorityTensionBreakChain
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_Client_OnAuthorityTensionBreakChain final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_Client_OnAuthorityTensionBreakChain) == 0x000008, "Wrong alignment on RiflePlayerLinker_Client_OnAuthorityTensionBreakChain");
static_assert(sizeof(RiflePlayerLinker_Client_OnAuthorityTensionBreakChain) == 0x000008, "Wrong size on RiflePlayerLinker_Client_OnAuthorityTensionBreakChain");
static_assert(offsetof(RiflePlayerLinker_Client_OnAuthorityTensionBreakChain, Player) == 0x000000, "Member 'RiflePlayerLinker_Client_OnAuthorityTensionBreakChain::Player' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.Multicast_Link
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_Multicast_Link final
{
public:
	class ADBDPlayer*                             LinkedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_Multicast_Link) == 0x000008, "Wrong alignment on RiflePlayerLinker_Multicast_Link");
static_assert(sizeof(RiflePlayerLinker_Multicast_Link) == 0x000008, "Wrong size on RiflePlayerLinker_Multicast_Link");
static_assert(offsetof(RiflePlayerLinker_Multicast_Link, LinkedPlayer) == 0x000000, "Member 'RiflePlayerLinker_Multicast_Link::LinkedPlayer' has a wrong offset!");

// DelegateFunction TheGunslinger.RiflePlayerLinker.OnLinkedPlayerSet__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_OnLinkedPlayerSet__DelegateSignature final
{
public:
	class ADBDPlayer*                             LinkedPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_OnLinkedPlayerSet__DelegateSignature) == 0x000008, "Wrong alignment on RiflePlayerLinker_OnLinkedPlayerSet__DelegateSignature");
static_assert(sizeof(RiflePlayerLinker_OnLinkedPlayerSet__DelegateSignature) == 0x000008, "Wrong size on RiflePlayerLinker_OnLinkedPlayerSet__DelegateSignature");
static_assert(offsetof(RiflePlayerLinker_OnLinkedPlayerSet__DelegateSignature, LinkedPlayer) == 0x000000, "Member 'RiflePlayerLinker_OnLinkedPlayerSet__DelegateSignature::LinkedPlayer' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.Server_OnClientConfirmTensionBreakChain
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain) == 0x000008, "Wrong alignment on RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain");
static_assert(sizeof(RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain) == 0x000008, "Wrong size on RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain");
static_assert(offsetof(RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain, Player) == 0x000000, "Member 'RiflePlayerLinker_Server_OnClientConfirmTensionBreakChain::Player' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.GetLinkedPlayer
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_GetLinkedPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_GetLinkedPlayer) == 0x000008, "Wrong alignment on RiflePlayerLinker_GetLinkedPlayer");
static_assert(sizeof(RiflePlayerLinker_GetLinkedPlayer) == 0x000008, "Wrong size on RiflePlayerLinker_GetLinkedPlayer");
static_assert(offsetof(RiflePlayerLinker_GetLinkedPlayer, ReturnValue) == 0x000000, "Member 'RiflePlayerLinker_GetLinkedPlayer::ReturnValue' has a wrong offset!");

// Function TheGunslinger.RiflePlayerLinker.GetLinkOwner
// 0x0008 (0x0008 - 0x0000)
struct RiflePlayerLinker_GetLinkOwner final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RiflePlayerLinker_GetLinkOwner) == 0x000008, "Wrong alignment on RiflePlayerLinker_GetLinkOwner");
static_assert(sizeof(RiflePlayerLinker_GetLinkOwner) == 0x000008, "Wrong size on RiflePlayerLinker_GetLinkOwner");
static_assert(offsetof(RiflePlayerLinker_GetLinkOwner, ReturnValue) == 0x000000, "Member 'RiflePlayerLinker_GetLinkOwner::ReturnValue' has a wrong offset!");

// Function TheGunslinger.SurvivorChainLinkableComponent.OnLocallyObservedChanged
// 0x0008 (0x0008 - 0x0000)
struct SurvivorChainLinkableComponent_OnLocallyObservedChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorChainLinkableComponent_OnLocallyObservedChanged) == 0x000008, "Wrong alignment on SurvivorChainLinkableComponent_OnLocallyObservedChanged");
static_assert(sizeof(SurvivorChainLinkableComponent_OnLocallyObservedChanged) == 0x000008, "Wrong size on SurvivorChainLinkableComponent_OnLocallyObservedChanged");
static_assert(offsetof(SurvivorChainLinkableComponent_OnLocallyObservedChanged, Player) == 0x000000, "Member 'SurvivorChainLinkableComponent_OnLocallyObservedChanged::Player' has a wrong offset!");

// Function TheGunslinger.SurvivorChainLinkableComponent.OnSightStatusChanged
// 0x0001 (0x0001 - 0x0000)
struct SurvivorChainLinkableComponent_OnSightStatusChanged final
{
public:
	ESightStatus                                  Status;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorChainLinkableComponent_OnSightStatusChanged) == 0x000001, "Wrong alignment on SurvivorChainLinkableComponent_OnSightStatusChanged");
static_assert(sizeof(SurvivorChainLinkableComponent_OnSightStatusChanged) == 0x000001, "Wrong size on SurvivorChainLinkableComponent_OnSightStatusChanged");
static_assert(offsetof(SurvivorChainLinkableComponent_OnSightStatusChanged, Status) == 0x000000, "Member 'SurvivorChainLinkableComponent_OnSightStatusChanged::Status' has a wrong offset!");

// Function TheGunslinger.SurvivorChainLinkableComponent.OnSurvivorBreakFreeFromHarpoon
// 0x0040 (0x0040 - 0x0000)
struct SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon) == 0x000008, "Wrong alignment on SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon");
static_assert(sizeof(SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon) == 0x000040, "Wrong size on SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon");
static_assert(offsetof(SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon, GameEventType) == 0x000000, "Member 'SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon::GameEventType' has a wrong offset!");
static_assert(offsetof(SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon, GameEventData) == 0x000010, "Member 'SurvivorChainLinkableComponent_OnSurvivorBreakFreeFromHarpoon::GameEventData' has a wrong offset!");

}

