#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InputUtilities

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class InputUtilities.AxisFlick
// 0x0030 (0x0060 - 0x0030)
class UAxisFlick final : public UObject
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AxisFlick">();
	}
	static class UAxisFlick* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAxisFlick>();
	}
};
static_assert(alignof(UAxisFlick) == 0x000008, "Wrong alignment on UAxisFlick");
static_assert(sizeof(UAxisFlick) == 0x000060, "Wrong size on UAxisFlick");

// Class InputUtilities.AxisFlickMasher
// 0x0040 (0x00E8 - 0x00A8)
class UAxisFlickMasher final : public UActorComponent
{
public:
	class UInputComponent*                        _inputComponent;                                   // 0x00A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x8];                                       // 0x00B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAxisFlick*                             _axisFlick1;                                       // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAxisFlick*                             _axisFlick2;                                       // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C8[0x20];                                      // 0x00C8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAxisFlicked1();
	void OnAxisFlicked2();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AxisFlickMasher">();
	}
	static class UAxisFlickMasher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAxisFlickMasher>();
	}
};
static_assert(alignof(UAxisFlickMasher) == 0x000008, "Wrong alignment on UAxisFlickMasher");
static_assert(sizeof(UAxisFlickMasher) == 0x0000E8, "Wrong size on UAxisFlickMasher");
static_assert(offsetof(UAxisFlickMasher, _inputComponent) == 0x0000A8, "Member 'UAxisFlickMasher::_inputComponent' has a wrong offset!");
static_assert(offsetof(UAxisFlickMasher, _axisFlick1) == 0x0000B8, "Member 'UAxisFlickMasher::_axisFlick1' has a wrong offset!");
static_assert(offsetof(UAxisFlickMasher, _axisFlick2) == 0x0000C0, "Member 'UAxisFlickMasher::_axisFlick2' has a wrong offset!");

// Class InputUtilities.ButtonPressTracker
// 0x0058 (0x0090 - 0x0038)
class UButtonPressTracker final : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UInputComponent>         _trackedInputComponent;                            // 0x0050(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UPlayerInput>            _playerInput;                                      // 0x0058(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_60[0x30];                                      // 0x0060(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ButtonPressTracker">();
	}
	static class UButtonPressTracker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UButtonPressTracker>();
	}
};
static_assert(alignof(UButtonPressTracker) == 0x000008, "Wrong alignment on UButtonPressTracker");
static_assert(sizeof(UButtonPressTracker) == 0x000090, "Wrong size on UButtonPressTracker");
static_assert(offsetof(UButtonPressTracker, _trackedInputComponent) == 0x000050, "Member 'UButtonPressTracker::_trackedInputComponent' has a wrong offset!");
static_assert(offsetof(UButtonPressTracker, _playerInput) == 0x000058, "Member 'UButtonPressTracker::_playerInput' has a wrong offset!");

// Class InputUtilities.InputMasher
// 0x0038 (0x00E0 - 0x00A8)
class UInputMasher final : public UActorComponent
{
public:
	class UInputComponent*                        _inputComponent;                                   // 0x00A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x30];                                      // 0x00B0(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputMasher">();
	}
	static class UInputMasher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputMasher>();
	}
};
static_assert(alignof(UInputMasher) == 0x000008, "Wrong alignment on UInputMasher");
static_assert(sizeof(UInputMasher) == 0x0000E0, "Wrong size on UInputMasher");
static_assert(offsetof(UInputMasher, _inputComponent) == 0x0000A8, "Member 'UInputMasher::_inputComponent' has a wrong offset!");

// Class InputUtilities.VirtualKeyboard
// 0x0010 (0x0040 - 0x0030)
class UVirtualKeyboard final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualKeyboard">();
	}
	static class UVirtualKeyboard* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualKeyboard>();
	}
};
static_assert(alignof(UVirtualKeyboard) == 0x000008, "Wrong alignment on UVirtualKeyboard");
static_assert(sizeof(UVirtualKeyboard) == 0x000040, "Wrong size on UVirtualKeyboard");

}

