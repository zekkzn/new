#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: EnhancedInput

#include "Basic.hpp"

#include "EnhancedInput_structs.hpp"
#include "Engine_classes.hpp"
#include "DeveloperSettings_structs.hpp"
#include "DeveloperSettings_classes.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class EnhancedInput.EnhancedInputActionDelegateBinding
// 0x0010 (0x0040 - 0x0030)
class UEnhancedInputActionDelegateBinding final : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintEnhancedInputActionBinding> InputActionDelegateBindings;                       // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputActionDelegateBinding">();
	}
	static class UEnhancedInputActionDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedInputActionDelegateBinding>();
	}
};
static_assert(alignof(UEnhancedInputActionDelegateBinding) == 0x000008, "Wrong alignment on UEnhancedInputActionDelegateBinding");
static_assert(sizeof(UEnhancedInputActionDelegateBinding) == 0x000040, "Wrong size on UEnhancedInputActionDelegateBinding");
static_assert(offsetof(UEnhancedInputActionDelegateBinding, InputActionDelegateBindings) == 0x000030, "Member 'UEnhancedInputActionDelegateBinding::InputActionDelegateBindings' has a wrong offset!");

// Class EnhancedInput.EnhancedInputPlatformSettings
// 0x0028 (0x0078 - 0x0050)
class UEnhancedInputPlatformSettings final : public UPlatformSettings
{
public:
	TArray<TSoftClassPtr<class UClass>>           InputData;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, Config, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class UEnhancedInputPlatformData>> InputDataClasses;                                  // 0x0060(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	bool                                          bShouldLogMappingContextRedirects;                 // 0x0070(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputPlatformSettings">();
	}
	static class UEnhancedInputPlatformSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedInputPlatformSettings>();
	}
};
static_assert(alignof(UEnhancedInputPlatformSettings) == 0x000008, "Wrong alignment on UEnhancedInputPlatformSettings");
static_assert(sizeof(UEnhancedInputPlatformSettings) == 0x000078, "Wrong size on UEnhancedInputPlatformSettings");
static_assert(offsetof(UEnhancedInputPlatformSettings, InputData) == 0x000050, "Member 'UEnhancedInputPlatformSettings::InputData' has a wrong offset!");
static_assert(offsetof(UEnhancedInputPlatformSettings, InputDataClasses) == 0x000060, "Member 'UEnhancedInputPlatformSettings::InputDataClasses' has a wrong offset!");
static_assert(offsetof(UEnhancedInputPlatformSettings, bShouldLogMappingContextRedirects) == 0x000070, "Member 'UEnhancedInputPlatformSettings::bShouldLogMappingContextRedirects' has a wrong offset!");

// Class EnhancedInput.EnhancedInputActionValueBinding
// 0x0010 (0x0040 - 0x0030)
class UEnhancedInputActionValueBinding final : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintEnhancedInputActionBinding> InputActionValueBindings;                          // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputActionValueBinding">();
	}
	static class UEnhancedInputActionValueBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedInputActionValueBinding>();
	}
};
static_assert(alignof(UEnhancedInputActionValueBinding) == 0x000008, "Wrong alignment on UEnhancedInputActionValueBinding");
static_assert(sizeof(UEnhancedInputActionValueBinding) == 0x000040, "Wrong size on UEnhancedInputActionValueBinding");
static_assert(offsetof(UEnhancedInputActionValueBinding, InputActionValueBindings) == 0x000030, "Member 'UEnhancedInputActionValueBinding::InputActionValueBindings' has a wrong offset!");

// Class EnhancedInput.EnhancedInputComponent
// 0x0038 (0x0168 - 0x0130)
class UEnhancedInputComponent final : public UInputComponent
{
public:
	uint8                                         Pad_130[0x38];                                     // 0x0130(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FInputActionValue GetBoundActionValue(const class UInputAction* Action) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputComponent">();
	}
	static class UEnhancedInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedInputComponent>();
	}
};
static_assert(alignof(UEnhancedInputComponent) == 0x000008, "Wrong alignment on UEnhancedInputComponent");
static_assert(sizeof(UEnhancedInputComponent) == 0x000168, "Wrong size on UEnhancedInputComponent");

// Class EnhancedInput.EnhancedInputDeveloperSettings
// 0x0070 (0x00B8 - 0x0048)
class UEnhancedInputDeveloperSettings final : public UDeveloperSettingsBackedByCVars
{
public:
	TArray<struct FDefaultContextSetting>         DefaultMappingContexts;                            // 0x0048(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<struct FDefaultContextSetting>         DefaultWorldSubsystemMappingContexts;              // 0x0058(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefaultWorldInputClass;                            // 0x0068(0x0038)(Edit, Config, NoClear, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPerPlatformSettings                   PlatformSettings;                                  // 0x00A0(0x0010)(Edit, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         bEnableDefaultMappingContexts : 1;                 // 0x00B0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldOnlyTriggerLastActionInChord : 1;           // 0x00B0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEnableWorldSubsystem : 1;                         // 0x00B0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bShouldLogAllWorldSubsystemInputs : 1;             // 0x00B0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, Config, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputDeveloperSettings">();
	}
	static class UEnhancedInputDeveloperSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedInputDeveloperSettings>();
	}
};
static_assert(alignof(UEnhancedInputDeveloperSettings) == 0x000008, "Wrong alignment on UEnhancedInputDeveloperSettings");
static_assert(sizeof(UEnhancedInputDeveloperSettings) == 0x0000B8, "Wrong size on UEnhancedInputDeveloperSettings");
static_assert(offsetof(UEnhancedInputDeveloperSettings, DefaultMappingContexts) == 0x000048, "Member 'UEnhancedInputDeveloperSettings::DefaultMappingContexts' has a wrong offset!");
static_assert(offsetof(UEnhancedInputDeveloperSettings, DefaultWorldSubsystemMappingContexts) == 0x000058, "Member 'UEnhancedInputDeveloperSettings::DefaultWorldSubsystemMappingContexts' has a wrong offset!");
static_assert(offsetof(UEnhancedInputDeveloperSettings, DefaultWorldInputClass) == 0x000068, "Member 'UEnhancedInputDeveloperSettings::DefaultWorldInputClass' has a wrong offset!");
static_assert(offsetof(UEnhancedInputDeveloperSettings, PlatformSettings) == 0x0000A0, "Member 'UEnhancedInputDeveloperSettings::PlatformSettings' has a wrong offset!");

// Class EnhancedInput.EnhancedInputLibrary
// 0x0000 (0x0030 - 0x0030)
class UEnhancedInputLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BreakInputActionValue(const struct FInputActionValue& InActionValue, double* X, double* Y, double* Z, EInputActionValueType* Type);
	static double Conv_InputActionValueToAxis1D(const struct FInputActionValue& InValue);
	static struct FVector2D Conv_InputActionValueToAxis2D(const struct FInputActionValue& InValue);
	static struct FVector Conv_InputActionValueToAxis3D(const struct FInputActionValue& ActionValue);
	static bool Conv_InputActionValueToBool(const struct FInputActionValue& InValue);
	static class FString Conv_InputActionValueToString(const struct FInputActionValue& ActionValue);
	static struct FInputActionValue GetBoundActionValue(class AActor* Actor, const class UInputAction* Action);
	static struct FPlayerMappableKeySlot GetFirstPlayerMappableKeySlot();
	static struct FPlayerMappableKeySlot GetFourthPlayerMappableKeySlot();
	static class FName GetMappingName(const struct FEnhancedActionKeyMapping& ActionKeyMapping);
	static class UPlayerMappableKeySettings* GetPlayerMappableKeySettings(const struct FEnhancedActionKeyMapping& ActionKeyMapping);
	static struct FPlayerMappableKeySlot GetSecondPlayerMappableKeySlot();
	static struct FPlayerMappableKeySlot GetThirdPlayerMappableKeySlot();
	static bool IsActionKeyMappingPlayerMappable(const struct FEnhancedActionKeyMapping& ActionKeyMapping);
	static struct FInputActionValue MakeInputActionValue(double X, double Y, double Z, const struct FInputActionValue& MatchValueType);
	static struct FInputActionValue MakeInputActionValueOfType(double X, double Y, double Z, const EInputActionValueType ValueType);
	static void RequestRebuildControlMappingsUsingContext(const class UInputMappingContext* Context, bool bForceImmediately);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputLibrary">();
	}
	static class UEnhancedInputLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedInputLibrary>();
	}
};
static_assert(alignof(UEnhancedInputLibrary) == 0x000008, "Wrong alignment on UEnhancedInputLibrary");
static_assert(sizeof(UEnhancedInputLibrary) == 0x000030, "Wrong size on UEnhancedInputLibrary");

// Class EnhancedInput.EnhancedInputPlatformData
// 0x0050 (0x0080 - 0x0030)
class UEnhancedInputPlatformData final : public UObject
{
public:
	TMap<class UInputMappingContext*, class UInputMappingContext*> MappingContextRedirects;                           // 0x0030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	const class UInputMappingContext* GetContextRedirect(class UInputMappingContext* InContext) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputPlatformData">();
	}
	static class UEnhancedInputPlatformData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedInputPlatformData>();
	}
};
static_assert(alignof(UEnhancedInputPlatformData) == 0x000008, "Wrong alignment on UEnhancedInputPlatformData");
static_assert(sizeof(UEnhancedInputPlatformData) == 0x000080, "Wrong size on UEnhancedInputPlatformData");
static_assert(offsetof(UEnhancedInputPlatformData, MappingContextRedirects) == 0x000030, "Member 'UEnhancedInputPlatformData::MappingContextRedirects' has a wrong offset!");

// Class EnhancedInput.EnhancedInputSubsystemInterface
// 0x0000 (0x0030 - 0x0030)
class IEnhancedInputSubsystemInterface final : public IInterface
{
public:
	void AddMappingContext(const class UInputMappingContext* MappingContext, int32 Priority, const struct FModifyContextOptions& Options);
	void AddPlayerMappableConfig(const class UPlayerMappableInputConfig* Config, const struct FModifyContextOptions& Options);
	void ClearAllMappings();
	void InjectInputForAction(const class UInputAction* Action, const struct FInputActionValue& RawValue, const TArray<class UInputModifier*>& Modifiers, const TArray<class UInputTrigger*>& Triggers);
	void InjectInputVectorForAction(const class UInputAction* Action, const struct FVector& Value, const TArray<class UInputModifier*>& Modifiers, const TArray<class UInputTrigger*>& Triggers);
	int32 K2_AddPlayerMappedKeyInSlot(const class FName MappingName, const struct FKey& NewKey, const struct FPlayerMappableKeySlot& KeySlot, const struct FModifyContextOptions& Options);
	int32 K2_RemovePlayerMappedKeyInSlot(const class FName MappingName, const struct FPlayerMappableKeySlot& KeySlot, const struct FModifyContextOptions& Options);
	EMappingQueryResult QueryMapKeyInActiveContextSet(const class UInputMappingContext* InputContext, const class UInputAction* Action, const struct FKey& Key, TArray<struct FMappingQueryIssue>* OutIssues, EMappingQueryIssue BlockingIssues);
	EMappingQueryResult QueryMapKeyInContextSet(const TArray<class UInputMappingContext*>& PrioritizedActiveContexts, const class UInputMappingContext* InputContext, const class UInputAction* Action, const struct FKey& Key, TArray<struct FMappingQueryIssue>* OutIssues, EMappingQueryIssue BlockingIssues);
	void RemoveAllPlayerMappedKeys(const struct FModifyContextOptions& Options);
	int32 RemoveAllPlayerMappedKeysForMapping(const class FName MappingName, const struct FModifyContextOptions& Options);
	void RemoveMappingContext(const class UInputMappingContext* MappingContext, const struct FModifyContextOptions& Options);
	void RemovePlayerMappableConfig(const class UPlayerMappableInputConfig* Config, const struct FModifyContextOptions& Options);
	void RequestRebuildControlMappings(const struct FModifyContextOptions& Options, EInputMappingRebuildType RebuildType);

	TArray<struct FEnhancedActionKeyMapping> GetAllPlayerMappableActionKeyMappings() const;
	TArray<struct FKey> GetAllPlayerMappedKeys(const class FName MappingName) const;
	bool HasMappingContext(const class UInputMappingContext* MappingContext, int32* OutFoundPriority) const;
	struct FKey K2_GetPlayerMappedKeyInSlot(const class FName MappingName, const struct FPlayerMappableKeySlot& KeySlot) const;
	TArray<struct FKey> QueryKeysMappedToAction(const class UInputAction* Action) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputSubsystemInterface">();
	}
	static class IEnhancedInputSubsystemInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IEnhancedInputSubsystemInterface>();
	}
};
static_assert(alignof(IEnhancedInputSubsystemInterface) == 0x000008, "Wrong alignment on IEnhancedInputSubsystemInterface");
static_assert(sizeof(IEnhancedInputSubsystemInterface) == 0x000030, "Wrong size on IEnhancedInputSubsystemInterface");

// Class EnhancedInput.EnhancedInputLocalPlayerSubsystem
// 0x01B0 (0x01E8 - 0x0038)
class UEnhancedInputLocalPlayerSubsystem final : public ULocalPlayerSubsystem
{
public:
	uint8                                         Pad_38[0x1A0];                                     // 0x0038(0x01A0)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ControlMappingsRebuiltDelegate;                    // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputLocalPlayerSubsystem">();
	}
	static class UEnhancedInputLocalPlayerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedInputLocalPlayerSubsystem>();
	}
};
static_assert(alignof(UEnhancedInputLocalPlayerSubsystem) == 0x000008, "Wrong alignment on UEnhancedInputLocalPlayerSubsystem");
static_assert(sizeof(UEnhancedInputLocalPlayerSubsystem) == 0x0001E8, "Wrong size on UEnhancedInputLocalPlayerSubsystem");
static_assert(offsetof(UEnhancedInputLocalPlayerSubsystem, ControlMappingsRebuiltDelegate) == 0x0001D8, "Member 'UEnhancedInputLocalPlayerSubsystem::ControlMappingsRebuiltDelegate' has a wrong offset!");

// Class EnhancedInput.EnhancedInputWorldSubsystem
// 0x01C8 (0x0200 - 0x0038)
class UEnhancedInputWorldSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x1A0];                                     // 0x0038(0x01A0)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnhancedPlayerInput*                   PlayerInput;                                       // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E0[0x10];                                     // 0x01E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class UInputComponent>> CurrentInputStack;                                 // 0x01F0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void AddActorInputComponent(class AActor* Actor);
	bool RemoveActorInputComponent(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedInputWorldSubsystem">();
	}
	static class UEnhancedInputWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedInputWorldSubsystem>();
	}
};
static_assert(alignof(UEnhancedInputWorldSubsystem) == 0x000008, "Wrong alignment on UEnhancedInputWorldSubsystem");
static_assert(sizeof(UEnhancedInputWorldSubsystem) == 0x000200, "Wrong size on UEnhancedInputWorldSubsystem");
static_assert(offsetof(UEnhancedInputWorldSubsystem, PlayerInput) == 0x0001D8, "Member 'UEnhancedInputWorldSubsystem::PlayerInput' has a wrong offset!");
static_assert(offsetof(UEnhancedInputWorldSubsystem, CurrentInputStack) == 0x0001F0, "Member 'UEnhancedInputWorldSubsystem::CurrentInputStack' has a wrong offset!");

// Class EnhancedInput.EnhancedPlayerInput
// 0x02A8 (0x0748 - 0x04A0)
class UEnhancedPlayerInput final : public UPlayerInput
{
public:
	TMap<class UInputMappingContext*, int32>      AppliedInputContexts;                              // 0x04A0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<struct FEnhancedActionKeyMapping>      EnhancedActionMappings;                            // 0x04F0(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_500[0x50];                                     // 0x0500(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UInputAction*, struct FInputActionInstance> ActionInstanceData;                                // 0x0550(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5A0[0xA0];                                     // 0x05A0(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FKey, struct FVector>             KeysPressedThisTick;                               // 0x0640(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class UInputAction*, struct FInjectedInputArray> InputsInjectedThisTick;                            // 0x0690(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TSet<class UInputAction*>                     LastInjectedActions;                               // 0x06E0(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_730[0x18];                                     // 0x0730(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnhancedPlayerInput">();
	}
	static class UEnhancedPlayerInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnhancedPlayerInput>();
	}
};
static_assert(alignof(UEnhancedPlayerInput) == 0x000008, "Wrong alignment on UEnhancedPlayerInput");
static_assert(sizeof(UEnhancedPlayerInput) == 0x000748, "Wrong size on UEnhancedPlayerInput");
static_assert(offsetof(UEnhancedPlayerInput, AppliedInputContexts) == 0x0004A0, "Member 'UEnhancedPlayerInput::AppliedInputContexts' has a wrong offset!");
static_assert(offsetof(UEnhancedPlayerInput, EnhancedActionMappings) == 0x0004F0, "Member 'UEnhancedPlayerInput::EnhancedActionMappings' has a wrong offset!");
static_assert(offsetof(UEnhancedPlayerInput, ActionInstanceData) == 0x000550, "Member 'UEnhancedPlayerInput::ActionInstanceData' has a wrong offset!");
static_assert(offsetof(UEnhancedPlayerInput, KeysPressedThisTick) == 0x000640, "Member 'UEnhancedPlayerInput::KeysPressedThisTick' has a wrong offset!");
static_assert(offsetof(UEnhancedPlayerInput, InputsInjectedThisTick) == 0x000690, "Member 'UEnhancedPlayerInput::InputsInjectedThisTick' has a wrong offset!");
static_assert(offsetof(UEnhancedPlayerInput, LastInjectedActions) == 0x0006E0, "Member 'UEnhancedPlayerInput::LastInjectedActions' has a wrong offset!");

// Class EnhancedInput.InputAction
// 0x0048 (0x0080 - 0x0038)
class UInputAction final : public UDataAsset
{
public:
	class FText                                   ActionDescription;                                 // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bConsumeInput;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerWhenPaused;                                // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReserveAllMappings;                               // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInputActionValueType                         ValueType;                                         // 0x0053(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInputTrigger*>                  Triggers;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UInputModifier*>                 Modifiers;                                         // 0x0068(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UPlayerMappableKeySettings*             PlayerMappableKeySettings;                         // 0x0078(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputAction">();
	}
	static class UInputAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputAction>();
	}
};
static_assert(alignof(UInputAction) == 0x000008, "Wrong alignment on UInputAction");
static_assert(sizeof(UInputAction) == 0x000080, "Wrong size on UInputAction");
static_assert(offsetof(UInputAction, ActionDescription) == 0x000038, "Member 'UInputAction::ActionDescription' has a wrong offset!");
static_assert(offsetof(UInputAction, bConsumeInput) == 0x000050, "Member 'UInputAction::bConsumeInput' has a wrong offset!");
static_assert(offsetof(UInputAction, bTriggerWhenPaused) == 0x000051, "Member 'UInputAction::bTriggerWhenPaused' has a wrong offset!");
static_assert(offsetof(UInputAction, bReserveAllMappings) == 0x000052, "Member 'UInputAction::bReserveAllMappings' has a wrong offset!");
static_assert(offsetof(UInputAction, ValueType) == 0x000053, "Member 'UInputAction::ValueType' has a wrong offset!");
static_assert(offsetof(UInputAction, Triggers) == 0x000058, "Member 'UInputAction::Triggers' has a wrong offset!");
static_assert(offsetof(UInputAction, Modifiers) == 0x000068, "Member 'UInputAction::Modifiers' has a wrong offset!");
static_assert(offsetof(UInputAction, PlayerMappableKeySettings) == 0x000078, "Member 'UInputAction::PlayerMappableKeySettings' has a wrong offset!");

// Class EnhancedInput.InputDebugKeyDelegateBinding
// 0x0010 (0x0040 - 0x0030)
class UInputDebugKeyDelegateBinding final : public UInputDelegateBinding
{
public:
	TArray<struct FBlueprintInputDebugKeyDelegateBinding> InputDebugKeyDelegateBindings;                     // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputDebugKeyDelegateBinding">();
	}
	static class UInputDebugKeyDelegateBinding* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputDebugKeyDelegateBinding>();
	}
};
static_assert(alignof(UInputDebugKeyDelegateBinding) == 0x000008, "Wrong alignment on UInputDebugKeyDelegateBinding");
static_assert(sizeof(UInputDebugKeyDelegateBinding) == 0x000040, "Wrong size on UInputDebugKeyDelegateBinding");
static_assert(offsetof(UInputDebugKeyDelegateBinding, InputDebugKeyDelegateBindings) == 0x000030, "Member 'UInputDebugKeyDelegateBinding::InputDebugKeyDelegateBindings' has a wrong offset!");

// Class EnhancedInput.InputMappingContext
// 0x0028 (0x0060 - 0x0038)
class UInputMappingContext final : public UDataAsset
{
public:
	TArray<struct FEnhancedActionKeyMapping>      Mappings;                                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class FText                                   ContextDescription;                                // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	struct FEnhancedActionKeyMapping MapKey(const class UInputAction* Action, const struct FKey& ToKey);
	void UnmapAction(const class UInputAction* Action);
	void UnmapAll();
	void UnmapAllKeysFromAction(const class UInputAction* Action);
	void UnmapKey(const class UInputAction* Action, const struct FKey& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputMappingContext">();
	}
	static class UInputMappingContext* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputMappingContext>();
	}
};
static_assert(alignof(UInputMappingContext) == 0x000008, "Wrong alignment on UInputMappingContext");
static_assert(sizeof(UInputMappingContext) == 0x000060, "Wrong size on UInputMappingContext");
static_assert(offsetof(UInputMappingContext, Mappings) == 0x000038, "Member 'UInputMappingContext::Mappings' has a wrong offset!");
static_assert(offsetof(UInputMappingContext, ContextDescription) == 0x000048, "Member 'UInputMappingContext::ContextDescription' has a wrong offset!");

// Class EnhancedInput.InputModifier
// 0x0000 (0x0030 - 0x0030)
class UInputModifier : public UObject
{
public:
	struct FLinearColor GetVisualizationColor(const struct FInputActionValue& SampleValue, const struct FInputActionValue& FinalValue) const;
	struct FInputActionValue ModifyRaw(const class UEnhancedPlayerInput* PlayerInput, const struct FInputActionValue& CurrentValue, float DeltaTime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifier">();
	}
	static class UInputModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifier>();
	}
};
static_assert(alignof(UInputModifier) == 0x000008, "Wrong alignment on UInputModifier");
static_assert(sizeof(UInputModifier) == 0x000030, "Wrong size on UInputModifier");

// Class EnhancedInput.InputModifierDeadZone
// 0x0010 (0x0040 - 0x0030)
class UInputModifierDeadZone final : public UInputModifier
{
public:
	float                                         LowerThreshold;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpperThreshold;                                    // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeadZoneType                                 Type;                                              // 0x0038(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierDeadZone">();
	}
	static class UInputModifierDeadZone* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierDeadZone>();
	}
};
static_assert(alignof(UInputModifierDeadZone) == 0x000008, "Wrong alignment on UInputModifierDeadZone");
static_assert(sizeof(UInputModifierDeadZone) == 0x000040, "Wrong size on UInputModifierDeadZone");
static_assert(offsetof(UInputModifierDeadZone, LowerThreshold) == 0x000030, "Member 'UInputModifierDeadZone::LowerThreshold' has a wrong offset!");
static_assert(offsetof(UInputModifierDeadZone, UpperThreshold) == 0x000034, "Member 'UInputModifierDeadZone::UpperThreshold' has a wrong offset!");
static_assert(offsetof(UInputModifierDeadZone, Type) == 0x000038, "Member 'UInputModifierDeadZone::Type' has a wrong offset!");

// Class EnhancedInput.InputModifierScalar
// 0x0018 (0x0048 - 0x0030)
class UInputModifierScalar final : public UInputModifier
{
public:
	struct FVector                                Scalar;                                            // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierScalar">();
	}
	static class UInputModifierScalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierScalar>();
	}
};
static_assert(alignof(UInputModifierScalar) == 0x000008, "Wrong alignment on UInputModifierScalar");
static_assert(sizeof(UInputModifierScalar) == 0x000048, "Wrong size on UInputModifierScalar");
static_assert(offsetof(UInputModifierScalar, Scalar) == 0x000030, "Member 'UInputModifierScalar::Scalar' has a wrong offset!");

// Class EnhancedInput.InputModifierScaleByDeltaTime
// 0x0000 (0x0030 - 0x0030)
class UInputModifierScaleByDeltaTime final : public UInputModifier
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierScaleByDeltaTime">();
	}
	static class UInputModifierScaleByDeltaTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierScaleByDeltaTime>();
	}
};
static_assert(alignof(UInputModifierScaleByDeltaTime) == 0x000008, "Wrong alignment on UInputModifierScaleByDeltaTime");
static_assert(sizeof(UInputModifierScaleByDeltaTime) == 0x000030, "Wrong size on UInputModifierScaleByDeltaTime");

// Class EnhancedInput.InputModifierNegate
// 0x0008 (0x0038 - 0x0030)
class UInputModifierNegate final : public UInputModifier
{
public:
	bool                                          bX;                                                // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bY;                                                // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZ;                                                // 0x0032(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierNegate">();
	}
	static class UInputModifierNegate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierNegate>();
	}
};
static_assert(alignof(UInputModifierNegate) == 0x000008, "Wrong alignment on UInputModifierNegate");
static_assert(sizeof(UInputModifierNegate) == 0x000038, "Wrong size on UInputModifierNegate");
static_assert(offsetof(UInputModifierNegate, bX) == 0x000030, "Member 'UInputModifierNegate::bX' has a wrong offset!");
static_assert(offsetof(UInputModifierNegate, bY) == 0x000031, "Member 'UInputModifierNegate::bY' has a wrong offset!");
static_assert(offsetof(UInputModifierNegate, bZ) == 0x000032, "Member 'UInputModifierNegate::bZ' has a wrong offset!");

// Class EnhancedInput.InputModifierSmooth
// 0x0030 (0x0060 - 0x0030)
class UInputModifierSmooth final : public UInputModifier
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierSmooth">();
	}
	static class UInputModifierSmooth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierSmooth>();
	}
};
static_assert(alignof(UInputModifierSmooth) == 0x000008, "Wrong alignment on UInputModifierSmooth");
static_assert(sizeof(UInputModifierSmooth) == 0x000060, "Wrong size on UInputModifierSmooth");

// Class EnhancedInput.InputModifierResponseCurveExponential
// 0x0018 (0x0048 - 0x0030)
class UInputModifierResponseCurveExponential final : public UInputModifier
{
public:
	struct FVector                                CurveExponent;                                     // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierResponseCurveExponential">();
	}
	static class UInputModifierResponseCurveExponential* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierResponseCurveExponential>();
	}
};
static_assert(alignof(UInputModifierResponseCurveExponential) == 0x000008, "Wrong alignment on UInputModifierResponseCurveExponential");
static_assert(sizeof(UInputModifierResponseCurveExponential) == 0x000048, "Wrong size on UInputModifierResponseCurveExponential");
static_assert(offsetof(UInputModifierResponseCurveExponential, CurveExponent) == 0x000030, "Member 'UInputModifierResponseCurveExponential::CurveExponent' has a wrong offset!");

// Class EnhancedInput.InputModifierResponseCurveUser
// 0x0018 (0x0048 - 0x0030)
class UInputModifierResponseCurveUser final : public UInputModifier
{
public:
	class UCurveFloat*                            ResponseX;                                         // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ResponseY;                                         // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ResponseZ;                                         // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierResponseCurveUser">();
	}
	static class UInputModifierResponseCurveUser* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierResponseCurveUser>();
	}
};
static_assert(alignof(UInputModifierResponseCurveUser) == 0x000008, "Wrong alignment on UInputModifierResponseCurveUser");
static_assert(sizeof(UInputModifierResponseCurveUser) == 0x000048, "Wrong size on UInputModifierResponseCurveUser");
static_assert(offsetof(UInputModifierResponseCurveUser, ResponseX) == 0x000030, "Member 'UInputModifierResponseCurveUser::ResponseX' has a wrong offset!");
static_assert(offsetof(UInputModifierResponseCurveUser, ResponseY) == 0x000038, "Member 'UInputModifierResponseCurveUser::ResponseY' has a wrong offset!");
static_assert(offsetof(UInputModifierResponseCurveUser, ResponseZ) == 0x000040, "Member 'UInputModifierResponseCurveUser::ResponseZ' has a wrong offset!");

// Class EnhancedInput.InputModifierFOVScaling
// 0x0008 (0x0038 - 0x0030)
class UInputModifierFOVScaling final : public UInputModifier
{
public:
	float                                         FOVScale;                                          // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFOVScalingType                               FOVScalingType;                                    // 0x0034(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierFOVScaling">();
	}
	static class UInputModifierFOVScaling* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierFOVScaling>();
	}
};
static_assert(alignof(UInputModifierFOVScaling) == 0x000008, "Wrong alignment on UInputModifierFOVScaling");
static_assert(sizeof(UInputModifierFOVScaling) == 0x000038, "Wrong size on UInputModifierFOVScaling");
static_assert(offsetof(UInputModifierFOVScaling, FOVScale) == 0x000030, "Member 'UInputModifierFOVScaling::FOVScale' has a wrong offset!");
static_assert(offsetof(UInputModifierFOVScaling, FOVScalingType) == 0x000034, "Member 'UInputModifierFOVScaling::FOVScalingType' has a wrong offset!");

// Class EnhancedInput.InputModifierToWorldSpace
// 0x0000 (0x0030 - 0x0030)
class UInputModifierToWorldSpace final : public UInputModifier
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierToWorldSpace">();
	}
	static class UInputModifierToWorldSpace* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierToWorldSpace>();
	}
};
static_assert(alignof(UInputModifierToWorldSpace) == 0x000008, "Wrong alignment on UInputModifierToWorldSpace");
static_assert(sizeof(UInputModifierToWorldSpace) == 0x000030, "Wrong size on UInputModifierToWorldSpace");

// Class EnhancedInput.InputModifierSwizzleAxis
// 0x0008 (0x0038 - 0x0030)
class UInputModifierSwizzleAxis final : public UInputModifier
{
public:
	EInputAxisSwizzle                             Order;                                             // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierSwizzleAxis">();
	}
	static class UInputModifierSwizzleAxis* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierSwizzleAxis>();
	}
};
static_assert(alignof(UInputModifierSwizzleAxis) == 0x000008, "Wrong alignment on UInputModifierSwizzleAxis");
static_assert(sizeof(UInputModifierSwizzleAxis) == 0x000038, "Wrong size on UInputModifierSwizzleAxis");
static_assert(offsetof(UInputModifierSwizzleAxis, Order) == 0x000030, "Member 'UInputModifierSwizzleAxis::Order' has a wrong offset!");

// Class EnhancedInput.InputTrigger
// 0x0028 (0x0058 - 0x0030)
class UInputTrigger : public UObject
{
public:
	float                                         ActuationThreshold;                                // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldAlwaysTick;                                 // 0x0034(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInputActionValue                      LastValue;                                         // 0x0038(0x0020)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	ETriggerState UpdateState(const class UEnhancedPlayerInput* PlayerInput, const struct FInputActionValue& ModifiedValue, float DeltaTime);

	ETriggerType GetTriggerType() const;
	bool IsActuated(const struct FInputActionValue& ForValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTrigger">();
	}
	static class UInputTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTrigger>();
	}
};
static_assert(alignof(UInputTrigger) == 0x000008, "Wrong alignment on UInputTrigger");
static_assert(sizeof(UInputTrigger) == 0x000058, "Wrong size on UInputTrigger");
static_assert(offsetof(UInputTrigger, ActuationThreshold) == 0x000030, "Member 'UInputTrigger::ActuationThreshold' has a wrong offset!");
static_assert(offsetof(UInputTrigger, bShouldAlwaysTick) == 0x000034, "Member 'UInputTrigger::bShouldAlwaysTick' has a wrong offset!");
static_assert(offsetof(UInputTrigger, LastValue) == 0x000038, "Member 'UInputTrigger::LastValue' has a wrong offset!");

// Class EnhancedInput.InputTriggerTimedBase
// 0x0008 (0x0060 - 0x0058)
class UInputTriggerTimedBase : public UInputTrigger
{
public:
	float                                         HeldDuration;                                      // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAffectedByTimeDilation;                           // 0x005C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerTimedBase">();
	}
	static class UInputTriggerTimedBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerTimedBase>();
	}
};
static_assert(alignof(UInputTriggerTimedBase) == 0x000008, "Wrong alignment on UInputTriggerTimedBase");
static_assert(sizeof(UInputTriggerTimedBase) == 0x000060, "Wrong size on UInputTriggerTimedBase");
static_assert(offsetof(UInputTriggerTimedBase, HeldDuration) == 0x000058, "Member 'UInputTriggerTimedBase::HeldDuration' has a wrong offset!");
static_assert(offsetof(UInputTriggerTimedBase, bAffectedByTimeDilation) == 0x00005C, "Member 'UInputTriggerTimedBase::bAffectedByTimeDilation' has a wrong offset!");

// Class EnhancedInput.InputTriggerDown
// 0x0000 (0x0058 - 0x0058)
class UInputTriggerDown final : public UInputTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerDown">();
	}
	static class UInputTriggerDown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerDown>();
	}
};
static_assert(alignof(UInputTriggerDown) == 0x000008, "Wrong alignment on UInputTriggerDown");
static_assert(sizeof(UInputTriggerDown) == 0x000058, "Wrong size on UInputTriggerDown");

// Class EnhancedInput.InputTriggerPressed
// 0x0000 (0x0058 - 0x0058)
class UInputTriggerPressed final : public UInputTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerPressed">();
	}
	static class UInputTriggerPressed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerPressed>();
	}
};
static_assert(alignof(UInputTriggerPressed) == 0x000008, "Wrong alignment on UInputTriggerPressed");
static_assert(sizeof(UInputTriggerPressed) == 0x000058, "Wrong size on UInputTriggerPressed");

// Class EnhancedInput.InputTriggerReleased
// 0x0000 (0x0058 - 0x0058)
class UInputTriggerReleased final : public UInputTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerReleased">();
	}
	static class UInputTriggerReleased* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerReleased>();
	}
};
static_assert(alignof(UInputTriggerReleased) == 0x000008, "Wrong alignment on UInputTriggerReleased");
static_assert(sizeof(UInputTriggerReleased) == 0x000058, "Wrong size on UInputTriggerReleased");

// Class EnhancedInput.InputTriggerHold
// 0x0010 (0x0070 - 0x0060)
class UInputTriggerHold final : public UInputTriggerTimedBase
{
public:
	uint8                                         Pad_60[0x4];                                       // 0x0060(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HoldTimeThreshold;                                 // 0x0064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOneShot;                                        // 0x0068(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x7];                                       // 0x0069(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerHold">();
	}
	static class UInputTriggerHold* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerHold>();
	}
};
static_assert(alignof(UInputTriggerHold) == 0x000008, "Wrong alignment on UInputTriggerHold");
static_assert(sizeof(UInputTriggerHold) == 0x000070, "Wrong size on UInputTriggerHold");
static_assert(offsetof(UInputTriggerHold, HoldTimeThreshold) == 0x000064, "Member 'UInputTriggerHold::HoldTimeThreshold' has a wrong offset!");
static_assert(offsetof(UInputTriggerHold, bIsOneShot) == 0x000068, "Member 'UInputTriggerHold::bIsOneShot' has a wrong offset!");

// Class EnhancedInput.InputTriggerHoldAndRelease
// 0x0008 (0x0068 - 0x0060)
class UInputTriggerHoldAndRelease final : public UInputTriggerTimedBase
{
public:
	float                                         HoldTimeThreshold;                                 // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerHoldAndRelease">();
	}
	static class UInputTriggerHoldAndRelease* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerHoldAndRelease>();
	}
};
static_assert(alignof(UInputTriggerHoldAndRelease) == 0x000008, "Wrong alignment on UInputTriggerHoldAndRelease");
static_assert(sizeof(UInputTriggerHoldAndRelease) == 0x000068, "Wrong size on UInputTriggerHoldAndRelease");
static_assert(offsetof(UInputTriggerHoldAndRelease, HoldTimeThreshold) == 0x000060, "Member 'UInputTriggerHoldAndRelease::HoldTimeThreshold' has a wrong offset!");

// Class EnhancedInput.InputTriggerTap
// 0x0008 (0x0068 - 0x0060)
class UInputTriggerTap final : public UInputTriggerTimedBase
{
public:
	float                                         TapReleaseTimeThreshold;                           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerTap">();
	}
	static class UInputTriggerTap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerTap>();
	}
};
static_assert(alignof(UInputTriggerTap) == 0x000008, "Wrong alignment on UInputTriggerTap");
static_assert(sizeof(UInputTriggerTap) == 0x000068, "Wrong size on UInputTriggerTap");
static_assert(offsetof(UInputTriggerTap, TapReleaseTimeThreshold) == 0x000060, "Member 'UInputTriggerTap::TapReleaseTimeThreshold' has a wrong offset!");

// Class EnhancedInput.InputTriggerPulse
// 0x0010 (0x0070 - 0x0060)
class UInputTriggerPulse final : public UInputTriggerTimedBase
{
public:
	uint8                                         Pad_60[0x4];                                       // 0x0060(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTriggerOnStart;                                   // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Interval;                                          // 0x0068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerLimit;                                      // 0x006C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerPulse">();
	}
	static class UInputTriggerPulse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerPulse>();
	}
};
static_assert(alignof(UInputTriggerPulse) == 0x000008, "Wrong alignment on UInputTriggerPulse");
static_assert(sizeof(UInputTriggerPulse) == 0x000070, "Wrong size on UInputTriggerPulse");
static_assert(offsetof(UInputTriggerPulse, bTriggerOnStart) == 0x000064, "Member 'UInputTriggerPulse::bTriggerOnStart' has a wrong offset!");
static_assert(offsetof(UInputTriggerPulse, Interval) == 0x000068, "Member 'UInputTriggerPulse::Interval' has a wrong offset!");
static_assert(offsetof(UInputTriggerPulse, TriggerLimit) == 0x00006C, "Member 'UInputTriggerPulse::TriggerLimit' has a wrong offset!");

// Class EnhancedInput.InputTriggerChordAction
// 0x0008 (0x0060 - 0x0058)
class UInputTriggerChordAction : public UInputTrigger
{
public:
	class UInputAction*                           ChordAction;                                       // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerChordAction">();
	}
	static class UInputTriggerChordAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerChordAction>();
	}
};
static_assert(alignof(UInputTriggerChordAction) == 0x000008, "Wrong alignment on UInputTriggerChordAction");
static_assert(sizeof(UInputTriggerChordAction) == 0x000060, "Wrong size on UInputTriggerChordAction");
static_assert(offsetof(UInputTriggerChordAction, ChordAction) == 0x000058, "Member 'UInputTriggerChordAction::ChordAction' has a wrong offset!");

// Class EnhancedInput.InputTriggerChordBlocker
// 0x0000 (0x0060 - 0x0060)
class UInputTriggerChordBlocker final : public UInputTriggerChordAction
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerChordBlocker">();
	}
	static class UInputTriggerChordBlocker* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerChordBlocker>();
	}
};
static_assert(alignof(UInputTriggerChordBlocker) == 0x000008, "Wrong alignment on UInputTriggerChordBlocker");
static_assert(sizeof(UInputTriggerChordBlocker) == 0x000060, "Wrong size on UInputTriggerChordBlocker");

// Class EnhancedInput.InputTriggerCombo
// 0x0028 (0x0080 - 0x0058)
class UInputTriggerCombo final : public UInputTrigger
{
public:
	int32                                         CurrentComboStepIndex;                             // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentTimeBetweenComboSteps;                      // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FInputComboStepData>            ComboActions;                                      // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FInputCancelAction>             InputCancelActions;                                // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerCombo">();
	}
	static class UInputTriggerCombo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerCombo>();
	}
};
static_assert(alignof(UInputTriggerCombo) == 0x000008, "Wrong alignment on UInputTriggerCombo");
static_assert(sizeof(UInputTriggerCombo) == 0x000080, "Wrong size on UInputTriggerCombo");
static_assert(offsetof(UInputTriggerCombo, CurrentComboStepIndex) == 0x000058, "Member 'UInputTriggerCombo::CurrentComboStepIndex' has a wrong offset!");
static_assert(offsetof(UInputTriggerCombo, CurrentTimeBetweenComboSteps) == 0x00005C, "Member 'UInputTriggerCombo::CurrentTimeBetweenComboSteps' has a wrong offset!");
static_assert(offsetof(UInputTriggerCombo, ComboActions) == 0x000060, "Member 'UInputTriggerCombo::ComboActions' has a wrong offset!");
static_assert(offsetof(UInputTriggerCombo, InputCancelActions) == 0x000070, "Member 'UInputTriggerCombo::InputCancelActions' has a wrong offset!");

// Class EnhancedInput.PlayerMappableInputConfig
// 0x0088 (0x00C0 - 0x0038)
class UPlayerMappableInputConfig final : public UPrimaryDataAsset
{
public:
	class FName                                   ConfigName;                                        // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ConfigDisplayName;                                 // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsDeprecated;                                     // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                MetaData;                                          // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UInputMappingContext*, int32>      Contexts;                                          // 0x0070(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void ResetToDefault();

	const class FName GetConfigName() const;
	const class FText GetDisplayName() const;
	TArray<struct FEnhancedActionKeyMapping> GetKeysBoundToAction(const class UInputAction* InAction) const;
	struct FEnhancedActionKeyMapping GetMappingByName(const class FName MappingName) const;
	const TMap<class UInputMappingContext*, int32> GetMappingContexts() const;
	class UObject* GetMetadata() const;
	TArray<struct FEnhancedActionKeyMapping> GetPlayerMappableKeys() const;
	const bool IsDeprecated() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerMappableInputConfig">();
	}
	static class UPlayerMappableInputConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerMappableInputConfig>();
	}
};
static_assert(alignof(UPlayerMappableInputConfig) == 0x000008, "Wrong alignment on UPlayerMappableInputConfig");
static_assert(sizeof(UPlayerMappableInputConfig) == 0x0000C0, "Wrong size on UPlayerMappableInputConfig");
static_assert(offsetof(UPlayerMappableInputConfig, ConfigName) == 0x000038, "Member 'UPlayerMappableInputConfig::ConfigName' has a wrong offset!");
static_assert(offsetof(UPlayerMappableInputConfig, ConfigDisplayName) == 0x000048, "Member 'UPlayerMappableInputConfig::ConfigDisplayName' has a wrong offset!");
static_assert(offsetof(UPlayerMappableInputConfig, bIsDeprecated) == 0x000060, "Member 'UPlayerMappableInputConfig::bIsDeprecated' has a wrong offset!");
static_assert(offsetof(UPlayerMappableInputConfig, MetaData) == 0x000068, "Member 'UPlayerMappableInputConfig::MetaData' has a wrong offset!");
static_assert(offsetof(UPlayerMappableInputConfig, Contexts) == 0x000070, "Member 'UPlayerMappableInputConfig::Contexts' has a wrong offset!");

// Class EnhancedInput.PlayerMappableKeySettings
// 0x0048 (0x0078 - 0x0030)
class UPlayerMappableKeySettings final : public UObject
{
public:
	class UObject*                                MetaData;                                          // 0x0030(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Name_PlayerMappableKeySettings;                    // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   DisplayName;                                       // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DisplayCategory;                                   // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerMappableKeySettings">();
	}
	static class UPlayerMappableKeySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerMappableKeySettings>();
	}
};
static_assert(alignof(UPlayerMappableKeySettings) == 0x000008, "Wrong alignment on UPlayerMappableKeySettings");
static_assert(sizeof(UPlayerMappableKeySettings) == 0x000078, "Wrong size on UPlayerMappableKeySettings");
static_assert(offsetof(UPlayerMappableKeySettings, MetaData) == 0x000030, "Member 'UPlayerMappableKeySettings::MetaData' has a wrong offset!");
static_assert(offsetof(UPlayerMappableKeySettings, Name_PlayerMappableKeySettings) == 0x000038, "Member 'UPlayerMappableKeySettings::Name_PlayerMappableKeySettings' has a wrong offset!");
static_assert(offsetof(UPlayerMappableKeySettings, DisplayName) == 0x000048, "Member 'UPlayerMappableKeySettings::DisplayName' has a wrong offset!");
static_assert(offsetof(UPlayerMappableKeySettings, DisplayCategory) == 0x000060, "Member 'UPlayerMappableKeySettings::DisplayCategory' has a wrong offset!");

}

