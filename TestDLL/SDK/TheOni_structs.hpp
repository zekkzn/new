#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheOni

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum TheOni.EBloodOrbState
// NumValues: 0x0008
enum class EBloodOrbState : uint8
{
	Invalid                                  = 0,
	BeingDropped                             = 1,
	Idle                                     = 2,
	WaitingToMove                            = 3,
	Attracted                                = 4,
	Absorbed                                 = 5,
	Destroyed                                = 6,
	EBloodOrbState_MAX                       = 7,
};

// Enum TheOni.EBloodOrbVisibilityMode
// NumValues: 0x0003
enum class EBloodOrbVisibilityMode : uint8
{
	VisibleWithinRange                       = 0,
	HideAll                                  = 1,
	EBloodOrbVisibilityMode_MAX              = 2,
};

// Enum TheOni.EDemonModeState
// NumValues: 0x0006
enum class EDemonModeState : uint8
{
	Invalid                                  = 0,
	NotInPower                               = 1,
	Activation                               = 2,
	InPower                                  = 3,
	Cooldown                                 = 4,
	EDemonModeState_MAX                      = 5,
};

// ScriptStruct TheOni.Accumulator
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FAccumulator final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAccumulator) == 0x000008, "Wrong alignment on FAccumulator");
static_assert(sizeof(FAccumulator) == 0x000018, "Wrong size on FAccumulator");

// ScriptStruct TheOni.GameEventBloodOrbDropParams
// 0x0010 (0x0010 - 0x0000)
struct FGameEventBloodOrbDropParams final
{
public:
	struct FGameplayTag                           GameEvent;                                         // 0x0000(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseFactor;                                     // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameEventBloodOrbDropParams) == 0x000004, "Wrong alignment on FGameEventBloodOrbDropParams");
static_assert(sizeof(FGameEventBloodOrbDropParams) == 0x000010, "Wrong size on FGameEventBloodOrbDropParams");
static_assert(offsetof(FGameEventBloodOrbDropParams, GameEvent) == 0x000000, "Member 'FGameEventBloodOrbDropParams::GameEvent' has a wrong offset!");
static_assert(offsetof(FGameEventBloodOrbDropParams, ImpulseFactor) == 0x00000C, "Member 'FGameEventBloodOrbDropParams::ImpulseFactor' has a wrong offset!");

// ScriptStruct TheOni.BloodOrbDropParams
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x04) FBloodOrbDropParams final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBloodOrbDropParams) == 0x000004, "Wrong alignment on FBloodOrbDropParams");
static_assert(sizeof(FBloodOrbDropParams) == 0x000008, "Wrong size on FBloodOrbDropParams");

// ScriptStruct TheOni.BloodOrbInfo
// 0x00A0 (0x00A0 - 0x0000)
struct alignas(0x10) FBloodOrbInfo final
{
public:
	uint8                                         Pad_0[0x90];                                       // 0x0000(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   OriginalStaticMesh;                                // 0x0090(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   ClonedStaticMesh;                                  // 0x0098(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBloodOrbInfo) == 0x000010, "Wrong alignment on FBloodOrbInfo");
static_assert(sizeof(FBloodOrbInfo) == 0x0000A0, "Wrong size on FBloodOrbInfo");
static_assert(offsetof(FBloodOrbInfo, OriginalStaticMesh) == 0x000090, "Member 'FBloodOrbInfo::OriginalStaticMesh' has a wrong offset!");
static_assert(offsetof(FBloodOrbInfo, ClonedStaticMesh) == 0x000098, "Member 'FBloodOrbInfo::ClonedStaticMesh' has a wrong offset!");

}

