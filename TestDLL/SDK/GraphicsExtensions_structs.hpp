#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GraphicsExtensions

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "GFXUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK
{

// Enum GraphicsExtensions.EShadowDepthLODSelection
// NumValues: 0x0006
enum class EShadowDepthLODSelection : uint8
{
	ViewDependent                            = 0,
	HighestLOD                               = 1,
	LowestLOD                                = 2,
	ShadowView                               = 3,
	Max                                      = 4,
	EShadowDepthLODSelection_MAX             = 5,
};

// ScriptStruct GraphicsExtensions.BloomParams
// 0x00B8 (0x00B8 - 0x0000)
struct FBloomParams final
{
public:
	EBloomMethod                                  BloomMethod;                                       // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomIntensity;                                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomSizeScale;                                    // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom1Size;                                        // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom2Size;                                        // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom3Size;                                        // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom4Size;                                        // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom5Size;                                        // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Bloom6Size;                                        // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom1Tint;                                        // 0x0028(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom2Tint;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom3Tint;                                        // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom4Tint;                                        // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom5Tint;                                        // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Bloom6Tint;                                        // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionScatterDispersion;                 // 0x0088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionSize;                              // 0x008C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             BloomConvolutionTexture;                           // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              BloomConvolutionCenterUV;                          // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionPreFilterMin;                      // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionPreFilterMax;                      // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionPreFilterMult;                     // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomConvolutionBufferScale;                       // 0x00B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBloomParams) == 0x000008, "Wrong alignment on FBloomParams");
static_assert(sizeof(FBloomParams) == 0x0000B8, "Wrong size on FBloomParams");
static_assert(offsetof(FBloomParams, BloomMethod) == 0x000000, "Member 'FBloomParams::BloomMethod' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomIntensity) == 0x000004, "Member 'FBloomParams::BloomIntensity' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomThreshold) == 0x000008, "Member 'FBloomParams::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomSizeScale) == 0x00000C, "Member 'FBloomParams::BloomSizeScale' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom1Size) == 0x000010, "Member 'FBloomParams::Bloom1Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom2Size) == 0x000014, "Member 'FBloomParams::Bloom2Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom3Size) == 0x000018, "Member 'FBloomParams::Bloom3Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom4Size) == 0x00001C, "Member 'FBloomParams::Bloom4Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom5Size) == 0x000020, "Member 'FBloomParams::Bloom5Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom6Size) == 0x000024, "Member 'FBloomParams::Bloom6Size' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom1Tint) == 0x000028, "Member 'FBloomParams::Bloom1Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom2Tint) == 0x000038, "Member 'FBloomParams::Bloom2Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom3Tint) == 0x000048, "Member 'FBloomParams::Bloom3Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom4Tint) == 0x000058, "Member 'FBloomParams::Bloom4Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom5Tint) == 0x000068, "Member 'FBloomParams::Bloom5Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, Bloom6Tint) == 0x000078, "Member 'FBloomParams::Bloom6Tint' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionScatterDispersion) == 0x000088, "Member 'FBloomParams::BloomConvolutionScatterDispersion' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionSize) == 0x00008C, "Member 'FBloomParams::BloomConvolutionSize' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionTexture) == 0x000090, "Member 'FBloomParams::BloomConvolutionTexture' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionCenterUV) == 0x000098, "Member 'FBloomParams::BloomConvolutionCenterUV' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionPreFilterMin) == 0x0000A8, "Member 'FBloomParams::BloomConvolutionPreFilterMin' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionPreFilterMax) == 0x0000AC, "Member 'FBloomParams::BloomConvolutionPreFilterMax' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionPreFilterMult) == 0x0000B0, "Member 'FBloomParams::BloomConvolutionPreFilterMult' has a wrong offset!");
static_assert(offsetof(FBloomParams, BloomConvolutionBufferScale) == 0x0000B4, "Member 'FBloomParams::BloomConvolutionBufferScale' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ExposureParams
// 0x0058 (0x0058 - 0x0000)
struct FExposureParams final
{
public:
	float                                         AutoExposureBias;                                  // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AutoExposureApplyPhysicalCameraExposure : 1;       // 0x0004(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            AutoExposureBiasCurve;                             // 0x0008(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture*                               AutoExposureMeterMask;                             // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureLowPercent;                            // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureHighPercent;                           // 0x001C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureMinBrightness;                         // 0x0020(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureMaxBrightness;                         // 0x0024(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureSpeedUp;                               // 0x0028(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoExposureSpeedDown;                             // 0x002C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistogramLogMin;                                   // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HistogramLogMax;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureHighlightContrastScale;               // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureShadowContrastScale;                  // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureDetailStrength;                       // 0x0040(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureBlurredLuminanceBlend;                // 0x0044(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureBlurredLuminanceKernelSizePercent;    // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LocalExposureMiddleGreyBias;                       // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAutoExposureMethod                           AutoExposureMethod;                                // 0x0050(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExposureParams) == 0x000008, "Wrong alignment on FExposureParams");
static_assert(sizeof(FExposureParams) == 0x000058, "Wrong size on FExposureParams");
static_assert(offsetof(FExposureParams, AutoExposureBias) == 0x000000, "Member 'FExposureParams::AutoExposureBias' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureBiasCurve) == 0x000008, "Member 'FExposureParams::AutoExposureBiasCurve' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureMeterMask) == 0x000010, "Member 'FExposureParams::AutoExposureMeterMask' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureLowPercent) == 0x000018, "Member 'FExposureParams::AutoExposureLowPercent' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureHighPercent) == 0x00001C, "Member 'FExposureParams::AutoExposureHighPercent' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureMinBrightness) == 0x000020, "Member 'FExposureParams::AutoExposureMinBrightness' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureMaxBrightness) == 0x000024, "Member 'FExposureParams::AutoExposureMaxBrightness' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureSpeedUp) == 0x000028, "Member 'FExposureParams::AutoExposureSpeedUp' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureSpeedDown) == 0x00002C, "Member 'FExposureParams::AutoExposureSpeedDown' has a wrong offset!");
static_assert(offsetof(FExposureParams, HistogramLogMin) == 0x000030, "Member 'FExposureParams::HistogramLogMin' has a wrong offset!");
static_assert(offsetof(FExposureParams, HistogramLogMax) == 0x000034, "Member 'FExposureParams::HistogramLogMax' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureHighlightContrastScale) == 0x000038, "Member 'FExposureParams::LocalExposureHighlightContrastScale' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureShadowContrastScale) == 0x00003C, "Member 'FExposureParams::LocalExposureShadowContrastScale' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureDetailStrength) == 0x000040, "Member 'FExposureParams::LocalExposureDetailStrength' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureBlurredLuminanceBlend) == 0x000044, "Member 'FExposureParams::LocalExposureBlurredLuminanceBlend' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureBlurredLuminanceKernelSizePercent) == 0x000048, "Member 'FExposureParams::LocalExposureBlurredLuminanceKernelSizePercent' has a wrong offset!");
static_assert(offsetof(FExposureParams, LocalExposureMiddleGreyBias) == 0x00004C, "Member 'FExposureParams::LocalExposureMiddleGreyBias' has a wrong offset!");
static_assert(offsetof(FExposureParams, AutoExposureMethod) == 0x000050, "Member 'FExposureParams::AutoExposureMethod' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ChromaticAberrationParams
// 0x0008 (0x0008 - 0x0000)
struct FChromaticAberrationParams final
{
public:
	float                                         SceneFringeIntensity;                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChromaticAberrationStartOffset;                    // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChromaticAberrationParams) == 0x000004, "Wrong alignment on FChromaticAberrationParams");
static_assert(sizeof(FChromaticAberrationParams) == 0x000008, "Wrong size on FChromaticAberrationParams");
static_assert(offsetof(FChromaticAberrationParams, SceneFringeIntensity) == 0x000000, "Member 'FChromaticAberrationParams::SceneFringeIntensity' has a wrong offset!");
static_assert(offsetof(FChromaticAberrationParams, ChromaticAberrationStartOffset) == 0x000004, "Member 'FChromaticAberrationParams::ChromaticAberrationStartOffset' has a wrong offset!");

// ScriptStruct GraphicsExtensions.ColorGradingParams
// 0x02D0 (0x02D0 - 0x0000)
struct FColorGradingParams final
{
public:
	ETemperatureMethod                            TemperatureType;                                   // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WhiteTemp;                                         // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WhiteTint;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector4                               ColorSaturation;                                   // 0x0010(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrast;                                     // 0x0030(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGamma;                                        // 0x0050(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGain;                                         // 0x0070(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffset;                                       // 0x0090(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationShadows;                            // 0x00B0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastShadows;                              // 0x00D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaShadows;                                 // 0x00F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainShadows;                                  // 0x0110(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetShadows;                                // 0x0130(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationMidtones;                           // 0x0150(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastMidtones;                             // 0x0170(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaMidtones;                                // 0x0190(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainMidtones;                                 // 0x01B0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetMidtones;                               // 0x01D0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorSaturationHighlights;                         // 0x01F0(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorContrastHighlights;                           // 0x0210(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGammaHighlights;                              // 0x0230(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorGainHighlights;                               // 0x0250(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector4                               ColorOffsetHighlights;                             // 0x0270(0x0020)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionHighlightsMin;                      // 0x0290(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionHighlightsMax;                      // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorCorrectionShadowsMax;                         // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlueCorrection;                                    // 0x029C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpandGamut;                                       // 0x02A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToneCurveAmount;                                   // 0x02A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           SceneColorTint;                                    // 0x02A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ColorGradingIntensity;                             // 0x02B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               ColorGradingLUT;                                   // 0x02C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x8];                                      // 0x02C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FColorGradingParams) == 0x000010, "Wrong alignment on FColorGradingParams");
static_assert(sizeof(FColorGradingParams) == 0x0002D0, "Wrong size on FColorGradingParams");
static_assert(offsetof(FColorGradingParams, TemperatureType) == 0x000000, "Member 'FColorGradingParams::TemperatureType' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, WhiteTemp) == 0x000004, "Member 'FColorGradingParams::WhiteTemp' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, WhiteTint) == 0x000008, "Member 'FColorGradingParams::WhiteTint' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorSaturation) == 0x000010, "Member 'FColorGradingParams::ColorSaturation' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorContrast) == 0x000030, "Member 'FColorGradingParams::ColorContrast' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGamma) == 0x000050, "Member 'FColorGradingParams::ColorGamma' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGain) == 0x000070, "Member 'FColorGradingParams::ColorGain' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorOffset) == 0x000090, "Member 'FColorGradingParams::ColorOffset' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorSaturationShadows) == 0x0000B0, "Member 'FColorGradingParams::ColorSaturationShadows' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorContrastShadows) == 0x0000D0, "Member 'FColorGradingParams::ColorContrastShadows' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGammaShadows) == 0x0000F0, "Member 'FColorGradingParams::ColorGammaShadows' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGainShadows) == 0x000110, "Member 'FColorGradingParams::ColorGainShadows' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorOffsetShadows) == 0x000130, "Member 'FColorGradingParams::ColorOffsetShadows' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorSaturationMidtones) == 0x000150, "Member 'FColorGradingParams::ColorSaturationMidtones' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorContrastMidtones) == 0x000170, "Member 'FColorGradingParams::ColorContrastMidtones' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGammaMidtones) == 0x000190, "Member 'FColorGradingParams::ColorGammaMidtones' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGainMidtones) == 0x0001B0, "Member 'FColorGradingParams::ColorGainMidtones' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorOffsetMidtones) == 0x0001D0, "Member 'FColorGradingParams::ColorOffsetMidtones' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorSaturationHighlights) == 0x0001F0, "Member 'FColorGradingParams::ColorSaturationHighlights' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorContrastHighlights) == 0x000210, "Member 'FColorGradingParams::ColorContrastHighlights' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGammaHighlights) == 0x000230, "Member 'FColorGradingParams::ColorGammaHighlights' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGainHighlights) == 0x000250, "Member 'FColorGradingParams::ColorGainHighlights' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorOffsetHighlights) == 0x000270, "Member 'FColorGradingParams::ColorOffsetHighlights' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorCorrectionHighlightsMin) == 0x000290, "Member 'FColorGradingParams::ColorCorrectionHighlightsMin' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorCorrectionHighlightsMax) == 0x000294, "Member 'FColorGradingParams::ColorCorrectionHighlightsMax' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorCorrectionShadowsMax) == 0x000298, "Member 'FColorGradingParams::ColorCorrectionShadowsMax' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, BlueCorrection) == 0x00029C, "Member 'FColorGradingParams::BlueCorrection' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ExpandGamut) == 0x0002A0, "Member 'FColorGradingParams::ExpandGamut' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ToneCurveAmount) == 0x0002A4, "Member 'FColorGradingParams::ToneCurveAmount' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, SceneColorTint) == 0x0002A8, "Member 'FColorGradingParams::SceneColorTint' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGradingIntensity) == 0x0002B8, "Member 'FColorGradingParams::ColorGradingIntensity' has a wrong offset!");
static_assert(offsetof(FColorGradingParams, ColorGradingLUT) == 0x0002C0, "Member 'FColorGradingParams::ColorGradingLUT' has a wrong offset!");

// ScriptStruct GraphicsExtensions.FilmParams
// 0x0014 (0x0014 - 0x0000)
struct FFilmParams final
{
public:
	float                                         FilmSlope;                                         // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmToe;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmShoulder;                                      // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmBlackClip;                                     // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FilmWhiteClip;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFilmParams) == 0x000004, "Wrong alignment on FFilmParams");
static_assert(sizeof(FFilmParams) == 0x000014, "Wrong size on FFilmParams");
static_assert(offsetof(FFilmParams, FilmSlope) == 0x000000, "Member 'FFilmParams::FilmSlope' has a wrong offset!");
static_assert(offsetof(FFilmParams, FilmToe) == 0x000004, "Member 'FFilmParams::FilmToe' has a wrong offset!");
static_assert(offsetof(FFilmParams, FilmShoulder) == 0x000008, "Member 'FFilmParams::FilmShoulder' has a wrong offset!");
static_assert(offsetof(FFilmParams, FilmBlackClip) == 0x00000C, "Member 'FFilmParams::FilmBlackClip' has a wrong offset!");
static_assert(offsetof(FFilmParams, FilmWhiteClip) == 0x000010, "Member 'FFilmParams::FilmWhiteClip' has a wrong offset!");

// ScriptStruct GraphicsExtensions.GlobalIllumParams
// 0x0014 (0x0014 - 0x0000)
struct FGlobalIllumParams final
{
public:
	struct FLinearColor                           IndirectLightingColor;                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IndirectLightingIntensity;                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGlobalIllumParams) == 0x000004, "Wrong alignment on FGlobalIllumParams");
static_assert(sizeof(FGlobalIllumParams) == 0x000014, "Wrong size on FGlobalIllumParams");
static_assert(offsetof(FGlobalIllumParams, IndirectLightingColor) == 0x000000, "Member 'FGlobalIllumParams::IndirectLightingColor' has a wrong offset!");
static_assert(offsetof(FGlobalIllumParams, IndirectLightingIntensity) == 0x000010, "Member 'FGlobalIllumParams::IndirectLightingIntensity' has a wrong offset!");

// ScriptStruct GraphicsExtensions.PostProcessParams
// 0x0490 (0x0490 - 0x0000)
struct FPostProcessParams final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBloomParams                           Bloom;                                             // 0x0060(0x00B8)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FExposureParams                        Exposure;                                          // 0x0118(0x0058)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FChromaticAberrationParams             ChromaticAberration;                               // 0x0170(0x0008)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColorGradingParams                    ColorGrading;                                      // 0x0180(0x02D0)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FFilmParams                            Film;                                              // 0x0450(0x0014)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	struct FGlobalIllumParams                     GlobalIllumination;                                // 0x0464(0x0014)(Edit, BlueprintVisible, Interp, NoDestructor, NativeAccessSpecifierPublic)
	float                                         VignetteIntensity;                                 // 0x0478(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnabled;                                          // 0x047C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUnbound;                                          // 0x047D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBloomOverrided;                                 // 0x047E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsExposureOverrided;                              // 0x047F(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChromaticOverrided;                             // 0x0480(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsColorGradingOverrided;                          // 0x0481(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsFilmOverrided;                                  // 0x0482(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGIOverrided;                                    // 0x0483(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_484[0xC];                                      // 0x0484(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPostProcessParams) == 0x000010, "Wrong alignment on FPostProcessParams");
static_assert(sizeof(FPostProcessParams) == 0x000490, "Wrong size on FPostProcessParams");
static_assert(offsetof(FPostProcessParams, Transform) == 0x000000, "Member 'FPostProcessParams::Transform' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, Bloom) == 0x000060, "Member 'FPostProcessParams::Bloom' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, Exposure) == 0x000118, "Member 'FPostProcessParams::Exposure' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, ChromaticAberration) == 0x000170, "Member 'FPostProcessParams::ChromaticAberration' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, ColorGrading) == 0x000180, "Member 'FPostProcessParams::ColorGrading' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, Film) == 0x000450, "Member 'FPostProcessParams::Film' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, GlobalIllumination) == 0x000464, "Member 'FPostProcessParams::GlobalIllumination' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, VignetteIntensity) == 0x000478, "Member 'FPostProcessParams::VignetteIntensity' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bEnabled) == 0x00047C, "Member 'FPostProcessParams::bEnabled' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bUnbound) == 0x00047D, "Member 'FPostProcessParams::bUnbound' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsBloomOverrided) == 0x00047E, "Member 'FPostProcessParams::bIsBloomOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsExposureOverrided) == 0x00047F, "Member 'FPostProcessParams::bIsExposureOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsChromaticOverrided) == 0x000480, "Member 'FPostProcessParams::bIsChromaticOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsColorGradingOverrided) == 0x000481, "Member 'FPostProcessParams::bIsColorGradingOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsFilmOverrided) == 0x000482, "Member 'FPostProcessParams::bIsFilmOverrided' has a wrong offset!");
static_assert(offsetof(FPostProcessParams, bIsGIOverrided) == 0x000483, "Member 'FPostProcessParams::bIsGIOverrided' has a wrong offset!");

// ScriptStruct GraphicsExtensions.DirectionalLightParams
// 0x00D0 (0x00D0 - 0x0000)
struct FDirectionalLightParams final
{
public:
	struct FRotator3f                             Orientation;                                       // 0x0000(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceAngle;                                       // 0x0014(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemperature;                                   // 0x0018(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temperature;                                       // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAffectWorld;                                    // 0x0020(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCastShadows;                                    // 0x0021(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDetailMode                                   DetailLevelBeforeCastDynamicShadows;               // 0x0022(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23[0x1];                                       // 0x0023(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricScatteringIntensity;                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionContribution;                      // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpecularScale;                                     // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowBias;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSlopeBias;                                   // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShadowSharpen;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ContactShadowLength;                               // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContactShadowLengthInWS;                           // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastTranslucentShadows;                            // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastShadowsFromCinematicObjectsOnly;              // 0x0042(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLightingChannels                      LightingChannels;                                  // 0x0043(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, AdvancedDisplay, NativeAccessSpecifierPublic)
	bool                                          CastStaticShadows;                                 // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastDynamicShadows;                                // 0x0045(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CascadeShadowMapQualityReductionBHVR;              // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectTranslucentLighting;                        // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransmission;                                     // 0x004D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCastVolumetricShadow;                             // 0x004E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x004F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInGame;                                     // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleInReflectionCaptures;                      // 0x0051(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftOcclusion;                        // 0x0052(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OcclusionMaskDarkness;                             // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OcclusionDepthRange;                               // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLightShaftBloom;                            // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BloomScale;                                        // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomThreshold;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloomMaxBrightness;                                // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 BloomTint;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightShaftOverrideDirection;                       // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicShadowDistanceMovableLight;                 // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicShadowCascades;                             // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CascadeDistributionExponent;                       // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDrawDistance;                                   // 0x0094(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceFadeRange;                              // 0x0098(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     LightFunctionMaterial;                             // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LightFunctionScale;                                // 0x00A8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LightFunctionFadeDistance;                         // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisabledBrightness;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailModeBitMask;                                 // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDirectionalLightParams) == 0x000008, "Wrong alignment on FDirectionalLightParams");
static_assert(sizeof(FDirectionalLightParams) == 0x0000D0, "Wrong size on FDirectionalLightParams");
static_assert(offsetof(FDirectionalLightParams, Orientation) == 0x000000, "Member 'FDirectionalLightParams::Orientation' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, Intensity) == 0x00000C, "Member 'FDirectionalLightParams::Intensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, Color) == 0x000010, "Member 'FDirectionalLightParams::Color' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, SourceAngle) == 0x000014, "Member 'FDirectionalLightParams::SourceAngle' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bUseTemperature) == 0x000018, "Member 'FDirectionalLightParams::bUseTemperature' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, Temperature) == 0x00001C, "Member 'FDirectionalLightParams::Temperature' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bIsAffectWorld) == 0x000020, "Member 'FDirectionalLightParams::bIsAffectWorld' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bIsCastShadows) == 0x000021, "Member 'FDirectionalLightParams::bIsCastShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DetailLevelBeforeCastDynamicShadows) == 0x000022, "Member 'FDirectionalLightParams::DetailLevelBeforeCastDynamicShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, VolumetricScatteringIntensity) == 0x000024, "Member 'FDirectionalLightParams::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, AmbientOcclusionContribution) == 0x000028, "Member 'FDirectionalLightParams::AmbientOcclusionContribution' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, SpecularScale) == 0x00002C, "Member 'FDirectionalLightParams::SpecularScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ShadowBias) == 0x000030, "Member 'FDirectionalLightParams::ShadowBias' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ShadowSlopeBias) == 0x000034, "Member 'FDirectionalLightParams::ShadowSlopeBias' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ShadowSharpen) == 0x000038, "Member 'FDirectionalLightParams::ShadowSharpen' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ContactShadowLength) == 0x00003C, "Member 'FDirectionalLightParams::ContactShadowLength' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, ContactShadowLengthInWS) == 0x000040, "Member 'FDirectionalLightParams::ContactShadowLengthInWS' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CastTranslucentShadows) == 0x000041, "Member 'FDirectionalLightParams::CastTranslucentShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bCastShadowsFromCinematicObjectsOnly) == 0x000042, "Member 'FDirectionalLightParams::bCastShadowsFromCinematicObjectsOnly' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightingChannels) == 0x000043, "Member 'FDirectionalLightParams::LightingChannels' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CastStaticShadows) == 0x000044, "Member 'FDirectionalLightParams::CastStaticShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CastDynamicShadows) == 0x000045, "Member 'FDirectionalLightParams::CastDynamicShadows' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CascadeShadowMapQualityReductionBHVR) == 0x000048, "Member 'FDirectionalLightParams::CascadeShadowMapQualityReductionBHVR' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bAffectTranslucentLighting) == 0x00004C, "Member 'FDirectionalLightParams::bAffectTranslucentLighting' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bTransmission) == 0x00004D, "Member 'FDirectionalLightParams::bTransmission' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bCastVolumetricShadow) == 0x00004E, "Member 'FDirectionalLightParams::bCastVolumetricShadow' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bIsVisible) == 0x00004F, "Member 'FDirectionalLightParams::bIsVisible' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bHiddenInGame) == 0x000050, "Member 'FDirectionalLightParams::bHiddenInGame' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bVisibleInReflectionCaptures) == 0x000051, "Member 'FDirectionalLightParams::bVisibleInReflectionCaptures' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bEnableLightShaftOcclusion) == 0x000052, "Member 'FDirectionalLightParams::bEnableLightShaftOcclusion' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, OcclusionMaskDarkness) == 0x000054, "Member 'FDirectionalLightParams::OcclusionMaskDarkness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, OcclusionDepthRange) == 0x000058, "Member 'FDirectionalLightParams::OcclusionDepthRange' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, bEnableLightShaftBloom) == 0x00005C, "Member 'FDirectionalLightParams::bEnableLightShaftBloom' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, BloomScale) == 0x000060, "Member 'FDirectionalLightParams::BloomScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, BloomThreshold) == 0x000064, "Member 'FDirectionalLightParams::BloomThreshold' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, BloomMaxBrightness) == 0x000068, "Member 'FDirectionalLightParams::BloomMaxBrightness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, BloomTint) == 0x00006C, "Member 'FDirectionalLightParams::BloomTint' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightShaftOverrideDirection) == 0x000070, "Member 'FDirectionalLightParams::LightShaftOverrideDirection' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DynamicShadowDistanceMovableLight) == 0x000088, "Member 'FDirectionalLightParams::DynamicShadowDistanceMovableLight' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DynamicShadowCascades) == 0x00008C, "Member 'FDirectionalLightParams::DynamicShadowCascades' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, CascadeDistributionExponent) == 0x000090, "Member 'FDirectionalLightParams::CascadeDistributionExponent' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, MaxDrawDistance) == 0x000094, "Member 'FDirectionalLightParams::MaxDrawDistance' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, MaxDistanceFadeRange) == 0x000098, "Member 'FDirectionalLightParams::MaxDistanceFadeRange' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightFunctionMaterial) == 0x0000A0, "Member 'FDirectionalLightParams::LightFunctionMaterial' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightFunctionScale) == 0x0000A8, "Member 'FDirectionalLightParams::LightFunctionScale' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, LightFunctionFadeDistance) == 0x0000C0, "Member 'FDirectionalLightParams::LightFunctionFadeDistance' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DisabledBrightness) == 0x0000C4, "Member 'FDirectionalLightParams::DisabledBrightness' has a wrong offset!");
static_assert(offsetof(FDirectionalLightParams, DetailModeBitMask) == 0x0000C8, "Member 'FDirectionalLightParams::DetailModeBitMask' has a wrong offset!");

// ScriptStruct GraphicsExtensions.AdaptiveShadowMapParams
// 0x0018 (0x0018 - 0x0000)
struct FAdaptiveShadowMapParams final
{
public:
	int32                                         Levels;                                            // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreGeneratedLevels;                                // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAutoRadius;                                    // 0x0008(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthMin;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthMax;                                          // 0x0014(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAdaptiveShadowMapParams) == 0x000004, "Wrong alignment on FAdaptiveShadowMapParams");
static_assert(sizeof(FAdaptiveShadowMapParams) == 0x000018, "Wrong size on FAdaptiveShadowMapParams");
static_assert(offsetof(FAdaptiveShadowMapParams, Levels) == 0x000000, "Member 'FAdaptiveShadowMapParams::Levels' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, PreGeneratedLevels) == 0x000004, "Member 'FAdaptiveShadowMapParams::PreGeneratedLevels' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, bUseAutoRadius) == 0x000008, "Member 'FAdaptiveShadowMapParams::bUseAutoRadius' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, Radius) == 0x00000C, "Member 'FAdaptiveShadowMapParams::Radius' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, DepthMin) == 0x000010, "Member 'FAdaptiveShadowMapParams::DepthMin' has a wrong offset!");
static_assert(offsetof(FAdaptiveShadowMapParams, DepthMax) == 0x000014, "Member 'FAdaptiveShadowMapParams::DepthMax' has a wrong offset!");

// ScriptStruct GraphicsExtensions.SkylightParams
// 0x00B0 (0x00B0 - 0x0000)
struct FSkylightParams final
{
public:
	struct FTransform                             Transform;                                         // 0x0000(0x0060)(Edit, BlueprintVisible, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Intensity;                                         // 0x0060(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureCube*                           Cubemap;                                           // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SourceCubemapAngle;                                // 0x0078(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SkyDistanceThreshold;                              // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectsWorld;                                     // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CastShadows;                                       // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_82[0x2];                                       // 0x0082(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricScatteringIntensity;                     // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbientOcclusionContribution;                      // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLowerHemisphereIsBlack;                           // 0x008C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D[0x3];                                       // 0x008D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           LowerHemisphereColor;                              // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAffectTranslucentLighting;                        // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTransmission;                                     // 0x00A1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x00A2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInGame;                                     // 0x00A3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DetailModeBitMask;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x8];                                       // 0x00A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSkylightParams) == 0x000010, "Wrong alignment on FSkylightParams");
static_assert(sizeof(FSkylightParams) == 0x0000B0, "Wrong size on FSkylightParams");
static_assert(offsetof(FSkylightParams, Transform) == 0x000000, "Member 'FSkylightParams::Transform' has a wrong offset!");
static_assert(offsetof(FSkylightParams, Intensity) == 0x000060, "Member 'FSkylightParams::Intensity' has a wrong offset!");
static_assert(offsetof(FSkylightParams, Color) == 0x000064, "Member 'FSkylightParams::Color' has a wrong offset!");
static_assert(offsetof(FSkylightParams, Cubemap) == 0x000070, "Member 'FSkylightParams::Cubemap' has a wrong offset!");
static_assert(offsetof(FSkylightParams, SourceCubemapAngle) == 0x000078, "Member 'FSkylightParams::SourceCubemapAngle' has a wrong offset!");
static_assert(offsetof(FSkylightParams, SkyDistanceThreshold) == 0x00007C, "Member 'FSkylightParams::SkyDistanceThreshold' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bAffectsWorld) == 0x000080, "Member 'FSkylightParams::bAffectsWorld' has a wrong offset!");
static_assert(offsetof(FSkylightParams, CastShadows) == 0x000081, "Member 'FSkylightParams::CastShadows' has a wrong offset!");
static_assert(offsetof(FSkylightParams, VolumetricScatteringIntensity) == 0x000084, "Member 'FSkylightParams::VolumetricScatteringIntensity' has a wrong offset!");
static_assert(offsetof(FSkylightParams, AmbientOcclusionContribution) == 0x000088, "Member 'FSkylightParams::AmbientOcclusionContribution' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bLowerHemisphereIsBlack) == 0x00008C, "Member 'FSkylightParams::bLowerHemisphereIsBlack' has a wrong offset!");
static_assert(offsetof(FSkylightParams, LowerHemisphereColor) == 0x000090, "Member 'FSkylightParams::LowerHemisphereColor' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bAffectTranslucentLighting) == 0x0000A0, "Member 'FSkylightParams::bAffectTranslucentLighting' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bTransmission) == 0x0000A1, "Member 'FSkylightParams::bTransmission' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bIsVisible) == 0x0000A2, "Member 'FSkylightParams::bIsVisible' has a wrong offset!");
static_assert(offsetof(FSkylightParams, bHiddenInGame) == 0x0000A3, "Member 'FSkylightParams::bHiddenInGame' has a wrong offset!");
static_assert(offsetof(FSkylightParams, DetailModeBitMask) == 0x0000A4, "Member 'FSkylightParams::DetailModeBitMask' has a wrong offset!");

// ScriptStruct GraphicsExtensions.SkyDomeParams
// 0x0018 (0x0018 - 0x0000)
struct FSkyDomeParams final
{
public:
	class UStaticMesh*                            SphereDome;                                        // 0x0000(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Scaling;                                           // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     Material;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSkyDomeParams) == 0x000008, "Wrong alignment on FSkyDomeParams");
static_assert(sizeof(FSkyDomeParams) == 0x000018, "Wrong size on FSkyDomeParams");
static_assert(offsetof(FSkyDomeParams, SphereDome) == 0x000000, "Member 'FSkyDomeParams::SphereDome' has a wrong offset!");
static_assert(offsetof(FSkyDomeParams, Scaling) == 0x000008, "Member 'FSkyDomeParams::Scaling' has a wrong offset!");
static_assert(offsetof(FSkyDomeParams, Material) == 0x000010, "Member 'FSkyDomeParams::Material' has a wrong offset!");

// ScriptStruct GraphicsExtensions.FogParams
// 0x0080 (0x0080 - 0x0000)
struct FFogParams final
{
public:
	struct FVector3f                              Position;                                          // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogDensity;                                        // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeightFallOff;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FExponentialHeightFogData              SecondFogData;                                     // 0x0014(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FColor                                 InscatteringColor;                                 // 0x0020(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FogMaxOpacity;                                     // 0x0024(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringExponent;                   // 0x0028(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DirectionalInscatteringStartDistance;              // 0x002C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           DirectionalInscatteringLuminance;                  // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVolumetricFog;                              // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VolumetricFogScatteringDistribution;               // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 VolumetricFogAlbedo;                               // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           VolumetricFogEmissive;                             // 0x004C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogExtinctionScale;                      // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogDistance;                             // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogStartDistance;                        // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumetricFogNearFadeInDistance;                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLightColorsWithFogInscatteringColors;     // 0x006C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideDensityAndDistanceParametersWithDensityCurve; // 0x006D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E[0x2];                                       // 0x006E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DensityCurve;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Interp, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenInGame;                                     // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DetailModeBitMask;                                 // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFogParams) == 0x000008, "Wrong alignment on FFogParams");
static_assert(sizeof(FFogParams) == 0x000080, "Wrong size on FFogParams");
static_assert(offsetof(FFogParams, Position) == 0x000000, "Member 'FFogParams::Position' has a wrong offset!");
static_assert(offsetof(FFogParams, FogDensity) == 0x00000C, "Member 'FFogParams::FogDensity' has a wrong offset!");
static_assert(offsetof(FFogParams, HeightFallOff) == 0x000010, "Member 'FFogParams::HeightFallOff' has a wrong offset!");
static_assert(offsetof(FFogParams, SecondFogData) == 0x000014, "Member 'FFogParams::SecondFogData' has a wrong offset!");
static_assert(offsetof(FFogParams, InscatteringColor) == 0x000020, "Member 'FFogParams::InscatteringColor' has a wrong offset!");
static_assert(offsetof(FFogParams, FogMaxOpacity) == 0x000024, "Member 'FFogParams::FogMaxOpacity' has a wrong offset!");
static_assert(offsetof(FFogParams, DirectionalInscatteringExponent) == 0x000028, "Member 'FFogParams::DirectionalInscatteringExponent' has a wrong offset!");
static_assert(offsetof(FFogParams, DirectionalInscatteringStartDistance) == 0x00002C, "Member 'FFogParams::DirectionalInscatteringStartDistance' has a wrong offset!");
static_assert(offsetof(FFogParams, DirectionalInscatteringLuminance) == 0x000030, "Member 'FFogParams::DirectionalInscatteringLuminance' has a wrong offset!");
static_assert(offsetof(FFogParams, bEnableVolumetricFog) == 0x000040, "Member 'FFogParams::bEnableVolumetricFog' has a wrong offset!");
static_assert(offsetof(FFogParams, VolumetricFogScatteringDistribution) == 0x000044, "Member 'FFogParams::VolumetricFogScatteringDistribution' has a wrong offset!");
static_assert(offsetof(FFogParams, VolumetricFogAlbedo) == 0x000048, "Member 'FFogParams::VolumetricFogAlbedo' has a wrong offset!");
static_assert(offsetof(FFogParams, VolumetricFogEmissive) == 0x00004C, "Member 'FFogParams::VolumetricFogEmissive' has a wrong offset!");
static_assert(offsetof(FFogParams, VolumetricFogExtinctionScale) == 0x00005C, "Member 'FFogParams::VolumetricFogExtinctionScale' has a wrong offset!");
static_assert(offsetof(FFogParams, VolumetricFogDistance) == 0x000060, "Member 'FFogParams::VolumetricFogDistance' has a wrong offset!");
static_assert(offsetof(FFogParams, VolumetricFogStartDistance) == 0x000064, "Member 'FFogParams::VolumetricFogStartDistance' has a wrong offset!");
static_assert(offsetof(FFogParams, VolumetricFogNearFadeInDistance) == 0x000068, "Member 'FFogParams::VolumetricFogNearFadeInDistance' has a wrong offset!");
static_assert(offsetof(FFogParams, bOverrideLightColorsWithFogInscatteringColors) == 0x00006C, "Member 'FFogParams::bOverrideLightColorsWithFogInscatteringColors' has a wrong offset!");
static_assert(offsetof(FFogParams, bOverrideDensityAndDistanceParametersWithDensityCurve) == 0x00006D, "Member 'FFogParams::bOverrideDensityAndDistanceParametersWithDensityCurve' has a wrong offset!");
static_assert(offsetof(FFogParams, DensityCurve) == 0x000070, "Member 'FFogParams::DensityCurve' has a wrong offset!");
static_assert(offsetof(FFogParams, bIsVisible) == 0x000078, "Member 'FFogParams::bIsVisible' has a wrong offset!");
static_assert(offsetof(FFogParams, bHiddenInGame) == 0x000079, "Member 'FFogParams::bHiddenInGame' has a wrong offset!");
static_assert(offsetof(FFogParams, DetailModeBitMask) == 0x00007C, "Member 'FFogParams::DetailModeBitMask' has a wrong offset!");

// ScriptStruct GraphicsExtensions.DBDCullDistanceVolumeParams
// 0x0018 (0x0018 - 0x0000)
struct FDBDCullDistanceVolumeParams final
{
public:
	TArray<struct FDBDCullDistanceSizePair>       CullDistances;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DetailModeBitMask;                                 // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDBDCullDistanceVolumeParams) == 0x000008, "Wrong alignment on FDBDCullDistanceVolumeParams");
static_assert(sizeof(FDBDCullDistanceVolumeParams) == 0x000018, "Wrong size on FDBDCullDistanceVolumeParams");
static_assert(offsetof(FDBDCullDistanceVolumeParams, CullDistances) == 0x000000, "Member 'FDBDCullDistanceVolumeParams::CullDistances' has a wrong offset!");
static_assert(offsetof(FDBDCullDistanceVolumeParams, DetailModeBitMask) == 0x000010, "Member 'FDBDCullDistanceVolumeParams::DetailModeBitMask' has a wrong offset!");

// ScriptStruct GraphicsExtensions.WeatherParams
// 0x0014 (0x0014 - 0x0000)
struct FWeatherParams final
{
public:
	struct FVector3f                              WindDirection;                                     // 0x0000(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindStrength;                                      // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WindSpeed;                                         // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FWeatherParams) == 0x000004, "Wrong alignment on FWeatherParams");
static_assert(sizeof(FWeatherParams) == 0x000014, "Wrong size on FWeatherParams");
static_assert(offsetof(FWeatherParams, WindDirection) == 0x000000, "Member 'FWeatherParams::WindDirection' has a wrong offset!");
static_assert(offsetof(FWeatherParams, WindStrength) == 0x00000C, "Member 'FWeatherParams::WindStrength' has a wrong offset!");
static_assert(offsetof(FWeatherParams, WindSpeed) == 0x000010, "Member 'FWeatherParams::WindSpeed' has a wrong offset!");

// ScriptStruct GraphicsExtensions.AmbianceManagerParams
// 0x0710 (0x0710 - 0x0000)
struct FAmbianceManagerParams final
{
public:
	struct FPostProcessParams                     _postProcessParams;                                // 0x0000(0x0490)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDirectionalLightParams                _directionalLightParams;                           // 0x0490(0x00D0)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSkylightParams                        _skyLightParams;                                   // 0x0560(0x00B0)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FSkyDomeParams                         _skyDomeParams;                                    // 0x0610(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FFogParams                             _fogParams;                                        // 0x0628(0x0080)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FAdaptiveShadowMapParams               _asmParams;                                        // 0x06A8(0x0018)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	struct FDBDCullDistanceVolumeParams           _cullVolumeParams;                                 // 0x06C0(0x0018)(Edit, NativeAccessSpecifierPrivate)
	struct FWeatherParams                         _weatherParams;                                    // 0x06D8(0x0014)(Edit, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         _transitionDuration;                               // 0x06EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCurveFloat*                            _transitionCurve;                                  // 0x06F0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsPostProcessOverrided;                          // 0x06F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsDirectionalLightOverrided;                     // 0x06F9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsSkyLightOverrided;                             // 0x06FA(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsSkyDomeOverrided;                              // 0x06FB(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsFogOverrided;                                  // 0x06FC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsASMOverrided;                                  // 0x06FD(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsCullVolumeOverrided;                           // 0x06FE(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          _bIsWeatherOverrided;                              // 0x06FF(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_700[0x10];                                     // 0x0700(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FAmbianceManagerParams) == 0x000010, "Wrong alignment on FAmbianceManagerParams");
static_assert(sizeof(FAmbianceManagerParams) == 0x000710, "Wrong size on FAmbianceManagerParams");
static_assert(offsetof(FAmbianceManagerParams, _postProcessParams) == 0x000000, "Member 'FAmbianceManagerParams::_postProcessParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _directionalLightParams) == 0x000490, "Member 'FAmbianceManagerParams::_directionalLightParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _skyLightParams) == 0x000560, "Member 'FAmbianceManagerParams::_skyLightParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _skyDomeParams) == 0x000610, "Member 'FAmbianceManagerParams::_skyDomeParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _fogParams) == 0x000628, "Member 'FAmbianceManagerParams::_fogParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _asmParams) == 0x0006A8, "Member 'FAmbianceManagerParams::_asmParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _cullVolumeParams) == 0x0006C0, "Member 'FAmbianceManagerParams::_cullVolumeParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _weatherParams) == 0x0006D8, "Member 'FAmbianceManagerParams::_weatherParams' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _transitionDuration) == 0x0006EC, "Member 'FAmbianceManagerParams::_transitionDuration' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _transitionCurve) == 0x0006F0, "Member 'FAmbianceManagerParams::_transitionCurve' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsPostProcessOverrided) == 0x0006F8, "Member 'FAmbianceManagerParams::_bIsPostProcessOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsDirectionalLightOverrided) == 0x0006F9, "Member 'FAmbianceManagerParams::_bIsDirectionalLightOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsSkyLightOverrided) == 0x0006FA, "Member 'FAmbianceManagerParams::_bIsSkyLightOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsSkyDomeOverrided) == 0x0006FB, "Member 'FAmbianceManagerParams::_bIsSkyDomeOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsFogOverrided) == 0x0006FC, "Member 'FAmbianceManagerParams::_bIsFogOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsASMOverrided) == 0x0006FD, "Member 'FAmbianceManagerParams::_bIsASMOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsCullVolumeOverrided) == 0x0006FE, "Member 'FAmbianceManagerParams::_bIsCullVolumeOverrided' has a wrong offset!");
static_assert(offsetof(FAmbianceManagerParams, _bIsWeatherOverrided) == 0x0006FF, "Member 'FAmbianceManagerParams::_bIsWeatherOverrided' has a wrong offset!");

// ScriptStruct GraphicsExtensions.GMAmbianceTagPriority
// 0x0010 (0x0018 - 0x0008)
struct FGMAmbianceTagPriority final : public FTableRowBase
{
public:
	struct FGameplayTag                           AmbianceType;                                      // 0x0008(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGMAmbianceTagPriority) == 0x000008, "Wrong alignment on FGMAmbianceTagPriority");
static_assert(sizeof(FGMAmbianceTagPriority) == 0x000018, "Wrong size on FGMAmbianceTagPriority");
static_assert(offsetof(FGMAmbianceTagPriority, AmbianceType) == 0x000008, "Member 'FGMAmbianceTagPriority::AmbianceType' has a wrong offset!");

}

