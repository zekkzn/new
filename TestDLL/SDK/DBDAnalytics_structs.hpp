#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDAnalytics

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "BHVRAnalytics_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum DBDAnalytics.EDBDAnalyticsGameMode
// NumValues: 0x0009
enum class EDBDAnalyticsGameMode : uint8
{
	AnalyticsServer                          = 0,
	AnalyticsClient                          = 1,
	AnalyticsLoading                         = 2,
	AnalyticsLobby                           = 3,
	AnalyticsMenu                            = 4,
	AnalyticsPostGame                        = 5,
	AnalyticsPerfTests                       = 6,
	AnalyticsSplashScreen                    = 7,
	EDBDAnalyticsGameMode_MAX                = 8,
};

// Enum DBDAnalytics.EHatchStatus
// NumValues: 0x0006
enum class EHatchStatus : uint8
{
	Hidden                                   = 0,
	Visible                                  = 1,
	Open                                     = 2,
	Closed                                   = 3,
	ClosedOrHidden                           = 4,
	EHatchStatus_MAX                         = 5,
};

// Enum DBDAnalytics.EDoorStatus
// NumValues: 0x0004
enum class EDoorStatus : uint8
{
	Closed                                   = 0,
	Powered                                  = 1,
	Open                                     = 2,
	EDoorStatus_MAX                          = 3,
};

// Enum DBDAnalytics.EHealthStatus
// NumValues: 0x0005
enum class EHealthStatus : uint8
{
	Healthy                                  = 0,
	Wounded                                  = 1,
	DeepWounded                              = 2,
	Dying                                    = 3,
	EHealthStatus_MAX                        = 4,
};

// Enum DBDAnalytics.ECharacterStatus
// NumValues: 0x000B
enum class ECharacterStatus : uint8
{
	Crawling                                 = 0,
	BeingPickedUp                            = 1,
	BeingCarried                             = 2,
	BeingHealed                              = 3,
	BeingMended                              = 4,
	BeingPutDown                             = 5,
	BeingPutOnHook                           = 6,
	BeingPulledFromCloset                    = 7,
	BeingKilled                              = 8,
	OnHook                                   = 9,
	ECharacterStatus_MAX                     = 10,
};

// ScriptStruct DBDAnalytics.UniquelyIdentifiedAnalytic
// 0x00A0 (0x00B8 - 0x0018)
struct FUniquelyIdentifiedAnalytic : public FBaseSingleStructIndexAnalytics
{
public:
	class FString                                 Version;                                           // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Branch;                                            // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Changelist;                                        // 0x0038(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Configuration;                                     // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MirrorsId;                                         // 0x0058(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientId;                                          // 0x0068(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Platform;                                          // 0x0078(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BackendEnv;                                        // 0x0088(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DataContentVersion;                                // 0x0098(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RunContext;                                        // 0x00A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUniquelyIdentifiedAnalytic) == 0x000008, "Wrong alignment on FUniquelyIdentifiedAnalytic");
static_assert(sizeof(FUniquelyIdentifiedAnalytic) == 0x0000B8, "Wrong size on FUniquelyIdentifiedAnalytic");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, Version) == 0x000018, "Member 'FUniquelyIdentifiedAnalytic::Version' has a wrong offset!");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, Branch) == 0x000028, "Member 'FUniquelyIdentifiedAnalytic::Branch' has a wrong offset!");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, Changelist) == 0x000038, "Member 'FUniquelyIdentifiedAnalytic::Changelist' has a wrong offset!");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, Configuration) == 0x000048, "Member 'FUniquelyIdentifiedAnalytic::Configuration' has a wrong offset!");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, MirrorsId) == 0x000058, "Member 'FUniquelyIdentifiedAnalytic::MirrorsId' has a wrong offset!");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, ClientId) == 0x000068, "Member 'FUniquelyIdentifiedAnalytic::ClientId' has a wrong offset!");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, Platform) == 0x000078, "Member 'FUniquelyIdentifiedAnalytic::Platform' has a wrong offset!");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, BackendEnv) == 0x000088, "Member 'FUniquelyIdentifiedAnalytic::BackendEnv' has a wrong offset!");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, DataContentVersion) == 0x000098, "Member 'FUniquelyIdentifiedAnalytic::DataContentVersion' has a wrong offset!");
static_assert(offsetof(FUniquelyIdentifiedAnalytic, RunContext) == 0x0000A8, "Member 'FUniquelyIdentifiedAnalytic::RunContext' has a wrong offset!");

// ScriptStruct DBDAnalytics.ChatAnalytics
// 0x0070 (0x0128 - 0x00B8)
struct FChatAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 SenderMirrorsId;                                   // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderPlayerName;                                  // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatContent;                                       // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OriginalChatContent;                               // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ChatContext;                                       // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InGameTimestamp;                                   // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChatAnalytics) == 0x000008, "Wrong alignment on FChatAnalytics");
static_assert(sizeof(FChatAnalytics) == 0x000128, "Wrong size on FChatAnalytics");
static_assert(offsetof(FChatAnalytics, SenderMirrorsId) == 0x0000B8, "Member 'FChatAnalytics::SenderMirrorsId' has a wrong offset!");
static_assert(offsetof(FChatAnalytics, SenderPlayerName) == 0x0000C8, "Member 'FChatAnalytics::SenderPlayerName' has a wrong offset!");
static_assert(offsetof(FChatAnalytics, MatchID) == 0x0000D8, "Member 'FChatAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FChatAnalytics, ChatContent) == 0x0000E8, "Member 'FChatAnalytics::ChatContent' has a wrong offset!");
static_assert(offsetof(FChatAnalytics, OriginalChatContent) == 0x0000F8, "Member 'FChatAnalytics::OriginalChatContent' has a wrong offset!");
static_assert(offsetof(FChatAnalytics, ChatContext) == 0x000108, "Member 'FChatAnalytics::ChatContext' has a wrong offset!");
static_assert(offsetof(FChatAnalytics, InGameTimestamp) == 0x000118, "Member 'FChatAnalytics::InGameTimestamp' has a wrong offset!");

// ScriptStruct DBDAnalytics.LevelLoadingStepAnalytics
// 0x0048 (0x0100 - 0x00B8)
struct FLevelLoadingStepAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeElapsed;                                       // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeElapsedInStep;                                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoadingStep;                                       // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTimeout;                                         // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FLevelLoadingStepAnalytics) == 0x000008, "Wrong alignment on FLevelLoadingStepAnalytics");
static_assert(sizeof(FLevelLoadingStepAnalytics) == 0x000100, "Wrong size on FLevelLoadingStepAnalytics");
static_assert(offsetof(FLevelLoadingStepAnalytics, MatchID) == 0x0000B8, "Member 'FLevelLoadingStepAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FLevelLoadingStepAnalytics, MapName) == 0x0000C8, "Member 'FLevelLoadingStepAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(FLevelLoadingStepAnalytics, Seed) == 0x0000D8, "Member 'FLevelLoadingStepAnalytics::Seed' has a wrong offset!");
static_assert(offsetof(FLevelLoadingStepAnalytics, TimeElapsed) == 0x0000DC, "Member 'FLevelLoadingStepAnalytics::TimeElapsed' has a wrong offset!");
static_assert(offsetof(FLevelLoadingStepAnalytics, TimeElapsedInStep) == 0x0000E0, "Member 'FLevelLoadingStepAnalytics::TimeElapsedInStep' has a wrong offset!");
static_assert(offsetof(FLevelLoadingStepAnalytics, LoadingStep) == 0x0000E8, "Member 'FLevelLoadingStepAnalytics::LoadingStep' has a wrong offset!");
static_assert(offsetof(FLevelLoadingStepAnalytics, IsTimeout) == 0x0000F8, "Member 'FLevelLoadingStepAnalytics::IsTimeout' has a wrong offset!");

// ScriptStruct DBDAnalytics.BaseAnalyticController
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FBaseAnalyticController
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBaseAnalyticController) == 0x000008, "Wrong alignment on FBaseAnalyticController");
static_assert(sizeof(FBaseAnalyticController) == 0x000010, "Wrong size on FBaseAnalyticController");

// ScriptStruct DBDAnalytics.ArchiveNewTomePopupAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FArchiveNewTomePopupAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 ArchiveId;                                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 buttonId;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VideoProgress;                                     // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasVideoWatchUntilEnd;                             // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchiveNewTomePopupAnalytics) == 0x000008, "Wrong alignment on FArchiveNewTomePopupAnalytics");
static_assert(sizeof(FArchiveNewTomePopupAnalytics) == 0x0000E0, "Wrong size on FArchiveNewTomePopupAnalytics");
static_assert(offsetof(FArchiveNewTomePopupAnalytics, ArchiveId) == 0x0000B8, "Member 'FArchiveNewTomePopupAnalytics::ArchiveId' has a wrong offset!");
static_assert(offsetof(FArchiveNewTomePopupAnalytics, buttonId) == 0x0000C8, "Member 'FArchiveNewTomePopupAnalytics::buttonId' has a wrong offset!");
static_assert(offsetof(FArchiveNewTomePopupAnalytics, VideoProgress) == 0x0000D8, "Member 'FArchiveNewTomePopupAnalytics::VideoProgress' has a wrong offset!");
static_assert(offsetof(FArchiveNewTomePopupAnalytics, WasVideoWatchUntilEnd) == 0x0000DC, "Member 'FArchiveNewTomePopupAnalytics::WasVideoWatchUntilEnd' has a wrong offset!");

// ScriptStruct DBDAnalytics.ArchiveVignetteEntryAnalytics
// 0x0060 (0x0118 - 0x00B8)
struct FArchiveVignetteEntryAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 ArchiveId;                                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VignetteId;                                        // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EntryId;                                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectEntryTimestamp;                              // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        EntryTimeSpent;                                    // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTaggedAsNew;                                     // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasVoiceOver;                                      // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          StartWithAutoplayEnable;                           // 0x00FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutoplayEnableWhenDeselectingEntry;              // 0x00FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartVoiceoverTimestamp;                           // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        VoiceoverLongestTimeSpent;                         // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FArchiveVignetteEntryAnalytics) == 0x000008, "Wrong alignment on FArchiveVignetteEntryAnalytics");
static_assert(sizeof(FArchiveVignetteEntryAnalytics) == 0x000118, "Wrong size on FArchiveVignetteEntryAnalytics");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, ArchiveId) == 0x0000B8, "Member 'FArchiveVignetteEntryAnalytics::ArchiveId' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, VignetteId) == 0x0000C8, "Member 'FArchiveVignetteEntryAnalytics::VignetteId' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, EntryId) == 0x0000D8, "Member 'FArchiveVignetteEntryAnalytics::EntryId' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, SelectEntryTimestamp) == 0x0000E0, "Member 'FArchiveVignetteEntryAnalytics::SelectEntryTimestamp' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, EntryTimeSpent) == 0x0000F0, "Member 'FArchiveVignetteEntryAnalytics::EntryTimeSpent' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, IsTaggedAsNew) == 0x0000F8, "Member 'FArchiveVignetteEntryAnalytics::IsTaggedAsNew' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, HasVoiceOver) == 0x0000F9, "Member 'FArchiveVignetteEntryAnalytics::HasVoiceOver' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, StartWithAutoplayEnable) == 0x0000FA, "Member 'FArchiveVignetteEntryAnalytics::StartWithAutoplayEnable' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, IsAutoplayEnableWhenDeselectingEntry) == 0x0000FB, "Member 'FArchiveVignetteEntryAnalytics::IsAutoplayEnableWhenDeselectingEntry' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, StartVoiceoverTimestamp) == 0x000100, "Member 'FArchiveVignetteEntryAnalytics::StartVoiceoverTimestamp' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteEntryAnalytics, VoiceoverLongestTimeSpent) == 0x000110, "Member 'FArchiveVignetteEntryAnalytics::VoiceoverLongestTimeSpent' has a wrong offset!");

// ScriptStruct DBDAnalytics.ArchiveVignetteVideoAnalytics
// 0x0050 (0x0108 - 0x00B8)
struct FArchiveVignetteVideoAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 ArchiveId;                                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VignetteId;                                        // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoId;                                           // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StartVideoTimestamp;                               // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        VideoTimeSpent;                                    // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WasVideoWatchUntilEnd;                             // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FArchiveVignetteVideoAnalytics) == 0x000008, "Wrong alignment on FArchiveVignetteVideoAnalytics");
static_assert(sizeof(FArchiveVignetteVideoAnalytics) == 0x000108, "Wrong size on FArchiveVignetteVideoAnalytics");
static_assert(offsetof(FArchiveVignetteVideoAnalytics, ArchiveId) == 0x0000B8, "Member 'FArchiveVignetteVideoAnalytics::ArchiveId' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteVideoAnalytics, VignetteId) == 0x0000C8, "Member 'FArchiveVignetteVideoAnalytics::VignetteId' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteVideoAnalytics, VideoId) == 0x0000D8, "Member 'FArchiveVignetteVideoAnalytics::VideoId' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteVideoAnalytics, StartVideoTimestamp) == 0x0000E8, "Member 'FArchiveVignetteVideoAnalytics::StartVideoTimestamp' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteVideoAnalytics, VideoTimeSpent) == 0x0000F8, "Member 'FArchiveVignetteVideoAnalytics::VideoTimeSpent' has a wrong offset!");
static_assert(offsetof(FArchiveVignetteVideoAnalytics, WasVideoWatchUntilEnd) == 0x000100, "Member 'FArchiveVignetteVideoAnalytics::WasVideoWatchUntilEnd' has a wrong offset!");

// ScriptStruct DBDAnalytics.BotReplacementAnalytics
// 0x0050 (0x0108 - 0x00B8)
struct FBotReplacementAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KrakenMatchId;                                     // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MatchTime;                                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplacedCharacterMirrorsId;                        // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIDifficultyLevel                            BotDifficultyLevel;                                // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x7];                                      // 0x0101(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBotReplacementAnalytics) == 0x000008, "Wrong alignment on FBotReplacementAnalytics");
static_assert(sizeof(FBotReplacementAnalytics) == 0x000108, "Wrong size on FBotReplacementAnalytics");
static_assert(offsetof(FBotReplacementAnalytics, MatchID) == 0x0000B8, "Member 'FBotReplacementAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FBotReplacementAnalytics, KrakenMatchId) == 0x0000C8, "Member 'FBotReplacementAnalytics::KrakenMatchId' has a wrong offset!");
static_assert(offsetof(FBotReplacementAnalytics, Role) == 0x0000D8, "Member 'FBotReplacementAnalytics::Role' has a wrong offset!");
static_assert(offsetof(FBotReplacementAnalytics, MatchTime) == 0x0000DC, "Member 'FBotReplacementAnalytics::MatchTime' has a wrong offset!");
static_assert(offsetof(FBotReplacementAnalytics, CharacterName) == 0x0000E0, "Member 'FBotReplacementAnalytics::CharacterName' has a wrong offset!");
static_assert(offsetof(FBotReplacementAnalytics, ReplacedCharacterMirrorsId) == 0x0000F0, "Member 'FBotReplacementAnalytics::ReplacedCharacterMirrorsId' has a wrong offset!");
static_assert(offsetof(FBotReplacementAnalytics, BotDifficultyLevel) == 0x000100, "Member 'FBotReplacementAnalytics::BotDifficultyLevel' has a wrong offset!");

// ScriptStruct DBDAnalytics.Gameplay_ChaseAnalytics
// 0x00F0 (0x01A8 - 0x00B8)
struct FGameplay_ChaseAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsABot;                                            // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MirrorsIdSurvivor;                                 // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordXStartKiller;                                 // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordYStartKiller;                                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordZStartKiller;                                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordXEndKiller;                                   // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordYEndKiller;                                   // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordZEndKiller;                                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletsDestroyedByKiller;                          // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindowsVaultedByKiller;                            // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletsVaultedByKiller;                            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasicAttackSwingsByKiller;                         // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BasicAttackHitsByKiller;                           // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialAttackAttemptsByKiller;                     // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecialAttackHitsByKiller;                         // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceCoveredKiller;                             // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordXStartSurvivor;                               // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordYStartSurvivor;                               // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordZStartSurvivor;                               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordXEndSurvivor;                                 // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordYEndSurvivor;                                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CoordZEndSurvivor;                                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletsDroppedBySurvivor;                          // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletsStunnedBySurvivor;                          // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WindowsVaultedBySurvivor;                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletsVaultedBySurvivor;                          // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartingHealthOfSurvivor;                          // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndingHealthOfSurvivor;                            // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountHealedOfSurvivor;                            // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C[0x4];                                      // 0x015C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StartingTileSurvivor;                              // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EndingTileSurvivor;                                // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmountOfTilesVisitedSurvivor;                      // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         TilesVisitedSurvivor;                              // 0x0188(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         DistanceCoveredSurvivor;                           // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisplacementSurvivor;                              // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseStartTimeInSecond;                            // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseEndTimeInSecond;                              // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplay_ChaseAnalytics) == 0x000008, "Wrong alignment on FGameplay_ChaseAnalytics");
static_assert(sizeof(FGameplay_ChaseAnalytics) == 0x0001A8, "Wrong size on FGameplay_ChaseAnalytics");
static_assert(offsetof(FGameplay_ChaseAnalytics, MatchID) == 0x0000B8, "Member 'FGameplay_ChaseAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, GameMode) == 0x0000C8, "Member 'FGameplay_ChaseAnalytics::GameMode' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, IsABot) == 0x0000D8, "Member 'FGameplay_ChaseAnalytics::IsABot' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, MirrorsIdSurvivor) == 0x0000E0, "Member 'FGameplay_ChaseAnalytics::MirrorsIdSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordXStartKiller) == 0x0000F0, "Member 'FGameplay_ChaseAnalytics::CoordXStartKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordYStartKiller) == 0x0000F4, "Member 'FGameplay_ChaseAnalytics::CoordYStartKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordZStartKiller) == 0x0000F8, "Member 'FGameplay_ChaseAnalytics::CoordZStartKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordXEndKiller) == 0x0000FC, "Member 'FGameplay_ChaseAnalytics::CoordXEndKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordYEndKiller) == 0x000100, "Member 'FGameplay_ChaseAnalytics::CoordYEndKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordZEndKiller) == 0x000104, "Member 'FGameplay_ChaseAnalytics::CoordZEndKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, PalletsDestroyedByKiller) == 0x000108, "Member 'FGameplay_ChaseAnalytics::PalletsDestroyedByKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, WindowsVaultedByKiller) == 0x00010C, "Member 'FGameplay_ChaseAnalytics::WindowsVaultedByKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, PalletsVaultedByKiller) == 0x000110, "Member 'FGameplay_ChaseAnalytics::PalletsVaultedByKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, BasicAttackSwingsByKiller) == 0x000114, "Member 'FGameplay_ChaseAnalytics::BasicAttackSwingsByKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, BasicAttackHitsByKiller) == 0x000118, "Member 'FGameplay_ChaseAnalytics::BasicAttackHitsByKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, SpecialAttackAttemptsByKiller) == 0x00011C, "Member 'FGameplay_ChaseAnalytics::SpecialAttackAttemptsByKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, SpecialAttackHitsByKiller) == 0x000120, "Member 'FGameplay_ChaseAnalytics::SpecialAttackHitsByKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, DistanceCoveredKiller) == 0x000124, "Member 'FGameplay_ChaseAnalytics::DistanceCoveredKiller' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordXStartSurvivor) == 0x000128, "Member 'FGameplay_ChaseAnalytics::CoordXStartSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordYStartSurvivor) == 0x00012C, "Member 'FGameplay_ChaseAnalytics::CoordYStartSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordZStartSurvivor) == 0x000130, "Member 'FGameplay_ChaseAnalytics::CoordZStartSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordXEndSurvivor) == 0x000134, "Member 'FGameplay_ChaseAnalytics::CoordXEndSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordYEndSurvivor) == 0x000138, "Member 'FGameplay_ChaseAnalytics::CoordYEndSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, CoordZEndSurvivor) == 0x00013C, "Member 'FGameplay_ChaseAnalytics::CoordZEndSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, PalletsDroppedBySurvivor) == 0x000140, "Member 'FGameplay_ChaseAnalytics::PalletsDroppedBySurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, PalletsStunnedBySurvivor) == 0x000144, "Member 'FGameplay_ChaseAnalytics::PalletsStunnedBySurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, WindowsVaultedBySurvivor) == 0x000148, "Member 'FGameplay_ChaseAnalytics::WindowsVaultedBySurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, PalletsVaultedBySurvivor) == 0x00014C, "Member 'FGameplay_ChaseAnalytics::PalletsVaultedBySurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, StartingHealthOfSurvivor) == 0x000150, "Member 'FGameplay_ChaseAnalytics::StartingHealthOfSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, EndingHealthOfSurvivor) == 0x000154, "Member 'FGameplay_ChaseAnalytics::EndingHealthOfSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, AmountHealedOfSurvivor) == 0x000158, "Member 'FGameplay_ChaseAnalytics::AmountHealedOfSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, StartingTileSurvivor) == 0x000160, "Member 'FGameplay_ChaseAnalytics::StartingTileSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, EndingTileSurvivor) == 0x000170, "Member 'FGameplay_ChaseAnalytics::EndingTileSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, AmountOfTilesVisitedSurvivor) == 0x000180, "Member 'FGameplay_ChaseAnalytics::AmountOfTilesVisitedSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, TilesVisitedSurvivor) == 0x000188, "Member 'FGameplay_ChaseAnalytics::TilesVisitedSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, DistanceCoveredSurvivor) == 0x000198, "Member 'FGameplay_ChaseAnalytics::DistanceCoveredSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, DisplacementSurvivor) == 0x00019C, "Member 'FGameplay_ChaseAnalytics::DisplacementSurvivor' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, ChaseStartTimeInSecond) == 0x0001A0, "Member 'FGameplay_ChaseAnalytics::ChaseStartTimeInSecond' has a wrong offset!");
static_assert(offsetof(FGameplay_ChaseAnalytics, ChaseEndTimeInSecond) == 0x0001A4, "Member 'FGameplay_ChaseAnalytics::ChaseEndTimeInSecond' has a wrong offset!");

// ScriptStruct DBDAnalytics.BaseCheatAnalytics
// 0x0088 (0x0140 - 0x00B8)
struct FBaseCheatAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Location;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NetMode;                                           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Requester;                                         // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequesterPlatform;                                 // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RequesterRole;                                     // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RequesterCharacterId;                              // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RequesterCharacterName;                            // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchType;                                         // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseCheatAnalytics) == 0x000008, "Wrong alignment on FBaseCheatAnalytics");
static_assert(sizeof(FBaseCheatAnalytics) == 0x000140, "Wrong size on FBaseCheatAnalytics");
static_assert(offsetof(FBaseCheatAnalytics, Location) == 0x0000B8, "Member 'FBaseCheatAnalytics::Location' has a wrong offset!");
static_assert(offsetof(FBaseCheatAnalytics, NetMode) == 0x0000C8, "Member 'FBaseCheatAnalytics::NetMode' has a wrong offset!");
static_assert(offsetof(FBaseCheatAnalytics, Requester) == 0x0000D8, "Member 'FBaseCheatAnalytics::Requester' has a wrong offset!");
static_assert(offsetof(FBaseCheatAnalytics, RequesterPlatform) == 0x0000E8, "Member 'FBaseCheatAnalytics::RequesterPlatform' has a wrong offset!");
static_assert(offsetof(FBaseCheatAnalytics, RequesterRole) == 0x0000F8, "Member 'FBaseCheatAnalytics::RequesterRole' has a wrong offset!");
static_assert(offsetof(FBaseCheatAnalytics, RequesterCharacterId) == 0x000108, "Member 'FBaseCheatAnalytics::RequesterCharacterId' has a wrong offset!");
static_assert(offsetof(FBaseCheatAnalytics, RequesterCharacterName) == 0x000110, "Member 'FBaseCheatAnalytics::RequesterCharacterName' has a wrong offset!");
static_assert(offsetof(FBaseCheatAnalytics, MatchID) == 0x000120, "Member 'FBaseCheatAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FBaseCheatAnalytics, MatchType) == 0x000130, "Member 'FBaseCheatAnalytics::MatchType' has a wrong offset!");

// ScriptStruct DBDAnalytics.CheatValidatedAnalytics
// 0x0028 (0x0168 - 0x0140)
struct FCheatValidatedAnalytics final : public FBaseCheatAnalytics
{
public:
	class FString                                 Command;                                           // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Validated;                                         // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCheatValidatedAnalytics) == 0x000008, "Wrong alignment on FCheatValidatedAnalytics");
static_assert(sizeof(FCheatValidatedAnalytics) == 0x000168, "Wrong size on FCheatValidatedAnalytics");
static_assert(offsetof(FCheatValidatedAnalytics, Command) == 0x000140, "Member 'FCheatValidatedAnalytics::Command' has a wrong offset!");
static_assert(offsetof(FCheatValidatedAnalytics, Type) == 0x000150, "Member 'FCheatValidatedAnalytics::Type' has a wrong offset!");
static_assert(offsetof(FCheatValidatedAnalytics, Validated) == 0x000160, "Member 'FCheatValidatedAnalytics::Validated' has a wrong offset!");

// ScriptStruct DBDAnalytics.CheatExecutedAnalytics
// 0x0028 (0x0168 - 0x0140)
struct FCheatExecutedAnalytics final : public FBaseCheatAnalytics
{
public:
	class FString                                 Command;                                           // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Type;                                              // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Successful;                                        // 0x0160(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCheatExecutedAnalytics) == 0x000008, "Wrong alignment on FCheatExecutedAnalytics");
static_assert(sizeof(FCheatExecutedAnalytics) == 0x000168, "Wrong size on FCheatExecutedAnalytics");
static_assert(offsetof(FCheatExecutedAnalytics, Command) == 0x000140, "Member 'FCheatExecutedAnalytics::Command' has a wrong offset!");
static_assert(offsetof(FCheatExecutedAnalytics, Type) == 0x000150, "Member 'FCheatExecutedAnalytics::Type' has a wrong offset!");
static_assert(offsetof(FCheatExecutedAnalytics, Successful) == 0x000160, "Member 'FCheatExecutedAnalytics::Successful' has a wrong offset!");

// ScriptStruct DBDAnalytics.ExecExecutedAnalytics
// 0x0018 (0x0158 - 0x0140)
struct FExecExecutedAnalytics final : public FBaseCheatAnalytics
{
public:
	class FString                                 Command;                                           // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Executed;                                          // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FExecExecutedAnalytics) == 0x000008, "Wrong alignment on FExecExecutedAnalytics");
static_assert(sizeof(FExecExecutedAnalytics) == 0x000158, "Wrong size on FExecExecutedAnalytics");
static_assert(offsetof(FExecExecutedAnalytics, Command) == 0x000140, "Member 'FExecExecutedAnalytics::Command' has a wrong offset!");
static_assert(offsetof(FExecExecutedAnalytics, Executed) == 0x000150, "Member 'FExecExecutedAnalytics::Executed' has a wrong offset!");

// ScriptStruct DBDAnalytics.SuspiciousBehaviourAnalytics
// 0x0050 (0x0190 - 0x0140)
struct FSuspiciousBehaviourAnalytics final : public FBaseCheatAnalytics
{
public:
	class FString                                 Type;                                              // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraField1String;                                 // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ExtraField1Integer;                                // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ExtraField1Floating;                               // 0x0168(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraField2String;                                 // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         ExtraField2Integer;                                // 0x0180(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        ExtraField2Floating;                               // 0x0188(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSuspiciousBehaviourAnalytics) == 0x000008, "Wrong alignment on FSuspiciousBehaviourAnalytics");
static_assert(sizeof(FSuspiciousBehaviourAnalytics) == 0x000190, "Wrong size on FSuspiciousBehaviourAnalytics");
static_assert(offsetof(FSuspiciousBehaviourAnalytics, Type) == 0x000140, "Member 'FSuspiciousBehaviourAnalytics::Type' has a wrong offset!");
static_assert(offsetof(FSuspiciousBehaviourAnalytics, ExtraField1String) == 0x000150, "Member 'FSuspiciousBehaviourAnalytics::ExtraField1String' has a wrong offset!");
static_assert(offsetof(FSuspiciousBehaviourAnalytics, ExtraField1Integer) == 0x000160, "Member 'FSuspiciousBehaviourAnalytics::ExtraField1Integer' has a wrong offset!");
static_assert(offsetof(FSuspiciousBehaviourAnalytics, ExtraField1Floating) == 0x000168, "Member 'FSuspiciousBehaviourAnalytics::ExtraField1Floating' has a wrong offset!");
static_assert(offsetof(FSuspiciousBehaviourAnalytics, ExtraField2String) == 0x000170, "Member 'FSuspiciousBehaviourAnalytics::ExtraField2String' has a wrong offset!");
static_assert(offsetof(FSuspiciousBehaviourAnalytics, ExtraField2Integer) == 0x000180, "Member 'FSuspiciousBehaviourAnalytics::ExtraField2Integer' has a wrong offset!");
static_assert(offsetof(FSuspiciousBehaviourAnalytics, ExtraField2Floating) == 0x000188, "Member 'FSuspiciousBehaviourAnalytics::ExtraField2Floating' has a wrong offset!");

// ScriptStruct DBDAnalytics.ClientConnectionBaseAnalytics
// 0x00B0 (0x0168 - 0x00B8)
struct FClientConnectionBaseAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 ClientRole;                                        // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientSurvivorIndex;                               // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientKillerIndex;                                 // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientPlatformAccountId;                           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientMirrorsId;                                   // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientPlatform;                                    // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientProvider;                                    // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientName;                                        // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientContentVersion;                              // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameType;                                          // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientConnectionBaseAnalytics) == 0x000008, "Wrong alignment on FClientConnectionBaseAnalytics");
static_assert(sizeof(FClientConnectionBaseAnalytics) == 0x000168, "Wrong size on FClientConnectionBaseAnalytics");
static_assert(offsetof(FClientConnectionBaseAnalytics, ClientRole) == 0x0000B8, "Member 'FClientConnectionBaseAnalytics::ClientRole' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, ClientSurvivorIndex) == 0x0000C8, "Member 'FClientConnectionBaseAnalytics::ClientSurvivorIndex' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, ClientKillerIndex) == 0x0000D8, "Member 'FClientConnectionBaseAnalytics::ClientKillerIndex' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, ClientPlatformAccountId) == 0x0000E8, "Member 'FClientConnectionBaseAnalytics::ClientPlatformAccountId' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, ClientMirrorsId) == 0x0000F8, "Member 'FClientConnectionBaseAnalytics::ClientMirrorsId' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, ClientPlatform) == 0x000108, "Member 'FClientConnectionBaseAnalytics::ClientPlatform' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, ClientProvider) == 0x000118, "Member 'FClientConnectionBaseAnalytics::ClientProvider' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, ClientName) == 0x000128, "Member 'FClientConnectionBaseAnalytics::ClientName' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, ClientContentVersion) == 0x000138, "Member 'FClientConnectionBaseAnalytics::ClientContentVersion' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, MatchID) == 0x000148, "Member 'FClientConnectionBaseAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FClientConnectionBaseAnalytics, GameType) == 0x000158, "Member 'FClientConnectionBaseAnalytics::GameType' has a wrong offset!");

// ScriptStruct DBDAnalytics.ClientLoginAnalytics
// 0x0040 (0x01A8 - 0x0168)
struct FClientLoginAnalytics final : public FClientConnectionBaseAnalytics
{
public:
	class FString                                 ClientOptions;                                     // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientMatchId;                                     // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientGameType;                                    // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoginResult;                                       // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLoginAnalytics) == 0x000008, "Wrong alignment on FClientLoginAnalytics");
static_assert(sizeof(FClientLoginAnalytics) == 0x0001A8, "Wrong size on FClientLoginAnalytics");
static_assert(offsetof(FClientLoginAnalytics, ClientOptions) == 0x000168, "Member 'FClientLoginAnalytics::ClientOptions' has a wrong offset!");
static_assert(offsetof(FClientLoginAnalytics, ClientMatchId) == 0x000178, "Member 'FClientLoginAnalytics::ClientMatchId' has a wrong offset!");
static_assert(offsetof(FClientLoginAnalytics, ClientGameType) == 0x000188, "Member 'FClientLoginAnalytics::ClientGameType' has a wrong offset!");
static_assert(offsetof(FClientLoginAnalytics, LoginResult) == 0x000198, "Member 'FClientLoginAnalytics::LoginResult' has a wrong offset!");

// ScriptStruct DBDAnalytics.ClientLogoutAnalytics
// 0x0020 (0x0188 - 0x0168)
struct FClientLogoutAnalytics final : public FClientConnectionBaseAnalytics
{
public:
	class FString                                 GameState;                                         // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameFlowStep;                                      // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FClientLogoutAnalytics) == 0x000008, "Wrong alignment on FClientLogoutAnalytics");
static_assert(sizeof(FClientLogoutAnalytics) == 0x000188, "Wrong size on FClientLogoutAnalytics");
static_assert(offsetof(FClientLogoutAnalytics, GameState) == 0x000168, "Member 'FClientLogoutAnalytics::GameState' has a wrong offset!");
static_assert(offsetof(FClientLogoutAnalytics, GameFlowStep) == 0x000178, "Member 'FClientLogoutAnalytics::GameFlowStep' has a wrong offset!");

// ScriptStruct DBDAnalytics.CrossfriendsAnalytics
// 0x0020 (0x00D8 - 0x00B8)
struct FCrossfriendsAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Action;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetKrakenUserId;                                // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCrossfriendsAnalytics) == 0x000008, "Wrong alignment on FCrossfriendsAnalytics");
static_assert(sizeof(FCrossfriendsAnalytics) == 0x0000D8, "Wrong size on FCrossfriendsAnalytics");
static_assert(offsetof(FCrossfriendsAnalytics, Action) == 0x0000B8, "Member 'FCrossfriendsAnalytics::Action' has a wrong offset!");
static_assert(offsetof(FCrossfriendsAnalytics, TargetKrakenUserId) == 0x0000C8, "Member 'FCrossfriendsAnalytics::TargetKrakenUserId' has a wrong offset!");

// ScriptStruct DBDAnalytics.CurrencyBalanceAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FCurrencyBalanceAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 CurrencyName;                                      // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyBalance;                                   // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCurrencyBalanceAnalytics) == 0x000008, "Wrong alignment on FCurrencyBalanceAnalytics");
static_assert(sizeof(FCurrencyBalanceAnalytics) == 0x0000D0, "Wrong size on FCurrencyBalanceAnalytics");
static_assert(offsetof(FCurrencyBalanceAnalytics, CurrencyName) == 0x0000B8, "Member 'FCurrencyBalanceAnalytics::CurrencyName' has a wrong offset!");
static_assert(offsetof(FCurrencyBalanceAnalytics, CurrencyBalance) == 0x0000C8, "Member 'FCurrencyBalanceAnalytics::CurrencyBalance' has a wrong offset!");

// ScriptStruct DBDAnalytics.CustomerSupportAnalytics
// 0x0000 (0x00B8 - 0x00B8)
struct FCustomerSupportAnalytics final : public FUniquelyIdentifiedAnalytic
{
};
static_assert(alignof(FCustomerSupportAnalytics) == 0x000008, "Wrong alignment on FCustomerSupportAnalytics");
static_assert(sizeof(FCustomerSupportAnalytics) == 0x0000B8, "Wrong size on FCustomerSupportAnalytics");

// ScriptStruct DBDAnalytics.CustomerSupportClientLoginAnalytics
// 0x0020 (0x00D8 - 0x00B8)
struct FCustomerSupportClientLoginAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 PlayerName;                                        // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomerSupportClientLoginAnalytics) == 0x000008, "Wrong alignment on FCustomerSupportClientLoginAnalytics");
static_assert(sizeof(FCustomerSupportClientLoginAnalytics) == 0x0000D8, "Wrong size on FCustomerSupportClientLoginAnalytics");
static_assert(offsetof(FCustomerSupportClientLoginAnalytics, PlayerName) == 0x0000B8, "Member 'FCustomerSupportClientLoginAnalytics::PlayerName' has a wrong offset!");
static_assert(offsetof(FCustomerSupportClientLoginAnalytics, Provider) == 0x0000C8, "Member 'FCustomerSupportClientLoginAnalytics::Provider' has a wrong offset!");

// ScriptStruct DBDAnalytics.CustomizationBaseAnalytics
// 0x0068 (0x0120 - 0x00B8)
struct FCustomizationBaseAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 CustomizationSlot1;                                // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomizationSlot2;                                // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CustomizationSlot3;                                // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Charm1;                                            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Charm2;                                            // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Charm3;                                            // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCustomizationBaseAnalytics) == 0x000008, "Wrong alignment on FCustomizationBaseAnalytics");
static_assert(sizeof(FCustomizationBaseAnalytics) == 0x000120, "Wrong size on FCustomizationBaseAnalytics");
static_assert(offsetof(FCustomizationBaseAnalytics, CustomizationSlot1) == 0x0000B8, "Member 'FCustomizationBaseAnalytics::CustomizationSlot1' has a wrong offset!");
static_assert(offsetof(FCustomizationBaseAnalytics, CustomizationSlot2) == 0x0000C8, "Member 'FCustomizationBaseAnalytics::CustomizationSlot2' has a wrong offset!");
static_assert(offsetof(FCustomizationBaseAnalytics, CustomizationSlot3) == 0x0000D8, "Member 'FCustomizationBaseAnalytics::CustomizationSlot3' has a wrong offset!");
static_assert(offsetof(FCustomizationBaseAnalytics, Charm1) == 0x0000E8, "Member 'FCustomizationBaseAnalytics::Charm1' has a wrong offset!");
static_assert(offsetof(FCustomizationBaseAnalytics, Charm2) == 0x0000F8, "Member 'FCustomizationBaseAnalytics::Charm2' has a wrong offset!");
static_assert(offsetof(FCustomizationBaseAnalytics, Charm3) == 0x000108, "Member 'FCustomizationBaseAnalytics::Charm3' has a wrong offset!");
static_assert(offsetof(FCustomizationBaseAnalytics, Role) == 0x000118, "Member 'FCustomizationBaseAnalytics::Role' has a wrong offset!");

// ScriptStruct DBDAnalytics.CustomizationAnalytics
// 0x0010 (0x0130 - 0x0120)
struct FCustomizationAnalytics final : public FCustomizationBaseAnalytics
{
public:
	class FString                                 MatchID;                                           // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationAnalytics) == 0x000008, "Wrong alignment on FCustomizationAnalytics");
static_assert(sizeof(FCustomizationAnalytics) == 0x000130, "Wrong size on FCustomizationAnalytics");
static_assert(offsetof(FCustomizationAnalytics, MatchID) == 0x000120, "Member 'FCustomizationAnalytics::MatchID' has a wrong offset!");

// ScriptStruct DBDAnalytics.CustomizationLobbyAnalytics
// 0x0010 (0x0130 - 0x0120)
struct FCustomizationLobbyAnalytics final : public FCustomizationBaseAnalytics
{
public:
	class FString                                 LobbyId;                                           // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FCustomizationLobbyAnalytics) == 0x000008, "Wrong alignment on FCustomizationLobbyAnalytics");
static_assert(sizeof(FCustomizationLobbyAnalytics) == 0x000130, "Wrong size on FCustomizationLobbyAnalytics");
static_assert(offsetof(FCustomizationLobbyAnalytics, LobbyId) == 0x000120, "Member 'FCustomizationLobbyAnalytics::LobbyId' has a wrong offset!");

// ScriptStruct DBDAnalytics.DailyRitualAnalytics
// 0x0038 (0x00F0 - 0x00B8)
struct FDailyRitualAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Status;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RitualId;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoursElapsed;                                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Progress;                                          // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Threshold;                                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PendingRituals;                                    // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpecificCharacter;                                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDailyRitualAnalytics) == 0x000008, "Wrong alignment on FDailyRitualAnalytics");
static_assert(sizeof(FDailyRitualAnalytics) == 0x0000F0, "Wrong size on FDailyRitualAnalytics");
static_assert(offsetof(FDailyRitualAnalytics, Status) == 0x0000B8, "Member 'FDailyRitualAnalytics::Status' has a wrong offset!");
static_assert(offsetof(FDailyRitualAnalytics, RitualId) == 0x0000C8, "Member 'FDailyRitualAnalytics::RitualId' has a wrong offset!");
static_assert(offsetof(FDailyRitualAnalytics, HoursElapsed) == 0x0000D8, "Member 'FDailyRitualAnalytics::HoursElapsed' has a wrong offset!");
static_assert(offsetof(FDailyRitualAnalytics, Progress) == 0x0000DC, "Member 'FDailyRitualAnalytics::Progress' has a wrong offset!");
static_assert(offsetof(FDailyRitualAnalytics, Threshold) == 0x0000E0, "Member 'FDailyRitualAnalytics::Threshold' has a wrong offset!");
static_assert(offsetof(FDailyRitualAnalytics, PendingRituals) == 0x0000E4, "Member 'FDailyRitualAnalytics::PendingRituals' has a wrong offset!");
static_assert(offsetof(FDailyRitualAnalytics, SpecificCharacter) == 0x0000E8, "Member 'FDailyRitualAnalytics::SpecificCharacter' has a wrong offset!");

// ScriptStruct DBDAnalytics.DDoSDetectionAnalytics
// 0x0038 (0x00F0 - 0x00B8)
struct FDDoSDetectionAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Severity;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NonConnPacketCounter;                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NetConnPacketCounter;                              // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisconnPacketCounter;                              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BadPacketCounter;                                  // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ErrorPacketCounter;                                // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DroppedPacketCounter;                              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDDoSDetectionAnalytics) == 0x000008, "Wrong alignment on FDDoSDetectionAnalytics");
static_assert(sizeof(FDDoSDetectionAnalytics) == 0x0000F0, "Wrong size on FDDoSDetectionAnalytics");
static_assert(offsetof(FDDoSDetectionAnalytics, Severity) == 0x0000B8, "Member 'FDDoSDetectionAnalytics::Severity' has a wrong offset!");
static_assert(offsetof(FDDoSDetectionAnalytics, MatchID) == 0x0000C8, "Member 'FDDoSDetectionAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FDDoSDetectionAnalytics, NonConnPacketCounter) == 0x0000D8, "Member 'FDDoSDetectionAnalytics::NonConnPacketCounter' has a wrong offset!");
static_assert(offsetof(FDDoSDetectionAnalytics, NetConnPacketCounter) == 0x0000DC, "Member 'FDDoSDetectionAnalytics::NetConnPacketCounter' has a wrong offset!");
static_assert(offsetof(FDDoSDetectionAnalytics, DisconnPacketCounter) == 0x0000E0, "Member 'FDDoSDetectionAnalytics::DisconnPacketCounter' has a wrong offset!");
static_assert(offsetof(FDDoSDetectionAnalytics, BadPacketCounter) == 0x0000E4, "Member 'FDDoSDetectionAnalytics::BadPacketCounter' has a wrong offset!");
static_assert(offsetof(FDDoSDetectionAnalytics, ErrorPacketCounter) == 0x0000E8, "Member 'FDDoSDetectionAnalytics::ErrorPacketCounter' has a wrong offset!");
static_assert(offsetof(FDDoSDetectionAnalytics, DroppedPacketCounter) == 0x0000EC, "Member 'FDDoSDetectionAnalytics::DroppedPacketCounter' has a wrong offset!");

// ScriptStruct DBDAnalytics.DedicatedServerStatusAnalytics
// 0x00B8 (0x0170 - 0x00B8)
struct FDedicatedServerStatusAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 DSSessionProvider;                                 // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerStatus;                                      // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameLiftSessionId;                                 // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionEndReason;                                  // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FleetId;                                           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 IpAddress;                                         // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C[0x4];                                      // 0x012C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DnsName;                                           // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Region;                                            // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FleetType;                                         // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceType;                                      // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDedicatedServerStatusAnalytics) == 0x000008, "Wrong alignment on FDedicatedServerStatusAnalytics");
static_assert(sizeof(FDedicatedServerStatusAnalytics) == 0x000170, "Wrong size on FDedicatedServerStatusAnalytics");
static_assert(offsetof(FDedicatedServerStatusAnalytics, DSSessionProvider) == 0x0000B8, "Member 'FDedicatedServerStatusAnalytics::DSSessionProvider' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, ServerStatus) == 0x0000C8, "Member 'FDedicatedServerStatusAnalytics::ServerStatus' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, GameLiftSessionId) == 0x0000D8, "Member 'FDedicatedServerStatusAnalytics::GameLiftSessionId' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, MatchID) == 0x0000E8, "Member 'FDedicatedServerStatusAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, SessionEndReason) == 0x0000F8, "Member 'FDedicatedServerStatusAnalytics::SessionEndReason' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, FleetId) == 0x000108, "Member 'FDedicatedServerStatusAnalytics::FleetId' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, IpAddress) == 0x000118, "Member 'FDedicatedServerStatusAnalytics::IpAddress' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, Port) == 0x000128, "Member 'FDedicatedServerStatusAnalytics::Port' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, DnsName) == 0x000130, "Member 'FDedicatedServerStatusAnalytics::DnsName' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, Region) == 0x000140, "Member 'FDedicatedServerStatusAnalytics::Region' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, FleetType) == 0x000150, "Member 'FDedicatedServerStatusAnalytics::FleetType' has a wrong offset!");
static_assert(offsetof(FDedicatedServerStatusAnalytics, InstanceType) == 0x000160, "Member 'FDedicatedServerStatusAnalytics::InstanceType' has a wrong offset!");

// ScriptStruct DBDAnalytics.DetailedHitAnalytics
// 0x0098 (0x0150 - 0x00B8)
struct FDetailedHitAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstigatorMirrorsId;                               // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetMirrorsId;                                   // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Ping;                                              // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitTimestamp;                                      // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValidHit;                                        // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValidDistance;                                   // 0x00F1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValidCollision;                                  // 0x00F2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F3[0x1];                                       // 0x00F3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecorderCacheTimespan;                             // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDistance;                                   // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleInflation;                                  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstigatorName;                                    // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HitPrimitiveName;                                  // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigatorCoordinateX;                             // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigatorCoordinateY;                             // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigatorCoordinateZ;                             // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigatorRotationX;                               // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigatorRotationY;                               // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigatorRotationZ;                               // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetLocationInstigatorTimestamp;                 // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetCoordinateX;                                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetCoordinateY;                                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetCoordinateZ;                                 // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Distance;                                          // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDetailedHitAnalytics) == 0x000008, "Wrong alignment on FDetailedHitAnalytics");
static_assert(sizeof(FDetailedHitAnalytics) == 0x000150, "Wrong size on FDetailedHitAnalytics");
static_assert(offsetof(FDetailedHitAnalytics, MatchID) == 0x0000B8, "Member 'FDetailedHitAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, InstigatorMirrorsId) == 0x0000C8, "Member 'FDetailedHitAnalytics::InstigatorMirrorsId' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, TargetMirrorsId) == 0x0000D8, "Member 'FDetailedHitAnalytics::TargetMirrorsId' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, Ping) == 0x0000E8, "Member 'FDetailedHitAnalytics::Ping' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, HitTimestamp) == 0x0000EC, "Member 'FDetailedHitAnalytics::HitTimestamp' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, IsValidHit) == 0x0000F0, "Member 'FDetailedHitAnalytics::IsValidHit' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, IsValidDistance) == 0x0000F1, "Member 'FDetailedHitAnalytics::IsValidDistance' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, IsValidCollision) == 0x0000F2, "Member 'FDetailedHitAnalytics::IsValidCollision' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, RecorderCacheTimespan) == 0x0000F4, "Member 'FDetailedHitAnalytics::RecorderCacheTimespan' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, MaximumDistance) == 0x0000F8, "Member 'FDetailedHitAnalytics::MaximumDistance' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, CapsuleInflation) == 0x0000FC, "Member 'FDetailedHitAnalytics::CapsuleInflation' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, InstigatorName) == 0x000100, "Member 'FDetailedHitAnalytics::InstigatorName' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, HitPrimitiveName) == 0x000110, "Member 'FDetailedHitAnalytics::HitPrimitiveName' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, InstigatorCoordinateX) == 0x000120, "Member 'FDetailedHitAnalytics::InstigatorCoordinateX' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, InstigatorCoordinateY) == 0x000124, "Member 'FDetailedHitAnalytics::InstigatorCoordinateY' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, InstigatorCoordinateZ) == 0x000128, "Member 'FDetailedHitAnalytics::InstigatorCoordinateZ' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, InstigatorRotationX) == 0x00012C, "Member 'FDetailedHitAnalytics::InstigatorRotationX' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, InstigatorRotationY) == 0x000130, "Member 'FDetailedHitAnalytics::InstigatorRotationY' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, InstigatorRotationZ) == 0x000134, "Member 'FDetailedHitAnalytics::InstigatorRotationZ' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, TargetLocationInstigatorTimestamp) == 0x000138, "Member 'FDetailedHitAnalytics::TargetLocationInstigatorTimestamp' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, TargetCoordinateX) == 0x00013C, "Member 'FDetailedHitAnalytics::TargetCoordinateX' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, TargetCoordinateY) == 0x000140, "Member 'FDetailedHitAnalytics::TargetCoordinateY' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, TargetCoordinateZ) == 0x000144, "Member 'FDetailedHitAnalytics::TargetCoordinateZ' has a wrong offset!");
static_assert(offsetof(FDetailedHitAnalytics, Distance) == 0x000148, "Member 'FDetailedHitAnalytics::Distance' has a wrong offset!");

// ScriptStruct DBDAnalytics.DisconnectionAnalytics
// 0x0078 (0x0130 - 0x00B8)
struct FDisconnectionAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	double                                        TimeSinceLastPacket;                               // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameFlowStep;                                      // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 UnrealMapName;                                     // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThemeName;                                         // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FailureType;                                       // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorString;                                       // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDisconnectionAnalytics) == 0x000008, "Wrong alignment on FDisconnectionAnalytics");
static_assert(sizeof(FDisconnectionAnalytics) == 0x000130, "Wrong size on FDisconnectionAnalytics");
static_assert(offsetof(FDisconnectionAnalytics, TimeSinceLastPacket) == 0x0000B8, "Member 'FDisconnectionAnalytics::TimeSinceLastPacket' has a wrong offset!");
static_assert(offsetof(FDisconnectionAnalytics, GameFlowStep) == 0x0000C0, "Member 'FDisconnectionAnalytics::GameFlowStep' has a wrong offset!");
static_assert(offsetof(FDisconnectionAnalytics, UnrealMapName) == 0x0000D0, "Member 'FDisconnectionAnalytics::UnrealMapName' has a wrong offset!");
static_assert(offsetof(FDisconnectionAnalytics, MapName) == 0x0000E0, "Member 'FDisconnectionAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(FDisconnectionAnalytics, ThemeName) == 0x0000F0, "Member 'FDisconnectionAnalytics::ThemeName' has a wrong offset!");
static_assert(offsetof(FDisconnectionAnalytics, FailureType) == 0x000100, "Member 'FDisconnectionAnalytics::FailureType' has a wrong offset!");
static_assert(offsetof(FDisconnectionAnalytics, ErrorString) == 0x000110, "Member 'FDisconnectionAnalytics::ErrorString' has a wrong offset!");
static_assert(offsetof(FDisconnectionAnalytics, MatchID) == 0x000120, "Member 'FDisconnectionAnalytics::MatchID' has a wrong offset!");

// ScriptStruct DBDAnalytics.DisconnectionDetailsAnalytics
// 0x0058 (0x0110 - 0x00B8)
struct FDisconnectionDetailsAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 PlayerPlatform;                                    // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InGameTime;                                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Reason;                                            // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHealthStatus                                 Health;                                            // 0x00F0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECharacterStatus>                      CharacterStatus;                                   // 0x00F8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         GeneratorActivated;                                // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHatchStatus                                  HatchStatus;                                       // 0x010C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDoorStatus                                   DoorStatus;                                        // 0x010D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    DisconnectionType;                                 // 0x010E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F[0x1];                                      // 0x010F(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDisconnectionDetailsAnalytics) == 0x000008, "Wrong alignment on FDisconnectionDetailsAnalytics");
static_assert(sizeof(FDisconnectionDetailsAnalytics) == 0x000110, "Wrong size on FDisconnectionDetailsAnalytics");
static_assert(offsetof(FDisconnectionDetailsAnalytics, PlayerPlatform) == 0x0000B8, "Member 'FDisconnectionDetailsAnalytics::PlayerPlatform' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, MatchID) == 0x0000C8, "Member 'FDisconnectionDetailsAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, InGameTime) == 0x0000D8, "Member 'FDisconnectionDetailsAnalytics::InGameTime' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, Role) == 0x0000DC, "Member 'FDisconnectionDetailsAnalytics::Role' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, Reason) == 0x0000E0, "Member 'FDisconnectionDetailsAnalytics::Reason' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, Health) == 0x0000F0, "Member 'FDisconnectionDetailsAnalytics::Health' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, CharacterStatus) == 0x0000F8, "Member 'FDisconnectionDetailsAnalytics::CharacterStatus' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, GeneratorActivated) == 0x000108, "Member 'FDisconnectionDetailsAnalytics::GeneratorActivated' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, HatchStatus) == 0x00010C, "Member 'FDisconnectionDetailsAnalytics::HatchStatus' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, DoorStatus) == 0x00010D, "Member 'FDisconnectionDetailsAnalytics::DoorStatus' has a wrong offset!");
static_assert(offsetof(FDisconnectionDetailsAnalytics, DisconnectionType) == 0x00010E, "Member 'FDisconnectionDetailsAnalytics::DisconnectionType' has a wrong offset!");

// ScriptStruct DBDAnalytics.DedicatedServerPlayerEquipDisabledItemAnalytics
// 0x0020 (0x00D8 - 0x00B8)
struct FDedicatedServerPlayerEquipDisabledItemAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 PlayerMirrorsId;                                   // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EquipedDisabledItemIds;                            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FDedicatedServerPlayerEquipDisabledItemAnalytics) == 0x000008, "Wrong alignment on FDedicatedServerPlayerEquipDisabledItemAnalytics");
static_assert(sizeof(FDedicatedServerPlayerEquipDisabledItemAnalytics) == 0x0000D8, "Wrong size on FDedicatedServerPlayerEquipDisabledItemAnalytics");
static_assert(offsetof(FDedicatedServerPlayerEquipDisabledItemAnalytics, PlayerMirrorsId) == 0x0000B8, "Member 'FDedicatedServerPlayerEquipDisabledItemAnalytics::PlayerMirrorsId' has a wrong offset!");
static_assert(offsetof(FDedicatedServerPlayerEquipDisabledItemAnalytics, EquipedDisabledItemIds) == 0x0000C8, "Member 'FDedicatedServerPlayerEquipDisabledItemAnalytics::EquipedDisabledItemIds' has a wrong offset!");

// ScriptStruct DBDAnalytics.EACAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FEACAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 LogMessage;                                        // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEACAnalytics) == 0x000008, "Wrong alignment on FEACAnalytics");
static_assert(sizeof(FEACAnalytics) == 0x0000C8, "Wrong size on FEACAnalytics");
static_assert(offsetof(FEACAnalytics, LogMessage) == 0x0000B8, "Member 'FEACAnalytics::LogMessage' has a wrong offset!");

// ScriptStruct DBDAnalytics.EACClientInitAnalytics
// 0x0008 (0x00D0 - 0x00C8)
struct FEACClientInitAnalytics : public FEACAnalytics
{
public:
	uint8                                         ValidationErrorType;                               // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEACClientInitAnalytics) == 0x000008, "Wrong alignment on FEACClientInitAnalytics");
static_assert(sizeof(FEACClientInitAnalytics) == 0x0000D0, "Wrong size on FEACClientInitAnalytics");
static_assert(offsetof(FEACClientInitAnalytics, ValidationErrorType) == 0x0000C8, "Member 'FEACClientInitAnalytics::ValidationErrorType' has a wrong offset!");

// ScriptStruct DBDAnalytics.EACClientAuthInitAnalytics
// 0x0000 (0x00D0 - 0x00D0)
struct FEACClientAuthInitAnalytics final : public FEACClientInitAnalytics
{
};
static_assert(alignof(FEACClientAuthInitAnalytics) == 0x000008, "Wrong alignment on FEACClientAuthInitAnalytics");
static_assert(sizeof(FEACClientAuthInitAnalytics) == 0x0000D0, "Wrong size on FEACClientAuthInitAnalytics");

// ScriptStruct DBDAnalytics.EACClientAuthChallengeAnalytics
// 0x0000 (0x00D0 - 0x00D0)
struct FEACClientAuthChallengeAnalytics final : public FEACClientInitAnalytics
{
};
static_assert(alignof(FEACClientAuthChallengeAnalytics) == 0x000008, "Wrong alignment on FEACClientAuthChallengeAnalytics");
static_assert(sizeof(FEACClientAuthChallengeAnalytics) == 0x0000D0, "Wrong size on FEACClientAuthChallengeAnalytics");

// ScriptStruct DBDAnalytics.EACServerValidateAnalytics
// 0x0000 (0x00D0 - 0x00D0)
struct FEACServerValidateAnalytics final : public FEACClientInitAnalytics
{
};
static_assert(alignof(FEACServerValidateAnalytics) == 0x000008, "Wrong alignment on FEACServerValidateAnalytics");
static_assert(sizeof(FEACServerValidateAnalytics) == 0x0000D0, "Wrong size on FEACServerValidateAnalytics");

// ScriptStruct DBDAnalytics.EACClientViolationAnalytics
// 0x0010 (0x00D8 - 0x00C8)
struct FEACClientViolationAnalytics final : public FEACAnalytics
{
public:
	class FString                                 ViolationCase;                                     // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEACClientViolationAnalytics) == 0x000008, "Wrong alignment on FEACClientViolationAnalytics");
static_assert(sizeof(FEACClientViolationAnalytics) == 0x0000D8, "Wrong size on FEACClientViolationAnalytics");
static_assert(offsetof(FEACClientViolationAnalytics, ViolationCase) == 0x0000C8, "Member 'FEACClientViolationAnalytics::ViolationCase' has a wrong offset!");

// ScriptStruct DBDAnalytics.EmblemProgressionDetailsAnalytics
// 0x0018 (0x0018 - 0x0000)
struct FEmblemProgressionDetailsAnalytics final
{
public:
	class FString                                 ProgressionType;                                   // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProgressionPoint;                                  // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEmblemProgressionDetailsAnalytics) == 0x000008, "Wrong alignment on FEmblemProgressionDetailsAnalytics");
static_assert(sizeof(FEmblemProgressionDetailsAnalytics) == 0x000018, "Wrong size on FEmblemProgressionDetailsAnalytics");
static_assert(offsetof(FEmblemProgressionDetailsAnalytics, ProgressionType) == 0x000000, "Member 'FEmblemProgressionDetailsAnalytics::ProgressionType' has a wrong offset!");
static_assert(offsetof(FEmblemProgressionDetailsAnalytics, ProgressionPoint) == 0x000010, "Member 'FEmblemProgressionDetailsAnalytics::ProgressionPoint' has a wrong offset!");

// ScriptStruct DBDAnalytics.EmblemProgressionAnalytics
// 0x0048 (0x0100 - 0x00B8)
struct FEmblemProgressionAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EmblemId;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmblemValue;                                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EmblemQuality;                                     // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEmblemProgressionDetailsAnalytics> ProgressionDetails;                                // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEmblemProgressionAnalytics) == 0x000008, "Wrong alignment on FEmblemProgressionAnalytics");
static_assert(sizeof(FEmblemProgressionAnalytics) == 0x000100, "Wrong size on FEmblemProgressionAnalytics");
static_assert(offsetof(FEmblemProgressionAnalytics, MatchID) == 0x0000B8, "Member 'FEmblemProgressionAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FEmblemProgressionAnalytics, EmblemId) == 0x0000C8, "Member 'FEmblemProgressionAnalytics::EmblemId' has a wrong offset!");
static_assert(offsetof(FEmblemProgressionAnalytics, EmblemValue) == 0x0000D8, "Member 'FEmblemProgressionAnalytics::EmblemValue' has a wrong offset!");
static_assert(offsetof(FEmblemProgressionAnalytics, EmblemQuality) == 0x0000E0, "Member 'FEmblemProgressionAnalytics::EmblemQuality' has a wrong offset!");
static_assert(offsetof(FEmblemProgressionAnalytics, ProgressionDetails) == 0x0000F0, "Member 'FEmblemProgressionAnalytics::ProgressionDetails' has a wrong offset!");

// ScriptStruct DBDAnalytics.EndpointLatencyData
// 0x0018 (0x0018 - 0x0000)
struct FEndpointLatencyData final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Latency;                                           // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEndpointLatencyData) == 0x000008, "Wrong alignment on FEndpointLatencyData");
static_assert(sizeof(FEndpointLatencyData) == 0x000018, "Wrong size on FEndpointLatencyData");
static_assert(offsetof(FEndpointLatencyData, ID) == 0x000000, "Member 'FEndpointLatencyData::ID' has a wrong offset!");
static_assert(offsetof(FEndpointLatencyData, Latency) == 0x000010, "Member 'FEndpointLatencyData::Latency' has a wrong offset!");

// ScriptStruct DBDAnalytics.EndpointLatencyAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FEndpointLatencyAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	TArray<struct FEndpointLatencyData>           Endpoints;                                         // 0x00B8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FEndpointLatencyAnalytics) == 0x000008, "Wrong alignment on FEndpointLatencyAnalytics");
static_assert(sizeof(FEndpointLatencyAnalytics) == 0x0000C8, "Wrong size on FEndpointLatencyAnalytics");
static_assert(offsetof(FEndpointLatencyAnalytics, Endpoints) == 0x0000B8, "Member 'FEndpointLatencyAnalytics::Endpoints' has a wrong offset!");

// ScriptStruct DBDAnalytics.EnvironmentAnalytics
// 0x0168 (0x0220 - 0x00B8)
struct FEnvironmentAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Environment;                                       // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Endpoint;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Language;                                          // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectedCountry;                                   // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timezone;                                          // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceProfile;                                     // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GpuAdapter;                                        // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GpuProviderName;                                   // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GpuDriverVersion;                                  // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RHIName;                                           // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cpu;                                               // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QualitySetting;                                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFullScreen;                                      // 0x016C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16D[0x3];                                      // 0x016D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FullscreenMode;                                    // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAutomaticResolution;                             // 0x0174(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScreenResolutionSetting;                           // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EngineResolutionX;                                 // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EngineResolutionY;                                 // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Provider;                                          // 0x0188(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Device;                                            // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OperatingSystem;                                   // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayingUsingStreaming;                           // 0x01B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B9[0x7];                                      // 0x01B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StreamingService;                                  // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StreamingServerLocation;                           // 0x01D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KrakenVersion;                                     // 0x01E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ContentVersion;                                    // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsingKeyboard;                                   // 0x0200(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ControllerType;                                    // 0x0208(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFreeToPlayEventRunning;                          // 0x0218(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFullApp;                                         // 0x0219(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFreeTrialLogin;                                  // 0x021A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21B[0x5];                                      // 0x021B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FEnvironmentAnalytics) == 0x000008, "Wrong alignment on FEnvironmentAnalytics");
static_assert(sizeof(FEnvironmentAnalytics) == 0x000220, "Wrong size on FEnvironmentAnalytics");
static_assert(offsetof(FEnvironmentAnalytics, Environment) == 0x0000B8, "Member 'FEnvironmentAnalytics::Environment' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, Endpoint) == 0x0000C8, "Member 'FEnvironmentAnalytics::Endpoint' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, Language) == 0x0000D8, "Member 'FEnvironmentAnalytics::Language' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, SelectedCountry) == 0x0000E8, "Member 'FEnvironmentAnalytics::SelectedCountry' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, Timezone) == 0x0000F8, "Member 'FEnvironmentAnalytics::Timezone' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, DeviceProfile) == 0x000108, "Member 'FEnvironmentAnalytics::DeviceProfile' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, GpuAdapter) == 0x000118, "Member 'FEnvironmentAnalytics::GpuAdapter' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, GpuProviderName) == 0x000128, "Member 'FEnvironmentAnalytics::GpuProviderName' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, GpuDriverVersion) == 0x000138, "Member 'FEnvironmentAnalytics::GpuDriverVersion' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, RHIName) == 0x000148, "Member 'FEnvironmentAnalytics::RHIName' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, Cpu) == 0x000158, "Member 'FEnvironmentAnalytics::Cpu' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, QualitySetting) == 0x000168, "Member 'FEnvironmentAnalytics::QualitySetting' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, IsFullScreen) == 0x00016C, "Member 'FEnvironmentAnalytics::IsFullScreen' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, FullscreenMode) == 0x000170, "Member 'FEnvironmentAnalytics::FullscreenMode' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, IsAutomaticResolution) == 0x000174, "Member 'FEnvironmentAnalytics::IsAutomaticResolution' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, ScreenResolutionSetting) == 0x000178, "Member 'FEnvironmentAnalytics::ScreenResolutionSetting' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, EngineResolutionX) == 0x00017C, "Member 'FEnvironmentAnalytics::EngineResolutionX' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, EngineResolutionY) == 0x000180, "Member 'FEnvironmentAnalytics::EngineResolutionY' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, Provider) == 0x000188, "Member 'FEnvironmentAnalytics::Provider' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, Device) == 0x000198, "Member 'FEnvironmentAnalytics::Device' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, OperatingSystem) == 0x0001A8, "Member 'FEnvironmentAnalytics::OperatingSystem' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, IsPlayingUsingStreaming) == 0x0001B8, "Member 'FEnvironmentAnalytics::IsPlayingUsingStreaming' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, StreamingService) == 0x0001C0, "Member 'FEnvironmentAnalytics::StreamingService' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, StreamingServerLocation) == 0x0001D0, "Member 'FEnvironmentAnalytics::StreamingServerLocation' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, KrakenVersion) == 0x0001E0, "Member 'FEnvironmentAnalytics::KrakenVersion' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, ContentVersion) == 0x0001F0, "Member 'FEnvironmentAnalytics::ContentVersion' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, IsUsingKeyboard) == 0x000200, "Member 'FEnvironmentAnalytics::IsUsingKeyboard' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, ControllerType) == 0x000208, "Member 'FEnvironmentAnalytics::ControllerType' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, IsFreeToPlayEventRunning) == 0x000218, "Member 'FEnvironmentAnalytics::IsFreeToPlayEventRunning' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, IsFullApp) == 0x000219, "Member 'FEnvironmentAnalytics::IsFullApp' has a wrong offset!");
static_assert(offsetof(FEnvironmentAnalytics, IsFreeTrialLogin) == 0x00021A, "Member 'FEnvironmentAnalytics::IsFreeTrialLogin' has a wrong offset!");

// ScriptStruct DBDAnalytics.ErrorAnalytics
// 0x0050 (0x0108 - 0x00B8)
struct FErrorAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 ErrorCategory;                                     // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatField1;                                       // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatField2;                                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatField3;                                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StringField1;                                      // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringField2;                                      // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StringField3;                                      // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FErrorAnalytics) == 0x000008, "Wrong alignment on FErrorAnalytics");
static_assert(sizeof(FErrorAnalytics) == 0x000108, "Wrong size on FErrorAnalytics");
static_assert(offsetof(FErrorAnalytics, ErrorCategory) == 0x0000B8, "Member 'FErrorAnalytics::ErrorCategory' has a wrong offset!");
static_assert(offsetof(FErrorAnalytics, FloatField1) == 0x0000C8, "Member 'FErrorAnalytics::FloatField1' has a wrong offset!");
static_assert(offsetof(FErrorAnalytics, FloatField2) == 0x0000CC, "Member 'FErrorAnalytics::FloatField2' has a wrong offset!");
static_assert(offsetof(FErrorAnalytics, FloatField3) == 0x0000D0, "Member 'FErrorAnalytics::FloatField3' has a wrong offset!");
static_assert(offsetof(FErrorAnalytics, StringField1) == 0x0000D8, "Member 'FErrorAnalytics::StringField1' has a wrong offset!");
static_assert(offsetof(FErrorAnalytics, StringField2) == 0x0000E8, "Member 'FErrorAnalytics::StringField2' has a wrong offset!");
static_assert(offsetof(FErrorAnalytics, StringField3) == 0x0000F8, "Member 'FErrorAnalytics::StringField3' has a wrong offset!");

// ScriptStruct DBDAnalytics.FallOutOfWorldAnalytics
// 0x0048 (0x0100 - 0x00B8)
struct FFallOutOfWorldAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FallOutMirrorsId;                                  // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         X;                                                 // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Y;                                                 // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Z;                                                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TileName;                                          // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedMatchTime;                                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFallOutOfWorldAnalytics) == 0x000008, "Wrong alignment on FFallOutOfWorldAnalytics");
static_assert(sizeof(FFallOutOfWorldAnalytics) == 0x000100, "Wrong size on FFallOutOfWorldAnalytics");
static_assert(offsetof(FFallOutOfWorldAnalytics, MatchID) == 0x0000B8, "Member 'FFallOutOfWorldAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FFallOutOfWorldAnalytics, FallOutMirrorsId) == 0x0000C8, "Member 'FFallOutOfWorldAnalytics::FallOutMirrorsId' has a wrong offset!");
static_assert(offsetof(FFallOutOfWorldAnalytics, X) == 0x0000D8, "Member 'FFallOutOfWorldAnalytics::X' has a wrong offset!");
static_assert(offsetof(FFallOutOfWorldAnalytics, Y) == 0x0000DC, "Member 'FFallOutOfWorldAnalytics::Y' has a wrong offset!");
static_assert(offsetof(FFallOutOfWorldAnalytics, Z) == 0x0000E0, "Member 'FFallOutOfWorldAnalytics::Z' has a wrong offset!");
static_assert(offsetof(FFallOutOfWorldAnalytics, TileName) == 0x0000E8, "Member 'FFallOutOfWorldAnalytics::TileName' has a wrong offset!");
static_assert(offsetof(FFallOutOfWorldAnalytics, ElapsedMatchTime) == 0x0000F8, "Member 'FFallOutOfWorldAnalytics::ElapsedMatchTime' has a wrong offset!");

// ScriptStruct DBDAnalytics.FeatureGateAnalyticsDBDFeature
// 0x0018 (0x0018 - 0x0000)
struct FFeatureGateAnalyticsDBDFeature final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   State;                                             // 0x000C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFeatureGateAnalyticsDBDFeature) == 0x000004, "Wrong alignment on FFeatureGateAnalyticsDBDFeature");
static_assert(sizeof(FFeatureGateAnalyticsDBDFeature) == 0x000018, "Wrong size on FFeatureGateAnalyticsDBDFeature");
static_assert(offsetof(FFeatureGateAnalyticsDBDFeature, ID) == 0x000000, "Member 'FFeatureGateAnalyticsDBDFeature::ID' has a wrong offset!");
static_assert(offsetof(FFeatureGateAnalyticsDBDFeature, State) == 0x00000C, "Member 'FFeatureGateAnalyticsDBDFeature::State' has a wrong offset!");

// ScriptStruct DBDAnalytics.FeatureGateAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FFeatureGateAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	bool                                          Enabled;                                           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFeatureGateAnalyticsDBDFeature> Features;                                          // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFeatureGateAnalytics) == 0x000008, "Wrong alignment on FFeatureGateAnalytics");
static_assert(sizeof(FFeatureGateAnalytics) == 0x0000D0, "Wrong size on FFeatureGateAnalytics");
static_assert(offsetof(FFeatureGateAnalytics, Enabled) == 0x0000B8, "Member 'FFeatureGateAnalytics::Enabled' has a wrong offset!");
static_assert(offsetof(FFeatureGateAnalytics, Features) == 0x0000C0, "Member 'FFeatureGateAnalytics::Features' has a wrong offset!");

// ScriptStruct DBDAnalytics.FrameHikeAnalytics
// 0x00D0 (0x0188 - 0x00B8)
struct FFrameHikeAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	float                                         FrameDeltaTime;                                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeSinceApplicationStarted;                       // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTimeoutThreshold;                           // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverConnectionTimeLimit;                         // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentMap;                                        // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentGameMap;                                    // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameFlowStep;                                      // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentGameFlowContext;                            // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviousGameFlowContext;                           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NavigationContext;                                 // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviousNavigationContext;                         // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RecentLogs;                                        // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KrakenMatchId;                                     // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlushAsyncLoadingTime;                             // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FlushAsyncLoadingCount;                            // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SyncLoadCount;                                     // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameType;                                          // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 NetMode;                                           // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFrameHikeAnalytics) == 0x000008, "Wrong alignment on FFrameHikeAnalytics");
static_assert(sizeof(FFrameHikeAnalytics) == 0x000188, "Wrong size on FFrameHikeAnalytics");
static_assert(offsetof(FFrameHikeAnalytics, FrameDeltaTime) == 0x0000B8, "Member 'FFrameHikeAnalytics::FrameDeltaTime' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, TimeSinceApplicationStarted) == 0x0000BC, "Member 'FFrameHikeAnalytics::TimeSinceApplicationStarted' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, CurrentTimeoutThreshold) == 0x0000C0, "Member 'FFrameHikeAnalytics::CurrentTimeoutThreshold' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, IsOverConnectionTimeLimit) == 0x0000C4, "Member 'FFrameHikeAnalytics::IsOverConnectionTimeLimit' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, CurrentMap) == 0x0000C8, "Member 'FFrameHikeAnalytics::CurrentMap' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, CurrentGameMap) == 0x0000D8, "Member 'FFrameHikeAnalytics::CurrentGameMap' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, GameFlowStep) == 0x0000E8, "Member 'FFrameHikeAnalytics::GameFlowStep' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, CurrentGameFlowContext) == 0x0000F8, "Member 'FFrameHikeAnalytics::CurrentGameFlowContext' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, PreviousGameFlowContext) == 0x000108, "Member 'FFrameHikeAnalytics::PreviousGameFlowContext' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, NavigationContext) == 0x000118, "Member 'FFrameHikeAnalytics::NavigationContext' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, PreviousNavigationContext) == 0x000128, "Member 'FFrameHikeAnalytics::PreviousNavigationContext' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, RecentLogs) == 0x000138, "Member 'FFrameHikeAnalytics::RecentLogs' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, KrakenMatchId) == 0x000148, "Member 'FFrameHikeAnalytics::KrakenMatchId' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, FlushAsyncLoadingTime) == 0x000158, "Member 'FFrameHikeAnalytics::FlushAsyncLoadingTime' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, FlushAsyncLoadingCount) == 0x00015C, "Member 'FFrameHikeAnalytics::FlushAsyncLoadingCount' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, SyncLoadCount) == 0x000160, "Member 'FFrameHikeAnalytics::SyncLoadCount' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, GameType) == 0x000168, "Member 'FFrameHikeAnalytics::GameType' has a wrong offset!");
static_assert(offsetof(FFrameHikeAnalytics, NetMode) == 0x000178, "Member 'FFrameHikeAnalytics::NetMode' has a wrong offset!");

// ScriptStruct DBDAnalytics.FreeTrialLoginAnalytics
// 0x0000 (0x00B8 - 0x00B8)
struct FFreeTrialLoginAnalytics final : public FUniquelyIdentifiedAnalytic
{
};
static_assert(alignof(FFreeTrialLoginAnalytics) == 0x000008, "Wrong alignment on FFreeTrialLoginAnalytics");
static_assert(sizeof(FFreeTrialLoginAnalytics) == 0x0000B8, "Wrong size on FFreeTrialLoginAnalytics");

// ScriptStruct DBDAnalytics.GameConsoleLogAnalytics
// 0x0050 (0x0108 - 0x00B8)
struct FGameConsoleLogAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Verbosity;                                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Category;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint64                                        FrameCounter;                                      // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 StackTrace;                                        // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        Repeated;                                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameConsoleLogAnalytics) == 0x000008, "Wrong alignment on FGameConsoleLogAnalytics");
static_assert(sizeof(FGameConsoleLogAnalytics) == 0x000108, "Wrong size on FGameConsoleLogAnalytics");
static_assert(offsetof(FGameConsoleLogAnalytics, Verbosity) == 0x0000B8, "Member 'FGameConsoleLogAnalytics::Verbosity' has a wrong offset!");
static_assert(offsetof(FGameConsoleLogAnalytics, Category) == 0x0000C8, "Member 'FGameConsoleLogAnalytics::Category' has a wrong offset!");
static_assert(offsetof(FGameConsoleLogAnalytics, FrameCounter) == 0x0000D8, "Member 'FGameConsoleLogAnalytics::FrameCounter' has a wrong offset!");
static_assert(offsetof(FGameConsoleLogAnalytics, Message) == 0x0000E0, "Member 'FGameConsoleLogAnalytics::Message' has a wrong offset!");
static_assert(offsetof(FGameConsoleLogAnalytics, StackTrace) == 0x0000F0, "Member 'FGameConsoleLogAnalytics::StackTrace' has a wrong offset!");
static_assert(offsetof(FGameConsoleLogAnalytics, Repeated) == 0x000100, "Member 'FGameConsoleLogAnalytics::Repeated' has a wrong offset!");

// ScriptStruct DBDAnalytics.GameInitAnalytics
// 0x0050 (0x0108 - 0x00B8)
struct FGameInitAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 InitGuid;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProgressionName;                                   // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoadCompleteState;                                 // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        FailureCount;                                      // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AdditionalInfo;                                    // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameInitAnalytics) == 0x000008, "Wrong alignment on FGameInitAnalytics");
static_assert(sizeof(FGameInitAnalytics) == 0x000108, "Wrong size on FGameInitAnalytics");
static_assert(offsetof(FGameInitAnalytics, InitGuid) == 0x0000B8, "Member 'FGameInitAnalytics::InitGuid' has a wrong offset!");
static_assert(offsetof(FGameInitAnalytics, ProgressionName) == 0x0000C8, "Member 'FGameInitAnalytics::ProgressionName' has a wrong offset!");
static_assert(offsetof(FGameInitAnalytics, Success) == 0x0000D8, "Member 'FGameInitAnalytics::Success' has a wrong offset!");
static_assert(offsetof(FGameInitAnalytics, LoadCompleteState) == 0x0000E0, "Member 'FGameInitAnalytics::LoadCompleteState' has a wrong offset!");
static_assert(offsetof(FGameInitAnalytics, ElapsedTime) == 0x0000F0, "Member 'FGameInitAnalytics::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FGameInitAnalytics, FailureCount) == 0x0000F4, "Member 'FGameInitAnalytics::FailureCount' has a wrong offset!");
static_assert(offsetof(FGameInitAnalytics, AdditionalInfo) == 0x0000F8, "Member 'FGameInitAnalytics::AdditionalInfo' has a wrong offset!");

// ScriptStruct DBDAnalytics.Gameplay_SurvivorAnalytics
// 0x00B0 (0x0168 - 0x00B8)
struct FGameplay_SurvivorAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InjuredSpeed;                                      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InjuredDuration;                                   // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HealthyDuration;                                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KODuration;                                        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletSpawned;                                     // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletProcedural;                                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletProceduralSetCount;                          // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PalletGenerationId;                                // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletGeneric;                                     // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletDrop;                                        // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletStun;                                        // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnhookCount;                                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealCount;                                         // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HealCountSuccess;                                  // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClosetEnter;                                       // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hatch;                                             // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCheckCount;                                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCheckCountGood;                               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkillCheckCountGreat;                              // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseDuration;                                     // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumChases;                                         // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitBySlasherCount;                                 // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UnhookDeepWoundCount;                              // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KOWithDeepWoundCount;                              // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AllDeepWoundCount;                                 // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillerInflictDeepWoundWithPowerCount;              // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AmountTilesVisited;                                // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartX;                                            // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartY;                                            // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartZ;                                            // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmotePoint;                                        // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EmoteCome;                                         // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchingDuration;                                 // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CrouchingCount;                                    // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrawlingDuration;                                  // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplay_SurvivorAnalytics) == 0x000008, "Wrong alignment on FGameplay_SurvivorAnalytics");
static_assert(sizeof(FGameplay_SurvivorAnalytics) == 0x000168, "Wrong size on FGameplay_SurvivorAnalytics");
static_assert(offsetof(FGameplay_SurvivorAnalytics, MatchID) == 0x0000B8, "Member 'FGameplay_SurvivorAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, GameMode) == 0x0000C8, "Member 'FGameplay_SurvivorAnalytics::GameMode' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, Speed) == 0x0000D8, "Member 'FGameplay_SurvivorAnalytics::Speed' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, InjuredSpeed) == 0x0000DC, "Member 'FGameplay_SurvivorAnalytics::InjuredSpeed' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, InjuredDuration) == 0x0000E0, "Member 'FGameplay_SurvivorAnalytics::InjuredDuration' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, HealthyDuration) == 0x0000E4, "Member 'FGameplay_SurvivorAnalytics::HealthyDuration' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, KODuration) == 0x0000E8, "Member 'FGameplay_SurvivorAnalytics::KODuration' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, PalletSpawned) == 0x0000EC, "Member 'FGameplay_SurvivorAnalytics::PalletSpawned' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, PalletProcedural) == 0x0000F0, "Member 'FGameplay_SurvivorAnalytics::PalletProcedural' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, PalletProceduralSetCount) == 0x0000F4, "Member 'FGameplay_SurvivorAnalytics::PalletProceduralSetCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, PalletGenerationId) == 0x0000F8, "Member 'FGameplay_SurvivorAnalytics::PalletGenerationId' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, PalletGeneric) == 0x0000FC, "Member 'FGameplay_SurvivorAnalytics::PalletGeneric' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, PalletDrop) == 0x000100, "Member 'FGameplay_SurvivorAnalytics::PalletDrop' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, PalletStun) == 0x000104, "Member 'FGameplay_SurvivorAnalytics::PalletStun' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, UnhookCount) == 0x000108, "Member 'FGameplay_SurvivorAnalytics::UnhookCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, HealCount) == 0x00010C, "Member 'FGameplay_SurvivorAnalytics::HealCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, HealCountSuccess) == 0x000110, "Member 'FGameplay_SurvivorAnalytics::HealCountSuccess' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, ClosetEnter) == 0x000114, "Member 'FGameplay_SurvivorAnalytics::ClosetEnter' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, Hatch) == 0x000118, "Member 'FGameplay_SurvivorAnalytics::Hatch' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, SkillCheckCount) == 0x00011C, "Member 'FGameplay_SurvivorAnalytics::SkillCheckCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, SkillCheckCountGood) == 0x000120, "Member 'FGameplay_SurvivorAnalytics::SkillCheckCountGood' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, SkillCheckCountGreat) == 0x000124, "Member 'FGameplay_SurvivorAnalytics::SkillCheckCountGreat' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, ChaseDuration) == 0x000128, "Member 'FGameplay_SurvivorAnalytics::ChaseDuration' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, NumChases) == 0x00012C, "Member 'FGameplay_SurvivorAnalytics::NumChases' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, HitBySlasherCount) == 0x000130, "Member 'FGameplay_SurvivorAnalytics::HitBySlasherCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, UnhookDeepWoundCount) == 0x000134, "Member 'FGameplay_SurvivorAnalytics::UnhookDeepWoundCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, KOWithDeepWoundCount) == 0x000138, "Member 'FGameplay_SurvivorAnalytics::KOWithDeepWoundCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, AllDeepWoundCount) == 0x00013C, "Member 'FGameplay_SurvivorAnalytics::AllDeepWoundCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, KillerInflictDeepWoundWithPowerCount) == 0x000140, "Member 'FGameplay_SurvivorAnalytics::KillerInflictDeepWoundWithPowerCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, AmountTilesVisited) == 0x000144, "Member 'FGameplay_SurvivorAnalytics::AmountTilesVisited' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, StartX) == 0x000148, "Member 'FGameplay_SurvivorAnalytics::StartX' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, StartY) == 0x00014C, "Member 'FGameplay_SurvivorAnalytics::StartY' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, StartZ) == 0x000150, "Member 'FGameplay_SurvivorAnalytics::StartZ' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, EmotePoint) == 0x000154, "Member 'FGameplay_SurvivorAnalytics::EmotePoint' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, EmoteCome) == 0x000158, "Member 'FGameplay_SurvivorAnalytics::EmoteCome' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, CrouchingDuration) == 0x00015C, "Member 'FGameplay_SurvivorAnalytics::CrouchingDuration' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, CrouchingCount) == 0x000160, "Member 'FGameplay_SurvivorAnalytics::CrouchingCount' has a wrong offset!");
static_assert(offsetof(FGameplay_SurvivorAnalytics, CrawlingDuration) == 0x000164, "Member 'FGameplay_SurvivorAnalytics::CrawlingDuration' has a wrong offset!");

// ScriptStruct DBDAnalytics.Gameplay_PigSurvivorAnalytics
// 0x0038 (0x00F0 - 0x00B8)
struct FGameplay_PigSurvivorAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RbtAttachedCount;                                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActivatedRbtTimerCount;                            // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RbtSuccessSearchCount;                             // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RbtFailedSearchCount;                              // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RbtDisabledPreActivation;                          // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RbtDisabledPostActivation;                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RbtChaseDuration;                                  // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RbtAverageTimeLeftBeforeDisable;                   // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RbtDuration;                                       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FGameplay_PigSurvivorAnalytics) == 0x000008, "Wrong alignment on FGameplay_PigSurvivorAnalytics");
static_assert(sizeof(FGameplay_PigSurvivorAnalytics) == 0x0000F0, "Wrong size on FGameplay_PigSurvivorAnalytics");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, MatchID) == 0x0000B8, "Member 'FGameplay_PigSurvivorAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, RbtAttachedCount) == 0x0000C8, "Member 'FGameplay_PigSurvivorAnalytics::RbtAttachedCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, ActivatedRbtTimerCount) == 0x0000CC, "Member 'FGameplay_PigSurvivorAnalytics::ActivatedRbtTimerCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, RbtSuccessSearchCount) == 0x0000D0, "Member 'FGameplay_PigSurvivorAnalytics::RbtSuccessSearchCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, RbtFailedSearchCount) == 0x0000D4, "Member 'FGameplay_PigSurvivorAnalytics::RbtFailedSearchCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, RbtDisabledPreActivation) == 0x0000D8, "Member 'FGameplay_PigSurvivorAnalytics::RbtDisabledPreActivation' has a wrong offset!");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, RbtDisabledPostActivation) == 0x0000DC, "Member 'FGameplay_PigSurvivorAnalytics::RbtDisabledPostActivation' has a wrong offset!");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, RbtChaseDuration) == 0x0000E0, "Member 'FGameplay_PigSurvivorAnalytics::RbtChaseDuration' has a wrong offset!");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, RbtAverageTimeLeftBeforeDisable) == 0x0000E4, "Member 'FGameplay_PigSurvivorAnalytics::RbtAverageTimeLeftBeforeDisable' has a wrong offset!");
static_assert(offsetof(FGameplay_PigSurvivorAnalytics, RbtDuration) == 0x0000E8, "Member 'FGameplay_PigSurvivorAnalytics::RbtDuration' has a wrong offset!");

// ScriptStruct DBDAnalytics.Gameplay_KillerAnalytics
// 0x00C8 (0x0180 - 0x00B8)
struct FGameplay_KillerAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Speed;                                             // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodlustTier1Count;                               // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodlustTier2Count;                               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodlustTier3Count;                               // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloodlustTier1Duration;                            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloodlustTier2Duration;                            // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloodlustTier3Duration;                            // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BloodlustSpeed;                                    // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaseCount;                                        // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaseCountFail;                                    // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaseCountSuccess;                                 // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaseCountTier1Fail;                               // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaseCountTier1Success;                            // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaseCountTier2Fail;                               // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaseCountTier2Success;                            // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaseCountTier3Fail;                               // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChaseCountTier3Success;                            // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HookCount;                                         // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MurderCount;                                       // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletSpawned;                                     // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletProcedural;                                  // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletProceduralSetCount;                          // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PalletGenerationId;                                // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletGeneric;                                     // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletDestroyed;                                   // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakableWallSpawned;                              // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BreakableWallDestroyed;                            // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DropCount;                                         // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitCloseCount;                                     // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitCloseCountSuccess;                              // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitFarCount;                                       // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitFarCountSuccess;                                // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitSpecialCount;                                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitSpecialCountSuccess;                            // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClosetOpen;                                        // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClosetOpenSuccess;                                 // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EscapeesHatchCount;                                // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SecondesAtLeastOneSurvivorHooked;                  // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AmountTilesVisited;                                // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartX;                                            // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartY;                                            // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartZ;                                            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplay_KillerAnalytics) == 0x000008, "Wrong alignment on FGameplay_KillerAnalytics");
static_assert(sizeof(FGameplay_KillerAnalytics) == 0x000180, "Wrong size on FGameplay_KillerAnalytics");
static_assert(offsetof(FGameplay_KillerAnalytics, MatchID) == 0x0000B8, "Member 'FGameplay_KillerAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, GameMode) == 0x0000C8, "Member 'FGameplay_KillerAnalytics::GameMode' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, Speed) == 0x0000D8, "Member 'FGameplay_KillerAnalytics::Speed' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, BloodlustTier1Count) == 0x0000DC, "Member 'FGameplay_KillerAnalytics::BloodlustTier1Count' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, BloodlustTier2Count) == 0x0000E0, "Member 'FGameplay_KillerAnalytics::BloodlustTier2Count' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, BloodlustTier3Count) == 0x0000E4, "Member 'FGameplay_KillerAnalytics::BloodlustTier3Count' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, BloodlustTier1Duration) == 0x0000E8, "Member 'FGameplay_KillerAnalytics::BloodlustTier1Duration' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, BloodlustTier2Duration) == 0x0000EC, "Member 'FGameplay_KillerAnalytics::BloodlustTier2Duration' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, BloodlustTier3Duration) == 0x0000F0, "Member 'FGameplay_KillerAnalytics::BloodlustTier3Duration' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, BloodlustSpeed) == 0x0000F4, "Member 'FGameplay_KillerAnalytics::BloodlustSpeed' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ChaseCount) == 0x0000F8, "Member 'FGameplay_KillerAnalytics::ChaseCount' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ChaseCountFail) == 0x0000FC, "Member 'FGameplay_KillerAnalytics::ChaseCountFail' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ChaseCountSuccess) == 0x000100, "Member 'FGameplay_KillerAnalytics::ChaseCountSuccess' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ChaseCountTier1Fail) == 0x000104, "Member 'FGameplay_KillerAnalytics::ChaseCountTier1Fail' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ChaseCountTier1Success) == 0x000108, "Member 'FGameplay_KillerAnalytics::ChaseCountTier1Success' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ChaseCountTier2Fail) == 0x00010C, "Member 'FGameplay_KillerAnalytics::ChaseCountTier2Fail' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ChaseCountTier2Success) == 0x000110, "Member 'FGameplay_KillerAnalytics::ChaseCountTier2Success' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ChaseCountTier3Fail) == 0x000114, "Member 'FGameplay_KillerAnalytics::ChaseCountTier3Fail' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ChaseCountTier3Success) == 0x000118, "Member 'FGameplay_KillerAnalytics::ChaseCountTier3Success' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, HookCount) == 0x00011C, "Member 'FGameplay_KillerAnalytics::HookCount' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, MurderCount) == 0x000120, "Member 'FGameplay_KillerAnalytics::MurderCount' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, PalletSpawned) == 0x000124, "Member 'FGameplay_KillerAnalytics::PalletSpawned' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, PalletProcedural) == 0x000128, "Member 'FGameplay_KillerAnalytics::PalletProcedural' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, PalletProceduralSetCount) == 0x00012C, "Member 'FGameplay_KillerAnalytics::PalletProceduralSetCount' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, PalletGenerationId) == 0x000130, "Member 'FGameplay_KillerAnalytics::PalletGenerationId' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, PalletGeneric) == 0x000134, "Member 'FGameplay_KillerAnalytics::PalletGeneric' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, PalletDestroyed) == 0x000138, "Member 'FGameplay_KillerAnalytics::PalletDestroyed' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, BreakableWallSpawned) == 0x00013C, "Member 'FGameplay_KillerAnalytics::BreakableWallSpawned' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, BreakableWallDestroyed) == 0x000140, "Member 'FGameplay_KillerAnalytics::BreakableWallDestroyed' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, DropCount) == 0x000144, "Member 'FGameplay_KillerAnalytics::DropCount' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, HitCloseCount) == 0x000148, "Member 'FGameplay_KillerAnalytics::HitCloseCount' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, HitCloseCountSuccess) == 0x00014C, "Member 'FGameplay_KillerAnalytics::HitCloseCountSuccess' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, HitFarCount) == 0x000150, "Member 'FGameplay_KillerAnalytics::HitFarCount' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, HitFarCountSuccess) == 0x000154, "Member 'FGameplay_KillerAnalytics::HitFarCountSuccess' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, HitSpecialCount) == 0x000158, "Member 'FGameplay_KillerAnalytics::HitSpecialCount' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, HitSpecialCountSuccess) == 0x00015C, "Member 'FGameplay_KillerAnalytics::HitSpecialCountSuccess' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ClosetOpen) == 0x000160, "Member 'FGameplay_KillerAnalytics::ClosetOpen' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, ClosetOpenSuccess) == 0x000164, "Member 'FGameplay_KillerAnalytics::ClosetOpenSuccess' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, EscapeesHatchCount) == 0x000168, "Member 'FGameplay_KillerAnalytics::EscapeesHatchCount' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, SecondesAtLeastOneSurvivorHooked) == 0x00016C, "Member 'FGameplay_KillerAnalytics::SecondesAtLeastOneSurvivorHooked' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, AmountTilesVisited) == 0x000170, "Member 'FGameplay_KillerAnalytics::AmountTilesVisited' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, StartX) == 0x000174, "Member 'FGameplay_KillerAnalytics::StartX' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, StartY) == 0x000178, "Member 'FGameplay_KillerAnalytics::StartY' has a wrong offset!");
static_assert(offsetof(FGameplay_KillerAnalytics, StartZ) == 0x00017C, "Member 'FGameplay_KillerAnalytics::StartZ' has a wrong offset!");

// ScriptStruct DBDAnalytics.Gameplay_PigKillerAnalytics
// 0x0038 (0x00F0 - 0x00B8)
struct FGameplay_PigKillerAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AmbushHitCount;                                    // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RbtKilledCount;                                    // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rbt1GeneratorCount;                                // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rbt2GeneratorCount;                                // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rbt3GeneratorCount;                                // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rbt4GeneratorCount;                                // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rbt5GeneratorCount;                                // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CrouchDuration;                                    // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RbtExitKill;                                       // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RbtHookKill;                                       // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGameplay_PigKillerAnalytics) == 0x000008, "Wrong alignment on FGameplay_PigKillerAnalytics");
static_assert(sizeof(FGameplay_PigKillerAnalytics) == 0x0000F0, "Wrong size on FGameplay_PigKillerAnalytics");
static_assert(offsetof(FGameplay_PigKillerAnalytics, MatchID) == 0x0000B8, "Member 'FGameplay_PigKillerAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, AmbushHitCount) == 0x0000C8, "Member 'FGameplay_PigKillerAnalytics::AmbushHitCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, RbtKilledCount) == 0x0000CC, "Member 'FGameplay_PigKillerAnalytics::RbtKilledCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, Rbt1GeneratorCount) == 0x0000D0, "Member 'FGameplay_PigKillerAnalytics::Rbt1GeneratorCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, Rbt2GeneratorCount) == 0x0000D4, "Member 'FGameplay_PigKillerAnalytics::Rbt2GeneratorCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, Rbt3GeneratorCount) == 0x0000D8, "Member 'FGameplay_PigKillerAnalytics::Rbt3GeneratorCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, Rbt4GeneratorCount) == 0x0000DC, "Member 'FGameplay_PigKillerAnalytics::Rbt4GeneratorCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, Rbt5GeneratorCount) == 0x0000E0, "Member 'FGameplay_PigKillerAnalytics::Rbt5GeneratorCount' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, CrouchDuration) == 0x0000E4, "Member 'FGameplay_PigKillerAnalytics::CrouchDuration' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, RbtExitKill) == 0x0000E8, "Member 'FGameplay_PigKillerAnalytics::RbtExitKill' has a wrong offset!");
static_assert(offsetof(FGameplay_PigKillerAnalytics, RbtHookKill) == 0x0000EC, "Member 'FGameplay_PigKillerAnalytics::RbtHookKill' has a wrong offset!");

// ScriptStruct DBDAnalytics.GPUAnalytics
// 0x0038 (0x00F0 - 0x00B8)
struct FGPUAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Marker;                                            // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageMS;                                         // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StdDevMs;                                          // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FGPUAnalytics) == 0x000008, "Wrong alignment on FGPUAnalytics");
static_assert(sizeof(FGPUAnalytics) == 0x0000F0, "Wrong size on FGPUAnalytics");
static_assert(offsetof(FGPUAnalytics, MatchID) == 0x0000B8, "Member 'FGPUAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FGPUAnalytics, MapName) == 0x0000C8, "Member 'FGPUAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(FGPUAnalytics, Marker) == 0x0000D8, "Member 'FGPUAnalytics::Marker' has a wrong offset!");
static_assert(offsetof(FGPUAnalytics, AverageMS) == 0x0000E8, "Member 'FGPUAnalytics::AverageMS' has a wrong offset!");
static_assert(offsetof(FGPUAnalytics, StdDevMs) == 0x0000EC, "Member 'FGPUAnalytics::StdDevMs' has a wrong offset!");

// ScriptStruct DBDAnalytics.HangAnalytics
// 0x0060 (0x0118 - 0x00B8)
struct FHangAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	bool                                          IsHang;                                            // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HangSourcesInfo;                                   // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HangLogs;                                          // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastLoadingProgression;                            // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AdditionalLogs;                                    // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HangSourcesName;                                   // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHangAnalytics) == 0x000008, "Wrong alignment on FHangAnalytics");
static_assert(sizeof(FHangAnalytics) == 0x000118, "Wrong size on FHangAnalytics");
static_assert(offsetof(FHangAnalytics, IsHang) == 0x0000B8, "Member 'FHangAnalytics::IsHang' has a wrong offset!");
static_assert(offsetof(FHangAnalytics, HangSourcesInfo) == 0x0000C0, "Member 'FHangAnalytics::HangSourcesInfo' has a wrong offset!");
static_assert(offsetof(FHangAnalytics, HangLogs) == 0x0000D0, "Member 'FHangAnalytics::HangLogs' has a wrong offset!");
static_assert(offsetof(FHangAnalytics, LastLoadingProgression) == 0x0000E0, "Member 'FHangAnalytics::LastLoadingProgression' has a wrong offset!");
static_assert(offsetof(FHangAnalytics, AdditionalLogs) == 0x0000E8, "Member 'FHangAnalytics::AdditionalLogs' has a wrong offset!");
static_assert(offsetof(FHangAnalytics, MatchID) == 0x0000F8, "Member 'FHangAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FHangAnalytics, HangSourcesName) == 0x000108, "Member 'FHangAnalytics::HangSourcesName' has a wrong offset!");

// ScriptStruct DBDAnalytics.HeartbeatAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FHeartbeatAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 BeatTime;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FHeartbeatAnalytics) == 0x000008, "Wrong alignment on FHeartbeatAnalytics");
static_assert(sizeof(FHeartbeatAnalytics) == 0x0000C8, "Wrong size on FHeartbeatAnalytics");
static_assert(offsetof(FHeartbeatAnalytics, BeatTime) == 0x0000B8, "Member 'FHeartbeatAnalytics::BeatTime' has a wrong offset!");

// ScriptStruct DBDAnalytics.IAPCanceledAnalytics
// 0x0020 (0x00D8 - 0x00B8)
struct FIAPCanceledAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 ItemId;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Provider;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FIAPCanceledAnalytics) == 0x000008, "Wrong alignment on FIAPCanceledAnalytics");
static_assert(sizeof(FIAPCanceledAnalytics) == 0x0000D8, "Wrong size on FIAPCanceledAnalytics");
static_assert(offsetof(FIAPCanceledAnalytics, ItemId) == 0x0000B8, "Member 'FIAPCanceledAnalytics::ItemId' has a wrong offset!");
static_assert(offsetof(FIAPCanceledAnalytics, Provider) == 0x0000C8, "Member 'FIAPCanceledAnalytics::Provider' has a wrong offset!");

// ScriptStruct DBDAnalytics.InGameAnalyticsController
// 0x0038 (0x0048 - 0x0010)
struct FInGameAnalyticsController final : public FBaseAnalyticController
{
public:
	uint8                                         Pad_10[0x38];                                      // 0x0010(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInGameAnalyticsController) == 0x000008, "Wrong alignment on FInGameAnalyticsController");
static_assert(sizeof(FInGameAnalyticsController) == 0x000048, "Wrong size on FInGameAnalyticsController");

// ScriptStruct DBDAnalytics.InteractionAnalytics
// 0x0020 (0x00D8 - 0x00B8)
struct FInteractionAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	EPlayerRole                                   Role;                                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InterruptionSuccessCount;                          // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InterruptionFailureCount;                          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractionPredictedCount;                         // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractionAuthorizedCount;                        // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractionDeniedByRaceConditionCount;             // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractionDeniedByTimeoutCount;                   // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InteractionDeniedByErrorCount;                     // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FInteractionAnalytics) == 0x000008, "Wrong alignment on FInteractionAnalytics");
static_assert(sizeof(FInteractionAnalytics) == 0x0000D8, "Wrong size on FInteractionAnalytics");
static_assert(offsetof(FInteractionAnalytics, Role) == 0x0000B8, "Member 'FInteractionAnalytics::Role' has a wrong offset!");
static_assert(offsetof(FInteractionAnalytics, InterruptionSuccessCount) == 0x0000BC, "Member 'FInteractionAnalytics::InterruptionSuccessCount' has a wrong offset!");
static_assert(offsetof(FInteractionAnalytics, InterruptionFailureCount) == 0x0000C0, "Member 'FInteractionAnalytics::InterruptionFailureCount' has a wrong offset!");
static_assert(offsetof(FInteractionAnalytics, InteractionPredictedCount) == 0x0000C4, "Member 'FInteractionAnalytics::InteractionPredictedCount' has a wrong offset!");
static_assert(offsetof(FInteractionAnalytics, InteractionAuthorizedCount) == 0x0000C8, "Member 'FInteractionAnalytics::InteractionAuthorizedCount' has a wrong offset!");
static_assert(offsetof(FInteractionAnalytics, InteractionDeniedByRaceConditionCount) == 0x0000CC, "Member 'FInteractionAnalytics::InteractionDeniedByRaceConditionCount' has a wrong offset!");
static_assert(offsetof(FInteractionAnalytics, InteractionDeniedByTimeoutCount) == 0x0000D0, "Member 'FInteractionAnalytics::InteractionDeniedByTimeoutCount' has a wrong offset!");
static_assert(offsetof(FInteractionAnalytics, InteractionDeniedByErrorCount) == 0x0000D4, "Member 'FInteractionAnalytics::InteractionDeniedByErrorCount' has a wrong offset!");

// ScriptStruct DBDAnalytics.InvalidLoadoutAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FInvalidLoadoutAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         SlasherPerkCount;                                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PowerAddonCount;                                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CamperPerkCount;                                   // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ItemAddonCount;                                    // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CallingFunctionName;                               // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterId;                                       // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FInvalidLoadoutAnalytics) == 0x000008, "Wrong alignment on FInvalidLoadoutAnalytics");
static_assert(sizeof(FInvalidLoadoutAnalytics) == 0x0000E0, "Wrong size on FInvalidLoadoutAnalytics");
static_assert(offsetof(FInvalidLoadoutAnalytics, SlasherPerkCount) == 0x0000B8, "Member 'FInvalidLoadoutAnalytics::SlasherPerkCount' has a wrong offset!");
static_assert(offsetof(FInvalidLoadoutAnalytics, PowerAddonCount) == 0x0000BC, "Member 'FInvalidLoadoutAnalytics::PowerAddonCount' has a wrong offset!");
static_assert(offsetof(FInvalidLoadoutAnalytics, CamperPerkCount) == 0x0000C0, "Member 'FInvalidLoadoutAnalytics::CamperPerkCount' has a wrong offset!");
static_assert(offsetof(FInvalidLoadoutAnalytics, ItemAddonCount) == 0x0000C4, "Member 'FInvalidLoadoutAnalytics::ItemAddonCount' has a wrong offset!");
static_assert(offsetof(FInvalidLoadoutAnalytics, CallingFunctionName) == 0x0000C8, "Member 'FInvalidLoadoutAnalytics::CallingFunctionName' has a wrong offset!");
static_assert(offsetof(FInvalidLoadoutAnalytics, CharacterId) == 0x0000D8, "Member 'FInvalidLoadoutAnalytics::CharacterId' has a wrong offset!");

// ScriptStruct DBDAnalytics.DedicatedServerInvalidLoadoutAnalytics
// 0x0058 (0x0110 - 0x00B8)
struct FDedicatedServerInvalidLoadoutAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 PlayerMirrorsId;                                   // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemType;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Items;                                             // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Reason;                                            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerRole;                                        // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterId;                                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDedicatedServerInvalidLoadoutAnalytics) == 0x000008, "Wrong alignment on FDedicatedServerInvalidLoadoutAnalytics");
static_assert(sizeof(FDedicatedServerInvalidLoadoutAnalytics) == 0x000110, "Wrong size on FDedicatedServerInvalidLoadoutAnalytics");
static_assert(offsetof(FDedicatedServerInvalidLoadoutAnalytics, PlayerMirrorsId) == 0x0000B8, "Member 'FDedicatedServerInvalidLoadoutAnalytics::PlayerMirrorsId' has a wrong offset!");
static_assert(offsetof(FDedicatedServerInvalidLoadoutAnalytics, ItemType) == 0x0000C8, "Member 'FDedicatedServerInvalidLoadoutAnalytics::ItemType' has a wrong offset!");
static_assert(offsetof(FDedicatedServerInvalidLoadoutAnalytics, Items) == 0x0000D8, "Member 'FDedicatedServerInvalidLoadoutAnalytics::Items' has a wrong offset!");
static_assert(offsetof(FDedicatedServerInvalidLoadoutAnalytics, Reason) == 0x0000E8, "Member 'FDedicatedServerInvalidLoadoutAnalytics::Reason' has a wrong offset!");
static_assert(offsetof(FDedicatedServerInvalidLoadoutAnalytics, PlayerRole) == 0x0000F8, "Member 'FDedicatedServerInvalidLoadoutAnalytics::PlayerRole' has a wrong offset!");
static_assert(offsetof(FDedicatedServerInvalidLoadoutAnalytics, CharacterId) == 0x000108, "Member 'FDedicatedServerInvalidLoadoutAnalytics::CharacterId' has a wrong offset!");

// ScriptStruct DBDAnalytics.NewKillerTutorialAnalytics
// 0x0050 (0x0108 - 0x00B8)
struct FNewKillerTutorialAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	bool                                          IsKickGeneratorComplete;                           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFollowSurvivorComplete;                          // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x2];                                       // 0x00BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeToCompleteAreaOne;                             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDestroyPalletComplete;                           // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeToCompleteAreaTwo;                             // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBeartrapComplete;                                // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHitSurvivorComplete;                             // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKoSurvivorComplete;                              // 0x00CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPickupSurvivorComplete;                          // 0x00CB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHookSurvivorComplete;                            // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCloseHatchComplete;                              // 0x00CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsKillSurvivorComplete;                            // 0x00CE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CF[0x1];                                       // 0x00CF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeToCompleteAreaThree;                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTimeInTutorial;                               // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TutorialId;                                        // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnboardingModeId;                                  // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingEnabled;                                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingABTestingEnabled;                        // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingNumberActiveModes;                       // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingNewAssignedMode;                         // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewKillerTutorialAnalytics) == 0x000008, "Wrong alignment on FNewKillerTutorialAnalytics");
static_assert(sizeof(FNewKillerTutorialAnalytics) == 0x000108, "Wrong size on FNewKillerTutorialAnalytics");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsKickGeneratorComplete) == 0x0000B8, "Member 'FNewKillerTutorialAnalytics::IsKickGeneratorComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsFollowSurvivorComplete) == 0x0000B9, "Member 'FNewKillerTutorialAnalytics::IsFollowSurvivorComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, TimeToCompleteAreaOne) == 0x0000BC, "Member 'FNewKillerTutorialAnalytics::TimeToCompleteAreaOne' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsDestroyPalletComplete) == 0x0000C0, "Member 'FNewKillerTutorialAnalytics::IsDestroyPalletComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, TimeToCompleteAreaTwo) == 0x0000C4, "Member 'FNewKillerTutorialAnalytics::TimeToCompleteAreaTwo' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsBeartrapComplete) == 0x0000C8, "Member 'FNewKillerTutorialAnalytics::IsBeartrapComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsHitSurvivorComplete) == 0x0000C9, "Member 'FNewKillerTutorialAnalytics::IsHitSurvivorComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsKoSurvivorComplete) == 0x0000CA, "Member 'FNewKillerTutorialAnalytics::IsKoSurvivorComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsPickupSurvivorComplete) == 0x0000CB, "Member 'FNewKillerTutorialAnalytics::IsPickupSurvivorComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsHookSurvivorComplete) == 0x0000CC, "Member 'FNewKillerTutorialAnalytics::IsHookSurvivorComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsCloseHatchComplete) == 0x0000CD, "Member 'FNewKillerTutorialAnalytics::IsCloseHatchComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, IsKillSurvivorComplete) == 0x0000CE, "Member 'FNewKillerTutorialAnalytics::IsKillSurvivorComplete' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, TimeToCompleteAreaThree) == 0x0000D0, "Member 'FNewKillerTutorialAnalytics::TimeToCompleteAreaThree' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, TotalTimeInTutorial) == 0x0000D4, "Member 'FNewKillerTutorialAnalytics::TotalTimeInTutorial' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, TutorialId) == 0x0000D8, "Member 'FNewKillerTutorialAnalytics::TutorialId' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, OnboardingModeId) == 0x0000E8, "Member 'FNewKillerTutorialAnalytics::OnboardingModeId' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, OnboardingEnabled) == 0x0000F8, "Member 'FNewKillerTutorialAnalytics::OnboardingEnabled' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, OnboardingABTestingEnabled) == 0x0000FC, "Member 'FNewKillerTutorialAnalytics::OnboardingABTestingEnabled' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, OnboardingNumberActiveModes) == 0x000100, "Member 'FNewKillerTutorialAnalytics::OnboardingNumberActiveModes' has a wrong offset!");
static_assert(offsetof(FNewKillerTutorialAnalytics, OnboardingNewAssignedMode) == 0x000104, "Member 'FNewKillerTutorialAnalytics::OnboardingNewAssignedMode' has a wrong offset!");

// ScriptStruct DBDAnalytics.KrakenRequestAnalytics
// 0x0070 (0x0128 - 0x00B8)
struct FKrakenRequestAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 KrakenUrl;                                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Method;                                            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Route;                                             // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Status;                                            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResponseCode;                                      // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ProviderError;                                     // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        AttemptCount;                                      // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0104(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanRetry;                                          // 0x0105(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WillRetry;                                         // 0x0106(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107[0x1];                                      // 0x0107(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Country;                                           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttemptElapsedTime;                                // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalElapsedTime;                                  // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalElapsedTimeCapped;                            // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FKrakenRequestAnalytics) == 0x000008, "Wrong alignment on FKrakenRequestAnalytics");
static_assert(sizeof(FKrakenRequestAnalytics) == 0x000128, "Wrong size on FKrakenRequestAnalytics");
static_assert(offsetof(FKrakenRequestAnalytics, KrakenUrl) == 0x0000B8, "Member 'FKrakenRequestAnalytics::KrakenUrl' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, Method) == 0x0000C8, "Member 'FKrakenRequestAnalytics::Method' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, Route) == 0x0000D8, "Member 'FKrakenRequestAnalytics::Route' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, Status) == 0x0000E8, "Member 'FKrakenRequestAnalytics::Status' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, ResponseCode) == 0x0000F8, "Member 'FKrakenRequestAnalytics::ResponseCode' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, ProviderError) == 0x0000FC, "Member 'FKrakenRequestAnalytics::ProviderError' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, AttemptCount) == 0x000100, "Member 'FKrakenRequestAnalytics::AttemptCount' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, Success) == 0x000104, "Member 'FKrakenRequestAnalytics::Success' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, CanRetry) == 0x000105, "Member 'FKrakenRequestAnalytics::CanRetry' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, WillRetry) == 0x000106, "Member 'FKrakenRequestAnalytics::WillRetry' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, Country) == 0x000108, "Member 'FKrakenRequestAnalytics::Country' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, AttemptElapsedTime) == 0x000118, "Member 'FKrakenRequestAnalytics::AttemptElapsedTime' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, TotalElapsedTime) == 0x00011C, "Member 'FKrakenRequestAnalytics::TotalElapsedTime' has a wrong offset!");
static_assert(offsetof(FKrakenRequestAnalytics, TotalElapsedTimeCapped) == 0x000120, "Member 'FKrakenRequestAnalytics::TotalElapsedTimeCapped' has a wrong offset!");

// ScriptStruct DBDAnalytics.LevelLoadingTimeoutAnalytics
// 0x0040 (0x00F8 - 0x00B8)
struct FLevelLoadingTimeoutAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeElapsed;                                       // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeElapsedInStep;                                 // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LoadingStep;                                       // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLevelLoadingTimeoutAnalytics) == 0x000008, "Wrong alignment on FLevelLoadingTimeoutAnalytics");
static_assert(sizeof(FLevelLoadingTimeoutAnalytics) == 0x0000F8, "Wrong size on FLevelLoadingTimeoutAnalytics");
static_assert(offsetof(FLevelLoadingTimeoutAnalytics, MatchID) == 0x0000B8, "Member 'FLevelLoadingTimeoutAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FLevelLoadingTimeoutAnalytics, MapName) == 0x0000C8, "Member 'FLevelLoadingTimeoutAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(FLevelLoadingTimeoutAnalytics, Seed) == 0x0000D8, "Member 'FLevelLoadingTimeoutAnalytics::Seed' has a wrong offset!");
static_assert(offsetof(FLevelLoadingTimeoutAnalytics, TimeElapsed) == 0x0000DC, "Member 'FLevelLoadingTimeoutAnalytics::TimeElapsed' has a wrong offset!");
static_assert(offsetof(FLevelLoadingTimeoutAnalytics, TimeElapsedInStep) == 0x0000E0, "Member 'FLevelLoadingTimeoutAnalytics::TimeElapsedInStep' has a wrong offset!");
static_assert(offsetof(FLevelLoadingTimeoutAnalytics, LoadingStep) == 0x0000E8, "Member 'FLevelLoadingTimeoutAnalytics::LoadingStep' has a wrong offset!");

// ScriptStruct DBDAnalytics.LoadingStepAnalytics
// 0x0068 (0x0120 - 0x00B8)
struct FLoadingStepAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Match_id;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lobby_id;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Step_change_timestamp;                             // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Loading_step;                                      // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time_on_prev_step;                                 // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Total_load_time;                                   // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Current_map_name;                                  // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Transition_id;                                     // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingStepAnalytics) == 0x000008, "Wrong alignment on FLoadingStepAnalytics");
static_assert(sizeof(FLoadingStepAnalytics) == 0x000120, "Wrong size on FLoadingStepAnalytics");
static_assert(offsetof(FLoadingStepAnalytics, Match_id) == 0x0000B8, "Member 'FLoadingStepAnalytics::Match_id' has a wrong offset!");
static_assert(offsetof(FLoadingStepAnalytics, Lobby_id) == 0x0000C8, "Member 'FLoadingStepAnalytics::Lobby_id' has a wrong offset!");
static_assert(offsetof(FLoadingStepAnalytics, Step_change_timestamp) == 0x0000D8, "Member 'FLoadingStepAnalytics::Step_change_timestamp' has a wrong offset!");
static_assert(offsetof(FLoadingStepAnalytics, Loading_step) == 0x0000E8, "Member 'FLoadingStepAnalytics::Loading_step' has a wrong offset!");
static_assert(offsetof(FLoadingStepAnalytics, Time_on_prev_step) == 0x0000F8, "Member 'FLoadingStepAnalytics::Time_on_prev_step' has a wrong offset!");
static_assert(offsetof(FLoadingStepAnalytics, Total_load_time) == 0x0000FC, "Member 'FLoadingStepAnalytics::Total_load_time' has a wrong offset!");
static_assert(offsetof(FLoadingStepAnalytics, Current_map_name) == 0x000100, "Member 'FLoadingStepAnalytics::Current_map_name' has a wrong offset!");
static_assert(offsetof(FLoadingStepAnalytics, Transition_id) == 0x000110, "Member 'FLoadingStepAnalytics::Transition_id' has a wrong offset!");

// ScriptStruct DBDAnalytics.LoadingTimeoutAnalytics
// 0x0058 (0x0110 - 0x00B8)
struct FLoadingTimeoutAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Match_id;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Lobby_id;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Timeout_timestamp;                                 // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Total_load_time;                                   // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Current_map_name;                                  // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Transition_id;                                     // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadingTimeoutAnalytics) == 0x000008, "Wrong alignment on FLoadingTimeoutAnalytics");
static_assert(sizeof(FLoadingTimeoutAnalytics) == 0x000110, "Wrong size on FLoadingTimeoutAnalytics");
static_assert(offsetof(FLoadingTimeoutAnalytics, Match_id) == 0x0000B8, "Member 'FLoadingTimeoutAnalytics::Match_id' has a wrong offset!");
static_assert(offsetof(FLoadingTimeoutAnalytics, Lobby_id) == 0x0000C8, "Member 'FLoadingTimeoutAnalytics::Lobby_id' has a wrong offset!");
static_assert(offsetof(FLoadingTimeoutAnalytics, Timeout_timestamp) == 0x0000D8, "Member 'FLoadingTimeoutAnalytics::Timeout_timestamp' has a wrong offset!");
static_assert(offsetof(FLoadingTimeoutAnalytics, Total_load_time) == 0x0000E8, "Member 'FLoadingTimeoutAnalytics::Total_load_time' has a wrong offset!");
static_assert(offsetof(FLoadingTimeoutAnalytics, Current_map_name) == 0x0000F0, "Member 'FLoadingTimeoutAnalytics::Current_map_name' has a wrong offset!");
static_assert(offsetof(FLoadingTimeoutAnalytics, Transition_id) == 0x000100, "Member 'FLoadingTimeoutAnalytics::Transition_id' has a wrong offset!");

// ScriptStruct DBDAnalytics.LoadoutBaseAnalytics
// 0x00B0 (0x0168 - 0x00B8)
struct FLoadoutBaseAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 LoadoutItem;                                       // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutItemAddOn1;                                 // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutItemAddOn2;                                 // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutPerk1;                                      // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutPerk2;                                      // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutPerk3;                                      // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutPerk4;                                      // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LoadoutOffering;                                   // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameType;                                          // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterClass;                                    // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadoutBaseAnalytics) == 0x000008, "Wrong alignment on FLoadoutBaseAnalytics");
static_assert(sizeof(FLoadoutBaseAnalytics) == 0x000168, "Wrong size on FLoadoutBaseAnalytics");
static_assert(offsetof(FLoadoutBaseAnalytics, LoadoutItem) == 0x0000B8, "Member 'FLoadoutBaseAnalytics::LoadoutItem' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, LoadoutItemAddOn1) == 0x0000C8, "Member 'FLoadoutBaseAnalytics::LoadoutItemAddOn1' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, LoadoutItemAddOn2) == 0x0000D8, "Member 'FLoadoutBaseAnalytics::LoadoutItemAddOn2' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, LoadoutPerk1) == 0x0000E8, "Member 'FLoadoutBaseAnalytics::LoadoutPerk1' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, LoadoutPerk2) == 0x0000F8, "Member 'FLoadoutBaseAnalytics::LoadoutPerk2' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, LoadoutPerk3) == 0x000108, "Member 'FLoadoutBaseAnalytics::LoadoutPerk3' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, LoadoutPerk4) == 0x000118, "Member 'FLoadoutBaseAnalytics::LoadoutPerk4' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, LoadoutOffering) == 0x000128, "Member 'FLoadoutBaseAnalytics::LoadoutOffering' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, Role) == 0x000138, "Member 'FLoadoutBaseAnalytics::Role' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, GameType) == 0x000140, "Member 'FLoadoutBaseAnalytics::GameType' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, Rank) == 0x000150, "Member 'FLoadoutBaseAnalytics::Rank' has a wrong offset!");
static_assert(offsetof(FLoadoutBaseAnalytics, CharacterClass) == 0x000158, "Member 'FLoadoutBaseAnalytics::CharacterClass' has a wrong offset!");

// ScriptStruct DBDAnalytics.LoadOutAnalytics
// 0x0010 (0x0178 - 0x0168)
struct FLoadOutAnalytics final : public FLoadoutBaseAnalytics
{
public:
	class FString                                 MatchID;                                           // 0x0168(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadOutAnalytics) == 0x000008, "Wrong alignment on FLoadOutAnalytics");
static_assert(sizeof(FLoadOutAnalytics) == 0x000178, "Wrong size on FLoadOutAnalytics");
static_assert(offsetof(FLoadOutAnalytics, MatchID) == 0x000168, "Member 'FLoadOutAnalytics::MatchID' has a wrong offset!");

// ScriptStruct DBDAnalytics.LoadOutLobbyAnalytics
// 0x0028 (0x0190 - 0x0168)
struct FLoadOutLobbyAnalytics final : public FLoadoutBaseAnalytics
{
public:
	int32                                         Level;                                             // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Prestige;                                          // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x0170(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLoadOutLobbyAnalytics) == 0x000008, "Wrong alignment on FLoadOutLobbyAnalytics");
static_assert(sizeof(FLoadOutLobbyAnalytics) == 0x000190, "Wrong size on FLoadOutLobbyAnalytics");
static_assert(offsetof(FLoadOutLobbyAnalytics, Level) == 0x000168, "Member 'FLoadOutLobbyAnalytics::Level' has a wrong offset!");
static_assert(offsetof(FLoadOutLobbyAnalytics, Prestige) == 0x00016C, "Member 'FLoadOutLobbyAnalytics::Prestige' has a wrong offset!");
static_assert(offsetof(FLoadOutLobbyAnalytics, CharacterName) == 0x000170, "Member 'FLoadOutLobbyAnalytics::CharacterName' has a wrong offset!");
static_assert(offsetof(FLoadOutLobbyAnalytics, LobbyId) == 0x000180, "Member 'FLoadOutLobbyAnalytics::LobbyId' has a wrong offset!");

// ScriptStruct DBDAnalytics.LogMirrorsAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FLogMirrorsAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 LogMirrors;                                        // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLogMirrorsAnalytics) == 0x000008, "Wrong alignment on FLogMirrorsAnalytics");
static_assert(sizeof(FLogMirrorsAnalytics) == 0x0000C8, "Wrong size on FLogMirrorsAnalytics");
static_assert(offsetof(FLogMirrorsAnalytics, LogMirrors) == 0x0000B8, "Member 'FLogMirrorsAnalytics::LogMirrors' has a wrong offset!");

// ScriptStruct DBDAnalytics.LogPresencePluginAnalytics
// 0x0020 (0x00D8 - 0x00B8)
struct FLogPresencePluginAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Context;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Message;                                           // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLogPresencePluginAnalytics) == 0x000008, "Wrong alignment on FLogPresencePluginAnalytics");
static_assert(sizeof(FLogPresencePluginAnalytics) == 0x0000D8, "Wrong size on FLogPresencePluginAnalytics");
static_assert(offsetof(FLogPresencePluginAnalytics, Context) == 0x0000B8, "Member 'FLogPresencePluginAnalytics::Context' has a wrong offset!");
static_assert(offsetof(FLogPresencePluginAnalytics, Message) == 0x0000C8, "Member 'FLogPresencePluginAnalytics::Message' has a wrong offset!");

// ScriptStruct DBDAnalytics.MapCoordData
// 0x0030 (0x0030 - 0x0000)
struct FMapCoordData final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Actor;                                             // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         X;                                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Z;                                                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapCoordData) == 0x000008, "Wrong alignment on FMapCoordData");
static_assert(sizeof(FMapCoordData) == 0x000030, "Wrong size on FMapCoordData");
static_assert(offsetof(FMapCoordData, Type) == 0x000000, "Member 'FMapCoordData::Type' has a wrong offset!");
static_assert(offsetof(FMapCoordData, Actor) == 0x000010, "Member 'FMapCoordData::Actor' has a wrong offset!");
static_assert(offsetof(FMapCoordData, X) == 0x000020, "Member 'FMapCoordData::X' has a wrong offset!");
static_assert(offsetof(FMapCoordData, Y) == 0x000024, "Member 'FMapCoordData::Y' has a wrong offset!");
static_assert(offsetof(FMapCoordData, Z) == 0x000028, "Member 'FMapCoordData::Z' has a wrong offset!");

// ScriptStruct DBDAnalytics.MapCoordAnalytics
// 0x0020 (0x00D8 - 0x00B8)
struct FMapCoordAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMapCoordData>                  MapItem;                                           // 0x00C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapCoordAnalytics) == 0x000008, "Wrong alignment on FMapCoordAnalytics");
static_assert(sizeof(FMapCoordAnalytics) == 0x0000D8, "Wrong size on FMapCoordAnalytics");
static_assert(offsetof(FMapCoordAnalytics, MatchID) == 0x0000B8, "Member 'FMapCoordAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FMapCoordAnalytics, MapItem) == 0x0000C8, "Member 'FMapCoordAnalytics::MapItem' has a wrong offset!");

// ScriptStruct DBDAnalytics.MapSelectionWeight
// 0x0028 (0x0028 - 0x0000)
struct FMapSelectionWeight final
{
public:
	class FString                                 MapId;                                             // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ThemeId;                                           // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Weight;                                            // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMapSelectionWeight) == 0x000008, "Wrong alignment on FMapSelectionWeight");
static_assert(sizeof(FMapSelectionWeight) == 0x000028, "Wrong size on FMapSelectionWeight");
static_assert(offsetof(FMapSelectionWeight, MapId) == 0x000000, "Member 'FMapSelectionWeight::MapId' has a wrong offset!");
static_assert(offsetof(FMapSelectionWeight, ThemeId) == 0x000010, "Member 'FMapSelectionWeight::ThemeId' has a wrong offset!");
static_assert(offsetof(FMapSelectionWeight, Weight) == 0x000020, "Member 'FMapSelectionWeight::Weight' has a wrong offset!");

// ScriptStruct DBDAnalytics.MapSelectionAnalytics
// 0x0040 (0x00F8 - 0x00B8)
struct FMapSelectionAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 KrakenMatchId;                                     // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectedMapId;                                     // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapSeed;                                           // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectedMapOdds;                                   // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalMapWeight;                                    // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMapSelectionWeight>            MapWeights;                                        // 0x00E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMapSelectionAnalytics) == 0x000008, "Wrong alignment on FMapSelectionAnalytics");
static_assert(sizeof(FMapSelectionAnalytics) == 0x0000F8, "Wrong size on FMapSelectionAnalytics");
static_assert(offsetof(FMapSelectionAnalytics, KrakenMatchId) == 0x0000B8, "Member 'FMapSelectionAnalytics::KrakenMatchId' has a wrong offset!");
static_assert(offsetof(FMapSelectionAnalytics, SelectedMapId) == 0x0000C8, "Member 'FMapSelectionAnalytics::SelectedMapId' has a wrong offset!");
static_assert(offsetof(FMapSelectionAnalytics, MapSeed) == 0x0000D8, "Member 'FMapSelectionAnalytics::MapSeed' has a wrong offset!");
static_assert(offsetof(FMapSelectionAnalytics, SelectedMapOdds) == 0x0000DC, "Member 'FMapSelectionAnalytics::SelectedMapOdds' has a wrong offset!");
static_assert(offsetof(FMapSelectionAnalytics, TotalMapWeight) == 0x0000E0, "Member 'FMapSelectionAnalytics::TotalMapWeight' has a wrong offset!");
static_assert(offsetof(FMapSelectionAnalytics, MapWeights) == 0x0000E8, "Member 'FMapSelectionAnalytics::MapWeights' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchIncentivesFetchedAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FMatchIncentivesFetchedAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 GameMode;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillerPercentageIncentive;                         // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurvivorPercentageIncentive;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchIncentivesFetchedAnalytics) == 0x000008, "Wrong alignment on FMatchIncentivesFetchedAnalytics");
static_assert(sizeof(FMatchIncentivesFetchedAnalytics) == 0x0000D0, "Wrong size on FMatchIncentivesFetchedAnalytics");
static_assert(offsetof(FMatchIncentivesFetchedAnalytics, GameMode) == 0x0000B8, "Member 'FMatchIncentivesFetchedAnalytics::GameMode' has a wrong offset!");
static_assert(offsetof(FMatchIncentivesFetchedAnalytics, KillerPercentageIncentive) == 0x0000C8, "Member 'FMatchIncentivesFetchedAnalytics::KillerPercentageIncentive' has a wrong offset!");
static_assert(offsetof(FMatchIncentivesFetchedAnalytics, SurvivorPercentageIncentive) == 0x0000CC, "Member 'FMatchIncentivesFetchedAnalytics::SurvivorPercentageIncentive' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchIncentivesGrantedAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FMatchIncentivesGrantedAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerId;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   PlayerRole;                                        // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x3];                                       // 0x00D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Incentive;                                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchIncentivesGrantedAnalytics) == 0x000008, "Wrong alignment on FMatchIncentivesGrantedAnalytics");
static_assert(sizeof(FMatchIncentivesGrantedAnalytics) == 0x0000E0, "Wrong size on FMatchIncentivesGrantedAnalytics");
static_assert(offsetof(FMatchIncentivesGrantedAnalytics, MatchID) == 0x0000B8, "Member 'FMatchIncentivesGrantedAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FMatchIncentivesGrantedAnalytics, PlayerId) == 0x0000C8, "Member 'FMatchIncentivesGrantedAnalytics::PlayerId' has a wrong offset!");
static_assert(offsetof(FMatchIncentivesGrantedAnalytics, PlayerRole) == 0x0000D8, "Member 'FMatchIncentivesGrantedAnalytics::PlayerRole' has a wrong offset!");
static_assert(offsetof(FMatchIncentivesGrantedAnalytics, Incentive) == 0x0000DC, "Member 'FMatchIncentivesGrantedAnalytics::Incentive' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchInfoAnalytics
// 0x0148 (0x0200 - 0x00B8)
struct FMatchInfoAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	EGameType                                     GameMode;                                          // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsABot;                                            // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BotId;                                             // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAIDifficultyLevel                            BotDifficultyLevel;                                // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartySize;                                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Level;                                             // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Prestige;                                          // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Pips;                                              // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PipsTotal;                                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapSeed;                                           // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PartyHostMirrorsId;                                // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KrakenMatchId;                                     // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectedCountry;                                   // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FirstTimePlaying;                                  // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x3];                                      // 0x0171(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CumulativeMatches;                                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CumulativeMatchesAsSurvivor;                       // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CumulativeMatchesAsKiller;                         // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastMatchTimestamp;                                // 0x0180(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExactPing;                                         // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasAnActiveArchiveQuest;                           // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsingKeyboard;                                   // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_196[0x2];                                      // 0x0196(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ControllerType;                                    // 0x0198(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ColorBlindMode;                                    // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ColorblindIntensity;                               // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TerrorRadiusVisualSupport;                         // 0x01BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTutorialBotMatch;                                // 0x01BD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BE[0x2];                                      // 0x01BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OnboardingModeId;                                  // 0x01C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingEnabled;                                 // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingABTestingEnabled;                        // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingNumberActiveModes;                       // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingNewAssignedMode;                         // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerSessionId;                                   // 0x01E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ServerRegion;                                      // 0x01F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchInfoAnalytics) == 0x000008, "Wrong alignment on FMatchInfoAnalytics");
static_assert(sizeof(FMatchInfoAnalytics) == 0x000200, "Wrong size on FMatchInfoAnalytics");
static_assert(offsetof(FMatchInfoAnalytics, GameMode) == 0x0000B8, "Member 'FMatchInfoAnalytics::GameMode' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, Role) == 0x0000B9, "Member 'FMatchInfoAnalytics::Role' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, IsABot) == 0x0000BA, "Member 'FMatchInfoAnalytics::IsABot' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, BotId) == 0x0000C0, "Member 'FMatchInfoAnalytics::BotId' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, BotDifficultyLevel) == 0x0000D0, "Member 'FMatchInfoAnalytics::BotDifficultyLevel' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, PartySize) == 0x0000D4, "Member 'FMatchInfoAnalytics::PartySize' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, CharacterName) == 0x0000D8, "Member 'FMatchInfoAnalytics::CharacterName' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, Rank) == 0x0000E8, "Member 'FMatchInfoAnalytics::Rank' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, Level) == 0x0000EC, "Member 'FMatchInfoAnalytics::Level' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, Prestige) == 0x0000F0, "Member 'FMatchInfoAnalytics::Prestige' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, Pips) == 0x0000F4, "Member 'FMatchInfoAnalytics::Pips' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, PipsTotal) == 0x0000F8, "Member 'FMatchInfoAnalytics::PipsTotal' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, MapSeed) == 0x0000FC, "Member 'FMatchInfoAnalytics::MapSeed' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, MapName) == 0x000100, "Member 'FMatchInfoAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, PartyHostMirrorsId) == 0x000110, "Member 'FMatchInfoAnalytics::PartyHostMirrorsId' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, LobbyId) == 0x000120, "Member 'FMatchInfoAnalytics::LobbyId' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, MatchID) == 0x000130, "Member 'FMatchInfoAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, KrakenMatchId) == 0x000140, "Member 'FMatchInfoAnalytics::KrakenMatchId' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, PlayerName) == 0x000150, "Member 'FMatchInfoAnalytics::PlayerName' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, SelectedCountry) == 0x000160, "Member 'FMatchInfoAnalytics::SelectedCountry' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, FirstTimePlaying) == 0x000170, "Member 'FMatchInfoAnalytics::FirstTimePlaying' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, CumulativeMatches) == 0x000174, "Member 'FMatchInfoAnalytics::CumulativeMatches' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, CumulativeMatchesAsSurvivor) == 0x000178, "Member 'FMatchInfoAnalytics::CumulativeMatchesAsSurvivor' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, CumulativeMatchesAsKiller) == 0x00017C, "Member 'FMatchInfoAnalytics::CumulativeMatchesAsKiller' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, LastMatchTimestamp) == 0x000180, "Member 'FMatchInfoAnalytics::LastMatchTimestamp' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, ExactPing) == 0x000190, "Member 'FMatchInfoAnalytics::ExactPing' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, HasAnActiveArchiveQuest) == 0x000194, "Member 'FMatchInfoAnalytics::HasAnActiveArchiveQuest' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, IsUsingKeyboard) == 0x000195, "Member 'FMatchInfoAnalytics::IsUsingKeyboard' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, ControllerType) == 0x000198, "Member 'FMatchInfoAnalytics::ControllerType' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, ColorBlindMode) == 0x0001A8, "Member 'FMatchInfoAnalytics::ColorBlindMode' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, ColorblindIntensity) == 0x0001B8, "Member 'FMatchInfoAnalytics::ColorblindIntensity' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, TerrorRadiusVisualSupport) == 0x0001BC, "Member 'FMatchInfoAnalytics::TerrorRadiusVisualSupport' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, IsTutorialBotMatch) == 0x0001BD, "Member 'FMatchInfoAnalytics::IsTutorialBotMatch' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, OnboardingModeId) == 0x0001C0, "Member 'FMatchInfoAnalytics::OnboardingModeId' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, OnboardingEnabled) == 0x0001D0, "Member 'FMatchInfoAnalytics::OnboardingEnabled' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, OnboardingABTestingEnabled) == 0x0001D4, "Member 'FMatchInfoAnalytics::OnboardingABTestingEnabled' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, OnboardingNumberActiveModes) == 0x0001D8, "Member 'FMatchInfoAnalytics::OnboardingNumberActiveModes' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, OnboardingNewAssignedMode) == 0x0001DC, "Member 'FMatchInfoAnalytics::OnboardingNewAssignedMode' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, ServerSessionId) == 0x0001E0, "Member 'FMatchInfoAnalytics::ServerSessionId' has a wrong offset!");
static_assert(offsetof(FMatchInfoAnalytics, ServerRegion) == 0x0001F0, "Member 'FMatchInfoAnalytics::ServerRegion' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchmakingAnalytics
// 0x0030 (0x00E8 - 0x00B8)
struct FMatchmakingAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchmakingSessionGuid;                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   PlayerRole;                                        // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameType                                     GameType;                                          // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x2];                                       // 0x00CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartySize;                                         // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterName;                                     // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingAnalytics) == 0x000008, "Wrong alignment on FMatchmakingAnalytics");
static_assert(sizeof(FMatchmakingAnalytics) == 0x0000E8, "Wrong size on FMatchmakingAnalytics");
static_assert(offsetof(FMatchmakingAnalytics, MatchmakingSessionGuid) == 0x0000B8, "Member 'FMatchmakingAnalytics::MatchmakingSessionGuid' has a wrong offset!");
static_assert(offsetof(FMatchmakingAnalytics, PlayerRole) == 0x0000C8, "Member 'FMatchmakingAnalytics::PlayerRole' has a wrong offset!");
static_assert(offsetof(FMatchmakingAnalytics, GameType) == 0x0000C9, "Member 'FMatchmakingAnalytics::GameType' has a wrong offset!");
static_assert(offsetof(FMatchmakingAnalytics, PartySize) == 0x0000CC, "Member 'FMatchmakingAnalytics::PartySize' has a wrong offset!");
static_assert(offsetof(FMatchmakingAnalytics, Rank) == 0x0000D0, "Member 'FMatchmakingAnalytics::Rank' has a wrong offset!");
static_assert(offsetof(FMatchmakingAnalytics, CharacterName) == 0x0000D8, "Member 'FMatchmakingAnalytics::CharacterName' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchmakingQueueAnalytics
// 0x0038 (0x0120 - 0x00E8)
struct FMatchmakingQueueAnalytics final : public FMatchmakingAnalytics
{
public:
	class FString                                 QueueStartTime;                                    // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueEndTime;                                      // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 QueueResult;                                       // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CrossPlayEnabled;                                  // 0x0118(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingQueueAnalytics) == 0x000008, "Wrong alignment on FMatchmakingQueueAnalytics");
static_assert(sizeof(FMatchmakingQueueAnalytics) == 0x000120, "Wrong size on FMatchmakingQueueAnalytics");
static_assert(offsetof(FMatchmakingQueueAnalytics, QueueStartTime) == 0x0000E8, "Member 'FMatchmakingQueueAnalytics::QueueStartTime' has a wrong offset!");
static_assert(offsetof(FMatchmakingQueueAnalytics, QueueEndTime) == 0x0000F8, "Member 'FMatchmakingQueueAnalytics::QueueEndTime' has a wrong offset!");
static_assert(offsetof(FMatchmakingQueueAnalytics, QueueResult) == 0x000108, "Member 'FMatchmakingQueueAnalytics::QueueResult' has a wrong offset!");
static_assert(offsetof(FMatchmakingQueueAnalytics, CrossPlayEnabled) == 0x000118, "Member 'FMatchmakingQueueAnalytics::CrossPlayEnabled' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchmakingLobbyAnalytics
// 0x0040 (0x0128 - 0x00E8)
struct FMatchmakingLobbyAnalytics final : public FMatchmakingAnalytics
{
public:
	class FString                                 LobbyStartTime;                                    // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyEndTime;                                      // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyResult;                                       // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KrakenMatchId;                                     // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingLobbyAnalytics) == 0x000008, "Wrong alignment on FMatchmakingLobbyAnalytics");
static_assert(sizeof(FMatchmakingLobbyAnalytics) == 0x000128, "Wrong size on FMatchmakingLobbyAnalytics");
static_assert(offsetof(FMatchmakingLobbyAnalytics, LobbyStartTime) == 0x0000E8, "Member 'FMatchmakingLobbyAnalytics::LobbyStartTime' has a wrong offset!");
static_assert(offsetof(FMatchmakingLobbyAnalytics, LobbyEndTime) == 0x0000F8, "Member 'FMatchmakingLobbyAnalytics::LobbyEndTime' has a wrong offset!");
static_assert(offsetof(FMatchmakingLobbyAnalytics, LobbyResult) == 0x000108, "Member 'FMatchmakingLobbyAnalytics::LobbyResult' has a wrong offset!");
static_assert(offsetof(FMatchmakingLobbyAnalytics, KrakenMatchId) == 0x000118, "Member 'FMatchmakingLobbyAnalytics::KrakenMatchId' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchmakingInfoExpiredAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FMatchmakingInfoExpiredAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchmakingSessionGuid;                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingInfoExpiredAnalytics) == 0x000008, "Wrong alignment on FMatchmakingInfoExpiredAnalytics");
static_assert(sizeof(FMatchmakingInfoExpiredAnalytics) == 0x0000C8, "Wrong size on FMatchmakingInfoExpiredAnalytics");
static_assert(offsetof(FMatchmakingInfoExpiredAnalytics, MatchmakingSessionGuid) == 0x0000B8, "Member 'FMatchmakingInfoExpiredAnalytics::MatchmakingSessionGuid' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchmakingApproveLoginAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FMatchmakingApproveLoginAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         CurrentPlayers;                                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Error;                                             // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 JoiningUserID;                                     // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingApproveLoginAnalytics) == 0x000008, "Wrong alignment on FMatchmakingApproveLoginAnalytics");
static_assert(sizeof(FMatchmakingApproveLoginAnalytics) == 0x0000E0, "Wrong size on FMatchmakingApproveLoginAnalytics");
static_assert(offsetof(FMatchmakingApproveLoginAnalytics, CurrentPlayers) == 0x0000B8, "Member 'FMatchmakingApproveLoginAnalytics::CurrentPlayers' has a wrong offset!");
static_assert(offsetof(FMatchmakingApproveLoginAnalytics, Success) == 0x0000BC, "Member 'FMatchmakingApproveLoginAnalytics::Success' has a wrong offset!");
static_assert(offsetof(FMatchmakingApproveLoginAnalytics, Error) == 0x0000C0, "Member 'FMatchmakingApproveLoginAnalytics::Error' has a wrong offset!");
static_assert(offsetof(FMatchmakingApproveLoginAnalytics, JoiningUserID) == 0x0000D0, "Member 'FMatchmakingApproveLoginAnalytics::JoiningUserID' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchmakingJoinSessionAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FMatchmakingJoinSessionAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Log;                                               // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchmakingJoinSessionAnalytics) == 0x000008, "Wrong alignment on FMatchmakingJoinSessionAnalytics");
static_assert(sizeof(FMatchmakingJoinSessionAnalytics) == 0x0000C8, "Wrong size on FMatchmakingJoinSessionAnalytics");
static_assert(offsetof(FMatchmakingJoinSessionAnalytics, Log) == 0x0000B8, "Member 'FMatchmakingJoinSessionAnalytics::Log' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchmakingJoinCompleteAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FMatchmakingJoinCompleteAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 SessionName;                                       // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Result;                                            // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingJoinCompleteAnalytics) == 0x000008, "Wrong alignment on FMatchmakingJoinCompleteAnalytics");
static_assert(sizeof(FMatchmakingJoinCompleteAnalytics) == 0x0000D0, "Wrong size on FMatchmakingJoinCompleteAnalytics");
static_assert(offsetof(FMatchmakingJoinCompleteAnalytics, SessionName) == 0x0000B8, "Member 'FMatchmakingJoinCompleteAnalytics::SessionName' has a wrong offset!");
static_assert(offsetof(FMatchmakingJoinCompleteAnalytics, Result) == 0x0000C8, "Member 'FMatchmakingJoinCompleteAnalytics::Result' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchmakingHostCreatedAnalytics
// 0x0070 (0x0128 - 0x00B8)
struct FMatchmakingHostCreatedAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         NumPublicConnections;                              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumPrivateConnections;                             // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAdvertise;                                   // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLANMatch;                                        // 0x00C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowInvites;                                      // 0x00C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsesPresence;                                      // 0x00C3(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowJoinViaPresenceFriendsOnly;                   // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowJoinInProgress;                               // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AllowJoinViaPresence;                              // 0x00C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x00C7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HostSettings;                                      // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x50];                                      // 0x00D8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingHostCreatedAnalytics) == 0x000008, "Wrong alignment on FMatchmakingHostCreatedAnalytics");
static_assert(sizeof(FMatchmakingHostCreatedAnalytics) == 0x000128, "Wrong size on FMatchmakingHostCreatedAnalytics");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, NumPublicConnections) == 0x0000B8, "Member 'FMatchmakingHostCreatedAnalytics::NumPublicConnections' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, NumPrivateConnections) == 0x0000BC, "Member 'FMatchmakingHostCreatedAnalytics::NumPrivateConnections' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, ShouldAdvertise) == 0x0000C0, "Member 'FMatchmakingHostCreatedAnalytics::ShouldAdvertise' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, IsLANMatch) == 0x0000C1, "Member 'FMatchmakingHostCreatedAnalytics::IsLANMatch' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, AllowInvites) == 0x0000C2, "Member 'FMatchmakingHostCreatedAnalytics::AllowInvites' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, UsesPresence) == 0x0000C3, "Member 'FMatchmakingHostCreatedAnalytics::UsesPresence' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, AllowJoinViaPresenceFriendsOnly) == 0x0000C4, "Member 'FMatchmakingHostCreatedAnalytics::AllowJoinViaPresenceFriendsOnly' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, AllowJoinInProgress) == 0x0000C5, "Member 'FMatchmakingHostCreatedAnalytics::AllowJoinInProgress' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, AllowJoinViaPresence) == 0x0000C6, "Member 'FMatchmakingHostCreatedAnalytics::AllowJoinViaPresence' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, Success) == 0x0000C7, "Member 'FMatchmakingHostCreatedAnalytics::Success' has a wrong offset!");
static_assert(offsetof(FMatchmakingHostCreatedAnalytics, HostSettings) == 0x0000C8, "Member 'FMatchmakingHostCreatedAnalytics::HostSettings' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchmakingSearchCompleteAnalytics
// 0x00E0 (0x0198 - 0x00B8)
struct FMatchmakingSearchCompleteAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	bool                                          Success;                                           // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumMatches;                                        // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsedFallback;                                      // 0x00C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ConnectingToUser;                                  // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SearchParams;                                      // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SearchResultSettings;                              // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0xA0];                                      // 0x00F8(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchmakingSearchCompleteAnalytics) == 0x000008, "Wrong alignment on FMatchmakingSearchCompleteAnalytics");
static_assert(sizeof(FMatchmakingSearchCompleteAnalytics) == 0x000198, "Wrong size on FMatchmakingSearchCompleteAnalytics");
static_assert(offsetof(FMatchmakingSearchCompleteAnalytics, Success) == 0x0000B8, "Member 'FMatchmakingSearchCompleteAnalytics::Success' has a wrong offset!");
static_assert(offsetof(FMatchmakingSearchCompleteAnalytics, NumMatches) == 0x0000BC, "Member 'FMatchmakingSearchCompleteAnalytics::NumMatches' has a wrong offset!");
static_assert(offsetof(FMatchmakingSearchCompleteAnalytics, UsedFallback) == 0x0000C0, "Member 'FMatchmakingSearchCompleteAnalytics::UsedFallback' has a wrong offset!");
static_assert(offsetof(FMatchmakingSearchCompleteAnalytics, ConnectingToUser) == 0x0000C8, "Member 'FMatchmakingSearchCompleteAnalytics::ConnectingToUser' has a wrong offset!");
static_assert(offsetof(FMatchmakingSearchCompleteAnalytics, SearchParams) == 0x0000D8, "Member 'FMatchmakingSearchCompleteAnalytics::SearchParams' has a wrong offset!");
static_assert(offsetof(FMatchmakingSearchCompleteAnalytics, SearchResultSettings) == 0x0000E8, "Member 'FMatchmakingSearchCompleteAnalytics::SearchResultSettings' has a wrong offset!");

// ScriptStruct DBDAnalytics.QueueAnalytics
// 0x00B8 (0x0170 - 0x00B8)
struct FQueueAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         TimesQueuedSurvivor;                               // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimesQueuedKiller;                                 // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchesAsSurvivor;                                 // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchesAsKiller;                                   // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SelectedCountry;                                   // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerName;                                        // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FirstTimePlaying;                                  // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CumulativeMatches;                                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CumulativeMatchesAsSurvivor;                       // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CumulativeMatchesAsKiller;                         // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastMatchTimestamp;                                // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionStartTimestamp;                             // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SessionEndTimestamp;                               // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastSessionTimestamp;                              // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CumulativeSessions;                                // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CumulativePlaytime;                                // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInCharacterMenu;                               // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInBloodwebMenu;                                // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInLoadoutMenu;                                 // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInCustomizationMenu;                           // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInFearMarket;                                  // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInTallyScreen;                                 // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInGameMatch;                                   // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInHelpMenu;                                    // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInOfflineLobby;                                // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInOfflineLobbySurvivorGroup;                   // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInOnlineLobby;                                 // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInOnlineLobbySurvivorGroup;                    // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FQueueAnalytics) == 0x000008, "Wrong alignment on FQueueAnalytics");
static_assert(sizeof(FQueueAnalytics) == 0x000170, "Wrong size on FQueueAnalytics");
static_assert(offsetof(FQueueAnalytics, TimesQueuedSurvivor) == 0x0000B8, "Member 'FQueueAnalytics::TimesQueuedSurvivor' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimesQueuedKiller) == 0x0000BC, "Member 'FQueueAnalytics::TimesQueuedKiller' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, MatchesAsSurvivor) == 0x0000C0, "Member 'FQueueAnalytics::MatchesAsSurvivor' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, MatchesAsKiller) == 0x0000C4, "Member 'FQueueAnalytics::MatchesAsKiller' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, SelectedCountry) == 0x0000C8, "Member 'FQueueAnalytics::SelectedCountry' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, PlayerName) == 0x0000D8, "Member 'FQueueAnalytics::PlayerName' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, FirstTimePlaying) == 0x0000E8, "Member 'FQueueAnalytics::FirstTimePlaying' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, CumulativeMatches) == 0x0000EC, "Member 'FQueueAnalytics::CumulativeMatches' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, CumulativeMatchesAsSurvivor) == 0x0000F0, "Member 'FQueueAnalytics::CumulativeMatchesAsSurvivor' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, CumulativeMatchesAsKiller) == 0x0000F4, "Member 'FQueueAnalytics::CumulativeMatchesAsKiller' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, LastMatchTimestamp) == 0x0000F8, "Member 'FQueueAnalytics::LastMatchTimestamp' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, SessionStartTimestamp) == 0x000108, "Member 'FQueueAnalytics::SessionStartTimestamp' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, SessionEndTimestamp) == 0x000118, "Member 'FQueueAnalytics::SessionEndTimestamp' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, LastSessionTimestamp) == 0x000128, "Member 'FQueueAnalytics::LastSessionTimestamp' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, CumulativeSessions) == 0x000138, "Member 'FQueueAnalytics::CumulativeSessions' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, CumulativePlaytime) == 0x00013C, "Member 'FQueueAnalytics::CumulativePlaytime' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInCharacterMenu) == 0x000140, "Member 'FQueueAnalytics::TimeInCharacterMenu' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInBloodwebMenu) == 0x000144, "Member 'FQueueAnalytics::TimeInBloodwebMenu' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInLoadoutMenu) == 0x000148, "Member 'FQueueAnalytics::TimeInLoadoutMenu' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInCustomizationMenu) == 0x00014C, "Member 'FQueueAnalytics::TimeInCustomizationMenu' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInFearMarket) == 0x000150, "Member 'FQueueAnalytics::TimeInFearMarket' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInTallyScreen) == 0x000154, "Member 'FQueueAnalytics::TimeInTallyScreen' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInGameMatch) == 0x000158, "Member 'FQueueAnalytics::TimeInGameMatch' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInHelpMenu) == 0x00015C, "Member 'FQueueAnalytics::TimeInHelpMenu' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInOfflineLobby) == 0x000160, "Member 'FQueueAnalytics::TimeInOfflineLobby' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInOfflineLobbySurvivorGroup) == 0x000164, "Member 'FQueueAnalytics::TimeInOfflineLobbySurvivorGroup' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInOnlineLobby) == 0x000168, "Member 'FQueueAnalytics::TimeInOnlineLobby' has a wrong offset!");
static_assert(offsetof(FQueueAnalytics, TimeInOnlineLobbySurvivorGroup) == 0x00016C, "Member 'FQueueAnalytics::TimeInOnlineLobbySurvivorGroup' has a wrong offset!");

// ScriptStruct DBDAnalytics.WaitTimeAnalytics
// 0x0080 (0x0138 - 0x00B8)
struct FWaitTimeAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	float                                         EnterLobbyWaitTime;                                // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnterMatchWaitTime;                                // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchWaitStartUtc;                                 // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchWaitStopUtc;                                  // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyWaitStartUtc;                                 // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyWaitStopUtc;                                  // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyWaitStopReason;                               // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameType                                     GameMode;                                          // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x0121(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_122[0x2];                                      // 0x0122(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PartySize;                                         // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RankDifference;                                    // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DaysSinceReset;                                    // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWaitTimeAnalytics) == 0x000008, "Wrong alignment on FWaitTimeAnalytics");
static_assert(sizeof(FWaitTimeAnalytics) == 0x000138, "Wrong size on FWaitTimeAnalytics");
static_assert(offsetof(FWaitTimeAnalytics, EnterLobbyWaitTime) == 0x0000B8, "Member 'FWaitTimeAnalytics::EnterLobbyWaitTime' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, EnterMatchWaitTime) == 0x0000BC, "Member 'FWaitTimeAnalytics::EnterMatchWaitTime' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, MatchWaitStartUtc) == 0x0000C0, "Member 'FWaitTimeAnalytics::MatchWaitStartUtc' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, MatchWaitStopUtc) == 0x0000D0, "Member 'FWaitTimeAnalytics::MatchWaitStopUtc' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, LobbyWaitStartUtc) == 0x0000E0, "Member 'FWaitTimeAnalytics::LobbyWaitStartUtc' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, LobbyWaitStopUtc) == 0x0000F0, "Member 'FWaitTimeAnalytics::LobbyWaitStopUtc' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, LobbyWaitStopReason) == 0x000100, "Member 'FWaitTimeAnalytics::LobbyWaitStopReason' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, MatchID) == 0x000110, "Member 'FWaitTimeAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, GameMode) == 0x000120, "Member 'FWaitTimeAnalytics::GameMode' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, Role) == 0x000121, "Member 'FWaitTimeAnalytics::Role' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, PartySize) == 0x000124, "Member 'FWaitTimeAnalytics::PartySize' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, Rank) == 0x000128, "Member 'FWaitTimeAnalytics::Rank' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, RankDifference) == 0x00012C, "Member 'FWaitTimeAnalytics::RankDifference' has a wrong offset!");
static_assert(offsetof(FWaitTimeAnalytics, DaysSinceReset) == 0x000130, "Member 'FWaitTimeAnalytics::DaysSinceReset' has a wrong offset!");

// ScriptStruct DBDAnalytics.MatchRatingAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FMatchRatingAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         Rating;                                            // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchRatingAnalytics) == 0x000008, "Wrong alignment on FMatchRatingAnalytics");
static_assert(sizeof(FMatchRatingAnalytics) == 0x0000D0, "Wrong size on FMatchRatingAnalytics");
static_assert(offsetof(FMatchRatingAnalytics, Rating) == 0x0000B8, "Member 'FMatchRatingAnalytics::Rating' has a wrong offset!");
static_assert(offsetof(FMatchRatingAnalytics, MatchID) == 0x0000C0, "Member 'FMatchRatingAnalytics::MatchID' has a wrong offset!");

// ScriptStruct DBDAnalytics.MemoryUsageAnalytics
// 0x0040 (0x00F8 - 0x00B8)
struct FMemoryUsageAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 GameFlowStep;                                      // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalPhysical;                                     // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         TotalVirtual;                                      // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PeakUsedPhysical;                                  // 0x00D8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         PeakUsedVirtual;                                   // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AvailablePhysical;                                 // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AvailableVirtual;                                  // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMemoryUsageAnalytics) == 0x000008, "Wrong alignment on FMemoryUsageAnalytics");
static_assert(sizeof(FMemoryUsageAnalytics) == 0x0000F8, "Wrong size on FMemoryUsageAnalytics");
static_assert(offsetof(FMemoryUsageAnalytics, GameFlowStep) == 0x0000B8, "Member 'FMemoryUsageAnalytics::GameFlowStep' has a wrong offset!");
static_assert(offsetof(FMemoryUsageAnalytics, TotalPhysical) == 0x0000C8, "Member 'FMemoryUsageAnalytics::TotalPhysical' has a wrong offset!");
static_assert(offsetof(FMemoryUsageAnalytics, TotalVirtual) == 0x0000D0, "Member 'FMemoryUsageAnalytics::TotalVirtual' has a wrong offset!");
static_assert(offsetof(FMemoryUsageAnalytics, PeakUsedPhysical) == 0x0000D8, "Member 'FMemoryUsageAnalytics::PeakUsedPhysical' has a wrong offset!");
static_assert(offsetof(FMemoryUsageAnalytics, PeakUsedVirtual) == 0x0000E0, "Member 'FMemoryUsageAnalytics::PeakUsedVirtual' has a wrong offset!");
static_assert(offsetof(FMemoryUsageAnalytics, AvailablePhysical) == 0x0000E8, "Member 'FMemoryUsageAnalytics::AvailablePhysical' has a wrong offset!");
static_assert(offsetof(FMemoryUsageAnalytics, AvailableVirtual) == 0x0000F0, "Member 'FMemoryUsageAnalytics::AvailableVirtual' has a wrong offset!");

// ScriptStruct DBDAnalytics.StoreMenuFlowAnalytics
// 0x0030 (0x00E8 - 0x00B8)
struct FStoreMenuFlowAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 EventTimestamp;                                    // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Data;                                              // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStoreMenuFlowAnalytics) == 0x000008, "Wrong alignment on FStoreMenuFlowAnalytics");
static_assert(sizeof(FStoreMenuFlowAnalytics) == 0x0000E8, "Wrong size on FStoreMenuFlowAnalytics");
static_assert(offsetof(FStoreMenuFlowAnalytics, EventTimestamp) == 0x0000B8, "Member 'FStoreMenuFlowAnalytics::EventTimestamp' has a wrong offset!");
static_assert(offsetof(FStoreMenuFlowAnalytics, EventName) == 0x0000C8, "Member 'FStoreMenuFlowAnalytics::EventName' has a wrong offset!");
static_assert(offsetof(FStoreMenuFlowAnalytics, Data) == 0x0000D8, "Member 'FStoreMenuFlowAnalytics::Data' has a wrong offset!");

// ScriptStruct DBDAnalytics.MenuFlowTabData
// 0x0038 (0x0038 - 0x0000)
struct FMenuFlowTabData final
{
public:
	class FString                                 CurrentTab;                                        // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviousTab;                                       // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOnPreviousTab;                                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TabChangeTimestamp;                                // 0x0028(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuFlowTabData) == 0x000008, "Wrong alignment on FMenuFlowTabData");
static_assert(sizeof(FMenuFlowTabData) == 0x000038, "Wrong size on FMenuFlowTabData");
static_assert(offsetof(FMenuFlowTabData, CurrentTab) == 0x000000, "Member 'FMenuFlowTabData::CurrentTab' has a wrong offset!");
static_assert(offsetof(FMenuFlowTabData, PreviousTab) == 0x000010, "Member 'FMenuFlowTabData::PreviousTab' has a wrong offset!");
static_assert(offsetof(FMenuFlowTabData, TimeOnPreviousTab) == 0x000020, "Member 'FMenuFlowTabData::TimeOnPreviousTab' has a wrong offset!");
static_assert(offsetof(FMenuFlowTabData, TabChangeTimestamp) == 0x000028, "Member 'FMenuFlowTabData::TabChangeTimestamp' has a wrong offset!");

// ScriptStruct DBDAnalytics.MenuFlowButtonPressData
// 0x0020 (0x0020 - 0x0000)
struct FMenuFlowButtonPressData final
{
public:
	class FString                                 Button;                                            // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ButtonPressTimestamp;                              // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuFlowButtonPressData) == 0x000008, "Wrong alignment on FMenuFlowButtonPressData");
static_assert(sizeof(FMenuFlowButtonPressData) == 0x000020, "Wrong size on FMenuFlowButtonPressData");
static_assert(offsetof(FMenuFlowButtonPressData, Button) == 0x000000, "Member 'FMenuFlowButtonPressData::Button' has a wrong offset!");
static_assert(offsetof(FMenuFlowButtonPressData, ButtonPressTimestamp) == 0x000010, "Member 'FMenuFlowButtonPressData::ButtonPressTimestamp' has a wrong offset!");

// ScriptStruct DBDAnalytics.MenuFlowAnalytics
// 0x00A0 (0x0158 - 0x00B8)
struct FMenuFlowAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 CurrentContext;                                    // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CurrentContextIsUMG;                               // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PreviousContext;                                   // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeOnCurrentContext;                              // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContextChangeTimestamp;                            // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbyId;                                           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMenuFlowTabData>               Tabs;                                              // 0x0118(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMenuFlowButtonPressData>       Buttons;                                           // 0x0128(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 StoreSessionGuid;                                  // 0x0138(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LobbySessionGuid;                                  // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuFlowAnalytics) == 0x000008, "Wrong alignment on FMenuFlowAnalytics");
static_assert(sizeof(FMenuFlowAnalytics) == 0x000158, "Wrong size on FMenuFlowAnalytics");
static_assert(offsetof(FMenuFlowAnalytics, CurrentContext) == 0x0000B8, "Member 'FMenuFlowAnalytics::CurrentContext' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, CurrentContextIsUMG) == 0x0000C8, "Member 'FMenuFlowAnalytics::CurrentContextIsUMG' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, PreviousContext) == 0x0000D0, "Member 'FMenuFlowAnalytics::PreviousContext' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, TimeOnCurrentContext) == 0x0000E0, "Member 'FMenuFlowAnalytics::TimeOnCurrentContext' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, ContextChangeTimestamp) == 0x0000E8, "Member 'FMenuFlowAnalytics::ContextChangeTimestamp' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, MatchID) == 0x0000F8, "Member 'FMenuFlowAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, LobbyId) == 0x000108, "Member 'FMenuFlowAnalytics::LobbyId' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, Tabs) == 0x000118, "Member 'FMenuFlowAnalytics::Tabs' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, Buttons) == 0x000128, "Member 'FMenuFlowAnalytics::Buttons' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, StoreSessionGuid) == 0x000138, "Member 'FMenuFlowAnalytics::StoreSessionGuid' has a wrong offset!");
static_assert(offsetof(FMenuFlowAnalytics, LobbySessionGuid) == 0x000148, "Member 'FMenuFlowAnalytics::LobbySessionGuid' has a wrong offset!");

// ScriptStruct DBDAnalytics.OnboardingAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FOnboardingAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         TabIndex;                                          // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameManualIndex;                                   // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventTimestamp;                                    // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnboardingAnalytics) == 0x000008, "Wrong alignment on FOnboardingAnalytics");
static_assert(sizeof(FOnboardingAnalytics) == 0x0000D0, "Wrong size on FOnboardingAnalytics");
static_assert(offsetof(FOnboardingAnalytics, TabIndex) == 0x0000B8, "Member 'FOnboardingAnalytics::TabIndex' has a wrong offset!");
static_assert(offsetof(FOnboardingAnalytics, GameManualIndex) == 0x0000BC, "Member 'FOnboardingAnalytics::GameManualIndex' has a wrong offset!");
static_assert(offsetof(FOnboardingAnalytics, EventTimestamp) == 0x0000C0, "Member 'FOnboardingAnalytics::EventTimestamp' has a wrong offset!");

// ScriptStruct DBDAnalytics.OnlineSessionErrorAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FOnlineSessionErrorAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Reason;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOnlineSessionErrorAnalytics) == 0x000008, "Wrong alignment on FOnlineSessionErrorAnalytics");
static_assert(sizeof(FOnlineSessionErrorAnalytics) == 0x0000C8, "Wrong size on FOnlineSessionErrorAnalytics");
static_assert(offsetof(FOnlineSessionErrorAnalytics, Reason) == 0x0000B8, "Member 'FOnlineSessionErrorAnalytics::Reason' has a wrong offset!");

// ScriptStruct DBDAnalytics.PakValidationAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FPakValidationAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 ErrorType;                                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Filename;                                          // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChunkIndex;                                        // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        ReceivedHash;                                      // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPakValidationAnalytics) == 0x000008, "Wrong alignment on FPakValidationAnalytics");
static_assert(sizeof(FPakValidationAnalytics) == 0x0000E0, "Wrong size on FPakValidationAnalytics");
static_assert(offsetof(FPakValidationAnalytics, ErrorType) == 0x0000B8, "Member 'FPakValidationAnalytics::ErrorType' has a wrong offset!");
static_assert(offsetof(FPakValidationAnalytics, Filename) == 0x0000C8, "Member 'FPakValidationAnalytics::Filename' has a wrong offset!");
static_assert(offsetof(FPakValidationAnalytics, ChunkIndex) == 0x0000D8, "Member 'FPakValidationAnalytics::ChunkIndex' has a wrong offset!");
static_assert(offsetof(FPakValidationAnalytics, ReceivedHash) == 0x0000DC, "Member 'FPakValidationAnalytics::ReceivedHash' has a wrong offset!");

// ScriptStruct DBDAnalytics.PartyAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FPartyAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 PartyId;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyAnalytics) == 0x000008, "Wrong alignment on FPartyAnalytics");
static_assert(sizeof(FPartyAnalytics) == 0x0000C8, "Wrong size on FPartyAnalytics");
static_assert(offsetof(FPartyAnalytics, PartyId) == 0x0000B8, "Member 'FPartyAnalytics::PartyId' has a wrong offset!");

// ScriptStruct DBDAnalytics.PartyCreatedAnalytics
// 0x0008 (0x00D0 - 0x00C8)
struct FPartyCreatedAnalytics final : public FPartyAnalytics
{
public:
	bool                                          Success;                                           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyCreatedAnalytics) == 0x000008, "Wrong alignment on FPartyCreatedAnalytics");
static_assert(sizeof(FPartyCreatedAnalytics) == 0x0000D0, "Wrong size on FPartyCreatedAnalytics");
static_assert(offsetof(FPartyCreatedAnalytics, Success) == 0x0000C8, "Member 'FPartyCreatedAnalytics::Success' has a wrong offset!");

// ScriptStruct DBDAnalytics.PartyInvitedAnalytics
// 0x0018 (0x00E0 - 0x00C8)
struct FPartyInvitedAnalytics final : public FPartyAnalytics
{
public:
	class FString                                 InviteeId;                                         // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9[0x7];                                       // 0x00D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyInvitedAnalytics) == 0x000008, "Wrong alignment on FPartyInvitedAnalytics");
static_assert(sizeof(FPartyInvitedAnalytics) == 0x0000E0, "Wrong size on FPartyInvitedAnalytics");
static_assert(offsetof(FPartyInvitedAnalytics, InviteeId) == 0x0000C8, "Member 'FPartyInvitedAnalytics::InviteeId' has a wrong offset!");
static_assert(offsetof(FPartyInvitedAnalytics, Success) == 0x0000D8, "Member 'FPartyInvitedAnalytics::Success' has a wrong offset!");

// ScriptStruct DBDAnalytics.PartyGuestJoinedAnalytics
// 0x0020 (0x00E8 - 0x00C8)
struct FPartyGuestJoinedAnalytics final : public FPartyAnalytics
{
public:
	class FString                                 InviteeId;                                         // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InviteeName;                                       // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyGuestJoinedAnalytics) == 0x000008, "Wrong alignment on FPartyGuestJoinedAnalytics");
static_assert(sizeof(FPartyGuestJoinedAnalytics) == 0x0000E8, "Wrong size on FPartyGuestJoinedAnalytics");
static_assert(offsetof(FPartyGuestJoinedAnalytics, InviteeId) == 0x0000C8, "Member 'FPartyGuestJoinedAnalytics::InviteeId' has a wrong offset!");
static_assert(offsetof(FPartyGuestJoinedAnalytics, InviteeName) == 0x0000D8, "Member 'FPartyGuestJoinedAnalytics::InviteeName' has a wrong offset!");

// ScriptStruct DBDAnalytics.PartyJoinedAnalytics
// 0x0008 (0x00D0 - 0x00C8)
struct FPartyJoinedAnalytics final : public FPartyAnalytics
{
public:
	bool                                          Success;                                           // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FromJoinRequest;                                   // 0x00C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPartyJoinedAnalytics) == 0x000008, "Wrong alignment on FPartyJoinedAnalytics");
static_assert(sizeof(FPartyJoinedAnalytics) == 0x0000D0, "Wrong size on FPartyJoinedAnalytics");
static_assert(offsetof(FPartyJoinedAnalytics, Success) == 0x0000C8, "Member 'FPartyJoinedAnalytics::Success' has a wrong offset!");
static_assert(offsetof(FPartyJoinedAnalytics, FromJoinRequest) == 0x0000C9, "Member 'FPartyJoinedAnalytics::FromJoinRequest' has a wrong offset!");

// ScriptStruct DBDAnalytics.PartyDisbandedAnalytics
// 0x0010 (0x00D8 - 0x00C8)
struct FPartyDisbandedAnalytics final : public FPartyAnalytics
{
public:
	class FString                                 Error;                                             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyDisbandedAnalytics) == 0x000008, "Wrong alignment on FPartyDisbandedAnalytics");
static_assert(sizeof(FPartyDisbandedAnalytics) == 0x0000D8, "Wrong size on FPartyDisbandedAnalytics");
static_assert(offsetof(FPartyDisbandedAnalytics, Error) == 0x0000C8, "Member 'FPartyDisbandedAnalytics::Error' has a wrong offset!");

// ScriptStruct DBDAnalytics.PartyErrorAnalytics
// 0x0010 (0x00D8 - 0x00C8)
struct FPartyErrorAnalytics final : public FPartyAnalytics
{
public:
	class FString                                 Error;                                             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyErrorAnalytics) == 0x000008, "Wrong alignment on FPartyErrorAnalytics");
static_assert(sizeof(FPartyErrorAnalytics) == 0x0000D8, "Wrong size on FPartyErrorAnalytics");
static_assert(offsetof(FPartyErrorAnalytics, Error) == 0x0000C8, "Member 'FPartyErrorAnalytics::Error' has a wrong offset!");

// ScriptStruct DBDAnalytics.PartyJoinFailureAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FPartyJoinFailureAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 PartyMembersFriendshipStatus;                      // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumKrakenConfirmedFriendsInParty;                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        NumPlatformAcceptedFriendsInParty;                 // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPartyJoinFailureAnalytics) == 0x000008, "Wrong alignment on FPartyJoinFailureAnalytics");
static_assert(sizeof(FPartyJoinFailureAnalytics) == 0x0000D0, "Wrong size on FPartyJoinFailureAnalytics");
static_assert(offsetof(FPartyJoinFailureAnalytics, PartyMembersFriendshipStatus) == 0x0000B8, "Member 'FPartyJoinFailureAnalytics::PartyMembersFriendshipStatus' has a wrong offset!");
static_assert(offsetof(FPartyJoinFailureAnalytics, NumKrakenConfirmedFriendsInParty) == 0x0000C8, "Member 'FPartyJoinFailureAnalytics::NumKrakenConfirmedFriendsInParty' has a wrong offset!");
static_assert(offsetof(FPartyJoinFailureAnalytics, NumPlatformAcceptedFriendsInParty) == 0x0000CC, "Member 'FPartyJoinFailureAnalytics::NumPlatformAcceptedFriendsInParty' has a wrong offset!");

// ScriptStruct DBDAnalytics.ConcurrentGameInstanceMessage
// 0x0030 (0x0030 - 0x0000)
struct FConcurrentGameInstanceMessage final
{
public:
	struct FGuid                                  InstanceId;                                        // 0x0000(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         Timestamp;                                         // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentMap;                                        // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActiveMatch;                                       // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FConcurrentGameInstanceMessage) == 0x000008, "Wrong alignment on FConcurrentGameInstanceMessage");
static_assert(sizeof(FConcurrentGameInstanceMessage) == 0x000030, "Wrong size on FConcurrentGameInstanceMessage");
static_assert(offsetof(FConcurrentGameInstanceMessage, InstanceId) == 0x000000, "Member 'FConcurrentGameInstanceMessage::InstanceId' has a wrong offset!");
static_assert(offsetof(FConcurrentGameInstanceMessage, Timestamp) == 0x000010, "Member 'FConcurrentGameInstanceMessage::Timestamp' has a wrong offset!");
static_assert(offsetof(FConcurrentGameInstanceMessage, CurrentMap) == 0x000018, "Member 'FConcurrentGameInstanceMessage::CurrentMap' has a wrong offset!");
static_assert(offsetof(FConcurrentGameInstanceMessage, ActiveMatch) == 0x000028, "Member 'FConcurrentGameInstanceMessage::ActiveMatch' has a wrong offset!");

// ScriptStruct DBDAnalytics.PerformanceAnalytics
// 0x0338 (0x03F0 - 0x00B8)
struct FPerformanceAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	float                                         AverageFPS;                                        // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFPS;                                            // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFPS;                                            // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageFrameTime;                                  // 0x00C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFrameTime;                                      // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFrameTime;                                      // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardDeviationFrameTime;                        // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow60msFrameTime;                         // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow47msFrameTime;                         // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow34msFrameTime;                         // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow17msFrameTime;                         // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentHitchesFrameTime;                           // 0x00E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageRenderThreadTime;                           // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRenderThreadTime;                               // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRenderThreadTime;                               // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardDeviationRenderThreadTime;                 // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow60msRenderThreadTime;                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow47msRenderThreadTime;                  // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow34msRenderThreadTime;                  // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow17msRenderThreadTime;                  // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentHitchesRenderThreadTime;                    // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageGameThreadTime;                             // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGameThreadTime;                                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGameThreadTime;                                 // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardDeviationGameThreadTime;                   // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow60msGameThreadTime;                    // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow47msGameThreadTime;                    // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow34msGameThreadTime;                    // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow17msGameThreadTime;                    // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentHitchesGameThreadTime;                      // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageRhiThreadTime;                              // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinRhiThreadTime;                                  // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRhiThreadTime;                                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardDeviationRhiThreadTime;                    // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow60msRhiThreadTime;                     // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow47msRhiThreadTime;                     // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow34msRhiThreadTime;                     // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow17msRhiThreadTime;                     // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentHitchesRhiThreadTime;                       // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageGpuTime;                                    // 0x0154(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinGpuTime;                                        // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxGpuTime;                                        // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardDeviationGpuTime;                          // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow60msGpuTime;                           // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow47msGpuTime;                           // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow34msGpuTime;                           // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentBelow17msGpuTime;                           // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentHitchesGpuTime;                             // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageSlateTickTime;                              // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageSlateRenderThreadTime;                      // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageSlateDrawWindowTime;                        // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdaptiveShadowMapAverageNumShadowPrimitivesPerCapture; // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdaptiveShadowMapAverageActiveLightsPerFrame;      // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdaptiveShadowMapPercentageOfFrameCapturingTiles;  // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitchesPerMinute50ms;                              // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitchesPerMinute100ms;                             // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitchesPerMinute200ms;                             // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitchesPerMinute400ms;                             // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitchesPerMinute800ms;                             // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitchesPerMinute1600ms;                            // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitchesPerMinute3200ms;                            // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitchesPerMinute6400ms;                            // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitchesPerMinute12800ms;                           // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageInputLatency;                               // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInputLatency;                                   // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInputLatency;                                   // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageOutputLatency;                              // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinOutputLatency;                                  // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOutputLatency;                                  // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageStandardDeviation;                          // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinStandardDeviation;                              // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStandardDeviation;                              // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DeviceProfile;                                     // 0x01D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageMemoryAvailablePhysicalMB;                  // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMemoryAvailablePhysicalMB;                      // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMemoryAvailablePhysicalMB;                      // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageMemoryAvailableVirtualMB;                   // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMemoryAvailableVirtualMB;                       // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMemoryAvailableVirtualMB;                       // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageMemoryTotalPhysicalMB;                      // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMemoryTotalPhysicalMB;                          // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMemoryTotalPhysicalMB;                          // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageMemoryTotalVirtualMB;                       // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMemoryTotalVirtualMB;                           // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMemoryTotalVirtualMB;                           // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageMemoryUsedPhysicalMB;                       // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMemoryUsedPhysicalMB;                           // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMemoryUsedPhysicalMB;                           // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageMemoryUsedVirtualMB;                        // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinMemoryUsedVirtualMB;                            // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMemoryUsedVirtualMB;                            // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AveragePing;                                       // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPing;                                           // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPing;                                           // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageInBytesPerSecond;                           // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInBytesPerSecond;                               // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInBytesPerSecond;                               // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageOutBytesPerSecond;                          // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinOutBytesPerSecond;                              // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxOutBytesPerSecond;                              // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageInOutBytesPerSecond;                        // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinInOutBytesPerSecond;                            // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxInOutBytesPerSecond;                            // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicResolutionScreenPercentageAvg;              // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicResolutionScreenPercentageMax;              // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DynamicResolutionScreenPercentageMin;              // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchCount;                                        // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFrames;                                       // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResolutionQuality;                                 // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ViewDistanceQuality;                               // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AntiAliasingQuality;                               // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AntiAliasingMode;                                  // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameCap;                                          // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVsyncEnable;                                     // 0x0288(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFSREnabled;                                      // 0x0289(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A[0x2];                                      // 0x028A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SharpnessValue;                                    // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShadowQuality;                                     // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TextureQuality;                                    // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectsQuality;                                    // 0x0298(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FoliageQuality;                                    // 0x029C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Scenario;                                          // 0x02A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Theme;                                             // 0x02B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x02C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TileListCount;                                     // 0x02D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x02D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x02D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cpu;                                               // 0x02E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GpuAdapter;                                        // 0x02F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0308(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RHIName;                                           // 0x0318(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSample;                                          // 0x0328(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_329[0x7];                                      // 0x0329(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameFlowStep;                                      // 0x0330(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KrakenMatchId;                                     // 0x0340(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         Characters;                                        // 0x0350(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Perks;                                             // 0x0360(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         CustomizationItems;                                // 0x0370(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 GameType;                                          // 0x0380(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FleetType;                                         // 0x0390(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InstanceType;                                      // 0x03A0(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageNumberOfConcurrentGameProcess;              // 0x03B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNumberOfConcurrentGameProcess;                  // 0x03B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNumberOfConcurrentGameProcess;                  // 0x03B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AverageNumberOfConcurrentGameProcessInMatch;       // 0x03BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinNumberOfConcurrentGameProcessInMatch;           // 0x03C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxNumberOfConcurrentGameProcessInMatch;           // 0x03C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         ConcurrentMaps;                                    // 0x03C8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class FString                                 Country;                                           // 0x03D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOutlineVisibleCount;                            // 0x03E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OppositeOutlinePercent;                            // 0x03EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerformanceAnalytics) == 0x000008, "Wrong alignment on FPerformanceAnalytics");
static_assert(sizeof(FPerformanceAnalytics) == 0x0003F0, "Wrong size on FPerformanceAnalytics");
static_assert(offsetof(FPerformanceAnalytics, AverageFPS) == 0x0000B8, "Member 'FPerformanceAnalytics::AverageFPS' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinFPS) == 0x0000BC, "Member 'FPerformanceAnalytics::MinFPS' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxFPS) == 0x0000C0, "Member 'FPerformanceAnalytics::MaxFPS' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageFrameTime) == 0x0000C4, "Member 'FPerformanceAnalytics::AverageFrameTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinFrameTime) == 0x0000C8, "Member 'FPerformanceAnalytics::MinFrameTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxFrameTime) == 0x0000CC, "Member 'FPerformanceAnalytics::MaxFrameTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, StandardDeviationFrameTime) == 0x0000D0, "Member 'FPerformanceAnalytics::StandardDeviationFrameTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow60msFrameTime) == 0x0000D4, "Member 'FPerformanceAnalytics::PercentBelow60msFrameTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow47msFrameTime) == 0x0000D8, "Member 'FPerformanceAnalytics::PercentBelow47msFrameTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow34msFrameTime) == 0x0000DC, "Member 'FPerformanceAnalytics::PercentBelow34msFrameTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow17msFrameTime) == 0x0000E0, "Member 'FPerformanceAnalytics::PercentBelow17msFrameTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentHitchesFrameTime) == 0x0000E4, "Member 'FPerformanceAnalytics::PercentHitchesFrameTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageRenderThreadTime) == 0x0000E8, "Member 'FPerformanceAnalytics::AverageRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinRenderThreadTime) == 0x0000EC, "Member 'FPerformanceAnalytics::MinRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxRenderThreadTime) == 0x0000F0, "Member 'FPerformanceAnalytics::MaxRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, StandardDeviationRenderThreadTime) == 0x0000F4, "Member 'FPerformanceAnalytics::StandardDeviationRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow60msRenderThreadTime) == 0x0000F8, "Member 'FPerformanceAnalytics::PercentBelow60msRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow47msRenderThreadTime) == 0x0000FC, "Member 'FPerformanceAnalytics::PercentBelow47msRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow34msRenderThreadTime) == 0x000100, "Member 'FPerformanceAnalytics::PercentBelow34msRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow17msRenderThreadTime) == 0x000104, "Member 'FPerformanceAnalytics::PercentBelow17msRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentHitchesRenderThreadTime) == 0x000108, "Member 'FPerformanceAnalytics::PercentHitchesRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageGameThreadTime) == 0x00010C, "Member 'FPerformanceAnalytics::AverageGameThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinGameThreadTime) == 0x000110, "Member 'FPerformanceAnalytics::MinGameThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxGameThreadTime) == 0x000114, "Member 'FPerformanceAnalytics::MaxGameThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, StandardDeviationGameThreadTime) == 0x000118, "Member 'FPerformanceAnalytics::StandardDeviationGameThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow60msGameThreadTime) == 0x00011C, "Member 'FPerformanceAnalytics::PercentBelow60msGameThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow47msGameThreadTime) == 0x000120, "Member 'FPerformanceAnalytics::PercentBelow47msGameThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow34msGameThreadTime) == 0x000124, "Member 'FPerformanceAnalytics::PercentBelow34msGameThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow17msGameThreadTime) == 0x000128, "Member 'FPerformanceAnalytics::PercentBelow17msGameThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentHitchesGameThreadTime) == 0x00012C, "Member 'FPerformanceAnalytics::PercentHitchesGameThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageRhiThreadTime) == 0x000130, "Member 'FPerformanceAnalytics::AverageRhiThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinRhiThreadTime) == 0x000134, "Member 'FPerformanceAnalytics::MinRhiThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxRhiThreadTime) == 0x000138, "Member 'FPerformanceAnalytics::MaxRhiThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, StandardDeviationRhiThreadTime) == 0x00013C, "Member 'FPerformanceAnalytics::StandardDeviationRhiThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow60msRhiThreadTime) == 0x000140, "Member 'FPerformanceAnalytics::PercentBelow60msRhiThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow47msRhiThreadTime) == 0x000144, "Member 'FPerformanceAnalytics::PercentBelow47msRhiThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow34msRhiThreadTime) == 0x000148, "Member 'FPerformanceAnalytics::PercentBelow34msRhiThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow17msRhiThreadTime) == 0x00014C, "Member 'FPerformanceAnalytics::PercentBelow17msRhiThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentHitchesRhiThreadTime) == 0x000150, "Member 'FPerformanceAnalytics::PercentHitchesRhiThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageGpuTime) == 0x000154, "Member 'FPerformanceAnalytics::AverageGpuTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinGpuTime) == 0x000158, "Member 'FPerformanceAnalytics::MinGpuTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxGpuTime) == 0x00015C, "Member 'FPerformanceAnalytics::MaxGpuTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, StandardDeviationGpuTime) == 0x000160, "Member 'FPerformanceAnalytics::StandardDeviationGpuTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow60msGpuTime) == 0x000164, "Member 'FPerformanceAnalytics::PercentBelow60msGpuTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow47msGpuTime) == 0x000168, "Member 'FPerformanceAnalytics::PercentBelow47msGpuTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow34msGpuTime) == 0x00016C, "Member 'FPerformanceAnalytics::PercentBelow34msGpuTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentBelow17msGpuTime) == 0x000170, "Member 'FPerformanceAnalytics::PercentBelow17msGpuTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, PercentHitchesGpuTime) == 0x000174, "Member 'FPerformanceAnalytics::PercentHitchesGpuTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageSlateTickTime) == 0x000178, "Member 'FPerformanceAnalytics::AverageSlateTickTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageSlateRenderThreadTime) == 0x00017C, "Member 'FPerformanceAnalytics::AverageSlateRenderThreadTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageSlateDrawWindowTime) == 0x000180, "Member 'FPerformanceAnalytics::AverageSlateDrawWindowTime' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AdaptiveShadowMapAverageNumShadowPrimitivesPerCapture) == 0x000184, "Member 'FPerformanceAnalytics::AdaptiveShadowMapAverageNumShadowPrimitivesPerCapture' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AdaptiveShadowMapAverageActiveLightsPerFrame) == 0x000188, "Member 'FPerformanceAnalytics::AdaptiveShadowMapAverageActiveLightsPerFrame' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AdaptiveShadowMapPercentageOfFrameCapturingTiles) == 0x00018C, "Member 'FPerformanceAnalytics::AdaptiveShadowMapPercentageOfFrameCapturingTiles' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, HitchesPerMinute50ms) == 0x000190, "Member 'FPerformanceAnalytics::HitchesPerMinute50ms' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, HitchesPerMinute100ms) == 0x000194, "Member 'FPerformanceAnalytics::HitchesPerMinute100ms' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, HitchesPerMinute200ms) == 0x000198, "Member 'FPerformanceAnalytics::HitchesPerMinute200ms' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, HitchesPerMinute400ms) == 0x00019C, "Member 'FPerformanceAnalytics::HitchesPerMinute400ms' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, HitchesPerMinute800ms) == 0x0001A0, "Member 'FPerformanceAnalytics::HitchesPerMinute800ms' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, HitchesPerMinute1600ms) == 0x0001A4, "Member 'FPerformanceAnalytics::HitchesPerMinute1600ms' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, HitchesPerMinute3200ms) == 0x0001A8, "Member 'FPerformanceAnalytics::HitchesPerMinute3200ms' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, HitchesPerMinute6400ms) == 0x0001AC, "Member 'FPerformanceAnalytics::HitchesPerMinute6400ms' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, HitchesPerMinute12800ms) == 0x0001B0, "Member 'FPerformanceAnalytics::HitchesPerMinute12800ms' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageInputLatency) == 0x0001B4, "Member 'FPerformanceAnalytics::AverageInputLatency' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinInputLatency) == 0x0001B8, "Member 'FPerformanceAnalytics::MinInputLatency' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxInputLatency) == 0x0001BC, "Member 'FPerformanceAnalytics::MaxInputLatency' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageOutputLatency) == 0x0001C0, "Member 'FPerformanceAnalytics::AverageOutputLatency' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinOutputLatency) == 0x0001C4, "Member 'FPerformanceAnalytics::MinOutputLatency' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxOutputLatency) == 0x0001C8, "Member 'FPerformanceAnalytics::MaxOutputLatency' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageStandardDeviation) == 0x0001CC, "Member 'FPerformanceAnalytics::AverageStandardDeviation' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinStandardDeviation) == 0x0001D0, "Member 'FPerformanceAnalytics::MinStandardDeviation' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxStandardDeviation) == 0x0001D4, "Member 'FPerformanceAnalytics::MaxStandardDeviation' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, DeviceProfile) == 0x0001D8, "Member 'FPerformanceAnalytics::DeviceProfile' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageMemoryAvailablePhysicalMB) == 0x0001E8, "Member 'FPerformanceAnalytics::AverageMemoryAvailablePhysicalMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinMemoryAvailablePhysicalMB) == 0x0001EC, "Member 'FPerformanceAnalytics::MinMemoryAvailablePhysicalMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxMemoryAvailablePhysicalMB) == 0x0001F0, "Member 'FPerformanceAnalytics::MaxMemoryAvailablePhysicalMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageMemoryAvailableVirtualMB) == 0x0001F4, "Member 'FPerformanceAnalytics::AverageMemoryAvailableVirtualMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinMemoryAvailableVirtualMB) == 0x0001F8, "Member 'FPerformanceAnalytics::MinMemoryAvailableVirtualMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxMemoryAvailableVirtualMB) == 0x0001FC, "Member 'FPerformanceAnalytics::MaxMemoryAvailableVirtualMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageMemoryTotalPhysicalMB) == 0x000200, "Member 'FPerformanceAnalytics::AverageMemoryTotalPhysicalMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinMemoryTotalPhysicalMB) == 0x000204, "Member 'FPerformanceAnalytics::MinMemoryTotalPhysicalMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxMemoryTotalPhysicalMB) == 0x000208, "Member 'FPerformanceAnalytics::MaxMemoryTotalPhysicalMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageMemoryTotalVirtualMB) == 0x00020C, "Member 'FPerformanceAnalytics::AverageMemoryTotalVirtualMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinMemoryTotalVirtualMB) == 0x000210, "Member 'FPerformanceAnalytics::MinMemoryTotalVirtualMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxMemoryTotalVirtualMB) == 0x000214, "Member 'FPerformanceAnalytics::MaxMemoryTotalVirtualMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageMemoryUsedPhysicalMB) == 0x000218, "Member 'FPerformanceAnalytics::AverageMemoryUsedPhysicalMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinMemoryUsedPhysicalMB) == 0x00021C, "Member 'FPerformanceAnalytics::MinMemoryUsedPhysicalMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxMemoryUsedPhysicalMB) == 0x000220, "Member 'FPerformanceAnalytics::MaxMemoryUsedPhysicalMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageMemoryUsedVirtualMB) == 0x000224, "Member 'FPerformanceAnalytics::AverageMemoryUsedVirtualMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinMemoryUsedVirtualMB) == 0x000228, "Member 'FPerformanceAnalytics::MinMemoryUsedVirtualMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxMemoryUsedVirtualMB) == 0x00022C, "Member 'FPerformanceAnalytics::MaxMemoryUsedVirtualMB' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AveragePing) == 0x000230, "Member 'FPerformanceAnalytics::AveragePing' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinPing) == 0x000234, "Member 'FPerformanceAnalytics::MinPing' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxPing) == 0x000238, "Member 'FPerformanceAnalytics::MaxPing' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageInBytesPerSecond) == 0x00023C, "Member 'FPerformanceAnalytics::AverageInBytesPerSecond' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinInBytesPerSecond) == 0x000240, "Member 'FPerformanceAnalytics::MinInBytesPerSecond' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxInBytesPerSecond) == 0x000244, "Member 'FPerformanceAnalytics::MaxInBytesPerSecond' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageOutBytesPerSecond) == 0x000248, "Member 'FPerformanceAnalytics::AverageOutBytesPerSecond' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinOutBytesPerSecond) == 0x00024C, "Member 'FPerformanceAnalytics::MinOutBytesPerSecond' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxOutBytesPerSecond) == 0x000250, "Member 'FPerformanceAnalytics::MaxOutBytesPerSecond' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageInOutBytesPerSecond) == 0x000254, "Member 'FPerformanceAnalytics::AverageInOutBytesPerSecond' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinInOutBytesPerSecond) == 0x000258, "Member 'FPerformanceAnalytics::MinInOutBytesPerSecond' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxInOutBytesPerSecond) == 0x00025C, "Member 'FPerformanceAnalytics::MaxInOutBytesPerSecond' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, DynamicResolutionScreenPercentageAvg) == 0x000260, "Member 'FPerformanceAnalytics::DynamicResolutionScreenPercentageAvg' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, DynamicResolutionScreenPercentageMax) == 0x000264, "Member 'FPerformanceAnalytics::DynamicResolutionScreenPercentageMax' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, DynamicResolutionScreenPercentageMin) == 0x000268, "Member 'FPerformanceAnalytics::DynamicResolutionScreenPercentageMin' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MatchCount) == 0x00026C, "Member 'FPerformanceAnalytics::MatchCount' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, TotalFrames) == 0x000270, "Member 'FPerformanceAnalytics::TotalFrames' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, ResolutionQuality) == 0x000274, "Member 'FPerformanceAnalytics::ResolutionQuality' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, ViewDistanceQuality) == 0x000278, "Member 'FPerformanceAnalytics::ViewDistanceQuality' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AntiAliasingQuality) == 0x00027C, "Member 'FPerformanceAnalytics::AntiAliasingQuality' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AntiAliasingMode) == 0x000280, "Member 'FPerformanceAnalytics::AntiAliasingMode' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, FrameCap) == 0x000284, "Member 'FPerformanceAnalytics::FrameCap' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, IsVsyncEnable) == 0x000288, "Member 'FPerformanceAnalytics::IsVsyncEnable' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, IsFSREnabled) == 0x000289, "Member 'FPerformanceAnalytics::IsFSREnabled' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, SharpnessValue) == 0x00028C, "Member 'FPerformanceAnalytics::SharpnessValue' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, ShadowQuality) == 0x000290, "Member 'FPerformanceAnalytics::ShadowQuality' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, TextureQuality) == 0x000294, "Member 'FPerformanceAnalytics::TextureQuality' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, EffectsQuality) == 0x000298, "Member 'FPerformanceAnalytics::EffectsQuality' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, FoliageQuality) == 0x00029C, "Member 'FPerformanceAnalytics::FoliageQuality' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, Scenario) == 0x0002A0, "Member 'FPerformanceAnalytics::Scenario' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, Theme) == 0x0002B0, "Member 'FPerformanceAnalytics::Theme' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MapName) == 0x0002C0, "Member 'FPerformanceAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, TileListCount) == 0x0002D0, "Member 'FPerformanceAnalytics::TileListCount' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, Seed) == 0x0002D4, "Member 'FPerformanceAnalytics::Seed' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, CharacterName) == 0x0002D8, "Member 'FPerformanceAnalytics::CharacterName' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, Cpu) == 0x0002E8, "Member 'FPerformanceAnalytics::Cpu' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, GpuAdapter) == 0x0002F8, "Member 'FPerformanceAnalytics::GpuAdapter' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MatchID) == 0x000308, "Member 'FPerformanceAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, RHIName) == 0x000318, "Member 'FPerformanceAnalytics::RHIName' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, IsSample) == 0x000328, "Member 'FPerformanceAnalytics::IsSample' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, GameFlowStep) == 0x000330, "Member 'FPerformanceAnalytics::GameFlowStep' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, KrakenMatchId) == 0x000340, "Member 'FPerformanceAnalytics::KrakenMatchId' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, Characters) == 0x000350, "Member 'FPerformanceAnalytics::Characters' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, Perks) == 0x000360, "Member 'FPerformanceAnalytics::Perks' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, CustomizationItems) == 0x000370, "Member 'FPerformanceAnalytics::CustomizationItems' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, GameType) == 0x000380, "Member 'FPerformanceAnalytics::GameType' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, FleetType) == 0x000390, "Member 'FPerformanceAnalytics::FleetType' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, InstanceType) == 0x0003A0, "Member 'FPerformanceAnalytics::InstanceType' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageNumberOfConcurrentGameProcess) == 0x0003B0, "Member 'FPerformanceAnalytics::AverageNumberOfConcurrentGameProcess' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinNumberOfConcurrentGameProcess) == 0x0003B4, "Member 'FPerformanceAnalytics::MinNumberOfConcurrentGameProcess' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxNumberOfConcurrentGameProcess) == 0x0003B8, "Member 'FPerformanceAnalytics::MaxNumberOfConcurrentGameProcess' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, AverageNumberOfConcurrentGameProcessInMatch) == 0x0003BC, "Member 'FPerformanceAnalytics::AverageNumberOfConcurrentGameProcessInMatch' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MinNumberOfConcurrentGameProcessInMatch) == 0x0003C0, "Member 'FPerformanceAnalytics::MinNumberOfConcurrentGameProcessInMatch' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxNumberOfConcurrentGameProcessInMatch) == 0x0003C4, "Member 'FPerformanceAnalytics::MaxNumberOfConcurrentGameProcessInMatch' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, ConcurrentMaps) == 0x0003C8, "Member 'FPerformanceAnalytics::ConcurrentMaps' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, Country) == 0x0003D8, "Member 'FPerformanceAnalytics::Country' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, MaxOutlineVisibleCount) == 0x0003E8, "Member 'FPerformanceAnalytics::MaxOutlineVisibleCount' has a wrong offset!");
static_assert(offsetof(FPerformanceAnalytics, OppositeOutlinePercent) == 0x0003EC, "Member 'FPerformanceAnalytics::OppositeOutlinePercent' has a wrong offset!");

// ScriptStruct DBDAnalytics.PerformanceChartingAnalytics
// 0x0140 (0x01F8 - 0x00B8)
struct FPerformanceChartingAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Scenario;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Theme;                                             // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map_name;                                          // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Tile_spawn_count;                                  // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Seed;                                              // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Match_id;                                          // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Character_name;                                    // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Cpu_name;                                          // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Gpu_name;                                          // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Resolution;                                        // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Graphics_quality_level;                            // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_144[0x4];                                      // 0x0144(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Hitch_times;                                       // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target_30_fps;                                     // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target_60_fps;                                     // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Target_120_fps;                                    // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Measured_perf_time;                                // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mvp;                                               // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Avg_fps;                                           // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hitches_per_minute;                                // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Avg_hitch;                                         // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_time_avg;                                    // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_time_max;                                    // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Frame_time_min;                                    // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Game_thread_avg;                                   // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Game_thread_hitches_per_min;                       // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Game_thread_bound_frames;                          // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Render_thread_avg;                                 // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Render_thread_hitches_per_min;                     // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Render_thread_bound_frames;                        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhi_thread_avg;                                    // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhi_thread_hitches_per_min;                        // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Rhi_thread_bound_frames;                           // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gpu_avg;                                           // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gpu_hitches_per_min;                               // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Gpu_bound_frames;                                  // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Draw_calls_avg;                                    // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Draw_calls_max;                                    // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Draw_calls_min;                                    // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Drawn_prims_avg;                                   // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Drawn_prims_max;                                   // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Drawn_prims_min;                                   // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cpu_memory_peak;                                   // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Cpu_memory_used;                                   // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Streaming_memory_peak;                             // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Streaming_memory_used;                             // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Physical_memory_peak;                              // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Physical_memory_used;                              // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Texturegroups_guid;                                // 0x01E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPerformanceChartingAnalytics) == 0x000008, "Wrong alignment on FPerformanceChartingAnalytics");
static_assert(sizeof(FPerformanceChartingAnalytics) == 0x0001F8, "Wrong size on FPerformanceChartingAnalytics");
static_assert(offsetof(FPerformanceChartingAnalytics, Scenario) == 0x0000B8, "Member 'FPerformanceChartingAnalytics::Scenario' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Theme) == 0x0000C8, "Member 'FPerformanceChartingAnalytics::Theme' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Map_name) == 0x0000D8, "Member 'FPerformanceChartingAnalytics::Map_name' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Tile_spawn_count) == 0x0000E8, "Member 'FPerformanceChartingAnalytics::Tile_spawn_count' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Seed) == 0x0000EC, "Member 'FPerformanceChartingAnalytics::Seed' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Match_id) == 0x0000F0, "Member 'FPerformanceChartingAnalytics::Match_id' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Character_name) == 0x000100, "Member 'FPerformanceChartingAnalytics::Character_name' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Cpu_name) == 0x000110, "Member 'FPerformanceChartingAnalytics::Cpu_name' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Gpu_name) == 0x000120, "Member 'FPerformanceChartingAnalytics::Gpu_name' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Resolution) == 0x000130, "Member 'FPerformanceChartingAnalytics::Resolution' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Graphics_quality_level) == 0x000140, "Member 'FPerformanceChartingAnalytics::Graphics_quality_level' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Hitch_times) == 0x000148, "Member 'FPerformanceChartingAnalytics::Hitch_times' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Target_30_fps) == 0x000158, "Member 'FPerformanceChartingAnalytics::Target_30_fps' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Target_60_fps) == 0x00015C, "Member 'FPerformanceChartingAnalytics::Target_60_fps' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Target_120_fps) == 0x000160, "Member 'FPerformanceChartingAnalytics::Target_120_fps' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Measured_perf_time) == 0x000164, "Member 'FPerformanceChartingAnalytics::Measured_perf_time' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Mvp) == 0x000168, "Member 'FPerformanceChartingAnalytics::Mvp' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Avg_fps) == 0x00016C, "Member 'FPerformanceChartingAnalytics::Avg_fps' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Hitches_per_minute) == 0x000170, "Member 'FPerformanceChartingAnalytics::Hitches_per_minute' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Avg_hitch) == 0x000174, "Member 'FPerformanceChartingAnalytics::Avg_hitch' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Frame_time_avg) == 0x000178, "Member 'FPerformanceChartingAnalytics::Frame_time_avg' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Frame_time_max) == 0x00017C, "Member 'FPerformanceChartingAnalytics::Frame_time_max' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Frame_time_min) == 0x000180, "Member 'FPerformanceChartingAnalytics::Frame_time_min' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Game_thread_avg) == 0x000184, "Member 'FPerformanceChartingAnalytics::Game_thread_avg' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Game_thread_hitches_per_min) == 0x000188, "Member 'FPerformanceChartingAnalytics::Game_thread_hitches_per_min' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Game_thread_bound_frames) == 0x00018C, "Member 'FPerformanceChartingAnalytics::Game_thread_bound_frames' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Render_thread_avg) == 0x000190, "Member 'FPerformanceChartingAnalytics::Render_thread_avg' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Render_thread_hitches_per_min) == 0x000194, "Member 'FPerformanceChartingAnalytics::Render_thread_hitches_per_min' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Render_thread_bound_frames) == 0x000198, "Member 'FPerformanceChartingAnalytics::Render_thread_bound_frames' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Rhi_thread_avg) == 0x00019C, "Member 'FPerformanceChartingAnalytics::Rhi_thread_avg' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Rhi_thread_hitches_per_min) == 0x0001A0, "Member 'FPerformanceChartingAnalytics::Rhi_thread_hitches_per_min' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Rhi_thread_bound_frames) == 0x0001A4, "Member 'FPerformanceChartingAnalytics::Rhi_thread_bound_frames' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Gpu_avg) == 0x0001A8, "Member 'FPerformanceChartingAnalytics::Gpu_avg' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Gpu_hitches_per_min) == 0x0001AC, "Member 'FPerformanceChartingAnalytics::Gpu_hitches_per_min' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Gpu_bound_frames) == 0x0001B0, "Member 'FPerformanceChartingAnalytics::Gpu_bound_frames' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Draw_calls_avg) == 0x0001B4, "Member 'FPerformanceChartingAnalytics::Draw_calls_avg' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Draw_calls_max) == 0x0001B8, "Member 'FPerformanceChartingAnalytics::Draw_calls_max' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Draw_calls_min) == 0x0001BC, "Member 'FPerformanceChartingAnalytics::Draw_calls_min' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Drawn_prims_avg) == 0x0001C0, "Member 'FPerformanceChartingAnalytics::Drawn_prims_avg' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Drawn_prims_max) == 0x0001C4, "Member 'FPerformanceChartingAnalytics::Drawn_prims_max' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Drawn_prims_min) == 0x0001C8, "Member 'FPerformanceChartingAnalytics::Drawn_prims_min' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Cpu_memory_peak) == 0x0001CC, "Member 'FPerformanceChartingAnalytics::Cpu_memory_peak' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Cpu_memory_used) == 0x0001D0, "Member 'FPerformanceChartingAnalytics::Cpu_memory_used' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Streaming_memory_peak) == 0x0001D4, "Member 'FPerformanceChartingAnalytics::Streaming_memory_peak' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Streaming_memory_used) == 0x0001D8, "Member 'FPerformanceChartingAnalytics::Streaming_memory_used' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Physical_memory_peak) == 0x0001DC, "Member 'FPerformanceChartingAnalytics::Physical_memory_peak' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Physical_memory_used) == 0x0001E0, "Member 'FPerformanceChartingAnalytics::Physical_memory_used' has a wrong offset!");
static_assert(offsetof(FPerformanceChartingAnalytics, Texturegroups_guid) == 0x0001E8, "Member 'FPerformanceChartingAnalytics::Texturegroups_guid' has a wrong offset!");

// ScriptStruct DBDAnalytics.PerkAcquisitionAnalytics
// 0x0048 (0x0100 - 0x00B8)
struct FPerkAcquisitionAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 CharacterName;                                     // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PerkId;                                            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PerkSource;                                        // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Duplicate;                                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerkLevel;                                         // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPerkAcquisitionAnalytics) == 0x000008, "Wrong alignment on FPerkAcquisitionAnalytics");
static_assert(sizeof(FPerkAcquisitionAnalytics) == 0x000100, "Wrong size on FPerkAcquisitionAnalytics");
static_assert(offsetof(FPerkAcquisitionAnalytics, CharacterName) == 0x0000B8, "Member 'FPerkAcquisitionAnalytics::CharacterName' has a wrong offset!");
static_assert(offsetof(FPerkAcquisitionAnalytics, PerkId) == 0x0000C8, "Member 'FPerkAcquisitionAnalytics::PerkId' has a wrong offset!");
static_assert(offsetof(FPerkAcquisitionAnalytics, PerkSource) == 0x0000D8, "Member 'FPerkAcquisitionAnalytics::PerkSource' has a wrong offset!");
static_assert(offsetof(FPerkAcquisitionAnalytics, Duplicate) == 0x0000E8, "Member 'FPerkAcquisitionAnalytics::Duplicate' has a wrong offset!");
static_assert(offsetof(FPerkAcquisitionAnalytics, PerkLevel) == 0x0000F8, "Member 'FPerkAcquisitionAnalytics::PerkLevel' has a wrong offset!");

// ScriptStruct DBDAnalytics.BasePerkAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FBasePerkAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedMatchTime;                                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FBasePerkAnalytics) == 0x000008, "Wrong alignment on FBasePerkAnalytics");
static_assert(sizeof(FBasePerkAnalytics) == 0x0000D0, "Wrong size on FBasePerkAnalytics");
static_assert(offsetof(FBasePerkAnalytics, MatchID) == 0x0000B8, "Member 'FBasePerkAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FBasePerkAnalytics, ElapsedMatchTime) == 0x0000C8, "Member 'FBasePerkAnalytics::ElapsedMatchTime' has a wrong offset!");

// ScriptStruct DBDAnalytics.LightbornAuraRevealedAnalytics
// 0x0020 (0x00F0 - 0x00D0)
struct FLightbornAuraRevealedAnalytics final : public FBasePerkAnalytics
{
public:
	class FString                                 RevealedSurvivorMirrorsId;                         // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FlashlightedSlasherMirrorsId;                      // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FLightbornAuraRevealedAnalytics) == 0x000008, "Wrong alignment on FLightbornAuraRevealedAnalytics");
static_assert(sizeof(FLightbornAuraRevealedAnalytics) == 0x0000F0, "Wrong size on FLightbornAuraRevealedAnalytics");
static_assert(offsetof(FLightbornAuraRevealedAnalytics, RevealedSurvivorMirrorsId) == 0x0000D0, "Member 'FLightbornAuraRevealedAnalytics::RevealedSurvivorMirrorsId' has a wrong offset!");
static_assert(offsetof(FLightbornAuraRevealedAnalytics, FlashlightedSlasherMirrorsId) == 0x0000E0, "Member 'FLightbornAuraRevealedAnalytics::FlashlightedSlasherMirrorsId' has a wrong offset!");

// ScriptStruct DBDAnalytics.TinkererUndetectableHitNearGeneratorAnalytics
// 0x0020 (0x00F0 - 0x00D0)
struct FTinkererUndetectableHitNearGeneratorAnalytics final : public FBasePerkAnalytics
{
public:
	class FString                                 HitSurvivorMirrorsId;                              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackingSlasherMirrorsId;                         // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTinkererUndetectableHitNearGeneratorAnalytics) == 0x000008, "Wrong alignment on FTinkererUndetectableHitNearGeneratorAnalytics");
static_assert(sizeof(FTinkererUndetectableHitNearGeneratorAnalytics) == 0x0000F0, "Wrong size on FTinkererUndetectableHitNearGeneratorAnalytics");
static_assert(offsetof(FTinkererUndetectableHitNearGeneratorAnalytics, HitSurvivorMirrorsId) == 0x0000D0, "Member 'FTinkererUndetectableHitNearGeneratorAnalytics::HitSurvivorMirrorsId' has a wrong offset!");
static_assert(offsetof(FTinkererUndetectableHitNearGeneratorAnalytics, AttackingSlasherMirrorsId) == 0x0000E0, "Member 'FTinkererUndetectableHitNearGeneratorAnalytics::AttackingSlasherMirrorsId' has a wrong offset!");

// ScriptStruct DBDAnalytics.TinkererUndetectableInterruptAnalytics
// 0x0020 (0x00F0 - 0x00D0)
struct FTinkererUndetectableInterruptAnalytics final : public FBasePerkAnalytics
{
public:
	class FString                                 InterruptedSurvivorMirrorsId;                      // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InterruptingSlasherMirrorsId;                      // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTinkererUndetectableInterruptAnalytics) == 0x000008, "Wrong alignment on FTinkererUndetectableInterruptAnalytics");
static_assert(sizeof(FTinkererUndetectableInterruptAnalytics) == 0x0000F0, "Wrong size on FTinkererUndetectableInterruptAnalytics");
static_assert(offsetof(FTinkererUndetectableInterruptAnalytics, InterruptedSurvivorMirrorsId) == 0x0000D0, "Member 'FTinkererUndetectableInterruptAnalytics::InterruptedSurvivorMirrorsId' has a wrong offset!");
static_assert(offsetof(FTinkererUndetectableInterruptAnalytics, InterruptingSlasherMirrorsId) == 0x0000E0, "Member 'FTinkererUndetectableInterruptAnalytics::InterruptingSlasherMirrorsId' has a wrong offset!");

// ScriptStruct DBDAnalytics.KnockoutSurvivorFoundAnalytics
// 0x0020 (0x00F0 - 0x00D0)
struct FKnockoutSurvivorFoundAnalytics final : public FBasePerkAnalytics
{
public:
	class FString                                 RescuingSurvivorMirrorsId;                         // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FoundSurvivorMirrorsId;                            // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FKnockoutSurvivorFoundAnalytics) == 0x000008, "Wrong alignment on FKnockoutSurvivorFoundAnalytics");
static_assert(sizeof(FKnockoutSurvivorFoundAnalytics) == 0x0000F0, "Wrong size on FKnockoutSurvivorFoundAnalytics");
static_assert(offsetof(FKnockoutSurvivorFoundAnalytics, RescuingSurvivorMirrorsId) == 0x0000D0, "Member 'FKnockoutSurvivorFoundAnalytics::RescuingSurvivorMirrorsId' has a wrong offset!");
static_assert(offsetof(FKnockoutSurvivorFoundAnalytics, FoundSurvivorMirrorsId) == 0x0000E0, "Member 'FKnockoutSurvivorFoundAnalytics::FoundSurvivorMirrorsId' has a wrong offset!");

// ScriptStruct DBDAnalytics.FranklinsDemiseConsumedItemAnalytics
// 0x0010 (0x00E0 - 0x00D0)
struct FFranklinsDemiseConsumedItemAnalytics final : public FBasePerkAnalytics
{
public:
	class FString                                 PreviousOwnerSurvivorMirrorsId;                    // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFranklinsDemiseConsumedItemAnalytics) == 0x000008, "Wrong alignment on FFranklinsDemiseConsumedItemAnalytics");
static_assert(sizeof(FFranklinsDemiseConsumedItemAnalytics) == 0x0000E0, "Wrong size on FFranklinsDemiseConsumedItemAnalytics");
static_assert(offsetof(FFranklinsDemiseConsumedItemAnalytics, PreviousOwnerSurvivorMirrorsId) == 0x0000D0, "Member 'FFranklinsDemiseConsumedItemAnalytics::PreviousOwnerSurvivorMirrorsId' has a wrong offset!");

// ScriptStruct DBDAnalytics.FranklinsHitNearDroppedItemAnalytics
// 0x0020 (0x00F0 - 0x00D0)
struct FFranklinsHitNearDroppedItemAnalytics final : public FBasePerkAnalytics
{
public:
	class FString                                 HitSurvivorMirrorsId;                              // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AttackingSlasherMirrorsId;                         // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FFranklinsHitNearDroppedItemAnalytics) == 0x000008, "Wrong alignment on FFranklinsHitNearDroppedItemAnalytics");
static_assert(sizeof(FFranklinsHitNearDroppedItemAnalytics) == 0x0000F0, "Wrong size on FFranklinsHitNearDroppedItemAnalytics");
static_assert(offsetof(FFranklinsHitNearDroppedItemAnalytics, HitSurvivorMirrorsId) == 0x0000D0, "Member 'FFranklinsHitNearDroppedItemAnalytics::HitSurvivorMirrorsId' has a wrong offset!");
static_assert(offsetof(FFranklinsHitNearDroppedItemAnalytics, AttackingSlasherMirrorsId) == 0x0000E0, "Member 'FFranklinsHitNearDroppedItemAnalytics::AttackingSlasherMirrorsId' has a wrong offset!");

// ScriptStruct DBDAnalytics.PlayerCardEquippedAnalytics
// 0x0030 (0x00E8 - 0x00B8)
struct FPlayerCardEquippedAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Badge;                                             // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Banner;                                            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 FromScreen;                                        // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerCardEquippedAnalytics) == 0x000008, "Wrong alignment on FPlayerCardEquippedAnalytics");
static_assert(sizeof(FPlayerCardEquippedAnalytics) == 0x0000E8, "Wrong size on FPlayerCardEquippedAnalytics");
static_assert(offsetof(FPlayerCardEquippedAnalytics, Badge) == 0x0000B8, "Member 'FPlayerCardEquippedAnalytics::Badge' has a wrong offset!");
static_assert(offsetof(FPlayerCardEquippedAnalytics, Banner) == 0x0000C8, "Member 'FPlayerCardEquippedAnalytics::Banner' has a wrong offset!");
static_assert(offsetof(FPlayerCardEquippedAnalytics, FromScreen) == 0x0000D8, "Member 'FPlayerCardEquippedAnalytics::FromScreen' has a wrong offset!");

// ScriptStruct DBDAnalytics.PlayerCardMenuTabAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FPlayerCardMenuTabAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Provider;                                          // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TabIndex;                                          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 FromScreen;                                        // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerCardMenuTabAnalytics) == 0x000008, "Wrong alignment on FPlayerCardMenuTabAnalytics");
static_assert(sizeof(FPlayerCardMenuTabAnalytics) == 0x0000E0, "Wrong size on FPlayerCardMenuTabAnalytics");
static_assert(offsetof(FPlayerCardMenuTabAnalytics, Provider) == 0x0000B8, "Member 'FPlayerCardMenuTabAnalytics::Provider' has a wrong offset!");
static_assert(offsetof(FPlayerCardMenuTabAnalytics, TabIndex) == 0x0000C8, "Member 'FPlayerCardMenuTabAnalytics::TabIndex' has a wrong offset!");
static_assert(offsetof(FPlayerCardMenuTabAnalytics, FromScreen) == 0x0000D0, "Member 'FPlayerCardMenuTabAnalytics::FromScreen' has a wrong offset!");

// ScriptStruct DBDAnalytics.PlayerCardAnimationSettingAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FPlayerCardAnimationSettingAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 AnimationSetting;                                  // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerCardAnimationSettingAnalytics) == 0x000008, "Wrong alignment on FPlayerCardAnimationSettingAnalytics");
static_assert(sizeof(FPlayerCardAnimationSettingAnalytics) == 0x0000C8, "Wrong size on FPlayerCardAnimationSettingAnalytics");
static_assert(offsetof(FPlayerCardAnimationSettingAnalytics, AnimationSetting) == 0x0000B8, "Member 'FPlayerCardAnimationSettingAnalytics::AnimationSetting' has a wrong offset!");

// ScriptStruct DBDAnalytics.HookAnalytics
// 0x00B8 (0x0170 - 0x00B8)
struct FHookAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	float                                         HookStartTime;                                     // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MirrorsIdSurvivor;                                 // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         SurvivorIsABot;                                    // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MirrorsIdKiller;                                   // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         KillerIsABot;                                      // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MirrorsIdRescuer;                                  // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RescuerIsABot;                                     // 0x0100(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimesOnHook;                                       // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Outcome;                                           // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HookDuration;                                      // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EscapeAttemptStart;                                // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EscapeAttemptFull;                                 // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurvivorsRemaining;                                // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfActiveSurvivorsStart;                      // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfActiveSurvivorsEnd;                        // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfActiveSurvivorsTotal;                      // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationCampFace;                                  // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationCampHard;                                  // 0x0138(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationCampSoft;                                  // 0x013C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfRescuers;                                  // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeForFirstRescuer;                               // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x0148(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0158(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReverseBearTrapOn;                                 // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FHookAnalytics) == 0x000008, "Wrong alignment on FHookAnalytics");
static_assert(sizeof(FHookAnalytics) == 0x000170, "Wrong size on FHookAnalytics");
static_assert(offsetof(FHookAnalytics, HookStartTime) == 0x0000B8, "Member 'FHookAnalytics::HookStartTime' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, MirrorsIdSurvivor) == 0x0000C0, "Member 'FHookAnalytics::MirrorsIdSurvivor' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, SurvivorIsABot) == 0x0000D0, "Member 'FHookAnalytics::SurvivorIsABot' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, MirrorsIdKiller) == 0x0000D8, "Member 'FHookAnalytics::MirrorsIdKiller' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, KillerIsABot) == 0x0000E8, "Member 'FHookAnalytics::KillerIsABot' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, MirrorsIdRescuer) == 0x0000F0, "Member 'FHookAnalytics::MirrorsIdRescuer' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, RescuerIsABot) == 0x000100, "Member 'FHookAnalytics::RescuerIsABot' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, TimesOnHook) == 0x000104, "Member 'FHookAnalytics::TimesOnHook' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, Outcome) == 0x000108, "Member 'FHookAnalytics::Outcome' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, HookDuration) == 0x000118, "Member 'FHookAnalytics::HookDuration' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, EscapeAttemptStart) == 0x00011C, "Member 'FHookAnalytics::EscapeAttemptStart' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, EscapeAttemptFull) == 0x000120, "Member 'FHookAnalytics::EscapeAttemptFull' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, SurvivorsRemaining) == 0x000124, "Member 'FHookAnalytics::SurvivorsRemaining' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, NumberOfActiveSurvivorsStart) == 0x000128, "Member 'FHookAnalytics::NumberOfActiveSurvivorsStart' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, NumberOfActiveSurvivorsEnd) == 0x00012C, "Member 'FHookAnalytics::NumberOfActiveSurvivorsEnd' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, NumberOfActiveSurvivorsTotal) == 0x000130, "Member 'FHookAnalytics::NumberOfActiveSurvivorsTotal' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, DurationCampFace) == 0x000134, "Member 'FHookAnalytics::DurationCampFace' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, DurationCampHard) == 0x000138, "Member 'FHookAnalytics::DurationCampHard' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, DurationCampSoft) == 0x00013C, "Member 'FHookAnalytics::DurationCampSoft' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, NumberOfRescuers) == 0x000140, "Member 'FHookAnalytics::NumberOfRescuers' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, TimeForFirstRescuer) == 0x000144, "Member 'FHookAnalytics::TimeForFirstRescuer' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, MatchID) == 0x000148, "Member 'FHookAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, GameMode) == 0x000158, "Member 'FHookAnalytics::GameMode' has a wrong offset!");
static_assert(offsetof(FHookAnalytics, ReverseBearTrapOn) == 0x000168, "Member 'FHookAnalytics::ReverseBearTrapOn' has a wrong offset!");

// ScriptStruct DBDAnalytics.PlayerMovementCorrectionAnalytics
// 0x0068 (0x0120 - 0x00B8)
struct FPlayerMovementCorrectionAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerMirrorsId;                                   // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CharacterName;                                     // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpikeMaxServerCorrectionsCount;                    // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerCorrectionsCountPerMinute;                   // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpikeAbove5ServerCorrectionsCountPerMinute;        // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpikeAbove10ServerCorrectionsCountPerMinute;       // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpikeAbove20ServerCorrectionsCountPerMinute;       // 0x0118(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerCorrectionsScorePerMinute;                   // 0x011C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerMovementCorrectionAnalytics) == 0x000008, "Wrong alignment on FPlayerMovementCorrectionAnalytics");
static_assert(sizeof(FPlayerMovementCorrectionAnalytics) == 0x000120, "Wrong size on FPlayerMovementCorrectionAnalytics");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, MatchID) == 0x0000B8, "Member 'FPlayerMovementCorrectionAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, PlayerMirrorsId) == 0x0000C8, "Member 'FPlayerMovementCorrectionAnalytics::PlayerMirrorsId' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, Role) == 0x0000D8, "Member 'FPlayerMovementCorrectionAnalytics::Role' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, MapName) == 0x0000E8, "Member 'FPlayerMovementCorrectionAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, CharacterName) == 0x0000F8, "Member 'FPlayerMovementCorrectionAnalytics::CharacterName' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, SpikeMaxServerCorrectionsCount) == 0x000108, "Member 'FPlayerMovementCorrectionAnalytics::SpikeMaxServerCorrectionsCount' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, ServerCorrectionsCountPerMinute) == 0x00010C, "Member 'FPlayerMovementCorrectionAnalytics::ServerCorrectionsCountPerMinute' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, SpikeAbove5ServerCorrectionsCountPerMinute) == 0x000110, "Member 'FPlayerMovementCorrectionAnalytics::SpikeAbove5ServerCorrectionsCountPerMinute' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, SpikeAbove10ServerCorrectionsCountPerMinute) == 0x000114, "Member 'FPlayerMovementCorrectionAnalytics::SpikeAbove10ServerCorrectionsCountPerMinute' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, SpikeAbove20ServerCorrectionsCountPerMinute) == 0x000118, "Member 'FPlayerMovementCorrectionAnalytics::SpikeAbove20ServerCorrectionsCountPerMinute' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionAnalytics, ServerCorrectionsScorePerMinute) == 0x00011C, "Member 'FPlayerMovementCorrectionAnalytics::ServerCorrectionsScorePerMinute' has a wrong offset!");

// ScriptStruct DBDAnalytics.PlayerMovementCorrectionData
// 0x0138 (0x0138 - 0x0000)
struct FPlayerMovementCorrectionData final
{
public:
	struct FPlayerMovementCorrectionAnalytics     ServerCorrectionAnalytics;                         // 0x0000(0x0120)(NativeAccessSpecifierPublic)
	int32                                         CurrentSpikeServerCorrectionsCounts;               // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerCorrectionsCount;                            // 0x0124(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpikeAbove5ServerCorrectionsCount;                 // 0x0128(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpikeAbove10ServerCorrectionsCount;                // 0x012C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpikeAbove20ServerCorrectionsCount;                // 0x0130(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerCorrectionsScore;                            // 0x0134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerMovementCorrectionData) == 0x000008, "Wrong alignment on FPlayerMovementCorrectionData");
static_assert(sizeof(FPlayerMovementCorrectionData) == 0x000138, "Wrong size on FPlayerMovementCorrectionData");
static_assert(offsetof(FPlayerMovementCorrectionData, ServerCorrectionAnalytics) == 0x000000, "Member 'FPlayerMovementCorrectionData::ServerCorrectionAnalytics' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionData, CurrentSpikeServerCorrectionsCounts) == 0x000120, "Member 'FPlayerMovementCorrectionData::CurrentSpikeServerCorrectionsCounts' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionData, ServerCorrectionsCount) == 0x000124, "Member 'FPlayerMovementCorrectionData::ServerCorrectionsCount' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionData, SpikeAbove5ServerCorrectionsCount) == 0x000128, "Member 'FPlayerMovementCorrectionData::SpikeAbove5ServerCorrectionsCount' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionData, SpikeAbove10ServerCorrectionsCount) == 0x00012C, "Member 'FPlayerMovementCorrectionData::SpikeAbove10ServerCorrectionsCount' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionData, SpikeAbove20ServerCorrectionsCount) == 0x000130, "Member 'FPlayerMovementCorrectionData::SpikeAbove20ServerCorrectionsCount' has a wrong offset!");
static_assert(offsetof(FPlayerMovementCorrectionData, ServerCorrectionsScore) == 0x000134, "Member 'FPlayerMovementCorrectionData::ServerCorrectionsScore' has a wrong offset!");

// ScriptStruct DBDAnalytics.PlayerStatusEffectUpdateAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FPlayerStatusEffectUpdateAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ElapsedMatchTime;                                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NbOfConcurrentStatusEffects;                       // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         StatusEffects;                                     // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPlayerStatusEffectUpdateAnalytics) == 0x000008, "Wrong alignment on FPlayerStatusEffectUpdateAnalytics");
static_assert(sizeof(FPlayerStatusEffectUpdateAnalytics) == 0x0000E0, "Wrong size on FPlayerStatusEffectUpdateAnalytics");
static_assert(offsetof(FPlayerStatusEffectUpdateAnalytics, MatchID) == 0x0000B8, "Member 'FPlayerStatusEffectUpdateAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FPlayerStatusEffectUpdateAnalytics, ElapsedMatchTime) == 0x0000C8, "Member 'FPlayerStatusEffectUpdateAnalytics::ElapsedMatchTime' has a wrong offset!");
static_assert(offsetof(FPlayerStatusEffectUpdateAnalytics, NbOfConcurrentStatusEffects) == 0x0000CC, "Member 'FPlayerStatusEffectUpdateAnalytics::NbOfConcurrentStatusEffects' has a wrong offset!");
static_assert(offsetof(FPlayerStatusEffectUpdateAnalytics, StatusEffects) == 0x0000D0, "Member 'FPlayerStatusEffectUpdateAnalytics::StatusEffects' has a wrong offset!");

// ScriptStruct DBDAnalytics.PostGameAnalyticsBase
// 0x00A0 (0x0158 - 0x00B8)
struct FPostGameAnalyticsBase : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 KrakenMatchId;                                     // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodwebPoints;                                    // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BonusEvent;                                        // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MatchIncentive;                                    // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LteIncentive;                                      // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GameDuration;                                      // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterName;                                     // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PipsGainedOrLost;                                  // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchEndReason;                                    // 0x0118(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTutorialBotMatch;                                // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 OnboardingModeId;                                  // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingEnabled;                                 // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingABTestingEnabled;                        // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingNumberActiveModes;                       // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingNewAssignedMode;                         // 0x014C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExactPing;                                         // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPostGameAnalyticsBase) == 0x000008, "Wrong alignment on FPostGameAnalyticsBase");
static_assert(sizeof(FPostGameAnalyticsBase) == 0x000158, "Wrong size on FPostGameAnalyticsBase");
static_assert(offsetof(FPostGameAnalyticsBase, MatchID) == 0x0000B8, "Member 'FPostGameAnalyticsBase::MatchID' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, KrakenMatchId) == 0x0000C8, "Member 'FPostGameAnalyticsBase::KrakenMatchId' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, GameMode) == 0x0000D8, "Member 'FPostGameAnalyticsBase::GameMode' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, BloodwebPoints) == 0x0000E8, "Member 'FPostGameAnalyticsBase::BloodwebPoints' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, BonusEvent) == 0x0000EC, "Member 'FPostGameAnalyticsBase::BonusEvent' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, MatchIncentive) == 0x0000F0, "Member 'FPostGameAnalyticsBase::MatchIncentive' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, LteIncentive) == 0x0000F4, "Member 'FPostGameAnalyticsBase::LteIncentive' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, GameDuration) == 0x0000F8, "Member 'FPostGameAnalyticsBase::GameDuration' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, CharacterName) == 0x000100, "Member 'FPostGameAnalyticsBase::CharacterName' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, Rank) == 0x000110, "Member 'FPostGameAnalyticsBase::Rank' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, PipsGainedOrLost) == 0x000114, "Member 'FPostGameAnalyticsBase::PipsGainedOrLost' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, MatchEndReason) == 0x000118, "Member 'FPostGameAnalyticsBase::MatchEndReason' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, IsTutorialBotMatch) == 0x000128, "Member 'FPostGameAnalyticsBase::IsTutorialBotMatch' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, OnboardingModeId) == 0x000130, "Member 'FPostGameAnalyticsBase::OnboardingModeId' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, OnboardingEnabled) == 0x000140, "Member 'FPostGameAnalyticsBase::OnboardingEnabled' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, OnboardingABTestingEnabled) == 0x000144, "Member 'FPostGameAnalyticsBase::OnboardingABTestingEnabled' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, OnboardingNumberActiveModes) == 0x000148, "Member 'FPostGameAnalyticsBase::OnboardingNumberActiveModes' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, OnboardingNewAssignedMode) == 0x00014C, "Member 'FPostGameAnalyticsBase::OnboardingNewAssignedMode' has a wrong offset!");
static_assert(offsetof(FPostGameAnalyticsBase, ExactPing) == 0x000150, "Member 'FPostGameAnalyticsBase::ExactPing' has a wrong offset!");

// ScriptStruct DBDAnalytics.PostGame_SurvivorAnalytics
// 0x0040 (0x0198 - 0x0158)
struct FPostGame_SurvivorAnalytics final : public FPostGameAnalyticsBase
{
public:
	int32                                         Objectives;                                        // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Survival;                                          // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Altruism;                                          // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Boldness;                                          // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ObjectivesBonus;                                   // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurvivalBonus;                                     // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AltruismBonus;                                     // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BoldnessBonus;                                     // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Outcome;                                           // 0x0178(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            DamageState;                                       // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x3];                                      // 0x0189(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HookedCount;                                       // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RepairCanceledBeforeRegressionStoppedCount;        // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsedController;                                    // 0x0194(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsedKeyboard;                                      // 0x0195(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsedHapticsVibration;                              // 0x0196(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_197[0x1];                                      // 0x0197(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPostGame_SurvivorAnalytics) == 0x000008, "Wrong alignment on FPostGame_SurvivorAnalytics");
static_assert(sizeof(FPostGame_SurvivorAnalytics) == 0x000198, "Wrong size on FPostGame_SurvivorAnalytics");
static_assert(offsetof(FPostGame_SurvivorAnalytics, Objectives) == 0x000158, "Member 'FPostGame_SurvivorAnalytics::Objectives' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, Survival) == 0x00015C, "Member 'FPostGame_SurvivorAnalytics::Survival' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, Altruism) == 0x000160, "Member 'FPostGame_SurvivorAnalytics::Altruism' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, Boldness) == 0x000164, "Member 'FPostGame_SurvivorAnalytics::Boldness' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, ObjectivesBonus) == 0x000168, "Member 'FPostGame_SurvivorAnalytics::ObjectivesBonus' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, SurvivalBonus) == 0x00016C, "Member 'FPostGame_SurvivorAnalytics::SurvivalBonus' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, AltruismBonus) == 0x000170, "Member 'FPostGame_SurvivorAnalytics::AltruismBonus' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, BoldnessBonus) == 0x000174, "Member 'FPostGame_SurvivorAnalytics::BoldnessBonus' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, Outcome) == 0x000178, "Member 'FPostGame_SurvivorAnalytics::Outcome' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, DamageState) == 0x000188, "Member 'FPostGame_SurvivorAnalytics::DamageState' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, HookedCount) == 0x00018C, "Member 'FPostGame_SurvivorAnalytics::HookedCount' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, RepairCanceledBeforeRegressionStoppedCount) == 0x000190, "Member 'FPostGame_SurvivorAnalytics::RepairCanceledBeforeRegressionStoppedCount' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, UsedController) == 0x000194, "Member 'FPostGame_SurvivorAnalytics::UsedController' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, UsedKeyboard) == 0x000195, "Member 'FPostGame_SurvivorAnalytics::UsedKeyboard' has a wrong offset!");
static_assert(offsetof(FPostGame_SurvivorAnalytics, UsedHapticsVibration) == 0x000196, "Member 'FPostGame_SurvivorAnalytics::UsedHapticsVibration' has a wrong offset!");

// ScriptStruct DBDAnalytics.PostGame_KillerAnalytics
// 0x0090 (0x01E8 - 0x0158)
struct FPostGame_KillerAnalytics final : public FPostGameAnalyticsBase
{
public:
	int32                                         Brutality;                                         // 0x0158(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Deviousness;                                       // 0x015C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Hunter;                                            // 0x0160(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Sacrifice;                                         // 0x0164(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BrutalityBonus;                                    // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeviousnessBonus;                                  // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HunterBonus;                                       // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SacrificeBonus;                                    // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EscapeesCount;                                     // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SacrificedCount;                                   // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KilledCount;                                       // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DisconnectCount;                                   // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BotCount;                                          // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeOpenGate;                                      // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SurvivorSpawningPosition;                          // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorsDone;                                    // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4[0x4];                                      // 0x01A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EGS_starter;                                       // 0x01A8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EGS_time;                                          // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EGS_duration;                                      // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EGS_sacrifice;                                     // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EGS_reachEnd;                                      // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsedController;                                    // 0x01C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsedKeyboard;                                      // 0x01C6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C7[0x1];                                      // 0x01C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GeneratorRepairTimestamp1;                         // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneratorRepairTimestamp2;                         // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneratorRepairTimestamp3;                         // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneratorRepairTimestamp4;                         // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GeneratorRepairTimestamp5;                         // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorsMaxRegressionCount;                      // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GeneratorKicksCount;                               // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsedHapticsVibration;                              // 0x01E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPostGame_KillerAnalytics) == 0x000008, "Wrong alignment on FPostGame_KillerAnalytics");
static_assert(sizeof(FPostGame_KillerAnalytics) == 0x0001E8, "Wrong size on FPostGame_KillerAnalytics");
static_assert(offsetof(FPostGame_KillerAnalytics, Brutality) == 0x000158, "Member 'FPostGame_KillerAnalytics::Brutality' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, Deviousness) == 0x00015C, "Member 'FPostGame_KillerAnalytics::Deviousness' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, Hunter) == 0x000160, "Member 'FPostGame_KillerAnalytics::Hunter' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, Sacrifice) == 0x000164, "Member 'FPostGame_KillerAnalytics::Sacrifice' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, BrutalityBonus) == 0x000168, "Member 'FPostGame_KillerAnalytics::BrutalityBonus' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, DeviousnessBonus) == 0x00016C, "Member 'FPostGame_KillerAnalytics::DeviousnessBonus' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, HunterBonus) == 0x000170, "Member 'FPostGame_KillerAnalytics::HunterBonus' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, SacrificeBonus) == 0x000174, "Member 'FPostGame_KillerAnalytics::SacrificeBonus' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, EscapeesCount) == 0x000178, "Member 'FPostGame_KillerAnalytics::EscapeesCount' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, SacrificedCount) == 0x00017C, "Member 'FPostGame_KillerAnalytics::SacrificedCount' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, KilledCount) == 0x000180, "Member 'FPostGame_KillerAnalytics::KilledCount' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, DisconnectCount) == 0x000184, "Member 'FPostGame_KillerAnalytics::DisconnectCount' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, BotCount) == 0x000188, "Member 'FPostGame_KillerAnalytics::BotCount' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, TimeOpenGate) == 0x00018C, "Member 'FPostGame_KillerAnalytics::TimeOpenGate' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, SurvivorSpawningPosition) == 0x000190, "Member 'FPostGame_KillerAnalytics::SurvivorSpawningPosition' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, GeneratorsDone) == 0x0001A0, "Member 'FPostGame_KillerAnalytics::GeneratorsDone' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, EGS_starter) == 0x0001A8, "Member 'FPostGame_KillerAnalytics::EGS_starter' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, EGS_time) == 0x0001B8, "Member 'FPostGame_KillerAnalytics::EGS_time' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, EGS_duration) == 0x0001BC, "Member 'FPostGame_KillerAnalytics::EGS_duration' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, EGS_sacrifice) == 0x0001C0, "Member 'FPostGame_KillerAnalytics::EGS_sacrifice' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, EGS_reachEnd) == 0x0001C4, "Member 'FPostGame_KillerAnalytics::EGS_reachEnd' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, UsedController) == 0x0001C5, "Member 'FPostGame_KillerAnalytics::UsedController' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, UsedKeyboard) == 0x0001C6, "Member 'FPostGame_KillerAnalytics::UsedKeyboard' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, GeneratorRepairTimestamp1) == 0x0001C8, "Member 'FPostGame_KillerAnalytics::GeneratorRepairTimestamp1' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, GeneratorRepairTimestamp2) == 0x0001CC, "Member 'FPostGame_KillerAnalytics::GeneratorRepairTimestamp2' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, GeneratorRepairTimestamp3) == 0x0001D0, "Member 'FPostGame_KillerAnalytics::GeneratorRepairTimestamp3' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, GeneratorRepairTimestamp4) == 0x0001D4, "Member 'FPostGame_KillerAnalytics::GeneratorRepairTimestamp4' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, GeneratorRepairTimestamp5) == 0x0001D8, "Member 'FPostGame_KillerAnalytics::GeneratorRepairTimestamp5' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, GeneratorsMaxRegressionCount) == 0x0001DC, "Member 'FPostGame_KillerAnalytics::GeneratorsMaxRegressionCount' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, GeneratorKicksCount) == 0x0001E0, "Member 'FPostGame_KillerAnalytics::GeneratorKicksCount' has a wrong offset!");
static_assert(offsetof(FPostGame_KillerAnalytics, UsedHapticsVibration) == 0x0001E4, "Member 'FPostGame_KillerAnalytics::UsedHapticsVibration' has a wrong offset!");

// ScriptStruct DBDAnalytics.PrestigeRewardItemAnalytic
// 0x0020 (0x0020 - 0x0000)
struct FPrestigeRewardItemAnalytic final
{
public:
	class FString                                 Type;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ID;                                                // 0x0010(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrestigeRewardItemAnalytic) == 0x000008, "Wrong alignment on FPrestigeRewardItemAnalytic");
static_assert(sizeof(FPrestigeRewardItemAnalytic) == 0x000020, "Wrong size on FPrestigeRewardItemAnalytic");
static_assert(offsetof(FPrestigeRewardItemAnalytic, Type) == 0x000000, "Member 'FPrestigeRewardItemAnalytic::Type' has a wrong offset!");
static_assert(offsetof(FPrestigeRewardItemAnalytic, ID) == 0x000010, "Member 'FPrestigeRewardItemAnalytic::ID' has a wrong offset!");

// ScriptStruct DBDAnalytics.PrestigeLevelUpAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FPrestigeLevelUpAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 CharacterName;                                     // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewPrestigeLevel;                                  // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodpointsSpent;                                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPrestigeRewardItemAnalytic>    ItemRewards;                                       // 0x00D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FPrestigeLevelUpAnalytics) == 0x000008, "Wrong alignment on FPrestigeLevelUpAnalytics");
static_assert(sizeof(FPrestigeLevelUpAnalytics) == 0x0000E0, "Wrong size on FPrestigeLevelUpAnalytics");
static_assert(offsetof(FPrestigeLevelUpAnalytics, CharacterName) == 0x0000B8, "Member 'FPrestigeLevelUpAnalytics::CharacterName' has a wrong offset!");
static_assert(offsetof(FPrestigeLevelUpAnalytics, NewPrestigeLevel) == 0x0000C8, "Member 'FPrestigeLevelUpAnalytics::NewPrestigeLevel' has a wrong offset!");
static_assert(offsetof(FPrestigeLevelUpAnalytics, BloodpointsSpent) == 0x0000CC, "Member 'FPrestigeLevelUpAnalytics::BloodpointsSpent' has a wrong offset!");
static_assert(offsetof(FPrestigeLevelUpAnalytics, ItemRewards) == 0x0000D0, "Member 'FPrestigeLevelUpAnalytics::ItemRewards' has a wrong offset!");

// ScriptStruct DBDAnalytics.ProceduralGenerationAnalytics
// 0x0118 (0x01D0 - 0x00B8)
struct FProceduralGenerationAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         GenerationSeed;                                    // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapSeed;                                           // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_MeatLocker_Small;                       // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_MeatLocker_Big;                         // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_Searchable;                             // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_EdgeObjects;                            // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_LivingWorldObjects;                     // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_Hatch;                                  // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_BookShelves;                            // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_BreakableWalls;                         // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_Totems;                                 // 0x0150(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Procedural_QuadrantSpawn;                          // 0x0160(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletSpawned;                                     // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletProceduralMin;                               // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletProceduralMax;                               // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletProcedural;                                  // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletProceduralSetCount;                          // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        PalletGenerationId;                                // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PalletGeneric;                                     // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 KillerSpawn;                                       // 0x0190(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SurvivorSpawn;                                     // 0x01A0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x01B0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HookSpawned;                                       // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseFixedMaps;                                      // 0x01C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NavmeshGenerationTime;                             // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FProceduralGenerationAnalytics) == 0x000008, "Wrong alignment on FProceduralGenerationAnalytics");
static_assert(sizeof(FProceduralGenerationAnalytics) == 0x0001D0, "Wrong size on FProceduralGenerationAnalytics");
static_assert(offsetof(FProceduralGenerationAnalytics, GenerationSeed) == 0x0000B8, "Member 'FProceduralGenerationAnalytics::GenerationSeed' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, MapSeed) == 0x0000BC, "Member 'FProceduralGenerationAnalytics::MapSeed' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, MapName) == 0x0000C0, "Member 'FProceduralGenerationAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_MeatLocker_Small) == 0x0000D0, "Member 'FProceduralGenerationAnalytics::Procedural_MeatLocker_Small' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_MeatLocker_Big) == 0x0000E0, "Member 'FProceduralGenerationAnalytics::Procedural_MeatLocker_Big' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_Searchable) == 0x0000F0, "Member 'FProceduralGenerationAnalytics::Procedural_Searchable' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_EdgeObjects) == 0x000100, "Member 'FProceduralGenerationAnalytics::Procedural_EdgeObjects' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_LivingWorldObjects) == 0x000110, "Member 'FProceduralGenerationAnalytics::Procedural_LivingWorldObjects' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_Hatch) == 0x000120, "Member 'FProceduralGenerationAnalytics::Procedural_Hatch' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_BookShelves) == 0x000130, "Member 'FProceduralGenerationAnalytics::Procedural_BookShelves' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_BreakableWalls) == 0x000140, "Member 'FProceduralGenerationAnalytics::Procedural_BreakableWalls' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_Totems) == 0x000150, "Member 'FProceduralGenerationAnalytics::Procedural_Totems' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, Procedural_QuadrantSpawn) == 0x000160, "Member 'FProceduralGenerationAnalytics::Procedural_QuadrantSpawn' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, PalletSpawned) == 0x000170, "Member 'FProceduralGenerationAnalytics::PalletSpawned' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, PalletProceduralMin) == 0x000174, "Member 'FProceduralGenerationAnalytics::PalletProceduralMin' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, PalletProceduralMax) == 0x000178, "Member 'FProceduralGenerationAnalytics::PalletProceduralMax' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, PalletProcedural) == 0x00017C, "Member 'FProceduralGenerationAnalytics::PalletProcedural' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, PalletProceduralSetCount) == 0x000180, "Member 'FProceduralGenerationAnalytics::PalletProceduralSetCount' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, PalletGenerationId) == 0x000184, "Member 'FProceduralGenerationAnalytics::PalletGenerationId' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, PalletGeneric) == 0x000188, "Member 'FProceduralGenerationAnalytics::PalletGeneric' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, KillerSpawn) == 0x000190, "Member 'FProceduralGenerationAnalytics::KillerSpawn' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, SurvivorSpawn) == 0x0001A0, "Member 'FProceduralGenerationAnalytics::SurvivorSpawn' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, MatchID) == 0x0001B0, "Member 'FProceduralGenerationAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, HookSpawned) == 0x0001C0, "Member 'FProceduralGenerationAnalytics::HookSpawned' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, UseFixedMaps) == 0x0001C4, "Member 'FProceduralGenerationAnalytics::UseFixedMaps' has a wrong offset!");
static_assert(offsetof(FProceduralGenerationAnalytics, NavmeshGenerationTime) == 0x0001C8, "Member 'FProceduralGenerationAnalytics::NavmeshGenerationTime' has a wrong offset!");

// ScriptStruct DBDAnalytics.ReportAnalytics
// 0x0098 (0x0150 - 0x00B8)
struct FReportAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 ClientIdTransmitter;                               // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ClientIdReceiver;                                  // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MirrorsIdTransmitter;                              // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MirrorsIdReceiver;                                 // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   RoleTransmitter;                                   // 0x00F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   RoleReceiver;                                      // 0x00F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x6];                                       // 0x00FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x0100(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameMode;                                          // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReportType;                                        // 0x0120(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReportCategory;                                    // 0x0130(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Comments;                                          // 0x0140(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FReportAnalytics) == 0x000008, "Wrong alignment on FReportAnalytics");
static_assert(sizeof(FReportAnalytics) == 0x000150, "Wrong size on FReportAnalytics");
static_assert(offsetof(FReportAnalytics, ClientIdTransmitter) == 0x0000B8, "Member 'FReportAnalytics::ClientIdTransmitter' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, ClientIdReceiver) == 0x0000C8, "Member 'FReportAnalytics::ClientIdReceiver' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, MirrorsIdTransmitter) == 0x0000D8, "Member 'FReportAnalytics::MirrorsIdTransmitter' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, MirrorsIdReceiver) == 0x0000E8, "Member 'FReportAnalytics::MirrorsIdReceiver' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, RoleTransmitter) == 0x0000F8, "Member 'FReportAnalytics::RoleTransmitter' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, RoleReceiver) == 0x0000F9, "Member 'FReportAnalytics::RoleReceiver' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, MatchID) == 0x000100, "Member 'FReportAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, GameMode) == 0x000110, "Member 'FReportAnalytics::GameMode' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, ReportType) == 0x000120, "Member 'FReportAnalytics::ReportType' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, ReportCategory) == 0x000130, "Member 'FReportAnalytics::ReportCategory' has a wrong offset!");
static_assert(offsetof(FReportAnalytics, Comments) == 0x000140, "Member 'FReportAnalytics::Comments' has a wrong offset!");

// ScriptStruct DBDAnalytics.BaseRPCAnalytics
// 0x0068 (0x0120 - 0x00B8)
struct FBaseRPCAnalytics : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Sender;                                            // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SenderPlatform;                                    // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchType;                                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Role;                                              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CharacterId;                                       // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C[0x4];                                      // 0x010C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CharacterName;                                     // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FBaseRPCAnalytics) == 0x000008, "Wrong alignment on FBaseRPCAnalytics");
static_assert(sizeof(FBaseRPCAnalytics) == 0x000120, "Wrong size on FBaseRPCAnalytics");
static_assert(offsetof(FBaseRPCAnalytics, Sender) == 0x0000B8, "Member 'FBaseRPCAnalytics::Sender' has a wrong offset!");
static_assert(offsetof(FBaseRPCAnalytics, SenderPlatform) == 0x0000C8, "Member 'FBaseRPCAnalytics::SenderPlatform' has a wrong offset!");
static_assert(offsetof(FBaseRPCAnalytics, MatchID) == 0x0000D8, "Member 'FBaseRPCAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FBaseRPCAnalytics, MatchType) == 0x0000E8, "Member 'FBaseRPCAnalytics::MatchType' has a wrong offset!");
static_assert(offsetof(FBaseRPCAnalytics, Role) == 0x0000F8, "Member 'FBaseRPCAnalytics::Role' has a wrong offset!");
static_assert(offsetof(FBaseRPCAnalytics, CharacterId) == 0x000108, "Member 'FBaseRPCAnalytics::CharacterId' has a wrong offset!");
static_assert(offsetof(FBaseRPCAnalytics, CharacterName) == 0x000110, "Member 'FBaseRPCAnalytics::CharacterName' has a wrong offset!");

// ScriptStruct DBDAnalytics.NamedRPCCount
// 0x0018 (0x0018 - 0x0000)
struct FNamedRPCCount final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FNamedRPCCount) == 0x000008, "Wrong alignment on FNamedRPCCount");
static_assert(sizeof(FNamedRPCCount) == 0x000018, "Wrong size on FNamedRPCCount");
static_assert(offsetof(FNamedRPCCount, Name) == 0x000000, "Member 'FNamedRPCCount::Name' has a wrong offset!");
static_assert(offsetof(FNamedRPCCount, Count) == 0x000010, "Member 'FNamedRPCCount::Count' has a wrong offset!");

// ScriptStruct DBDAnalytics.RPCCountAnalytics
// 0x0178 (0x0298 - 0x0120)
struct FRPCCountAnalytics final : public FBaseRPCAnalytics
{
public:
	float                                         MatchDuration;                                     // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GameState;                                         // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FNamedRPCCount>                 AllNamedCounts;                                    // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         TotalCount;                                        // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         UnlistedNames;                                     // 0x0150(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int64                                         UnlistedCount;                                     // 0x0160(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_CallConsoleCmdOnServer_Count;               // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Client_CallConsoleCmdOnClient_Count;               // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerAcknowledgePossession_Count;                 // 0x0170(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerCheckClientPossession_Count;                 // 0x0174(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerCheckClientPossessionReliable_Count;         // 0x0178(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerMovePacked_Count;                            // 0x017C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerMoveOut_Count;                               // 0x0180(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerNotifyLoadedWorld_Count;                     // 0x0184(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerSetSpectatorLocation_Count;                  // 0x0188(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerShortTimeout_Count;                          // 0x018C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerUpdateCamera_Count;                          // 0x0190(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerUpdateLevelVisibility_Count;                 // 0x0194(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerUpdateMultipleLevelsVisibility_Count;        // 0x0198(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ServerVerifyViewTarget_Count;                      // 0x019C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_ActivatePerk_Count;                         // 0x01A0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_ActivateSkillCheck_Count;                   // 0x01A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_AddMaxSpeedMovementCurve_Count;             // 0x01A8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_Broadcast_ConfirmChargedCompleted_Count;    // 0x01AC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_Broadcast_StoreInteraction_Count;           // 0x01B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_ClearTargets_Count;                         // 0x01B4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_ClientPassedFence_Count;                    // 0x01B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_DeactivateSkillCheck_Count;                 // 0x01BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_EACMessageFromClient_Count;                 // 0x01C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_HitTarget_Count;                            // 0x01C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetImmobilized_Count;                       // 0x01C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_Launch_Count;                               // 0x01CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_LoadoutSpawned_Count;                       // 0x01D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_NotifyStunHasBeenProcessed_Count;           // 0x01D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_OnIntroCompleted_Count;                     // 0x01D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_OnSkillCheckFailure_Count;                  // 0x01DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_OnSkillCheckSuccess_Count;                  // 0x01E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetOverlappingEscape_Count;                 // 0x01E4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_PlayMontage_Count;                          // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_PlayerReady_Count;                          // 0x01EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_ReceivePlayerProfile_Count;                 // 0x01F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_RemoveMaxSpeedMovementCurve_Count;          // 0x01F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_RenderingFeaturesCompleted_Count;           // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_ReplicateControlRotation_Count;             // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_RequestEndGame_Count;                       // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_RequestServerTime_Count;                    // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_RequestStateChange_Count;                   // 0x0208(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SendAttackInput_Count;                      // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SendInteractionInput_Count;                 // 0x0210(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SendFastInteractionInput_Count;             // 0x0214(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SendSecondaryActionPressed_Count;           // 0x0218(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetCharacterData_Count;                     // 0x021C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetConsecutiveMatchStreak_Count;            // 0x0220(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetCustomizationMeshes_Count;               // 0x0224(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetEquipedPerks_Count;                      // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetEquipment_Count;                         // 0x022C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetInteractionToSwapTo_Count;               // 0x0230(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetIntroCompleted_Count;                    // 0x0234(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetIsReadyToPlay_Count;                     // 0x0238(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetMaxAcceleration_Count;                   // 0x023C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetPlayerGameState_Count;                   // 0x0240(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetPlayerLoadout_Count;                     // 0x0244(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetPlayerReady_Count;                       // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetPlayerWiggleSkillCheckEnabled_Count;     // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetPreloadCompleted_Count;                  // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetReadyToTravel_Count;                     // 0x0254(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetSpectatorMode_Count;                     // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SendItemUseInput_Count;                     // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SendLeftRightMashedInput_Count;             // 0x0260(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetMaxSpeedMultiplierScalar_Count;          // 0x0264(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SendMessage_Count;                          // 0x0268(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetSettings_Count;                          // 0x026C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetRunInput_Count;                          // 0x0270(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetStateStack_Count;                        // 0x0274(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_SetStopSnapping_Count;                      // 0x0278(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_StartSnapping_Count;                        // 0x027C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_StopMontage_Count;                          // 0x0280(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_StoreAttack_Count;                          // 0x0284(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_TryDetectPlayer_Count;                      // 0x0288(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_UpdateDiscernedCharacters_Count;            // 0x028C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_UpdateReplicatedPips_Count;                 // 0x0290(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Server_UpdateScreenAspectRatio_Count;              // 0x0294(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRPCCountAnalytics) == 0x000008, "Wrong alignment on FRPCCountAnalytics");
static_assert(sizeof(FRPCCountAnalytics) == 0x000298, "Wrong size on FRPCCountAnalytics");
static_assert(offsetof(FRPCCountAnalytics, MatchDuration) == 0x000120, "Member 'FRPCCountAnalytics::MatchDuration' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, GameState) == 0x000128, "Member 'FRPCCountAnalytics::GameState' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, AllNamedCounts) == 0x000138, "Member 'FRPCCountAnalytics::AllNamedCounts' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, TotalCount) == 0x000148, "Member 'FRPCCountAnalytics::TotalCount' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, UnlistedNames) == 0x000150, "Member 'FRPCCountAnalytics::UnlistedNames' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, UnlistedCount) == 0x000160, "Member 'FRPCCountAnalytics::UnlistedCount' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_CallConsoleCmdOnServer_Count) == 0x000168, "Member 'FRPCCountAnalytics::Server_CallConsoleCmdOnServer_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Client_CallConsoleCmdOnClient_Count) == 0x00016C, "Member 'FRPCCountAnalytics::Client_CallConsoleCmdOnClient_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerAcknowledgePossession_Count) == 0x000170, "Member 'FRPCCountAnalytics::ServerAcknowledgePossession_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerCheckClientPossession_Count) == 0x000174, "Member 'FRPCCountAnalytics::ServerCheckClientPossession_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerCheckClientPossessionReliable_Count) == 0x000178, "Member 'FRPCCountAnalytics::ServerCheckClientPossessionReliable_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerMovePacked_Count) == 0x00017C, "Member 'FRPCCountAnalytics::ServerMovePacked_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerMoveOut_Count) == 0x000180, "Member 'FRPCCountAnalytics::ServerMoveOut_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerNotifyLoadedWorld_Count) == 0x000184, "Member 'FRPCCountAnalytics::ServerNotifyLoadedWorld_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerSetSpectatorLocation_Count) == 0x000188, "Member 'FRPCCountAnalytics::ServerSetSpectatorLocation_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerShortTimeout_Count) == 0x00018C, "Member 'FRPCCountAnalytics::ServerShortTimeout_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerUpdateCamera_Count) == 0x000190, "Member 'FRPCCountAnalytics::ServerUpdateCamera_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerUpdateLevelVisibility_Count) == 0x000194, "Member 'FRPCCountAnalytics::ServerUpdateLevelVisibility_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerUpdateMultipleLevelsVisibility_Count) == 0x000198, "Member 'FRPCCountAnalytics::ServerUpdateMultipleLevelsVisibility_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, ServerVerifyViewTarget_Count) == 0x00019C, "Member 'FRPCCountAnalytics::ServerVerifyViewTarget_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_ActivatePerk_Count) == 0x0001A0, "Member 'FRPCCountAnalytics::Server_ActivatePerk_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_ActivateSkillCheck_Count) == 0x0001A4, "Member 'FRPCCountAnalytics::Server_ActivateSkillCheck_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_AddMaxSpeedMovementCurve_Count) == 0x0001A8, "Member 'FRPCCountAnalytics::Server_AddMaxSpeedMovementCurve_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_Broadcast_ConfirmChargedCompleted_Count) == 0x0001AC, "Member 'FRPCCountAnalytics::Server_Broadcast_ConfirmChargedCompleted_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_Broadcast_StoreInteraction_Count) == 0x0001B0, "Member 'FRPCCountAnalytics::Server_Broadcast_StoreInteraction_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_ClearTargets_Count) == 0x0001B4, "Member 'FRPCCountAnalytics::Server_ClearTargets_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_ClientPassedFence_Count) == 0x0001B8, "Member 'FRPCCountAnalytics::Server_ClientPassedFence_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_DeactivateSkillCheck_Count) == 0x0001BC, "Member 'FRPCCountAnalytics::Server_DeactivateSkillCheck_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_EACMessageFromClient_Count) == 0x0001C0, "Member 'FRPCCountAnalytics::Server_EACMessageFromClient_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_HitTarget_Count) == 0x0001C4, "Member 'FRPCCountAnalytics::Server_HitTarget_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetImmobilized_Count) == 0x0001C8, "Member 'FRPCCountAnalytics::Server_SetImmobilized_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_Launch_Count) == 0x0001CC, "Member 'FRPCCountAnalytics::Server_Launch_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_LoadoutSpawned_Count) == 0x0001D0, "Member 'FRPCCountAnalytics::Server_LoadoutSpawned_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_NotifyStunHasBeenProcessed_Count) == 0x0001D4, "Member 'FRPCCountAnalytics::Server_NotifyStunHasBeenProcessed_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_OnIntroCompleted_Count) == 0x0001D8, "Member 'FRPCCountAnalytics::Server_OnIntroCompleted_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_OnSkillCheckFailure_Count) == 0x0001DC, "Member 'FRPCCountAnalytics::Server_OnSkillCheckFailure_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_OnSkillCheckSuccess_Count) == 0x0001E0, "Member 'FRPCCountAnalytics::Server_OnSkillCheckSuccess_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetOverlappingEscape_Count) == 0x0001E4, "Member 'FRPCCountAnalytics::Server_SetOverlappingEscape_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_PlayMontage_Count) == 0x0001E8, "Member 'FRPCCountAnalytics::Server_PlayMontage_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_PlayerReady_Count) == 0x0001EC, "Member 'FRPCCountAnalytics::Server_PlayerReady_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_ReceivePlayerProfile_Count) == 0x0001F0, "Member 'FRPCCountAnalytics::Server_ReceivePlayerProfile_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_RemoveMaxSpeedMovementCurve_Count) == 0x0001F4, "Member 'FRPCCountAnalytics::Server_RemoveMaxSpeedMovementCurve_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_RenderingFeaturesCompleted_Count) == 0x0001F8, "Member 'FRPCCountAnalytics::Server_RenderingFeaturesCompleted_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_ReplicateControlRotation_Count) == 0x0001FC, "Member 'FRPCCountAnalytics::Server_ReplicateControlRotation_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_RequestEndGame_Count) == 0x000200, "Member 'FRPCCountAnalytics::Server_RequestEndGame_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_RequestServerTime_Count) == 0x000204, "Member 'FRPCCountAnalytics::Server_RequestServerTime_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_RequestStateChange_Count) == 0x000208, "Member 'FRPCCountAnalytics::Server_RequestStateChange_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SendAttackInput_Count) == 0x00020C, "Member 'FRPCCountAnalytics::Server_SendAttackInput_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SendInteractionInput_Count) == 0x000210, "Member 'FRPCCountAnalytics::Server_SendInteractionInput_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SendFastInteractionInput_Count) == 0x000214, "Member 'FRPCCountAnalytics::Server_SendFastInteractionInput_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SendSecondaryActionPressed_Count) == 0x000218, "Member 'FRPCCountAnalytics::Server_SendSecondaryActionPressed_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetCharacterData_Count) == 0x00021C, "Member 'FRPCCountAnalytics::Server_SetCharacterData_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetConsecutiveMatchStreak_Count) == 0x000220, "Member 'FRPCCountAnalytics::Server_SetConsecutiveMatchStreak_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetCustomizationMeshes_Count) == 0x000224, "Member 'FRPCCountAnalytics::Server_SetCustomizationMeshes_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetEquipedPerks_Count) == 0x000228, "Member 'FRPCCountAnalytics::Server_SetEquipedPerks_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetEquipment_Count) == 0x00022C, "Member 'FRPCCountAnalytics::Server_SetEquipment_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetInteractionToSwapTo_Count) == 0x000230, "Member 'FRPCCountAnalytics::Server_SetInteractionToSwapTo_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetIntroCompleted_Count) == 0x000234, "Member 'FRPCCountAnalytics::Server_SetIntroCompleted_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetIsReadyToPlay_Count) == 0x000238, "Member 'FRPCCountAnalytics::Server_SetIsReadyToPlay_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetMaxAcceleration_Count) == 0x00023C, "Member 'FRPCCountAnalytics::Server_SetMaxAcceleration_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetPlayerGameState_Count) == 0x000240, "Member 'FRPCCountAnalytics::Server_SetPlayerGameState_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetPlayerLoadout_Count) == 0x000244, "Member 'FRPCCountAnalytics::Server_SetPlayerLoadout_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetPlayerReady_Count) == 0x000248, "Member 'FRPCCountAnalytics::Server_SetPlayerReady_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetPlayerWiggleSkillCheckEnabled_Count) == 0x00024C, "Member 'FRPCCountAnalytics::Server_SetPlayerWiggleSkillCheckEnabled_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetPreloadCompleted_Count) == 0x000250, "Member 'FRPCCountAnalytics::Server_SetPreloadCompleted_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetReadyToTravel_Count) == 0x000254, "Member 'FRPCCountAnalytics::Server_SetReadyToTravel_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetSpectatorMode_Count) == 0x000258, "Member 'FRPCCountAnalytics::Server_SetSpectatorMode_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SendItemUseInput_Count) == 0x00025C, "Member 'FRPCCountAnalytics::Server_SendItemUseInput_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SendLeftRightMashedInput_Count) == 0x000260, "Member 'FRPCCountAnalytics::Server_SendLeftRightMashedInput_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetMaxSpeedMultiplierScalar_Count) == 0x000264, "Member 'FRPCCountAnalytics::Server_SetMaxSpeedMultiplierScalar_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SendMessage_Count) == 0x000268, "Member 'FRPCCountAnalytics::Server_SendMessage_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetSettings_Count) == 0x00026C, "Member 'FRPCCountAnalytics::Server_SetSettings_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetRunInput_Count) == 0x000270, "Member 'FRPCCountAnalytics::Server_SetRunInput_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetStateStack_Count) == 0x000274, "Member 'FRPCCountAnalytics::Server_SetStateStack_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_SetStopSnapping_Count) == 0x000278, "Member 'FRPCCountAnalytics::Server_SetStopSnapping_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_StartSnapping_Count) == 0x00027C, "Member 'FRPCCountAnalytics::Server_StartSnapping_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_StopMontage_Count) == 0x000280, "Member 'FRPCCountAnalytics::Server_StopMontage_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_StoreAttack_Count) == 0x000284, "Member 'FRPCCountAnalytics::Server_StoreAttack_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_TryDetectPlayer_Count) == 0x000288, "Member 'FRPCCountAnalytics::Server_TryDetectPlayer_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_UpdateDiscernedCharacters_Count) == 0x00028C, "Member 'FRPCCountAnalytics::Server_UpdateDiscernedCharacters_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_UpdateReplicatedPips_Count) == 0x000290, "Member 'FRPCCountAnalytics::Server_UpdateReplicatedPips_Count' has a wrong offset!");
static_assert(offsetof(FRPCCountAnalytics, Server_UpdateScreenAspectRatio_Count) == 0x000294, "Member 'FRPCCountAnalytics::Server_UpdateScreenAspectRatio_Count' has a wrong offset!");

// ScriptStruct DBDAnalytics.RTMAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FRTMAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 RTMType;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        RTMSize;                                           // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentGameFlowStep;                               // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTMAnalytics) == 0x000008, "Wrong alignment on FRTMAnalytics");
static_assert(sizeof(FRTMAnalytics) == 0x0000E0, "Wrong size on FRTMAnalytics");
static_assert(offsetof(FRTMAnalytics, RTMType) == 0x0000B8, "Member 'FRTMAnalytics::RTMType' has a wrong offset!");
static_assert(offsetof(FRTMAnalytics, RTMSize) == 0x0000C8, "Member 'FRTMAnalytics::RTMSize' has a wrong offset!");
static_assert(offsetof(FRTMAnalytics, CurrentGameFlowStep) == 0x0000D0, "Member 'FRTMAnalytics::CurrentGameFlowStep' has a wrong offset!");

// ScriptStruct DBDAnalytics.RTMConnectionLostAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FRTMConnectionLostAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         ErrorCode;                                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ErrorMessage;                                      // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FRTMConnectionLostAnalytics) == 0x000008, "Wrong alignment on FRTMConnectionLostAnalytics");
static_assert(sizeof(FRTMConnectionLostAnalytics) == 0x0000D0, "Wrong size on FRTMConnectionLostAnalytics");
static_assert(offsetof(FRTMConnectionLostAnalytics, ErrorCode) == 0x0000B8, "Member 'FRTMConnectionLostAnalytics::ErrorCode' has a wrong offset!");
static_assert(offsetof(FRTMConnectionLostAnalytics, ErrorMessage) == 0x0000C0, "Member 'FRTMConnectionLostAnalytics::ErrorMessage' has a wrong offset!");

// ScriptStruct DBDAnalytics.S3CommandAnalytics
// 0x0060 (0x0118 - 0x00B8)
struct FS3CommandAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         RequestContentLength;                              // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ContentType;                                       // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedTime;                                       // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Status;                                            // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 URL;                                               // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Verb;                                              // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResponseContentLength;                             // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResponseCode;                                      // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0110(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS3CommandAnalytics) == 0x000008, "Wrong alignment on FS3CommandAnalytics");
static_assert(sizeof(FS3CommandAnalytics) == 0x000118, "Wrong size on FS3CommandAnalytics");
static_assert(offsetof(FS3CommandAnalytics, RequestContentLength) == 0x0000B8, "Member 'FS3CommandAnalytics::RequestContentLength' has a wrong offset!");
static_assert(offsetof(FS3CommandAnalytics, ContentType) == 0x0000C0, "Member 'FS3CommandAnalytics::ContentType' has a wrong offset!");
static_assert(offsetof(FS3CommandAnalytics, ElapsedTime) == 0x0000D0, "Member 'FS3CommandAnalytics::ElapsedTime' has a wrong offset!");
static_assert(offsetof(FS3CommandAnalytics, Status) == 0x0000D8, "Member 'FS3CommandAnalytics::Status' has a wrong offset!");
static_assert(offsetof(FS3CommandAnalytics, URL) == 0x0000E8, "Member 'FS3CommandAnalytics::URL' has a wrong offset!");
static_assert(offsetof(FS3CommandAnalytics, Verb) == 0x0000F8, "Member 'FS3CommandAnalytics::Verb' has a wrong offset!");
static_assert(offsetof(FS3CommandAnalytics, ResponseContentLength) == 0x000108, "Member 'FS3CommandAnalytics::ResponseContentLength' has a wrong offset!");
static_assert(offsetof(FS3CommandAnalytics, ResponseCode) == 0x00010C, "Member 'FS3CommandAnalytics::ResponseCode' has a wrong offset!");
static_assert(offsetof(FS3CommandAnalytics, Success) == 0x000110, "Member 'FS3CommandAnalytics::Success' has a wrong offset!");

// ScriptStruct DBDAnalytics.S3CommandErrorAnalytics
// 0x0030 (0x00E8 - 0x00B8)
struct FS3CommandErrorAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 URL;                                               // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Verb;                                              // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResponseCode;                                      // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvalidRequest;                                    // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          InvalidResponse;                                   // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DecryptionFailure;                                 // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          BadResponse;                                       // 0x00DF(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ContentModifiedError;                              // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FS3CommandErrorAnalytics) == 0x000008, "Wrong alignment on FS3CommandErrorAnalytics");
static_assert(sizeof(FS3CommandErrorAnalytics) == 0x0000E8, "Wrong size on FS3CommandErrorAnalytics");
static_assert(offsetof(FS3CommandErrorAnalytics, URL) == 0x0000B8, "Member 'FS3CommandErrorAnalytics::URL' has a wrong offset!");
static_assert(offsetof(FS3CommandErrorAnalytics, Verb) == 0x0000C8, "Member 'FS3CommandErrorAnalytics::Verb' has a wrong offset!");
static_assert(offsetof(FS3CommandErrorAnalytics, ResponseCode) == 0x0000D8, "Member 'FS3CommandErrorAnalytics::ResponseCode' has a wrong offset!");
static_assert(offsetof(FS3CommandErrorAnalytics, InvalidRequest) == 0x0000DC, "Member 'FS3CommandErrorAnalytics::InvalidRequest' has a wrong offset!");
static_assert(offsetof(FS3CommandErrorAnalytics, InvalidResponse) == 0x0000DD, "Member 'FS3CommandErrorAnalytics::InvalidResponse' has a wrong offset!");
static_assert(offsetof(FS3CommandErrorAnalytics, DecryptionFailure) == 0x0000DE, "Member 'FS3CommandErrorAnalytics::DecryptionFailure' has a wrong offset!");
static_assert(offsetof(FS3CommandErrorAnalytics, BadResponse) == 0x0000DF, "Member 'FS3CommandErrorAnalytics::BadResponse' has a wrong offset!");
static_assert(offsetof(FS3CommandErrorAnalytics, ContentModifiedError) == 0x0000E0, "Member 'FS3CommandErrorAnalytics::ContentModifiedError' has a wrong offset!");

// ScriptStruct DBDAnalytics.SaveGameErrorAnalytics
// 0x0040 (0x00F8 - 0x00B8)
struct FSaveGameErrorAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         ErrorCode;                                         // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Category;                                          // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ErrorDetails;                                      // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KrakenErrorCode;                                   // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 StateName;                                         // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveGameErrorAnalytics) == 0x000008, "Wrong alignment on FSaveGameErrorAnalytics");
static_assert(sizeof(FSaveGameErrorAnalytics) == 0x0000F8, "Wrong size on FSaveGameErrorAnalytics");
static_assert(offsetof(FSaveGameErrorAnalytics, ErrorCode) == 0x0000B8, "Member 'FSaveGameErrorAnalytics::ErrorCode' has a wrong offset!");
static_assert(offsetof(FSaveGameErrorAnalytics, Category) == 0x0000C0, "Member 'FSaveGameErrorAnalytics::Category' has a wrong offset!");
static_assert(offsetof(FSaveGameErrorAnalytics, ErrorDetails) == 0x0000D0, "Member 'FSaveGameErrorAnalytics::ErrorDetails' has a wrong offset!");
static_assert(offsetof(FSaveGameErrorAnalytics, KrakenErrorCode) == 0x0000E0, "Member 'FSaveGameErrorAnalytics::KrakenErrorCode' has a wrong offset!");
static_assert(offsetof(FSaveGameErrorAnalytics, StateName) == 0x0000E8, "Member 'FSaveGameErrorAnalytics::StateName' has a wrong offset!");

// ScriptStruct DBDAnalytics.SaveGameSaveResultAnalytics
// 0x0008 (0x00C0 - 0x00B8)
struct FSaveGameSaveResultAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	bool                                          SaveSuccessful;                                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x3];                                       // 0x00B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ResponseCode;                                      // 0x00BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveGameSaveResultAnalytics) == 0x000008, "Wrong alignment on FSaveGameSaveResultAnalytics");
static_assert(sizeof(FSaveGameSaveResultAnalytics) == 0x0000C0, "Wrong size on FSaveGameSaveResultAnalytics");
static_assert(offsetof(FSaveGameSaveResultAnalytics, SaveSuccessful) == 0x0000B8, "Member 'FSaveGameSaveResultAnalytics::SaveSuccessful' has a wrong offset!");
static_assert(offsetof(FSaveGameSaveResultAnalytics, ResponseCode) == 0x0000BC, "Member 'FSaveGameSaveResultAnalytics::ResponseCode' has a wrong offset!");

// ScriptStruct DBDAnalytics.SaveGameLoadResultAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FSaveGameLoadResultAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	bool                                          LoadSuccessful;                                    // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Message;                                           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveGameLoadResultAnalytics) == 0x000008, "Wrong alignment on FSaveGameLoadResultAnalytics");
static_assert(sizeof(FSaveGameLoadResultAnalytics) == 0x0000D0, "Wrong size on FSaveGameLoadResultAnalytics");
static_assert(offsetof(FSaveGameLoadResultAnalytics, LoadSuccessful) == 0x0000B8, "Member 'FSaveGameLoadResultAnalytics::LoadSuccessful' has a wrong offset!");
static_assert(offsetof(FSaveGameLoadResultAnalytics, Message) == 0x0000C0, "Member 'FSaveGameLoadResultAnalytics::Message' has a wrong offset!");

// ScriptStruct DBDAnalytics.StatsProgressionData
// 0x0010 (0x0010 - 0x0000)
struct FStatsProgressionData final
{
public:
	class FName                                   Name;                                              // 0x0000(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatsProgressionData) == 0x000004, "Wrong alignment on FStatsProgressionData");
static_assert(sizeof(FStatsProgressionData) == 0x000010, "Wrong size on FStatsProgressionData");
static_assert(offsetof(FStatsProgressionData, Name) == 0x000000, "Member 'FStatsProgressionData::Name' has a wrong offset!");
static_assert(offsetof(FStatsProgressionData, Value) == 0x00000C, "Member 'FStatsProgressionData::Value' has a wrong offset!");

// ScriptStruct DBDAnalytics.SerializablePlayerPerks
// 0x0050 (0x0050 - 0x0000)
struct FSerializablePlayerPerks final
{
public:
	TMap<class FName, int32>                      Perks;                                             // 0x0000(0x0050)(NativeAccessSpecifierPublic)
};
static_assert(alignof(FSerializablePlayerPerks) == 0x000008, "Wrong alignment on FSerializablePlayerPerks");
static_assert(sizeof(FSerializablePlayerPerks) == 0x000050, "Wrong size on FSerializablePlayerPerks");
static_assert(offsetof(FSerializablePlayerPerks, Perks) == 0x000000, "Member 'FSerializablePlayerPerks::Perks' has a wrong offset!");

// ScriptStruct DBDAnalytics.SerializablePlayerStatsProgression
// 0x0010 (0x0010 - 0x0000)
struct FSerializablePlayerStatsProgression final
{
public:
	TArray<struct FStatsProgressionData>          StatsProgression;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSerializablePlayerStatsProgression) == 0x000008, "Wrong alignment on FSerializablePlayerStatsProgression");
static_assert(sizeof(FSerializablePlayerStatsProgression) == 0x000010, "Wrong size on FSerializablePlayerStatsProgression");
static_assert(offsetof(FSerializablePlayerStatsProgression, StatsProgression) == 0x000000, "Member 'FSerializablePlayerStatsProgression::StatsProgression' has a wrong offset!");

// ScriptStruct DBDAnalytics.SaveGameSummaryPlayerStatsAnalytics
// 0x0030 (0x00E8 - 0x00B8)
struct FSaveGameSummaryPlayerStatsAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 OwnedPerks;                                        // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PlayerStatsProgression;                            // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BloodwebPoints;                                    // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CumulativePlaytime;                                // 0x00E0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSaveGameSummaryPlayerStatsAnalytics) == 0x000008, "Wrong alignment on FSaveGameSummaryPlayerStatsAnalytics");
static_assert(sizeof(FSaveGameSummaryPlayerStatsAnalytics) == 0x0000E8, "Wrong size on FSaveGameSummaryPlayerStatsAnalytics");
static_assert(offsetof(FSaveGameSummaryPlayerStatsAnalytics, OwnedPerks) == 0x0000B8, "Member 'FSaveGameSummaryPlayerStatsAnalytics::OwnedPerks' has a wrong offset!");
static_assert(offsetof(FSaveGameSummaryPlayerStatsAnalytics, PlayerStatsProgression) == 0x0000C8, "Member 'FSaveGameSummaryPlayerStatsAnalytics::PlayerStatsProgression' has a wrong offset!");
static_assert(offsetof(FSaveGameSummaryPlayerStatsAnalytics, BloodwebPoints) == 0x0000D8, "Member 'FSaveGameSummaryPlayerStatsAnalytics::BloodwebPoints' has a wrong offset!");
static_assert(offsetof(FSaveGameSummaryPlayerStatsAnalytics, CumulativePlaytime) == 0x0000E0, "Member 'FSaveGameSummaryPlayerStatsAnalytics::CumulativePlaytime' has a wrong offset!");

// ScriptStruct DBDAnalytics.ScoreAnalytics
// 0x0028 (0x00E0 - 0x00B8)
struct FScoreAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreTypeId;                                       // 0x00C8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreCount;                                        // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScoreBloodwebPoints;                               // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FScoreAnalytics) == 0x000008, "Wrong alignment on FScoreAnalytics");
static_assert(sizeof(FScoreAnalytics) == 0x0000E0, "Wrong size on FScoreAnalytics");
static_assert(offsetof(FScoreAnalytics, MatchID) == 0x0000B8, "Member 'FScoreAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FScoreAnalytics, ScoreTypeId) == 0x0000C8, "Member 'FScoreAnalytics::ScoreTypeId' has a wrong offset!");
static_assert(offsetof(FScoreAnalytics, ScoreCount) == 0x0000D4, "Member 'FScoreAnalytics::ScoreCount' has a wrong offset!");
static_assert(offsetof(FScoreAnalytics, ScoreBloodwebPoints) == 0x0000D8, "Member 'FScoreAnalytics::ScoreBloodwebPoints' has a wrong offset!");

// ScriptStruct DBDAnalytics.DetailedScoreAnalytics
// 0x0060 (0x0118 - 0x00B8)
struct FDetailedScoreAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 ScorerMirrorsId;                                   // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TargetMirrorsId;                                   // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MatchID;                                           // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScoreTypeId;                                       // 0x00E8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScoreExperience;                                   // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ElapsedMatchTime;                                  // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigatorCoordinateX;                             // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigatorCoordinateY;                             // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InstigatorCoordinateZ;                             // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetCoordinateX;                                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetCoordinateY;                                 // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetCoordinateZ;                                 // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FDetailedScoreAnalytics) == 0x000008, "Wrong alignment on FDetailedScoreAnalytics");
static_assert(sizeof(FDetailedScoreAnalytics) == 0x000118, "Wrong size on FDetailedScoreAnalytics");
static_assert(offsetof(FDetailedScoreAnalytics, ScorerMirrorsId) == 0x0000B8, "Member 'FDetailedScoreAnalytics::ScorerMirrorsId' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, TargetMirrorsId) == 0x0000C8, "Member 'FDetailedScoreAnalytics::TargetMirrorsId' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, MatchID) == 0x0000D8, "Member 'FDetailedScoreAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, ScoreTypeId) == 0x0000E8, "Member 'FDetailedScoreAnalytics::ScoreTypeId' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, ScoreExperience) == 0x0000F4, "Member 'FDetailedScoreAnalytics::ScoreExperience' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, ElapsedMatchTime) == 0x0000F8, "Member 'FDetailedScoreAnalytics::ElapsedMatchTime' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, InstigatorCoordinateX) == 0x0000FC, "Member 'FDetailedScoreAnalytics::InstigatorCoordinateX' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, InstigatorCoordinateY) == 0x000100, "Member 'FDetailedScoreAnalytics::InstigatorCoordinateY' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, InstigatorCoordinateZ) == 0x000104, "Member 'FDetailedScoreAnalytics::InstigatorCoordinateZ' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, TargetCoordinateX) == 0x000108, "Member 'FDetailedScoreAnalytics::TargetCoordinateX' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, TargetCoordinateY) == 0x00010C, "Member 'FDetailedScoreAnalytics::TargetCoordinateY' has a wrong offset!");
static_assert(offsetof(FDetailedScoreAnalytics, TargetCoordinateZ) == 0x000110, "Member 'FDetailedScoreAnalytics::TargetCoordinateZ' has a wrong offset!");

// ScriptStruct DBDAnalytics.ShopAnalytics
// 0x0010 (0x00C8 - 0x00B8)
struct FShopAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 LogMessage;                                        // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShopAnalytics) == 0x000008, "Wrong alignment on FShopAnalytics");
static_assert(sizeof(FShopAnalytics) == 0x0000C8, "Wrong size on FShopAnalytics");
static_assert(offsetof(FShopAnalytics, LogMessage) == 0x0000B8, "Member 'FShopAnalytics::LogMessage' has a wrong offset!");

// ScriptStruct DBDAnalytics.SpecialEventAnalytics
// 0x0038 (0x00F0 - 0x00B8)
struct FSpecialEventAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	EPlayerRole                                   Role;                                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x00C0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EventName;                                         // 0x00D0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   Challenge;                                         // 0x00DC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Amount;                                            // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CummulativeAmount;                                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSpecialEventAnalytics) == 0x000008, "Wrong alignment on FSpecialEventAnalytics");
static_assert(sizeof(FSpecialEventAnalytics) == 0x0000F0, "Wrong size on FSpecialEventAnalytics");
static_assert(offsetof(FSpecialEventAnalytics, Role) == 0x0000B8, "Member 'FSpecialEventAnalytics::Role' has a wrong offset!");
static_assert(offsetof(FSpecialEventAnalytics, MatchID) == 0x0000C0, "Member 'FSpecialEventAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FSpecialEventAnalytics, EventName) == 0x0000D0, "Member 'FSpecialEventAnalytics::EventName' has a wrong offset!");
static_assert(offsetof(FSpecialEventAnalytics, Challenge) == 0x0000DC, "Member 'FSpecialEventAnalytics::Challenge' has a wrong offset!");
static_assert(offsetof(FSpecialEventAnalytics, Amount) == 0x0000E8, "Member 'FSpecialEventAnalytics::Amount' has a wrong offset!");
static_assert(offsetof(FSpecialEventAnalytics, CummulativeAmount) == 0x0000EC, "Member 'FSpecialEventAnalytics::CummulativeAmount' has a wrong offset!");

// ScriptStruct DBDAnalytics.Stat
// 0x0020 (0x0020 - 0x0000)
struct FStat final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValueMin;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValueMax;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FStat) == 0x000008, "Wrong alignment on FStat");
static_assert(sizeof(FStat) == 0x000020, "Wrong size on FStat");
static_assert(offsetof(FStat, Name) == 0x000000, "Member 'FStat::Name' has a wrong offset!");
static_assert(offsetof(FStat, FloatValue) == 0x000010, "Member 'FStat::FloatValue' has a wrong offset!");
static_assert(offsetof(FStat, FloatValueMin) == 0x000014, "Member 'FStat::FloatValueMin' has a wrong offset!");
static_assert(offsetof(FStat, FloatValueMax) == 0x000018, "Member 'FStat::FloatValueMax' has a wrong offset!");

// ScriptStruct DBDAnalytics.Counter
// 0x0020 (0x0020 - 0x0000)
struct FCounter final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValueMin;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValueMax;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FCounter) == 0x000008, "Wrong alignment on FCounter");
static_assert(sizeof(FCounter) == 0x000020, "Wrong size on FCounter");
static_assert(offsetof(FCounter, Name) == 0x000000, "Member 'FCounter::Name' has a wrong offset!");
static_assert(offsetof(FCounter, FloatValue) == 0x000010, "Member 'FCounter::FloatValue' has a wrong offset!");
static_assert(offsetof(FCounter, FloatValueMin) == 0x000014, "Member 'FCounter::FloatValueMin' has a wrong offset!");
static_assert(offsetof(FCounter, FloatValueMax) == 0x000018, "Member 'FCounter::FloatValueMax' has a wrong offset!");

// ScriptStruct DBDAnalytics.MemoryStat
// 0x0020 (0x0020 - 0x0000)
struct FMemoryStat final
{
public:
	class FString                                 Name;                                              // 0x0000(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValue;                                        // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValueMin;                                     // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FloatValueMax;                                     // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMemoryStat) == 0x000008, "Wrong alignment on FMemoryStat");
static_assert(sizeof(FMemoryStat) == 0x000020, "Wrong size on FMemoryStat");
static_assert(offsetof(FMemoryStat, Name) == 0x000000, "Member 'FMemoryStat::Name' has a wrong offset!");
static_assert(offsetof(FMemoryStat, FloatValue) == 0x000010, "Member 'FMemoryStat::FloatValue' has a wrong offset!");
static_assert(offsetof(FMemoryStat, FloatValueMin) == 0x000014, "Member 'FMemoryStat::FloatValueMin' has a wrong offset!");
static_assert(offsetof(FMemoryStat, FloatValueMax) == 0x000018, "Member 'FMemoryStat::FloatValueMax' has a wrong offset!");

// ScriptStruct DBDAnalytics.StatsSystemUE4Analytics
// 0x0068 (0x0120 - 0x00B8)
struct FStatsSystemUE4Analytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Name;                                              // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBudget;                                         // 0x00C8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MatchID;                                           // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FStat>                          FlatAggregate;                                     // 0x00F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCounter>                       CounterAggregate;                                  // 0x0100(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMemoryStat>                    MemoryAggregate;                                   // 0x0110(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FStatsSystemUE4Analytics) == 0x000008, "Wrong alignment on FStatsSystemUE4Analytics");
static_assert(sizeof(FStatsSystemUE4Analytics) == 0x000120, "Wrong size on FStatsSystemUE4Analytics");
static_assert(offsetof(FStatsSystemUE4Analytics, Name) == 0x0000B8, "Member 'FStatsSystemUE4Analytics::Name' has a wrong offset!");
static_assert(offsetof(FStatsSystemUE4Analytics, bIsBudget) == 0x0000C8, "Member 'FStatsSystemUE4Analytics::bIsBudget' has a wrong offset!");
static_assert(offsetof(FStatsSystemUE4Analytics, MatchID) == 0x0000D0, "Member 'FStatsSystemUE4Analytics::MatchID' has a wrong offset!");
static_assert(offsetof(FStatsSystemUE4Analytics, MapName) == 0x0000E0, "Member 'FStatsSystemUE4Analytics::MapName' has a wrong offset!");
static_assert(offsetof(FStatsSystemUE4Analytics, FlatAggregate) == 0x0000F0, "Member 'FStatsSystemUE4Analytics::FlatAggregate' has a wrong offset!");
static_assert(offsetof(FStatsSystemUE4Analytics, CounterAggregate) == 0x000100, "Member 'FStatsSystemUE4Analytics::CounterAggregate' has a wrong offset!");
static_assert(offsetof(FStatsSystemUE4Analytics, MemoryAggregate) == 0x000110, "Member 'FStatsSystemUE4Analytics::MemoryAggregate' has a wrong offset!");

// ScriptStruct DBDAnalytics.ShortStats
// 0x0030 (0x0030 - 0x0000)
struct FShortStats final
{
public:
	TArray<struct FStat>                          FlatAggregate;                                     // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FCounter>                       CounterAggregate;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMemoryStat>                    MemoryAggregate;                                   // 0x0020(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FShortStats) == 0x000008, "Wrong alignment on FShortStats");
static_assert(sizeof(FShortStats) == 0x000030, "Wrong size on FShortStats");
static_assert(offsetof(FShortStats, FlatAggregate) == 0x000000, "Member 'FShortStats::FlatAggregate' has a wrong offset!");
static_assert(offsetof(FShortStats, CounterAggregate) == 0x000010, "Member 'FShortStats::CounterAggregate' has a wrong offset!");
static_assert(offsetof(FShortStats, MemoryAggregate) == 0x000020, "Member 'FShortStats::MemoryAggregate' has a wrong offset!");

// ScriptStruct DBDAnalytics.NewSurvivorTutorialAnalytics
// 0x0060 (0x0118 - 0x00B8)
struct FNewSurvivorTutorialAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	bool                                          IsLookAroundComplete;                              // 0x00B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsWalkAroundComplete;                              // 0x00B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRunningComplete;                                 // 0x00BA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsCrouchComplete;                                  // 0x00BB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFirstVaultComplete;                              // 0x00BC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD[0x3];                                       // 0x00BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeToCompleteAreaOne;                             // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGeneratorComplete;                               // 0x00C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSecondVaultComplete;                             // 0x00C5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C6[0x2];                                       // 0x00C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeToCompleteAreaTwo;                             // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBeartrapComplete;                                // 0x00CC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeToCompleteAreaThree;                           // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPalletComplete;                                  // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUnhookMegComplete;                               // 0x00D5(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLockerComplete;                                  // 0x00D6(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGetUnhookedComplete;                             // 0x00D7(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHealMegComplete;                                 // 0x00D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsGetHealedComplete;                               // 0x00D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOpenGateComplete;                                // 0x00DA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEscapeComplete;                                  // 0x00DB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeToCompleteAreaFour;                            // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTimeInTutorial;                               // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TutorialId;                                        // 0x00E8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OnboardingModeId;                                  // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingEnabled;                                 // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingABTestingEnabled;                        // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingNumberActiveModes;                       // 0x0110(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnboardingNewAssignedMode;                         // 0x0114(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FNewSurvivorTutorialAnalytics) == 0x000008, "Wrong alignment on FNewSurvivorTutorialAnalytics");
static_assert(sizeof(FNewSurvivorTutorialAnalytics) == 0x000118, "Wrong size on FNewSurvivorTutorialAnalytics");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsLookAroundComplete) == 0x0000B8, "Member 'FNewSurvivorTutorialAnalytics::IsLookAroundComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsWalkAroundComplete) == 0x0000B9, "Member 'FNewSurvivorTutorialAnalytics::IsWalkAroundComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsRunningComplete) == 0x0000BA, "Member 'FNewSurvivorTutorialAnalytics::IsRunningComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsCrouchComplete) == 0x0000BB, "Member 'FNewSurvivorTutorialAnalytics::IsCrouchComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsFirstVaultComplete) == 0x0000BC, "Member 'FNewSurvivorTutorialAnalytics::IsFirstVaultComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, TimeToCompleteAreaOne) == 0x0000C0, "Member 'FNewSurvivorTutorialAnalytics::TimeToCompleteAreaOne' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsGeneratorComplete) == 0x0000C4, "Member 'FNewSurvivorTutorialAnalytics::IsGeneratorComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsSecondVaultComplete) == 0x0000C5, "Member 'FNewSurvivorTutorialAnalytics::IsSecondVaultComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, TimeToCompleteAreaTwo) == 0x0000C8, "Member 'FNewSurvivorTutorialAnalytics::TimeToCompleteAreaTwo' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsBeartrapComplete) == 0x0000CC, "Member 'FNewSurvivorTutorialAnalytics::IsBeartrapComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, TimeToCompleteAreaThree) == 0x0000D0, "Member 'FNewSurvivorTutorialAnalytics::TimeToCompleteAreaThree' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsPalletComplete) == 0x0000D4, "Member 'FNewSurvivorTutorialAnalytics::IsPalletComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsUnhookMegComplete) == 0x0000D5, "Member 'FNewSurvivorTutorialAnalytics::IsUnhookMegComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsLockerComplete) == 0x0000D6, "Member 'FNewSurvivorTutorialAnalytics::IsLockerComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsGetUnhookedComplete) == 0x0000D7, "Member 'FNewSurvivorTutorialAnalytics::IsGetUnhookedComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsHealMegComplete) == 0x0000D8, "Member 'FNewSurvivorTutorialAnalytics::IsHealMegComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsGetHealedComplete) == 0x0000D9, "Member 'FNewSurvivorTutorialAnalytics::IsGetHealedComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsOpenGateComplete) == 0x0000DA, "Member 'FNewSurvivorTutorialAnalytics::IsOpenGateComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, IsEscapeComplete) == 0x0000DB, "Member 'FNewSurvivorTutorialAnalytics::IsEscapeComplete' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, TimeToCompleteAreaFour) == 0x0000DC, "Member 'FNewSurvivorTutorialAnalytics::TimeToCompleteAreaFour' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, TotalTimeInTutorial) == 0x0000E0, "Member 'FNewSurvivorTutorialAnalytics::TotalTimeInTutorial' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, TutorialId) == 0x0000E8, "Member 'FNewSurvivorTutorialAnalytics::TutorialId' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, OnboardingModeId) == 0x0000F8, "Member 'FNewSurvivorTutorialAnalytics::OnboardingModeId' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, OnboardingEnabled) == 0x000108, "Member 'FNewSurvivorTutorialAnalytics::OnboardingEnabled' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, OnboardingABTestingEnabled) == 0x00010C, "Member 'FNewSurvivorTutorialAnalytics::OnboardingABTestingEnabled' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, OnboardingNumberActiveModes) == 0x000110, "Member 'FNewSurvivorTutorialAnalytics::OnboardingNumberActiveModes' has a wrong offset!");
static_assert(offsetof(FNewSurvivorTutorialAnalytics, OnboardingNewAssignedMode) == 0x000114, "Member 'FNewSurvivorTutorialAnalytics::OnboardingNewAssignedMode' has a wrong offset!");

// ScriptStruct DBDAnalytics.SyncLoadAnalytics
// 0x0060 (0x0118 - 0x00B8)
struct FSyncLoadAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 AssetName;                                         // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadTimeMilliseconds;                              // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DeviceProfileName;                                 // 0x00D0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BuildConfiguration;                                // 0x00E0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChangelistNumber;                                  // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MapName;                                           // 0x00F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GameFlowContext;                                   // 0x0108(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSyncLoadAnalytics) == 0x000008, "Wrong alignment on FSyncLoadAnalytics");
static_assert(sizeof(FSyncLoadAnalytics) == 0x000118, "Wrong size on FSyncLoadAnalytics");
static_assert(offsetof(FSyncLoadAnalytics, AssetName) == 0x0000B8, "Member 'FSyncLoadAnalytics::AssetName' has a wrong offset!");
static_assert(offsetof(FSyncLoadAnalytics, LoadTimeMilliseconds) == 0x0000C8, "Member 'FSyncLoadAnalytics::LoadTimeMilliseconds' has a wrong offset!");
static_assert(offsetof(FSyncLoadAnalytics, DeviceProfileName) == 0x0000D0, "Member 'FSyncLoadAnalytics::DeviceProfileName' has a wrong offset!");
static_assert(offsetof(FSyncLoadAnalytics, BuildConfiguration) == 0x0000E0, "Member 'FSyncLoadAnalytics::BuildConfiguration' has a wrong offset!");
static_assert(offsetof(FSyncLoadAnalytics, ChangelistNumber) == 0x0000F0, "Member 'FSyncLoadAnalytics::ChangelistNumber' has a wrong offset!");
static_assert(offsetof(FSyncLoadAnalytics, MapName) == 0x0000F8, "Member 'FSyncLoadAnalytics::MapName' has a wrong offset!");
static_assert(offsetof(FSyncLoadAnalytics, GameFlowContext) == 0x000108, "Member 'FSyncLoadAnalytics::GameFlowContext' has a wrong offset!");

// ScriptStruct DBDAnalytics.TexturegroupChartingAnalytics
// 0x0050 (0x0108 - 0x00B8)
struct FTexturegroupChartingAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 Texturegroup_name;                                 // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Texturegroups_guid;                                // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Map_name;                                          // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Avg_qty_streaming;                                 // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_qty_streaming;                                 // 0x00EC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Avg_memory_streaming;                              // 0x00F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_memory_streaming;                              // 0x00F4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Avg_qty_non_streaming;                             // 0x00F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_qty_non_streaming;                             // 0x00FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Avg_memory_non_streaming;                          // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Max_memory_non_streaming;                          // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FTexturegroupChartingAnalytics) == 0x000008, "Wrong alignment on FTexturegroupChartingAnalytics");
static_assert(sizeof(FTexturegroupChartingAnalytics) == 0x000108, "Wrong size on FTexturegroupChartingAnalytics");
static_assert(offsetof(FTexturegroupChartingAnalytics, Texturegroup_name) == 0x0000B8, "Member 'FTexturegroupChartingAnalytics::Texturegroup_name' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Texturegroups_guid) == 0x0000C8, "Member 'FTexturegroupChartingAnalytics::Texturegroups_guid' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Map_name) == 0x0000D8, "Member 'FTexturegroupChartingAnalytics::Map_name' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Avg_qty_streaming) == 0x0000E8, "Member 'FTexturegroupChartingAnalytics::Avg_qty_streaming' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Max_qty_streaming) == 0x0000EC, "Member 'FTexturegroupChartingAnalytics::Max_qty_streaming' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Avg_memory_streaming) == 0x0000F0, "Member 'FTexturegroupChartingAnalytics::Avg_memory_streaming' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Max_memory_streaming) == 0x0000F4, "Member 'FTexturegroupChartingAnalytics::Max_memory_streaming' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Avg_qty_non_streaming) == 0x0000F8, "Member 'FTexturegroupChartingAnalytics::Avg_qty_non_streaming' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Max_qty_non_streaming) == 0x0000FC, "Member 'FTexturegroupChartingAnalytics::Max_qty_non_streaming' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Avg_memory_non_streaming) == 0x000100, "Member 'FTexturegroupChartingAnalytics::Avg_memory_non_streaming' has a wrong offset!");
static_assert(offsetof(FTexturegroupChartingAnalytics, Max_memory_non_streaming) == 0x000104, "Member 'FTexturegroupChartingAnalytics::Max_memory_non_streaming' has a wrong offset!");

// ScriptStruct DBDAnalytics.TransactionAnalytics
// 0x0088 (0x0140 - 0x00B8)
struct FTransactionAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 TransactionType;                                   // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TransactionSource;                                 // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SourceID;                                          // 0x00D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceTier;                                        // 0x00E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC[0x4];                                       // 0x00EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrencyType;                                      // 0x00F0(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyAmount;                                    // 0x0100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrencyBalance;                                   // 0x0104(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LevelAchieved;                                     // 0x0108(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Prestige;                                          // 0x010C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ItemIDAcquired;                                    // 0x0110(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Rank;                                              // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SelectedCharacter;                                 // 0x0128(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TransactionTriggeredLevelUp;                       // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FTransactionAnalytics) == 0x000008, "Wrong alignment on FTransactionAnalytics");
static_assert(sizeof(FTransactionAnalytics) == 0x000140, "Wrong size on FTransactionAnalytics");
static_assert(offsetof(FTransactionAnalytics, TransactionType) == 0x0000B8, "Member 'FTransactionAnalytics::TransactionType' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, TransactionSource) == 0x0000C8, "Member 'FTransactionAnalytics::TransactionSource' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, SourceID) == 0x0000D8, "Member 'FTransactionAnalytics::SourceID' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, SourceTier) == 0x0000E8, "Member 'FTransactionAnalytics::SourceTier' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, CurrencyType) == 0x0000F0, "Member 'FTransactionAnalytics::CurrencyType' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, CurrencyAmount) == 0x000100, "Member 'FTransactionAnalytics::CurrencyAmount' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, CurrencyBalance) == 0x000104, "Member 'FTransactionAnalytics::CurrencyBalance' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, LevelAchieved) == 0x000108, "Member 'FTransactionAnalytics::LevelAchieved' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, Prestige) == 0x00010C, "Member 'FTransactionAnalytics::Prestige' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, ItemIDAcquired) == 0x000110, "Member 'FTransactionAnalytics::ItemIDAcquired' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, Rank) == 0x000120, "Member 'FTransactionAnalytics::Rank' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, SelectedCharacter) == 0x000128, "Member 'FTransactionAnalytics::SelectedCharacter' has a wrong offset!");
static_assert(offsetof(FTransactionAnalytics, TransactionTriggeredLevelUp) == 0x000138, "Member 'FTransactionAnalytics::TransactionTriggeredLevelUp' has a wrong offset!");

// ScriptStruct DBDAnalytics.UnknownPrivilegeErrorAnalytics
// 0x0018 (0x00D0 - 0x00B8)
struct FUnknownPrivilegeErrorAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	int32                                         PrivilegeResults;                                  // 0x00B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         PlatformResults;                                   // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FUnknownPrivilegeErrorAnalytics) == 0x000008, "Wrong alignment on FUnknownPrivilegeErrorAnalytics");
static_assert(sizeof(FUnknownPrivilegeErrorAnalytics) == 0x0000D0, "Wrong size on FUnknownPrivilegeErrorAnalytics");
static_assert(offsetof(FUnknownPrivilegeErrorAnalytics, PrivilegeResults) == 0x0000B8, "Member 'FUnknownPrivilegeErrorAnalytics::PrivilegeResults' has a wrong offset!");
static_assert(offsetof(FUnknownPrivilegeErrorAnalytics, PlatformResults) == 0x0000C0, "Member 'FUnknownPrivilegeErrorAnalytics::PlatformResults' has a wrong offset!");

// ScriptStruct DBDAnalytics.WalesCypherAnalytics
// 0x0030 (0x00E8 - 0x00B8)
struct FWalesCypherAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 EnteredSequence;                                   // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExpectedSequence;                                  // 0x00C8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeoutThreshold;                                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x00DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TIMEOUT;                                           // 0x00DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CharmGranted;                                      // 0x00DE(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF[0x1];                                       // 0x00DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ValidCharacterSelcted;                             // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FWalesCypherAnalytics) == 0x000008, "Wrong alignment on FWalesCypherAnalytics");
static_assert(sizeof(FWalesCypherAnalytics) == 0x0000E8, "Wrong size on FWalesCypherAnalytics");
static_assert(offsetof(FWalesCypherAnalytics, EnteredSequence) == 0x0000B8, "Member 'FWalesCypherAnalytics::EnteredSequence' has a wrong offset!");
static_assert(offsetof(FWalesCypherAnalytics, ExpectedSequence) == 0x0000C8, "Member 'FWalesCypherAnalytics::ExpectedSequence' has a wrong offset!");
static_assert(offsetof(FWalesCypherAnalytics, TimeoutThreshold) == 0x0000D8, "Member 'FWalesCypherAnalytics::TimeoutThreshold' has a wrong offset!");
static_assert(offsetof(FWalesCypherAnalytics, Success) == 0x0000DC, "Member 'FWalesCypherAnalytics::Success' has a wrong offset!");
static_assert(offsetof(FWalesCypherAnalytics, TIMEOUT) == 0x0000DD, "Member 'FWalesCypherAnalytics::TIMEOUT' has a wrong offset!");
static_assert(offsetof(FWalesCypherAnalytics, CharmGranted) == 0x0000DE, "Member 'FWalesCypherAnalytics::CharmGranted' has a wrong offset!");
static_assert(offsetof(FWalesCypherAnalytics, ValidCharacterSelcted) == 0x0000E0, "Member 'FWalesCypherAnalytics::ValidCharacterSelcted' has a wrong offset!");

}

