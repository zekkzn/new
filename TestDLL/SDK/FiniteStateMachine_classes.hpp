#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FiniteStateMachine

#include "Basic.hpp"

#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"
#include "FiniteStateMachine_structs.hpp"
#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// Class FiniteStateMachine.FiniteStateMachine
// 0x0030 (0x00D8 - 0x00A8)
class UFiniteStateMachine final : public UActorComponent
{
public:
	TSubclassOf<class UFSM_State>                 _defaultStateClass;                                // 0x00A8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFSM_State*                             _currentState;                                     // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EFiniteStateMachineStatus                     _currentStateMachineStatus;                        // 0x00B8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                _stateMachineOwner;                                // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UFSM_State*>                     _stateInstances;                                   // 0x00C8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FiniteStateMachine">();
	}
	static class UFiniteStateMachine* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFiniteStateMachine>();
	}
};
static_assert(alignof(UFiniteStateMachine) == 0x000008, "Wrong alignment on UFiniteStateMachine");
static_assert(sizeof(UFiniteStateMachine) == 0x0000D8, "Wrong size on UFiniteStateMachine");
static_assert(offsetof(UFiniteStateMachine, _defaultStateClass) == 0x0000A8, "Member 'UFiniteStateMachine::_defaultStateClass' has a wrong offset!");
static_assert(offsetof(UFiniteStateMachine, _currentState) == 0x0000B0, "Member 'UFiniteStateMachine::_currentState' has a wrong offset!");
static_assert(offsetof(UFiniteStateMachine, _currentStateMachineStatus) == 0x0000B8, "Member 'UFiniteStateMachine::_currentStateMachineStatus' has a wrong offset!");
static_assert(offsetof(UFiniteStateMachine, _stateMachineOwner) == 0x0000C0, "Member 'UFiniteStateMachine::_stateMachineOwner' has a wrong offset!");
static_assert(offsetof(UFiniteStateMachine, _stateInstances) == 0x0000C8, "Member 'UFiniteStateMachine::_stateInstances' has a wrong offset!");

// Class FiniteStateMachine.FSM_State
// 0x0048 (0x0078 - 0x0030)
class UFSM_State : public UObject
{
public:
	class FName                                   _stateName;                                        // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          _shouldTick;                                       // 0x003C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFSM_State>                 _defaultChildStateClass;                           // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFSM_Transition*>                _transitions;                                      // 0x0048(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UFiniteStateMachine*                    _stateMachine;                                     // 0x0058(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFSM_State*                             _parentState;                                      // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFSM_State*                             _currentChildState;                                // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         _startTimestamp;                                   // 0x0070(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSM_State">();
	}
	static class UFSM_State* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSM_State>();
	}
};
static_assert(alignof(UFSM_State) == 0x000008, "Wrong alignment on UFSM_State");
static_assert(sizeof(UFSM_State) == 0x000078, "Wrong size on UFSM_State");
static_assert(offsetof(UFSM_State, _stateName) == 0x000030, "Member 'UFSM_State::_stateName' has a wrong offset!");
static_assert(offsetof(UFSM_State, _shouldTick) == 0x00003C, "Member 'UFSM_State::_shouldTick' has a wrong offset!");
static_assert(offsetof(UFSM_State, _defaultChildStateClass) == 0x000040, "Member 'UFSM_State::_defaultChildStateClass' has a wrong offset!");
static_assert(offsetof(UFSM_State, _transitions) == 0x000048, "Member 'UFSM_State::_transitions' has a wrong offset!");
static_assert(offsetof(UFSM_State, _stateMachine) == 0x000058, "Member 'UFSM_State::_stateMachine' has a wrong offset!");
static_assert(offsetof(UFSM_State, _parentState) == 0x000060, "Member 'UFSM_State::_parentState' has a wrong offset!");
static_assert(offsetof(UFSM_State, _currentChildState) == 0x000068, "Member 'UFSM_State::_currentChildState' has a wrong offset!");
static_assert(offsetof(UFSM_State, _startTimestamp) == 0x000070, "Member 'UFSM_State::_startTimestamp' has a wrong offset!");

// Class FiniteStateMachine.FSM_Condition
// 0x0000 (0x0038 - 0x0038)
class UFSM_Condition : public UDataAsset
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSM_Condition">();
	}
	static class UFSM_Condition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSM_Condition>();
	}
};
static_assert(alignof(UFSM_Condition) == 0x000008, "Wrong alignment on UFSM_Condition");
static_assert(sizeof(UFSM_Condition) == 0x000038, "Wrong size on UFSM_Condition");

// Class FiniteStateMachine.FSM_NotCondition
// 0x0008 (0x0040 - 0x0038)
class UFSM_NotCondition final : public UFSM_Condition
{
public:
	class UFSM_Condition*                         _condition;                                        // 0x0038(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSM_NotCondition">();
	}
	static class UFSM_NotCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSM_NotCondition>();
	}
};
static_assert(alignof(UFSM_NotCondition) == 0x000008, "Wrong alignment on UFSM_NotCondition");
static_assert(sizeof(UFSM_NotCondition) == 0x000040, "Wrong size on UFSM_NotCondition");
static_assert(offsetof(UFSM_NotCondition, _condition) == 0x000038, "Member 'UFSM_NotCondition::_condition' has a wrong offset!");

// Class FiniteStateMachine.FSM_AndCondition
// 0x0010 (0x0048 - 0x0038)
class UFSM_AndCondition final : public UFSM_Condition
{
public:
	TArray<class UFSM_Condition*>                 _conditions;                                       // 0x0038(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSM_AndCondition">();
	}
	static class UFSM_AndCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSM_AndCondition>();
	}
};
static_assert(alignof(UFSM_AndCondition) == 0x000008, "Wrong alignment on UFSM_AndCondition");
static_assert(sizeof(UFSM_AndCondition) == 0x000048, "Wrong size on UFSM_AndCondition");
static_assert(offsetof(UFSM_AndCondition, _conditions) == 0x000038, "Member 'UFSM_AndCondition::_conditions' has a wrong offset!");

// Class FiniteStateMachine.FSM_HasStateRanForXSecondsCondition
// 0x0028 (0x0060 - 0x0038)
class UFSM_HasStateRanForXSecondsCondition final : public UFSM_Condition
{
public:
	struct FDBDTunableRowHandle                   _minTimeInSecondsToSatisfyCondition;               // 0x0038(0x0028)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSM_HasStateRanForXSecondsCondition">();
	}
	static class UFSM_HasStateRanForXSecondsCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSM_HasStateRanForXSecondsCondition>();
	}
};
static_assert(alignof(UFSM_HasStateRanForXSecondsCondition) == 0x000008, "Wrong alignment on UFSM_HasStateRanForXSecondsCondition");
static_assert(sizeof(UFSM_HasStateRanForXSecondsCondition) == 0x000060, "Wrong size on UFSM_HasStateRanForXSecondsCondition");
static_assert(offsetof(UFSM_HasStateRanForXSecondsCondition, _minTimeInSecondsToSatisfyCondition) == 0x000038, "Member 'UFSM_HasStateRanForXSecondsCondition::_minTimeInSecondsToSatisfyCondition' has a wrong offset!");

// Class FiniteStateMachine.FSM_OrCondition
// 0x0010 (0x0048 - 0x0038)
class UFSM_OrCondition final : public UFSM_Condition
{
public:
	TArray<class UFSM_Condition*>                 _conditions;                                       // 0x0038(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSM_OrCondition">();
	}
	static class UFSM_OrCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSM_OrCondition>();
	}
};
static_assert(alignof(UFSM_OrCondition) == 0x000008, "Wrong alignment on UFSM_OrCondition");
static_assert(sizeof(UFSM_OrCondition) == 0x000048, "Wrong size on UFSM_OrCondition");
static_assert(offsetof(UFSM_OrCondition, _conditions) == 0x000038, "Member 'UFSM_OrCondition::_conditions' has a wrong offset!");

// Class FiniteStateMachine.FSM_RefCondition
// 0x0008 (0x0040 - 0x0038)
class UFSM_RefCondition final : public UFSM_Condition
{
public:
	class UFSM_Condition*                         _refcondition;                                     // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSM_RefCondition">();
	}
	static class UFSM_RefCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSM_RefCondition>();
	}
};
static_assert(alignof(UFSM_RefCondition) == 0x000008, "Wrong alignment on UFSM_RefCondition");
static_assert(sizeof(UFSM_RefCondition) == 0x000040, "Wrong size on UFSM_RefCondition");
static_assert(offsetof(UFSM_RefCondition, _refcondition) == 0x000038, "Member 'UFSM_RefCondition::_refcondition' has a wrong offset!");

// Class FiniteStateMachine.FSM_Transition
// 0x0028 (0x0060 - 0x0038)
class UFSM_Transition final : public UDataAsset
{
public:
	class FName                                   _transitionName;                                   // 0x0038(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UFSM_State>                 _transitionStateClass;                             // 0x0048(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UFSM_Condition*>                 _conditions;                                       // 0x0050(0x0010)(Edit, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FSM_Transition">();
	}
	static class UFSM_Transition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFSM_Transition>();
	}
};
static_assert(alignof(UFSM_Transition) == 0x000008, "Wrong alignment on UFSM_Transition");
static_assert(sizeof(UFSM_Transition) == 0x000060, "Wrong size on UFSM_Transition");
static_assert(offsetof(UFSM_Transition, _transitionName) == 0x000038, "Member 'UFSM_Transition::_transitionName' has a wrong offset!");
static_assert(offsetof(UFSM_Transition, _transitionStateClass) == 0x000048, "Member 'UFSM_Transition::_transitionStateClass' has a wrong offset!");
static_assert(offsetof(UFSM_Transition, _conditions) == 0x000050, "Member 'UFSM_Transition::_conditions' has a wrong offset!");

}

