#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheLegion

#include "Basic.hpp"

#include "TheLegion_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function TheLegion.DiscordancePerk.Multicast_AddGeneratorAura
// 0x0008 (0x0008 - 0x0000)
struct DiscordancePerk_Multicast_AddGeneratorAura final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordancePerk_Multicast_AddGeneratorAura) == 0x000008, "Wrong alignment on DiscordancePerk_Multicast_AddGeneratorAura");
static_assert(sizeof(DiscordancePerk_Multicast_AddGeneratorAura) == 0x000008, "Wrong size on DiscordancePerk_Multicast_AddGeneratorAura");
static_assert(offsetof(DiscordancePerk_Multicast_AddGeneratorAura, Generator) == 0x000000, "Member 'DiscordancePerk_Multicast_AddGeneratorAura::Generator' has a wrong offset!");

// Function TheLegion.DiscordancePerk.Multicast_AddLingeringGeneratorAura
// 0x0008 (0x0008 - 0x0000)
struct DiscordancePerk_Multicast_AddLingeringGeneratorAura final
{
public:
	class AGenerator*                             Generator;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordancePerk_Multicast_AddLingeringGeneratorAura) == 0x000008, "Wrong alignment on DiscordancePerk_Multicast_AddLingeringGeneratorAura");
static_assert(sizeof(DiscordancePerk_Multicast_AddLingeringGeneratorAura) == 0x000008, "Wrong size on DiscordancePerk_Multicast_AddLingeringGeneratorAura");
static_assert(offsetof(DiscordancePerk_Multicast_AddLingeringGeneratorAura, Generator) == 0x000000, "Member 'DiscordancePerk_Multicast_AddLingeringGeneratorAura::Generator' has a wrong offset!");

// Function TheLegion.DiscordancePerk.GetAuraLingerDuration
// 0x0004 (0x0004 - 0x0000)
struct DiscordancePerk_GetAuraLingerDuration final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordancePerk_GetAuraLingerDuration) == 0x000004, "Wrong alignment on DiscordancePerk_GetAuraLingerDuration");
static_assert(sizeof(DiscordancePerk_GetAuraLingerDuration) == 0x000004, "Wrong size on DiscordancePerk_GetAuraLingerDuration");
static_assert(offsetof(DiscordancePerk_GetAuraLingerDuration, ReturnValue) == 0x000000, "Member 'DiscordancePerk_GetAuraLingerDuration::ReturnValue' has a wrong offset!");

// Function TheLegion.DiscordancePerk.GetEffectRangeAtLevel
// 0x0004 (0x0004 - 0x0000)
struct DiscordancePerk_GetEffectRangeAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DiscordancePerk_GetEffectRangeAtLevel) == 0x000004, "Wrong alignment on DiscordancePerk_GetEffectRangeAtLevel");
static_assert(sizeof(DiscordancePerk_GetEffectRangeAtLevel) == 0x000004, "Wrong size on DiscordancePerk_GetEffectRangeAtLevel");
static_assert(offsetof(DiscordancePerk_GetEffectRangeAtLevel, ReturnValue) == 0x000000, "Member 'DiscordancePerk_GetEffectRangeAtLevel::ReturnValue' has a wrong offset!");

// Function TheLegion.FrenzyComponent.EndFrenzy
// 0x0001 (0x0001 - 0x0000)
struct FrenzyComponent_EndFrenzy final
{
public:
	EFrenzyEndReason                              Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_EndFrenzy) == 0x000001, "Wrong alignment on FrenzyComponent_EndFrenzy");
static_assert(sizeof(FrenzyComponent_EndFrenzy) == 0x000001, "Wrong size on FrenzyComponent_EndFrenzy");
static_assert(offsetof(FrenzyComponent_EndFrenzy, Reason) == 0x000000, "Member 'FrenzyComponent_EndFrenzy::Reason' has a wrong offset!");

// Function TheLegion.FrenzyComponent.SetObjectState
// 0x0008 (0x0008 - 0x0000)
struct FrenzyComponent_SetObjectState final
{
public:
	class UGameplayTagContainerComponent*         ObjectState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_SetObjectState) == 0x000008, "Wrong alignment on FrenzyComponent_SetObjectState");
static_assert(sizeof(FrenzyComponent_SetObjectState) == 0x000008, "Wrong size on FrenzyComponent_SetObjectState");
static_assert(offsetof(FrenzyComponent_SetObjectState, ObjectState) == 0x000000, "Member 'FrenzyComponent_SetObjectState::ObjectState' has a wrong offset!");

// Function TheLegion.FrenzyComponent.SetStartingFrenzy
// 0x0001 (0x0001 - 0x0000)
struct FrenzyComponent_SetStartingFrenzy final
{
public:
	bool                                          StartingFrenzy;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_SetStartingFrenzy) == 0x000001, "Wrong alignment on FrenzyComponent_SetStartingFrenzy");
static_assert(sizeof(FrenzyComponent_SetStartingFrenzy) == 0x000001, "Wrong size on FrenzyComponent_SetStartingFrenzy");
static_assert(offsetof(FrenzyComponent_SetStartingFrenzy, StartingFrenzy) == 0x000000, "Member 'FrenzyComponent_SetStartingFrenzy::StartingFrenzy' has a wrong offset!");

// Function TheLegion.FrenzyComponent.CanManuallyEndFrenzy
// 0x0001 (0x0001 - 0x0000)
struct FrenzyComponent_CanManuallyEndFrenzy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_CanManuallyEndFrenzy) == 0x000001, "Wrong alignment on FrenzyComponent_CanManuallyEndFrenzy");
static_assert(sizeof(FrenzyComponent_CanManuallyEndFrenzy) == 0x000001, "Wrong size on FrenzyComponent_CanManuallyEndFrenzy");
static_assert(offsetof(FrenzyComponent_CanManuallyEndFrenzy, ReturnValue) == 0x000000, "Member 'FrenzyComponent_CanManuallyEndFrenzy::ReturnValue' has a wrong offset!");

// Function TheLegion.FrenzyComponent.CanStartFrenzy
// 0x0001 (0x0001 - 0x0000)
struct FrenzyComponent_CanStartFrenzy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_CanStartFrenzy) == 0x000001, "Wrong alignment on FrenzyComponent_CanStartFrenzy");
static_assert(sizeof(FrenzyComponent_CanStartFrenzy) == 0x000001, "Wrong size on FrenzyComponent_CanStartFrenzy");
static_assert(offsetof(FrenzyComponent_CanStartFrenzy, ReturnValue) == 0x000000, "Member 'FrenzyComponent_CanStartFrenzy::ReturnValue' has a wrong offset!");

// Function TheLegion.FrenzyComponent.GetFrenzyTier
// 0x0004 (0x0004 - 0x0000)
struct FrenzyComponent_GetFrenzyTier final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_GetFrenzyTier) == 0x000004, "Wrong alignment on FrenzyComponent_GetFrenzyTier");
static_assert(sizeof(FrenzyComponent_GetFrenzyTier) == 0x000004, "Wrong size on FrenzyComponent_GetFrenzyTier");
static_assert(offsetof(FrenzyComponent_GetFrenzyTier, ReturnValue) == 0x000000, "Member 'FrenzyComponent_GetFrenzyTier::ReturnValue' has a wrong offset!");

// Function TheLegion.FrenzyComponent.HasStartedInjuredBleedoutDuringThisFrenzy
// 0x0001 (0x0001 - 0x0000)
struct FrenzyComponent_HasStartedInjuredBleedoutDuringThisFrenzy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_HasStartedInjuredBleedoutDuringThisFrenzy) == 0x000001, "Wrong alignment on FrenzyComponent_HasStartedInjuredBleedoutDuringThisFrenzy");
static_assert(sizeof(FrenzyComponent_HasStartedInjuredBleedoutDuringThisFrenzy) == 0x000001, "Wrong size on FrenzyComponent_HasStartedInjuredBleedoutDuringThisFrenzy");
static_assert(offsetof(FrenzyComponent_HasStartedInjuredBleedoutDuringThisFrenzy, ReturnValue) == 0x000000, "Member 'FrenzyComponent_HasStartedInjuredBleedoutDuringThisFrenzy::ReturnValue' has a wrong offset!");

// Function TheLegion.FrenzyComponent.IsInFrenzy
// 0x0001 (0x0001 - 0x0000)
struct FrenzyComponent_IsInFrenzy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_IsInFrenzy) == 0x000001, "Wrong alignment on FrenzyComponent_IsInFrenzy");
static_assert(sizeof(FrenzyComponent_IsInFrenzy) == 0x000001, "Wrong size on FrenzyComponent_IsInFrenzy");
static_assert(offsetof(FrenzyComponent_IsInFrenzy, ReturnValue) == 0x000000, "Member 'FrenzyComponent_IsInFrenzy::ReturnValue' has a wrong offset!");

// Function TheLegion.FrenzyComponent.IsInFrenzyCooldown
// 0x0001 (0x0001 - 0x0000)
struct FrenzyComponent_IsInFrenzyCooldown final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_IsInFrenzyCooldown) == 0x000001, "Wrong alignment on FrenzyComponent_IsInFrenzyCooldown");
static_assert(sizeof(FrenzyComponent_IsInFrenzyCooldown) == 0x000001, "Wrong size on FrenzyComponent_IsInFrenzyCooldown");
static_assert(offsetof(FrenzyComponent_IsInFrenzyCooldown, ReturnValue) == 0x000000, "Member 'FrenzyComponent_IsInFrenzyCooldown::ReturnValue' has a wrong offset!");

// Function TheLegion.FrenzyComponent.IsStartingFrenzy
// 0x0001 (0x0001 - 0x0000)
struct FrenzyComponent_IsStartingFrenzy final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FrenzyComponent_IsStartingFrenzy) == 0x000001, "Wrong alignment on FrenzyComponent_IsStartingFrenzy");
static_assert(sizeof(FrenzyComponent_IsStartingFrenzy) == 0x000001, "Wrong size on FrenzyComponent_IsStartingFrenzy");
static_assert(offsetof(FrenzyComponent_IsStartingFrenzy, ReturnValue) == 0x000000, "Member 'FrenzyComponent_IsStartingFrenzy::ReturnValue' has a wrong offset!");

// Function TheLegion.LegionKillerAnalyticsComponent.SetGameEventDispatcher
// 0x0008 (0x0008 - 0x0000)
struct LegionKillerAnalyticsComponent_SetGameEventDispatcher final
{
public:
	class UGameEventDispatcher*                   GameEventDispatcher;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegionKillerAnalyticsComponent_SetGameEventDispatcher) == 0x000008, "Wrong alignment on LegionKillerAnalyticsComponent_SetGameEventDispatcher");
static_assert(sizeof(LegionKillerAnalyticsComponent_SetGameEventDispatcher) == 0x000008, "Wrong size on LegionKillerAnalyticsComponent_SetGameEventDispatcher");
static_assert(offsetof(LegionKillerAnalyticsComponent_SetGameEventDispatcher, GameEventDispatcher) == 0x000000, "Member 'LegionKillerAnalyticsComponent_SetGameEventDispatcher::GameEventDispatcher' has a wrong offset!");

// Function TheLegion.LegionSurvivorAnalyticsComponent.OnGameEventDispatched
// 0x0040 (0x0040 - 0x0000)
struct LegionSurvivorAnalyticsComponent_OnGameEventDispatched final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegionSurvivorAnalyticsComponent_OnGameEventDispatched) == 0x000008, "Wrong alignment on LegionSurvivorAnalyticsComponent_OnGameEventDispatched");
static_assert(sizeof(LegionSurvivorAnalyticsComponent_OnGameEventDispatched) == 0x000040, "Wrong size on LegionSurvivorAnalyticsComponent_OnGameEventDispatched");
static_assert(offsetof(LegionSurvivorAnalyticsComponent_OnGameEventDispatched, GameEventType) == 0x000000, "Member 'LegionSurvivorAnalyticsComponent_OnGameEventDispatched::GameEventType' has a wrong offset!");
static_assert(offsetof(LegionSurvivorAnalyticsComponent_OnGameEventDispatched, GameEventData) == 0x000010, "Member 'LegionSurvivorAnalyticsComponent_OnGameEventDispatched::GameEventData' has a wrong offset!");

// Function TheLegion.LegionSurvivorAnalyticsComponent.SetGameEventDispatcher
// 0x0008 (0x0008 - 0x0000)
struct LegionSurvivorAnalyticsComponent_SetGameEventDispatcher final
{
public:
	class UGameEventDispatcher*                   GameEventDispatcher;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LegionSurvivorAnalyticsComponent_SetGameEventDispatcher) == 0x000008, "Wrong alignment on LegionSurvivorAnalyticsComponent_SetGameEventDispatcher");
static_assert(sizeof(LegionSurvivorAnalyticsComponent_SetGameEventDispatcher) == 0x000008, "Wrong size on LegionSurvivorAnalyticsComponent_SetGameEventDispatcher");
static_assert(offsetof(LegionSurvivorAnalyticsComponent_SetGameEventDispatcher, GameEventDispatcher) == 0x000000, "Member 'LegionSurvivorAnalyticsComponent_SetGameEventDispatcher::GameEventDispatcher' has a wrong offset!");

// Function TheLegion.ModifyFrenzyFOVEffect.Authority_OnFrenzyTierIncreased
// 0x0004 (0x0004 - 0x0000)
struct ModifyFrenzyFOVEffect_Authority_OnFrenzyTierIncreased final
{
public:
	int32                                         Tier;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ModifyFrenzyFOVEffect_Authority_OnFrenzyTierIncreased) == 0x000004, "Wrong alignment on ModifyFrenzyFOVEffect_Authority_OnFrenzyTierIncreased");
static_assert(sizeof(ModifyFrenzyFOVEffect_Authority_OnFrenzyTierIncreased) == 0x000004, "Wrong size on ModifyFrenzyFOVEffect_Authority_OnFrenzyTierIncreased");
static_assert(offsetof(ModifyFrenzyFOVEffect_Authority_OnFrenzyTierIncreased, Tier) == 0x000000, "Member 'ModifyFrenzyFOVEffect_Authority_OnFrenzyTierIncreased::Tier' has a wrong offset!");

}

