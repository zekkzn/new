#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Halloween2024

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Halloween2024.EscapeChaseAfterVoidBombQEEvaluator.OnChaseEnd
// 0x0040 (0x0040 - 0x0000)
struct EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd) == 0x000008, "Wrong alignment on EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd");
static_assert(sizeof(EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd) == 0x000040, "Wrong size on EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd");
static_assert(offsetof(EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd, GameEventType) == 0x000000, "Member 'EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd::GameEventType' has a wrong offset!");
static_assert(offsetof(EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd, GameEventData) == 0x000010, "Member 'EscapeChaseAfterVoidBombQEEvaluator_OnChaseEnd::GameEventData' has a wrong offset!");

// Function Halloween2024.EscapeChaseAfterVoidBombQEEvaluator.OnVoidBombDropped
// 0x0040 (0x0040 - 0x0000)
struct EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped) == 0x000008, "Wrong alignment on EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped");
static_assert(sizeof(EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped) == 0x000040, "Wrong size on EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped");
static_assert(offsetof(EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped, GameEventType) == 0x000000, "Member 'EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped::GameEventType' has a wrong offset!");
static_assert(offsetof(EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped, GameEventData) == 0x000010, "Member 'EscapeChaseAfterVoidBombQEEvaluator_OnVoidBombDropped::GameEventData' has a wrong offset!");

// Function Halloween2024.Halloween2024EventCheatComponent.DBD_SetVoidBombCrafted
// 0x0001 (0x0001 - 0x0000)
struct Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted final
{
public:
	bool                                          Crafted;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted) == 0x000001, "Wrong alignment on Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted");
static_assert(sizeof(Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted) == 0x000001, "Wrong size on Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted");
static_assert(offsetof(Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted, Crafted) == 0x000000, "Member 'Halloween2024EventCheatComponent_DBD_SetVoidBombCrafted::Crafted' has a wrong offset!");

// Function Halloween2024.VoidBomb.Authority_OnScratchMarkAreaOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct VoidBomb_Authority_OnScratchMarkAreaOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidBomb_Authority_OnScratchMarkAreaOverlapBegin) == 0x000008, "Wrong alignment on VoidBomb_Authority_OnScratchMarkAreaOverlapBegin");
static_assert(sizeof(VoidBomb_Authority_OnScratchMarkAreaOverlapBegin) == 0x000110, "Wrong size on VoidBomb_Authority_OnScratchMarkAreaOverlapBegin");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapBegin, OverlappedComponent) == 0x000000, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapBegin, OtherActor) == 0x000008, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapBegin, OtherComp) == 0x000010, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapBegin, bFromSweep) == 0x00001C, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapBegin, SweepResult) == 0x000020, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapBegin::SweepResult' has a wrong offset!");

// Function Halloween2024.VoidBomb.Authority_OnScratchMarkAreaOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct VoidBomb_Authority_OnScratchMarkAreaOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidBomb_Authority_OnScratchMarkAreaOverlapEnd) == 0x000008, "Wrong alignment on VoidBomb_Authority_OnScratchMarkAreaOverlapEnd");
static_assert(sizeof(VoidBomb_Authority_OnScratchMarkAreaOverlapEnd) == 0x000020, "Wrong size on VoidBomb_Authority_OnScratchMarkAreaOverlapEnd");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapEnd, OverlappedComponent) == 0x000000, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapEnd, OtherActor) == 0x000008, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapEnd, OtherComp) == 0x000010, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(VoidBomb_Authority_OnScratchMarkAreaOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'VoidBomb_Authority_OnScratchMarkAreaOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Halloween2024.VoidBomb.Cosmetic_OnLocallyObservedChanged
// 0x0010 (0x0010 - 0x0000)
struct VoidBomb_Cosmetic_OnLocallyObservedChanged final
{
public:
	const class ADBDPlayer*                       LocallyObservedPlayer;                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverlapping;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidBomb_Cosmetic_OnLocallyObservedChanged) == 0x000008, "Wrong alignment on VoidBomb_Cosmetic_OnLocallyObservedChanged");
static_assert(sizeof(VoidBomb_Cosmetic_OnLocallyObservedChanged) == 0x000010, "Wrong size on VoidBomb_Cosmetic_OnLocallyObservedChanged");
static_assert(offsetof(VoidBomb_Cosmetic_OnLocallyObservedChanged, LocallyObservedPlayer) == 0x000000, "Member 'VoidBomb_Cosmetic_OnLocallyObservedChanged::LocallyObservedPlayer' has a wrong offset!");
static_assert(offsetof(VoidBomb_Cosmetic_OnLocallyObservedChanged, IsOverlapping) == 0x000008, "Member 'VoidBomb_Cosmetic_OnLocallyObservedChanged::IsOverlapping' has a wrong offset!");

// Function Halloween2024.VoidBomb.Cosmetic_OnLocallyObservedCharacterBeginOverlap
// 0x0008 (0x0008 - 0x0000)
struct VoidBomb_Cosmetic_OnLocallyObservedCharacterBeginOverlap final
{
public:
	class ADBDPlayer*                             LocallyObservedPlayer;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidBomb_Cosmetic_OnLocallyObservedCharacterBeginOverlap) == 0x000008, "Wrong alignment on VoidBomb_Cosmetic_OnLocallyObservedCharacterBeginOverlap");
static_assert(sizeof(VoidBomb_Cosmetic_OnLocallyObservedCharacterBeginOverlap) == 0x000008, "Wrong size on VoidBomb_Cosmetic_OnLocallyObservedCharacterBeginOverlap");
static_assert(offsetof(VoidBomb_Cosmetic_OnLocallyObservedCharacterBeginOverlap, LocallyObservedPlayer) == 0x000000, "Member 'VoidBomb_Cosmetic_OnLocallyObservedCharacterBeginOverlap::LocallyObservedPlayer' has a wrong offset!");

// Function Halloween2024.VoidBomb.Cosmetic_OnLocallyObservedCharacterEndOverlap
// 0x0008 (0x0008 - 0x0000)
struct VoidBomb_Cosmetic_OnLocallyObservedCharacterEndOverlap final
{
public:
	class ADBDPlayer*                             LocallyObservedPlayer;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidBomb_Cosmetic_OnLocallyObservedCharacterEndOverlap) == 0x000008, "Wrong alignment on VoidBomb_Cosmetic_OnLocallyObservedCharacterEndOverlap");
static_assert(sizeof(VoidBomb_Cosmetic_OnLocallyObservedCharacterEndOverlap) == 0x000008, "Wrong size on VoidBomb_Cosmetic_OnLocallyObservedCharacterEndOverlap");
static_assert(offsetof(VoidBomb_Cosmetic_OnLocallyObservedCharacterEndOverlap, LocallyObservedPlayer) == 0x000000, "Member 'VoidBomb_Cosmetic_OnLocallyObservedCharacterEndOverlap::LocallyObservedPlayer' has a wrong offset!");

// Function Halloween2024.VoidBomb.Local_OnSmokeCloudAreaOverlapBegin
// 0x0110 (0x0110 - 0x0000)
struct VoidBomb_Local_OnSmokeCloudAreaOverlapBegin final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidBomb_Local_OnSmokeCloudAreaOverlapBegin) == 0x000008, "Wrong alignment on VoidBomb_Local_OnSmokeCloudAreaOverlapBegin");
static_assert(sizeof(VoidBomb_Local_OnSmokeCloudAreaOverlapBegin) == 0x000110, "Wrong size on VoidBomb_Local_OnSmokeCloudAreaOverlapBegin");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapBegin, OverlappedComponent) == 0x000000, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapBegin::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapBegin, OtherActor) == 0x000008, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapBegin::OtherActor' has a wrong offset!");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapBegin, OtherComp) == 0x000010, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapBegin::OtherComp' has a wrong offset!");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapBegin, OtherBodyIndex) == 0x000018, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapBegin::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapBegin, bFromSweep) == 0x00001C, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapBegin::bFromSweep' has a wrong offset!");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapBegin, SweepResult) == 0x000020, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapBegin::SweepResult' has a wrong offset!");

// Function Halloween2024.VoidBomb.Local_OnSmokeCloudAreaOverlapEnd
// 0x0020 (0x0020 - 0x0000)
struct VoidBomb_Local_OnSmokeCloudAreaOverlapEnd final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidBomb_Local_OnSmokeCloudAreaOverlapEnd) == 0x000008, "Wrong alignment on VoidBomb_Local_OnSmokeCloudAreaOverlapEnd");
static_assert(sizeof(VoidBomb_Local_OnSmokeCloudAreaOverlapEnd) == 0x000020, "Wrong size on VoidBomb_Local_OnSmokeCloudAreaOverlapEnd");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapEnd, OverlappedComponent) == 0x000000, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapEnd::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapEnd, OtherActor) == 0x000008, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapEnd::OtherActor' has a wrong offset!");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapEnd, OtherComp) == 0x000010, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapEnd::OtherComp' has a wrong offset!");
static_assert(offsetof(VoidBomb_Local_OnSmokeCloudAreaOverlapEnd, OtherBodyIndex) == 0x000018, "Member 'VoidBomb_Local_OnSmokeCloudAreaOverlapEnd::OtherBodyIndex' has a wrong offset!");

// Function Halloween2024.VoidBomb.GetStartedExplosion
// 0x0001 (0x0001 - 0x0000)
struct VoidBomb_GetStartedExplosion final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidBomb_GetStartedExplosion) == 0x000001, "Wrong alignment on VoidBomb_GetStartedExplosion");
static_assert(sizeof(VoidBomb_GetStartedExplosion) == 0x000001, "Wrong size on VoidBomb_GetStartedExplosion");
static_assert(offsetof(VoidBomb_GetStartedExplosion, ReturnValue) == 0x000000, "Member 'VoidBomb_GetStartedExplosion::ReturnValue' has a wrong offset!");

// Function Halloween2024.VoidEmpowermentWidgetComponent.OnInteractorLockChangedEvent
// 0x0010 (0x0010 - 0x0000)
struct VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent final
{
public:
	bool                                          Interacting;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent) == 0x000008, "Wrong alignment on VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent");
static_assert(sizeof(VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent) == 0x000010, "Wrong size on VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent");
static_assert(offsetof(VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent, Interacting) == 0x000000, "Member 'VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent::Interacting' has a wrong offset!");
static_assert(offsetof(VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent, InteractingPlayer) == 0x000008, "Member 'VoidEmpowermentWidgetComponent_OnInteractorLockChangedEvent::InteractingPlayer' has a wrong offset!");

// Function Halloween2024.VoidStation.Cosmetic_OnItemCrafted
// 0x0002 (0x0002 - 0x0000)
struct VoidStation_Cosmetic_OnItemCrafted final
{
public:
	bool                                          ItemCrafted;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          KillerItem;                                        // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidStation_Cosmetic_OnItemCrafted) == 0x000001, "Wrong alignment on VoidStation_Cosmetic_OnItemCrafted");
static_assert(sizeof(VoidStation_Cosmetic_OnItemCrafted) == 0x000002, "Wrong size on VoidStation_Cosmetic_OnItemCrafted");
static_assert(offsetof(VoidStation_Cosmetic_OnItemCrafted, ItemCrafted) == 0x000000, "Member 'VoidStation_Cosmetic_OnItemCrafted::ItemCrafted' has a wrong offset!");
static_assert(offsetof(VoidStation_Cosmetic_OnItemCrafted, KillerItem) == 0x000001, "Member 'VoidStation_Cosmetic_OnItemCrafted::KillerItem' has a wrong offset!");

// Function Halloween2024.VoidStation.Cosmetic_OnPlayerDepositingEnergyChanged
// 0x0001 (0x0001 - 0x0000)
struct VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged final
{
public:
	bool                                          IsInteracting;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged) == 0x000001, "Wrong alignment on VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged");
static_assert(sizeof(VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged) == 0x000001, "Wrong size on VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged");
static_assert(offsetof(VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged, IsInteracting) == 0x000000, "Member 'VoidStation_Cosmetic_OnPlayerDepositingEnergyChanged::IsInteracting' has a wrong offset!");

// Function Halloween2024.VoidStation.GetIsVoidBombSpawned
// 0x0001 (0x0001 - 0x0000)
struct VoidStation_GetIsVoidBombSpawned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidStation_GetIsVoidBombSpawned) == 0x000001, "Wrong alignment on VoidStation_GetIsVoidBombSpawned");
static_assert(sizeof(VoidStation_GetIsVoidBombSpawned) == 0x000001, "Wrong size on VoidStation_GetIsVoidBombSpawned");
static_assert(offsetof(VoidStation_GetIsVoidBombSpawned, ReturnValue) == 0x000000, "Member 'VoidStation_GetIsVoidBombSpawned::ReturnValue' has a wrong offset!");

}

