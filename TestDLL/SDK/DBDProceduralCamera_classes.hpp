#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDProceduralCamera

#include "Basic.hpp"

#include "DBDProceduralCamera_structs.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class DBDProceduralCamera.CameraShotType
// 0x0028 (0x02C8 - 0x02A0)
class ACameraShotType final : public AActor
{
public:
	bool                                          bIsCameraRotationFixed;                            // 0x02A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2A1[0x3];                                      // 0x02A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimumDistanceFromCamera;                         // 0x02A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaximumDistanceFromCamera;                         // 0x02A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HorizontalAngleFreedom;                            // 0x02AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VerticalAngleFreedom;                              // 0x02B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMotionType                                   CameraMotionType;                                  // 0x02B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B5[0x3];                                      // 0x02B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KeyPoseNumber;                                     // 0x02B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2BC[0x4];                                      // 0x02BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CameraTrack;                                       // 0x02C0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraShotType">();
	}
	static class ACameraShotType* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraShotType>();
	}
};
static_assert(alignof(ACameraShotType) == 0x000008, "Wrong alignment on ACameraShotType");
static_assert(sizeof(ACameraShotType) == 0x0002C8, "Wrong size on ACameraShotType");
static_assert(offsetof(ACameraShotType, bIsCameraRotationFixed) == 0x0002A0, "Member 'ACameraShotType::bIsCameraRotationFixed' has a wrong offset!");
static_assert(offsetof(ACameraShotType, MinimumDistanceFromCamera) == 0x0002A4, "Member 'ACameraShotType::MinimumDistanceFromCamera' has a wrong offset!");
static_assert(offsetof(ACameraShotType, MaximumDistanceFromCamera) == 0x0002A8, "Member 'ACameraShotType::MaximumDistanceFromCamera' has a wrong offset!");
static_assert(offsetof(ACameraShotType, HorizontalAngleFreedom) == 0x0002AC, "Member 'ACameraShotType::HorizontalAngleFreedom' has a wrong offset!");
static_assert(offsetof(ACameraShotType, VerticalAngleFreedom) == 0x0002B0, "Member 'ACameraShotType::VerticalAngleFreedom' has a wrong offset!");
static_assert(offsetof(ACameraShotType, CameraMotionType) == 0x0002B4, "Member 'ACameraShotType::CameraMotionType' has a wrong offset!");
static_assert(offsetof(ACameraShotType, KeyPoseNumber) == 0x0002B8, "Member 'ACameraShotType::KeyPoseNumber' has a wrong offset!");
static_assert(offsetof(ACameraShotType, CameraTrack) == 0x0002C0, "Member 'ACameraShotType::CameraTrack' has a wrong offset!");

// Class DBDProceduralCamera.ProceduralCameraRaD
// 0x0050 (0x0378 - 0x0328)
class AProceduralCameraRaD final : public APawn
{
public:
	class UCameraComponent*                       CameraComp;                                        // 0x0328(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 TargetActor;                                       // 0x0330(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FCameraShot>                    Shots;                                             // 0x0338(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	float                                         MaximumCinematicLengthWanted;                      // 0x0348(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CinematicTotalLength;                              // 0x034C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_350[0x28];                                     // 0x0350(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginCinematic();
	void ComputeTrackObstructionScore(struct FCameraShot* CameraShot);
	void OnCameraTransition(float TransitionDuration, float BeginAt);
	void PlayCinematic();
	void SelectTracks();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProceduralCameraRaD">();
	}
	static class AProceduralCameraRaD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProceduralCameraRaD>();
	}
};
static_assert(alignof(AProceduralCameraRaD) == 0x000008, "Wrong alignment on AProceduralCameraRaD");
static_assert(sizeof(AProceduralCameraRaD) == 0x000378, "Wrong size on AProceduralCameraRaD");
static_assert(offsetof(AProceduralCameraRaD, CameraComp) == 0x000328, "Member 'AProceduralCameraRaD::CameraComp' has a wrong offset!");
static_assert(offsetof(AProceduralCameraRaD, TargetActor) == 0x000330, "Member 'AProceduralCameraRaD::TargetActor' has a wrong offset!");
static_assert(offsetof(AProceduralCameraRaD, Shots) == 0x000338, "Member 'AProceduralCameraRaD::Shots' has a wrong offset!");
static_assert(offsetof(AProceduralCameraRaD, MaximumCinematicLengthWanted) == 0x000348, "Member 'AProceduralCameraRaD::MaximumCinematicLengthWanted' has a wrong offset!");
static_assert(offsetof(AProceduralCameraRaD, CinematicTotalLength) == 0x00034C, "Member 'AProceduralCameraRaD::CinematicTotalLength' has a wrong offset!");

}

