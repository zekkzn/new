#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheK37

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "DataTableUtilities_structs.hpp"


namespace SDK
{

// Enum TheK37.EK37FlamePillarState
// NumValues: 0x0005
enum class EK37FlamePillarState : uint8
{
	NotSpawned                               = 0,
	Spawning                                 = 1,
	Erupting                                 = 2,
	Vanishing                                = 3,
	EK37FlamePillarState_MAX                 = 4,
};

// ScriptStruct TheK37.K37CastleSpawnData
// 0x0048 (0x0050 - 0x0008)
struct FK37CastleSpawnData final : public FDBDTableRowBase
{
public:
	class FName                                   _mapId;                                            // 0x0008(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpawnVista;                                       // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                _location;                                         // 0x0018(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               _rotation;                                         // 0x0030(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         _uniformScale;                                     // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK37CastleSpawnData) == 0x000008, "Wrong alignment on FK37CastleSpawnData");
static_assert(sizeof(FK37CastleSpawnData) == 0x000050, "Wrong size on FK37CastleSpawnData");
static_assert(offsetof(FK37CastleSpawnData, _mapId) == 0x000008, "Member 'FK37CastleSpawnData::_mapId' has a wrong offset!");
static_assert(offsetof(FK37CastleSpawnData, bSpawnVista) == 0x000014, "Member 'FK37CastleSpawnData::bSpawnVista' has a wrong offset!");
static_assert(offsetof(FK37CastleSpawnData, _location) == 0x000018, "Member 'FK37CastleSpawnData::_location' has a wrong offset!");
static_assert(offsetof(FK37CastleSpawnData, _rotation) == 0x000030, "Member 'FK37CastleSpawnData::_rotation' has a wrong offset!");
static_assert(offsetof(FK37CastleSpawnData, _uniformScale) == 0x000048, "Member 'FK37CastleSpawnData::_uniformScale' has a wrong offset!");

// ScriptStruct TheK37.K37FlamePillarStateData
// 0x0008 (0x0008 - 0x0000)
struct FK37FlamePillarStateData final
{
public:
	EK37FlamePillarState                          PillarStateID;                                     // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateDuration;                                     // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK37FlamePillarStateData) == 0x000004, "Wrong alignment on FK37FlamePillarStateData");
static_assert(sizeof(FK37FlamePillarStateData) == 0x000008, "Wrong size on FK37FlamePillarStateData");
static_assert(offsetof(FK37FlamePillarStateData, PillarStateID) == 0x000000, "Member 'FK37FlamePillarStateData::PillarStateID' has a wrong offset!");
static_assert(offsetof(FK37FlamePillarStateData, StateDuration) == 0x000004, "Member 'FK37FlamePillarStateData::StateDuration' has a wrong offset!");

// ScriptStruct TheK37.ChestInRangeData
// 0x0010 (0x0010 - 0x0000)
struct FChestInRangeData final
{
public:
	TArray<class ASearchable*>                    _chestInRange;                                     // 0x0000(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
};
static_assert(alignof(FChestInRangeData) == 0x000008, "Wrong alignment on FChestInRangeData");
static_assert(sizeof(FChestInRangeData) == 0x000010, "Wrong size on FChestInRangeData");
static_assert(offsetof(FChestInRangeData, _chestInRange) == 0x000000, "Member 'FChestInRangeData::_chestInRange' has a wrong offset!");

// ScriptStruct TheK37.K37ScentParticleSpawningData
// 0x0030 (0x0030 - 0x0000)
struct FK37ScentParticleSpawningData final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0018(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(FK37ScentParticleSpawningData) == 0x000008, "Wrong alignment on FK37ScentParticleSpawningData");
static_assert(sizeof(FK37ScentParticleSpawningData) == 0x000030, "Wrong size on FK37ScentParticleSpawningData");
static_assert(offsetof(FK37ScentParticleSpawningData, Location) == 0x000000, "Member 'FK37ScentParticleSpawningData::Location' has a wrong offset!");
static_assert(offsetof(FK37ScentParticleSpawningData, Rotation) == 0x000018, "Member 'FK37ScentParticleSpawningData::Rotation' has a wrong offset!");

// ScriptStruct TheK37.K37FlamePillarLineOfSightTolerance
// 0x0018 (0x0018 - 0x0000)
struct FK37FlamePillarLineOfSightTolerance final
{
public:
	struct FVector2D                              Offset;                                            // 0x0000(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceExtension;                                    // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FK37FlamePillarLineOfSightTolerance) == 0x000008, "Wrong alignment on FK37FlamePillarLineOfSightTolerance");
static_assert(sizeof(FK37FlamePillarLineOfSightTolerance) == 0x000018, "Wrong size on FK37FlamePillarLineOfSightTolerance");
static_assert(offsetof(FK37FlamePillarLineOfSightTolerance, Offset) == 0x000000, "Member 'FK37FlamePillarLineOfSightTolerance::Offset' has a wrong offset!");
static_assert(offsetof(FK37FlamePillarLineOfSightTolerance, TraceExtension) == 0x000010, "Member 'FK37FlamePillarLineOfSightTolerance::TraceExtension' has a wrong offset!");

}

