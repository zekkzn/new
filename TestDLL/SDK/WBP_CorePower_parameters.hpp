#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CorePower

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_CorePower.WBP_CorePower_C.SetStackCount
// 0x0020 (0x0020 - 0x0000)
struct WBP_CorePower_C_SetStackCount final
{
public:
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0000(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue_1;                  // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePower_C_SetStackCount) == 0x000008, "Wrong alignment on WBP_CorePower_C_SetStackCount");
static_assert(sizeof(WBP_CorePower_C_SetStackCount) == 0x000020, "Wrong size on WBP_CorePower_C_SetStackCount");
static_assert(offsetof(WBP_CorePower_C_SetStackCount, CallFunc_Conv_IntToText_ReturnValue) == 0x000000, "Member 'WBP_CorePower_C_SetStackCount::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetStackCount, CallFunc_Greater_IntInt_ReturnValue) == 0x000018, "Member 'WBP_CorePower_C_SetStackCount::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetStackCount, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000019, "Member 'WBP_CorePower_C_SetStackCount::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetStackCount, CallFunc_BooleanAND_ReturnValue) == 0x00001A, "Member 'WBP_CorePower_C_SetStackCount::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetStackCount, CallFunc_BooleanOR_ReturnValue) == 0x00001B, "Member 'WBP_CorePower_C_SetStackCount::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetStackCount, CallFunc_BooleanOR_ReturnValue_1) == 0x00001C, "Member 'WBP_CorePower_C_SetStackCount::CallFunc_BooleanOR_ReturnValue_1' has a wrong offset!");

// Function WBP_CorePower.WBP_CorePower_C.SetRechargeableIcon
// 0x0010 (0x0010 - 0x0000)
struct WBP_CorePower_C_SetRechargeableIcon final
{
public:
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              CallFunc_GetVisibility_ReturnValue;                // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePower_C_SetRechargeableIcon) == 0x000008, "Wrong alignment on WBP_CorePower_C_SetRechargeableIcon");
static_assert(sizeof(WBP_CorePower_C_SetRechargeableIcon) == 0x000010, "Wrong size on WBP_CorePower_C_SetRechargeableIcon");
static_assert(offsetof(WBP_CorePower_C_SetRechargeableIcon, CallFunc_PlayAnimation_ReturnValue) == 0x000000, "Member 'WBP_CorePower_C_SetRechargeableIcon::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetRechargeableIcon, CallFunc_GetVisibility_ReturnValue) == 0x000008, "Member 'WBP_CorePower_C_SetRechargeableIcon::CallFunc_GetVisibility_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetRechargeableIcon, K2Node_SwitchEnum_CmpSuccess) == 0x000009, "Member 'WBP_CorePower_C_SetRechargeableIcon::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_CorePower.WBP_CorePower_C.SetProgressBar
// 0x0050 (0x0050 - 0x0000)
struct WBP_CorePower_C_SetProgressBar final
{
public:
	struct FLinearColor                           Color;                                             // 0x0000(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        ProgressValue;                                     // 0x0010(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_FloatFloat_ReturnValue;           // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           CallFunc_SelectProgressBarColor_ProgressBarColor;  // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Greater_FloatFloat_A_ImplicitCast;        // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        K2Node_VariableSet_ProgressValue_ImplicitCast;     // 0x0040(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetScalarParameterValue_Value_ImplicitCast; // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePower_C_SetProgressBar) == 0x000008, "Wrong alignment on WBP_CorePower_C_SetProgressBar");
static_assert(sizeof(WBP_CorePower_C_SetProgressBar) == 0x000050, "Wrong size on WBP_CorePower_C_SetProgressBar");
static_assert(offsetof(WBP_CorePower_C_SetProgressBar, Color) == 0x000000, "Member 'WBP_CorePower_C_SetProgressBar::Color' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetProgressBar, ProgressValue) == 0x000010, "Member 'WBP_CorePower_C_SetProgressBar::ProgressValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetProgressBar, CallFunc_Greater_FloatFloat_ReturnValue) == 0x000018, "Member 'WBP_CorePower_C_SetProgressBar::CallFunc_Greater_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetProgressBar, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000019, "Member 'WBP_CorePower_C_SetProgressBar::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetProgressBar, CallFunc_SelectProgressBarColor_ProgressBarColor) == 0x00001C, "Member 'WBP_CorePower_C_SetProgressBar::CallFunc_SelectProgressBarColor_ProgressBarColor' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetProgressBar, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000030, "Member 'WBP_CorePower_C_SetProgressBar::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetProgressBar, CallFunc_Greater_FloatFloat_A_ImplicitCast) == 0x000038, "Member 'WBP_CorePower_C_SetProgressBar::CallFunc_Greater_FloatFloat_A_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetProgressBar, K2Node_VariableSet_ProgressValue_ImplicitCast) == 0x000040, "Member 'WBP_CorePower_C_SetProgressBar::K2Node_VariableSet_ProgressValue_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SetProgressBar, CallFunc_SetScalarParameterValue_Value_ImplicitCast) == 0x000048, "Member 'WBP_CorePower_C_SetProgressBar::CallFunc_SetScalarParameterValue_Value_ImplicitCast' has a wrong offset!");

// Function WBP_CorePower.WBP_CorePower_C.SetData
// 0x0128 (0x0128 - 0x0000)
struct WBP_CorePower_C_SetData final
{
public:
	struct FPowerViewData                         PowerViewData;                                     // 0x0000(0x0128)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_CorePower_C_SetData) == 0x000008, "Wrong alignment on WBP_CorePower_C_SetData");
static_assert(sizeof(WBP_CorePower_C_SetData) == 0x000128, "Wrong size on WBP_CorePower_C_SetData");
static_assert(offsetof(WBP_CorePower_C_SetData, PowerViewData) == 0x000000, "Member 'WBP_CorePower_C_SetData::PowerViewData' has a wrong offset!");

// Function WBP_CorePower.WBP_CorePower_C.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct WBP_CorePower_C_SetActiveState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePower_C_SetActiveState) == 0x000001, "Wrong alignment on WBP_CorePower_C_SetActiveState");
static_assert(sizeof(WBP_CorePower_C_SetActiveState) == 0x000001, "Wrong size on WBP_CorePower_C_SetActiveState");
static_assert(offsetof(WBP_CorePower_C_SetActiveState, IsActive) == 0x000000, "Member 'WBP_CorePower_C_SetActiveState::IsActive' has a wrong offset!");

// Function WBP_CorePower.WBP_CorePower_C.SelectProgressBarColor
// 0x0028 (0x0028 - 0x0000)
struct WBP_CorePower_C_SelectProgressBarColor final
{
public:
	EProgressValueDisplayColor                    ProgressValueDisplayColor;                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           ProgressBarColor;                                  // 0x0004(0x0010)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           SelectedColor;                                     // 0x0014(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePower_C_SelectProgressBarColor) == 0x000004, "Wrong alignment on WBP_CorePower_C_SelectProgressBarColor");
static_assert(sizeof(WBP_CorePower_C_SelectProgressBarColor) == 0x000028, "Wrong size on WBP_CorePower_C_SelectProgressBarColor");
static_assert(offsetof(WBP_CorePower_C_SelectProgressBarColor, ProgressValueDisplayColor) == 0x000000, "Member 'WBP_CorePower_C_SelectProgressBarColor::ProgressValueDisplayColor' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SelectProgressBarColor, ProgressBarColor) == 0x000004, "Member 'WBP_CorePower_C_SelectProgressBarColor::ProgressBarColor' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SelectProgressBarColor, SelectedColor) == 0x000014, "Member 'WBP_CorePower_C_SelectProgressBarColor::SelectedColor' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_SelectProgressBarColor, K2Node_SwitchEnum_CmpSuccess) == 0x000024, "Member 'WBP_CorePower_C_SelectProgressBarColor::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

// Function WBP_CorePower.WBP_CorePower_C.IconUpdateAnimation
// 0x0018 (0x0018 - 0x0000)
struct WBP_CorePower_C_IconUpdateAnimation final
{
public:
	bool                                          CallFunc_NotEqual_NameName_ReturnValue;            // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimationForward_ReturnValue;         // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_SoftObjectReference_ReturnValue; // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePower_C_IconUpdateAnimation) == 0x000008, "Wrong alignment on WBP_CorePower_C_IconUpdateAnimation");
static_assert(sizeof(WBP_CorePower_C_IconUpdateAnimation) == 0x000018, "Wrong size on WBP_CorePower_C_IconUpdateAnimation");
static_assert(offsetof(WBP_CorePower_C_IconUpdateAnimation, CallFunc_NotEqual_NameName_ReturnValue) == 0x000000, "Member 'WBP_CorePower_C_IconUpdateAnimation::CallFunc_NotEqual_NameName_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_IconUpdateAnimation, CallFunc_PlayAnimationForward_ReturnValue) == 0x000008, "Member 'WBP_CorePower_C_IconUpdateAnimation::CallFunc_PlayAnimationForward_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_IconUpdateAnimation, CallFunc_NotEqual_SoftObjectReference_ReturnValue) == 0x000010, "Member 'WBP_CorePower_C_IconUpdateAnimation::CallFunc_NotEqual_SoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_IconUpdateAnimation, CallFunc_BooleanAND_ReturnValue) == 0x000011, "Member 'WBP_CorePower_C_IconUpdateAnimation::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");

// Function WBP_CorePower.WBP_CorePower_C.Get Power Data
// 0x0128 (0x0128 - 0x0000)
struct WBP_CorePower_C_Get_Power_Data final
{
public:
	struct FPowerViewData                         NewParam;                                          // 0x0000(0x0128)(Parm, OutParm)
};
static_assert(alignof(WBP_CorePower_C_Get_Power_Data) == 0x000008, "Wrong alignment on WBP_CorePower_C_Get_Power_Data");
static_assert(sizeof(WBP_CorePower_C_Get_Power_Data) == 0x000128, "Wrong size on WBP_CorePower_C_Get_Power_Data");
static_assert(offsetof(WBP_CorePower_C_Get_Power_Data, NewParam) == 0x000000, "Member 'WBP_CorePower_C_Get_Power_Data::NewParam' has a wrong offset!");

// Function WBP_CorePower.WBP_CorePower_C.ExecuteUbergraph_WBP_CorePower
// 0x0168 (0x0168 - 0x0000)
struct WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPowerViewData                         K2Node_Event_powerViewData;                        // 0x0028(0x0128)(ConstParm)
	bool                                          K2Node_Event_IsActive;                             // 0x0150(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0151(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_152[0x2];                                      // 0x0152(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x0154(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower) == 0x000008, "Wrong alignment on WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower");
static_assert(sizeof(WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower) == 0x000168, "Wrong size on WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower");
static_assert(offsetof(WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower, EntryPoint) == 0x000000, "Member 'WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower, Temp_struct_Variable) == 0x000004, "Member 'WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower, Temp_struct_Variable_1) == 0x000014, "Member 'WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower, K2Node_Event_powerViewData) == 0x000028, "Member 'WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower::K2Node_Event_powerViewData' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower, K2Node_Event_IsActive) == 0x000150, "Member 'WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower::K2Node_Event_IsActive' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower, Temp_bool_Variable) == 0x000151, "Member 'WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower, K2Node_Select_Default) == 0x000154, "Member 'WBP_CorePower_C_ExecuteUbergraph_WBP_CorePower::K2Node_Select_Default' has a wrong offset!");

}

