#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BhvrAssetViewer

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "BhvrAssetViewer_structs.hpp"


namespace SDK::Params
{

// Function BhvrAssetViewer.BhvrAssetEnvironmentSystem.SelectEnvironment
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetEnvironmentSystem_SelectEnvironment final
{
public:
	class FString                                 InDisplayName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetEnvironmentSystem_SelectEnvironment) == 0x000008, "Wrong alignment on BhvrAssetEnvironmentSystem_SelectEnvironment");
static_assert(sizeof(BhvrAssetEnvironmentSystem_SelectEnvironment) == 0x000010, "Wrong size on BhvrAssetEnvironmentSystem_SelectEnvironment");
static_assert(offsetof(BhvrAssetEnvironmentSystem_SelectEnvironment, InDisplayName) == 0x000000, "Member 'BhvrAssetEnvironmentSystem_SelectEnvironment::InDisplayName' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightGroup.SetIntensityMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetLightGroup_SetIntensityMultiplier final
{
public:
	float                                         NewIntensityMultiplier;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightGroup_SetIntensityMultiplier) == 0x000004, "Wrong alignment on BhvrAssetLightGroup_SetIntensityMultiplier");
static_assert(sizeof(BhvrAssetLightGroup_SetIntensityMultiplier) == 0x000004, "Wrong size on BhvrAssetLightGroup_SetIntensityMultiplier");
static_assert(offsetof(BhvrAssetLightGroup_SetIntensityMultiplier, NewIntensityMultiplier) == 0x000000, "Member 'BhvrAssetLightGroup_SetIntensityMultiplier::NewIntensityMultiplier' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightGroup.SetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetLightGroup_SetIsEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightGroup_SetIsEnabled) == 0x000001, "Wrong alignment on BhvrAssetLightGroup_SetIsEnabled");
static_assert(sizeof(BhvrAssetLightGroup_SetIsEnabled) == 0x000001, "Wrong size on BhvrAssetLightGroup_SetIsEnabled");
static_assert(offsetof(BhvrAssetLightGroup_SetIsEnabled, bNewValue) == 0x000000, "Member 'BhvrAssetLightGroup_SetIsEnabled::bNewValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightGroup.GetIntensityMultiplier
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetLightGroup_GetIntensityMultiplier final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightGroup_GetIntensityMultiplier) == 0x000004, "Wrong alignment on BhvrAssetLightGroup_GetIntensityMultiplier");
static_assert(sizeof(BhvrAssetLightGroup_GetIntensityMultiplier) == 0x000004, "Wrong size on BhvrAssetLightGroup_GetIntensityMultiplier");
static_assert(offsetof(BhvrAssetLightGroup_GetIntensityMultiplier, ReturnValue) == 0x000000, "Member 'BhvrAssetLightGroup_GetIntensityMultiplier::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightGroup.GetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetLightGroup_GetIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightGroup_GetIsEnabled) == 0x000001, "Wrong alignment on BhvrAssetLightGroup_GetIsEnabled");
static_assert(sizeof(BhvrAssetLightGroup_GetIsEnabled) == 0x000001, "Wrong size on BhvrAssetLightGroup_GetIsEnabled");
static_assert(offsetof(BhvrAssetLightGroup_GetIsEnabled, ReturnValue) == 0x000000, "Member 'BhvrAssetLightGroup_GetIsEnabled::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightGroup.HasLights
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetLightGroup_HasLights final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightGroup_HasLights) == 0x000001, "Wrong alignment on BhvrAssetLightGroup_HasLights");
static_assert(sizeof(BhvrAssetLightGroup_HasLights) == 0x000001, "Wrong size on BhvrAssetLightGroup_HasLights");
static_assert(offsetof(BhvrAssetLightGroup_HasLights, ReturnValue) == 0x000000, "Member 'BhvrAssetLightGroup_HasLights::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightingRig.AddFillLight
// 0x0008 (0x0008 - 0x0000)
struct BhvrAssetLightingRig_AddFillLight final
{
public:
	class ULightComponent*                        InLight;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightingRig_AddFillLight) == 0x000008, "Wrong alignment on BhvrAssetLightingRig_AddFillLight");
static_assert(sizeof(BhvrAssetLightingRig_AddFillLight) == 0x000008, "Wrong size on BhvrAssetLightingRig_AddFillLight");
static_assert(offsetof(BhvrAssetLightingRig_AddFillLight, InLight) == 0x000000, "Member 'BhvrAssetLightingRig_AddFillLight::InLight' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightingRig.AddFogLight
// 0x0008 (0x0008 - 0x0000)
struct BhvrAssetLightingRig_AddFogLight final
{
public:
	class ULightComponent*                        InLight;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightingRig_AddFogLight) == 0x000008, "Wrong alignment on BhvrAssetLightingRig_AddFogLight");
static_assert(sizeof(BhvrAssetLightingRig_AddFogLight) == 0x000008, "Wrong size on BhvrAssetLightingRig_AddFogLight");
static_assert(offsetof(BhvrAssetLightingRig_AddFogLight, InLight) == 0x000000, "Member 'BhvrAssetLightingRig_AddFogLight::InLight' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightingRig.AddKeyLight
// 0x0008 (0x0008 - 0x0000)
struct BhvrAssetLightingRig_AddKeyLight final
{
public:
	class ULightComponent*                        InLight;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightingRig_AddKeyLight) == 0x000008, "Wrong alignment on BhvrAssetLightingRig_AddKeyLight");
static_assert(sizeof(BhvrAssetLightingRig_AddKeyLight) == 0x000008, "Wrong size on BhvrAssetLightingRig_AddKeyLight");
static_assert(offsetof(BhvrAssetLightingRig_AddKeyLight, InLight) == 0x000000, "Member 'BhvrAssetLightingRig_AddKeyLight::InLight' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightingRig.AddKickLight
// 0x0008 (0x0008 - 0x0000)
struct BhvrAssetLightingRig_AddKickLight final
{
public:
	class ULightComponent*                        InLight;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightingRig_AddKickLight) == 0x000008, "Wrong alignment on BhvrAssetLightingRig_AddKickLight");
static_assert(sizeof(BhvrAssetLightingRig_AddKickLight) == 0x000008, "Wrong size on BhvrAssetLightingRig_AddKickLight");
static_assert(offsetof(BhvrAssetLightingRig_AddKickLight, InLight) == 0x000000, "Member 'BhvrAssetLightingRig_AddKickLight::InLight' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightingRig.AddRimLight
// 0x0008 (0x0008 - 0x0000)
struct BhvrAssetLightingRig_AddRimLight final
{
public:
	class ULightComponent*                        InLight;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightingRig_AddRimLight) == 0x000008, "Wrong alignment on BhvrAssetLightingRig_AddRimLight");
static_assert(sizeof(BhvrAssetLightingRig_AddRimLight) == 0x000008, "Wrong size on BhvrAssetLightingRig_AddRimLight");
static_assert(offsetof(BhvrAssetLightingRig_AddRimLight, InLight) == 0x000000, "Member 'BhvrAssetLightingRig_AddRimLight::InLight' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightingRig.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetLightingRig_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightingRig_GetDisplayName) == 0x000008, "Wrong alignment on BhvrAssetLightingRig_GetDisplayName");
static_assert(sizeof(BhvrAssetLightingRig_GetDisplayName) == 0x000010, "Wrong size on BhvrAssetLightingRig_GetDisplayName");
static_assert(offsetof(BhvrAssetLightingRig_GetDisplayName, ReturnValue) == 0x000000, "Member 'BhvrAssetLightingRig_GetDisplayName::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetLightingSystem.SelectLightingRig
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetLightingSystem_SelectLightingRig final
{
public:
	class FString                                 InDisplayName;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetLightingSystem_SelectLightingRig) == 0x000008, "Wrong alignment on BhvrAssetLightingSystem_SelectLightingRig");
static_assert(sizeof(BhvrAssetLightingSystem_SelectLightingRig) == 0x000010, "Wrong size on BhvrAssetLightingSystem_SelectLightingRig");
static_assert(offsetof(BhvrAssetLightingSystem_SelectLightingRig, InDisplayName) == 0x000000, "Member 'BhvrAssetLightingSystem_SelectLightingRig::InDisplayName' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.ResetPivot
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewCamera_ResetPivot final
{
public:
	bool                                          bAllowCameraLag;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_ResetPivot) == 0x000001, "Wrong alignment on BhvrAssetViewCamera_ResetPivot");
static_assert(sizeof(BhvrAssetViewCamera_ResetPivot) == 0x000001, "Wrong size on BhvrAssetViewCamera_ResetPivot");
static_assert(offsetof(BhvrAssetViewCamera_ResetPivot, bAllowCameraLag) == 0x000000, "Member 'BhvrAssetViewCamera_ResetPivot::bAllowCameraLag' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.ResetRotation
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewCamera_ResetRotation final
{
public:
	bool                                          bAllowCameraLag;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_ResetRotation) == 0x000001, "Wrong alignment on BhvrAssetViewCamera_ResetRotation");
static_assert(sizeof(BhvrAssetViewCamera_ResetRotation) == 0x000001, "Wrong size on BhvrAssetViewCamera_ResetRotation");
static_assert(offsetof(BhvrAssetViewCamera_ResetRotation, bAllowCameraLag) == 0x000000, "Member 'BhvrAssetViewCamera_ResetRotation::bAllowCameraLag' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.ResetZoom
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewCamera_ResetZoom final
{
public:
	bool                                          bAllowCameraLag;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_ResetZoom) == 0x000001, "Wrong alignment on BhvrAssetViewCamera_ResetZoom");
static_assert(sizeof(BhvrAssetViewCamera_ResetZoom) == 0x000001, "Wrong size on BhvrAssetViewCamera_ResetZoom");
static_assert(offsetof(BhvrAssetViewCamera_ResetZoom, bAllowCameraLag) == 0x000000, "Member 'BhvrAssetViewCamera_ResetZoom::bAllowCameraLag' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.SetAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCamera_SetAspectRatio final
{
public:
	float                                         NewAspectRatio;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_SetAspectRatio) == 0x000004, "Wrong alignment on BhvrAssetViewCamera_SetAspectRatio");
static_assert(sizeof(BhvrAssetViewCamera_SetAspectRatio) == 0x000004, "Wrong size on BhvrAssetViewCamera_SetAspectRatio");
static_assert(offsetof(BhvrAssetViewCamera_SetAspectRatio, NewAspectRatio) == 0x000000, "Member 'BhvrAssetViewCamera_SetAspectRatio::NewAspectRatio' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.SetAutoFocusOffset
// 0x0018 (0x0018 - 0x0000)
struct BhvrAssetViewCamera_SetAutoFocusOffset final
{
public:
	struct FVector                                NewFocusTargetOffsetXY;                            // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_SetAutoFocusOffset) == 0x000008, "Wrong alignment on BhvrAssetViewCamera_SetAutoFocusOffset");
static_assert(sizeof(BhvrAssetViewCamera_SetAutoFocusOffset) == 0x000018, "Wrong size on BhvrAssetViewCamera_SetAutoFocusOffset");
static_assert(offsetof(BhvrAssetViewCamera_SetAutoFocusOffset, NewFocusTargetOffsetXY) == 0x000000, "Member 'BhvrAssetViewCamera_SetAutoFocusOffset::NewFocusTargetOffsetXY' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.SetBlurAmount
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCamera_SetBlurAmount final
{
public:
	float                                         NewBlurAmount;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_SetBlurAmount) == 0x000004, "Wrong alignment on BhvrAssetViewCamera_SetBlurAmount");
static_assert(sizeof(BhvrAssetViewCamera_SetBlurAmount) == 0x000004, "Wrong size on BhvrAssetViewCamera_SetBlurAmount");
static_assert(offsetof(BhvrAssetViewCamera_SetBlurAmount, NewBlurAmount) == 0x000000, "Member 'BhvrAssetViewCamera_SetBlurAmount::NewBlurAmount' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.SetExposureBias
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCamera_SetExposureBias final
{
public:
	float                                         NewExposureBias;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_SetExposureBias) == 0x000004, "Wrong alignment on BhvrAssetViewCamera_SetExposureBias");
static_assert(sizeof(BhvrAssetViewCamera_SetExposureBias) == 0x000004, "Wrong size on BhvrAssetViewCamera_SetExposureBias");
static_assert(offsetof(BhvrAssetViewCamera_SetExposureBias, NewExposureBias) == 0x000000, "Member 'BhvrAssetViewCamera_SetExposureBias::NewExposureBias' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.SetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCamera_SetFieldOfView final
{
public:
	float                                         NewFieldOfView;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_SetFieldOfView) == 0x000004, "Wrong alignment on BhvrAssetViewCamera_SetFieldOfView");
static_assert(sizeof(BhvrAssetViewCamera_SetFieldOfView) == 0x000004, "Wrong size on BhvrAssetViewCamera_SetFieldOfView");
static_assert(offsetof(BhvrAssetViewCamera_SetFieldOfView, NewFieldOfView) == 0x000000, "Member 'BhvrAssetViewCamera_SetFieldOfView::NewFieldOfView' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.SetRollAngle
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCamera_SetRollAngle final
{
public:
	float                                         NewRollAngle;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_SetRollAngle) == 0x000004, "Wrong alignment on BhvrAssetViewCamera_SetRollAngle");
static_assert(sizeof(BhvrAssetViewCamera_SetRollAngle) == 0x000004, "Wrong size on BhvrAssetViewCamera_SetRollAngle");
static_assert(offsetof(BhvrAssetViewCamera_SetRollAngle, NewRollAngle) == 0x000000, "Member 'BhvrAssetViewCamera_SetRollAngle::NewRollAngle' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.SetShowAutoFocusTarget
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewCamera_SetShowAutoFocusTarget final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_SetShowAutoFocusTarget) == 0x000001, "Wrong alignment on BhvrAssetViewCamera_SetShowAutoFocusTarget");
static_assert(sizeof(BhvrAssetViewCamera_SetShowAutoFocusTarget) == 0x000001, "Wrong size on BhvrAssetViewCamera_SetShowAutoFocusTarget");
static_assert(offsetof(BhvrAssetViewCamera_SetShowAutoFocusTarget, bNewValue) == 0x000000, "Member 'BhvrAssetViewCamera_SetShowAutoFocusTarget::bNewValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.SetUseAutoFocus
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewCamera_SetUseAutoFocus final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_SetUseAutoFocus) == 0x000001, "Wrong alignment on BhvrAssetViewCamera_SetUseAutoFocus");
static_assert(sizeof(BhvrAssetViewCamera_SetUseAutoFocus) == 0x000001, "Wrong size on BhvrAssetViewCamera_SetUseAutoFocus");
static_assert(offsetof(BhvrAssetViewCamera_SetUseAutoFocus, bNewValue) == 0x000000, "Member 'BhvrAssetViewCamera_SetUseAutoFocus::bNewValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.SetUseDepthOfField
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewCamera_SetUseDepthOfField final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_SetUseDepthOfField) == 0x000001, "Wrong alignment on BhvrAssetViewCamera_SetUseDepthOfField");
static_assert(sizeof(BhvrAssetViewCamera_SetUseDepthOfField) == 0x000001, "Wrong size on BhvrAssetViewCamera_SetUseDepthOfField");
static_assert(offsetof(BhvrAssetViewCamera_SetUseDepthOfField, bNewValue) == 0x000000, "Member 'BhvrAssetViewCamera_SetUseDepthOfField::bNewValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.ZoomFit
// 0x0068 (0x0068 - 0x0000)
struct BhvrAssetViewCamera_ZoomFit final
{
public:
	struct FVector                                CenterOfMass;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   Bounds;                                            // 0x0018(0x0038)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                Padding;                                           // 0x0050(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_ZoomFit) == 0x000008, "Wrong alignment on BhvrAssetViewCamera_ZoomFit");
static_assert(sizeof(BhvrAssetViewCamera_ZoomFit) == 0x000068, "Wrong size on BhvrAssetViewCamera_ZoomFit");
static_assert(offsetof(BhvrAssetViewCamera_ZoomFit, CenterOfMass) == 0x000000, "Member 'BhvrAssetViewCamera_ZoomFit::CenterOfMass' has a wrong offset!");
static_assert(offsetof(BhvrAssetViewCamera_ZoomFit, Bounds) == 0x000018, "Member 'BhvrAssetViewCamera_ZoomFit::Bounds' has a wrong offset!");
static_assert(offsetof(BhvrAssetViewCamera_ZoomFit, Padding) == 0x000050, "Member 'BhvrAssetViewCamera_ZoomFit::Padding' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.GetAspectRatio
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCamera_GetAspectRatio final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_GetAspectRatio) == 0x000004, "Wrong alignment on BhvrAssetViewCamera_GetAspectRatio");
static_assert(sizeof(BhvrAssetViewCamera_GetAspectRatio) == 0x000004, "Wrong size on BhvrAssetViewCamera_GetAspectRatio");
static_assert(offsetof(BhvrAssetViewCamera_GetAspectRatio, ReturnValue) == 0x000000, "Member 'BhvrAssetViewCamera_GetAspectRatio::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.GetExposureBias
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCamera_GetExposureBias final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_GetExposureBias) == 0x000004, "Wrong alignment on BhvrAssetViewCamera_GetExposureBias");
static_assert(sizeof(BhvrAssetViewCamera_GetExposureBias) == 0x000004, "Wrong size on BhvrAssetViewCamera_GetExposureBias");
static_assert(offsetof(BhvrAssetViewCamera_GetExposureBias, ReturnValue) == 0x000000, "Member 'BhvrAssetViewCamera_GetExposureBias::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.GetFieldOfView
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCamera_GetFieldOfView final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_GetFieldOfView) == 0x000004, "Wrong alignment on BhvrAssetViewCamera_GetFieldOfView");
static_assert(sizeof(BhvrAssetViewCamera_GetFieldOfView) == 0x000004, "Wrong size on BhvrAssetViewCamera_GetFieldOfView");
static_assert(offsetof(BhvrAssetViewCamera_GetFieldOfView, ReturnValue) == 0x000000, "Member 'BhvrAssetViewCamera_GetFieldOfView::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCamera.GetRollAngle
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCamera_GetRollAngle final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCamera_GetRollAngle) == 0x000004, "Wrong alignment on BhvrAssetViewCamera_GetRollAngle");
static_assert(sizeof(BhvrAssetViewCamera_GetRollAngle) == 0x000004, "Wrong size on BhvrAssetViewCamera_GetRollAngle");
static_assert(offsetof(BhvrAssetViewCamera_GetRollAngle, ReturnValue) == 0x000000, "Member 'BhvrAssetViewCamera_GetRollAngle::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.LoadSequences
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewCameraSequenceSystem_LoadSequences final
{
public:
	TArray<struct FAssetData>                     SequenceAssetDatas;                                // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCameraSequenceSystem_LoadSequences) == 0x000008, "Wrong alignment on BhvrAssetViewCameraSequenceSystem_LoadSequences");
static_assert(sizeof(BhvrAssetViewCameraSequenceSystem_LoadSequences) == 0x000010, "Wrong size on BhvrAssetViewCameraSequenceSystem_LoadSequences");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_LoadSequences, SequenceAssetDatas) == 0x000000, "Member 'BhvrAssetViewCameraSequenceSystem_LoadSequences::SequenceAssetDatas' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.RecordSequence
// 0x0018 (0x0018 - 0x0000)
struct BhvrAssetViewCameraSequenceSystem_RecordSequence final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMoviePipelinePrimaryConfig*            Configuration;                                     // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCameraSequenceSystem_RecordSequence) == 0x000008, "Wrong alignment on BhvrAssetViewCameraSequenceSystem_RecordSequence");
static_assert(sizeof(BhvrAssetViewCameraSequenceSystem_RecordSequence) == 0x000018, "Wrong size on BhvrAssetViewCameraSequenceSystem_RecordSequence");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_RecordSequence, Filename) == 0x000000, "Member 'BhvrAssetViewCameraSequenceSystem_RecordSequence::Filename' has a wrong offset!");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_RecordSequence, Configuration) == 0x000010, "Member 'BhvrAssetViewCameraSequenceSystem_RecordSequence::Configuration' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.SelectCameraSequence
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewCameraSequenceSystem_SelectCameraSequence final
{
public:
	class FString                                 DisplayName;                                       // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCameraSequenceSystem_SelectCameraSequence) == 0x000008, "Wrong alignment on BhvrAssetViewCameraSequenceSystem_SelectCameraSequence");
static_assert(sizeof(BhvrAssetViewCameraSequenceSystem_SelectCameraSequence) == 0x000010, "Wrong size on BhvrAssetViewCameraSequenceSystem_SelectCameraSequence");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_SelectCameraSequence, DisplayName) == 0x000000, "Member 'BhvrAssetViewCameraSequenceSystem_SelectCameraSequence::DisplayName' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.SetIsLooping
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewCameraSequenceSystem_SetIsLooping final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCameraSequenceSystem_SetIsLooping) == 0x000001, "Wrong alignment on BhvrAssetViewCameraSequenceSystem_SetIsLooping");
static_assert(sizeof(BhvrAssetViewCameraSequenceSystem_SetIsLooping) == 0x000001, "Wrong size on BhvrAssetViewCameraSequenceSystem_SetIsLooping");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_SetIsLooping, bNewValue) == 0x000000, "Member 'BhvrAssetViewCameraSequenceSystem_SetIsLooping::bNewValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.SetPlaybackPosition
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCameraSequenceSystem_SetPlaybackPosition final
{
public:
	int32                                         NewPlaybackPosition;                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCameraSequenceSystem_SetPlaybackPosition) == 0x000004, "Wrong alignment on BhvrAssetViewCameraSequenceSystem_SetPlaybackPosition");
static_assert(sizeof(BhvrAssetViewCameraSequenceSystem_SetPlaybackPosition) == 0x000004, "Wrong size on BhvrAssetViewCameraSequenceSystem_SetPlaybackPosition");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_SetPlaybackPosition, NewPlaybackPosition) == 0x000000, "Member 'BhvrAssetViewCameraSequenceSystem_SetPlaybackPosition::NewPlaybackPosition' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.GetIsLooping
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewCameraSequenceSystem_GetIsLooping final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCameraSequenceSystem_GetIsLooping) == 0x000001, "Wrong alignment on BhvrAssetViewCameraSequenceSystem_GetIsLooping");
static_assert(sizeof(BhvrAssetViewCameraSequenceSystem_GetIsLooping) == 0x000001, "Wrong size on BhvrAssetViewCameraSequenceSystem_GetIsLooping");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_GetIsLooping, ReturnValue) == 0x000000, "Member 'BhvrAssetViewCameraSequenceSystem_GetIsLooping::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.GetMaxPlaybackPosition
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCameraSequenceSystem_GetMaxPlaybackPosition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCameraSequenceSystem_GetMaxPlaybackPosition) == 0x000004, "Wrong alignment on BhvrAssetViewCameraSequenceSystem_GetMaxPlaybackPosition");
static_assert(sizeof(BhvrAssetViewCameraSequenceSystem_GetMaxPlaybackPosition) == 0x000004, "Wrong size on BhvrAssetViewCameraSequenceSystem_GetMaxPlaybackPosition");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_GetMaxPlaybackPosition, ReturnValue) == 0x000000, "Member 'BhvrAssetViewCameraSequenceSystem_GetMaxPlaybackPosition::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.GetPlaybackPosition
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewCameraSequenceSystem_GetPlaybackPosition final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCameraSequenceSystem_GetPlaybackPosition) == 0x000004, "Wrong alignment on BhvrAssetViewCameraSequenceSystem_GetPlaybackPosition");
static_assert(sizeof(BhvrAssetViewCameraSequenceSystem_GetPlaybackPosition) == 0x000004, "Wrong size on BhvrAssetViewCameraSequenceSystem_GetPlaybackPosition");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_GetPlaybackPosition, ReturnValue) == 0x000000, "Member 'BhvrAssetViewCameraSequenceSystem_GetPlaybackPosition::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewCameraSequenceSystem.GetSelectedCameraSequenceName
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewCameraSequenceSystem_GetSelectedCameraSequenceName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewCameraSequenceSystem_GetSelectedCameraSequenceName) == 0x000008, "Wrong alignment on BhvrAssetViewCameraSequenceSystem_GetSelectedCameraSequenceName");
static_assert(sizeof(BhvrAssetViewCameraSequenceSystem_GetSelectedCameraSequenceName) == 0x000010, "Wrong size on BhvrAssetViewCameraSequenceSystem_GetSelectedCameraSequenceName");
static_assert(offsetof(BhvrAssetViewCameraSequenceSystem_GetSelectedCameraSequenceName, ReturnValue) == 0x000000, "Member 'BhvrAssetViewCameraSequenceSystem_GetSelectedCameraSequenceName::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewController.CalculateBounds
// 0x0050 (0x0050 - 0x0000)
struct BhvrAssetViewController_CalculateBounds final
{
public:
	struct FVector                                OutCenterOfMass;                                   // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBox                                   OutBounds;                                         // 0x0018(0x0038)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewController_CalculateBounds) == 0x000008, "Wrong alignment on BhvrAssetViewController_CalculateBounds");
static_assert(sizeof(BhvrAssetViewController_CalculateBounds) == 0x000050, "Wrong size on BhvrAssetViewController_CalculateBounds");
static_assert(offsetof(BhvrAssetViewController_CalculateBounds, OutCenterOfMass) == 0x000000, "Member 'BhvrAssetViewController_CalculateBounds::OutCenterOfMass' has a wrong offset!");
static_assert(offsetof(BhvrAssetViewController_CalculateBounds, OutBounds) == 0x000018, "Member 'BhvrAssetViewController_CalculateBounds::OutBounds' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewController.GetScreenshotName
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewController_GetScreenshotName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewController_GetScreenshotName) == 0x000008, "Wrong alignment on BhvrAssetViewController_GetScreenshotName");
static_assert(sizeof(BhvrAssetViewController_GetScreenshotName) == 0x000010, "Wrong size on BhvrAssetViewController_GetScreenshotName");
static_assert(offsetof(BhvrAssetViewController_GetScreenshotName, ReturnValue) == 0x000000, "Member 'BhvrAssetViewController_GetScreenshotName::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewController.IsLoading
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewController_IsLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewController_IsLoading) == 0x000001, "Wrong alignment on BhvrAssetViewController_IsLoading");
static_assert(sizeof(BhvrAssetViewController_IsLoading) == 0x000001, "Wrong size on BhvrAssetViewController_IsLoading");
static_assert(offsetof(BhvrAssetViewController_IsLoading, ReturnValue) == 0x000000, "Member 'BhvrAssetViewController_IsLoading::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewData.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewData_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewData_GetDisplayName) == 0x000008, "Wrong alignment on BhvrAssetViewData_GetDisplayName");
static_assert(sizeof(BhvrAssetViewData_GetDisplayName) == 0x000010, "Wrong size on BhvrAssetViewData_GetDisplayName");
static_assert(offsetof(BhvrAssetViewData_GetDisplayName, ReturnValue) == 0x000000, "Member 'BhvrAssetViewData_GetDisplayName::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewData.GetId
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewData_GetId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewData_GetId) == 0x000008, "Wrong alignment on BhvrAssetViewData_GetId");
static_assert(sizeof(BhvrAssetViewData_GetId) == 0x000010, "Wrong size on BhvrAssetViewData_GetId");
static_assert(offsetof(BhvrAssetViewData_GetId, ReturnValue) == 0x000000, "Member 'BhvrAssetViewData_GetId::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewData.IsLoading
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewData_IsLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewData_IsLoading) == 0x000001, "Wrong alignment on BhvrAssetViewData_IsLoading");
static_assert(sizeof(BhvrAssetViewData_IsLoading) == 0x000001, "Wrong size on BhvrAssetViewData_IsLoading");
static_assert(offsetof(BhvrAssetViewData_IsLoading, ReturnValue) == 0x000000, "Member 'BhvrAssetViewData_IsLoading::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewDataSource.GetSelectedAssetViewData
// 0x0008 (0x0008 - 0x0000)
struct BhvrAssetViewDataSource_GetSelectedAssetViewData final
{
public:
	class UBhvrAssetViewData*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewDataSource_GetSelectedAssetViewData) == 0x000008, "Wrong alignment on BhvrAssetViewDataSource_GetSelectedAssetViewData");
static_assert(sizeof(BhvrAssetViewDataSource_GetSelectedAssetViewData) == 0x000008, "Wrong size on BhvrAssetViewDataSource_GetSelectedAssetViewData");
static_assert(offsetof(BhvrAssetViewDataSource_GetSelectedAssetViewData, ReturnValue) == 0x000000, "Member 'BhvrAssetViewDataSource_GetSelectedAssetViewData::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewDataSource.SelectAssetViewData
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewDataSource_SelectAssetViewData final
{
public:
	class FString                                 AssetViewDataId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewDataSource_SelectAssetViewData) == 0x000008, "Wrong alignment on BhvrAssetViewDataSource_SelectAssetViewData");
static_assert(sizeof(BhvrAssetViewDataSource_SelectAssetViewData) == 0x000010, "Wrong size on BhvrAssetViewDataSource_SelectAssetViewData");
static_assert(offsetof(BhvrAssetViewDataSource_SelectAssetViewData, AssetViewDataId) == 0x000000, "Member 'BhvrAssetViewDataSource_SelectAssetViewData::AssetViewDataId' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewDataSource.GetDisplayName
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewDataSource_GetDisplayName final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewDataSource_GetDisplayName) == 0x000008, "Wrong alignment on BhvrAssetViewDataSource_GetDisplayName");
static_assert(sizeof(BhvrAssetViewDataSource_GetDisplayName) == 0x000010, "Wrong size on BhvrAssetViewDataSource_GetDisplayName");
static_assert(offsetof(BhvrAssetViewDataSource_GetDisplayName, ReturnValue) == 0x000000, "Member 'BhvrAssetViewDataSource_GetDisplayName::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewDataSource.GetId
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewDataSource_GetId final
{
public:
	class FString                                 ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewDataSource_GetId) == 0x000008, "Wrong alignment on BhvrAssetViewDataSource_GetId");
static_assert(sizeof(BhvrAssetViewDataSource_GetId) == 0x000010, "Wrong size on BhvrAssetViewDataSource_GetId");
static_assert(offsetof(BhvrAssetViewDataSource_GetId, ReturnValue) == 0x000000, "Member 'BhvrAssetViewDataSource_GetId::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewDataSource.IsLoading
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewDataSource_IsLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewDataSource_IsLoading) == 0x000001, "Wrong alignment on BhvrAssetViewDataSource_IsLoading");
static_assert(sizeof(BhvrAssetViewDataSource_IsLoading) == 0x000001, "Wrong size on BhvrAssetViewDataSource_IsLoading");
static_assert(offsetof(BhvrAssetViewDataSource_IsLoading, ReturnValue) == 0x000000, "Member 'BhvrAssetViewDataSource_IsLoading::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewer.OnSelectedAssetViewDataChanged
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewer_OnSelectedAssetViewDataChanged final
{
public:
	class UBhvrAssetViewData*                     OldAssetViewData;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBhvrAssetViewData*                     NewAssetViewData;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewer_OnSelectedAssetViewDataChanged) == 0x000008, "Wrong alignment on BhvrAssetViewer_OnSelectedAssetViewDataChanged");
static_assert(sizeof(BhvrAssetViewer_OnSelectedAssetViewDataChanged) == 0x000010, "Wrong size on BhvrAssetViewer_OnSelectedAssetViewDataChanged");
static_assert(offsetof(BhvrAssetViewer_OnSelectedAssetViewDataChanged, OldAssetViewData) == 0x000000, "Member 'BhvrAssetViewer_OnSelectedAssetViewDataChanged::OldAssetViewData' has a wrong offset!");
static_assert(offsetof(BhvrAssetViewer_OnSelectedAssetViewDataChanged, NewAssetViewData) == 0x000008, "Member 'BhvrAssetViewer_OnSelectedAssetViewDataChanged::NewAssetViewData' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewer.SelectAssetViewDataSource
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewer_SelectAssetViewDataSource final
{
public:
	class FString                                 AssetViewDataSourceId;                             // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewer_SelectAssetViewDataSource) == 0x000008, "Wrong alignment on BhvrAssetViewer_SelectAssetViewDataSource");
static_assert(sizeof(BhvrAssetViewer_SelectAssetViewDataSource) == 0x000010, "Wrong size on BhvrAssetViewer_SelectAssetViewDataSource");
static_assert(offsetof(BhvrAssetViewer_SelectAssetViewDataSource, AssetViewDataSourceId) == 0x000000, "Member 'BhvrAssetViewer_SelectAssetViewDataSource::AssetViewDataSourceId' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewer.GetSelectedAssetViewController
// 0x0008 (0x0008 - 0x0000)
struct BhvrAssetViewer_GetSelectedAssetViewController final
{
public:
	const class UBhvrAssetViewController*         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewer_GetSelectedAssetViewController) == 0x000008, "Wrong alignment on BhvrAssetViewer_GetSelectedAssetViewController");
static_assert(sizeof(BhvrAssetViewer_GetSelectedAssetViewController) == 0x000008, "Wrong size on BhvrAssetViewer_GetSelectedAssetViewController");
static_assert(offsetof(BhvrAssetViewer_GetSelectedAssetViewController, ReturnValue) == 0x000000, "Member 'BhvrAssetViewer_GetSelectedAssetViewController::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewer.GetSelectedAssetViewDataSource
// 0x0008 (0x0008 - 0x0000)
struct BhvrAssetViewer_GetSelectedAssetViewDataSource final
{
public:
	const class UBhvrAssetViewDataSource*         ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewer_GetSelectedAssetViewDataSource) == 0x000008, "Wrong alignment on BhvrAssetViewer_GetSelectedAssetViewDataSource");
static_assert(sizeof(BhvrAssetViewer_GetSelectedAssetViewDataSource) == 0x000008, "Wrong size on BhvrAssetViewer_GetSelectedAssetViewDataSource");
static_assert(offsetof(BhvrAssetViewer_GetSelectedAssetViewDataSource, ReturnValue) == 0x000000, "Member 'BhvrAssetViewer_GetSelectedAssetViewDataSource::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewer.IsLoading
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewer_IsLoading final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewer_IsLoading) == 0x000001, "Wrong alignment on BhvrAssetViewer_IsLoading");
static_assert(sizeof(BhvrAssetViewer_IsLoading) == 0x000001, "Wrong size on BhvrAssetViewer_IsLoading");
static_assert(offsetof(BhvrAssetViewer_IsLoading, ReturnValue) == 0x000000, "Member 'BhvrAssetViewer_IsLoading::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewScreenshotSystem.GetBufferVisualizationMaterialNames
// 0x0010 (0x0010 - 0x0000)
struct BhvrAssetViewScreenshotSystem_GetBufferVisualizationMaterialNames final
{
public:
	TArray<class FString>                         InOutBufferVisualizationMaterialNames;             // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewScreenshotSystem_GetBufferVisualizationMaterialNames) == 0x000008, "Wrong alignment on BhvrAssetViewScreenshotSystem_GetBufferVisualizationMaterialNames");
static_assert(sizeof(BhvrAssetViewScreenshotSystem_GetBufferVisualizationMaterialNames) == 0x000010, "Wrong size on BhvrAssetViewScreenshotSystem_GetBufferVisualizationMaterialNames");
static_assert(offsetof(BhvrAssetViewScreenshotSystem_GetBufferVisualizationMaterialNames, InOutBufferVisualizationMaterialNames) == 0x000000, "Member 'BhvrAssetViewScreenshotSystem_GetBufferVisualizationMaterialNames::InOutBufferVisualizationMaterialNames' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewScreenshotSystem.CaptureScreen
// 0x0030 (0x0030 - 0x0000)
struct BhvrAssetViewScreenshotSystem_CaptureScreen final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FIntVector                             ResolutionXY;                                      // 0x0010(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBhvrScreenshotCaptureRegion           CaptureRegion;                                     // 0x001C(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BhvrAssetViewScreenshotSystem_CaptureScreen) == 0x000008, "Wrong alignment on BhvrAssetViewScreenshotSystem_CaptureScreen");
static_assert(sizeof(BhvrAssetViewScreenshotSystem_CaptureScreen) == 0x000030, "Wrong size on BhvrAssetViewScreenshotSystem_CaptureScreen");
static_assert(offsetof(BhvrAssetViewScreenshotSystem_CaptureScreen, Filename) == 0x000000, "Member 'BhvrAssetViewScreenshotSystem_CaptureScreen::Filename' has a wrong offset!");
static_assert(offsetof(BhvrAssetViewScreenshotSystem_CaptureScreen, ResolutionXY) == 0x000010, "Member 'BhvrAssetViewScreenshotSystem_CaptureScreen::ResolutionXY' has a wrong offset!");
static_assert(offsetof(BhvrAssetViewScreenshotSystem_CaptureScreen, CaptureRegion) == 0x00001C, "Member 'BhvrAssetViewScreenshotSystem_CaptureScreen::CaptureRegion' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewScreenshotSystem.IsBufferVisualizationMaterialEnabled
// 0x0018 (0x0018 - 0x0000)
struct BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled final
{
public:
	class FString                                 BufferVisualizationMaterialName;                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled) == 0x000008, "Wrong alignment on BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled");
static_assert(sizeof(BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled) == 0x000018, "Wrong size on BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled");
static_assert(offsetof(BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled, BufferVisualizationMaterialName) == 0x000000, "Member 'BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled::BufferVisualizationMaterialName' has a wrong offset!");
static_assert(offsetof(BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled, ReturnValue) == 0x000010, "Member 'BhvrAssetViewScreenshotSystem_IsBufferVisualizationMaterialEnabled::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewScreenshotSystem.SetBufferVisualizationMaterialEnabled
// 0x0018 (0x0018 - 0x0000)
struct BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled final
{
public:
	class FString                                 BufferVisualizationMaterialName;                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsEnabled;                                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled) == 0x000008, "Wrong alignment on BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled");
static_assert(sizeof(BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled) == 0x000018, "Wrong size on BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled");
static_assert(offsetof(BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled, BufferVisualizationMaterialName) == 0x000000, "Member 'BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled::BufferVisualizationMaterialName' has a wrong offset!");
static_assert(offsetof(BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled, bIsEnabled) == 0x000010, "Member 'BhvrAssetViewScreenshotSystem_SetBufferVisualizationMaterialEnabled::bIsEnabled' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAssetLocation
// 0x0018 (0x0018 - 0x0000)
struct BhvrAssetViewSocket_SetAssetLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewSocket_SetAssetLocation) == 0x000008, "Wrong alignment on BhvrAssetViewSocket_SetAssetLocation");
static_assert(sizeof(BhvrAssetViewSocket_SetAssetLocation) == 0x000018, "Wrong size on BhvrAssetViewSocket_SetAssetLocation");
static_assert(offsetof(BhvrAssetViewSocket_SetAssetLocation, NewLocation) == 0x000000, "Member 'BhvrAssetViewSocket_SetAssetLocation::NewLocation' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAssetRotation
// 0x0018 (0x0018 - 0x0000)
struct BhvrAssetViewSocket_SetAssetRotation final
{
public:
	struct FRotator                               NewRotation;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewSocket_SetAssetRotation) == 0x000008, "Wrong alignment on BhvrAssetViewSocket_SetAssetRotation");
static_assert(sizeof(BhvrAssetViewSocket_SetAssetRotation) == 0x000018, "Wrong size on BhvrAssetViewSocket_SetAssetRotation");
static_assert(offsetof(BhvrAssetViewSocket_SetAssetRotation, NewRotation) == 0x000000, "Member 'BhvrAssetViewSocket_SetAssetRotation::NewRotation' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAutoRotateDirection
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewSocket_SetAutoRotateDirection final
{
public:
	EBhvrAssetViewRotation                        NewDirection;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewSocket_SetAutoRotateDirection) == 0x000001, "Wrong alignment on BhvrAssetViewSocket_SetAutoRotateDirection");
static_assert(sizeof(BhvrAssetViewSocket_SetAutoRotateDirection) == 0x000001, "Wrong size on BhvrAssetViewSocket_SetAutoRotateDirection");
static_assert(offsetof(BhvrAssetViewSocket_SetAutoRotateDirection, NewDirection) == 0x000000, "Member 'BhvrAssetViewSocket_SetAutoRotateDirection::NewDirection' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAutoRotateEnabled
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewSocket_SetAutoRotateEnabled final
{
public:
	bool                                          bNewValue;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewSocket_SetAutoRotateEnabled) == 0x000001, "Wrong alignment on BhvrAssetViewSocket_SetAutoRotateEnabled");
static_assert(sizeof(BhvrAssetViewSocket_SetAutoRotateEnabled) == 0x000001, "Wrong size on BhvrAssetViewSocket_SetAutoRotateEnabled");
static_assert(offsetof(BhvrAssetViewSocket_SetAutoRotateEnabled, bNewValue) == 0x000000, "Member 'BhvrAssetViewSocket_SetAutoRotateEnabled::bNewValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewSocket.SetAutoRotateSpeed
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewSocket_SetAutoRotateSpeed final
{
public:
	float                                         NewSpeed;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewSocket_SetAutoRotateSpeed) == 0x000004, "Wrong alignment on BhvrAssetViewSocket_SetAutoRotateSpeed");
static_assert(sizeof(BhvrAssetViewSocket_SetAutoRotateSpeed) == 0x000004, "Wrong size on BhvrAssetViewSocket_SetAutoRotateSpeed");
static_assert(offsetof(BhvrAssetViewSocket_SetAutoRotateSpeed, NewSpeed) == 0x000000, "Member 'BhvrAssetViewSocket_SetAutoRotateSpeed::NewSpeed' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewSocket.GetAssetTransform
// 0x0060 (0x0060 - 0x0000)
struct BhvrAssetViewSocket_GetAssetTransform final
{
public:
	struct FTransform                             ReturnValue;                                       // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewSocket_GetAssetTransform) == 0x000010, "Wrong alignment on BhvrAssetViewSocket_GetAssetTransform");
static_assert(sizeof(BhvrAssetViewSocket_GetAssetTransform) == 0x000060, "Wrong size on BhvrAssetViewSocket_GetAssetTransform");
static_assert(offsetof(BhvrAssetViewSocket_GetAssetTransform, ReturnValue) == 0x000000, "Member 'BhvrAssetViewSocket_GetAssetTransform::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewSocket.GetAutoRotateDirection
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewSocket_GetAutoRotateDirection final
{
public:
	EBhvrAssetViewRotation                        ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewSocket_GetAutoRotateDirection) == 0x000001, "Wrong alignment on BhvrAssetViewSocket_GetAutoRotateDirection");
static_assert(sizeof(BhvrAssetViewSocket_GetAutoRotateDirection) == 0x000001, "Wrong size on BhvrAssetViewSocket_GetAutoRotateDirection");
static_assert(offsetof(BhvrAssetViewSocket_GetAutoRotateDirection, ReturnValue) == 0x000000, "Member 'BhvrAssetViewSocket_GetAutoRotateDirection::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewSocket.GetAutoRotateEnabled
// 0x0001 (0x0001 - 0x0000)
struct BhvrAssetViewSocket_GetAutoRotateEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewSocket_GetAutoRotateEnabled) == 0x000001, "Wrong alignment on BhvrAssetViewSocket_GetAutoRotateEnabled");
static_assert(sizeof(BhvrAssetViewSocket_GetAutoRotateEnabled) == 0x000001, "Wrong size on BhvrAssetViewSocket_GetAutoRotateEnabled");
static_assert(offsetof(BhvrAssetViewSocket_GetAutoRotateEnabled, ReturnValue) == 0x000000, "Member 'BhvrAssetViewSocket_GetAutoRotateEnabled::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrAssetViewSocket.GetAutoRotateSpeed
// 0x0004 (0x0004 - 0x0000)
struct BhvrAssetViewSocket_GetAutoRotateSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrAssetViewSocket_GetAutoRotateSpeed) == 0x000004, "Wrong alignment on BhvrAssetViewSocket_GetAutoRotateSpeed");
static_assert(sizeof(BhvrAssetViewSocket_GetAutoRotateSpeed) == 0x000004, "Wrong size on BhvrAssetViewSocket_GetAutoRotateSpeed");
static_assert(offsetof(BhvrAssetViewSocket_GetAutoRotateSpeed, ReturnValue) == 0x000000, "Member 'BhvrAssetViewSocket_GetAutoRotateSpeed::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrWatermarkComponent.GetWatermarkLocation
// 0x0018 (0x0018 - 0x0000)
struct BhvrWatermarkComponent_GetWatermarkLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrWatermarkComponent_GetWatermarkLocation) == 0x000008, "Wrong alignment on BhvrWatermarkComponent_GetWatermarkLocation");
static_assert(sizeof(BhvrWatermarkComponent_GetWatermarkLocation) == 0x000018, "Wrong size on BhvrWatermarkComponent_GetWatermarkLocation");
static_assert(offsetof(BhvrWatermarkComponent_GetWatermarkLocation, ReturnValue) == 0x000000, "Member 'BhvrWatermarkComponent_GetWatermarkLocation::ReturnValue' has a wrong offset!");

// Function BhvrAssetViewer.BhvrWatermarkComponent.SetWatermarkHidden
// 0x0001 (0x0001 - 0x0000)
struct BhvrWatermarkComponent_SetWatermarkHidden final
{
public:
	bool                                          bNewHidden;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrWatermarkComponent_SetWatermarkHidden) == 0x000001, "Wrong alignment on BhvrWatermarkComponent_SetWatermarkHidden");
static_assert(sizeof(BhvrWatermarkComponent_SetWatermarkHidden) == 0x000001, "Wrong size on BhvrWatermarkComponent_SetWatermarkHidden");
static_assert(offsetof(BhvrWatermarkComponent_SetWatermarkHidden, bNewHidden) == 0x000000, "Member 'BhvrWatermarkComponent_SetWatermarkHidden::bNewHidden' has a wrong offset!");

// Function BhvrAssetViewer.BhvrWatermarkComponent.SetWatermarkLocation
// 0x0018 (0x0018 - 0x0000)
struct BhvrWatermarkComponent_SetWatermarkLocation final
{
public:
	struct FVector                                NewLocation;                                       // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrWatermarkComponent_SetWatermarkLocation) == 0x000008, "Wrong alignment on BhvrWatermarkComponent_SetWatermarkLocation");
static_assert(sizeof(BhvrWatermarkComponent_SetWatermarkLocation) == 0x000018, "Wrong size on BhvrWatermarkComponent_SetWatermarkLocation");
static_assert(offsetof(BhvrWatermarkComponent_SetWatermarkLocation, NewLocation) == 0x000000, "Member 'BhvrWatermarkComponent_SetWatermarkLocation::NewLocation' has a wrong offset!");

// Function BhvrAssetViewer.BhvrWatermarkComponent.SetWatermarkSize
// 0x0008 (0x0008 - 0x0000)
struct BhvrWatermarkComponent_SetWatermarkSize final
{
public:
	double                                        NewSize;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BhvrWatermarkComponent_SetWatermarkSize) == 0x000008, "Wrong alignment on BhvrWatermarkComponent_SetWatermarkSize");
static_assert(sizeof(BhvrWatermarkComponent_SetWatermarkSize) == 0x000008, "Wrong size on BhvrWatermarkComponent_SetWatermarkSize");
static_assert(offsetof(BhvrWatermarkComponent_SetWatermarkSize, NewSize) == 0x000000, "Member 'BhvrWatermarkComponent_SetWatermarkSize::NewSize' has a wrong offset!");

}

