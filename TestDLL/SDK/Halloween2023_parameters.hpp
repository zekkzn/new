#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Halloween2023

#include "Basic.hpp"

#include "DBDSharedTypes_structs.hpp"


namespace SDK::Params
{

// DelegateFunction Halloween2023.HauntComponent.OnHauntInteractionChange__DelegateSignature
// 0x0002 (0x0002 - 0x0000)
struct HauntComponent_OnHauntInteractionChange__DelegateSignature final
{
public:
	EPlayerRole                                   PlayerRole;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInteractable;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HauntComponent_OnHauntInteractionChange__DelegateSignature) == 0x000001, "Wrong alignment on HauntComponent_OnHauntInteractionChange__DelegateSignature");
static_assert(sizeof(HauntComponent_OnHauntInteractionChange__DelegateSignature) == 0x000002, "Wrong size on HauntComponent_OnHauntInteractionChange__DelegateSignature");
static_assert(offsetof(HauntComponent_OnHauntInteractionChange__DelegateSignature, PlayerRole) == 0x000000, "Member 'HauntComponent_OnHauntInteractionChange__DelegateSignature::PlayerRole' has a wrong offset!");
static_assert(offsetof(HauntComponent_OnHauntInteractionChange__DelegateSignature, IsInteractable) == 0x000001, "Member 'HauntComponent_OnHauntInteractionChange__DelegateSignature::IsInteractable' has a wrong offset!");

// Function Halloween2023.HauntComponent.OnPlayerEnterZone
// 0x0008 (0x0008 - 0x0000)
struct HauntComponent_OnPlayerEnterZone final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HauntComponent_OnPlayerEnterZone) == 0x000008, "Wrong alignment on HauntComponent_OnPlayerEnterZone");
static_assert(sizeof(HauntComponent_OnPlayerEnterZone) == 0x000008, "Wrong size on HauntComponent_OnPlayerEnterZone");
static_assert(offsetof(HauntComponent_OnPlayerEnterZone, Player) == 0x000000, "Member 'HauntComponent_OnPlayerEnterZone::Player' has a wrong offset!");

// DelegateFunction Halloween2023.HauntComponent.OnPlayerInteract__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct HauntComponent_OnPlayerInteract__DelegateSignature final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HauntComponent_OnPlayerInteract__DelegateSignature) == 0x000008, "Wrong alignment on HauntComponent_OnPlayerInteract__DelegateSignature");
static_assert(sizeof(HauntComponent_OnPlayerInteract__DelegateSignature) == 0x000008, "Wrong size on HauntComponent_OnPlayerInteract__DelegateSignature");
static_assert(offsetof(HauntComponent_OnPlayerInteract__DelegateSignature, Player) == 0x000000, "Member 'HauntComponent_OnPlayerInteract__DelegateSignature::Player' has a wrong offset!");

// Function Halloween2023.HauntComponent.OnPlayerLeftZone
// 0x0008 (0x0008 - 0x0000)
struct HauntComponent_OnPlayerLeftZone final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HauntComponent_OnPlayerLeftZone) == 0x000008, "Wrong alignment on HauntComponent_OnPlayerLeftZone");
static_assert(sizeof(HauntComponent_OnPlayerLeftZone) == 0x000008, "Wrong size on HauntComponent_OnPlayerLeftZone");
static_assert(offsetof(HauntComponent_OnPlayerLeftZone, Player) == 0x000000, "Member 'HauntComponent_OnPlayerLeftZone::Player' has a wrong offset!");

// DelegateFunction Halloween2023.HauntComponent.OnPlayerRoleEvent__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct HauntComponent_OnPlayerRoleEvent__DelegateSignature final
{
public:
	EPlayerRole                                   PlayerRole;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HauntComponent_OnPlayerRoleEvent__DelegateSignature) == 0x000001, "Wrong alignment on HauntComponent_OnPlayerRoleEvent__DelegateSignature");
static_assert(sizeof(HauntComponent_OnPlayerRoleEvent__DelegateSignature) == 0x000001, "Wrong size on HauntComponent_OnPlayerRoleEvent__DelegateSignature");
static_assert(offsetof(HauntComponent_OnPlayerRoleEvent__DelegateSignature, PlayerRole) == 0x000000, "Member 'HauntComponent_OnPlayerRoleEvent__DelegateSignature::PlayerRole' has a wrong offset!");

// Function Halloween2023.StandardWorldHauntComponent.Multicast_BlessOrTrapCharacterEnteringZone
// 0x0010 (0x0010 - 0x0000)
struct StandardWorldHauntComponent_Multicast_BlessOrTrapCharacterEnteringZone final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlessing;                                        // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StandardWorldHauntComponent_Multicast_BlessOrTrapCharacterEnteringZone) == 0x000008, "Wrong alignment on StandardWorldHauntComponent_Multicast_BlessOrTrapCharacterEnteringZone");
static_assert(sizeof(StandardWorldHauntComponent_Multicast_BlessOrTrapCharacterEnteringZone) == 0x000010, "Wrong size on StandardWorldHauntComponent_Multicast_BlessOrTrapCharacterEnteringZone");
static_assert(offsetof(StandardWorldHauntComponent_Multicast_BlessOrTrapCharacterEnteringZone, Player) == 0x000000, "Member 'StandardWorldHauntComponent_Multicast_BlessOrTrapCharacterEnteringZone::Player' has a wrong offset!");
static_assert(offsetof(StandardWorldHauntComponent_Multicast_BlessOrTrapCharacterEnteringZone, IsBlessing) == 0x000008, "Member 'StandardWorldHauntComponent_Multicast_BlessOrTrapCharacterEnteringZone::IsBlessing' has a wrong offset!");

// Function Halloween2023.VoidZoneHauntComponent.Authority_AddCaptureProgress
// 0x0010 (0x0010 - 0x0000)
struct VoidZoneHauntComponent_Authority_AddCaptureProgress final
{
public:
	int32                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             PlayerGivingEnergy;                                // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZoneHauntComponent_Authority_AddCaptureProgress) == 0x000008, "Wrong alignment on VoidZoneHauntComponent_Authority_AddCaptureProgress");
static_assert(sizeof(VoidZoneHauntComponent_Authority_AddCaptureProgress) == 0x000010, "Wrong size on VoidZoneHauntComponent_Authority_AddCaptureProgress");
static_assert(offsetof(VoidZoneHauntComponent_Authority_AddCaptureProgress, Progress) == 0x000000, "Member 'VoidZoneHauntComponent_Authority_AddCaptureProgress::Progress' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Authority_AddCaptureProgress, PlayerGivingEnergy) == 0x000008, "Member 'VoidZoneHauntComponent_Authority_AddCaptureProgress::PlayerGivingEnergy' has a wrong offset!");

// Function Halloween2023.VoidZoneHauntComponent.Authority_DecayProgress
// 0x0004 (0x0004 - 0x0000)
struct VoidZoneHauntComponent_Authority_DecayProgress final
{
public:
	float                                         DeltaTime;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZoneHauntComponent_Authority_DecayProgress) == 0x000004, "Wrong alignment on VoidZoneHauntComponent_Authority_DecayProgress");
static_assert(sizeof(VoidZoneHauntComponent_Authority_DecayProgress) == 0x000004, "Wrong size on VoidZoneHauntComponent_Authority_DecayProgress");
static_assert(offsetof(VoidZoneHauntComponent_Authority_DecayProgress, DeltaTime) == 0x000000, "Member 'VoidZoneHauntComponent_Authority_DecayProgress::DeltaTime' has a wrong offset!");

// Function Halloween2023.VoidZoneHauntComponent.Authority_GrantCaptureBonusStatusEffects
// 0x0008 (0x0008 - 0x0000)
struct VoidZoneHauntComponent_Authority_GrantCaptureBonusStatusEffects final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZoneHauntComponent_Authority_GrantCaptureBonusStatusEffects) == 0x000008, "Wrong alignment on VoidZoneHauntComponent_Authority_GrantCaptureBonusStatusEffects");
static_assert(sizeof(VoidZoneHauntComponent_Authority_GrantCaptureBonusStatusEffects) == 0x000008, "Wrong size on VoidZoneHauntComponent_Authority_GrantCaptureBonusStatusEffects");
static_assert(offsetof(VoidZoneHauntComponent_Authority_GrantCaptureBonusStatusEffects, Player) == 0x000000, "Member 'VoidZoneHauntComponent_Authority_GrantCaptureBonusStatusEffects::Player' has a wrong offset!");

// Function Halloween2023.VoidZoneHauntComponent.Authority_OnInteractionCompleted
// 0x0018 (0x0018 - 0x0000)
struct VoidZoneHauntComponent_Authority_OnInteractionCompleted final
{
public:
	bool                                          COMPLETED;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         InstigatorsForCompletion;                          // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZoneHauntComponent_Authority_OnInteractionCompleted) == 0x000008, "Wrong alignment on VoidZoneHauntComponent_Authority_OnInteractionCompleted");
static_assert(sizeof(VoidZoneHauntComponent_Authority_OnInteractionCompleted) == 0x000018, "Wrong size on VoidZoneHauntComponent_Authority_OnInteractionCompleted");
static_assert(offsetof(VoidZoneHauntComponent_Authority_OnInteractionCompleted, COMPLETED) == 0x000000, "Member 'VoidZoneHauntComponent_Authority_OnInteractionCompleted::COMPLETED' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Authority_OnInteractionCompleted, InstigatorsForCompletion) == 0x000008, "Member 'VoidZoneHauntComponent_Authority_OnInteractionCompleted::InstigatorsForCompletion' has a wrong offset!");

// Function Halloween2023.VoidZoneHauntComponent.Authority_PlayerInZone
// 0x0008 (0x0008 - 0x0000)
struct VoidZoneHauntComponent_Authority_PlayerInZone final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZoneHauntComponent_Authority_PlayerInZone) == 0x000008, "Wrong alignment on VoidZoneHauntComponent_Authority_PlayerInZone");
static_assert(sizeof(VoidZoneHauntComponent_Authority_PlayerInZone) == 0x000008, "Wrong size on VoidZoneHauntComponent_Authority_PlayerInZone");
static_assert(offsetof(VoidZoneHauntComponent_Authority_PlayerInZone, Player) == 0x000000, "Member 'VoidZoneHauntComponent_Authority_PlayerInZone::Player' has a wrong offset!");

// Function Halloween2023.VoidZoneHauntComponent.Multicast_AddCaptureProgress
// 0x0004 (0x0004 - 0x0000)
struct VoidZoneHauntComponent_Multicast_AddCaptureProgress final
{
public:
	int32                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZoneHauntComponent_Multicast_AddCaptureProgress) == 0x000004, "Wrong alignment on VoidZoneHauntComponent_Multicast_AddCaptureProgress");
static_assert(sizeof(VoidZoneHauntComponent_Multicast_AddCaptureProgress) == 0x000004, "Wrong size on VoidZoneHauntComponent_Multicast_AddCaptureProgress");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_AddCaptureProgress, Progress) == 0x000000, "Member 'VoidZoneHauntComponent_Multicast_AddCaptureProgress::Progress' has a wrong offset!");

// Function Halloween2023.VoidZoneHauntComponent.Multicast_PlayerEnterOrLeftZone
// 0x0028 (0x0028 - 0x0000)
struct VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone final
{
public:
	class ADBDPlayer*                             PlayerEnteringOrLeavingZone;                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsPlayerLeavingZone;                               // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ChargeRemainingInHaunt;                            // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ADBDPlayer>>      PlayersInZone;                                     // 0x0010(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          IsZoneContested;                                   // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldRegressProgress;                             // 0x0021(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x6];                                       // 0x0022(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone) == 0x000008, "Wrong alignment on VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone");
static_assert(sizeof(VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone) == 0x000028, "Wrong size on VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone, PlayerEnteringOrLeavingZone) == 0x000000, "Member 'VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone::PlayerEnteringOrLeavingZone' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone, IsPlayerLeavingZone) == 0x000008, "Member 'VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone::IsPlayerLeavingZone' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone, ChargeRemainingInHaunt) == 0x00000C, "Member 'VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone::ChargeRemainingInHaunt' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone, PlayersInZone) == 0x000010, "Member 'VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone::PlayersInZone' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone, IsZoneContested) == 0x000020, "Member 'VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone::IsZoneContested' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone, ShouldRegressProgress) == 0x000021, "Member 'VoidZoneHauntComponent_Multicast_PlayerEnterOrLeftZone::ShouldRegressProgress' has a wrong offset!");

// Function Halloween2023.VoidZoneHauntComponent.Multicast_UpdateAllPlayerHauntTargets
// 0x0020 (0x0020 - 0x0000)
struct VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets final
{
public:
	float                                         ChargeRemainingInHaunt;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class ADBDPlayer>>      PlayersInZone;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          IsZoneContested;                                   // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldRegressProgress;                             // 0x0019(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A[0x6];                                       // 0x001A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets) == 0x000008, "Wrong alignment on VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets");
static_assert(sizeof(VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets) == 0x000020, "Wrong size on VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets, ChargeRemainingInHaunt) == 0x000000, "Member 'VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets::ChargeRemainingInHaunt' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets, PlayersInZone) == 0x000008, "Member 'VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets::PlayersInZone' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets, IsZoneContested) == 0x000018, "Member 'VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets::IsZoneContested' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets, ShouldRegressProgress) == 0x000019, "Member 'VoidZoneHauntComponent_Multicast_UpdateAllPlayerHauntTargets::ShouldRegressProgress' has a wrong offset!");

// Function Halloween2023.VoidZoneHauntComponent.Multicast_WinHauntForTeam
// 0x0018 (0x0018 - 0x0000)
struct VoidZoneHauntComponent_Multicast_WinHauntForTeam final
{
public:
	class ADBDPlayer*                             WinningPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class ADBDPlayer>>      PlayersInZone;                                     // 0x0008(0x0010)(ConstParm, Parm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZoneHauntComponent_Multicast_WinHauntForTeam) == 0x000008, "Wrong alignment on VoidZoneHauntComponent_Multicast_WinHauntForTeam");
static_assert(sizeof(VoidZoneHauntComponent_Multicast_WinHauntForTeam) == 0x000018, "Wrong size on VoidZoneHauntComponent_Multicast_WinHauntForTeam");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_WinHauntForTeam, WinningPlayer) == 0x000000, "Member 'VoidZoneHauntComponent_Multicast_WinHauntForTeam::WinningPlayer' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_Multicast_WinHauntForTeam, PlayersInZone) == 0x000008, "Member 'VoidZoneHauntComponent_Multicast_WinHauntForTeam::PlayersInZone' has a wrong offset!");

// DelegateFunction Halloween2023.VoidZoneHauntComponent.OnHauntContestChange__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct VoidZoneHauntComponent_OnHauntContestChange__DelegateSignature final
{
public:
	bool                                          IsContested;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZoneHauntComponent_OnHauntContestChange__DelegateSignature) == 0x000001, "Wrong alignment on VoidZoneHauntComponent_OnHauntContestChange__DelegateSignature");
static_assert(sizeof(VoidZoneHauntComponent_OnHauntContestChange__DelegateSignature) == 0x000001, "Wrong size on VoidZoneHauntComponent_OnHauntContestChange__DelegateSignature");
static_assert(offsetof(VoidZoneHauntComponent_OnHauntContestChange__DelegateSignature, IsContested) == 0x000000, "Member 'VoidZoneHauntComponent_OnHauntContestChange__DelegateSignature::IsContested' has a wrong offset!");

// DelegateFunction Halloween2023.VoidZoneHauntComponent.OnPlayerProgress__DelegateSignature
// 0x0008 (0x0008 - 0x0000)
struct VoidZoneHauntComponent_OnPlayerProgress__DelegateSignature final
{
public:
	int32                                         KillerProgress;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SurvivorProgress;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(VoidZoneHauntComponent_OnPlayerProgress__DelegateSignature) == 0x000004, "Wrong alignment on VoidZoneHauntComponent_OnPlayerProgress__DelegateSignature");
static_assert(sizeof(VoidZoneHauntComponent_OnPlayerProgress__DelegateSignature) == 0x000008, "Wrong size on VoidZoneHauntComponent_OnPlayerProgress__DelegateSignature");
static_assert(offsetof(VoidZoneHauntComponent_OnPlayerProgress__DelegateSignature, KillerProgress) == 0x000000, "Member 'VoidZoneHauntComponent_OnPlayerProgress__DelegateSignature::KillerProgress' has a wrong offset!");
static_assert(offsetof(VoidZoneHauntComponent_OnPlayerProgress__DelegateSignature, SurvivorProgress) == 0x000004, "Member 'VoidZoneHauntComponent_OnPlayerProgress__DelegateSignature::SurvivorProgress' has a wrong offset!");

}

