#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDBots

#include "Basic.hpp"

#include "DBDBots_classes.hpp"
#include "DBDBots_parameters.hpp"


namespace SDK
{

// Function DBDBots.DBDAIBTController.Authority_FinishedPlaying
// (Final, Native, Private)

void ADBDAIBTController::Authority_FinishedPlaying()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDAIBTController", "Authority_FinishedPlaying");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.DBDAIBTController.OnPawnBump
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           SelfActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void ADBDAIBTController::OnPawnBump(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDAIBTController", "OnPawnBump");

	Params::DBDAIBTController_OnPawnBump Parms{};

	Parms.SelfActor = SelfActor;
	Parms.OtherActor = OtherActor;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.AISkill_DirectionalMinigame.OnMinigameEnd
// (Final, Native, Private)
// Parameters:
// EDirectionalMinigameResult              Result                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAISkill_DirectionalMinigame::OnMinigameEnd(EDirectionalMinigameResult Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISkill_DirectionalMinigame", "OnMinigameEnd");

	Params::AISkill_DirectionalMinigame_OnMinigameEnd Parms{};

	Parms.Result = Result;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.AISkill_DirectionalMinigame.OnMinigameStart
// (Final, Native, Private)
// Parameters:
// TArray<EDirectionalInputKey>            Sequence                                               (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// int32                                   CurrentIndex                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAISkill_DirectionalMinigame::OnMinigameStart(const TArray<EDirectionalInputKey>& Sequence, int32 CurrentIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISkill_DirectionalMinigame", "OnMinigameStart");

	Params::AISkill_DirectionalMinigame_OnMinigameStart Parms{};

	Parms.Sequence = std::move(Sequence);
	Parms.CurrentIndex = CurrentIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.AISkill_FindInteractable_SeanceSpot.OnLevelReadyToPlay
// (Final, Native, Private)

void UAISkill_FindInteractable_SeanceSpot::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISkill_FindInteractable_SeanceSpot", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.AISkill_Find_StrengthInShadows.OnLevelReadyToPlay
// (Final, Native, Private)

void UAISkill_Find_StrengthInShadows::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("AISkill_Find_StrengthInShadows", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.DBDAIEnemyTrackerComponent.OnLevelReadyToPlay
// (Final, Native, Private)

void UDBDAIEnemyTrackerComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDAIEnemyTrackerComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.DBDAIStateComponent.OnSpecialAttackEventDispatched
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDBDAIStateComponent::OnSpecialAttackEventDispatched(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDAIStateComponent", "OnSpecialAttackEventDispatched");

	Params::DBDAIStateComponent_OnSpecialAttackEventDispatched Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.DBDAIStateComponent.OnStartAimingEventDispatched
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UDBDAIStateComponent::OnStartAimingEventDispatched(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDAIStateComponent", "OnStartAimingEventDispatched");

	Params::DBDAIStateComponent_OnStartAimingEventDispatched Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.DBDAIStateComponent.OnUniqueGameplayEvent
// (Final, Native, Private)
// Parameters:
// EDBDScoreTypes                          EventType                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Amount                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Instigator                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Target                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UDBDAIStateComponent::OnUniqueGameplayEvent(EDBDScoreTypes EventType, float Amount, class AActor* Instigator, class AActor* Target)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDAIStateComponent", "OnUniqueGameplayEvent");

	Params::DBDAIStateComponent_OnUniqueGameplayEvent Parms{};

	Parms.EventType = EventType;
	Parms.Amount = Amount;
	Parms.Instigator = Instigator;
	Parms.Target = Target;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.DBDNavLinkCustomComponent.OnLevelReadyToPlay
// (Final, Native, Private)

void UDBDNavLinkCustomComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDNavLinkCustomComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.DBDNavObstacleAnalysisComponent.OnLevelReadyToPlay
// (Final, Native, Private)

void UDBDNavObstacleAnalysisComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DBDNavObstacleAnalysisComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.NavLinkProxy_Base.AutoAdjustSmartLinkPoints
// (Final, Native, Public, BlueprintCallable)

void ANavLinkProxy_Base::AutoAdjustSmartLinkPoints()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavLinkProxy_Base", "AutoAdjustSmartLinkPoints");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.NavLinkProxy_Base.OnSmartLinkReachedCallback
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class AActor*                           MovingActor                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          DestinationPoint                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ANavLinkProxy_Base::OnSmartLinkReachedCallback(class AActor* MovingActor, const struct FVector& DestinationPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavLinkProxy_Base", "OnSmartLinkReachedCallback");

	Params::NavLinkProxy_Base_OnSmartLinkReachedCallback Parms{};

	Parms.MovingActor = MovingActor;
	Parms.DestinationPoint = std::move(DestinationPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.NavLinkProxy_DirectMove.OnDisplayDebugInfo
// (Final, Native, Private)

void ANavLinkProxy_DirectMove::OnDisplayDebugInfo()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavLinkProxy_DirectMove", "OnDisplayDebugInfo");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function DBDBots.NavLinkProxy_InteractionTeleport.OnLevelReadyToPlay
// (Final, Native, Private)

void ANavLinkProxy_InteractionTeleport::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("NavLinkProxy_InteractionTeleport", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

