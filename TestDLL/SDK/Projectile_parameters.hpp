#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Projectile

#include "Basic.hpp"

#include "Projectile_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function Projectile.BaseProjectileLauncher.Authority_AddMaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_Authority_AddMaxAmmo final
{
public:
	int32                                         AmmoToAdd;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_Authority_AddMaxAmmo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_Authority_AddMaxAmmo");
static_assert(sizeof(BaseProjectileLauncher_Authority_AddMaxAmmo) == 0x000004, "Wrong size on BaseProjectileLauncher_Authority_AddMaxAmmo");
static_assert(offsetof(BaseProjectileLauncher_Authority_AddMaxAmmo, AmmoToAdd) == 0x000000, "Member 'BaseProjectileLauncher_Authority_AddMaxAmmo::AmmoToAdd' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.Authority_ReturnAmmoUnits
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_Authority_ReturnAmmoUnits final
{
public:
	int32                                         AmountOfAmmoUnitsReturned;                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_Authority_ReturnAmmoUnits) == 0x000004, "Wrong alignment on BaseProjectileLauncher_Authority_ReturnAmmoUnits");
static_assert(sizeof(BaseProjectileLauncher_Authority_ReturnAmmoUnits) == 0x000004, "Wrong size on BaseProjectileLauncher_Authority_ReturnAmmoUnits");
static_assert(offsetof(BaseProjectileLauncher_Authority_ReturnAmmoUnits, AmountOfAmmoUnitsReturned) == 0x000000, "Member 'BaseProjectileLauncher_Authority_ReturnAmmoUnits::AmountOfAmmoUnitsReturned' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.Authority_SetMaxAmmo
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileLauncher_Authority_SetMaxAmmo final
{
public:
	int32                                         NewMaxAmmo;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMaxAmmoImmutable;                                // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectileLauncher_Authority_SetMaxAmmo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_Authority_SetMaxAmmo");
static_assert(sizeof(BaseProjectileLauncher_Authority_SetMaxAmmo) == 0x000008, "Wrong size on BaseProjectileLauncher_Authority_SetMaxAmmo");
static_assert(offsetof(BaseProjectileLauncher_Authority_SetMaxAmmo, NewMaxAmmo) == 0x000000, "Member 'BaseProjectileLauncher_Authority_SetMaxAmmo::NewMaxAmmo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_Authority_SetMaxAmmo, IsMaxAmmoImmutable) == 0x000004, "Member 'BaseProjectileLauncher_Authority_SetMaxAmmo::IsMaxAmmoImmutable' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.OnLaunch
// 0x0040 (0x0040 - 0x0000)
struct BaseProjectileLauncher_OnLaunch final
{
public:
	struct FLaunchInfo                            LaunchInfo;                                        // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	class ABaseProjectile*                        Projectile;                                        // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_OnLaunch) == 0x000008, "Wrong alignment on BaseProjectileLauncher_OnLaunch");
static_assert(sizeof(BaseProjectileLauncher_OnLaunch) == 0x000040, "Wrong size on BaseProjectileLauncher_OnLaunch");
static_assert(offsetof(BaseProjectileLauncher_OnLaunch, LaunchInfo) == 0x000000, "Member 'BaseProjectileLauncher_OnLaunch::LaunchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_OnLaunch, Projectile) == 0x000038, "Member 'BaseProjectileLauncher_OnLaunch::Projectile' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.OnRep_Ammo
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_OnRep_Ammo final
{
public:
	int32                                         OldAmmo;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_OnRep_Ammo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_OnRep_Ammo");
static_assert(sizeof(BaseProjectileLauncher_OnRep_Ammo) == 0x000004, "Wrong size on BaseProjectileLauncher_OnRep_Ammo");
static_assert(offsetof(BaseProjectileLauncher_OnRep_Ammo, OldAmmo) == 0x000000, "Member 'BaseProjectileLauncher_OnRep_Ammo::OldAmmo' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.OnRep_MaxAmmo
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_OnRep_MaxAmmo final
{
public:
	int32                                         OldMaxAmmo;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_OnRep_MaxAmmo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_OnRep_MaxAmmo");
static_assert(sizeof(BaseProjectileLauncher_OnRep_MaxAmmo) == 0x000004, "Wrong size on BaseProjectileLauncher_OnRep_MaxAmmo");
static_assert(offsetof(BaseProjectileLauncher_OnRep_MaxAmmo, OldMaxAmmo) == 0x000000, "Member 'BaseProjectileLauncher_OnRep_MaxAmmo::OldMaxAmmo' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.Server_Launch
// 0x0040 (0x0040 - 0x0000)
struct BaseProjectileLauncher_Server_Launch final
{
public:
	struct FLaunchInfo                            LaunchInfo;                                        // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	class ABaseProjectile*                        Projectile;                                        // 0x0038(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_Server_Launch) == 0x000008, "Wrong alignment on BaseProjectileLauncher_Server_Launch");
static_assert(sizeof(BaseProjectileLauncher_Server_Launch) == 0x000040, "Wrong size on BaseProjectileLauncher_Server_Launch");
static_assert(offsetof(BaseProjectileLauncher_Server_Launch, LaunchInfo) == 0x000000, "Member 'BaseProjectileLauncher_Server_Launch::LaunchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_Server_Launch, Projectile) == 0x000038, "Member 'BaseProjectileLauncher_Server_Launch::Projectile' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.Server_LaunchWithImpact
// 0x0088 (0x0088 - 0x0000)
struct BaseProjectileLauncher_Server_LaunchWithImpact final
{
public:
	struct FLaunchInfo                            LaunchInfo;                                        // 0x0000(0x0038)(ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactInfo                            ImpactInfo;                                        // 0x0038(0x0048)(ConstParm, Parm, ReferenceParm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class ABaseProjectile*                        Projectile;                                        // 0x0080(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_Server_LaunchWithImpact) == 0x000008, "Wrong alignment on BaseProjectileLauncher_Server_LaunchWithImpact");
static_assert(sizeof(BaseProjectileLauncher_Server_LaunchWithImpact) == 0x000088, "Wrong size on BaseProjectileLauncher_Server_LaunchWithImpact");
static_assert(offsetof(BaseProjectileLauncher_Server_LaunchWithImpact, LaunchInfo) == 0x000000, "Member 'BaseProjectileLauncher_Server_LaunchWithImpact::LaunchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_Server_LaunchWithImpact, ImpactInfo) == 0x000038, "Member 'BaseProjectileLauncher_Server_LaunchWithImpact::ImpactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_Server_LaunchWithImpact, Projectile) == 0x000080, "Member 'BaseProjectileLauncher_Server_LaunchWithImpact::Projectile' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.SetProjectileProvider
// 0x0010 (0x0010 - 0x0000)
struct BaseProjectileLauncher_SetProjectileProvider final
{
public:
	TScriptInterface<class IProjectileProvider>   ProjectileProvider;                                // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_SetProjectileProvider) == 0x000008, "Wrong alignment on BaseProjectileLauncher_SetProjectileProvider");
static_assert(sizeof(BaseProjectileLauncher_SetProjectileProvider) == 0x000010, "Wrong size on BaseProjectileLauncher_SetProjectileProvider");
static_assert(offsetof(BaseProjectileLauncher_SetProjectileProvider, ProjectileProvider) == 0x000000, "Member 'BaseProjectileLauncher_SetProjectileProvider::ProjectileProvider' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.SetProjectileVar
// 0x0010 (0x0010 - 0x0000)
struct BaseProjectileLauncher_SetProjectileVar final
{
public:
	class FName                                   VarName;                                           // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_SetProjectileVar) == 0x000004, "Wrong alignment on BaseProjectileLauncher_SetProjectileVar");
static_assert(sizeof(BaseProjectileLauncher_SetProjectileVar) == 0x000010, "Wrong size on BaseProjectileLauncher_SetProjectileVar");
static_assert(offsetof(BaseProjectileLauncher_SetProjectileVar, VarName) == 0x000000, "Member 'BaseProjectileLauncher_SetProjectileVar::VarName' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_SetProjectileVar, Value) == 0x00000C, "Member 'BaseProjectileLauncher_SetProjectileVar::Value' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetAmmo
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_GetAmmo final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetAmmo) == 0x000004, "Wrong alignment on BaseProjectileLauncher_GetAmmo");
static_assert(sizeof(BaseProjectileLauncher_GetAmmo) == 0x000004, "Wrong size on BaseProjectileLauncher_GetAmmo");
static_assert(offsetof(BaseProjectileLauncher_GetAmmo, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetAmmo::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchDirection
// 0x0018 (0x0018 - 0x0000)
struct BaseProjectileLauncher_GetLaunchDirection final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchDirection) == 0x000008, "Wrong alignment on BaseProjectileLauncher_GetLaunchDirection");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchDirection) == 0x000018, "Wrong size on BaseProjectileLauncher_GetLaunchDirection");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchDirection, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchDirection::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchDirectionAtViewAndThrowPowerRatio
// 0x0038 (0x0038 - 0x0000)
struct BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio final
{
public:
	struct FRotator                               ViewRotation;                                      // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ThrowPowerRatio;                                   // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ReturnValue;                                       // 0x0020(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio) == 0x000008, "Wrong alignment on BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio) == 0x000038, "Wrong size on BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio, ViewRotation) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio::ViewRotation' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio, ThrowPowerRatio) == 0x000018, "Member 'BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio::ThrowPowerRatio' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio, ReturnValue) == 0x000020, "Member 'BaseProjectileLauncher_GetLaunchDirectionAtViewAndThrowPowerRatio::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchPosition
// 0x0018 (0x0018 - 0x0000)
struct BaseProjectileLauncher_GetLaunchPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchPosition) == 0x000008, "Wrong alignment on BaseProjectileLauncher_GetLaunchPosition");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchPosition) == 0x000018, "Wrong size on BaseProjectileLauncher_GetLaunchPosition");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchPosition, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchPosition::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchSpeed
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectileLauncher_GetLaunchSpeed final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchSpeed) == 0x000004, "Wrong alignment on BaseProjectileLauncher_GetLaunchSpeed");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchSpeed) == 0x000004, "Wrong size on BaseProjectileLauncher_GetLaunchSpeed");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchSpeed, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchSpeed::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetLaunchSpeedAtThrowPowerRatio
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio final
{
public:
	float                                         ThrowPowerRatio;                                   // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio) == 0x000004, "Wrong alignment on BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio");
static_assert(sizeof(BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio) == 0x000008, "Wrong size on BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio, ThrowPowerRatio) == 0x000000, "Member 'BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio::ThrowPowerRatio' has a wrong offset!");
static_assert(offsetof(BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio, ReturnValue) == 0x000004, "Member 'BaseProjectileLauncher_GetLaunchSpeedAtThrowPowerRatio::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetOwningPawn
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileLauncher_GetOwningPawn final
{
public:
	class APawn*                                  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetOwningPawn) == 0x000008, "Wrong alignment on BaseProjectileLauncher_GetOwningPawn");
static_assert(sizeof(BaseProjectileLauncher_GetOwningPawn) == 0x000008, "Wrong size on BaseProjectileLauncher_GetOwningPawn");
static_assert(offsetof(BaseProjectileLauncher_GetOwningPawn, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetOwningPawn::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.GetProjectileToLaunch
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileLauncher_GetProjectileToLaunch final
{
public:
	class ABaseProjectile*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_GetProjectileToLaunch) == 0x000008, "Wrong alignment on BaseProjectileLauncher_GetProjectileToLaunch");
static_assert(sizeof(BaseProjectileLauncher_GetProjectileToLaunch) == 0x000008, "Wrong size on BaseProjectileLauncher_GetProjectileToLaunch");
static_assert(offsetof(BaseProjectileLauncher_GetProjectileToLaunch, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_GetProjectileToLaunch::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.HasAuthority
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectileLauncher_HasAuthority final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_HasAuthority) == 0x000001, "Wrong alignment on BaseProjectileLauncher_HasAuthority");
static_assert(sizeof(BaseProjectileLauncher_HasAuthority) == 0x000001, "Wrong size on BaseProjectileLauncher_HasAuthority");
static_assert(offsetof(BaseProjectileLauncher_HasAuthority, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_HasAuthority::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.HasProjectile
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectileLauncher_HasProjectile final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_HasProjectile) == 0x000001, "Wrong alignment on BaseProjectileLauncher_HasProjectile");
static_assert(sizeof(BaseProjectileLauncher_HasProjectile) == 0x000001, "Wrong size on BaseProjectileLauncher_HasProjectile");
static_assert(offsetof(BaseProjectileLauncher_HasProjectile, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_HasProjectile::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.IsAmmoFull
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectileLauncher_IsAmmoFull final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_IsAmmoFull) == 0x000001, "Wrong alignment on BaseProjectileLauncher_IsAmmoFull");
static_assert(sizeof(BaseProjectileLauncher_IsAmmoFull) == 0x000001, "Wrong size on BaseProjectileLauncher_IsAmmoFull");
static_assert(offsetof(BaseProjectileLauncher_IsAmmoFull, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_IsAmmoFull::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectileLauncher.IsLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectileLauncher_IsLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileLauncher_IsLocallyControlled) == 0x000001, "Wrong alignment on BaseProjectileLauncher_IsLocallyControlled");
static_assert(sizeof(BaseProjectileLauncher_IsLocallyControlled) == 0x000001, "Wrong size on BaseProjectileLauncher_IsLocallyControlled");
static_assert(offsetof(BaseProjectileLauncher_IsLocallyControlled, ReturnValue) == 0x000000, "Member 'BaseProjectileLauncher_IsLocallyControlled::ReturnValue' has a wrong offset!");

// Function Projectile.DBDProjectileMovementComponent.AddComponentToSweep
// 0x0008 (0x0008 - 0x0000)
struct DBDProjectileMovementComponent_AddComponentToSweep final
{
public:
	class UPrimitiveComponent*                    Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDProjectileMovementComponent_AddComponentToSweep) == 0x000008, "Wrong alignment on DBDProjectileMovementComponent_AddComponentToSweep");
static_assert(sizeof(DBDProjectileMovementComponent_AddComponentToSweep) == 0x000008, "Wrong size on DBDProjectileMovementComponent_AddComponentToSweep");
static_assert(offsetof(DBDProjectileMovementComponent_AddComponentToSweep, Component) == 0x000000, "Member 'DBDProjectileMovementComponent_AddComponentToSweep::Component' has a wrong offset!");

// DelegateFunction Projectile.DBDProjectileMovementComponent.OnComponentToSweepCollisionBP__DelegateSignature
// 0x00F8 (0x00F8 - 0x0000)
struct DBDProjectileMovementComponent_OnComponentToSweepCollisionBP__DelegateSignature final
{
public:
	class UPrimitiveComponent*                    PrimitiveComponent;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             HitResult;                                         // 0x0008(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDProjectileMovementComponent_OnComponentToSweepCollisionBP__DelegateSignature) == 0x000008, "Wrong alignment on DBDProjectileMovementComponent_OnComponentToSweepCollisionBP__DelegateSignature");
static_assert(sizeof(DBDProjectileMovementComponent_OnComponentToSweepCollisionBP__DelegateSignature) == 0x0000F8, "Wrong size on DBDProjectileMovementComponent_OnComponentToSweepCollisionBP__DelegateSignature");
static_assert(offsetof(DBDProjectileMovementComponent_OnComponentToSweepCollisionBP__DelegateSignature, PrimitiveComponent) == 0x000000, "Member 'DBDProjectileMovementComponent_OnComponentToSweepCollisionBP__DelegateSignature::PrimitiveComponent' has a wrong offset!");
static_assert(offsetof(DBDProjectileMovementComponent_OnComponentToSweepCollisionBP__DelegateSignature, HitResult) == 0x000008, "Member 'DBDProjectileMovementComponent_OnComponentToSweepCollisionBP__DelegateSignature::HitResult' has a wrong offset!");

// Function Projectile.DBDProjectileMovementComponent.GetPreviousLocation
// 0x0018 (0x0018 - 0x0000)
struct DBDProjectileMovementComponent_GetPreviousLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDProjectileMovementComponent_GetPreviousLocation) == 0x000008, "Wrong alignment on DBDProjectileMovementComponent_GetPreviousLocation");
static_assert(sizeof(DBDProjectileMovementComponent_GetPreviousLocation) == 0x000018, "Wrong size on DBDProjectileMovementComponent_GetPreviousLocation");
static_assert(offsetof(DBDProjectileMovementComponent_GetPreviousLocation, ReturnValue) == 0x000000, "Member 'DBDProjectileMovementComponent_GetPreviousLocation::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.Authority_TryDetectCollision
// 0x0050 (0x0050 - 0x0000)
struct BaseProjectile_Authority_TryDetectCollision final
{
public:
	struct FImpactInfo                            ImpactInfo;                                        // 0x0000(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_Authority_TryDetectCollision) == 0x000008, "Wrong alignment on BaseProjectile_Authority_TryDetectCollision");
static_assert(sizeof(BaseProjectile_Authority_TryDetectCollision) == 0x000050, "Wrong size on BaseProjectile_Authority_TryDetectCollision");
static_assert(offsetof(BaseProjectile_Authority_TryDetectCollision, ImpactInfo) == 0x000000, "Member 'BaseProjectile_Authority_TryDetectCollision::ImpactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Authority_TryDetectCollision, Force) == 0x000048, "Member 'BaseProjectile_Authority_TryDetectCollision::Force' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Authority_TryDetectCollision, ReturnValue) == 0x000049, "Member 'BaseProjectile_Authority_TryDetectCollision::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.IsValidImpactDetection
// 0x0050 (0x0050 - 0x0000)
struct BaseProjectile_IsValidImpactDetection final
{
public:
	struct FImpactInfo                            ImpactInfo;                                        // 0x0000(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_IsValidImpactDetection) == 0x000008, "Wrong alignment on BaseProjectile_IsValidImpactDetection");
static_assert(sizeof(BaseProjectile_IsValidImpactDetection) == 0x000050, "Wrong size on BaseProjectile_IsValidImpactDetection");
static_assert(offsetof(BaseProjectile_IsValidImpactDetection, ImpactInfo) == 0x000000, "Member 'BaseProjectile_IsValidImpactDetection::ImpactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_IsValidImpactDetection, ReturnValue) == 0x000048, "Member 'BaseProjectile_IsValidImpactDetection::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.IsValidPlayerDetection
// 0x0050 (0x0050 - 0x0000)
struct BaseProjectile_IsValidPlayerDetection final
{
public:
	struct FImpactInfo                            ImpactInfo;                                        // 0x0000(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_IsValidPlayerDetection) == 0x000008, "Wrong alignment on BaseProjectile_IsValidPlayerDetection");
static_assert(sizeof(BaseProjectile_IsValidPlayerDetection) == 0x000050, "Wrong size on BaseProjectile_IsValidPlayerDetection");
static_assert(offsetof(BaseProjectile_IsValidPlayerDetection, ImpactInfo) == 0x000000, "Member 'BaseProjectile_IsValidPlayerDetection::ImpactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_IsValidPlayerDetection, ReturnValue) == 0x000048, "Member 'BaseProjectile_IsValidPlayerDetection::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.Local_OnPlayerDetected
// 0x0068 (0x0068 - 0x0000)
struct BaseProjectile_Local_OnPlayerDetected final
{
public:
	struct FImpactInfo                            ImpactInfo;                                        // 0x0000(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                ProjectileLocation;                                // 0x0048(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0060(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_Local_OnPlayerDetected) == 0x000008, "Wrong alignment on BaseProjectile_Local_OnPlayerDetected");
static_assert(sizeof(BaseProjectile_Local_OnPlayerDetected) == 0x000068, "Wrong size on BaseProjectile_Local_OnPlayerDetected");
static_assert(offsetof(BaseProjectile_Local_OnPlayerDetected, ImpactInfo) == 0x000000, "Member 'BaseProjectile_Local_OnPlayerDetected::ImpactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_OnPlayerDetected, ProjectileLocation) == 0x000048, "Member 'BaseProjectile_Local_OnPlayerDetected::ProjectileLocation' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_OnPlayerDetected, ReturnValue) == 0x000060, "Member 'BaseProjectile_Local_OnPlayerDetected::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.Local_SweepImpactCollision
// 0x0140 (0x0140 - 0x0000)
struct BaseProjectile_Local_SweepImpactCollision final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ColliderRotation;                                  // 0x0030(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHit;                                            // 0x0048(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0138(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_139[0x7];                                      // 0x0139(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_Local_SweepImpactCollision) == 0x000008, "Wrong alignment on BaseProjectile_Local_SweepImpactCollision");
static_assert(sizeof(BaseProjectile_Local_SweepImpactCollision) == 0x000140, "Wrong size on BaseProjectile_Local_SweepImpactCollision");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, Start) == 0x000000, "Member 'BaseProjectile_Local_SweepImpactCollision::Start' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, End) == 0x000018, "Member 'BaseProjectile_Local_SweepImpactCollision::End' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, ColliderRotation) == 0x000030, "Member 'BaseProjectile_Local_SweepImpactCollision::ColliderRotation' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, OutHit) == 0x000048, "Member 'BaseProjectile_Local_SweepImpactCollision::OutHit' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_SweepImpactCollision, ReturnValue) == 0x000138, "Member 'BaseProjectile_Local_SweepImpactCollision::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.Local_TryDetectCollision
// 0x0050 (0x0050 - 0x0000)
struct BaseProjectile_Local_TryDetectCollision final
{
public:
	struct FImpactInfo                            ImpactInfo;                                        // 0x0000(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          Force;                                             // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0049(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_Local_TryDetectCollision) == 0x000008, "Wrong alignment on BaseProjectile_Local_TryDetectCollision");
static_assert(sizeof(BaseProjectile_Local_TryDetectCollision) == 0x000050, "Wrong size on BaseProjectile_Local_TryDetectCollision");
static_assert(offsetof(BaseProjectile_Local_TryDetectCollision, ImpactInfo) == 0x000000, "Member 'BaseProjectile_Local_TryDetectCollision::ImpactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_TryDetectCollision, Force) == 0x000048, "Member 'BaseProjectile_Local_TryDetectCollision::Force' has a wrong offset!");
static_assert(offsetof(BaseProjectile_Local_TryDetectCollision, ReturnValue) == 0x000049, "Member 'BaseProjectile_Local_TryDetectCollision::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.OnDetectCollision
// 0x0048 (0x0048 - 0x0000)
struct BaseProjectile_OnDetectCollision final
{
public:
	struct FImpactInfo                            ImpactInfo;                                        // 0x0000(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_OnDetectCollision) == 0x000008, "Wrong alignment on BaseProjectile_OnDetectCollision");
static_assert(sizeof(BaseProjectile_OnDetectCollision) == 0x000048, "Wrong size on BaseProjectile_OnDetectCollision");
static_assert(offsetof(BaseProjectile_OnDetectCollision, ImpactInfo) == 0x000000, "Member 'BaseProjectile_OnDetectCollision::ImpactInfo' has a wrong offset!");

// Function Projectile.BaseProjectile.OnDetectPlayer
// 0x0048 (0x0048 - 0x0000)
struct BaseProjectile_OnDetectPlayer final
{
public:
	struct FImpactInfo                            ImpactInfo;                                        // 0x0000(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_OnDetectPlayer) == 0x000008, "Wrong alignment on BaseProjectile_OnDetectPlayer");
static_assert(sizeof(BaseProjectile_OnDetectPlayer) == 0x000048, "Wrong size on BaseProjectile_OnDetectPlayer");
static_assert(offsetof(BaseProjectile_OnDetectPlayer, ImpactInfo) == 0x000000, "Member 'BaseProjectile_OnDetectPlayer::ImpactInfo' has a wrong offset!");

// Function Projectile.BaseProjectile.OnLaunch
// 0x0040 (0x0040 - 0x0000)
struct BaseProjectile_OnLaunch final
{
public:
	struct FLaunchInfo                            LaunchInfo;                                        // 0x0000(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          HasImpactOnLaunch;                                 // 0x0038(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_OnLaunch) == 0x000008, "Wrong alignment on BaseProjectile_OnLaunch");
static_assert(sizeof(BaseProjectile_OnLaunch) == 0x000040, "Wrong size on BaseProjectile_OnLaunch");
static_assert(offsetof(BaseProjectile_OnLaunch, LaunchInfo) == 0x000000, "Member 'BaseProjectile_OnLaunch::LaunchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectile_OnLaunch, HasImpactOnLaunch) == 0x000038, "Member 'BaseProjectile_OnLaunch::HasImpactOnLaunch' has a wrong offset!");

// Function Projectile.BaseProjectile.OnSetActive
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectile_OnSetActive final
{
public:
	bool                                          Active;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_OnSetActive) == 0x000001, "Wrong alignment on BaseProjectile_OnSetActive");
static_assert(sizeof(BaseProjectile_OnSetActive) == 0x000001, "Wrong size on BaseProjectile_OnSetActive");
static_assert(offsetof(BaseProjectile_OnSetActive, Active) == 0x000000, "Member 'BaseProjectile_OnSetActive::Active' has a wrong offset!");

// Function Projectile.BaseProjectile.GetAddLauncherVeloctyFactor
// 0x0004 (0x0004 - 0x0000)
struct BaseProjectile_GetAddLauncherVeloctyFactor final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetAddLauncherVeloctyFactor) == 0x000004, "Wrong alignment on BaseProjectile_GetAddLauncherVeloctyFactor");
static_assert(sizeof(BaseProjectile_GetAddLauncherVeloctyFactor) == 0x000004, "Wrong size on BaseProjectile_GetAddLauncherVeloctyFactor");
static_assert(offsetof(BaseProjectile_GetAddLauncherVeloctyFactor, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetAddLauncherVeloctyFactor::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.GetImpactPrimitiveComponent
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectile_GetImpactPrimitiveComponent final
{
public:
	class UPrimitiveComponent*                    ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetImpactPrimitiveComponent) == 0x000008, "Wrong alignment on BaseProjectile_GetImpactPrimitiveComponent");
static_assert(sizeof(BaseProjectile_GetImpactPrimitiveComponent) == 0x000008, "Wrong size on BaseProjectile_GetImpactPrimitiveComponent");
static_assert(offsetof(BaseProjectile_GetImpactPrimitiveComponent, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetImpactPrimitiveComponent::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.GetLauncher
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectile_GetLauncher final
{
public:
	class UBaseProjectileLauncher*                ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_GetLauncher) == 0x000008, "Wrong alignment on BaseProjectile_GetLauncher");
static_assert(sizeof(BaseProjectile_GetLauncher) == 0x000008, "Wrong size on BaseProjectile_GetLauncher");
static_assert(offsetof(BaseProjectile_GetLauncher, ReturnValue) == 0x000000, "Member 'BaseProjectile_GetLauncher::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.IsOwningPawnLocallyControlled
// 0x0001 (0x0001 - 0x0000)
struct BaseProjectile_IsOwningPawnLocallyControlled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectile_IsOwningPawnLocallyControlled) == 0x000001, "Wrong alignment on BaseProjectile_IsOwningPawnLocallyControlled");
static_assert(sizeof(BaseProjectile_IsOwningPawnLocallyControlled) == 0x000001, "Wrong size on BaseProjectile_IsOwningPawnLocallyControlled");
static_assert(offsetof(BaseProjectile_IsOwningPawnLocallyControlled, ReturnValue) == 0x000000, "Member 'BaseProjectile_IsOwningPawnLocallyControlled::ReturnValue' has a wrong offset!");

// Function Projectile.BaseProjectile.SphereTraceSingle
// 0x0130 (0x0130 - 0x0000)
struct BaseProjectile_SphereTraceSingle final
{
public:
	struct FVector                                Start;                                             // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                End;                                               // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       Sphere;                                            // 0x0030(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             OutHitResult;                                      // 0x0038(0x00F0)(Parm, OutParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0128(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectile_SphereTraceSingle) == 0x000008, "Wrong alignment on BaseProjectile_SphereTraceSingle");
static_assert(sizeof(BaseProjectile_SphereTraceSingle) == 0x000130, "Wrong size on BaseProjectile_SphereTraceSingle");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, Start) == 0x000000, "Member 'BaseProjectile_SphereTraceSingle::Start' has a wrong offset!");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, End) == 0x000018, "Member 'BaseProjectile_SphereTraceSingle::End' has a wrong offset!");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, Sphere) == 0x000030, "Member 'BaseProjectile_SphereTraceSingle::Sphere' has a wrong offset!");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, OutHitResult) == 0x000038, "Member 'BaseProjectile_SphereTraceSingle::OutHitResult' has a wrong offset!");
static_assert(offsetof(BaseProjectile_SphereTraceSingle, ReturnValue) == 0x000128, "Member 'BaseProjectile_SphereTraceSingle::ReturnValue' has a wrong offset!");

// Function Projectile.AuthoritativePoolProjectileProviderAdapter.Init
// 0x0008 (0x0008 - 0x0000)
struct AuthoritativePoolProjectileProviderAdapter_Init final
{
public:
	class UAuthoritativeActorPoolComponent*       Pool;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuthoritativePoolProjectileProviderAdapter_Init) == 0x000008, "Wrong alignment on AuthoritativePoolProjectileProviderAdapter_Init");
static_assert(sizeof(AuthoritativePoolProjectileProviderAdapter_Init) == 0x000008, "Wrong size on AuthoritativePoolProjectileProviderAdapter_Init");
static_assert(offsetof(AuthoritativePoolProjectileProviderAdapter_Init, Pool) == 0x000000, "Member 'AuthoritativePoolProjectileProviderAdapter_Init::Pool' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Client_LaunchRefusedByServer
// 0x0008 (0x0008 - 0x0000)
struct BaseProjectileReplicationComponent_Client_LaunchRefusedByServer final
{
public:
	class ABaseProjectile*                        Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Client_LaunchRefusedByServer) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Client_LaunchRefusedByServer");
static_assert(sizeof(BaseProjectileReplicationComponent_Client_LaunchRefusedByServer) == 0x000008, "Wrong size on BaseProjectileReplicationComponent_Client_LaunchRefusedByServer");
static_assert(offsetof(BaseProjectileReplicationComponent_Client_LaunchRefusedByServer, Projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Client_LaunchRefusedByServer::Projectile' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Client_ReceiveDetectPlayerValidation
// 0x0010 (0x0010 - 0x0000)
struct BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation final
{
public:
	class ABaseProjectile*                        Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation");
static_assert(sizeof(BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation) == 0x000010, "Wrong size on BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation");
static_assert(offsetof(BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation, Projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation::Projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation, Success) == 0x000008, "Member 'BaseProjectileReplicationComponent_Client_ReceiveDetectPlayerValidation::Success' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_DetectImpact
// 0x0050 (0x0050 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_DetectImpact final
{
public:
	class ABaseProjectile*                        Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            ImpactInfo;                                        // 0x0008(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_DetectImpact) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_DetectImpact");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_DetectImpact) == 0x000050, "Wrong size on BaseProjectileReplicationComponent_Multicast_DetectImpact");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_DetectImpact, Projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_DetectImpact::Projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_DetectImpact, ImpactInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_DetectImpact::ImpactInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_DetectPlayer
// 0x0050 (0x0050 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_DetectPlayer final
{
public:
	class ABaseProjectile*                        Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            ImpactInfo;                                        // 0x0008(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_DetectPlayer) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_DetectPlayer");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_DetectPlayer) == 0x000050, "Wrong size on BaseProjectileReplicationComponent_Multicast_DetectPlayer");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_DetectPlayer, Projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_DetectPlayer::Projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_DetectPlayer, ImpactInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_DetectPlayer::ImpactInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_OnLaunch
// 0x0040 (0x0040 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_OnLaunch final
{
public:
	class ABaseProjectile*                        Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLaunchInfo                            LaunchInfo;                                        // 0x0008(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_OnLaunch) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_OnLaunch");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_OnLaunch) == 0x000040, "Wrong size on BaseProjectileReplicationComponent_Multicast_OnLaunch");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunch, Projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunch::Projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunch, LaunchInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunch::LaunchInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_OnLaunchWithImpact
// 0x0088 (0x0088 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact final
{
public:
	class ABaseProjectile*                        Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLaunchInfo                            LaunchInfo;                                        // 0x0008(0x0038)(Parm, NoDestructor, NativeAccessSpecifierPublic)
	struct FImpactInfo                            ImpactInfo;                                        // 0x0040(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact) == 0x000088, "Wrong size on BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact, Projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact::Projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact, LaunchInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact::LaunchInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact, ImpactInfo) == 0x000040, "Member 'BaseProjectileReplicationComponent_Multicast_OnLaunchWithImpact::ImpactInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Multicast_SendAuthorityDetectPlayer
// 0x0050 (0x0050 - 0x0000)
struct BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer final
{
public:
	class ABaseProjectile*                        Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            ImpactInfo;                                        // 0x0008(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer");
static_assert(sizeof(BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer) == 0x000050, "Wrong size on BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer, Projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer::Projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer, ImpactInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Multicast_SendAuthorityDetectPlayer::ImpactInfo' has a wrong offset!");

// Function Projectile.BaseProjectileReplicationComponent.Server_TryDetectPlayer
// 0x0088 (0x0088 - 0x0000)
struct BaseProjectileReplicationComponent_Server_TryDetectPlayer final
{
public:
	class ABaseProjectile*                        Projectile;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            ImpactInfo;                                        // 0x0008(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize100                 ProjectileLocation;                                // 0x0050(0x0018)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector_NetQuantize10                  ProjectileRotation;                                // 0x0068(0x0018)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetLocationTimestamp;                           // 0x0080(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BaseProjectileReplicationComponent_Server_TryDetectPlayer) == 0x000008, "Wrong alignment on BaseProjectileReplicationComponent_Server_TryDetectPlayer");
static_assert(sizeof(BaseProjectileReplicationComponent_Server_TryDetectPlayer) == 0x000088, "Wrong size on BaseProjectileReplicationComponent_Server_TryDetectPlayer");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, Projectile) == 0x000000, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::Projectile' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, ImpactInfo) == 0x000008, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::ImpactInfo' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, ProjectileLocation) == 0x000050, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::ProjectileLocation' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, ProjectileRotation) == 0x000068, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::ProjectileRotation' has a wrong offset!");
static_assert(offsetof(BaseProjectileReplicationComponent_Server_TryDetectPlayer, TargetLocationTimestamp) == 0x000080, "Member 'BaseProjectileReplicationComponent_Server_TryDetectPlayer::TargetLocationTimestamp' has a wrong offset!");

}

