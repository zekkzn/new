#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BhvrMovieRenderPipeline

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "MovieRenderPipelineCore_classes.hpp"


namespace SDK
{

// Class BhvrMovieRenderPipeline.BhvrCommandLineEncoder
// 0x00A8 (0x00F8 - 0x0050)
class UBhvrCommandLineEncoder final : public UMoviePipelineSetting
{
public:
	struct FFilePath                              EncoderExecutablePath;                             // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoCodec;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioCodec;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 OutputFileExtension;                               // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CommandLineFormat;                                 // 0x0090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VideoInputStringFormat;                            // 0x00A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioInputStringFormat;                            // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EncodeQualitySettings;                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AddtionalCommandLineArgs;                          // 0x00D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeleteSourceFiles;                                // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkipEncodeOnRenderCanceled;                       // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWriteEachFrameDuration;                           // 0x00E2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3[0x15];                                      // 0x00E3(0x0015)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BhvrCommandLineEncoder">();
	}
	static class UBhvrCommandLineEncoder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBhvrCommandLineEncoder>();
	}
};
static_assert(alignof(UBhvrCommandLineEncoder) == 0x000008, "Wrong alignment on UBhvrCommandLineEncoder");
static_assert(sizeof(UBhvrCommandLineEncoder) == 0x0000F8, "Wrong size on UBhvrCommandLineEncoder");
static_assert(offsetof(UBhvrCommandLineEncoder, EncoderExecutablePath) == 0x000050, "Member 'UBhvrCommandLineEncoder::EncoderExecutablePath' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, VideoCodec) == 0x000060, "Member 'UBhvrCommandLineEncoder::VideoCodec' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, AudioCodec) == 0x000070, "Member 'UBhvrCommandLineEncoder::AudioCodec' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, OutputFileExtension) == 0x000080, "Member 'UBhvrCommandLineEncoder::OutputFileExtension' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, CommandLineFormat) == 0x000090, "Member 'UBhvrCommandLineEncoder::CommandLineFormat' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, VideoInputStringFormat) == 0x0000A0, "Member 'UBhvrCommandLineEncoder::VideoInputStringFormat' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, AudioInputStringFormat) == 0x0000B0, "Member 'UBhvrCommandLineEncoder::AudioInputStringFormat' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, EncodeQualitySettings) == 0x0000C0, "Member 'UBhvrCommandLineEncoder::EncodeQualitySettings' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, AddtionalCommandLineArgs) == 0x0000D0, "Member 'UBhvrCommandLineEncoder::AddtionalCommandLineArgs' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, bDeleteSourceFiles) == 0x0000E0, "Member 'UBhvrCommandLineEncoder::bDeleteSourceFiles' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, bSkipEncodeOnRenderCanceled) == 0x0000E1, "Member 'UBhvrCommandLineEncoder::bSkipEncodeOnRenderCanceled' has a wrong offset!");
static_assert(offsetof(UBhvrCommandLineEncoder, bWriteEachFrameDuration) == 0x0000E2, "Member 'UBhvrCommandLineEncoder::bWriteEachFrameDuration' has a wrong offset!");

}

