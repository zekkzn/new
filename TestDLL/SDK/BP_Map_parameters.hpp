#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Map

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_Map.BP_Map_C.SetSharingType
// 0x0001 (0x0001 - 0x0000)
struct BP_Map_C_SetSharingType final
{
public:
	EKnowledgeSharingType                         Value;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_SetSharingType) == 0x000001, "Wrong alignment on BP_Map_C_SetSharingType");
static_assert(sizeof(BP_Map_C_SetSharingType) == 0x000001, "Wrong size on BP_Map_C_SetSharingType");
static_assert(offsetof(BP_Map_C_SetSharingType, Value) == 0x000000, "Member 'BP_Map_C_SetSharingType::Value' has a wrong offset!");

// Function BP_Map.BP_Map_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_Map_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_Map_C_ReceiveEndPlay");
static_assert(sizeof(BP_Map_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_Map_C_ReceiveEndPlay");
static_assert(offsetof(BP_Map_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_Map_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_Map.BP_Map_C.OnPostItemAddonsCreation
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_OnPostItemAddonsCreation final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_OnPostItemAddonsCreation) == 0x000008, "Wrong alignment on BP_Map_C_OnPostItemAddonsCreation");
static_assert(sizeof(BP_Map_C_OnPostItemAddonsCreation) == 0x000008, "Wrong size on BP_Map_C_OnPostItemAddonsCreation");
static_assert(offsetof(BP_Map_C_OnPostItemAddonsCreation, Player) == 0x000000, "Member 'BP_Map_C_OnPostItemAddonsCreation::Player' has a wrong offset!");

// Function BP_Map.BP_Map_C.OnDropped
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_OnDropped final
{
public:
	class ADBDPlayer*                             DroppingPlayer;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_OnDropped) == 0x000008, "Wrong alignment on BP_Map_C_OnDropped");
static_assert(sizeof(BP_Map_C_OnDropped) == 0x000008, "Wrong size on BP_Map_C_OnDropped");
static_assert(offsetof(BP_Map_C_OnDropped, DroppingPlayer) == 0x000000, "Member 'BP_Map_C_OnDropped::DroppingPlayer' has a wrong offset!");

// Function BP_Map.BP_Map_C.OnDestroyedEvent
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_OnDestroyedEvent final
{
public:
	class AActor*                                 DestroyedActor;                                    // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_OnDestroyedEvent) == 0x000008, "Wrong alignment on BP_Map_C_OnDestroyedEvent");
static_assert(sizeof(BP_Map_C_OnDestroyedEvent) == 0x000008, "Wrong size on BP_Map_C_OnDestroyedEvent");
static_assert(offsetof(BP_Map_C_OnDestroyedEvent, DestroyedActor) == 0x000000, "Member 'BP_Map_C_OnDestroyedEvent::DestroyedActor' has a wrong offset!");

// Function BP_Map.BP_Map_C.OnCollectorSet
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_OnCollectorSet final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_OnCollectorSet) == 0x000008, "Wrong alignment on BP_Map_C_OnCollectorSet");
static_assert(sizeof(BP_Map_C_OnCollectorSet) == 0x000008, "Wrong size on BP_Map_C_OnCollectorSet");
static_assert(offsetof(BP_Map_C_OnCollectorSet, Collector) == 0x000000, "Member 'BP_Map_C_OnCollectorSet::Collector' has a wrong offset!");

// Function BP_Map.BP_Map_C.OnActorDetected
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_OnActorDetected final
{
public:
	class AActor*                                 Actor;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_OnActorDetected) == 0x000008, "Wrong alignment on BP_Map_C_OnActorDetected");
static_assert(sizeof(BP_Map_C_OnActorDetected) == 0x000008, "Wrong size on BP_Map_C_OnActorDetected");
static_assert(offsetof(BP_Map_C_OnActorDetected, Actor) == 0x000000, "Member 'BP_Map_C_OnActorDetected::Actor' has a wrong offset!");

// Function BP_Map.BP_Map_C.Multicast_SetDetectionPrimitiveRadius
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_Multicast_SetDetectionPrimitiveRadius final
{
public:
	double                                        Radius;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_Multicast_SetDetectionPrimitiveRadius) == 0x000008, "Wrong alignment on BP_Map_C_Multicast_SetDetectionPrimitiveRadius");
static_assert(sizeof(BP_Map_C_Multicast_SetDetectionPrimitiveRadius) == 0x000008, "Wrong size on BP_Map_C_Multicast_SetDetectionPrimitiveRadius");
static_assert(offsetof(BP_Map_C_Multicast_SetDetectionPrimitiveRadius, Radius) == 0x000000, "Member 'BP_Map_C_Multicast_SetDetectionPrimitiveRadius::Radius' has a wrong offset!");

// Function BP_Map.BP_Map_C.InitSharing
// 0x0001 (0x0001 - 0x0000)
struct BP_Map_C_InitSharing final
{
public:
	bool                                          CallFunc_HasGameplayModifierFlag_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_InitSharing) == 0x000001, "Wrong alignment on BP_Map_C_InitSharing");
static_assert(sizeof(BP_Map_C_InitSharing) == 0x000001, "Wrong size on BP_Map_C_InitSharing");
static_assert(offsetof(BP_Map_C_InitSharing, CallFunc_HasGameplayModifierFlag_ReturnValue) == 0x000000, "Member 'BP_Map_C_InitSharing::CallFunc_HasGameplayModifierFlag_ReturnValue' has a wrong offset!");

// Function BP_Map.BP_Map_C.InitRange
// 0x0018 (0x0018 - 0x0000)
struct BP_Map_C_InitRange final
{
public:
	float                                         CallFunc_GetTunableValue_ReturnValue;              // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetModifierMax_ReturnValue;               // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Add_FloatFloat_ReturnValue;               // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Multicast_SetDetectionPrimitiveRadius_Radius_ImplicitCast; // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_InitRange) == 0x000008, "Wrong alignment on BP_Map_C_InitRange");
static_assert(sizeof(BP_Map_C_InitRange) == 0x000018, "Wrong size on BP_Map_C_InitRange");
static_assert(offsetof(BP_Map_C_InitRange, CallFunc_GetTunableValue_ReturnValue) == 0x000000, "Member 'BP_Map_C_InitRange::CallFunc_GetTunableValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_InitRange, CallFunc_GetModifierMax_ReturnValue) == 0x000004, "Member 'BP_Map_C_InitRange::CallFunc_GetModifierMax_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_InitRange, CallFunc_Add_FloatFloat_ReturnValue) == 0x000008, "Member 'BP_Map_C_InitRange::CallFunc_Add_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_InitRange, CallFunc_Multicast_SetDetectionPrimitiveRadius_Radius_ImplicitCast) == 0x000010, "Member 'BP_Map_C_InitRange::CallFunc_Multicast_SetDetectionPrimitiveRadius_Radius_ImplicitCast' has a wrong offset!");

// Function BP_Map.BP_Map_C.InitCategories
// 0x0003 (0x0003 - 0x0000)
struct BP_Map_C_InitCategories final
{
public:
	bool                                          CallFunc_HasGameplayModifierFlag_ReturnValue;      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasGameplayModifierFlag_ReturnValue_1;    // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasGameplayModifierFlag_ReturnValue_2;    // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_InitCategories) == 0x000001, "Wrong alignment on BP_Map_C_InitCategories");
static_assert(sizeof(BP_Map_C_InitCategories) == 0x000003, "Wrong size on BP_Map_C_InitCategories");
static_assert(offsetof(BP_Map_C_InitCategories, CallFunc_HasGameplayModifierFlag_ReturnValue) == 0x000000, "Member 'BP_Map_C_InitCategories::CallFunc_HasGameplayModifierFlag_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_InitCategories, CallFunc_HasGameplayModifierFlag_ReturnValue_1) == 0x000001, "Member 'BP_Map_C_InitCategories::CallFunc_HasGameplayModifierFlag_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Map_C_InitCategories, CallFunc_HasGameplayModifierFlag_ReturnValue_2) == 0x000002, "Member 'BP_Map_C_InitCategories::CallFunc_HasGameplayModifierFlag_ReturnValue_2' has a wrong offset!");

// Function BP_Map.BP_Map_C.ExecuteUbergraph_BP_Map
// 0x0170 (0x0170 - 0x0000)
struct BP_Map_C_ExecuteUbergraph_BP_Map final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             K2Node_Event_collector;                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADBDPlayer*                             K2Node_Event_droppingPlayer;                       // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDBDGameInstance*                       CallFunc_GetGameInstance_AsDBDGame_Instance;       // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADBDGameState*                          CallFunc_GetGameState_AsDBDGame_State;             // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLevelReadyToPlay_ReturnValue;           // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             CallFunc_GetOwningPlayer_AsDBDPlayer;              // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 K2Node_CustomEvent_actor;                          // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class FString                                 CallFunc_GetPathName_ReturnValue;                  // 0x0048(0x0010)(ZeroConstructor, HasGetValueTypeHash)
	bool                                          CallFunc_Authority_Add_ReturnValue;                // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Temp_struct_Variable;                              // 0x0060(0x0060)(ConstParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 K2Node_CustomEvent_DestroyedActor;                 // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_AddComponent_ReturnValue;                 // 0x00C8(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        K2Node_CustomEvent_Radius;                         // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class ADBDPlayer*                             K2Node_Event_player;                               // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_1;               // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E1[0x3];                                       // 0x00E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x00E4(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* DestroyedActor)> K2Node_CreateDelegate_OutputDelegate;              // 0x00F8(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(class AActor* Actor)>          K2Node_CreateDelegate_OutputDelegate_1;            // 0x010C(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0120(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FScoreEventData                        K2Node_MakeStruct_ScoreEventData;                  // 0x0128(0x0018)(NoDestructor)
	bool                                          K2Node_ComponentBoundEvent_Empty;                  // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0148(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0160(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue_2;               // 0x0168(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0169(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_16A[0x2];                                      // 0x016A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast; // 0x016C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_ExecuteUbergraph_BP_Map) == 0x000010, "Wrong alignment on BP_Map_C_ExecuteUbergraph_BP_Map");
static_assert(sizeof(BP_Map_C_ExecuteUbergraph_BP_Map) == 0x000170, "Wrong size on BP_Map_C_ExecuteUbergraph_BP_Map");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, EntryPoint) == 0x000000, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_HasAuthority_ReturnValue) == 0x000004, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_Event_collector) == 0x000008, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_Event_collector' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_Event_droppingPlayer) == 0x000010, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_Event_droppingPlayer' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_GetGameInstance_AsDBDGame_Instance) == 0x000018, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_GetGameInstance_AsDBDGame_Instance' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_GetGameState_AsDBDGame_State) == 0x000020, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_GetGameState_AsDBDGame_State' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_IsLevelReadyToPlay_ReturnValue) == 0x000028, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_IsLevelReadyToPlay_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_GetOwningPlayer_AsDBDPlayer) == 0x000030, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_GetOwningPlayer_AsDBDPlayer' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_IsValid_ReturnValue) == 0x000038, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_CustomEvent_actor) == 0x000040, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_CustomEvent_actor' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_GetPathName_ReturnValue) == 0x000048, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_GetPathName_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_Authority_Add_ReturnValue) == 0x000058, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_Authority_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, Temp_struct_Variable) == 0x000060, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_CustomEvent_DestroyedActor) == 0x0000C0, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_CustomEvent_DestroyedActor' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_AddComponent_ReturnValue) == 0x0000C8, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_AddComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_CustomEvent_Radius) == 0x0000D0, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_CustomEvent_Radius' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_Event_player) == 0x0000D8, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_HasAuthority_ReturnValue_1) == 0x0000E0, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_HasAuthority_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, Temp_delegate_Variable) == 0x0000E4, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_CreateDelegate_OutputDelegate) == 0x0000F8, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_CreateDelegate_OutputDelegate_1) == 0x00010C, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_PostAkEvent_ReturnValue) == 0x000120, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_MakeStruct_ScoreEventData) == 0x000128, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_MakeStruct_ScoreEventData' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_ComponentBoundEvent_Empty) == 0x000140, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_ComponentBoundEvent_Empty' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000148, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000160, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_HasAuthority_ReturnValue_2) == 0x000168, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_HasAuthority_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, K2Node_Event_EndPlayReason) == 0x000169, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_Map_C_ExecuteUbergraph_BP_Map, CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast) == 0x00016C, "Member 'BP_Map_C_ExecuteUbergraph_BP_Map::CallFunc_SetSphereRadius_InSphereRadius_ImplicitCast' has a wrong offset!");

// Function BP_Map.BP_Map_C.CleanupOnDestroy
// 0x0020 (0x0020 - 0x0000)
struct BP_Map_C_CleanupOnDestroy final
{
public:
	class ADBDPlayer*                             CallFunc_GetOwningPlayer_AsDBDPlayer;              // 0x0000(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDGameInstance*                       CallFunc_GetDBDGameInstance_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_CleanupOnDestroy) == 0x000008, "Wrong alignment on BP_Map_C_CleanupOnDestroy");
static_assert(sizeof(BP_Map_C_CleanupOnDestroy) == 0x000020, "Wrong size on BP_Map_C_CleanupOnDestroy");
static_assert(offsetof(BP_Map_C_CleanupOnDestroy, CallFunc_GetOwningPlayer_AsDBDPlayer) == 0x000000, "Member 'BP_Map_C_CleanupOnDestroy::CallFunc_GetOwningPlayer_AsDBDPlayer' has a wrong offset!");
static_assert(offsetof(BP_Map_C_CleanupOnDestroy, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'BP_Map_C_CleanupOnDestroy::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_CleanupOnDestroy, CallFunc_GetDBDGameInstance_ReturnValue) == 0x000010, "Member 'BP_Map_C_CleanupOnDestroy::CallFunc_GetDBDGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_CleanupOnDestroy, CallFunc_IsValid_ReturnValue_1) == 0x000018, "Member 'BP_Map_C_CleanupOnDestroy::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");

// Function BP_Map.BP_Map_C.BndEvt__Charger_K2Node_ComponentBoundEvent_106_ChargeStateChangeDelegate__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct BP_Map_C_BndEvt__Charger_K2Node_ComponentBoundEvent_106_ChargeStateChangeDelegate__DelegateSignature final
{
public:
	bool                                          Empty;                                             // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_BndEvt__Charger_K2Node_ComponentBoundEvent_106_ChargeStateChangeDelegate__DelegateSignature) == 0x000001, "Wrong alignment on BP_Map_C_BndEvt__Charger_K2Node_ComponentBoundEvent_106_ChargeStateChangeDelegate__DelegateSignature");
static_assert(sizeof(BP_Map_C_BndEvt__Charger_K2Node_ComponentBoundEvent_106_ChargeStateChangeDelegate__DelegateSignature) == 0x000001, "Wrong size on BP_Map_C_BndEvt__Charger_K2Node_ComponentBoundEvent_106_ChargeStateChangeDelegate__DelegateSignature");
static_assert(offsetof(BP_Map_C_BndEvt__Charger_K2Node_ComponentBoundEvent_106_ChargeStateChangeDelegate__DelegateSignature, Empty) == 0x000000, "Member 'BP_Map_C_BndEvt__Charger_K2Node_ComponentBoundEvent_106_ChargeStateChangeDelegate__DelegateSignature::Empty' has a wrong offset!");

// Function BP_Map.BP_Map_C.Authority_AddInitialKnowledge
// 0x0038 (0x0038 - 0x0000)
struct BP_Map_C_Authority_AddInitialKnowledge final
{
public:
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UDBDGameInstance*                       CallFunc_GetGameInstance_AsDBDGame_Instance;       // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMapActorDB*                            CallFunc_GetMapActorDB_ReturnValue;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TArray<EMapActorCategory>                     CallFunc_CopyListMinusCategories_ReturnValue;      // 0x0018(0x0010)(ReferenceParm)
	TArray<class AActor*>                         CallFunc_GetUniqueRandom_ReturnValue;              // 0x0028(0x0010)(ReferenceParm)
};
static_assert(alignof(BP_Map_C_Authority_AddInitialKnowledge) == 0x000008, "Wrong alignment on BP_Map_C_Authority_AddInitialKnowledge");
static_assert(sizeof(BP_Map_C_Authority_AddInitialKnowledge) == 0x000038, "Wrong size on BP_Map_C_Authority_AddInitialKnowledge");
static_assert(offsetof(BP_Map_C_Authority_AddInitialKnowledge, CallFunc_Not_PreBool_ReturnValue) == 0x000000, "Member 'BP_Map_C_Authority_AddInitialKnowledge::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_Authority_AddInitialKnowledge, CallFunc_HasAuthority_ReturnValue) == 0x000001, "Member 'BP_Map_C_Authority_AddInitialKnowledge::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_Authority_AddInitialKnowledge, CallFunc_BooleanAND_ReturnValue) == 0x000002, "Member 'BP_Map_C_Authority_AddInitialKnowledge::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_Authority_AddInitialKnowledge, CallFunc_GetGameInstance_AsDBDGame_Instance) == 0x000008, "Member 'BP_Map_C_Authority_AddInitialKnowledge::CallFunc_GetGameInstance_AsDBDGame_Instance' has a wrong offset!");
static_assert(offsetof(BP_Map_C_Authority_AddInitialKnowledge, CallFunc_GetMapActorDB_ReturnValue) == 0x000010, "Member 'BP_Map_C_Authority_AddInitialKnowledge::CallFunc_GetMapActorDB_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_Authority_AddInitialKnowledge, CallFunc_CopyListMinusCategories_ReturnValue) == 0x000018, "Member 'BP_Map_C_Authority_AddInitialKnowledge::CallFunc_CopyListMinusCategories_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_Authority_AddInitialKnowledge, CallFunc_GetUniqueRandom_ReturnValue) == 0x000028, "Member 'BP_Map_C_Authority_AddInitialKnowledge::CallFunc_GetUniqueRandom_ReturnValue' has a wrong offset!");

// Function BP_Map.BP_Map_C.AddUniqueCategory
// 0x0020 (0x0020 - 0x0000)
struct BP_Map_C_AddUniqueCategory final
{
public:
	TArray<EMapActorCategory>                     TargetArray;                                       // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	EMapActorCategory                             Param_Category;                                    // 0x0010(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Array_Find_ReturnValue;                   // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Add_ReturnValue;                    // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_IntInt_ReturnValue;            // 0x001C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_AddUniqueCategory) == 0x000008, "Wrong alignment on BP_Map_C_AddUniqueCategory");
static_assert(sizeof(BP_Map_C_AddUniqueCategory) == 0x000020, "Wrong size on BP_Map_C_AddUniqueCategory");
static_assert(offsetof(BP_Map_C_AddUniqueCategory, TargetArray) == 0x000000, "Member 'BP_Map_C_AddUniqueCategory::TargetArray' has a wrong offset!");
static_assert(offsetof(BP_Map_C_AddUniqueCategory, Param_Category) == 0x000010, "Member 'BP_Map_C_AddUniqueCategory::Param_Category' has a wrong offset!");
static_assert(offsetof(BP_Map_C_AddUniqueCategory, CallFunc_Array_Find_ReturnValue) == 0x000014, "Member 'BP_Map_C_AddUniqueCategory::CallFunc_Array_Find_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_AddUniqueCategory, CallFunc_Array_Add_ReturnValue) == 0x000018, "Member 'BP_Map_C_AddUniqueCategory::CallFunc_Array_Add_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_AddUniqueCategory, CallFunc_EqualEqual_IntInt_ReturnValue) == 0x00001C, "Member 'BP_Map_C_AddUniqueCategory::CallFunc_EqualEqual_IntInt_ReturnValue' has a wrong offset!");

// Function BP_Map.BP_Map_C.GetUsePercentLeft
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_GetUsePercentLeft final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_GetNormalizedEnergyLevel_ReturnValue;     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_GetUsePercentLeft) == 0x000004, "Wrong alignment on BP_Map_C_GetUsePercentLeft");
static_assert(sizeof(BP_Map_C_GetUsePercentLeft) == 0x000008, "Wrong size on BP_Map_C_GetUsePercentLeft");
static_assert(offsetof(BP_Map_C_GetUsePercentLeft, ReturnValue) == 0x000000, "Member 'BP_Map_C_GetUsePercentLeft::ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetUsePercentLeft, CallFunc_GetNormalizedEnergyLevel_ReturnValue) == 0x000004, "Member 'BP_Map_C_GetUsePercentLeft::CallFunc_GetNormalizedEnergyLevel_ReturnValue' has a wrong offset!");

// Function BP_Map.BP_Map_C.GetOwningPlayer
// 0x0020 (0x0020 - 0x0000)
struct BP_Map_C_GetOwningPlayer final
{
public:
	class ADBDPlayer*                             AsDBDPlayer;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwner_ReturnValue;                     // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADBDPlayer*                             K2Node_DynamicCast_AsDBDPlayer;                    // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_GetOwningPlayer) == 0x000008, "Wrong alignment on BP_Map_C_GetOwningPlayer");
static_assert(sizeof(BP_Map_C_GetOwningPlayer) == 0x000020, "Wrong size on BP_Map_C_GetOwningPlayer");
static_assert(offsetof(BP_Map_C_GetOwningPlayer, AsDBDPlayer) == 0x000000, "Member 'BP_Map_C_GetOwningPlayer::AsDBDPlayer' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetOwningPlayer, CallFunc_GetOwner_ReturnValue) == 0x000008, "Member 'BP_Map_C_GetOwningPlayer::CallFunc_GetOwner_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetOwningPlayer, K2Node_DynamicCast_AsDBDPlayer) == 0x000010, "Member 'BP_Map_C_GetOwningPlayer::K2Node_DynamicCast_AsDBDPlayer' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetOwningPlayer, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Map_C_GetOwningPlayer::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Map.BP_Map_C.GetGameState
// 0x0020 (0x0020 - 0x0000)
struct BP_Map_C_GetGameState final
{
public:
	class ADBDGameState*                          AsDBDGame_State;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADBDGameState*                          K2Node_DynamicCast_AsDBDGame_State;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_GetGameState) == 0x000008, "Wrong alignment on BP_Map_C_GetGameState");
static_assert(sizeof(BP_Map_C_GetGameState) == 0x000020, "Wrong size on BP_Map_C_GetGameState");
static_assert(offsetof(BP_Map_C_GetGameState, AsDBDGame_State) == 0x000000, "Member 'BP_Map_C_GetGameState::AsDBDGame_State' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetGameState, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BP_Map_C_GetGameState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetGameState, K2Node_DynamicCast_AsDBDGame_State) == 0x000010, "Member 'BP_Map_C_GetGameState::K2Node_DynamicCast_AsDBDGame_State' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetGameState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Map_C_GetGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Map.BP_Map_C.GetGameInstance
// 0x0020 (0x0020 - 0x0000)
struct BP_Map_C_GetGameInstance final
{
public:
	class UDBDGameInstance*                       AsDBDGame_Instance;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDBDGameInstance*                       K2Node_DynamicCast_AsDBDGame_Instance;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_GetGameInstance) == 0x000008, "Wrong alignment on BP_Map_C_GetGameInstance");
static_assert(sizeof(BP_Map_C_GetGameInstance) == 0x000020, "Wrong size on BP_Map_C_GetGameInstance");
static_assert(offsetof(BP_Map_C_GetGameInstance, AsDBDGame_Instance) == 0x000000, "Member 'BP_Map_C_GetGameInstance::AsDBDGame_Instance' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetGameInstance, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'BP_Map_C_GetGameInstance::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetGameInstance, K2Node_DynamicCast_AsDBDGame_Instance) == 0x000010, "Member 'BP_Map_C_GetGameInstance::K2Node_DynamicCast_AsDBDGame_Instance' has a wrong offset!");
static_assert(offsetof(BP_Map_C_GetGameInstance, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Map_C_GetGameInstance::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Map.BP_Map_C.GetChargerComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_GetChargerComponent final
{
public:
	class UChargerComponent*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_GetChargerComponent) == 0x000008, "Wrong alignment on BP_Map_C_GetChargerComponent");
static_assert(sizeof(BP_Map_C_GetChargerComponent) == 0x000008, "Wrong size on BP_Map_C_GetChargerComponent");
static_assert(offsetof(BP_Map_C_GetChargerComponent, ReturnValue) == 0x000000, "Member 'BP_Map_C_GetChargerComponent::ReturnValue' has a wrong offset!");

// Function BP_Map.BP_Map_C.GetChargeableComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_GetChargeableComponent final
{
public:
	class UChargeableComponent*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_GetChargeableComponent) == 0x000008, "Wrong alignment on BP_Map_C_GetChargeableComponent");
static_assert(sizeof(BP_Map_C_GetChargeableComponent) == 0x000008, "Wrong size on BP_Map_C_GetChargeableComponent");
static_assert(offsetof(BP_Map_C_GetChargeableComponent, ReturnValue) == 0x000000, "Member 'BP_Map_C_GetChargeableComponent::ReturnValue' has a wrong offset!");

// Function BP_Map.BP_Map_C.GetActorKnowledgeCollection
// 0x0008 (0x0008 - 0x0000)
struct BP_Map_C_GetActorKnowledgeCollection final
{
public:
	class UActorKnowledgeCollection*              ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Map_C_GetActorKnowledgeCollection) == 0x000008, "Wrong alignment on BP_Map_C_GetActorKnowledgeCollection");
static_assert(sizeof(BP_Map_C_GetActorKnowledgeCollection) == 0x000008, "Wrong size on BP_Map_C_GetActorKnowledgeCollection");
static_assert(offsetof(BP_Map_C_GetActorKnowledgeCollection, ReturnValue) == 0x000000, "Member 'BP_Map_C_GetActorKnowledgeCollection::ReturnValue' has a wrong offset!");

}

