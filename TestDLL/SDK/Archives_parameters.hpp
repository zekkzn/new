#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Archives

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DBDSharedTypes_structs.hpp"


namespace SDK::Params
{

// Function Archives.BloodPointsQEEvaluator.OnGameStatsCalculated
// 0x0040 (0x0040 - 0x0000)
struct BloodPointsQEEvaluator_OnGameStatsCalculated final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BloodPointsQEEvaluator_OnGameStatsCalculated) == 0x000008, "Wrong alignment on BloodPointsQEEvaluator_OnGameStatsCalculated");
static_assert(sizeof(BloodPointsQEEvaluator_OnGameStatsCalculated) == 0x000040, "Wrong size on BloodPointsQEEvaluator_OnGameStatsCalculated");
static_assert(offsetof(BloodPointsQEEvaluator_OnGameStatsCalculated, GameEventType) == 0x000000, "Member 'BloodPointsQEEvaluator_OnGameStatsCalculated::GameEventType' has a wrong offset!");
static_assert(offsetof(BloodPointsQEEvaluator_OnGameStatsCalculated, GameEventData) == 0x000010, "Member 'BloodPointsQEEvaluator_OnGameStatsCalculated::GameEventData' has a wrong offset!");

// Function Archives.AfterExitOpenQEEvaluator.OnExitGateOpened
// 0x0040 (0x0040 - 0x0000)
struct AfterExitOpenQEEvaluator_OnExitGateOpened final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(AfterExitOpenQEEvaluator_OnExitGateOpened) == 0x000008, "Wrong alignment on AfterExitOpenQEEvaluator_OnExitGateOpened");
static_assert(sizeof(AfterExitOpenQEEvaluator_OnExitGateOpened) == 0x000040, "Wrong size on AfterExitOpenQEEvaluator_OnExitGateOpened");
static_assert(offsetof(AfterExitOpenQEEvaluator_OnExitGateOpened, GameEventType) == 0x000000, "Member 'AfterExitOpenQEEvaluator_OnExitGateOpened::GameEventType' has a wrong offset!");
static_assert(offsetof(AfterExitOpenQEEvaluator_OnExitGateOpened, GameEventData) == 0x000010, "Member 'AfterExitOpenQEEvaluator_OnExitGateOpened::GameEventData' has a wrong offset!");

// Function Archives.ChaseInBasementQEEvaluator.OnChaseEnd
// 0x0040 (0x0040 - 0x0000)
struct ChaseInBasementQEEvaluator_OnChaseEnd final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseInBasementQEEvaluator_OnChaseEnd) == 0x000008, "Wrong alignment on ChaseInBasementQEEvaluator_OnChaseEnd");
static_assert(sizeof(ChaseInBasementQEEvaluator_OnChaseEnd) == 0x000040, "Wrong size on ChaseInBasementQEEvaluator_OnChaseEnd");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnChaseEnd, GameEventType) == 0x000000, "Member 'ChaseInBasementQEEvaluator_OnChaseEnd::GameEventType' has a wrong offset!");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnChaseEnd, GameEventData) == 0x000010, "Member 'ChaseInBasementQEEvaluator_OnChaseEnd::GameEventData' has a wrong offset!");

// Function Archives.ChaseInBasementQEEvaluator.OnChaseStart
// 0x0040 (0x0040 - 0x0000)
struct ChaseInBasementQEEvaluator_OnChaseStart final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseInBasementQEEvaluator_OnChaseStart) == 0x000008, "Wrong alignment on ChaseInBasementQEEvaluator_OnChaseStart");
static_assert(sizeof(ChaseInBasementQEEvaluator_OnChaseStart) == 0x000040, "Wrong size on ChaseInBasementQEEvaluator_OnChaseStart");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnChaseStart, GameEventType) == 0x000000, "Member 'ChaseInBasementQEEvaluator_OnChaseStart::GameEventType' has a wrong offset!");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnChaseStart, GameEventData) == 0x000010, "Member 'ChaseInBasementQEEvaluator_OnChaseStart::GameEventData' has a wrong offset!");

// Function Archives.ChaseInBasementQEEvaluator.OnEscapeChase
// 0x0040 (0x0040 - 0x0000)
struct ChaseInBasementQEEvaluator_OnEscapeChase final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChaseInBasementQEEvaluator_OnEscapeChase) == 0x000008, "Wrong alignment on ChaseInBasementQEEvaluator_OnEscapeChase");
static_assert(sizeof(ChaseInBasementQEEvaluator_OnEscapeChase) == 0x000040, "Wrong size on ChaseInBasementQEEvaluator_OnEscapeChase");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnEscapeChase, GameEventType) == 0x000000, "Member 'ChaseInBasementQEEvaluator_OnEscapeChase::GameEventType' has a wrong offset!");
static_assert(offsetof(ChaseInBasementQEEvaluator_OnEscapeChase, GameEventData) == 0x000010, "Member 'ChaseInBasementQEEvaluator_OnEscapeChase::GameEventData' has a wrong offset!");

// Function Archives.ContextualQuestUtilities.PlayerHasAssociatedQuest
// 0x0018 (0x0018 - 0x0000)
struct ContextualQuestUtilities_PlayerHasAssociatedQuest final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialBehaviourId;                                // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualQuestUtilities_PlayerHasAssociatedQuest) == 0x000008, "Wrong alignment on ContextualQuestUtilities_PlayerHasAssociatedQuest");
static_assert(sizeof(ContextualQuestUtilities_PlayerHasAssociatedQuest) == 0x000018, "Wrong size on ContextualQuestUtilities_PlayerHasAssociatedQuest");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasAssociatedQuest, Player) == 0x000000, "Member 'ContextualQuestUtilities_PlayerHasAssociatedQuest::Player' has a wrong offset!");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasAssociatedQuest, SpecialBehaviourId) == 0x000008, "Member 'ContextualQuestUtilities_PlayerHasAssociatedQuest::SpecialBehaviourId' has a wrong offset!");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasAssociatedQuest, ReturnValue) == 0x000014, "Member 'ContextualQuestUtilities_PlayerHasAssociatedQuest::ReturnValue' has a wrong offset!");

// Function Archives.ContextualQuestUtilities.PlayerHasToCompleteAssociatedQuest
// 0x0018 (0x0018 - 0x0000)
struct ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpecialBehaviourId;                                // 0x0008(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0014(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest) == 0x000008, "Wrong alignment on ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest");
static_assert(sizeof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest) == 0x000018, "Wrong size on ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest, Player) == 0x000000, "Member 'ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest::Player' has a wrong offset!");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest, SpecialBehaviourId) == 0x000008, "Member 'ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest::SpecialBehaviourId' has a wrong offset!");
static_assert(offsetof(ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest, ReturnValue) == 0x000014, "Member 'ContextualQuestUtilities_PlayerHasToCompleteAssociatedQuest::ReturnValue' has a wrong offset!");

// Function Archives.DoBeforeEscapeQEEvaluator.OnEscaped
// 0x0040 (0x0040 - 0x0000)
struct DoBeforeEscapeQEEvaluator_OnEscaped final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoBeforeEscapeQEEvaluator_OnEscaped) == 0x000008, "Wrong alignment on DoBeforeEscapeQEEvaluator_OnEscaped");
static_assert(sizeof(DoBeforeEscapeQEEvaluator_OnEscaped) == 0x000040, "Wrong size on DoBeforeEscapeQEEvaluator_OnEscaped");
static_assert(offsetof(DoBeforeEscapeQEEvaluator_OnEscaped, GameEventType) == 0x000000, "Member 'DoBeforeEscapeQEEvaluator_OnEscaped::GameEventType' has a wrong offset!");
static_assert(offsetof(DoBeforeEscapeQEEvaluator_OnEscaped, GameEventData) == 0x000010, "Member 'DoBeforeEscapeQEEvaluator_OnEscaped::GameEventData' has a wrong offset!");

// Function Archives.DoBeforeHookQEEvaluator.OnHooked
// 0x0040 (0x0040 - 0x0000)
struct DoBeforeHookQEEvaluator_OnHooked final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DoBeforeHookQEEvaluator_OnHooked) == 0x000008, "Wrong alignment on DoBeforeHookQEEvaluator_OnHooked");
static_assert(sizeof(DoBeforeHookQEEvaluator_OnHooked) == 0x000040, "Wrong size on DoBeforeHookQEEvaluator_OnHooked");
static_assert(offsetof(DoBeforeHookQEEvaluator_OnHooked, GameEventType) == 0x000000, "Member 'DoBeforeHookQEEvaluator_OnHooked::GameEventType' has a wrong offset!");
static_assert(offsetof(DoBeforeHookQEEvaluator_OnHooked, GameEventData) == 0x000010, "Member 'DoBeforeHookQEEvaluator_OnHooked::GameEventData' has a wrong offset!");

// Function Archives.DuringEndGameCollapseQEEvaluator.OnEndGameCollapseStart
// 0x0040 (0x0040 - 0x0000)
struct DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart) == 0x000008, "Wrong alignment on DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart");
static_assert(sizeof(DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart) == 0x000040, "Wrong size on DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart");
static_assert(offsetof(DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart, GameEventType) == 0x000000, "Member 'DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart::GameEventType' has a wrong offset!");
static_assert(offsetof(DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart, GameEventData) == 0x000010, "Member 'DuringEndGameCollapseQEEvaluator_OnEndGameCollapseStart::GameEventData' has a wrong offset!");

// Function Archives.EarnEmblemQualityQEEvaluator.OnFinishedPlaying
// 0x0040 (0x0040 - 0x0000)
struct EarnEmblemQualityQEEvaluator_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EarnEmblemQualityQEEvaluator_OnFinishedPlaying) == 0x000008, "Wrong alignment on EarnEmblemQualityQEEvaluator_OnFinishedPlaying");
static_assert(sizeof(EarnEmblemQualityQEEvaluator_OnFinishedPlaying) == 0x000040, "Wrong size on EarnEmblemQualityQEEvaluator_OnFinishedPlaying");
static_assert(offsetof(EarnEmblemQualityQEEvaluator_OnFinishedPlaying, GameEventType) == 0x000000, "Member 'EarnEmblemQualityQEEvaluator_OnFinishedPlaying::GameEventType' has a wrong offset!");
static_assert(offsetof(EarnEmblemQualityQEEvaluator_OnFinishedPlaying, GameEventData) == 0x000010, "Member 'EarnEmblemQualityQEEvaluator_OnFinishedPlaying::GameEventData' has a wrong offset!");

// Function Archives.EndOfGameQEEvaluator.OnFinishedPlaying
// 0x0040 (0x0040 - 0x0000)
struct EndOfGameQEEvaluator_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndOfGameQEEvaluator_OnFinishedPlaying) == 0x000008, "Wrong alignment on EndOfGameQEEvaluator_OnFinishedPlaying");
static_assert(sizeof(EndOfGameQEEvaluator_OnFinishedPlaying) == 0x000040, "Wrong size on EndOfGameQEEvaluator_OnFinishedPlaying");
static_assert(offsetof(EndOfGameQEEvaluator_OnFinishedPlaying, GameEventType) == 0x000000, "Member 'EndOfGameQEEvaluator_OnFinishedPlaying::GameEventType' has a wrong offset!");
static_assert(offsetof(EndOfGameQEEvaluator_OnFinishedPlaying, GameEventData) == 0x000010, "Member 'EndOfGameQEEvaluator_OnFinishedPlaying::GameEventData' has a wrong offset!");

// Function Archives.EscapeBasementItemQEEvaluator.OnItemCollectedFromChest
// 0x0040 (0x0040 - 0x0000)
struct EscapeBasementItemQEEvaluator_OnItemCollectedFromChest final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBasementItemQEEvaluator_OnItemCollectedFromChest) == 0x000008, "Wrong alignment on EscapeBasementItemQEEvaluator_OnItemCollectedFromChest");
static_assert(sizeof(EscapeBasementItemQEEvaluator_OnItemCollectedFromChest) == 0x000040, "Wrong size on EscapeBasementItemQEEvaluator_OnItemCollectedFromChest");
static_assert(offsetof(EscapeBasementItemQEEvaluator_OnItemCollectedFromChest, GameEventType) == 0x000000, "Member 'EscapeBasementItemQEEvaluator_OnItemCollectedFromChest::GameEventType' has a wrong offset!");
static_assert(offsetof(EscapeBasementItemQEEvaluator_OnItemCollectedFromChest, GameEventData) == 0x000010, "Member 'EscapeBasementItemQEEvaluator_OnItemCollectedFromChest::GameEventData' has a wrong offset!");

// Function Archives.EscapeBasementItemQEEvaluator.OnTargetEscapeFromTrial
// 0x0040 (0x0040 - 0x0000)
struct EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial) == 0x000008, "Wrong alignment on EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial");
static_assert(sizeof(EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial) == 0x000040, "Wrong size on EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial");
static_assert(offsetof(EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial, GameEventType) == 0x000000, "Member 'EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial::GameEventType' has a wrong offset!");
static_assert(offsetof(EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial, GameEventData) == 0x000010, "Member 'EscapeBasementItemQEEvaluator_OnTargetEscapeFromTrial::GameEventData' has a wrong offset!");

// Function Archives.WhiteGlyphSurfaceComponent.Multicast_TeleportGlyph
// 0x0018 (0x0018 - 0x0000)
struct WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph) == 0x000008, "Wrong alignment on WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph");
static_assert(sizeof(WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph) == 0x000018, "Wrong size on WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph");
static_assert(offsetof(WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph, Location) == 0x000000, "Member 'WhiteGlyphSurfaceComponent_Multicast_TeleportGlyph::Location' has a wrong offset!");

// Function Archives.WhiteGlyphSurfaceComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct WhiteGlyphSurfaceComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhiteGlyphSurfaceComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on WhiteGlyphSurfaceComponent_GetOwningGlyph");
static_assert(sizeof(WhiteGlyphSurfaceComponent_GetOwningGlyph) == 0x000008, "Wrong size on WhiteGlyphSurfaceComponent_GetOwningGlyph");
static_assert(offsetof(WhiteGlyphSurfaceComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'WhiteGlyphSurfaceComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

// Function Archives.ExtendItemChargesQEEvaluator.OnItemAdded
// 0x0018 (0x0018 - 0x0000)
struct ExtendItemChargesQEEvaluator_OnItemAdded final
{
public:
	class ACollectable*                           AddedItem;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ADBDPlayer>              Player;                                            // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendItemChargesQEEvaluator_OnItemAdded) == 0x000008, "Wrong alignment on ExtendItemChargesQEEvaluator_OnItemAdded");
static_assert(sizeof(ExtendItemChargesQEEvaluator_OnItemAdded) == 0x000018, "Wrong size on ExtendItemChargesQEEvaluator_OnItemAdded");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemAdded, AddedItem) == 0x000000, "Member 'ExtendItemChargesQEEvaluator_OnItemAdded::AddedItem' has a wrong offset!");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemAdded, InventoryType) == 0x000008, "Member 'ExtendItemChargesQEEvaluator_OnItemAdded::InventoryType' has a wrong offset!");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemAdded, Player) == 0x00000C, "Member 'ExtendItemChargesQEEvaluator_OnItemAdded::Player' has a wrong offset!");

// Function Archives.ExtendItemChargesQEEvaluator.OnItemChargeChanged
// 0x0018 (0x0018 - 0x0000)
struct ExtendItemChargesQEEvaluator_OnItemChargeChanged final
{
public:
	float                                         PreviousCharge;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentCharge;                                     // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ADBDPlayer>              ItemUser;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ACollectable>            Item;                                              // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendItemChargesQEEvaluator_OnItemChargeChanged) == 0x000004, "Wrong alignment on ExtendItemChargesQEEvaluator_OnItemChargeChanged");
static_assert(sizeof(ExtendItemChargesQEEvaluator_OnItemChargeChanged) == 0x000018, "Wrong size on ExtendItemChargesQEEvaluator_OnItemChargeChanged");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemChargeChanged, PreviousCharge) == 0x000000, "Member 'ExtendItemChargesQEEvaluator_OnItemChargeChanged::PreviousCharge' has a wrong offset!");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemChargeChanged, CurrentCharge) == 0x000004, "Member 'ExtendItemChargesQEEvaluator_OnItemChargeChanged::CurrentCharge' has a wrong offset!");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemChargeChanged, ItemUser) == 0x000008, "Member 'ExtendItemChargesQEEvaluator_OnItemChargeChanged::ItemUser' has a wrong offset!");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemChargeChanged, Item) == 0x000010, "Member 'ExtendItemChargesQEEvaluator_OnItemChargeChanged::Item' has a wrong offset!");

// Function Archives.ExtendItemChargesQEEvaluator.OnItemEmpty
// 0x0008 (0x0008 - 0x0000)
struct ExtendItemChargesQEEvaluator_OnItemEmpty final
{
public:
	TWeakObjectPtr<class ADBDPlayer>              ItemUser;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendItemChargesQEEvaluator_OnItemEmpty) == 0x000004, "Wrong alignment on ExtendItemChargesQEEvaluator_OnItemEmpty");
static_assert(sizeof(ExtendItemChargesQEEvaluator_OnItemEmpty) == 0x000008, "Wrong size on ExtendItemChargesQEEvaluator_OnItemEmpty");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemEmpty, ItemUser) == 0x000000, "Member 'ExtendItemChargesQEEvaluator_OnItemEmpty::ItemUser' has a wrong offset!");

// Function Archives.ExtendItemChargesQEEvaluator.OnItemRemoved
// 0x0010 (0x0010 - 0x0000)
struct ExtendItemChargesQEEvaluator_OnItemRemoved final
{
public:
	class ACollectable*                           RemovedItem;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ExtendItemChargesQEEvaluator_OnItemRemoved) == 0x000008, "Wrong alignment on ExtendItemChargesQEEvaluator_OnItemRemoved");
static_assert(sizeof(ExtendItemChargesQEEvaluator_OnItemRemoved) == 0x000010, "Wrong size on ExtendItemChargesQEEvaluator_OnItemRemoved");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemRemoved, RemovedItem) == 0x000000, "Member 'ExtendItemChargesQEEvaluator_OnItemRemoved::RemovedItem' has a wrong offset!");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnItemRemoved, InventoryType) == 0x000008, "Member 'ExtendItemChargesQEEvaluator_OnItemRemoved::InventoryType' has a wrong offset!");

// Function Archives.ExtendItemChargesQEEvaluator.OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct ExtendItemChargesQEEvaluator_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          RemovedPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExtendItemChargesQEEvaluator_OnSurvivorRemoved) == 0x000008, "Wrong alignment on ExtendItemChargesQEEvaluator_OnSurvivorRemoved");
static_assert(sizeof(ExtendItemChargesQEEvaluator_OnSurvivorRemoved) == 0x000008, "Wrong size on ExtendItemChargesQEEvaluator_OnSurvivorRemoved");
static_assert(offsetof(ExtendItemChargesQEEvaluator_OnSurvivorRemoved, RemovedPlayer) == 0x000000, "Member 'ExtendItemChargesQEEvaluator_OnSurvivorRemoved::RemovedPlayer' has a wrong offset!");

// Function Archives.FragileObjectComponent.Authority_OnCamperRemoved
// 0x0008 (0x0008 - 0x0000)
struct FragileObjectComponent_Authority_OnCamperRemoved final
{
public:
	class ACamperPlayer*                          RemovedPlayer;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FragileObjectComponent_Authority_OnCamperRemoved) == 0x000008, "Wrong alignment on FragileObjectComponent_Authority_OnCamperRemoved");
static_assert(sizeof(FragileObjectComponent_Authority_OnCamperRemoved) == 0x000008, "Wrong size on FragileObjectComponent_Authority_OnCamperRemoved");
static_assert(offsetof(FragileObjectComponent_Authority_OnCamperRemoved, RemovedPlayer) == 0x000000, "Member 'FragileObjectComponent_Authority_OnCamperRemoved::RemovedPlayer' has a wrong offset!");

// Function Archives.FragileObjectComponent.GetPreviousCollector
// 0x0008 (0x0008 - 0x0000)
struct FragileObjectComponent_GetPreviousCollector final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FragileObjectComponent_GetPreviousCollector) == 0x000008, "Wrong alignment on FragileObjectComponent_GetPreviousCollector");
static_assert(sizeof(FragileObjectComponent_GetPreviousCollector) == 0x000008, "Wrong size on FragileObjectComponent_GetPreviousCollector");
static_assert(offsetof(FragileObjectComponent_GetPreviousCollector, ReturnValue) == 0x000000, "Member 'FragileObjectComponent_GetPreviousCollector::ReturnValue' has a wrong offset!");

// Function Archives.FragileObjectComponent.IsRepaired
// 0x0001 (0x0001 - 0x0000)
struct FragileObjectComponent_IsRepaired final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FragileObjectComponent_IsRepaired) == 0x000001, "Wrong alignment on FragileObjectComponent_IsRepaired");
static_assert(sizeof(FragileObjectComponent_IsRepaired) == 0x000001, "Wrong size on FragileObjectComponent_IsRepaired");
static_assert(offsetof(FragileObjectComponent_IsRepaired, ReturnValue) == 0x000000, "Member 'FragileObjectComponent_IsRepaired::ReturnValue' has a wrong offset!");

// Function Archives.WhiteGlyphBasementComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct WhiteGlyphBasementComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhiteGlyphBasementComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on WhiteGlyphBasementComponent_GetOwningGlyph");
static_assert(sizeof(WhiteGlyphBasementComponent_GetOwningGlyph) == 0x000008, "Wrong size on WhiteGlyphBasementComponent_GetOwningGlyph");
static_assert(offsetof(WhiteGlyphBasementComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'WhiteGlyphBasementComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

// Function Archives.Glyph.Authority_OnInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct Glyph_Authority_OnInteractionCompleted final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_Authority_OnInteractionCompleted) == 0x000008, "Wrong alignment on Glyph_Authority_OnInteractionCompleted");
static_assert(sizeof(Glyph_Authority_OnInteractionCompleted) == 0x000008, "Wrong size on Glyph_Authority_OnInteractionCompleted");
static_assert(offsetof(Glyph_Authority_OnInteractionCompleted, InteractingPlayer) == 0x000000, "Member 'Glyph_Authority_OnInteractionCompleted::InteractingPlayer' has a wrong offset!");

// Function Archives.Glyph.Authority_OnPlayerBreachedRangeThreshold
// 0x0010 (0x0010 - 0x0000)
struct Glyph_Authority_OnPlayerBreachedRangeThreshold final
{
public:
	bool                                          IsWithinRange;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           TrackedActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_Authority_OnPlayerBreachedRangeThreshold) == 0x000008, "Wrong alignment on Glyph_Authority_OnPlayerBreachedRangeThreshold");
static_assert(sizeof(Glyph_Authority_OnPlayerBreachedRangeThreshold) == 0x000010, "Wrong size on Glyph_Authority_OnPlayerBreachedRangeThreshold");
static_assert(offsetof(Glyph_Authority_OnPlayerBreachedRangeThreshold, IsWithinRange) == 0x000000, "Member 'Glyph_Authority_OnPlayerBreachedRangeThreshold::IsWithinRange' has a wrong offset!");
static_assert(offsetof(Glyph_Authority_OnPlayerBreachedRangeThreshold, TrackedActor) == 0x000008, "Member 'Glyph_Authority_OnPlayerBreachedRangeThreshold::TrackedActor' has a wrong offset!");

// Function Archives.Glyph.Authority_TrackPlayerWithBehaviourID
// 0x0008 (0x0008 - 0x0000)
struct Glyph_Authority_TrackPlayerWithBehaviourID final
{
public:
	class ADBDPlayer*                             DBDPlayer;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_Authority_TrackPlayerWithBehaviourID) == 0x000008, "Wrong alignment on Glyph_Authority_TrackPlayerWithBehaviourID");
static_assert(sizeof(Glyph_Authority_TrackPlayerWithBehaviourID) == 0x000008, "Wrong size on Glyph_Authority_TrackPlayerWithBehaviourID");
static_assert(offsetof(Glyph_Authority_TrackPlayerWithBehaviourID, DBDPlayer) == 0x000000, "Member 'Glyph_Authority_TrackPlayerWithBehaviourID::DBDPlayer' has a wrong offset!");

// Function Archives.Glyph.Cosmetic_OnGlyphVisibilityChanged
// 0x0010 (0x0010 - 0x0000)
struct Glyph_Cosmetic_OnGlyphVisibilityChanged final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Glyph_Cosmetic_OnGlyphVisibilityChanged) == 0x000008, "Wrong alignment on Glyph_Cosmetic_OnGlyphVisibilityChanged");
static_assert(sizeof(Glyph_Cosmetic_OnGlyphVisibilityChanged) == 0x000010, "Wrong size on Glyph_Cosmetic_OnGlyphVisibilityChanged");
static_assert(offsetof(Glyph_Cosmetic_OnGlyphVisibilityChanged, InteractingPlayer) == 0x000000, "Member 'Glyph_Cosmetic_OnGlyphVisibilityChanged::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(Glyph_Cosmetic_OnGlyphVisibilityChanged, IsVisible) == 0x000008, "Member 'Glyph_Cosmetic_OnGlyphVisibilityChanged::IsVisible' has a wrong offset!");

// Function Archives.Glyph.Cosmetic_OnInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct Glyph_Cosmetic_OnInteractionCompleted final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong alignment on Glyph_Cosmetic_OnInteractionCompleted");
static_assert(sizeof(Glyph_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong size on Glyph_Cosmetic_OnInteractionCompleted");
static_assert(offsetof(Glyph_Cosmetic_OnInteractionCompleted, InteractingPlayer) == 0x000000, "Member 'Glyph_Cosmetic_OnInteractionCompleted::InteractingPlayer' has a wrong offset!");

// Function Archives.Glyph.Cosmetic_OnStartedInteracting
// 0x0010 (0x0010 - 0x0000)
struct Glyph_Cosmetic_OnStartedInteracting final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteractionDuration;                               // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Glyph_Cosmetic_OnStartedInteracting) == 0x000008, "Wrong alignment on Glyph_Cosmetic_OnStartedInteracting");
static_assert(sizeof(Glyph_Cosmetic_OnStartedInteracting) == 0x000010, "Wrong size on Glyph_Cosmetic_OnStartedInteracting");
static_assert(offsetof(Glyph_Cosmetic_OnStartedInteracting, InteractingPlayer) == 0x000000, "Member 'Glyph_Cosmetic_OnStartedInteracting::InteractingPlayer' has a wrong offset!");
static_assert(offsetof(Glyph_Cosmetic_OnStartedInteracting, InteractionDuration) == 0x000008, "Member 'Glyph_Cosmetic_OnStartedInteracting::InteractionDuration' has a wrong offset!");

// Function Archives.Glyph.DoesLocalPlayerHaveVisibility
// 0x0001 (0x0001 - 0x0000)
struct Glyph_DoesLocalPlayerHaveVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Glyph_DoesLocalPlayerHaveVisibility) == 0x000001, "Wrong alignment on Glyph_DoesLocalPlayerHaveVisibility");
static_assert(sizeof(Glyph_DoesLocalPlayerHaveVisibility) == 0x000001, "Wrong size on Glyph_DoesLocalPlayerHaveVisibility");
static_assert(offsetof(Glyph_DoesLocalPlayerHaveVisibility, ReturnValue) == 0x000000, "Member 'Glyph_DoesLocalPlayerHaveVisibility::ReturnValue' has a wrong offset!");

// Function Archives.Glyph.IsPlayerOwner
// 0x0010 (0x0010 - 0x0000)
struct Glyph_IsPlayerOwner final
{
public:
	const class ADBDPlayer*                       Player;                                            // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Glyph_IsPlayerOwner) == 0x000008, "Wrong alignment on Glyph_IsPlayerOwner");
static_assert(sizeof(Glyph_IsPlayerOwner) == 0x000010, "Wrong size on Glyph_IsPlayerOwner");
static_assert(offsetof(Glyph_IsPlayerOwner, Player) == 0x000000, "Member 'Glyph_IsPlayerOwner::Player' has a wrong offset!");
static_assert(offsetof(Glyph_IsPlayerOwner, ReturnValue) == 0x000008, "Member 'Glyph_IsPlayerOwner::ReturnValue' has a wrong offset!");

// Function Archives.GreenGlyphActivatorComponent.Authority_EndGameScenarioBegins
// 0x0040 (0x0040 - 0x0000)
struct GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins) == 0x000008, "Wrong alignment on GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins");
static_assert(sizeof(GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins) == 0x000040, "Wrong size on GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins");
static_assert(offsetof(GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins, GameplayTag) == 0x000000, "Member 'GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins::GameplayTag' has a wrong offset!");
static_assert(offsetof(GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins, GameEventData) == 0x000010, "Member 'GreenGlyphActivatorComponent_Authority_EndGameScenarioBegins::GameEventData' has a wrong offset!");

// Function Archives.GreenGlyphActivatorComponent.Authority_OnActivateGlyphEvents
// 0x0040 (0x0040 - 0x0000)
struct GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents) == 0x000008, "Wrong alignment on GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents");
static_assert(sizeof(GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents) == 0x000040, "Wrong size on GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents");
static_assert(offsetof(GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents, GameplayTag) == 0x000000, "Member 'GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents::GameplayTag' has a wrong offset!");
static_assert(offsetof(GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents, GameEventData) == 0x000010, "Member 'GreenGlyphActivatorComponent_Authority_OnActivateGlyphEvents::GameEventData' has a wrong offset!");

// Function Archives.GreenGlyphActivatorComponent.DBD_ShowAuraGreenGlyphsActive
// 0x0001 (0x0001 - 0x0000)
struct GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive) == 0x000001, "Wrong alignment on GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive");
static_assert(sizeof(GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive) == 0x000001, "Wrong size on GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive");
static_assert(offsetof(GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive, Enabled) == 0x000000, "Member 'GreenGlyphActivatorComponent_DBD_ShowAuraGreenGlyphsActive::Enabled' has a wrong offset!");

// Function Archives.GreenGlyphComponent.Multicast_Cheat_ShowAuraGreenGlyphActive
// 0x0002 (0x0002 - 0x0000)
struct GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceShowAura;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive) == 0x000001, "Wrong alignment on GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive");
static_assert(sizeof(GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive) == 0x000002, "Wrong size on GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive");
static_assert(offsetof(GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive, Enabled) == 0x000000, "Member 'GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive::Enabled' has a wrong offset!");
static_assert(offsetof(GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive, bForceShowAura) == 0x000001, "Member 'GreenGlyphComponent_Multicast_Cheat_ShowAuraGreenGlyphActive::bForceShowAura' has a wrong offset!");

// Function Archives.HasInteractedMapTrackedInteractorQEEvaluator.OnActorTrackedByMap
// 0x0010 (0x0010 - 0x0000)
struct HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap final
{
public:
	class UActorKnowledgeCollection*              KnowledgeCollection;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 NewActor;                                          // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap) == 0x000008, "Wrong alignment on HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap");
static_assert(sizeof(HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap) == 0x000010, "Wrong size on HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap");
static_assert(offsetof(HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap, KnowledgeCollection) == 0x000000, "Member 'HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap::KnowledgeCollection' has a wrong offset!");
static_assert(offsetof(HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap, NewActor) == 0x000008, "Member 'HasInteractedMapTrackedInteractorQEEvaluator_OnActorTrackedByMap::NewActor' has a wrong offset!");

// Function Archives.NearKillerQEEvaluator.OnRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct NearKillerQEEvaluator_OnRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearKillerQEEvaluator_OnRangeChanged) == 0x000001, "Wrong alignment on NearKillerQEEvaluator_OnRangeChanged");
static_assert(sizeof(NearKillerQEEvaluator_OnRangeChanged) == 0x000001, "Wrong size on NearKillerQEEvaluator_OnRangeChanged");
static_assert(offsetof(NearKillerQEEvaluator_OnRangeChanged, InRange) == 0x000000, "Member 'NearKillerQEEvaluator_OnRangeChanged::InRange' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnCamperBreakFreeFromHarpoon
// 0x0040 (0x0040 - 0x0000)
struct HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon");
static_assert(sizeof(HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon) == 0x000040, "Wrong size on HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon");
static_assert(offsetof(HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon, GameEventType) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon::GameEventType' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon, GameEventData) == 0x000010, "Member 'HideNearKillerQEEvaluator_OnCamperBreakFreeFromHarpoon::GameEventData' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnChaseEnd
// 0x0010 (0x0010 - 0x0000)
struct HideNearKillerQEEvaluator_OnChaseEnd final
{
public:
	class ADBDPlayer*                             ChasedSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChaseTime;                                         // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HideNearKillerQEEvaluator_OnChaseEnd) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnChaseEnd");
static_assert(sizeof(HideNearKillerQEEvaluator_OnChaseEnd) == 0x000010, "Wrong size on HideNearKillerQEEvaluator_OnChaseEnd");
static_assert(offsetof(HideNearKillerQEEvaluator_OnChaseEnd, ChasedSurvivor) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnChaseEnd::ChasedSurvivor' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnChaseEnd, ChaseTime) == 0x000008, "Member 'HideNearKillerQEEvaluator_OnChaseEnd::ChaseTime' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnChaseStart
// 0x0008 (0x0008 - 0x0000)
struct HideNearKillerQEEvaluator_OnChaseStart final
{
public:
	class ADBDPlayer*                             ChasedSurvivor;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnChaseStart) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnChaseStart");
static_assert(sizeof(HideNearKillerQEEvaluator_OnChaseStart) == 0x000008, "Wrong size on HideNearKillerQEEvaluator_OnChaseStart");
static_assert(offsetof(HideNearKillerQEEvaluator_OnChaseStart, ChasedSurvivor) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnChaseStart::ChasedSurvivor' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnFinishedPlaying
// 0x0040 (0x0040 - 0x0000)
struct HideNearKillerQEEvaluator_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnFinishedPlaying) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnFinishedPlaying");
static_assert(sizeof(HideNearKillerQEEvaluator_OnFinishedPlaying) == 0x000040, "Wrong size on HideNearKillerQEEvaluator_OnFinishedPlaying");
static_assert(offsetof(HideNearKillerQEEvaluator_OnFinishedPlaying, GameEventType) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnFinishedPlaying::GameEventType' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnFinishedPlaying, GameEventData) == 0x000010, "Member 'HideNearKillerQEEvaluator_OnFinishedPlaying::GameEventData' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnHarpoonHit
// 0x0040 (0x0040 - 0x0000)
struct HideNearKillerQEEvaluator_OnHarpoonHit final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnHarpoonHit) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnHarpoonHit");
static_assert(sizeof(HideNearKillerQEEvaluator_OnHarpoonHit) == 0x000040, "Wrong size on HideNearKillerQEEvaluator_OnHarpoonHit");
static_assert(offsetof(HideNearKillerQEEvaluator_OnHarpoonHit, GameEventType) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnHarpoonHit::GameEventType' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnHarpoonHit, GameEventData) == 0x000010, "Member 'HideNearKillerQEEvaluator_OnHarpoonHit::GameEventData' has a wrong offset!");

// Function Archives.HideNearKillerQEEvaluator.OnSlashHarpoonedCamper
// 0x0040 (0x0040 - 0x0000)
struct HideNearKillerQEEvaluator_OnSlashHarpoonedCamper final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HideNearKillerQEEvaluator_OnSlashHarpoonedCamper) == 0x000008, "Wrong alignment on HideNearKillerQEEvaluator_OnSlashHarpoonedCamper");
static_assert(sizeof(HideNearKillerQEEvaluator_OnSlashHarpoonedCamper) == 0x000040, "Wrong size on HideNearKillerQEEvaluator_OnSlashHarpoonedCamper");
static_assert(offsetof(HideNearKillerQEEvaluator_OnSlashHarpoonedCamper, GameEventType) == 0x000000, "Member 'HideNearKillerQEEvaluator_OnSlashHarpoonedCamper::GameEventType' has a wrong offset!");
static_assert(offsetof(HideNearKillerQEEvaluator_OnSlashHarpoonedCamper, GameEventData) == 0x000010, "Member 'HideNearKillerQEEvaluator_OnSlashHarpoonedCamper::GameEventData' has a wrong offset!");

// Function Archives.MaxEventCountQEEvaluator.OnDecrementEventCount
// 0x0040 (0x0040 - 0x0000)
struct MaxEventCountQEEvaluator_OnDecrementEventCount final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaxEventCountQEEvaluator_OnDecrementEventCount) == 0x000008, "Wrong alignment on MaxEventCountQEEvaluator_OnDecrementEventCount");
static_assert(sizeof(MaxEventCountQEEvaluator_OnDecrementEventCount) == 0x000040, "Wrong size on MaxEventCountQEEvaluator_OnDecrementEventCount");
static_assert(offsetof(MaxEventCountQEEvaluator_OnDecrementEventCount, GameEventType) == 0x000000, "Member 'MaxEventCountQEEvaluator_OnDecrementEventCount::GameEventType' has a wrong offset!");
static_assert(offsetof(MaxEventCountQEEvaluator_OnDecrementEventCount, GameEventData) == 0x000010, "Member 'MaxEventCountQEEvaluator_OnDecrementEventCount::GameEventData' has a wrong offset!");

// Function Archives.MaxEventCountQEEvaluator.OnIncrementEventCount
// 0x0040 (0x0040 - 0x0000)
struct MaxEventCountQEEvaluator_OnIncrementEventCount final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaxEventCountQEEvaluator_OnIncrementEventCount) == 0x000008, "Wrong alignment on MaxEventCountQEEvaluator_OnIncrementEventCount");
static_assert(sizeof(MaxEventCountQEEvaluator_OnIncrementEventCount) == 0x000040, "Wrong size on MaxEventCountQEEvaluator_OnIncrementEventCount");
static_assert(offsetof(MaxEventCountQEEvaluator_OnIncrementEventCount, GameEventType) == 0x000000, "Member 'MaxEventCountQEEvaluator_OnIncrementEventCount::GameEventType' has a wrong offset!");
static_assert(offsetof(MaxEventCountQEEvaluator_OnIncrementEventCount, GameEventData) == 0x000010, "Member 'MaxEventCountQEEvaluator_OnIncrementEventCount::GameEventData' has a wrong offset!");

// Function Archives.MaxEventCountQEEvaluator.OnStopEventCount
// 0x0040 (0x0040 - 0x0000)
struct MaxEventCountQEEvaluator_OnStopEventCount final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaxEventCountQEEvaluator_OnStopEventCount) == 0x000008, "Wrong alignment on MaxEventCountQEEvaluator_OnStopEventCount");
static_assert(sizeof(MaxEventCountQEEvaluator_OnStopEventCount) == 0x000040, "Wrong size on MaxEventCountQEEvaluator_OnStopEventCount");
static_assert(offsetof(MaxEventCountQEEvaluator_OnStopEventCount, GameEventType) == 0x000000, "Member 'MaxEventCountQEEvaluator_OnStopEventCount::GameEventType' has a wrong offset!");
static_assert(offsetof(MaxEventCountQEEvaluator_OnStopEventCount, GameEventData) == 0x000010, "Member 'MaxEventCountQEEvaluator_OnStopEventCount::GameEventData' has a wrong offset!");

// Function Archives.SurvivorHookSameTimeQEEvaluator.OnSurvivorHooked
// 0x0040 (0x0040 - 0x0000)
struct SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked) == 0x000008, "Wrong alignment on SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked");
static_assert(sizeof(SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked) == 0x000040, "Wrong size on SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked");
static_assert(offsetof(SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked, GameEventType) == 0x000000, "Member 'SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked::GameEventType' has a wrong offset!");
static_assert(offsetof(SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked, GameEventData) == 0x000010, "Member 'SurvivorHookSameTimeQEEvaluator_OnSurvivorHooked::GameEventData' has a wrong offset!");

// Function Archives.SurvivorHookSameTimeQEEvaluator.OnSurvivorUnhooked
// 0x0040 (0x0040 - 0x0000)
struct SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked) == 0x000008, "Wrong alignment on SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked");
static_assert(sizeof(SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked) == 0x000040, "Wrong size on SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked");
static_assert(offsetof(SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked, GameEventType) == 0x000000, "Member 'SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked::GameEventType' has a wrong offset!");
static_assert(offsetof(SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked, GameEventData) == 0x000010, "Member 'SurvivorHookSameTimeQEEvaluator_OnSurvivorUnhooked::GameEventData' has a wrong offset!");

// Function Archives.InLockerNearKillerQEEvaluator.OnClosetHideEnter
// 0x0040 (0x0040 - 0x0000)
struct InLockerNearKillerQEEvaluator_OnClosetHideEnter final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InLockerNearKillerQEEvaluator_OnClosetHideEnter) == 0x000008, "Wrong alignment on InLockerNearKillerQEEvaluator_OnClosetHideEnter");
static_assert(sizeof(InLockerNearKillerQEEvaluator_OnClosetHideEnter) == 0x000040, "Wrong size on InLockerNearKillerQEEvaluator_OnClosetHideEnter");
static_assert(offsetof(InLockerNearKillerQEEvaluator_OnClosetHideEnter, GameEventType) == 0x000000, "Member 'InLockerNearKillerQEEvaluator_OnClosetHideEnter::GameEventType' has a wrong offset!");
static_assert(offsetof(InLockerNearKillerQEEvaluator_OnClosetHideEnter, GameEventData) == 0x000010, "Member 'InLockerNearKillerQEEvaluator_OnClosetHideEnter::GameEventData' has a wrong offset!");

// Function Archives.InLockerNearKillerQEEvaluator.OnClosetHideExit
// 0x0040 (0x0040 - 0x0000)
struct InLockerNearKillerQEEvaluator_OnClosetHideExit final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(InLockerNearKillerQEEvaluator_OnClosetHideExit) == 0x000008, "Wrong alignment on InLockerNearKillerQEEvaluator_OnClosetHideExit");
static_assert(sizeof(InLockerNearKillerQEEvaluator_OnClosetHideExit) == 0x000040, "Wrong size on InLockerNearKillerQEEvaluator_OnClosetHideExit");
static_assert(offsetof(InLockerNearKillerQEEvaluator_OnClosetHideExit, GameEventType) == 0x000000, "Member 'InLockerNearKillerQEEvaluator_OnClosetHideExit::GameEventType' has a wrong offset!");
static_assert(offsetof(InLockerNearKillerQEEvaluator_OnClosetHideExit, GameEventData) == 0x000010, "Member 'InLockerNearKillerQEEvaluator_OnClosetHideExit::GameEventData' has a wrong offset!");

// Function Archives.ItemConsumedQEEvaluator.OnItemConsumed
// 0x0040 (0x0040 - 0x0000)
struct ItemConsumedQEEvaluator_OnItemConsumed final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemConsumedQEEvaluator_OnItemConsumed) == 0x000008, "Wrong alignment on ItemConsumedQEEvaluator_OnItemConsumed");
static_assert(sizeof(ItemConsumedQEEvaluator_OnItemConsumed) == 0x000040, "Wrong size on ItemConsumedQEEvaluator_OnItemConsumed");
static_assert(offsetof(ItemConsumedQEEvaluator_OnItemConsumed, GameEventType) == 0x000000, "Member 'ItemConsumedQEEvaluator_OnItemConsumed::GameEventType' has a wrong offset!");
static_assert(offsetof(ItemConsumedQEEvaluator_OnItemConsumed, GameEventData) == 0x000010, "Member 'ItemConsumedQEEvaluator_OnItemConsumed::GameEventData' has a wrong offset!");

// Function Archives.ItemUsedQEEvaluator.OnItemUsed
// 0x0040 (0x0040 - 0x0000)
struct ItemUsedQEEvaluator_OnItemUsed final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemUsedQEEvaluator_OnItemUsed) == 0x000008, "Wrong alignment on ItemUsedQEEvaluator_OnItemUsed");
static_assert(sizeof(ItemUsedQEEvaluator_OnItemUsed) == 0x000040, "Wrong size on ItemUsedQEEvaluator_OnItemUsed");
static_assert(offsetof(ItemUsedQEEvaluator_OnItemUsed, GameEventType) == 0x000000, "Member 'ItemUsedQEEvaluator_OnItemUsed::GameEventType' has a wrong offset!");
static_assert(offsetof(ItemUsedQEEvaluator_OnItemUsed, GameEventData) == 0x000010, "Member 'ItemUsedQEEvaluator_OnItemUsed::GameEventData' has a wrong offset!");

// Function Archives.LivingSurvivorsCountQEEvaluator.OnSurvivorAdded
// 0x0008 (0x0008 - 0x0000)
struct LivingSurvivorsCountQEEvaluator_OnSurvivorAdded final
{
public:
	class ACamperPlayer*                          SurvivorAdded;                                     // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LivingSurvivorsCountQEEvaluator_OnSurvivorAdded) == 0x000008, "Wrong alignment on LivingSurvivorsCountQEEvaluator_OnSurvivorAdded");
static_assert(sizeof(LivingSurvivorsCountQEEvaluator_OnSurvivorAdded) == 0x000008, "Wrong size on LivingSurvivorsCountQEEvaluator_OnSurvivorAdded");
static_assert(offsetof(LivingSurvivorsCountQEEvaluator_OnSurvivorAdded, SurvivorAdded) == 0x000000, "Member 'LivingSurvivorsCountQEEvaluator_OnSurvivorAdded::SurvivorAdded' has a wrong offset!");

// Function Archives.LivingSurvivorsCountQEEvaluator.OnSurvivorRemoved
// 0x0008 (0x0008 - 0x0000)
struct LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved final
{
public:
	class ACamperPlayer*                          SurvivorRemoved;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved) == 0x000008, "Wrong alignment on LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved");
static_assert(sizeof(LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved) == 0x000008, "Wrong size on LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved");
static_assert(offsetof(LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved, SurvivorRemoved) == 0x000000, "Member 'LivingSurvivorsCountQEEvaluator_OnSurvivorRemoved::SurvivorRemoved' has a wrong offset!");

// DelegateFunction Archives.NearTrackedActorComponent.OnIsWithinRangeChanged__DelegateSignature
// 0x0010 (0x0010 - 0x0000)
struct NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature final
{
public:
	bool                                          IsWithinRange;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           TrackedActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature) == 0x000008, "Wrong alignment on NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature");
static_assert(sizeof(NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature) == 0x000010, "Wrong size on NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature");
static_assert(offsetof(NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature, IsWithinRange) == 0x000000, "Member 'NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature::IsWithinRange' has a wrong offset!");
static_assert(offsetof(NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature, TrackedActor) == 0x000008, "Member 'NearTrackedActorComponent_OnIsWithinRangeChanged__DelegateSignature::TrackedActor' has a wrong offset!");

// Function Archives.NearTrackedActorComponent.SetDistanceThreshold
// 0x0004 (0x0004 - 0x0000)
struct NearTrackedActorComponent_SetDistanceThreshold final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearTrackedActorComponent_SetDistanceThreshold) == 0x000004, "Wrong alignment on NearTrackedActorComponent_SetDistanceThreshold");
static_assert(sizeof(NearTrackedActorComponent_SetDistanceThreshold) == 0x000004, "Wrong size on NearTrackedActorComponent_SetDistanceThreshold");
static_assert(offsetof(NearTrackedActorComponent_SetDistanceThreshold, Value) == 0x000000, "Member 'NearTrackedActorComponent_SetDistanceThreshold::Value' has a wrong offset!");

// Function Archives.NearTrackedActorComponent.StartTrackingActor
// 0x0008 (0x0008 - 0x0000)
struct NearTrackedActorComponent_StartTrackingActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearTrackedActorComponent_StartTrackingActor) == 0x000008, "Wrong alignment on NearTrackedActorComponent_StartTrackingActor");
static_assert(sizeof(NearTrackedActorComponent_StartTrackingActor) == 0x000008, "Wrong size on NearTrackedActorComponent_StartTrackingActor");
static_assert(offsetof(NearTrackedActorComponent_StartTrackingActor, Actor) == 0x000000, "Member 'NearTrackedActorComponent_StartTrackingActor::Actor' has a wrong offset!");

// Function Archives.NearTrackedActorComponent.StopTrackingActor
// 0x0008 (0x0008 - 0x0000)
struct NearTrackedActorComponent_StopTrackingActor final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NearTrackedActorComponent_StopTrackingActor) == 0x000008, "Wrong alignment on NearTrackedActorComponent_StopTrackingActor");
static_assert(sizeof(NearTrackedActorComponent_StopTrackingActor) == 0x000008, "Wrong size on NearTrackedActorComponent_StopTrackingActor");
static_assert(offsetof(NearTrackedActorComponent_StopTrackingActor, Actor) == 0x000000, "Member 'NearTrackedActorComponent_StopTrackingActor::Actor' has a wrong offset!");

// Function Archives.NearTrackedActorComponent.IsActorWithinRange
// 0x0010 (0x0010 - 0x0000)
struct NearTrackedActorComponent_IsActorWithinRange final
{
public:
	const class AActor*                           Actor;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(NearTrackedActorComponent_IsActorWithinRange) == 0x000008, "Wrong alignment on NearTrackedActorComponent_IsActorWithinRange");
static_assert(sizeof(NearTrackedActorComponent_IsActorWithinRange) == 0x000010, "Wrong size on NearTrackedActorComponent_IsActorWithinRange");
static_assert(offsetof(NearTrackedActorComponent_IsActorWithinRange, Actor) == 0x000000, "Member 'NearTrackedActorComponent_IsActorWithinRange::Actor' has a wrong offset!");
static_assert(offsetof(NearTrackedActorComponent_IsActorWithinRange, ReturnValue) == 0x000008, "Member 'NearTrackedActorComponent_IsActorWithinRange::ReturnValue' has a wrong offset!");

// Function Archives.OrangeGlyphComponent.Cosmetic_ApplyNegativeEffects
// 0x0008 (0x0008 - 0x0000)
struct OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects final
{
public:
	class ADBDPlayer*                             AffectedPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects) == 0x000008, "Wrong alignment on OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects");
static_assert(sizeof(OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects) == 0x000008, "Wrong size on OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects");
static_assert(offsetof(OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects, AffectedPlayer) == 0x000000, "Member 'OrangeGlyphComponent_Cosmetic_ApplyNegativeEffects::AffectedPlayer' has a wrong offset!");

// Function Archives.PinkGlyphComponent.Authority_OnDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct PinkGlyphComponent_Authority_OnDamageStateChanged final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            NewDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_Authority_OnDamageStateChanged) == 0x000001, "Wrong alignment on PinkGlyphComponent_Authority_OnDamageStateChanged");
static_assert(sizeof(PinkGlyphComponent_Authority_OnDamageStateChanged) == 0x000002, "Wrong size on PinkGlyphComponent_Authority_OnDamageStateChanged");
static_assert(offsetof(PinkGlyphComponent_Authority_OnDamageStateChanged, OldDamageState) == 0x000000, "Member 'PinkGlyphComponent_Authority_OnDamageStateChanged::OldDamageState' has a wrong offset!");
static_assert(offsetof(PinkGlyphComponent_Authority_OnDamageStateChanged, NewDamageState) == 0x000001, "Member 'PinkGlyphComponent_Authority_OnDamageStateChanged::NewDamageState' has a wrong offset!");

// Function Archives.PinkGlyphComponent.Authority_OnPlayerBreachedRangeThreshold
// 0x0010 (0x0010 - 0x0000)
struct PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold final
{
public:
	bool                                          IsWithinRange;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           TrackedActor;                                      // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold) == 0x000008, "Wrong alignment on PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold");
static_assert(sizeof(PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold) == 0x000010, "Wrong size on PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold");
static_assert(offsetof(PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold, IsWithinRange) == 0x000000, "Member 'PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold::IsWithinRange' has a wrong offset!");
static_assert(offsetof(PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold, TrackedActor) == 0x000008, "Member 'PinkGlyphComponent_Authority_OnPlayerBreachedRangeThreshold::TrackedActor' has a wrong offset!");

// Function Archives.PinkGlyphComponent.Authority_OnSurvivorInMovementRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged) == 0x000001, "Wrong alignment on PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged");
static_assert(sizeof(PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged) == 0x000001, "Wrong size on PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged");
static_assert(offsetof(PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged, InRange) == 0x000000, "Member 'PinkGlyphComponent_Authority_OnSurvivorInMovementRangeChanged::InRange' has a wrong offset!");

// Function Archives.PinkGlyphComponent.Multicast_TeleportGlyph
// 0x0018 (0x0018 - 0x0000)
struct PinkGlyphComponent_Multicast_TeleportGlyph final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_Multicast_TeleportGlyph) == 0x000008, "Wrong alignment on PinkGlyphComponent_Multicast_TeleportGlyph");
static_assert(sizeof(PinkGlyphComponent_Multicast_TeleportGlyph) == 0x000018, "Wrong size on PinkGlyphComponent_Multicast_TeleportGlyph");
static_assert(offsetof(PinkGlyphComponent_Multicast_TeleportGlyph, Location) == 0x000000, "Member 'PinkGlyphComponent_Multicast_TeleportGlyph::Location' has a wrong offset!");

// DelegateFunction Archives.PinkGlyphComponent.OnMarkProgressChanged__DelegateSignature
// 0x0004 (0x0004 - 0x0000)
struct PinkGlyphComponent_OnMarkProgressChanged__DelegateSignature final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_OnMarkProgressChanged__DelegateSignature) == 0x000004, "Wrong alignment on PinkGlyphComponent_OnMarkProgressChanged__DelegateSignature");
static_assert(sizeof(PinkGlyphComponent_OnMarkProgressChanged__DelegateSignature) == 0x000004, "Wrong size on PinkGlyphComponent_OnMarkProgressChanged__DelegateSignature");
static_assert(offsetof(PinkGlyphComponent_OnMarkProgressChanged__DelegateSignature, Progress) == 0x000000, "Member 'PinkGlyphComponent_OnMarkProgressChanged__DelegateSignature::Progress' has a wrong offset!");

// Function Archives.PinkGlyphComponent.IsMarking
// 0x0001 (0x0001 - 0x0000)
struct PinkGlyphComponent_IsMarking final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PinkGlyphComponent_IsMarking) == 0x000001, "Wrong alignment on PinkGlyphComponent_IsMarking");
static_assert(sizeof(PinkGlyphComponent_IsMarking) == 0x000001, "Wrong size on PinkGlyphComponent_IsMarking");
static_assert(offsetof(PinkGlyphComponent_IsMarking, ReturnValue) == 0x000000, "Member 'PinkGlyphComponent_IsMarking::ReturnValue' has a wrong offset!");

// Function Archives.PreventExitGateOpenQEEvaluator.OnExitGateOpened
// 0x0040 (0x0040 - 0x0000)
struct PreventExitGateOpenQEEvaluator_OnExitGateOpened final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PreventExitGateOpenQEEvaluator_OnExitGateOpened) == 0x000008, "Wrong alignment on PreventExitGateOpenQEEvaluator_OnExitGateOpened");
static_assert(sizeof(PreventExitGateOpenQEEvaluator_OnExitGateOpened) == 0x000040, "Wrong size on PreventExitGateOpenQEEvaluator_OnExitGateOpened");
static_assert(offsetof(PreventExitGateOpenQEEvaluator_OnExitGateOpened, GameEventType) == 0x000000, "Member 'PreventExitGateOpenQEEvaluator_OnExitGateOpened::GameEventType' has a wrong offset!");
static_assert(offsetof(PreventExitGateOpenQEEvaluator_OnExitGateOpened, GameEventData) == 0x000010, "Member 'PreventExitGateOpenQEEvaluator_OnExitGateOpened::GameEventData' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.Authority_GetNextLocation
// 0x0018 (0x0018 - 0x0000)
struct PurpleGlyphComponent_Authority_GetNextLocation final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_Authority_GetNextLocation) == 0x000008, "Wrong alignment on PurpleGlyphComponent_Authority_GetNextLocation");
static_assert(sizeof(PurpleGlyphComponent_Authority_GetNextLocation) == 0x000018, "Wrong size on PurpleGlyphComponent_Authority_GetNextLocation");
static_assert(offsetof(PurpleGlyphComponent_Authority_GetNextLocation, ReturnValue) == 0x000000, "Member 'PurpleGlyphComponent_Authority_GetNextLocation::ReturnValue' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.Authority_MoveTo
// 0x0018 (0x0018 - 0x0000)
struct PurpleGlyphComponent_Authority_MoveTo final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_Authority_MoveTo) == 0x000008, "Wrong alignment on PurpleGlyphComponent_Authority_MoveTo");
static_assert(sizeof(PurpleGlyphComponent_Authority_MoveTo) == 0x000018, "Wrong size on PurpleGlyphComponent_Authority_MoveTo");
static_assert(offsetof(PurpleGlyphComponent_Authority_MoveTo, Location) == 0x000000, "Member 'PurpleGlyphComponent_Authority_MoveTo::Location' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.Authority_StartMoveWithAcceleration
// 0x0018 (0x0018 - 0x0000)
struct PurpleGlyphComponent_Authority_StartMoveWithAcceleration final
{
public:
	struct FVector                                GoalLocation;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_Authority_StartMoveWithAcceleration) == 0x000008, "Wrong alignment on PurpleGlyphComponent_Authority_StartMoveWithAcceleration");
static_assert(sizeof(PurpleGlyphComponent_Authority_StartMoveWithAcceleration) == 0x000018, "Wrong size on PurpleGlyphComponent_Authority_StartMoveWithAcceleration");
static_assert(offsetof(PurpleGlyphComponent_Authority_StartMoveWithAcceleration, GoalLocation) == 0x000000, "Member 'PurpleGlyphComponent_Authority_StartMoveWithAcceleration::GoalLocation' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.GetTrackedPlayer
// 0x0008 (0x0008 - 0x0000)
struct PurpleGlyphComponent_GetTrackedPlayer final
{
public:
	class ADBDPlayer*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_GetTrackedPlayer) == 0x000008, "Wrong alignment on PurpleGlyphComponent_GetTrackedPlayer");
static_assert(sizeof(PurpleGlyphComponent_GetTrackedPlayer) == 0x000008, "Wrong size on PurpleGlyphComponent_GetTrackedPlayer");
static_assert(offsetof(PurpleGlyphComponent_GetTrackedPlayer, ReturnValue) == 0x000000, "Member 'PurpleGlyphComponent_GetTrackedPlayer::ReturnValue' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.ResumeGlyphMovement
// 0x0001 (0x0001 - 0x0000)
struct PurpleGlyphComponent_ResumeGlyphMovement final
{
public:
	bool                                          UseAcceleration;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_ResumeGlyphMovement) == 0x000001, "Wrong alignment on PurpleGlyphComponent_ResumeGlyphMovement");
static_assert(sizeof(PurpleGlyphComponent_ResumeGlyphMovement) == 0x000001, "Wrong size on PurpleGlyphComponent_ResumeGlyphMovement");
static_assert(offsetof(PurpleGlyphComponent_ResumeGlyphMovement, UseAcceleration) == 0x000000, "Member 'PurpleGlyphComponent_ResumeGlyphMovement::UseAcceleration' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.StopGlyphMovement
// 0x0001 (0x0001 - 0x0000)
struct PurpleGlyphComponent_StopGlyphMovement final
{
public:
	bool                                          UseDeceleration;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_StopGlyphMovement) == 0x000001, "Wrong alignment on PurpleGlyphComponent_StopGlyphMovement");
static_assert(sizeof(PurpleGlyphComponent_StopGlyphMovement) == 0x000001, "Wrong size on PurpleGlyphComponent_StopGlyphMovement");
static_assert(offsetof(PurpleGlyphComponent_StopGlyphMovement, UseDeceleration) == 0x000000, "Member 'PurpleGlyphComponent_StopGlyphMovement::UseDeceleration' has a wrong offset!");

// Function Archives.PurpleGlyphComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct PurpleGlyphComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PurpleGlyphComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on PurpleGlyphComponent_GetOwningGlyph");
static_assert(sizeof(PurpleGlyphComponent_GetOwningGlyph) == 0x000008, "Wrong size on PurpleGlyphComponent_GetOwningGlyph");
static_assert(offsetof(PurpleGlyphComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'PurpleGlyphComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

// Function Archives.QuestEventsHandler.DBD_InGameAddProgressionToCurrentQuest
// 0x0004 (0x0004 - 0x0000)
struct QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest final
{
public:
	int32                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest) == 0x000004, "Wrong alignment on QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest");
static_assert(sizeof(QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest) == 0x000004, "Wrong size on QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest");
static_assert(offsetof(QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest, Amount) == 0x000000, "Member 'QuestEventsHandler_DBD_InGameAddProgressionToCurrentQuest::Amount' has a wrong offset!");

// Function Archives.QuestEventsHandler.OnFinishedPlaying
// 0x0040 (0x0040 - 0x0000)
struct QuestEventsHandler_OnFinishedPlaying final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventsHandler_OnFinishedPlaying) == 0x000008, "Wrong alignment on QuestEventsHandler_OnFinishedPlaying");
static_assert(sizeof(QuestEventsHandler_OnFinishedPlaying) == 0x000040, "Wrong size on QuestEventsHandler_OnFinishedPlaying");
static_assert(offsetof(QuestEventsHandler_OnFinishedPlaying, GameEventType) == 0x000000, "Member 'QuestEventsHandler_OnFinishedPlaying::GameEventType' has a wrong offset!");
static_assert(offsetof(QuestEventsHandler_OnFinishedPlaying, GameEventData) == 0x000010, "Member 'QuestEventsHandler_OnFinishedPlaying::GameEventData' has a wrong offset!");

// Function Archives.QuestEventsHandler.OnGameEnded
// 0x0001 (0x0001 - 0x0000)
struct QuestEventsHandler_OnGameEnded final
{
public:
	EEndGameReason                                Reason;                                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventsHandler_OnGameEnded) == 0x000001, "Wrong alignment on QuestEventsHandler_OnGameEnded");
static_assert(sizeof(QuestEventsHandler_OnGameEnded) == 0x000001, "Wrong size on QuestEventsHandler_OnGameEnded");
static_assert(offsetof(QuestEventsHandler_OnGameEnded, Reason) == 0x000000, "Member 'QuestEventsHandler_OnGameEnded::Reason' has a wrong offset!");

// Function Archives.QuestEventsHandler.OnPlayerGameStateChanged
// 0x0010 (0x0010 - 0x0000)
struct QuestEventsHandler_OnPlayerGameStateChanged final
{
public:
	class ADBDPlayerState*                        PlayerState;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameState                                    GameState;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(QuestEventsHandler_OnPlayerGameStateChanged) == 0x000008, "Wrong alignment on QuestEventsHandler_OnPlayerGameStateChanged");
static_assert(sizeof(QuestEventsHandler_OnPlayerGameStateChanged) == 0x000010, "Wrong size on QuestEventsHandler_OnPlayerGameStateChanged");
static_assert(offsetof(QuestEventsHandler_OnPlayerGameStateChanged, PlayerState) == 0x000000, "Member 'QuestEventsHandler_OnPlayerGameStateChanged::PlayerState' has a wrong offset!");
static_assert(offsetof(QuestEventsHandler_OnPlayerGameStateChanged, GameState) == 0x000008, "Member 'QuestEventsHandler_OnPlayerGameStateChanged::GameState' has a wrong offset!");

// Function Archives.QuestEventsHandlerUtilities.InitializeQuestEventHandler
// 0x0008 (0x0008 - 0x0000)
struct QuestEventsHandlerUtilities_InitializeQuestEventHandler final
{
public:
	class UQuestEventsHandler*                    QuestEventsHandler;                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(QuestEventsHandlerUtilities_InitializeQuestEventHandler) == 0x000008, "Wrong alignment on QuestEventsHandlerUtilities_InitializeQuestEventHandler");
static_assert(sizeof(QuestEventsHandlerUtilities_InitializeQuestEventHandler) == 0x000008, "Wrong size on QuestEventsHandlerUtilities_InitializeQuestEventHandler");
static_assert(offsetof(QuestEventsHandlerUtilities_InitializeQuestEventHandler, QuestEventsHandler) == 0x000000, "Member 'QuestEventsHandlerUtilities_InitializeQuestEventHandler::QuestEventsHandler' has a wrong offset!");

// Function Archives.SearchItemRarityQEEvaluator.OnItemSpawnedFromChest
// 0x0040 (0x0040 - 0x0000)
struct SearchItemRarityQEEvaluator_OnItemSpawnedFromChest final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SearchItemRarityQEEvaluator_OnItemSpawnedFromChest) == 0x000008, "Wrong alignment on SearchItemRarityQEEvaluator_OnItemSpawnedFromChest");
static_assert(sizeof(SearchItemRarityQEEvaluator_OnItemSpawnedFromChest) == 0x000040, "Wrong size on SearchItemRarityQEEvaluator_OnItemSpawnedFromChest");
static_assert(offsetof(SearchItemRarityQEEvaluator_OnItemSpawnedFromChest, GameEventType) == 0x000000, "Member 'SearchItemRarityQEEvaluator_OnItemSpawnedFromChest::GameEventType' has a wrong offset!");
static_assert(offsetof(SearchItemRarityQEEvaluator_OnItemSpawnedFromChest, GameEventData) == 0x000010, "Member 'SearchItemRarityQEEvaluator_OnItemSpawnedFromChest::GameEventData' has a wrong offset!");

// Function Archives.WhiteGlyphSpawnerComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct WhiteGlyphSpawnerComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WhiteGlyphSpawnerComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on WhiteGlyphSpawnerComponent_GetOwningGlyph");
static_assert(sizeof(WhiteGlyphSpawnerComponent_GetOwningGlyph) == 0x000008, "Wrong size on WhiteGlyphSpawnerComponent_GetOwningGlyph");
static_assert(offsetof(WhiteGlyphSpawnerComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'WhiteGlyphSpawnerComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

// Function Archives.YellowGlyphComponent.Authority_TeleportGlyph
// 0x0008 (0x0008 - 0x0000)
struct YellowGlyphComponent_Authority_TeleportGlyph final
{
public:
	int32                                         MaxNumberOfTries;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(YellowGlyphComponent_Authority_TeleportGlyph) == 0x000004, "Wrong alignment on YellowGlyphComponent_Authority_TeleportGlyph");
static_assert(sizeof(YellowGlyphComponent_Authority_TeleportGlyph) == 0x000008, "Wrong size on YellowGlyphComponent_Authority_TeleportGlyph");
static_assert(offsetof(YellowGlyphComponent_Authority_TeleportGlyph, MaxNumberOfTries) == 0x000000, "Member 'YellowGlyphComponent_Authority_TeleportGlyph::MaxNumberOfTries' has a wrong offset!");
static_assert(offsetof(YellowGlyphComponent_Authority_TeleportGlyph, ReturnValue) == 0x000004, "Member 'YellowGlyphComponent_Authority_TeleportGlyph::ReturnValue' has a wrong offset!");

// Function Archives.YellowGlyphComponent.Multicast_TeleportGlyph
// 0x0018 (0x0018 - 0x0000)
struct YellowGlyphComponent_Multicast_TeleportGlyph final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(YellowGlyphComponent_Multicast_TeleportGlyph) == 0x000008, "Wrong alignment on YellowGlyphComponent_Multicast_TeleportGlyph");
static_assert(sizeof(YellowGlyphComponent_Multicast_TeleportGlyph) == 0x000018, "Wrong size on YellowGlyphComponent_Multicast_TeleportGlyph");
static_assert(offsetof(YellowGlyphComponent_Multicast_TeleportGlyph, Location) == 0x000000, "Member 'YellowGlyphComponent_Multicast_TeleportGlyph::Location' has a wrong offset!");

// Function Archives.YellowGlyphComponent.GetOwningGlyph
// 0x0008 (0x0008 - 0x0000)
struct YellowGlyphComponent_GetOwningGlyph final
{
public:
	class AGlyph*                                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(YellowGlyphComponent_GetOwningGlyph) == 0x000008, "Wrong alignment on YellowGlyphComponent_GetOwningGlyph");
static_assert(sizeof(YellowGlyphComponent_GetOwningGlyph) == 0x000008, "Wrong size on YellowGlyphComponent_GetOwningGlyph");
static_assert(offsetof(YellowGlyphComponent_GetOwningGlyph, ReturnValue) == 0x000000, "Member 'YellowGlyphComponent_GetOwningGlyph::ReturnValue' has a wrong offset!");

}

