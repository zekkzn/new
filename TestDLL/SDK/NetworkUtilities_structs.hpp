#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NetworkUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "NetCore_structs.hpp"


namespace SDK
{

// Enum NetworkUtilities.ETimerState
// NumValues: 0x0004
enum class ETimerState : uint8
{
	Cleared                                  = 0,
	Started                                  = 1,
	Paused                                   = 2,
	ETimerState_MAX                          = 3,
};

// ScriptStruct NetworkUtilities.Float_NetQuantize8
// 0x0008 (0x0008 - 0x0000)
struct FFloat_NetQuantize8 final
{
public:
	float                                         _value;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FFloat_NetQuantize8) == 0x000004, "Wrong alignment on FFloat_NetQuantize8");
static_assert(sizeof(FFloat_NetQuantize8) == 0x000008, "Wrong size on FFloat_NetQuantize8");
static_assert(offsetof(FFloat_NetQuantize8, _value) == 0x000000, "Member 'FFloat_NetQuantize8::_value' has a wrong offset!");

// ScriptStruct NetworkUtilities.YawAndPitchRotator_NetQuantize16
// 0x0018 (0x0018 - 0x0000)
struct FYawAndPitchRotator_NetQuantize16 final
{
public:
	struct FRotator                               _value;                                            // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FYawAndPitchRotator_NetQuantize16) == 0x000008, "Wrong alignment on FYawAndPitchRotator_NetQuantize16");
static_assert(sizeof(FYawAndPitchRotator_NetQuantize16) == 0x000018, "Wrong size on FYawAndPitchRotator_NetQuantize16");
static_assert(offsetof(FYawAndPitchRotator_NetQuantize16, _value) == 0x000000, "Member 'FYawAndPitchRotator_NetQuantize16::_value' has a wrong offset!");

// ScriptStruct NetworkUtilities.YawAndPitchRotator_NetQuantize32
// 0x0018 (0x0018 - 0x0000)
struct FYawAndPitchRotator_NetQuantize32 final
{
public:
	struct FRotator                               _value;                                            // 0x0000(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FYawAndPitchRotator_NetQuantize32) == 0x000008, "Wrong alignment on FYawAndPitchRotator_NetQuantize32");
static_assert(sizeof(FYawAndPitchRotator_NetQuantize32) == 0x000018, "Wrong size on FYawAndPitchRotator_NetQuantize32");
static_assert(offsetof(FYawAndPitchRotator_NetQuantize32, _value) == 0x000000, "Member 'FYawAndPitchRotator_NetQuantize32::_value' has a wrong offset!");

// ScriptStruct NetworkUtilities.SpeedBasedNetSyncedValue
// 0x0038 (0x0038 - 0x0000)
struct alignas(0x08) FSpeedBasedNetSyncedValue final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _replicatedValue;                                  // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _replicatedSpeed;                                  // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         _replicatedLastUpdateTimestamp;                    // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2C[0xC];                                       // 0x002C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSpeedBasedNetSyncedValue) == 0x000008, "Wrong alignment on FSpeedBasedNetSyncedValue");
static_assert(sizeof(FSpeedBasedNetSyncedValue) == 0x000038, "Wrong size on FSpeedBasedNetSyncedValue");
static_assert(offsetof(FSpeedBasedNetSyncedValue, _replicatedValue) == 0x000018, "Member 'FSpeedBasedNetSyncedValue::_replicatedValue' has a wrong offset!");
static_assert(offsetof(FSpeedBasedNetSyncedValue, _replicatedSpeed) == 0x000020, "Member 'FSpeedBasedNetSyncedValue::_replicatedSpeed' has a wrong offset!");
static_assert(offsetof(FSpeedBasedNetSyncedValue, _replicatedLastUpdateTimestamp) == 0x000028, "Member 'FSpeedBasedNetSyncedValue::_replicatedLastUpdateTimestamp' has a wrong offset!");

// ScriptStruct NetworkUtilities.AssetNetIdRow
// 0x0030 (0x0038 - 0x0008)
struct FAssetNetIdRow final : public FTableRowBase
{
public:
	int32                                         NetId;                                             // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        AssetPath;                                         // 0x0010(0x0028)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FAssetNetIdRow) == 0x000008, "Wrong alignment on FAssetNetIdRow");
static_assert(sizeof(FAssetNetIdRow) == 0x000038, "Wrong size on FAssetNetIdRow");
static_assert(offsetof(FAssetNetIdRow, NetId) == 0x000008, "Member 'FAssetNetIdRow::NetId' has a wrong offset!");
static_assert(offsetof(FAssetNetIdRow, AssetPath) == 0x000010, "Member 'FAssetNetIdRow::AssetPath' has a wrong offset!");

// ScriptStruct NetworkUtilities.ObjectFastArrayEntry
// 0x000C (0x0018 - 0x000C)
struct FObjectFastArrayEntry final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FObjectFastArrayEntry) == 0x000008, "Wrong alignment on FObjectFastArrayEntry");
static_assert(sizeof(FObjectFastArrayEntry) == 0x000018, "Wrong size on FObjectFastArrayEntry");
static_assert(offsetof(FObjectFastArrayEntry, Object) == 0x000010, "Member 'FObjectFastArrayEntry::Object' has a wrong offset!");

// ScriptStruct NetworkUtilities.ReplicationTimerData
// 0x0014 (0x0014 - 0x0000)
struct FReplicationTimerData final
{
public:
	float                                         Timestamp;                                         // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFloat_NetQuantize8                    RemainingTimePercent;                              // 0x0008(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	ETimerState                                   State;                                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FReplicationTimerData) == 0x000004, "Wrong alignment on FReplicationTimerData");
static_assert(sizeof(FReplicationTimerData) == 0x000014, "Wrong size on FReplicationTimerData");
static_assert(offsetof(FReplicationTimerData, Timestamp) == 0x000000, "Member 'FReplicationTimerData::Timestamp' has a wrong offset!");
static_assert(offsetof(FReplicationTimerData, Duration) == 0x000004, "Member 'FReplicationTimerData::Duration' has a wrong offset!");
static_assert(offsetof(FReplicationTimerData, RemainingTimePercent) == 0x000008, "Member 'FReplicationTimerData::RemainingTimePercent' has a wrong offset!");
static_assert(offsetof(FReplicationTimerData, State) == 0x000010, "Member 'FReplicationTimerData::State' has a wrong offset!");

// ScriptStruct NetworkUtilities.ObjectFastArray
// 0x0040 (0x0148 - 0x0108)
struct FObjectFastArray final : public FFastArraySerializer
{
public:
	uint8                                         Pad_108[0x30];                                     // 0x0108(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FObjectFastArrayEntry>          Objects;                                           // 0x0138(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FObjectFastArray) == 0x000008, "Wrong alignment on FObjectFastArray");
static_assert(sizeof(FObjectFastArray) == 0x000148, "Wrong size on FObjectFastArray");
static_assert(offsetof(FObjectFastArray, Objects) == 0x000138, "Member 'FObjectFastArray::Objects' has a wrong offset!");

}

