#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WinterEvent2023

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "WinterEvent2023_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "Projectile_structs.hpp"


namespace SDK::Params
{

// Function WinterEvent2023.MrMarch.Authority_OnJumpscareTriggerZoneEntered
// 0x0110 (0x0110 - 0x0000)
struct MrMarch_Authority_OnJumpscareTriggerZoneEntered final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             SweepResult;                                       // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrMarch_Authority_OnJumpscareTriggerZoneEntered) == 0x000008, "Wrong alignment on MrMarch_Authority_OnJumpscareTriggerZoneEntered");
static_assert(sizeof(MrMarch_Authority_OnJumpscareTriggerZoneEntered) == 0x000110, "Wrong size on MrMarch_Authority_OnJumpscareTriggerZoneEntered");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneEntered, OverlappedComponent) == 0x000000, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneEntered::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneEntered, OtherActor) == 0x000008, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneEntered::OtherActor' has a wrong offset!");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneEntered, OtherComp) == 0x000010, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneEntered::OtherComp' has a wrong offset!");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneEntered, OtherBodyIndex) == 0x000018, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneEntered::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneEntered, bFromSweep) == 0x00001C, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneEntered::bFromSweep' has a wrong offset!");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneEntered, SweepResult) == 0x000020, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneEntered::SweepResult' has a wrong offset!");

// Function WinterEvent2023.MrMarch.Authority_OnJumpscareTriggerZoneExited
// 0x0020 (0x0020 - 0x0000)
struct MrMarch_Authority_OnJumpscareTriggerZoneExited final
{
public:
	class UPrimitiveComponent*                    OverlappedComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MrMarch_Authority_OnJumpscareTriggerZoneExited) == 0x000008, "Wrong alignment on MrMarch_Authority_OnJumpscareTriggerZoneExited");
static_assert(sizeof(MrMarch_Authority_OnJumpscareTriggerZoneExited) == 0x000020, "Wrong size on MrMarch_Authority_OnJumpscareTriggerZoneExited");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneExited, OverlappedComponent) == 0x000000, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneExited::OverlappedComponent' has a wrong offset!");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneExited, OtherActor) == 0x000008, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneExited::OtherActor' has a wrong offset!");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneExited, OtherComp) == 0x000010, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneExited::OtherComp' has a wrong offset!");
static_assert(offsetof(MrMarch_Authority_OnJumpscareTriggerZoneExited, OtherBodyIndex) == 0x000018, "Member 'MrMarch_Authority_OnJumpscareTriggerZoneExited::OtherBodyIndex' has a wrong offset!");

// Function WinterEvent2023.MrMarch.Multicast_OnPlayerJumpscared
// 0x0020 (0x0020 - 0x0000)
struct MrMarch_Multicast_OnPlayerJumpscared final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                JumpscareLocation;                                 // 0x0008(0x0018)(ConstParm, Parm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrMarch_Multicast_OnPlayerJumpscared) == 0x000008, "Wrong alignment on MrMarch_Multicast_OnPlayerJumpscared");
static_assert(sizeof(MrMarch_Multicast_OnPlayerJumpscared) == 0x000020, "Wrong size on MrMarch_Multicast_OnPlayerJumpscared");
static_assert(offsetof(MrMarch_Multicast_OnPlayerJumpscared, Player) == 0x000000, "Member 'MrMarch_Multicast_OnPlayerJumpscared::Player' has a wrong offset!");
static_assert(offsetof(MrMarch_Multicast_OnPlayerJumpscared, JumpscareLocation) == 0x000008, "Member 'MrMarch_Multicast_OnPlayerJumpscared::JumpscareLocation' has a wrong offset!");

// Function WinterEvent2023.MrMarch.OnPlayerJumpscareTriggered
// 0x0020 (0x0020 - 0x0000)
struct MrMarch_OnPlayerJumpscareTriggered final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrMarch_OnPlayerJumpscareTriggered) == 0x000008, "Wrong alignment on MrMarch_OnPlayerJumpscareTriggered");
static_assert(sizeof(MrMarch_OnPlayerJumpscareTriggered) == 0x000020, "Wrong size on MrMarch_OnPlayerJumpscareTriggered");
static_assert(offsetof(MrMarch_OnPlayerJumpscareTriggered, Player) == 0x000000, "Member 'MrMarch_OnPlayerJumpscareTriggered::Player' has a wrong offset!");
static_assert(offsetof(MrMarch_OnPlayerJumpscareTriggered, Location) == 0x000008, "Member 'MrMarch_OnPlayerJumpscareTriggered::Location' has a wrong offset!");

// Function WinterEvent2023.MrMarch.OnRep_MrMarchState
// 0x0001 (0x0001 - 0x0000)
struct MrMarch_OnRep_MrMarchState final
{
public:
	EMrMarchState                                 PreviousState;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MrMarch_OnRep_MrMarchState) == 0x000001, "Wrong alignment on MrMarch_OnRep_MrMarchState");
static_assert(sizeof(MrMarch_OnRep_MrMarchState) == 0x000001, "Wrong size on MrMarch_OnRep_MrMarchState");
static_assert(offsetof(MrMarch_OnRep_MrMarchState, PreviousState) == 0x000000, "Member 'MrMarch_OnRep_MrMarchState::PreviousState' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnCamperPickedUp
// 0x0008 (0x0008 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnCamperPickedUp final
{
public:
	class ADBDPlayer*                             PickedUpPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnCamperPickedUp) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnCamperPickedUp");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnCamperPickedUp) == 0x000008, "Wrong size on SnowballPlayerComponent_Cosmetic_OnCamperPickedUp");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnCamperPickedUp, PickedUpPlayer) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnCamperPickedUp::PickedUpPlayer' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnCamperPickUpEndOrDropped
// 0x0008 (0x0008 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnCamperPickUpEndOrDropped final
{
public:
	class ADBDPlayer*                             PickedUpPlayer;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnCamperPickUpEndOrDropped) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnCamperPickUpEndOrDropped");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnCamperPickUpEndOrDropped) == 0x000008, "Wrong size on SnowballPlayerComponent_Cosmetic_OnCamperPickUpEndOrDropped");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnCamperPickUpEndOrDropped, PickedUpPlayer) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnCamperPickUpEndOrDropped::PickedUpPlayer' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnLocallyObservedChanged
// 0x0010 (0x0010 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnLocallyObservedChanged final
{
public:
	bool                                          IsLocallyObserved;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             OwningPlayer;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnLocallyObservedChanged) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnLocallyObservedChanged");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnLocallyObservedChanged) == 0x000010, "Wrong size on SnowballPlayerComponent_Cosmetic_OnLocallyObservedChanged");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnLocallyObservedChanged, IsLocallyObserved) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnLocallyObservedChanged::IsLocallyObserved' has a wrong offset!");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnLocallyObservedChanged, OwningPlayer) == 0x000008, "Member 'SnowballPlayerComponent_Cosmetic_OnLocallyObservedChanged::OwningPlayer' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnPlayerDiedOrBeingKilled
// 0x0008 (0x0008 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnPlayerDiedOrBeingKilled final
{
public:
	class ADBDPlayer*                             DeadPlayer;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnPlayerDiedOrBeingKilled) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnPlayerDiedOrBeingKilled");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnPlayerDiedOrBeingKilled) == 0x000008, "Wrong size on SnowballPlayerComponent_Cosmetic_OnPlayerDiedOrBeingKilled");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnPlayerDiedOrBeingKilled, DeadPlayer) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnPlayerDiedOrBeingKilled::DeadPlayer' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnPlayerHidden
// 0x0008 (0x0008 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnPlayerHidden final
{
public:
	class ADBDPlayer*                             OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnPlayerHidden) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnPlayerHidden");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnPlayerHidden) == 0x000008, "Wrong size on SnowballPlayerComponent_Cosmetic_OnPlayerHidden");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnPlayerHidden, OwningPlayer) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnPlayerHidden::OwningPlayer' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnPlayerUnhidden
// 0x0008 (0x0008 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnPlayerUnhidden final
{
public:
	class ADBDPlayer*                             OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnPlayerUnhidden) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnPlayerUnhidden");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnPlayerUnhidden) == 0x000008, "Wrong size on SnowballPlayerComponent_Cosmetic_OnPlayerUnhidden");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnPlayerUnhidden, OwningPlayer) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnPlayerUnhidden::OwningPlayer' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnSnowballsDepleted
// 0x0008 (0x0008 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnSnowballsDepleted final
{
public:
	class ADBDPlayer*                             OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnSnowballsDepleted) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnSnowballsDepleted");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnSnowballsDepleted) == 0x000008, "Wrong size on SnowballPlayerComponent_Cosmetic_OnSnowballsDepleted");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnSnowballsDepleted, OwningPlayer) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnSnowballsDepleted::OwningPlayer' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnSnowballThrowStart
// 0x0008 (0x0008 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnSnowballThrowStart final
{
public:
	class ADBDPlayer*                             OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnSnowballThrowStart) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnSnowballThrowStart");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnSnowballThrowStart) == 0x000008, "Wrong size on SnowballPlayerComponent_Cosmetic_OnSnowballThrowStart");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnSnowballThrowStart, OwningPlayer) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnSnowballThrowStart::OwningPlayer' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnThrownSnowballHitCollision
// 0x0050 (0x0050 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitCollision final
{
public:
	class ADBDPlayer*                             OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FImpactInfo                            ImpactInfo;                                        // 0x0008(0x0048)(Parm, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitCollision) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitCollision");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitCollision) == 0x000050, "Wrong size on SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitCollision");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitCollision, OwningPlayer) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitCollision::OwningPlayer' has a wrong offset!");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitCollision, ImpactInfo) == 0x000008, "Member 'SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitCollision::ImpactInfo' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnThrownSnowballHitPlayer
// 0x0010 (0x0010 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitPlayer final
{
public:
	class ADBDPlayer*                             OwningPlayer;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             HitPlayer;                                         // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitPlayer) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitPlayer");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitPlayer) == 0x000010, "Wrong size on SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitPlayer");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitPlayer, OwningPlayer) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitPlayer::OwningPlayer' has a wrong offset!");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitPlayer, HitPlayer) == 0x000008, "Member 'SnowballPlayerComponent_Cosmetic_OnThrownSnowballHitPlayer::HitPlayer' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.Cosmetic_OnVFXVignetteTagAddedOrRemoved
// 0x0010 (0x0010 - 0x0000)
struct SnowballPlayerComponent_Cosmetic_OnVFXVignetteTagAddedOrRemoved final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Added;                                             // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnowballPlayerComponent_Cosmetic_OnVFXVignetteTagAddedOrRemoved) == 0x000008, "Wrong alignment on SnowballPlayerComponent_Cosmetic_OnVFXVignetteTagAddedOrRemoved");
static_assert(sizeof(SnowballPlayerComponent_Cosmetic_OnVFXVignetteTagAddedOrRemoved) == 0x000010, "Wrong size on SnowballPlayerComponent_Cosmetic_OnVFXVignetteTagAddedOrRemoved");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnVFXVignetteTagAddedOrRemoved, Player) == 0x000000, "Member 'SnowballPlayerComponent_Cosmetic_OnVFXVignetteTagAddedOrRemoved::Player' has a wrong offset!");
static_assert(offsetof(SnowballPlayerComponent_Cosmetic_OnVFXVignetteTagAddedOrRemoved, Added) == 0x000008, "Member 'SnowballPlayerComponent_Cosmetic_OnVFXVignetteTagAddedOrRemoved::Added' has a wrong offset!");

// Function WinterEvent2023.SnowballPlayerComponent.OnCamperDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct SnowballPlayerComponent_OnCamperDamageStateChanged final
{
public:
	ECamperDamageState                            OldDamageState;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            NewDamageState;                                    // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnowballPlayerComponent_OnCamperDamageStateChanged) == 0x000001, "Wrong alignment on SnowballPlayerComponent_OnCamperDamageStateChanged");
static_assert(sizeof(SnowballPlayerComponent_OnCamperDamageStateChanged) == 0x000002, "Wrong size on SnowballPlayerComponent_OnCamperDamageStateChanged");
static_assert(offsetof(SnowballPlayerComponent_OnCamperDamageStateChanged, OldDamageState) == 0x000000, "Member 'SnowballPlayerComponent_OnCamperDamageStateChanged::OldDamageState' has a wrong offset!");
static_assert(offsetof(SnowballPlayerComponent_OnCamperDamageStateChanged, NewDamageState) == 0x000001, "Member 'SnowballPlayerComponent_OnCamperDamageStateChanged::NewDamageState' has a wrong offset!");

// Function WinterEvent2023.Snowpile.Cosmetic_OnInteractionCancelled
// 0x0008 (0x0008 - 0x0000)
struct Snowpile_Cosmetic_OnInteractionCancelled final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowpile_Cosmetic_OnInteractionCancelled) == 0x000008, "Wrong alignment on Snowpile_Cosmetic_OnInteractionCancelled");
static_assert(sizeof(Snowpile_Cosmetic_OnInteractionCancelled) == 0x000008, "Wrong size on Snowpile_Cosmetic_OnInteractionCancelled");
static_assert(offsetof(Snowpile_Cosmetic_OnInteractionCancelled, InteractingPlayer) == 0x000000, "Member 'Snowpile_Cosmetic_OnInteractionCancelled::InteractingPlayer' has a wrong offset!");

// Function WinterEvent2023.Snowpile.Cosmetic_OnInteractionCompleted
// 0x0008 (0x0008 - 0x0000)
struct Snowpile_Cosmetic_OnInteractionCompleted final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowpile_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong alignment on Snowpile_Cosmetic_OnInteractionCompleted");
static_assert(sizeof(Snowpile_Cosmetic_OnInteractionCompleted) == 0x000008, "Wrong size on Snowpile_Cosmetic_OnInteractionCompleted");
static_assert(offsetof(Snowpile_Cosmetic_OnInteractionCompleted, InteractingPlayer) == 0x000000, "Member 'Snowpile_Cosmetic_OnInteractionCompleted::InteractingPlayer' has a wrong offset!");

// Function WinterEvent2023.Snowpile.Cosmetic_OnStartedInteracting
// 0x0008 (0x0008 - 0x0000)
struct Snowpile_Cosmetic_OnStartedInteracting final
{
public:
	class ADBDPlayer*                             InteractingPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Snowpile_Cosmetic_OnStartedInteracting) == 0x000008, "Wrong alignment on Snowpile_Cosmetic_OnStartedInteracting");
static_assert(sizeof(Snowpile_Cosmetic_OnStartedInteracting) == 0x000008, "Wrong size on Snowpile_Cosmetic_OnStartedInteracting");
static_assert(offsetof(Snowpile_Cosmetic_OnStartedInteracting, InteractingPlayer) == 0x000000, "Member 'Snowpile_Cosmetic_OnStartedInteracting::InteractingPlayer' has a wrong offset!");

// Function WinterEvent2023.Winter2023EventComponent.DBD_Winter2023SetMaxMrMarchAndPercentChance
// 0x0008 (0x0008 - 0x0000)
struct Winter2023EventComponent_DBD_Winter2023SetMaxMrMarchAndPercentChance final
{
public:
	int32                                         MaxMrMarch;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentChance;                                     // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Winter2023EventComponent_DBD_Winter2023SetMaxMrMarchAndPercentChance) == 0x000004, "Wrong alignment on Winter2023EventComponent_DBD_Winter2023SetMaxMrMarchAndPercentChance");
static_assert(sizeof(Winter2023EventComponent_DBD_Winter2023SetMaxMrMarchAndPercentChance) == 0x000008, "Wrong size on Winter2023EventComponent_DBD_Winter2023SetMaxMrMarchAndPercentChance");
static_assert(offsetof(Winter2023EventComponent_DBD_Winter2023SetMaxMrMarchAndPercentChance, MaxMrMarch) == 0x000000, "Member 'Winter2023EventComponent_DBD_Winter2023SetMaxMrMarchAndPercentChance::MaxMrMarch' has a wrong offset!");
static_assert(offsetof(Winter2023EventComponent_DBD_Winter2023SetMaxMrMarchAndPercentChance, PercentChance) == 0x000004, "Member 'Winter2023EventComponent_DBD_Winter2023SetMaxMrMarchAndPercentChance::PercentChance' has a wrong offset!");

}

