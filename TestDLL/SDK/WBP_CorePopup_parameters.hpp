#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CorePopup

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "UMG_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"


namespace SDK::Params
{

// Function WBP_CorePopup.WBP_CorePopup_C.ShowNotifTutorialPopup
// 0x0090 (0x0090 - 0x0000)
struct WBP_CorePopup_C_ShowNotifTutorialPopup final
{
public:
	struct FNotifTutorialPopupViewData            NotifTutoData;                                     // 0x0000(0x0090)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_CorePopup_C_ShowNotifTutorialPopup) == 0x000008, "Wrong alignment on WBP_CorePopup_C_ShowNotifTutorialPopup");
static_assert(sizeof(WBP_CorePopup_C_ShowNotifTutorialPopup) == 0x000090, "Wrong size on WBP_CorePopup_C_ShowNotifTutorialPopup");
static_assert(offsetof(WBP_CorePopup_C_ShowNotifTutorialPopup, NotifTutoData) == 0x000000, "Member 'WBP_CorePopup_C_ShowNotifTutorialPopup::NotifTutoData' has a wrong offset!");

// Function WBP_CorePopup.WBP_CorePopup_C.SetNotifTitle
// 0x0018 (0x0018 - 0x0000)
struct WBP_CorePopup_C_SetNotifTitle final
{
public:
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0000(0x0018)()
};
static_assert(alignof(WBP_CorePopup_C_SetNotifTitle) == 0x000008, "Wrong alignment on WBP_CorePopup_C_SetNotifTitle");
static_assert(sizeof(WBP_CorePopup_C_SetNotifTitle) == 0x000018, "Wrong size on WBP_CorePopup_C_SetNotifTitle");
static_assert(offsetof(WBP_CorePopup_C_SetNotifTitle, CallFunc_Conv_StringToText_ReturnValue) == 0x000000, "Member 'WBP_CorePopup_C_SetNotifTitle::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WBP_CorePopup.WBP_CorePopup_C.SetNotifMessage
// 0x0018 (0x0018 - 0x0000)
struct WBP_CorePopup_C_SetNotifMessage final
{
public:
	class FText                                   CallFunc_Conv_StringToText_ReturnValue;            // 0x0000(0x0018)()
};
static_assert(alignof(WBP_CorePopup_C_SetNotifMessage) == 0x000008, "Wrong alignment on WBP_CorePopup_C_SetNotifMessage");
static_assert(sizeof(WBP_CorePopup_C_SetNotifMessage) == 0x000018, "Wrong size on WBP_CorePopup_C_SetNotifMessage");
static_assert(offsetof(WBP_CorePopup_C_SetNotifMessage, CallFunc_Conv_StringToText_ReturnValue) == 0x000000, "Member 'WBP_CorePopup_C_SetNotifMessage::CallFunc_Conv_StringToText_ReturnValue' has a wrong offset!");

// Function WBP_CorePopup.WBP_CorePopup_C.SetNotifImage
// 0x0040 (0x0040 - 0x0000)
struct WBP_CorePopup_C_SetNotifImage final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMargin                                K2Node_MakeStruct_Margin;                          // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	struct FMargin                                K2Node_MakeStruct_Margin_1;                        // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue;        // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UVerticalBoxSlot*                       CallFunc_SlotAsVerticalBoxSlot_ReturnValue_1;      // 0x0030(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue;   // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValidSoftObjectReference_ReturnValue_1; // 0x0039(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x003A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePopup_C_SetNotifImage) == 0x000008, "Wrong alignment on WBP_CorePopup_C_SetNotifImage");
static_assert(sizeof(WBP_CorePopup_C_SetNotifImage) == 0x000040, "Wrong size on WBP_CorePopup_C_SetNotifImage");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, Temp_bool_Variable) == 0x000000, "Member 'WBP_CorePopup_C_SetNotifImage::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, Temp_byte_Variable) == 0x000001, "Member 'WBP_CorePopup_C_SetNotifImage::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_CorePopup_C_SetNotifImage::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, K2Node_MakeStruct_Margin) == 0x000004, "Member 'WBP_CorePopup_C_SetNotifImage::K2Node_MakeStruct_Margin' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, K2Node_MakeStruct_Margin_1) == 0x000014, "Member 'WBP_CorePopup_C_SetNotifImage::K2Node_MakeStruct_Margin_1' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, CallFunc_SlotAsVerticalBoxSlot_ReturnValue) == 0x000028, "Member 'WBP_CorePopup_C_SetNotifImage::CallFunc_SlotAsVerticalBoxSlot_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, CallFunc_SlotAsVerticalBoxSlot_ReturnValue_1) == 0x000030, "Member 'WBP_CorePopup_C_SetNotifImage::CallFunc_SlotAsVerticalBoxSlot_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, CallFunc_IsValidSoftObjectReference_ReturnValue) == 0x000038, "Member 'WBP_CorePopup_C_SetNotifImage::CallFunc_IsValidSoftObjectReference_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, CallFunc_IsValidSoftObjectReference_ReturnValue_1) == 0x000039, "Member 'WBP_CorePopup_C_SetNotifImage::CallFunc_IsValidSoftObjectReference_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_SetNotifImage, K2Node_Select_Default) == 0x00003A, "Member 'WBP_CorePopup_C_SetNotifImage::K2Node_Select_Default' has a wrong offset!");

// Function WBP_CorePopup.WBP_CorePopup_C.CheckControlMode
// 0x0001 (0x0001 - 0x0000)
struct WBP_CorePopup_C_CheckControlMode final
{
public:
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePopup_C_CheckControlMode) == 0x000001, "Wrong alignment on WBP_CorePopup_C_CheckControlMode");
static_assert(sizeof(WBP_CorePopup_C_CheckControlMode) == 0x000001, "Wrong size on WBP_CorePopup_C_CheckControlMode");
static_assert(offsetof(WBP_CorePopup_C_CheckControlMode, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000000, "Member 'WBP_CorePopup_C_CheckControlMode::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");

// Function WBP_CorePopup.WBP_CorePopup_C.HideTutorialPopup
// 0x0001 (0x0001 - 0x0000)
struct WBP_CorePopup_C_HideTutorialPopup final
{
public:
	bool                                          PlaySoundEffect;                                   // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CorePopup_C_HideTutorialPopup) == 0x000001, "Wrong alignment on WBP_CorePopup_C_HideTutorialPopup");
static_assert(sizeof(WBP_CorePopup_C_HideTutorialPopup) == 0x000001, "Wrong size on WBP_CorePopup_C_HideTutorialPopup");
static_assert(offsetof(WBP_CorePopup_C_HideTutorialPopup, PlaySoundEffect) == 0x000000, "Member 'WBP_CorePopup_C_HideTutorialPopup::PlaySoundEffect' has a wrong offset!");

// Function WBP_CorePopup.WBP_CorePopup_C.ExecuteUbergraph_WBP_CorePopup
// 0x0148 (0x0148 - 0x0000)
struct WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void()>                             K2Node_CreateDelegate_OutputDelegate;              // 0x0004(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_playSoundEffect;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNotifTutorialPopupViewData            K2Node_Event_notifTutoData;                        // 0x0020(0x0090)(ConstParm)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FNotifTutorialPopupViewData            K2Node_MakeStruct_NotifTutorialPopupViewData;      // 0x00B8(0x0090)()
};
static_assert(alignof(WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup) == 0x000008, "Wrong alignment on WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup");
static_assert(sizeof(WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup) == 0x000148, "Wrong size on WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup");
static_assert(offsetof(WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup, EntryPoint) == 0x000000, "Member 'WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup, K2Node_CreateDelegate_OutputDelegate) == 0x000004, "Member 'WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup, K2Node_Event_playSoundEffect) == 0x000018, "Member 'WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup::K2Node_Event_playSoundEffect' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup, K2Node_Event_notifTutoData) == 0x000020, "Member 'WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup::K2Node_Event_notifTutoData' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup, CallFunc_PlayAnimation_ReturnValue) == 0x0000B0, "Member 'WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup, K2Node_MakeStruct_NotifTutorialPopupViewData) == 0x0000B8, "Member 'WBP_CorePopup_C_ExecuteUbergraph_WBP_CorePopup::K2Node_MakeStruct_NotifTutorialPopupViewData' has a wrong offset!");

}

