#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheTwins

#include "Basic.hpp"

#include "TheTwins_classes.hpp"
#include "TheTwins_parameters.hpp"


namespace SDK
{

// Function TheTwins.TwinHuskStateComponent.IsDeadFromSurvivorBack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTwinHuskStateComponent::IsDeadFromSurvivorBack() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinHuskStateComponent", "IsDeadFromSurvivorBack");

	Params::TwinHuskStateComponent_IsDeadFromSurvivorBack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.Addon_K22Power_17.Authority_OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UAddon_K22Power_17::Authority_OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Addon_K22Power_17", "Authority_OnTwinSet");

	Params::Addon_K22Power_17_Authority_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAttack.Client_Debug_PrintLandingLocationDebug
// (Final, Net, Native, Event, Private, NetClient)
// Parameters:
// bool                                    FoundProjectedPoint                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    FoundPath                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Client_Debug_PrintLandingLocationDebug(const bool FoundProjectedPoint, const bool FoundPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Client_Debug_PrintLandingLocationDebug");

	Params::TwinJumpAttack_Client_Debug_PrintLandingLocationDebug Parms{};

	Parms.FoundProjectedPoint = FoundProjectedPoint;
	Parms.FoundPath = FoundPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAttack.Cosmetic_OnIsForbiddenLandingLocationChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsForbiddenLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Cosmetic_OnIsForbiddenLandingLocationChanged(bool IsForbiddenLocation, class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Cosmetic_OnIsForbiddenLandingLocationChanged");

	Params::TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged Parms{};

	Parms.IsForbiddenLocation = IsForbiddenLocation;
	Parms.Twin = Twin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinJumpAttack.Cosmetic_OnJumpCooldownChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsInJumpCooldown                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AConjoinedTwin*                   OwningTwin                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Cosmetic_OnJumpCooldownChanged(bool IsInJumpCooldown, class AConjoinedTwin* OwningTwin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Cosmetic_OnJumpCooldownChanged");

	Params::TwinJumpAttack_Cosmetic_OnJumpCooldownChanged Parms{};

	Parms.IsInJumpCooldown = IsInJumpCooldown;
	Parms.OwningTwin = OwningTwin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinJumpAttack.Cosmetic_OnJumpLanded
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class AConjoinedTwin*                   OwningTwin                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Cosmetic_OnJumpLanded(class AConjoinedTwin* OwningTwin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Cosmetic_OnJumpLanded");

	Params::TwinJumpAttack_Cosmetic_OnJumpLanded Parms{};

	Parms.OwningTwin = OwningTwin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinJumpAttack.Cosmetic_OnJumpObstructed
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class AConjoinedTwin*                   OwningTwin                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Cosmetic_OnJumpObstructed(class AConjoinedTwin* OwningTwin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Cosmetic_OnJumpObstructed");

	Params::TwinJumpAttack_Cosmetic_OnJumpObstructed Parms{};

	Parms.OwningTwin = OwningTwin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinJumpAttack.Cosmetic_OnJumpStarted
// (BlueprintCosmetic, Event, Public, BlueprintEvent)
// Parameters:
// class AConjoinedTwin*                   OwningTwin                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Cosmetic_OnJumpStarted(class AConjoinedTwin* OwningTwin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Cosmetic_OnJumpStarted");

	Params::TwinJumpAttack_Cosmetic_OnJumpStarted Parms{};

	Parms.OwningTwin = OwningTwin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinJumpAttack.Cosmetic_OnSuccessfulJumpAttack
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AConjoinedTwin*                   OwningTwin                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Cosmetic_OnSuccessfulJumpAttack(class AConjoinedTwin* OwningTwin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Cosmetic_OnSuccessfulJumpAttack");

	Params::TwinJumpAttack_Cosmetic_OnSuccessfulJumpAttack Parms{};

	Parms.OwningTwin = OwningTwin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinJumpAttack.Cosmetic_OnUnSuccessfulJumpAttack
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AConjoinedTwin*                   OwningTwin                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Cosmetic_OnUnSuccessfulJumpAttack(class AConjoinedTwin* OwningTwin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Cosmetic_OnUnSuccessfulJumpAttack");

	Params::TwinJumpAttack_Cosmetic_OnUnSuccessfulJumpAttack Parms{};

	Parms.OwningTwin = OwningTwin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinJumpAttack.Multicast_AttachToSurvivor
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ADBDPlayer*                       SurvivorToAttachTo                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Multicast_AttachToSurvivor(class ADBDPlayer* SurvivorToAttachTo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Multicast_AttachToSurvivor");

	Params::TwinJumpAttack_Multicast_AttachToSurvivor Parms{};

	Parms.SurvivorToAttachTo = SurvivorToAttachTo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAttack.Multicast_DestroyTwinOnWrongLanding
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UTwinJumpAttack::Multicast_DestroyTwinOnWrongLanding()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Multicast_DestroyTwinOnWrongLanding");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAttack.Multicast_SetIsForbiddenLandingLocation
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// bool                                    IsForbiddenLocation                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpAttack::Multicast_SetIsForbiddenLandingLocation(bool IsForbiddenLocation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Multicast_SetIsForbiddenLandingLocation");

	Params::TwinJumpAttack_Multicast_SetIsForbiddenLandingLocation Parms{};

	Parms.IsForbiddenLocation = IsForbiddenLocation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAttack.OnRep_ShouldTwinHaveJumpObjectType
// (Final, Native, Private)

void UTwinJumpAttack::OnRep_ShouldTwinHaveJumpObjectType()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "OnRep_ShouldTwinHaveJumpObjectType");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAttack.Server_OnJumpStartTwin
// (Net, NetReliable, Native, Event, Public, NetServer)

void UTwinJumpAttack::Server_OnJumpStartTwin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Server_OnJumpStartTwin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAttack.Server_StopJump
// (Net, NetReliable, Native, Event, Public, NetServer)

void UTwinJumpAttack::Server_StopJump()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttack", "Server_StopJump");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAttackOpenSubstate.Local_OnTwinCapsuleHit
// (Final, Native, Private, HasOutParams, HasDefaults)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          NormalImpulse                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTwinJumpAttackOpenSubstate::Local_OnTwinCapsuleHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttackOpenSubstate", "Local_OnTwinCapsuleHit");

	Params::TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.NormalImpulse = std::move(NormalImpulse);
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAttackOpenSubstate.Local_OnTwinOverlapEnter
// (Final, Native, Private, HasOutParams)
// Parameters:
// class UPrimitiveComponent*              HitComponent                                           (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           OtherActor                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UPrimitiveComponent*              OtherComp                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OtherBodyIndex                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bFromSweep                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FHitResult                       Hit                                                    (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

void UTwinJumpAttackOpenSubstate::Local_OnTwinOverlapEnter(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& Hit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAttackOpenSubstate", "Local_OnTwinOverlapEnter");

	Params::TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter Parms{};

	Parms.HitComponent = HitComponent;
	Parms.OtherActor = OtherActor;
	Parms.OtherComp = OtherComp;
	Parms.OtherBodyIndex = OtherBodyIndex;
	Parms.bFromSweep = bFromSweep;
	Parms.Hit = std::move(Hit);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpAudioMutedEffect.Cosmetic_OnTwinMuted
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UTwinJumpAudioMutedEffect::Cosmetic_OnTwinMuted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAudioMutedEffect", "Cosmetic_OnTwinMuted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheTwins.TwinJumpAudioMutedEffect.Cosmetic_OnTwinUnmuted
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)

void UTwinJumpAudioMutedEffect::Cosmetic_OnTwinUnmuted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpAudioMutedEffect", "Cosmetic_OnTwinUnmuted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheTwins.TwinJumpTargetVisibleEffect.OnHideTargetPosition
// (Final, Native, Private)

void UTwinJumpTargetVisibleEffect::OnHideTargetPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpTargetVisibleEffect", "OnHideTargetPosition");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinJumpTargetVisibleEffect.OnJumpTargetTick
// (Final, Native, Private, HasDefaults)
// Parameters:
// struct FVector                          Location                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinJumpTargetVisibleEffect::OnJumpTargetTick(const struct FVector& Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinJumpTargetVisibleEffect", "OnJumpTargetTick");

	Params::TwinJumpTargetVisibleEffect_OnJumpTargetTick Parms{};

	Parms.Location = std::move(Location);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessPlayer.Cosmetic_OnPossessCancelled
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPossessPlayer::Cosmetic_OnPossessCancelled(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessPlayer", "Cosmetic_OnPossessCancelled");

	Params::PossessPlayer_Cosmetic_OnPossessCancelled Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.PossessPlayer.Cosmetic_OnPossessStart
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPossessPlayer::Cosmetic_OnPossessStart(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessPlayer", "Cosmetic_OnPossessStart");

	Params::PossessPlayer_Cosmetic_OnPossessStart Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.PossessTheConjoinedTwin.OnPowerCollected
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Collector                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPossessTheConjoinedTwin::OnPowerCollected(class ADBDPlayer* Collector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessTheConjoinedTwin", "OnPowerCollected");

	Params::PossessTheConjoinedTwin_OnPowerCollected Parms{};

	Parms.Collector = Collector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessTheConjoinedTwin.OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPossessTheConjoinedTwin::OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessTheConjoinedTwin", "OnTwinSet");

	Params::PossessTheConjoinedTwin_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.BeingPossessedInteraction.OnLevelReadyToPlay
// (Final, Native, Private)

void UBeingPossessedInteraction::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("BeingPossessedInteraction", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.ChargeTwinJumpInteraction.Cosmetic_OnJumpReadyChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Ready                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UChargeTwinJumpInteraction::Cosmetic_OnJumpReadyChanged(class ADBDPlayer* Twin, const bool Ready)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ChargeTwinJumpInteraction", "Cosmetic_OnJumpReadyChanged");

	Params::ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged Parms{};

	Parms.Twin = Twin;
	Parms.Ready = Ready;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.ConjoinedTwin.Authority_OnFirecrackerInRangeBegin
// (Final, Native, Protected, HasOutParams)
// Parameters:
// struct FRangedExplosiveEffectData       EffectData                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AConjoinedTwin::Authority_OnFirecrackerInRangeBegin(const struct FRangedExplosiveEffectData& EffectData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConjoinedTwin", "Authority_OnFirecrackerInRangeBegin");

	Params::ConjoinedTwin_Authority_OnFirecrackerInRangeBegin Parms{};

	Parms.EffectData = std::move(EffectData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.ConjoinedTwin.Cosmetic_OnOnGroundUncontrolledChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    OnGroundAndUncontrolled                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AConjoinedTwin::Cosmetic_OnOnGroundUncontrolledChanged(bool OnGroundAndUncontrolled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConjoinedTwin", "Cosmetic_OnOnGroundUncontrolledChanged");

	Params::ConjoinedTwin_Cosmetic_OnOnGroundUncontrolledChanged Parms{};

	Parms.OnGroundAndUncontrolled = OnGroundAndUncontrolled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.ConjoinedTwin.OnFinishedPlayingEvent
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AConjoinedTwin::OnFinishedPlayingEvent(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConjoinedTwin", "OnFinishedPlayingEvent");

	Params::ConjoinedTwin_OnFinishedPlayingEvent Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.ConjoinedTwin.Server_SendAttackInput
// (Net, NetReliable, Native, Event, Public, NetServer)
// Parameters:
// bool                                    Pressed                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AConjoinedTwin::Server_SendAttackInput(bool Pressed)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConjoinedTwin", "Server_SendAttackInput");

	Params::ConjoinedTwin_Server_SendAttackInput Parms{};

	Parms.Pressed = Pressed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.ConjoinedTwinAnimInstance.GetOwningConjoinedTwin
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const class AConjoinedTwin*             ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class AConjoinedTwin* UConjoinedTwinAnimInstance::GetOwningConjoinedTwin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ConjoinedTwinAnimInstance", "GetOwningConjoinedTwin");

	Params::ConjoinedTwinAnimInstance_GetOwningConjoinedTwin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.Hoarder.Local_ThrowBubbleIndicator
// (Event, Protected, BlueprintEvent)
// Parameters:
// EPerkInteractionObjectType              CamperInteractionType                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ObjectActor                                            (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACamperPlayer*                    InteractingCamperPlayer                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHoarder::Local_ThrowBubbleIndicator(const EPerkInteractionObjectType CamperInteractionType, const class AActor* ObjectActor, const class ACamperPlayer* InteractingCamperPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Hoarder", "Local_ThrowBubbleIndicator");

	Params::Hoarder_Local_ThrowBubbleIndicator Parms{};

	Parms.CamperInteractionType = CamperInteractionType;
	Parms.ObjectActor = ObjectActor;
	Parms.InteractingCamperPlayer = InteractingCamperPlayer;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.Hoarder.OnItemAddedToPlayer
// (Final, Native, Private)
// Parameters:
// class ACollectable*                     Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInventoryType                          InventoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ACamperPlayer*                    Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHoarder::OnItemAddedToPlayer(class ACollectable* Item, EInventoryType InventoryType, class ACamperPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Hoarder", "OnItemAddedToPlayer");

	Params::Hoarder_OnItemAddedToPlayer Parms{};

	Parms.Item = Item;
	Parms.InventoryType = InventoryType;
	Parms.Player = Player;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.Hoarder.OnItemRemovedFromPlayer
// (Final, Native, Private)
// Parameters:
// class ACollectable*                     Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInventoryType                          InventoryType                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UHoarder::OnItemRemovedFromPlayer(class ACollectable* Item, EInventoryType InventoryType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Hoarder", "OnItemRemovedFromPlayer");

	Params::Hoarder_OnItemRemovedFromPlayer Parms{};

	Parms.Item = Item;
	Parms.InventoryType = InventoryType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.Hoarder.GetBubbleIndicatorLifetime
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UHoarder::GetBubbleIndicatorLifetime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Hoarder", "GetBubbleIndicatorLifetime");

	Params::Hoarder_GetBubbleIndicatorLifetime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.IsTwinRecallReady.OnLevelReadyToPlay
// (Final, Native, Private)

void UIsTwinRecallReady::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("IsTwinRecallReady", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.K22Power.Authority_OnDestroyTwinChargePercentChanged
// (Final, Native, Private)
// Parameters:
// class UChargeableComponent*             ChargeableComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PercentCompletionChange                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalPercentComplete                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK22Power::Authority_OnDestroyTwinChargePercentChanged(class UChargeableComponent* ChargeableComponent, float PercentCompletionChange, float TotalPercentComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K22Power", "Authority_OnDestroyTwinChargePercentChanged");

	Params::K22Power_Authority_OnDestroyTwinChargePercentChanged Parms{};

	Parms.ChargeableComponent = ChargeableComponent;
	Parms.PercentCompletionChange = PercentCompletionChange;
	Parms.TotalPercentComplete = TotalPercentComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.K22Power.Authority_OnPossessTwinChargePercentChanged
// (Final, Native, Private)
// Parameters:
// class UChargeableComponent*             ChargeableComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PercentCompletionChange                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalPercentComplete                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AK22Power::Authority_OnPossessTwinChargePercentChanged(class UChargeableComponent* ChargeableComponent, float PercentCompletionChange, float TotalPercentComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K22Power", "Authority_OnPossessTwinChargePercentChanged");

	Params::K22Power_Authority_OnPossessTwinChargePercentChanged Parms{};

	Parms.ChargeableComponent = ChargeableComponent;
	Parms.PercentCompletionChange = PercentCompletionChange;
	Parms.TotalPercentComplete = TotalPercentComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.K22Power.Authority_TwinDestroyedBySurvivor
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameplayTag                                            (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void AK22Power::Authority_TwinDestroyedBySurvivor(const struct FGameplayTag& GameplayTag, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K22Power", "Authority_TwinDestroyedBySurvivor");

	Params::K22Power_Authority_TwinDestroyedBySurvivor Parms{};

	Parms.GameplayTag = std::move(GameplayTag);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.K22Power.OnFirstAttachmentToSister
// (Final, Native, Private)

void AK22Power::OnFirstAttachmentToSister()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K22Power", "OnFirstAttachmentToSister");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.K22Power.OnPowerChargeEmpty
// (Final, Native, Private)

void AK22Power::OnPowerChargeEmpty()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K22Power", "OnPowerChargeEmpty");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.K22Power.OnRep_ConjoinedTwin
// (Final, Native, Private)

void AK22Power::OnRep_ConjoinedTwin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K22Power", "OnRep_ConjoinedTwin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.K22Power.OnRep_RecallReady
// (Final, Native, Private)

void AK22Power::OnRep_RecallReady()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K22Power", "OnRep_RecallReady");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.K22Power.GetConjoinedTwin
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AConjoinedTwin*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AConjoinedTwin* AK22Power::GetConjoinedTwin() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K22Power", "GetConjoinedTwin");

	Params::K22Power_GetConjoinedTwin Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.K22PowerChargePresentationItemProgressComponent.OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UK22PowerChargePresentationItemProgressComponent::OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("K22PowerChargePresentationItemProgressComponent", "OnTwinSet");

	Params::K22PowerChargePresentationItemProgressComponent_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessionComponent.Client_StartStateMachineDriverChangeProcess
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UPossessionComponent::Client_StartStateMachineDriverChangeProcess()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "Client_StartStateMachineDriverChangeProcess");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessionComponent.Client_WaitForBeingPossessedInteractionToStart
// (Final, Net, NetReliable, Native, Event, Private, NetClient)

void UPossessionComponent::Client_WaitForBeingPossessedInteractionToStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "Client_WaitForBeingPossessedInteractionToStart");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessionComponent.Cosmetic_OnControlledChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsControlled                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPossessionComponent::Cosmetic_OnControlledChanged(class ADBDPlayer* Player, bool IsControlled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "Cosmetic_OnControlledChanged");

	Params::PossessionComponent_Cosmetic_OnControlledChanged Parms{};

	Parms.Player = Player;
	Parms.IsControlled = IsControlled;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.PossessionComponent.CosmeticLocal_OnControlled
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPossessionComponent::CosmeticLocal_OnControlled(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "CosmeticLocal_OnControlled");

	Params::PossessionComponent_CosmeticLocal_OnControlled Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.PossessionComponent.CosmeticLocal_OnUncontrolled
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPossessionComponent::CosmeticLocal_OnUncontrolled(class ADBDPlayer* Player)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "CosmeticLocal_OnUncontrolled");

	Params::PossessionComponent_CosmeticLocal_OnUncontrolled Parms{};

	Parms.Player = Player;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.PossessionComponent.Multicast_NotifyPossessionDone
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UPossessionComponent::Multicast_NotifyPossessionDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "Multicast_NotifyPossessionDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessionComponent.Multicast_StartPossessionOf
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class ADBDPlayer*                       PlayerToPossess                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPossessionComponent::Multicast_StartPossessionOf(class ADBDPlayer* PlayerToPossess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "Multicast_StartPossessionOf");

	Params::PossessionComponent_Multicast_StartPossessionOf Parms{};

	Parms.PlayerToPossess = PlayerToPossess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessionComponent.OnLevelReadyToPlay
// (Final, Native, Private)

void UPossessionComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessionComponent.Server_NotifyBeingPossessedInteractionStarted
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UPossessionComponent::Server_NotifyBeingPossessedInteractionStarted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "Server_NotifyBeingPossessedInteractionStarted");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessionComponent.Server_NotifyPossessionDone
// (Final, Net, NetReliable, Native, Event, Private, NetServer)

void UPossessionComponent::Server_NotifyPossessionDone()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "Server_NotifyPossessionDone");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessionComponent.Server_StartPossessionOf
// (Final, Net, NetReliable, Native, Event, Private, NetServer)
// Parameters:
// class ADBDPlayer*                       PlayerToPossess                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ShouldStartBeingPossessedInteraction                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPossessionComponent::Server_StartPossessionOf(class ADBDPlayer* PlayerToPossess, bool ShouldStartBeingPossessedInteraction)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "Server_StartPossessionOf");

	Params::PossessionComponent_Server_StartPossessionOf Parms{};

	Parms.PlayerToPossess = PlayerToPossess;
	Parms.ShouldStartBeingPossessedInteraction = ShouldStartBeingPossessedInteraction;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessionComponent.IsDormant
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPossessionComponent::IsDormant() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "IsDormant");

	Params::PossessionComponent_IsDormant Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.PossessionComponent.IsPossessed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPossessionComponent::IsPossessed() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessionComponent", "IsPossessed");

	Params::PossessionComponent_IsPossessed Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.KillerPossessionComponent.OnRep_ShouldDeactivateCollisionsWithSurvivors
// (Final, Native, Private)

void UKillerPossessionComponent::OnRep_ShouldDeactivateCollisionsWithSurvivors()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerPossessionComponent", "OnRep_ShouldDeactivateCollisionsWithSurvivors");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PossessNegationEffectComponent.OnLevelReadyToPlay
// (Native, Protected)

void UPossessNegationEffectComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessNegationEffectComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction TheTwins.PossessNegationEffectComponent.PlayCantPossessSound__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UPossessNegationEffectComponent::PlayCantPossessSound__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PossessNegationEffectComponent", "PlayCantPossessSound__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// Function TheTwins.KillerPossessNegationEffectComponent.OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKillerPossessNegationEffectComponent::OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("KillerPossessNegationEffectComponent", "OnTwinSet");

	Params::KillerPossessNegationEffectComponent_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.Oppression.GetNumberGensAffectedByPerkAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOppression::GetNumberGensAffectedByPerkAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Oppression", "GetNumberGensAffectedByPerkAtLevel");

	Params::Oppression_GetNumberGensAffectedByPerkAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.Oppression.GetPerkCooldownAtLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOppression::GetPerkCooldownAtLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("Oppression", "GetPerkCooldownAtLevel");

	Params::Oppression_GetPerkCooldownAtLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.PushTwinOnLockerInteraction.Authority_OnPlayerInLockerChanged
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       PreviousPlayerInLocker                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       NewPlayerInLocker                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPushTwinOnLockerInteraction::Authority_OnPlayerInLockerChanged(class ADBDPlayer* PreviousPlayerInLocker, class ADBDPlayer* NewPlayerInLocker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PushTwinOnLockerInteraction", "Authority_OnPlayerInLockerChanged");

	Params::PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged Parms{};

	Parms.PreviousPlayerInLocker = PreviousPlayerInLocker;
	Parms.NewPlayerInLocker = NewPlayerInLocker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PushTwinOnLockerInteraction.OnRep_PushTwinOnLockerChargeable
// (Final, Native, Private)

void UPushTwinOnLockerInteraction::OnRep_PushTwinOnLockerChargeable()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PushTwinOnLockerInteraction", "OnRep_PushTwinOnLockerChargeable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.PushTwinOnLockerInteraction.OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPushTwinOnLockerInteraction::OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PushTwinOnLockerInteraction", "OnTwinSet");

	Params::PushTwinOnLockerInteraction_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.RecallTwin.OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URecallTwin::OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RecallTwin", "OnTwinSet");

	Params::RecallTwin_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.ReleaseConjoinedTwin.Cosmetic_OnReleaseCancelled
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Sister                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AConjoinedTwin*                   brother                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReleaseConjoinedTwin::Cosmetic_OnReleaseCancelled(class ADBDPlayer* Sister, class AConjoinedTwin* brother)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReleaseConjoinedTwin", "Cosmetic_OnReleaseCancelled");

	Params::ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled Parms{};

	Parms.Sister = Sister;
	Parms.brother = brother;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.ReleaseConjoinedTwin.Cosmetic_OnReleaseChargeComplete
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Sister                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AConjoinedTwin*                   brother                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReleaseConjoinedTwin::Cosmetic_OnReleaseChargeComplete(class ADBDPlayer* Sister, class AConjoinedTwin* brother)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReleaseConjoinedTwin", "Cosmetic_OnReleaseChargeComplete");

	Params::ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete Parms{};

	Parms.Sister = Sister;
	Parms.brother = brother;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.ReleaseConjoinedTwin.Cosmetic_OnReleaseTwinInteractionUpdate
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Sister                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AConjoinedTwin*                   brother                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReleaseConjoinedTwin::Cosmetic_OnReleaseTwinInteractionUpdate(class ADBDPlayer* Sister, class AConjoinedTwin* brother, float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReleaseConjoinedTwin", "Cosmetic_OnReleaseTwinInteractionUpdate");

	Params::ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate Parms{};

	Parms.Sister = Sister;
	Parms.brother = brother;
	Parms.DeltaTime = DeltaTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.ReleaseConjoinedTwin.Cosmetic_OnReleaseTwinInteractionUpdateStart
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Sister                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AConjoinedTwin*                   brother                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReleaseConjoinedTwin::Cosmetic_OnReleaseTwinInteractionUpdateStart(class ADBDPlayer* Sister, class AConjoinedTwin* brother)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReleaseConjoinedTwin", "Cosmetic_OnReleaseTwinInteractionUpdateStart");

	Params::ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart Parms{};

	Parms.Sister = Sister;
	Parms.brother = brother;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.ReleaseConjoinedTwin.OnKillerStunned
// (Final, Native, Private, HasOutParams)
// Parameters:
// struct FGameplayTag                     GameEventType                                          (ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FGameEventData                   GameEventData                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UReleaseConjoinedTwin::OnKillerStunned(const struct FGameplayTag& GameEventType, const struct FGameEventData& GameEventData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReleaseConjoinedTwin", "OnKillerStunned");

	Params::ReleaseConjoinedTwin_OnKillerStunned Parms{};

	Parms.GameEventType = std::move(GameEventType);
	Parms.GameEventData = std::move(GameEventData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.ReleaseConjoinedTwin.OnPowerCollected
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       Collector                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReleaseConjoinedTwin::OnPowerCollected(class ADBDPlayer* Collector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReleaseConjoinedTwin", "OnPowerCollected");

	Params::ReleaseConjoinedTwin_OnPowerCollected Parms{};

	Parms.Collector = Collector;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.ReleaseConjoinedTwin.OnRep_ReleaseAnimationWentToTheEnd
// (Final, Native, Private)

void UReleaseConjoinedTwin::OnRep_ReleaseAnimationWentToTheEnd()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReleaseConjoinedTwin", "OnRep_ReleaseAnimationWentToTheEnd");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.ReleaseConjoinedTwin.OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UReleaseConjoinedTwin::OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("ReleaseConjoinedTwin", "OnTwinSet");

	Params::ReleaseConjoinedTwin_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.RemoveTwin.OnRemoveMontageEnd
// (Final, Native, Private)
// Parameters:
// struct FAnimationMontageDescriptor      Montage                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    Interrupted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       DestroyingPlayer                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URemoveTwin::OnRemoveMontageEnd(const struct FAnimationMontageDescriptor& Montage, bool Interrupted, class ADBDPlayer* DestroyingPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RemoveTwin", "OnRemoveMontageEnd");

	Params::RemoveTwin_OnRemoveMontageEnd Parms{};

	Parms.Montage = std::move(Montage);
	Parms.Interrupted = Interrupted;
	Parms.DestroyingPlayer = DestroyingPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.SisterBlindFlashlightableLightingStrategy.OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USisterBlindFlashlightableLightingStrategy::OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SisterBlindFlashlightableLightingStrategy", "OnTwinSet");

	Params::SisterBlindFlashlightableLightingStrategy_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TheTwinsCheatComponent.DBD_TwinDestroyTheTwin
// (Final, Exec, Native, Public)

void UTheTwinsCheatComponent::DBD_TwinDestroyTheTwin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheTwinsCheatComponent", "DBD_TwinDestroyTheTwin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TheTwinsCheatComponent.Multicast_TrySendThePlayerBackInKiller
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)
// Parameters:
// class UTwinPossessionComponent*         TwinPossessionComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTheTwinsCheatComponent::Multicast_TrySendThePlayerBackInKiller(class UTwinPossessionComponent* TwinPossessionComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TheTwinsCheatComponent", "Multicast_TrySendThePlayerBackInKiller");

	Params::TheTwinsCheatComponent_Multicast_TrySendThePlayerBackInKiller Parms{};

	Parms.TwinPossessionComponent = TwinPossessionComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinAOELingeringStatusEffect.Authority_OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinAOELingeringStatusEffect::Authority_OnInRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAOELingeringStatusEffect", "Authority_OnInRangeChanged");

	Params::TwinAOELingeringStatusEffect_Authority_OnInRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinAttachmentComponent.Authority_OnRemoveTwinChargePercentChanged
// (Final, Native, Private)
// Parameters:
// class UChargeableComponent*             ChargeableComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PercentCompletionChange                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   TotalPercentComplete                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinAttachmentComponent::Authority_OnRemoveTwinChargePercentChanged(class UChargeableComponent* ChargeableComponent, float PercentCompletionChange, float TotalPercentComplete)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "Authority_OnRemoveTwinChargePercentChanged");

	Params::TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged Parms{};

	Parms.ChargeableComponent = ChargeableComponent;
	Parms.PercentCompletionChange = PercentCompletionChange;
	Parms.TotalPercentComplete = TotalPercentComplete;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinAttachmentComponent.Cosmetic_OnTwinAttachedToSister
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Sister                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       brother                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    IsFirstAttachment                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinAttachmentComponent::Cosmetic_OnTwinAttachedToSister(class ADBDPlayer* Sister, class ADBDPlayer* brother, bool IsFirstAttachment)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "Cosmetic_OnTwinAttachedToSister");

	Params::TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister Parms{};

	Parms.Sister = Sister;
	Parms.brother = brother;
	Parms.IsFirstAttachment = IsFirstAttachment;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinAttachmentComponent.Cosmetic_OnTwinAttachedToSurvivor
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       brother                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinAttachmentComponent::Cosmetic_OnTwinAttachedToSurvivor(class ADBDPlayer* Survivor, class ADBDPlayer* brother)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "Cosmetic_OnTwinAttachedToSurvivor");

	Params::TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor Parms{};

	Parms.Survivor = Survivor;
	Parms.brother = brother;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinAttachmentComponent.Cosmetic_OnTwinDetachedFromSister
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Sister                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       brother                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinAttachmentComponent::Cosmetic_OnTwinDetachedFromSister(class ADBDPlayer* Sister, class ADBDPlayer* brother)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "Cosmetic_OnTwinDetachedFromSister");

	Params::TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister Parms{};

	Parms.Sister = Sister;
	Parms.brother = brother;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinAttachmentComponent.Cosmetic_OnTwinDetachedFromSurvivor
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Survivor                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       brother                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinAttachmentComponent::Cosmetic_OnTwinDetachedFromSurvivor(class ADBDPlayer* Survivor, class ADBDPlayer* brother)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "Cosmetic_OnTwinDetachedFromSurvivor");

	Params::TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor Parms{};

	Parms.Survivor = Survivor;
	Parms.brother = brother;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinAttachmentComponent.Multicast_QuickDestroyTwin
// (Final, Net, NetReliable, Native, Event, NetMulticast, Private)

void UTwinAttachmentComponent::Multicast_QuickDestroyTwin()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "Multicast_QuickDestroyTwin");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinAttachmentComponent.OnAttachedSurvivorDamageStateChanged
// (Final, Native, Private)
// Parameters:
// ECamperDamageState                      OldState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECamperDamageState                      NewState                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinAttachmentComponent::OnAttachedSurvivorDamageStateChanged(const ECamperDamageState OldState, const ECamperDamageState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "OnAttachedSurvivorDamageStateChanged");

	Params::TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged Parms{};

	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinAttachmentComponent.OnLevelReadyToPlay
// (Final, Native, Private)

void UTwinAttachmentComponent::OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinAttachmentComponent.OnMoriMontageEnd
// (Final, Native, Private)
// Parameters:
// struct FAnimationMontageDescriptor      Montage                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    Interrupted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinAttachmentComponent::OnMoriMontageEnd(const struct FAnimationMontageDescriptor& Montage, bool Interrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "OnMoriMontageEnd");

	Params::TwinAttachmentComponent_OnMoriMontageEnd Parms{};

	Parms.Montage = std::move(Montage);
	Parms.Interrupted = Interrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinAttachmentComponent.OnRep_AttachedPlayer
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       OldAttachedPlayer                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinAttachmentComponent::OnRep_AttachedPlayer(class ADBDPlayer* OldAttachedPlayer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "OnRep_AttachedPlayer");

	Params::TwinAttachmentComponent_OnRep_AttachedPlayer Parms{};

	Parms.OldAttachedPlayer = OldAttachedPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinAttachmentComponent.IsAttachedToSister
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTwinAttachmentComponent::IsAttachedToSister() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "IsAttachedToSister");

	Params::TwinAttachmentComponent_IsAttachedToSister Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.TwinAttachmentComponent.IsAttachedToSurvivor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTwinAttachmentComponent::IsAttachedToSurvivor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinAttachmentComponent", "IsAttachedToSurvivor");

	Params::TwinAttachmentComponent_IsAttachedToSurvivor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.TwinBaseAddon.Authority_OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinBaseAddon::Authority_OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinBaseAddon", "Authority_OnTwinSet");

	Params::TwinBaseAddon_Authority_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinBaseKillerInstinctEffect.Authority_OnInRangeChanged
// (Final, Native, Private)
// Parameters:
// bool                                    InRange                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinBaseKillerInstinctEffect::Authority_OnInRangeChanged(const bool InRange)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinBaseKillerInstinctEffect", "Authority_OnInRangeChanged");

	Params::TwinBaseKillerInstinctEffect_Authority_OnInRangeChanged Parms{};

	Parms.InRange = InRange;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinDestructionComponent.Authority_OnTwinQuickDestroyOver
// (Final, BlueprintAuthorityOnly, Native, Protected, BlueprintCallable)

void UTwinDestructionComponent::Authority_OnTwinQuickDestroyOver()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinDestructionComponent", "Authority_OnTwinQuickDestroyOver");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinDestructionComponent.Cosmetic_OnTwinDestroyedFromKick
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AConjoinedTwin*                   OwningTwin                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinDestructionComponent::Cosmetic_OnTwinDestroyedFromKick(class AConjoinedTwin* OwningTwin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinDestructionComponent", "Cosmetic_OnTwinDestroyedFromKick");

	Params::TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromKick Parms{};

	Parms.OwningTwin = OwningTwin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinDestructionComponent.Cosmetic_OnTwinDestroyedFromSurvivorRemove
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// class AConjoinedTwin*                   OwningTwin                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinDestructionComponent::Cosmetic_OnTwinDestroyedFromSurvivorRemove(class AConjoinedTwin* OwningTwin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinDestructionComponent", "Cosmetic_OnTwinDestroyedFromSurvivorRemove");

	Params::TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromSurvivorRemove Parms{};

	Parms.OwningTwin = OwningTwin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinDestructionComponent.OnDyingMontageEnd
// (Final, Native, Private)
// Parameters:
// struct FAnimationMontageDescriptor      Montage                                                (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    Interrupted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinDestructionComponent::OnDyingMontageEnd(const struct FAnimationMontageDescriptor& Montage, bool Interrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinDestructionComponent", "OnDyingMontageEnd");

	Params::TwinDestructionComponent_OnDyingMontageEnd Parms{};

	Parms.Montage = std::move(Montage);
	Parms.Interrupted = Interrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinDestructionComponent.OnTwinQuickDestroy
// (Event, Protected, BlueprintEvent)
// Parameters:
// class AConjoinedTwin*                   OwningTwin                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinDestructionComponent::OnTwinQuickDestroy(class AConjoinedTwin* OwningTwin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinDestructionComponent", "OnTwinQuickDestroy");

	Params::TwinDestructionComponent_OnTwinQuickDestroy Parms{};

	Parms.OwningTwin = OwningTwin;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinLockerBlockerComponent.Authority_OnLevelReadyToPlay
// (Final, Native, Private)

void UTwinLockerBlockerComponent::Authority_OnLevelReadyToPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinLockerBlockerComponent", "Authority_OnLevelReadyToPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinLockerBlockerComponent.Cosmetic_OnTwinOnLockerChanged
// (BlueprintCosmetic, Event, Protected, BlueprintEvent)
// Parameters:
// bool                                    IsOnLocker                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinLockerBlockerComponent::Cosmetic_OnTwinOnLockerChanged(bool IsOnLocker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinLockerBlockerComponent", "Cosmetic_OnTwinOnLockerChanged");

	Params::TwinLockerBlockerComponent_Cosmetic_OnTwinOnLockerChanged Parms{};

	Parms.IsOnLocker = IsOnLocker;

	UObject::ProcessEvent(Func, &Parms);
}


// Function TheTwins.TwinLockerBlockerComponent.OnPlayerInLockerChanged
// (Final, Native, Private)
// Parameters:
// class ADBDPlayer*                       PreviousPlayerInLocker                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ADBDPlayer*                       NewPlayerInLocker                                      (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinLockerBlockerComponent::OnPlayerInLockerChanged(class ADBDPlayer* PreviousPlayerInLocker, class ADBDPlayer* NewPlayerInLocker)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinLockerBlockerComponent", "OnPlayerInLockerChanged");

	Params::TwinLockerBlockerComponent_OnPlayerInLockerChanged Parms{};

	Parms.PreviousPlayerInLocker = PreviousPlayerInLocker;
	Parms.NewPlayerInLocker = NewPlayerInLocker;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinLockerBlockerComponent.OnPushedMontageEnded
// (Final, Native, Private)
// Parameters:
// struct FAnimationMontageDescriptor      MontageDescriptor                                      (ConstParm, Parm, NativeAccessSpecifierPublic)
// bool                                    Interrupted                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinLockerBlockerComponent::OnPushedMontageEnded(const struct FAnimationMontageDescriptor& MontageDescriptor, bool Interrupted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinLockerBlockerComponent", "OnPushedMontageEnded");

	Params::TwinLockerBlockerComponent_OnPushedMontageEnded Parms{};

	Parms.MontageDescriptor = std::move(MontageDescriptor);
	Parms.Interrupted = Interrupted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinLockerBlockerComponent.OnPushedMontageStarted
// (Final, Native, Private)
// Parameters:
// struct FAnimationMontageDescriptor      MontageDescriptor                                      (ConstParm, Parm, NativeAccessSpecifierPublic)
// float                                   Rate                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinLockerBlockerComponent::OnPushedMontageStarted(const struct FAnimationMontageDescriptor& MontageDescriptor, const float Rate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinLockerBlockerComponent", "OnPushedMontageStarted");

	Params::TwinLockerBlockerComponent_OnPushedMontageStarted Parms{};

	Parms.MontageDescriptor = std::move(MontageDescriptor);
	Parms.Rate = Rate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinLockerBlockerComponent.OnPushedMontageStopped
// (Final, Native, Private)
// Parameters:
// struct FAnimationMontageDescriptor      MontageDescriptor                                      (ConstParm, Parm, NativeAccessSpecifierPublic)

void UTwinLockerBlockerComponent::OnPushedMontageStopped(const struct FAnimationMontageDescriptor& MontageDescriptor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinLockerBlockerComponent", "OnPushedMontageStopped");

	Params::TwinLockerBlockerComponent_OnPushedMontageStopped Parms{};

	Parms.MontageDescriptor = std::move(MontageDescriptor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinLockerBlockerComponent.IsTwinAttachedToLocker
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UTwinLockerBlockerComponent::IsTwinAttachedToLocker() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinLockerBlockerComponent", "IsTwinAttachedToLocker");

	Params::TwinLockerBlockerComponent_IsTwinAttachedToLocker Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function TheTwins.TwinSubjectProvider.ListenToTwinSet
// (Final, Native, Private)
// Parameters:
// class ASlasherPlayer*                   Killer                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinSubjectProvider::ListenToTwinSet(class ASlasherPlayer* Killer)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinSubjectProvider", "ListenToTwinSet");

	Params::TwinSubjectProvider_ListenToTwinSet Parms{};

	Parms.Killer = Killer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function TheTwins.TwinSubjectProvider.OnTwinSet
// (Final, Native, Private)
// Parameters:
// class AConjoinedTwin*                   Twin                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UTwinSubjectProvider::OnTwinSet(class AConjoinedTwin* Twin)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("TwinSubjectProvider", "OnTwinSet");

	Params::TwinSubjectProvider_OnTwinSet Parms{};

	Parms.Twin = Twin;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

