#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_TotemBase

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"
#include "TheClown_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function BP_TotemBase.BP_TotemBase_C.UserConstructionScript
// 0x0018 (0x0018 - 0x0000)
struct BP_TotemBase_C_UserConstructionScript final
{
public:
	class UAttachInteractionComponent*            CallFunc_GetComponentByClass_ReturnValue;          // 0x0000(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	TArray<class USceneComponent*>                K2Node_MakeArray_Array;                            // 0x0008(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_TotemBase_C_UserConstructionScript) == 0x000008, "Wrong alignment on BP_TotemBase_C_UserConstructionScript");
static_assert(sizeof(BP_TotemBase_C_UserConstructionScript) == 0x000018, "Wrong size on BP_TotemBase_C_UserConstructionScript");
static_assert(offsetof(BP_TotemBase_C_UserConstructionScript, CallFunc_GetComponentByClass_ReturnValue) == 0x000000, "Member 'BP_TotemBase_C_UserConstructionScript::CallFunc_GetComponentByClass_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_UserConstructionScript, K2Node_MakeArray_Array) == 0x000008, "Member 'BP_TotemBase_C_UserConstructionScript::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_TotemBase_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_TotemBase_C_ReceiveEndPlay");
static_assert(sizeof(BP_TotemBase_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_TotemBase_C_ReceiveEndPlay");
static_assert(offsetof(BP_TotemBase_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_TotemBase_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.PostCleanseAkEventss
// 0x0038 (0x0038 - 0x0000)
struct BP_TotemBase_C_PostCleanseAkEventss final
{
public:
	ETotemState                                   OldTotemState;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x001C(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_PostCleanseAkEventss) == 0x000004, "Wrong alignment on BP_TotemBase_C_PostCleanseAkEventss");
static_assert(sizeof(BP_TotemBase_C_PostCleanseAkEventss) == 0x000038, "Wrong size on BP_TotemBase_C_PostCleanseAkEventss");
static_assert(offsetof(BP_TotemBase_C_PostCleanseAkEventss, OldTotemState) == 0x000000, "Member 'BP_TotemBase_C_PostCleanseAkEventss::OldTotemState' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_PostCleanseAkEventss, Temp_delegate_Variable) == 0x000004, "Member 'BP_TotemBase_C_PostCleanseAkEventss::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_PostCleanseAkEventss, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000018, "Member 'BP_TotemBase_C_PostCleanseAkEventss::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_PostCleanseAkEventss, Temp_delegate_Variable_1) == 0x00001C, "Member 'BP_TotemBase_C_PostCleanseAkEventss::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_PostCleanseAkEventss, CallFunc_PostAkEvent_ReturnValue) == 0x000030, "Member 'BP_TotemBase_C_PostCleanseAkEventss::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_PostCleanseAkEventss, CallFunc_PostAkEvent_ReturnValue_1) == 0x000034, "Member 'BP_TotemBase_C_PostCleanseAkEventss::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.OnUnblockTotemCosmetic
// 0x0008 (0x0008 - 0x0000)
struct BP_TotemBase_C_OnUnblockTotemCosmetic final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_OnUnblockTotemCosmetic) == 0x000008, "Wrong alignment on BP_TotemBase_C_OnUnblockTotemCosmetic");
static_assert(sizeof(BP_TotemBase_C_OnUnblockTotemCosmetic) == 0x000008, "Wrong size on BP_TotemBase_C_OnUnblockTotemCosmetic");
static_assert(offsetof(BP_TotemBase_C_OnUnblockTotemCosmetic, Player) == 0x000000, "Member 'BP_TotemBase_C_OnUnblockTotemCosmetic::Player' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.OnTotemStateChanged
// 0x0002 (0x0002 - 0x0000)
struct BP_TotemBase_C_OnTotemStateChanged final
{
public:
	ETotemState                                   OldTotemState;                                     // 0x0000(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETotemState                                   NewTotemState;                                     // 0x0001(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_OnTotemStateChanged) == 0x000001, "Wrong alignment on BP_TotemBase_C_OnTotemStateChanged");
static_assert(sizeof(BP_TotemBase_C_OnTotemStateChanged) == 0x000002, "Wrong size on BP_TotemBase_C_OnTotemStateChanged");
static_assert(offsetof(BP_TotemBase_C_OnTotemStateChanged, OldTotemState) == 0x000000, "Member 'BP_TotemBase_C_OnTotemStateChanged::OldTotemState' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnTotemStateChanged, NewTotemState) == 0x000001, "Member 'BP_TotemBase_C_OnTotemStateChanged::NewTotemState' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.OnHexUnbound
// 0x0018 (0x0018 - 0x0000)
struct BP_TotemBase_C_OnHexUnbound final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_OnHexUnbound) == 0x000004, "Wrong alignment on BP_TotemBase_C_OnHexUnbound");
static_assert(sizeof(BP_TotemBase_C_OnHexUnbound) == 0x000018, "Wrong size on BP_TotemBase_C_OnHexUnbound");
static_assert(offsetof(BP_TotemBase_C_OnHexUnbound, Temp_delegate_Variable) == 0x000000, "Member 'BP_TotemBase_C_OnHexUnbound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnHexUnbound, CallFunc_PostAkEvent_ReturnValue) == 0x000014, "Member 'BP_TotemBase_C_OnHexUnbound::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.OnHexBound
// 0x0018 (0x0018 - 0x0000)
struct BP_TotemBase_C_OnHexBound final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_OnHexBound) == 0x000004, "Wrong alignment on BP_TotemBase_C_OnHexBound");
static_assert(sizeof(BP_TotemBase_C_OnHexBound) == 0x000018, "Wrong size on BP_TotemBase_C_OnHexBound");
static_assert(offsetof(BP_TotemBase_C_OnHexBound, Temp_delegate_Variable) == 0x000000, "Member 'BP_TotemBase_C_OnHexBound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnHexBound, CallFunc_PostAkEvent_ReturnValue) == 0x000014, "Member 'BP_TotemBase_C_OnHexBound::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.OnCleanseTotem
// 0x0010 (0x0010 - 0x0000)
struct BP_TotemBase_C_OnCleanseTotem final
{
public:
	class ATotem*                                 Totem;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETotemState                                   OldTotemState;                                     // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_OnCleanseTotem) == 0x000008, "Wrong alignment on BP_TotemBase_C_OnCleanseTotem");
static_assert(sizeof(BP_TotemBase_C_OnCleanseTotem) == 0x000010, "Wrong size on BP_TotemBase_C_OnCleanseTotem");
static_assert(offsetof(BP_TotemBase_C_OnCleanseTotem, Totem) == 0x000000, "Member 'BP_TotemBase_C_OnCleanseTotem::Totem' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnCleanseTotem, OldTotemState) == 0x000008, "Member 'BP_TotemBase_C_OnCleanseTotem::OldTotemState' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.OnBoonUnbound
// 0x0040 (0x0040 - 0x0000)
struct BP_TotemBase_C_OnBoonUnbound final
{
public:
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0000(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0024(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_OnBoonUnbound) == 0x000008, "Wrong alignment on BP_TotemBase_C_OnBoonUnbound");
static_assert(sizeof(BP_TotemBase_C_OnBoonUnbound) == 0x000040, "Wrong size on BP_TotemBase_C_OnBoonUnbound");
static_assert(offsetof(BP_TotemBase_C_OnBoonUnbound, Temp_delegate_Variable) == 0x000000, "Member 'BP_TotemBase_C_OnBoonUnbound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonUnbound, CallFunc_PostAkEvent_ReturnValue) == 0x000014, "Member 'BP_TotemBase_C_OnBoonUnbound::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonUnbound, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000018, "Member 'BP_TotemBase_C_OnBoonUnbound::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonUnbound, CallFunc_IsValid_ReturnValue) == 0x000020, "Member 'BP_TotemBase_C_OnBoonUnbound::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonUnbound, CallFunc_IsValid_ReturnValue_1) == 0x000021, "Member 'BP_TotemBase_C_OnBoonUnbound::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonUnbound, Temp_delegate_Variable_1) == 0x000024, "Member 'BP_TotemBase_C_OnBoonUnbound::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonUnbound, CallFunc_PostAkEvent_ReturnValue_1) == 0x000038, "Member 'BP_TotemBase_C_OnBoonUnbound::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.OnBoonBound
// 0x0038 (0x0038 - 0x0000)
struct BP_TotemBase_C_OnBoonBound final
{
public:
	bool                                          CallFunc_IsSlasherLocallyObserved_ReturnValue;     // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_GetBoonTotemBlessingRange_ReturnValue;    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0008(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue;         // 0x0020(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAttached_ReturnValue_1;       // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_OnBoonBound) == 0x000008, "Wrong alignment on BP_TotemBase_C_OnBoonBound");
static_assert(sizeof(BP_TotemBase_C_OnBoonBound) == 0x000038, "Wrong size on BP_TotemBase_C_OnBoonBound");
static_assert(offsetof(BP_TotemBase_C_OnBoonBound, CallFunc_IsSlasherLocallyObserved_ReturnValue) == 0x000000, "Member 'BP_TotemBase_C_OnBoonBound::CallFunc_IsSlasherLocallyObserved_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonBound, CallFunc_GetBoonTotemBlessingRange_ReturnValue) == 0x000004, "Member 'BP_TotemBase_C_OnBoonBound::CallFunc_GetBoonTotemBlessingRange_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonBound, Temp_delegate_Variable) == 0x000008, "Member 'BP_TotemBase_C_OnBoonBound::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonBound, CallFunc_SpawnEmitterAttached_ReturnValue) == 0x000020, "Member 'BP_TotemBase_C_OnBoonBound::CallFunc_SpawnEmitterAttached_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonBound, CallFunc_SpawnEmitterAttached_ReturnValue_1) == 0x000028, "Member 'BP_TotemBase_C_OnBoonBound::CallFunc_SpawnEmitterAttached_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_OnBoonBound, CallFunc_PostAkEvent_ReturnValue) == 0x000030, "Member 'BP_TotemBase_C_OnBoonBound::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.OnBlockTotemCosmetic
// 0x0008 (0x0008 - 0x0000)
struct BP_TotemBase_C_OnBlockTotemCosmetic final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_OnBlockTotemCosmetic) == 0x000008, "Wrong alignment on BP_TotemBase_C_OnBlockTotemCosmetic");
static_assert(sizeof(BP_TotemBase_C_OnBlockTotemCosmetic) == 0x000008, "Wrong size on BP_TotemBase_C_OnBlockTotemCosmetic");
static_assert(offsetof(BP_TotemBase_C_OnBlockTotemCosmetic, Player) == 0x000000, "Member 'BP_TotemBase_C_OnBlockTotemCosmetic::Player' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.K22_WrongLandingVignette
// 0x0001 (0x0001 - 0x0000)
struct BP_TotemBase_C_K22_WrongLandingVignette final
{
public:
	bool                                          WrongLanding;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_K22_WrongLandingVignette) == 0x000001, "Wrong alignment on BP_TotemBase_C_K22_WrongLandingVignette");
static_assert(sizeof(BP_TotemBase_C_K22_WrongLandingVignette) == 0x000001, "Wrong size on BP_TotemBase_C_K22_WrongLandingVignette");
static_assert(offsetof(BP_TotemBase_C_K22_WrongLandingVignette, WrongLanding) == 0x000000, "Member 'BP_TotemBase_C_K22_WrongLandingVignette::WrongLanding' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.K22_WrongLanding
// 0x0001 (0x0001 - 0x0000)
struct BP_TotemBase_C_K22_WrongLanding final
{
public:
	bool                                          Wrong_Landing;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_K22_WrongLanding) == 0x000001, "Wrong alignment on BP_TotemBase_C_K22_WrongLanding");
static_assert(sizeof(BP_TotemBase_C_K22_WrongLanding) == 0x000001, "Wrong size on BP_TotemBase_C_K22_WrongLanding");
static_assert(offsetof(BP_TotemBase_C_K22_WrongLanding, Wrong_Landing) == 0x000000, "Member 'BP_TotemBase_C_K22_WrongLanding::Wrong_Landing' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.K22_IsAttachedLocker
// 0x0001 (0x0001 - 0x0000)
struct BP_TotemBase_C_K22_IsAttachedLocker final
{
public:
	bool                                          IsAttachedLocker;                                  // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_K22_IsAttachedLocker) == 0x000001, "Wrong alignment on BP_TotemBase_C_K22_IsAttachedLocker");
static_assert(sizeof(BP_TotemBase_C_K22_IsAttachedLocker) == 0x000001, "Wrong size on BP_TotemBase_C_K22_IsAttachedLocker");
static_assert(offsetof(BP_TotemBase_C_K22_IsAttachedLocker, IsAttachedLocker) == 0x000000, "Member 'BP_TotemBase_C_K22_IsAttachedLocker::IsAttachedLocker' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.K22_HighlightDormantMain
// 0x0001 (0x0001 - 0x0000)
struct BP_TotemBase_C_K22_HighlightDormantMain final
{
public:
	bool                                          IsDormantMain_;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_K22_HighlightDormantMain) == 0x000001, "Wrong alignment on BP_TotemBase_C_K22_HighlightDormantMain");
static_assert(sizeof(BP_TotemBase_C_K22_HighlightDormantMain) == 0x000001, "Wrong size on BP_TotemBase_C_K22_HighlightDormantMain");
static_assert(offsetof(BP_TotemBase_C_K22_HighlightDormantMain, IsDormantMain_) == 0x000000, "Member 'BP_TotemBase_C_K22_HighlightDormantMain::IsDormantMain_' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.K22_HighlightDormant
// 0x0001 (0x0001 - 0x0000)
struct BP_TotemBase_C_K22_HighlightDormant final
{
public:
	bool                                          IsDormant_;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_K22_HighlightDormant) == 0x000001, "Wrong alignment on BP_TotemBase_C_K22_HighlightDormant");
static_assert(sizeof(BP_TotemBase_C_K22_HighlightDormant) == 0x000001, "Wrong size on BP_TotemBase_C_K22_HighlightDormant");
static_assert(offsetof(BP_TotemBase_C_K22_HighlightDormant, IsDormant_) == 0x000000, "Member 'BP_TotemBase_C_K22_HighlightDormant::IsDormant_' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.K12_GetToxinVignette
// 0x0001 (0x0001 - 0x0000)
struct BP_TotemBase_C_K12_GetToxinVignette final
{
public:
	EBombType                                     Bomb_Type;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_K12_GetToxinVignette) == 0x000001, "Wrong alignment on BP_TotemBase_C_K12_GetToxinVignette");
static_assert(sizeof(BP_TotemBase_C_K12_GetToxinVignette) == 0x000001, "Wrong size on BP_TotemBase_C_K12_GetToxinVignette");
static_assert(offsetof(BP_TotemBase_C_K12_GetToxinVignette, Bomb_Type) == 0x000000, "Member 'BP_TotemBase_C_K12_GetToxinVignette::Bomb_Type' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.ExecuteUbergraph_BP_TotemBase
// 0x00A0 (0x00A0 - 0x0000)
struct BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDormantMain_;                       // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsDormant_;                           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Wrong_Landing;                        // 0x0007(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_WrongLanding;                         // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EBombType                                     K2Node_Event_Bomb_Type;                            // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsAttachedLocker;                     // 0x000A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B[0x5];                                        // 0x000B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ATotem*                                 K2Node_Event_totem;                                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ETotemState                                   K2Node_Event_oldTotemState_1;                      // 0x0018(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class UMaterialInstanceDynamic*         K2Node_Event_GlitchFX;                             // 0x0020(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Face;                                 // 0x0028(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Madness;                              // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Killer;                               // 0x002A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2B[0x5];                                       // 0x002B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             K2Node_Event_player_1;                             // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADBDPlayer*                             K2Node_Event_player;                               // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyObserved_ReturnValue;            // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyObserved_ReturnValue_1;          // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UMaterialInstanceDynamic*         K2Node_Event_LightningFX;                          // 0x0048(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_Intense;                              // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsActive;                             // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_52[0x6];                                       // 0x0052(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CallFunc_K2_GetActorLocation_ReturnValue;          // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               CallFunc_SpawnEmitterAtLocation_ReturnValue;       // 0x0070(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UParticleSystemComponent*>       K2Node_MakeArray_Array;                            // 0x0080(0x0010)(ReferenceParm, ContainsInstancedReference)
	ETotemState                                   K2Node_Event_oldTotemState;                        // 0x0090(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ETotemState                                   K2Node_Event_newTotemState;                        // 0x0091(0x0001)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0092(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0093(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0094(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0095(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0096(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_97[0x1];                                       // 0x0097(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_CreateDynamicMaterialInstance_ReturnValue; // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase) == 0x000008, "Wrong alignment on BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase");
static_assert(sizeof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase) == 0x0000A0, "Wrong size on BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, EntryPoint) == 0x000000, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_SwitchEnum_CmpSuccess) == 0x000004, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_IsDormantMain_) == 0x000005, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_IsDormantMain_' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_IsDormant_) == 0x000006, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_IsDormant_' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_Wrong_Landing) == 0x000007, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_Wrong_Landing' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_WrongLanding) == 0x000008, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_WrongLanding' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_Bomb_Type) == 0x000009, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_Bomb_Type' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_IsAttachedLocker) == 0x00000A, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_IsAttachedLocker' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_totem) == 0x000010, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_totem' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_oldTotemState_1) == 0x000018, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_oldTotemState_1' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_GlitchFX) == 0x000020, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_GlitchFX' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_Face) == 0x000028, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_Face' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_Madness) == 0x000029, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_Madness' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_Killer) == 0x00002A, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_Killer' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_player_1) == 0x000030, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_player) == 0x000038, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_IsLocallyObserved_ReturnValue) == 0x000040, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_IsLocallyObserved_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_IsLocallyObserved_ReturnValue_1) == 0x000041, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_IsLocallyObserved_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_LightningFX) == 0x000048, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_LightningFX' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_Intense) == 0x000050, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_Intense' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_IsActive) == 0x000051, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_IsActive' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_K2_GetActorLocation_ReturnValue) == 0x000058, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_K2_GetActorLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_SpawnEmitterAtLocation_ReturnValue) == 0x000070, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_SpawnEmitterAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_IsValid_ReturnValue) == 0x000078, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_MakeArray_Array) == 0x000080, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_oldTotemState) == 0x000090, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_oldTotemState' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_newTotemState) == 0x000091, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_newTotemState' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000092, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000093, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000094, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000095, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, K2Node_Event_EndPlayReason) == 0x000096, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase, CallFunc_CreateDynamicMaterialInstance_ReturnValue) == 0x000098, "Member 'BP_TotemBase_C_ExecuteUbergraph_BP_TotemBase::CallFunc_CreateDynamicMaterialInstance_ReturnValue' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.ActivatePlayerLightningVFX
// 0x0010 (0x0010 - 0x0000)
struct BP_TotemBase_C_ActivatePlayerLightningVFX final
{
public:
	const class UMaterialInstanceDynamic*         LightningFX;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Intense;                                           // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_ActivatePlayerLightningVFX) == 0x000008, "Wrong alignment on BP_TotemBase_C_ActivatePlayerLightningVFX");
static_assert(sizeof(BP_TotemBase_C_ActivatePlayerLightningVFX) == 0x000010, "Wrong size on BP_TotemBase_C_ActivatePlayerLightningVFX");
static_assert(offsetof(BP_TotemBase_C_ActivatePlayerLightningVFX, LightningFX) == 0x000000, "Member 'BP_TotemBase_C_ActivatePlayerLightningVFX::LightningFX' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ActivatePlayerLightningVFX, Intense) == 0x000008, "Member 'BP_TotemBase_C_ActivatePlayerLightningVFX::Intense' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.ActivatePlayerGlitchVFX
// 0x0010 (0x0010 - 0x0000)
struct BP_TotemBase_C_ActivatePlayerGlitchVFX final
{
public:
	const class UMaterialInstanceDynamic*         GlitchFX;                                          // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash)
	bool                                          Face;                                              // 0x0008(0x0001)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Madness;                                           // 0x0009(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Killer;                                            // 0x000A(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_ActivatePlayerGlitchVFX) == 0x000008, "Wrong alignment on BP_TotemBase_C_ActivatePlayerGlitchVFX");
static_assert(sizeof(BP_TotemBase_C_ActivatePlayerGlitchVFX) == 0x000010, "Wrong size on BP_TotemBase_C_ActivatePlayerGlitchVFX");
static_assert(offsetof(BP_TotemBase_C_ActivatePlayerGlitchVFX, GlitchFX) == 0x000000, "Member 'BP_TotemBase_C_ActivatePlayerGlitchVFX::GlitchFX' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ActivatePlayerGlitchVFX, Face) == 0x000008, "Member 'BP_TotemBase_C_ActivatePlayerGlitchVFX::Face' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ActivatePlayerGlitchVFX, Madness) == 0x000009, "Member 'BP_TotemBase_C_ActivatePlayerGlitchVFX::Madness' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_ActivatePlayerGlitchVFX, Killer) == 0x00000A, "Member 'BP_TotemBase_C_ActivatePlayerGlitchVFX::Killer' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.ActivateEndGameVignette
// 0x0001 (0x0001 - 0x0000)
struct BP_TotemBase_C_ActivateEndGameVignette final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_ActivateEndGameVignette) == 0x000001, "Wrong alignment on BP_TotemBase_C_ActivateEndGameVignette");
static_assert(sizeof(BP_TotemBase_C_ActivateEndGameVignette) == 0x000001, "Wrong size on BP_TotemBase_C_ActivateEndGameVignette");
static_assert(offsetof(BP_TotemBase_C_ActivateEndGameVignette, IsActive) == 0x000000, "Member 'BP_TotemBase_C_ActivateEndGameVignette::IsActive' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.IsInterruptionPossible
// 0x0030 (0x0030 - 0x0000)
struct BP_TotemBase_C_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UInteractor*                      Interactor;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	const class UInteractionDefinition*           Definition;                                        // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	const class UInterruptionDefinition*          Interruption;                                      // 0x0020(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_IsInterruptionPossible) == 0x000008, "Wrong alignment on BP_TotemBase_C_IsInterruptionPossible");
static_assert(sizeof(BP_TotemBase_C_IsInterruptionPossible) == 0x000030, "Wrong size on BP_TotemBase_C_IsInterruptionPossible");
static_assert(offsetof(BP_TotemBase_C_IsInterruptionPossible, Interruptor) == 0x000000, "Member 'BP_TotemBase_C_IsInterruptionPossible::Interruptor' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_IsInterruptionPossible, Interruptee) == 0x000008, "Member 'BP_TotemBase_C_IsInterruptionPossible::Interruptee' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_IsInterruptionPossible, Interactor) == 0x000010, "Member 'BP_TotemBase_C_IsInterruptionPossible::Interactor' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_IsInterruptionPossible, Definition) == 0x000018, "Member 'BP_TotemBase_C_IsInterruptionPossible::Definition' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_IsInterruptionPossible, Interruption) == 0x000020, "Member 'BP_TotemBase_C_IsInterruptionPossible::Interruption' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_IsInterruptionPossible, ReturnValue) == 0x000028, "Member 'BP_TotemBase_C_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.GetMainInteractor
// 0x0008 (0x0008 - 0x0000)
struct BP_TotemBase_C_GetMainInteractor final
{
public:
	class UInteractor*                            ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_GetMainInteractor) == 0x000008, "Wrong alignment on BP_TotemBase_C_GetMainInteractor");
static_assert(sizeof(BP_TotemBase_C_GetMainInteractor) == 0x000008, "Wrong size on BP_TotemBase_C_GetMainInteractor");
static_assert(offsetof(BP_TotemBase_C_GetMainInteractor, ReturnValue) == 0x000000, "Member 'BP_TotemBase_C_GetMainInteractor::ReturnValue' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.GetInfectedParticles
// 0x0020 (0x0020 - 0x0000)
struct BP_TotemBase_C_GetInfectedParticles final
{
public:
	TArray<class UParticleSystemComponent*>       InfectedParticleArray;                             // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
	TArray<class UParticleSystemComponent*>       K2Node_MakeArray_Array;                            // 0x0010(0x0010)(ReferenceParm, ContainsInstancedReference)
};
static_assert(alignof(BP_TotemBase_C_GetInfectedParticles) == 0x000008, "Wrong alignment on BP_TotemBase_C_GetInfectedParticles");
static_assert(sizeof(BP_TotemBase_C_GetInfectedParticles) == 0x000020, "Wrong size on BP_TotemBase_C_GetInfectedParticles");
static_assert(offsetof(BP_TotemBase_C_GetInfectedParticles, InfectedParticleArray) == 0x000000, "Member 'BP_TotemBase_C_GetInfectedParticles::InfectedParticleArray' has a wrong offset!");
static_assert(offsetof(BP_TotemBase_C_GetInfectedParticles, K2Node_MakeArray_Array) == 0x000010, "Member 'BP_TotemBase_C_GetInfectedParticles::K2Node_MakeArray_Array' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.GetInfectedDecals
// 0x0010 (0x0010 - 0x0000)
struct BP_TotemBase_C_GetInfectedDecals final
{
public:
	TArray<class UDecalComponent*>                InfectedDecals;                                    // 0x0000(0x0010)(Parm, OutParm, ContainsInstancedReference)
};
static_assert(alignof(BP_TotemBase_C_GetInfectedDecals) == 0x000008, "Wrong alignment on BP_TotemBase_C_GetInfectedDecals");
static_assert(sizeof(BP_TotemBase_C_GetInfectedDecals) == 0x000010, "Wrong size on BP_TotemBase_C_GetInfectedDecals");
static_assert(offsetof(BP_TotemBase_C_GetInfectedDecals, InfectedDecals) == 0x000000, "Member 'BP_TotemBase_C_GetInfectedDecals::InfectedDecals' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.GetCleanseTotemInteraction
// 0x0008 (0x0008 - 0x0000)
struct BP_TotemBase_C_GetCleanseTotemInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_GetCleanseTotemInteraction) == 0x000008, "Wrong alignment on BP_TotemBase_C_GetCleanseTotemInteraction");
static_assert(sizeof(BP_TotemBase_C_GetCleanseTotemInteraction) == 0x000008, "Wrong size on BP_TotemBase_C_GetCleanseTotemInteraction");
static_assert(offsetof(BP_TotemBase_C_GetCleanseTotemInteraction, ReturnValue) == 0x000000, "Member 'BP_TotemBase_C_GetCleanseTotemInteraction::ReturnValue' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.GetBlessTotemInteraction
// 0x0008 (0x0008 - 0x0000)
struct BP_TotemBase_C_GetBlessTotemInteraction final
{
public:
	class UChargeableInteractionDefinition*       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_GetBlessTotemInteraction) == 0x000008, "Wrong alignment on BP_TotemBase_C_GetBlessTotemInteraction");
static_assert(sizeof(BP_TotemBase_C_GetBlessTotemInteraction) == 0x000008, "Wrong size on BP_TotemBase_C_GetBlessTotemInteraction");
static_assert(offsetof(BP_TotemBase_C_GetBlessTotemInteraction, ReturnValue) == 0x000000, "Member 'BP_TotemBase_C_GetBlessTotemInteraction::ReturnValue' has a wrong offset!");

// Function BP_TotemBase.BP_TotemBase_C.GetAkAudioComponent
// 0x0008 (0x0008 - 0x0000)
struct BP_TotemBase_C_GetAkAudioComponent final
{
public:
	class UAkComponent*                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_TotemBase_C_GetAkAudioComponent) == 0x000008, "Wrong alignment on BP_TotemBase_C_GetAkAudioComponent");
static_assert(sizeof(BP_TotemBase_C_GetAkAudioComponent) == 0x000008, "Wrong size on BP_TotemBase_C_GetAkAudioComponent");
static_assert(offsetof(BP_TotemBase_C_GetAkAudioComponent, ReturnValue) == 0x000000, "Member 'BP_TotemBase_C_GetAkAudioComponent::ReturnValue' has a wrong offset!");

}

