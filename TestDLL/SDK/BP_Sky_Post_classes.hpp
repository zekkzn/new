#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Sky_Post

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "DeadByDaylight_structs.hpp"
#include "DeadByDaylight_classes.hpp"
#include "LightingInterfaceEnum_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass BP_Sky_Post.BP_Sky_Post_C
// 0x0258 (0x0660 - 0x0408)
class ABP_Sky_Post_C : public ABaseSky
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0408(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UDBDCullDistanceVolumeComponent*        DBDCullDistanceVolume;                             // 0x0410(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   GMAdaptiveShadowMapSourceComponentSpawner;         // 0x0418(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UGMAdaptiveShadowMapSourceComponent*    AdaptiveShadowMapSource;                           // 0x0420(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             GodRayLight;                                       // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDirectionalLightComponent*             ShadowLight;                                       // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UExponentialHeightFogComponent*         HeightFog;                                         // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USkyLightComponent*                     LevelSkyLight;                                     // 0x0440(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UPostProcessComponent*                  LevelPostProcess;                                  // 0x0448(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MoonMesh;                                          // 0x0450(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SkyMax;                                            // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   SkyFollower;                                       // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        base;                                              // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	bool                                          Refresh_material;                                  // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_471[0x7];                                      // 0x0471(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADirectionalLight*                      Directional_light_actor;                           // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash)
	bool                                          Colors_determined_by_sun_position;                 // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Sun_height;                                        // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sun_brightness;                                    // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Horizon_Falloff;                                   // 0x0498(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Zenith_Color;                                      // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Horizon_color;                                     // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Cloud_color;                                       // 0x04C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Overall_Color;                                     // 0x04D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_speed;                                       // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Cloud_opacity;                                     // 0x04E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Stars_brightness;                                  // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Horizon_color_curve;                               // 0x04F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Zenith_color_curve;                                // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UCurveLinearColor*                      Cloud_color_curve;                                 // 0x0508(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	double                                        StartSkyFog;                                       // 0x0510(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DistanceSkyFog;                                    // 0x0518(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        SunRadius;                                         // 0x0520(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_Sky;                                           // 0x0528(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               MID_Moon;                                          // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, Transient, DisableEditOnInstance, NoDestructor, AdvancedDisplay, HasGetValueTypeHash)
	struct FLinearColor                           FadeToMistColour;                                  // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           FadeToBackgroundColour;                            // 0x0548(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        MoonStartOffset;                                   // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        PP_Contour___Intensity;                            // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, Interp, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           ATL_GrassColour;                                   // 0x0568(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FDBDPerPlatformFloat                   BasementExposure;                                  // 0x0578(0x0004)(Edit, BlueprintVisible, NoDestructor)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Direction_distance;                                // 0x0580(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Directional_speed;                                 // 0x0588(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Horizon_move_falloff_curve;                        // 0x0590(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Pole_to_Pole_Movement;                             // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Horizon_Move_amount;                               // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sky_orientation;                                   // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sky_saturation;                                    // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Sky_contrast;                                      // 0x05B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HDR_tint;                                          // 0x05C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HDR_power;                                         // 0x05C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        HDR_intensity;                                     // 0x05D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_radius;                                       // 0x05D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Horizon_Tint_Falloff;                              // 0x05E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        Moon_contrast;                                     // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Enable_Flowmap_Sky;                                // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             Sky_texture;                                       // 0x05F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Flowmap_Mask;                                      // 0x0600(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          TextureIsHDR;                                      // 0x0608(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 Horizon_Tint;                                      // 0x060C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FColor                                 Sky_Tint;                                          // 0x0610(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DreamInEditor;                                     // 0x0614(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          UpdateSky;                                         // 0x0615(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_616[0x2];                                      // 0x0616(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Fade_Radius_Color;                                 // 0x0618(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Should_sky_receive_fog;                            // 0x0628(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_629[0x7];                                      // 0x0629(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CondemnedStatusVignetteIntensity;                  // 0x0630(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DetectionZoneCylinderIntensity;                    // 0x0638(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DetectionZoneDecalIntensity;                       // 0x0640(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Use_additive_Flowmap;                              // 0x0648(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_649[0x7];                                      // 0x0649(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Flowmap_Strenght;                                  // 0x0650(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             Custom_Vector_Flowmap;                             // 0x0658(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

public:
	void Crash();
	void CreateDynamicMaterialInstances();
	void ExecuteUbergraph_BP_Sky_Post(int32 EntryPoint);
	void Fog(double Start, double Flat, double Opacity, double Density);
	void GetBasementPost(ELightingInterfaceEnum* BP_Type, struct FDBDPerPlatformFloat* Override);
	void GetCondemnedStatusVignetteIntensity(ELightingInterfaceEnum* BP_Type, double* CondemnedStatusIntensityOverride);
	void GetDetectionZoneIntensity(ELightingInterfaceEnum* BP_Type, double* DetectionZoneCylinderIntensityOverride, double* DetectionZoneDecalIntensityOverride);
	void GetLightingPost(TArray<class UPostProcessComponent*>* PostProcess, ELightingInterfaceEnum* BP_Type);
	class UPostProcessComponent* GetPostprocessComponent();
	void K2_OnReset();
	void OnAlphaChanged(float NewAlpha, class AActor* Other);
	void OnFadeBegin(class AActor* Other);
	void ReceiveBeginPlay();
	void Reset_Global_Parameters();
	void SetPostOverride(const struct FPostProcessSettings& PostSettings, class UPostProcessComponent* PostProcess);
	void ToggleLightingChange(bool ToggleOn, class FName ThemeName);
	void UpdateMaterials();
	void UpdateSunDirection();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"BP_Sky_Post_C">();
	}
	static class ABP_Sky_Post_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABP_Sky_Post_C>();
	}
};
static_assert(alignof(ABP_Sky_Post_C) == 0x000008, "Wrong alignment on ABP_Sky_Post_C");
static_assert(sizeof(ABP_Sky_Post_C) == 0x000660, "Wrong size on ABP_Sky_Post_C");
static_assert(offsetof(ABP_Sky_Post_C, UberGraphFrame) == 0x000408, "Member 'ABP_Sky_Post_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, DBDCullDistanceVolume) == 0x000410, "Member 'ABP_Sky_Post_C::DBDCullDistanceVolume' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, GMAdaptiveShadowMapSourceComponentSpawner) == 0x000418, "Member 'ABP_Sky_Post_C::GMAdaptiveShadowMapSourceComponentSpawner' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, AdaptiveShadowMapSource) == 0x000420, "Member 'ABP_Sky_Post_C::AdaptiveShadowMapSource' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, GodRayLight) == 0x000428, "Member 'ABP_Sky_Post_C::GodRayLight' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, ShadowLight) == 0x000430, "Member 'ABP_Sky_Post_C::ShadowLight' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, HeightFog) == 0x000438, "Member 'ABP_Sky_Post_C::HeightFog' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, LevelSkyLight) == 0x000440, "Member 'ABP_Sky_Post_C::LevelSkyLight' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, LevelPostProcess) == 0x000448, "Member 'ABP_Sky_Post_C::LevelPostProcess' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, MoonMesh) == 0x000450, "Member 'ABP_Sky_Post_C::MoonMesh' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, SkyMax) == 0x000458, "Member 'ABP_Sky_Post_C::SkyMax' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, SkyFollower) == 0x000460, "Member 'ABP_Sky_Post_C::SkyFollower' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, base) == 0x000468, "Member 'ABP_Sky_Post_C::base' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Refresh_material) == 0x000470, "Member 'ABP_Sky_Post_C::Refresh_material' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Directional_light_actor) == 0x000478, "Member 'ABP_Sky_Post_C::Directional_light_actor' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Colors_determined_by_sun_position) == 0x000480, "Member 'ABP_Sky_Post_C::Colors_determined_by_sun_position' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Sun_height) == 0x000488, "Member 'ABP_Sky_Post_C::Sun_height' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Sun_brightness) == 0x000490, "Member 'ABP_Sky_Post_C::Sun_brightness' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Horizon_Falloff) == 0x000498, "Member 'ABP_Sky_Post_C::Horizon_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Zenith_Color) == 0x0004A0, "Member 'ABP_Sky_Post_C::Zenith_Color' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Horizon_color) == 0x0004B0, "Member 'ABP_Sky_Post_C::Horizon_color' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Cloud_color) == 0x0004C0, "Member 'ABP_Sky_Post_C::Cloud_color' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Overall_Color) == 0x0004D0, "Member 'ABP_Sky_Post_C::Overall_Color' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Cloud_speed) == 0x0004E0, "Member 'ABP_Sky_Post_C::Cloud_speed' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Cloud_opacity) == 0x0004E8, "Member 'ABP_Sky_Post_C::Cloud_opacity' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Stars_brightness) == 0x0004F0, "Member 'ABP_Sky_Post_C::Stars_brightness' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Horizon_color_curve) == 0x0004F8, "Member 'ABP_Sky_Post_C::Horizon_color_curve' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Zenith_color_curve) == 0x000500, "Member 'ABP_Sky_Post_C::Zenith_color_curve' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Cloud_color_curve) == 0x000508, "Member 'ABP_Sky_Post_C::Cloud_color_curve' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, StartSkyFog) == 0x000510, "Member 'ABP_Sky_Post_C::StartSkyFog' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, DistanceSkyFog) == 0x000518, "Member 'ABP_Sky_Post_C::DistanceSkyFog' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, SunRadius) == 0x000520, "Member 'ABP_Sky_Post_C::SunRadius' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, MID_Sky) == 0x000528, "Member 'ABP_Sky_Post_C::MID_Sky' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, MID_Moon) == 0x000530, "Member 'ABP_Sky_Post_C::MID_Moon' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, FadeToMistColour) == 0x000538, "Member 'ABP_Sky_Post_C::FadeToMistColour' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, FadeToBackgroundColour) == 0x000548, "Member 'ABP_Sky_Post_C::FadeToBackgroundColour' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, MoonStartOffset) == 0x000558, "Member 'ABP_Sky_Post_C::MoonStartOffset' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, PP_Contour___Intensity) == 0x000560, "Member 'ABP_Sky_Post_C::PP_Contour___Intensity' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, ATL_GrassColour) == 0x000568, "Member 'ABP_Sky_Post_C::ATL_GrassColour' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, BasementExposure) == 0x000578, "Member 'ABP_Sky_Post_C::BasementExposure' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Direction_distance) == 0x000580, "Member 'ABP_Sky_Post_C::Direction_distance' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Directional_speed) == 0x000588, "Member 'ABP_Sky_Post_C::Directional_speed' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Horizon_move_falloff_curve) == 0x000590, "Member 'ABP_Sky_Post_C::Horizon_move_falloff_curve' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Pole_to_Pole_Movement) == 0x000598, "Member 'ABP_Sky_Post_C::Pole_to_Pole_Movement' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Horizon_Move_amount) == 0x0005A0, "Member 'ABP_Sky_Post_C::Horizon_Move_amount' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Sky_orientation) == 0x0005A8, "Member 'ABP_Sky_Post_C::Sky_orientation' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Sky_saturation) == 0x0005B0, "Member 'ABP_Sky_Post_C::Sky_saturation' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Sky_contrast) == 0x0005B8, "Member 'ABP_Sky_Post_C::Sky_contrast' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, HDR_tint) == 0x0005C0, "Member 'ABP_Sky_Post_C::HDR_tint' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, HDR_power) == 0x0005C8, "Member 'ABP_Sky_Post_C::HDR_power' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, HDR_intensity) == 0x0005D0, "Member 'ABP_Sky_Post_C::HDR_intensity' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Moon_radius) == 0x0005D8, "Member 'ABP_Sky_Post_C::Moon_radius' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Horizon_Tint_Falloff) == 0x0005E0, "Member 'ABP_Sky_Post_C::Horizon_Tint_Falloff' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Moon_contrast) == 0x0005E8, "Member 'ABP_Sky_Post_C::Moon_contrast' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Enable_Flowmap_Sky) == 0x0005F0, "Member 'ABP_Sky_Post_C::Enable_Flowmap_Sky' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Sky_texture) == 0x0005F8, "Member 'ABP_Sky_Post_C::Sky_texture' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Flowmap_Mask) == 0x000600, "Member 'ABP_Sky_Post_C::Flowmap_Mask' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, TextureIsHDR) == 0x000608, "Member 'ABP_Sky_Post_C::TextureIsHDR' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Horizon_Tint) == 0x00060C, "Member 'ABP_Sky_Post_C::Horizon_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Sky_Tint) == 0x000610, "Member 'ABP_Sky_Post_C::Sky_Tint' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, DreamInEditor) == 0x000614, "Member 'ABP_Sky_Post_C::DreamInEditor' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, UpdateSky) == 0x000615, "Member 'ABP_Sky_Post_C::UpdateSky' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Fade_Radius_Color) == 0x000618, "Member 'ABP_Sky_Post_C::Fade_Radius_Color' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Should_sky_receive_fog) == 0x000628, "Member 'ABP_Sky_Post_C::Should_sky_receive_fog' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, CondemnedStatusVignetteIntensity) == 0x000630, "Member 'ABP_Sky_Post_C::CondemnedStatusVignetteIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, DetectionZoneCylinderIntensity) == 0x000638, "Member 'ABP_Sky_Post_C::DetectionZoneCylinderIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, DetectionZoneDecalIntensity) == 0x000640, "Member 'ABP_Sky_Post_C::DetectionZoneDecalIntensity' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Use_additive_Flowmap) == 0x000648, "Member 'ABP_Sky_Post_C::Use_additive_Flowmap' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Flowmap_Strenght) == 0x000650, "Member 'ABP_Sky_Post_C::Flowmap_Strenght' has a wrong offset!");
static_assert(offsetof(ABP_Sky_Post_C, Custom_Vector_Flowmap) == 0x000658, "Member 'ABP_Sky_Post_C::Custom_Vector_Flowmap' has a wrong offset!");

}

