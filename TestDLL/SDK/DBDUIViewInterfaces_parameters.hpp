#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDUIViewInterfaces

#include "Basic.hpp"

#include "DBDUIViewInterfaces_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "InputCore_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function DBDUIViewInterfaces.AddonViewInterface.SetData
// 0x0070 (0x0070 - 0x0000)
struct AddonViewInterface_SetData final
{
public:
	struct FAddonViewData                         BaseLoadoutPartViewData;                           // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AddonViewInterface_SetData) == 0x000008, "Wrong alignment on AddonViewInterface_SetData");
static_assert(sizeof(AddonViewInterface_SetData) == 0x000070, "Wrong size on AddonViewInterface_SetData");
static_assert(offsetof(AddonViewInterface_SetData, BaseLoadoutPartViewData) == 0x000000, "Member 'AddonViewInterface_SetData::BaseLoadoutPartViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.SetData
// 0x0018 (0x0018 - 0x0000)
struct StoreCharactersSelectionViewInterface_SetData final
{
public:
	struct FStoreCharactersSelectionViewData      Data;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSelectionViewInterface_SetData) == 0x000008, "Wrong alignment on StoreCharactersSelectionViewInterface_SetData");
static_assert(sizeof(StoreCharactersSelectionViewInterface_SetData) == 0x000018, "Wrong size on StoreCharactersSelectionViewInterface_SetData");
static_assert(offsetof(StoreCharactersSelectionViewInterface_SetData, Data) == 0x000000, "Member 'StoreCharactersSelectionViewInterface_SetData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.SetKillerPower
// 0x0008 (0x0008 - 0x0000)
struct StoreCharactersSelectionViewInterface_SetKillerPower final
{
public:
	class UMenuPowerViewData*                     KillerPowerViewData;                               // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSelectionViewInterface_SetKillerPower) == 0x000008, "Wrong alignment on StoreCharactersSelectionViewInterface_SetKillerPower");
static_assert(sizeof(StoreCharactersSelectionViewInterface_SetKillerPower) == 0x000008, "Wrong size on StoreCharactersSelectionViewInterface_SetKillerPower");
static_assert(offsetof(StoreCharactersSelectionViewInterface_SetKillerPower, KillerPowerViewData) == 0x000000, "Member 'StoreCharactersSelectionViewInterface_SetKillerPower::KillerPowerViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.SetPerksData
// 0x0018 (0x0018 - 0x0000)
struct StoreCharactersSelectionViewInterface_SetPerksData final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMenuPerkViewData*>              Perks;                                             // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSelectionViewInterface_SetPerksData) == 0x000008, "Wrong alignment on StoreCharactersSelectionViewInterface_SetPerksData");
static_assert(sizeof(StoreCharactersSelectionViewInterface_SetPerksData) == 0x000018, "Wrong size on StoreCharactersSelectionViewInterface_SetPerksData");
static_assert(offsetof(StoreCharactersSelectionViewInterface_SetPerksData, Role) == 0x000000, "Member 'StoreCharactersSelectionViewInterface_SetPerksData::Role' has a wrong offset!");
static_assert(offsetof(StoreCharactersSelectionViewInterface_SetPerksData, Perks) == 0x000008, "Member 'StoreCharactersSelectionViewInterface_SetPerksData::Perks' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.UpdateSelectedCharacter
// 0x0008 (0x0008 - 0x0000)
struct StoreCharactersSelectionViewInterface_UpdateSelectedCharacter final
{
public:
	int32                                         SelectedCharacterIndex;                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ScrollToSelection;                                 // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreCharactersSelectionViewInterface_UpdateSelectedCharacter) == 0x000004, "Wrong alignment on StoreCharactersSelectionViewInterface_UpdateSelectedCharacter");
static_assert(sizeof(StoreCharactersSelectionViewInterface_UpdateSelectedCharacter) == 0x000008, "Wrong size on StoreCharactersSelectionViewInterface_UpdateSelectedCharacter");
static_assert(offsetof(StoreCharactersSelectionViewInterface_UpdateSelectedCharacter, SelectedCharacterIndex) == 0x000000, "Member 'StoreCharactersSelectionViewInterface_UpdateSelectedCharacter::SelectedCharacterIndex' has a wrong offset!");
static_assert(offsetof(StoreCharactersSelectionViewInterface_UpdateSelectedCharacter, ScrollToSelection) == 0x000004, "Member 'StoreCharactersSelectionViewInterface_UpdateSelectedCharacter::ScrollToSelection' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.GetSearchBarViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersSelectionViewInterface_GetSearchBarViewInterface final
{
public:
	TScriptInterface<class ISearchBarViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSelectionViewInterface_GetSearchBarViewInterface) == 0x000008, "Wrong alignment on StoreCharactersSelectionViewInterface_GetSearchBarViewInterface");
static_assert(sizeof(StoreCharactersSelectionViewInterface_GetSearchBarViewInterface) == 0x000010, "Wrong size on StoreCharactersSelectionViewInterface_GetSearchBarViewInterface");
static_assert(offsetof(StoreCharactersSelectionViewInterface_GetSearchBarViewInterface, ReturnValue) == 0x000000, "Member 'StoreCharactersSelectionViewInterface_GetSearchBarViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersSelectionViewInterface.GetStoreCharactersFilterInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersSelectionViewInterface_GetStoreCharactersFilterInterface final
{
public:
	TScriptInterface<class IStoreCharactersFilterViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersSelectionViewInterface_GetStoreCharactersFilterInterface) == 0x000008, "Wrong alignment on StoreCharactersSelectionViewInterface_GetStoreCharactersFilterInterface");
static_assert(sizeof(StoreCharactersSelectionViewInterface_GetStoreCharactersFilterInterface) == 0x000010, "Wrong size on StoreCharactersSelectionViewInterface_GetStoreCharactersFilterInterface");
static_assert(offsetof(StoreCharactersSelectionViewInterface_GetStoreCharactersFilterInterface, ReturnValue) == 0x000000, "Member 'StoreCharactersSelectionViewInterface_GetStoreCharactersFilterInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.GlobalProcessingIconViewInterface.SetGlobalLoadingIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct GlobalProcessingIconViewInterface_SetGlobalLoadingIconVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalProcessingIconViewInterface_SetGlobalLoadingIconVisibility) == 0x000001, "Wrong alignment on GlobalProcessingIconViewInterface_SetGlobalLoadingIconVisibility");
static_assert(sizeof(GlobalProcessingIconViewInterface_SetGlobalLoadingIconVisibility) == 0x000001, "Wrong size on GlobalProcessingIconViewInterface_SetGlobalLoadingIconVisibility");
static_assert(offsetof(GlobalProcessingIconViewInterface_SetGlobalLoadingIconVisibility, IsVisible) == 0x000000, "Member 'GlobalProcessingIconViewInterface_SetGlobalLoadingIconVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.GlobalProcessingIconViewInterface.SetGlobalSavingIconVisibility
// 0x0001 (0x0001 - 0x0000)
struct GlobalProcessingIconViewInterface_SetGlobalSavingIconVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GlobalProcessingIconViewInterface_SetGlobalSavingIconVisibility) == 0x000001, "Wrong alignment on GlobalProcessingIconViewInterface_SetGlobalSavingIconVisibility");
static_assert(sizeof(GlobalProcessingIconViewInterface_SetGlobalSavingIconVisibility) == 0x000001, "Wrong size on GlobalProcessingIconViewInterface_SetGlobalSavingIconVisibility");
static_assert(offsetof(GlobalProcessingIconViewInterface_SetGlobalSavingIconVisibility, IsVisible) == 0x000000, "Member 'GlobalProcessingIconViewInterface_SetGlobalSavingIconVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.KillerStatusData.IsEqual
// 0x0010 (0x0010 - 0x0000)
struct KillerStatusData_IsEqual final
{
public:
	const class UKillerStatusData*                Other;                                             // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(KillerStatusData_IsEqual) == 0x000008, "Wrong alignment on KillerStatusData_IsEqual");
static_assert(sizeof(KillerStatusData_IsEqual) == 0x000010, "Wrong size on KillerStatusData_IsEqual");
static_assert(offsetof(KillerStatusData_IsEqual, Other) == 0x000000, "Member 'KillerStatusData_IsEqual::Other' has a wrong offset!");
static_assert(offsetof(KillerStatusData_IsEqual, ReturnValue) == 0x000008, "Member 'KillerStatusData_IsEqual::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.AntiCampSelfUnhookMeterViewInterface.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct AntiCampSelfUnhookMeterViewInterface_SetProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookMeterViewInterface_SetProgress) == 0x000004, "Wrong alignment on AntiCampSelfUnhookMeterViewInterface_SetProgress");
static_assert(sizeof(AntiCampSelfUnhookMeterViewInterface_SetProgress) == 0x000004, "Wrong size on AntiCampSelfUnhookMeterViewInterface_SetProgress");
static_assert(offsetof(AntiCampSelfUnhookMeterViewInterface_SetProgress, Progress) == 0x000000, "Member 'AntiCampSelfUnhookMeterViewInterface_SetProgress::Progress' has a wrong offset!");

// Function DBDUIViewInterfaces.AntiCampSelfUnhookMeterViewInterface.SetState
// 0x0001 (0x0001 - 0x0000)
struct AntiCampSelfUnhookMeterViewInterface_SetState final
{
public:
	EAntiCampSelfUnhookMeterState                 NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AntiCampSelfUnhookMeterViewInterface_SetState) == 0x000001, "Wrong alignment on AntiCampSelfUnhookMeterViewInterface_SetState");
static_assert(sizeof(AntiCampSelfUnhookMeterViewInterface_SetState) == 0x000001, "Wrong size on AntiCampSelfUnhookMeterViewInterface_SetState");
static_assert(offsetof(AntiCampSelfUnhookMeterViewInterface_SetState, NewState) == 0x000000, "Member 'AntiCampSelfUnhookMeterViewInterface_SetState::NewState' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveCompendiumViewInterface.SetPastTomesViewData
// 0x0010 (0x0010 - 0x0000)
struct ArchiveCompendiumViewInterface_SetPastTomesViewData final
{
public:
	TArray<struct FCompendiumButtonData>          PastStoryButtonData;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveCompendiumViewInterface_SetPastTomesViewData) == 0x000008, "Wrong alignment on ArchiveCompendiumViewInterface_SetPastTomesViewData");
static_assert(sizeof(ArchiveCompendiumViewInterface_SetPastTomesViewData) == 0x000010, "Wrong size on ArchiveCompendiumViewInterface_SetPastTomesViewData");
static_assert(offsetof(ArchiveCompendiumViewInterface_SetPastTomesViewData, PastStoryButtonData) == 0x000000, "Member 'ArchiveCompendiumViewInterface_SetPastTomesViewData::PastStoryButtonData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveEditorViewInterface.DisplayEditorSaving
// 0x0010 (0x0010 - 0x0000)
struct ArchiveEditorViewInterface_DisplayEditorSaving final
{
public:
	class FString                                 Path;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveEditorViewInterface_DisplayEditorSaving) == 0x000008, "Wrong alignment on ArchiveEditorViewInterface_DisplayEditorSaving");
static_assert(sizeof(ArchiveEditorViewInterface_DisplayEditorSaving) == 0x000010, "Wrong size on ArchiveEditorViewInterface_DisplayEditorSaving");
static_assert(offsetof(ArchiveEditorViewInterface_DisplayEditorSaving, Path) == 0x000000, "Member 'ArchiveEditorViewInterface_DisplayEditorSaving::Path' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetTextVisibility
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerViewInterface_SetTextVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerViewInterface_SetTextVisibility) == 0x000001, "Wrong alignment on ArchiveImageViewerViewInterface_SetTextVisibility");
static_assert(sizeof(ArchiveImageViewerViewInterface_SetTextVisibility) == 0x000001, "Wrong size on ArchiveImageViewerViewInterface_SetTextVisibility");
static_assert(offsetof(ArchiveImageViewerViewInterface_SetTextVisibility, Visible) == 0x000000, "Member 'ArchiveImageViewerViewInterface_SetTextVisibility::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerViewInterface_SetVoiceOverAutoplay final
{
public:
	bool                                          VoiceOverAutoplay;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerViewInterface_SetVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveImageViewerViewInterface_SetVoiceOverAutoplay");
static_assert(sizeof(ArchiveImageViewerViewInterface_SetVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveImageViewerViewInterface_SetVoiceOverAutoplay");
static_assert(offsetof(ArchiveImageViewerViewInterface_SetVoiceOverAutoplay, VoiceOverAutoplay) == 0x000000, "Member 'ArchiveImageViewerViewInterface_SetVoiceOverAutoplay::VoiceOverAutoplay' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.SetVoiceOverPlaying
// 0x0001 (0x0001 - 0x0000)
struct ArchiveImageViewerViewInterface_SetVoiceOverPlaying final
{
public:
	bool                                          VoiceOverPlaying;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerViewInterface_SetVoiceOverPlaying) == 0x000001, "Wrong alignment on ArchiveImageViewerViewInterface_SetVoiceOverPlaying");
static_assert(sizeof(ArchiveImageViewerViewInterface_SetVoiceOverPlaying) == 0x000001, "Wrong size on ArchiveImageViewerViewInterface_SetVoiceOverPlaying");
static_assert(offsetof(ArchiveImageViewerViewInterface_SetVoiceOverPlaying, VoiceOverPlaying) == 0x000000, "Member 'ArchiveImageViewerViewInterface_SetVoiceOverPlaying::VoiceOverPlaying' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveImageViewerViewInterface.UpdateContent
// 0x0078 (0x0078 - 0x0000)
struct ArchiveImageViewerViewInterface_UpdateContent final
{
public:
	struct FArchivesVignetteEntryViewData         Data;                                              // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveImageViewerViewInterface_UpdateContent) == 0x000008, "Wrong alignment on ArchiveImageViewerViewInterface_UpdateContent");
static_assert(sizeof(ArchiveImageViewerViewInterface_UpdateContent) == 0x000078, "Wrong size on ArchiveImageViewerViewInterface_UpdateContent");
static_assert(offsetof(ArchiveImageViewerViewInterface_UpdateContent, Data) == 0x000000, "Member 'ArchiveImageViewerViewInterface_UpdateContent::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.OnImageViewerVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay final
{
public:
	bool                                          Autoplay;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay");
static_assert(sizeof(ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay");
static_assert(offsetof(ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay, Autoplay) == 0x000000, "Member 'ArchiveJournalViewInterface_OnImageViewerVoiceOverAutoplay::Autoplay' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetArrowButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_SetArrowButtonEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetArrowButtonEnabled) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_SetArrowButtonEnabled");
static_assert(sizeof(ArchiveJournalViewInterface_SetArrowButtonEnabled) == 0x000001, "Wrong size on ArchiveJournalViewInterface_SetArrowButtonEnabled");
static_assert(offsetof(ArchiveJournalViewInterface_SetArrowButtonEnabled, IsEnabled) == 0x000000, "Member 'ArchiveJournalViewInterface_SetArrowButtonEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetCinematicButtonsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_SetCinematicButtonsEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetCinematicButtonsEnabled) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_SetCinematicButtonsEnabled");
static_assert(sizeof(ArchiveJournalViewInterface_SetCinematicButtonsEnabled) == 0x000001, "Wrong size on ArchiveJournalViewInterface_SetCinematicButtonsEnabled");
static_assert(offsetof(ArchiveJournalViewInterface_SetCinematicButtonsEnabled, Enabled) == 0x000000, "Member 'ArchiveJournalViewInterface_SetCinematicButtonsEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetEntryData
// 0x0078 (0x0078 - 0x0000)
struct ArchiveJournalViewInterface_SetEntryData final
{
public:
	struct FArchivesVignetteEntryViewData         EntryViewData;                                     // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetEntryData) == 0x000008, "Wrong alignment on ArchiveJournalViewInterface_SetEntryData");
static_assert(sizeof(ArchiveJournalViewInterface_SetEntryData) == 0x000078, "Wrong size on ArchiveJournalViewInterface_SetEntryData");
static_assert(offsetof(ArchiveJournalViewInterface_SetEntryData, EntryViewData) == 0x000000, "Member 'ArchiveJournalViewInterface_SetEntryData::EntryViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteData
// 0x0060 (0x0060 - 0x0000)
struct ArchiveJournalViewInterface_SetVignetteData final
{
public:
	struct FArchivesVignetteViewData              VignetteViewData;                                  // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVignetteData) == 0x000008, "Wrong alignment on ArchiveJournalViewInterface_SetVignetteData");
static_assert(sizeof(ArchiveJournalViewInterface_SetVignetteData) == 0x000060, "Wrong size on ArchiveJournalViewInterface_SetVignetteData");
static_assert(offsetof(ArchiveJournalViewInterface_SetVignetteData, VignetteViewData) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVignetteData::VignetteViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteInputsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_SetVignetteInputsEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVignetteInputsEnabled) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_SetVignetteInputsEnabled");
static_assert(sizeof(ArchiveJournalViewInterface_SetVignetteInputsEnabled) == 0x000001, "Wrong size on ArchiveJournalViewInterface_SetVignetteInputsEnabled");
static_assert(offsetof(ArchiveJournalViewInterface_SetVignetteInputsEnabled, Enabled) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVignetteInputsEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVignetteList
// 0x0010 (0x0010 - 0x0000)
struct ArchiveJournalViewInterface_SetVignetteList final
{
public:
	TArray<struct FArchivesVignetteViewData>      VignetteDataList;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVignetteList) == 0x000008, "Wrong alignment on ArchiveJournalViewInterface_SetVignetteList");
static_assert(sizeof(ArchiveJournalViewInterface_SetVignetteList) == 0x000010, "Wrong size on ArchiveJournalViewInterface_SetVignetteList");
static_assert(offsetof(ArchiveJournalViewInterface_SetVignetteList, VignetteDataList) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVignetteList::VignetteDataList' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVoiceOverAutoplay
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_SetVoiceOverAutoplay final
{
public:
	bool                                          VoiceOverAutoplay;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVoiceOverAutoplay) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_SetVoiceOverAutoplay");
static_assert(sizeof(ArchiveJournalViewInterface_SetVoiceOverAutoplay) == 0x000001, "Wrong size on ArchiveJournalViewInterface_SetVoiceOverAutoplay");
static_assert(offsetof(ArchiveJournalViewInterface_SetVoiceOverAutoplay, VoiceOverAutoplay) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVoiceOverAutoplay::VoiceOverAutoplay' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveJournalViewInterface.SetVoiceOverPlaying
// 0x0001 (0x0001 - 0x0000)
struct ArchiveJournalViewInterface_SetVoiceOverPlaying final
{
public:
	bool                                          VoiceOverPlaying;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveJournalViewInterface_SetVoiceOverPlaying) == 0x000001, "Wrong alignment on ArchiveJournalViewInterface_SetVoiceOverPlaying");
static_assert(sizeof(ArchiveJournalViewInterface_SetVoiceOverPlaying) == 0x000001, "Wrong size on ArchiveJournalViewInterface_SetVoiceOverPlaying");
static_assert(offsetof(ArchiveJournalViewInterface_SetVoiceOverPlaying, VoiceOverPlaying) == 0x000000, "Member 'ArchiveJournalViewInterface_SetVoiceOverPlaying::VoiceOverPlaying' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.GoToNextLevel
// 0x0004 (0x0004 - 0x0000)
struct ArchiveLevelProgressionViewInterface_GoToNextLevel final
{
public:
	int32                                         LevelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_GoToNextLevel) == 0x000004, "Wrong alignment on ArchiveLevelProgressionViewInterface_GoToNextLevel");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_GoToNextLevel) == 0x000004, "Wrong size on ArchiveLevelProgressionViewInterface_GoToNextLevel");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_GoToNextLevel, LevelIndex) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_GoToNextLevel::LevelIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetActiveLevel
// 0x0008 (0x0008 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetActiveLevel final
{
public:
	int32                                         LevelIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PerformAction;                                     // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetActiveLevel) == 0x000004, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetActiveLevel");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetActiveLevel) == 0x000008, "Wrong size on ArchiveLevelProgressionViewInterface_SetActiveLevel");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetActiveLevel, LevelIndex) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetActiveLevel::LevelIndex' has a wrong offset!");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetActiveLevel, PerformAction) == 0x000004, "Member 'ArchiveLevelProgressionViewInterface_SetActiveLevel::PerformAction' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetLevelSelectorEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled) == 0x000001, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled) == 0x000001, "Wrong size on ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled, Enabled) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetLevelSelectorEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetLevelSelectorVisibility
// 0x0001 (0x0001 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility) == 0x000001, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility) == 0x000001, "Wrong size on ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility, IsVisible) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetLevelSelectorVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetRewardsContainerVisibility
// 0x0001 (0x0001 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility) == 0x000001, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility) == 0x000001, "Wrong size on ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility, IsVisible) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetRewardsContainerVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetTomeLevelsData
// 0x0018 (0x0018 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetTomeLevelsData final
{
public:
	TArray<class UArchiveStoryLevelViewData*>     LevelsData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedLevel;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetTomeLevelsData) == 0x000008, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetTomeLevelsData");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetTomeLevelsData) == 0x000018, "Wrong size on ArchiveLevelProgressionViewInterface_SetTomeLevelsData");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetTomeLevelsData, LevelsData) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetTomeLevelsData::LevelsData' has a wrong offset!");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetTomeLevelsData, SelectedLevel) == 0x000010, "Member 'ArchiveLevelProgressionViewInterface_SetTomeLevelsData::SelectedLevel' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.SetTomeRewardsData
// 0x0018 (0x0018 - 0x0000)
struct ArchiveLevelProgressionViewInterface_SetTomeRewardsData final
{
public:
	TArray<struct FRewardWrapperViewData>         RewardsData;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          AreLocked;                                         // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_SetTomeRewardsData) == 0x000008, "Wrong alignment on ArchiveLevelProgressionViewInterface_SetTomeRewardsData");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_SetTomeRewardsData) == 0x000018, "Wrong size on ArchiveLevelProgressionViewInterface_SetTomeRewardsData");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetTomeRewardsData, RewardsData) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_SetTomeRewardsData::RewardsData' has a wrong offset!");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_SetTomeRewardsData, AreLocked) == 0x000010, "Member 'ArchiveLevelProgressionViewInterface_SetTomeRewardsData::AreLocked' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveLevelProgressionViewInterface.UpdateLevelStatus
// 0x0008 (0x0008 - 0x0000)
struct ArchiveLevelProgressionViewInterface_UpdateLevelStatus final
{
public:
	int32                                         Level;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchivesStoryLevelStatus                     Status;                                            // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveLevelProgressionViewInterface_UpdateLevelStatus) == 0x000004, "Wrong alignment on ArchiveLevelProgressionViewInterface_UpdateLevelStatus");
static_assert(sizeof(ArchiveLevelProgressionViewInterface_UpdateLevelStatus) == 0x000008, "Wrong size on ArchiveLevelProgressionViewInterface_UpdateLevelStatus");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_UpdateLevelStatus, Level) == 0x000000, "Member 'ArchiveLevelProgressionViewInterface_UpdateLevelStatus::Level' has a wrong offset!");
static_assert(offsetof(ArchiveLevelProgressionViewInterface_UpdateLevelStatus, Status) == 0x000004, "Member 'ArchiveLevelProgressionViewInterface_UpdateLevelStatus::Status' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ClearChallengeReminderData
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_ClearChallengeReminderData final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_ClearChallengeReminderData) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_ClearChallengeReminderData");
static_assert(sizeof(ArchiveMenuViewInterface_ClearChallengeReminderData) == 0x000001, "Wrong size on ArchiveMenuViewInterface_ClearChallengeReminderData");
static_assert(offsetof(ArchiveMenuViewInterface_ClearChallengeReminderData, Role) == 0x000000, "Member 'ArchiveMenuViewInterface_ClearChallengeReminderData::Role' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetChallengeReminderData
// 0x00E8 (0x00E8 - 0x0000)
struct ArchiveMenuViewInterface_SetChallengeReminderData final
{
public:
	struct FArchiveChallengeReminderViewData      Data;                                              // 0x0000(0x00D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x00D0(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedsAnimation;                                    // 0x00D1(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x6];                                       // 0x00D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              AnimationOriginalPosition;                         // 0x00D8(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetChallengeReminderData) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetChallengeReminderData");
static_assert(sizeof(ArchiveMenuViewInterface_SetChallengeReminderData) == 0x0000E8, "Wrong size on ArchiveMenuViewInterface_SetChallengeReminderData");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderData, Data) == 0x000000, "Member 'ArchiveMenuViewInterface_SetChallengeReminderData::Data' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderData, Role) == 0x0000D0, "Member 'ArchiveMenuViewInterface_SetChallengeReminderData::Role' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderData, NeedsAnimation) == 0x0000D1, "Member 'ArchiveMenuViewInterface_SetChallengeReminderData::NeedsAnimation' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderData, AnimationOriginalPosition) == 0x0000D8, "Member 'ArchiveMenuViewInterface_SetChallengeReminderData::AnimationOriginalPosition' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetChallengeReminderVisibility
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetChallengeReminderVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetChallengeReminderVisibility) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetChallengeReminderVisibility");
static_assert(sizeof(ArchiveMenuViewInterface_SetChallengeReminderVisibility) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetChallengeReminderVisibility");
static_assert(offsetof(ArchiveMenuViewInterface_SetChallengeReminderVisibility, IsVisible) == 0x000000, "Member 'ArchiveMenuViewInterface_SetChallengeReminderVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetControllerElementsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetControllerElementsEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetControllerElementsEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetControllerElementsEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetControllerElementsEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetControllerElementsEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetControllerElementsEnabled, Enabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetControllerElementsEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetDisplayStandAreaEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetDisplayStandAreaEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetDisplayStandAreaEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetDisplayStandAreaEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetDisplayStandAreaEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetDisplayStandAreaEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetDisplayStandAreaEnabled, Enabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetDisplayStandAreaEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetEventLabel
// 0x0010 (0x0010 - 0x0000)
struct ArchiveMenuViewInterface_SetEventLabel final
{
public:
	class FString                                 EventLabel;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetEventLabel) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetEventLabel");
static_assert(sizeof(ArchiveMenuViewInterface_SetEventLabel) == 0x000010, "Wrong size on ArchiveMenuViewInterface_SetEventLabel");
static_assert(offsetof(ArchiveMenuViewInterface_SetEventLabel, EventLabel) == 0x000000, "Member 'ArchiveMenuViewInterface_SetEventLabel::EventLabel' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetInfoButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetInfoButtonEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetInfoButtonEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetInfoButtonEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetInfoButtonEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetInfoButtonEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetInfoButtonEnabled, IsEnabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetInfoButtonEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetInfoButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetInfoButtonVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetInfoButtonVisible) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetInfoButtonVisible");
static_assert(sizeof(ArchiveMenuViewInterface_SetInfoButtonVisible) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetInfoButtonVisible");
static_assert(offsetof(ArchiveMenuViewInterface_SetInfoButtonVisible, IsVisible) == 0x000000, "Member 'ArchiveMenuViewInterface_SetInfoButtonVisible::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetMenuState final
{
public:
	EArchiveMenuState                             MenuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetMenuState) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetMenuState");
static_assert(sizeof(ArchiveMenuViewInterface_SetMenuState) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetMenuState");
static_assert(offsetof(ArchiveMenuViewInterface_SetMenuState, MenuState) == 0x000000, "Member 'ArchiveMenuViewInterface_SetMenuState::MenuState' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetQuestNodeHoverEffect
// 0x0002 (0x0002 - 0x0000)
struct ArchiveMenuViewInterface_SetQuestNodeHoverEffect final
{
public:
	EPlayerRole                                   Role;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsHovered;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetQuestNodeHoverEffect) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetQuestNodeHoverEffect");
static_assert(sizeof(ArchiveMenuViewInterface_SetQuestNodeHoverEffect) == 0x000002, "Wrong size on ArchiveMenuViewInterface_SetQuestNodeHoverEffect");
static_assert(offsetof(ArchiveMenuViewInterface_SetQuestNodeHoverEffect, Role) == 0x000000, "Member 'ArchiveMenuViewInterface_SetQuestNodeHoverEffect::Role' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetQuestNodeHoverEffect, IsHovered) == 0x000001, "Member 'ArchiveMenuViewInterface_SetQuestNodeHoverEffect::IsHovered' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRemainingTime
// 0x0018 (0x0018 - 0x0000)
struct ArchiveMenuViewInterface_SetRemainingTime final
{
public:
	class FString                                 RemainingTime;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsMoreThanWarningThreshold;                        // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EArchiveMenuState                             MenuState;                                         // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveMenuViewInterface_SetRemainingTime) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetRemainingTime");
static_assert(sizeof(ArchiveMenuViewInterface_SetRemainingTime) == 0x000018, "Wrong size on ArchiveMenuViewInterface_SetRemainingTime");
static_assert(offsetof(ArchiveMenuViewInterface_SetRemainingTime, RemainingTime) == 0x000000, "Member 'ArchiveMenuViewInterface_SetRemainingTime::RemainingTime' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetRemainingTime, IsMoreThanWarningThreshold) == 0x000010, "Member 'ArchiveMenuViewInterface_SetRemainingTime::IsMoreThanWarningThreshold' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetRemainingTime, MenuState) == 0x000011, "Member 'ArchiveMenuViewInterface_SetRemainingTime::MenuState' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRemainingTimeVisible
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetRemainingTimeVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetRemainingTimeVisible) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetRemainingTimeVisible");
static_assert(sizeof(ArchiveMenuViewInterface_SetRemainingTimeVisible) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetRemainingTimeVisible");
static_assert(offsetof(ArchiveMenuViewInterface_SetRemainingTimeVisible, IsVisible) == 0x000000, "Member 'ArchiveMenuViewInterface_SetRemainingTimeVisible::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetReminderSlotsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetReminderSlotsEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetReminderSlotsEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetReminderSlotsEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetReminderSlotsEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetReminderSlotsEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetReminderSlotsEnabled, Enabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetReminderSlotsEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetRiftPackButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetRiftPackButtonEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetRiftPackButtonEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetRiftPackButtonEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetRiftPackButtonEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetRiftPackButtonEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetRiftPackButtonEnabled, IsEnabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetRiftPackButtonEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetSubtitle
// 0x0018 (0x0018 - 0x0000)
struct ArchiveMenuViewInterface_SetSubtitle final
{
public:
	class FText                                   Subtitle;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetSubtitle) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetSubtitle");
static_assert(sizeof(ArchiveMenuViewInterface_SetSubtitle) == 0x000018, "Wrong size on ArchiveMenuViewInterface_SetSubtitle");
static_assert(offsetof(ArchiveMenuViewInterface_SetSubtitle, Subtitle) == 0x000000, "Member 'ArchiveMenuViewInterface_SetSubtitle::Subtitle' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetSubtitleVisible
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetSubtitleVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetSubtitleVisible) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetSubtitleVisible");
static_assert(sizeof(ArchiveMenuViewInterface_SetSubtitleVisible) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetSubtitleVisible");
static_assert(offsetof(ArchiveMenuViewInterface_SetSubtitleVisible, IsVisible) == 0x000000, "Member 'ArchiveMenuViewInterface_SetSubtitleVisible::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabEnabled
// 0x0008 (0x0008 - 0x0000)
struct ArchiveMenuViewInterface_SetTabEnabled final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveMenuViewInterface_SetTabEnabled) == 0x000004, "Wrong alignment on ArchiveMenuViewInterface_SetTabEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetTabEnabled) == 0x000008, "Wrong size on ArchiveMenuViewInterface_SetTabEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabEnabled, Key) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTabEnabled::Key' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabEnabled, Enabled) == 0x000004, "Member 'ArchiveMenuViewInterface_SetTabEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabsData
// 0x0018 (0x0018 - 0x0000)
struct ArchiveMenuViewInterface_SetTabsData final
{
public:
	TArray<struct FTabWidgetData>                 TabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedKey;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveMenuViewInterface_SetTabsData) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetTabsData");
static_assert(sizeof(ArchiveMenuViewInterface_SetTabsData) == 0x000018, "Wrong size on ArchiveMenuViewInterface_SetTabsData");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabsData, TabsData) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTabsData::TabsData' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabsData, SelectedKey) == 0x000010, "Member 'ArchiveMenuViewInterface_SetTabsData::SelectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabSelected
// 0x0004 (0x0004 - 0x0000)
struct ArchiveMenuViewInterface_SetTabSelected final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetTabSelected) == 0x000004, "Wrong alignment on ArchiveMenuViewInterface_SetTabSelected");
static_assert(sizeof(ArchiveMenuViewInterface_SetTabSelected) == 0x000004, "Wrong size on ArchiveMenuViewInterface_SetTabSelected");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabSelected, Key) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTabSelected::Key' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTabsInputsEnabled
// 0x0001 (0x0001 - 0x0000)
struct ArchiveMenuViewInterface_SetTabsInputsEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetTabsInputsEnabled) == 0x000001, "Wrong alignment on ArchiveMenuViewInterface_SetTabsInputsEnabled");
static_assert(sizeof(ArchiveMenuViewInterface_SetTabsInputsEnabled) == 0x000001, "Wrong size on ArchiveMenuViewInterface_SetTabsInputsEnabled");
static_assert(offsetof(ArchiveMenuViewInterface_SetTabsInputsEnabled, Enabled) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTabsInputsEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct ArchiveMenuViewInterface_SetTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_SetTitle) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_SetTitle");
static_assert(sizeof(ArchiveMenuViewInterface_SetTitle) == 0x000018, "Wrong size on ArchiveMenuViewInterface_SetTitle");
static_assert(offsetof(ArchiveMenuViewInterface_SetTitle, Title) == 0x000000, "Member 'ArchiveMenuViewInterface_SetTitle::Title' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.ShowSlotSelector
// 0x00B8 (0x00B8 - 0x0000)
struct ArchiveMenuViewInterface_ShowSlotSelector final
{
public:
	struct FArchiveNodeViewData                   Data;                                              // 0x0000(0x00B8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_ShowSlotSelector) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_ShowSlotSelector");
static_assert(sizeof(ArchiveMenuViewInterface_ShowSlotSelector) == 0x0000B8, "Wrong size on ArchiveMenuViewInterface_ShowSlotSelector");
static_assert(offsetof(ArchiveMenuViewInterface_ShowSlotSelector, Data) == 0x000000, "Member 'ArchiveMenuViewInterface_ShowSlotSelector::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.UpdateBackgroundSkin
// 0x0040 (0x0040 - 0x0000)
struct ArchiveMenuViewInterface_UpdateBackgroundSkin final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FArchiveTomeSkinData                   Data;                                              // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_UpdateBackgroundSkin) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_UpdateBackgroundSkin");
static_assert(sizeof(ArchiveMenuViewInterface_UpdateBackgroundSkin) == 0x000040, "Wrong size on ArchiveMenuViewInterface_UpdateBackgroundSkin");
static_assert(offsetof(ArchiveMenuViewInterface_UpdateBackgroundSkin, Key) == 0x000000, "Member 'ArchiveMenuViewInterface_UpdateBackgroundSkin::Key' has a wrong offset!");
static_assert(offsetof(ArchiveMenuViewInterface_UpdateBackgroundSkin, Data) == 0x000008, "Member 'ArchiveMenuViewInterface_UpdateBackgroundSkin::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveCompendiumInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveMenuViewInterface_GetArchiveCompendiumInterface final
{
public:
	TScriptInterface<class IArchiveCompendiumViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_GetArchiveCompendiumInterface) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_GetArchiveCompendiumInterface");
static_assert(sizeof(ArchiveMenuViewInterface_GetArchiveCompendiumInterface) == 0x000010, "Wrong size on ArchiveMenuViewInterface_GetArchiveCompendiumInterface");
static_assert(offsetof(ArchiveMenuViewInterface_GetArchiveCompendiumInterface, ReturnValue) == 0x000000, "Member 'ArchiveMenuViewInterface_GetArchiveCompendiumInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveRiftInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveMenuViewInterface_GetArchiveRiftInterface final
{
public:
	TScriptInterface<class IArchiveRiftViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_GetArchiveRiftInterface) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_GetArchiveRiftInterface");
static_assert(sizeof(ArchiveMenuViewInterface_GetArchiveRiftInterface) == 0x000010, "Wrong size on ArchiveMenuViewInterface_GetArchiveRiftInterface");
static_assert(offsetof(ArchiveMenuViewInterface_GetArchiveRiftInterface, ReturnValue) == 0x000000, "Member 'ArchiveMenuViewInterface_GetArchiveRiftInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetArchiveTomeInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveMenuViewInterface_GetArchiveTomeInterface final
{
public:
	TScriptInterface<class IArchiveTomeViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_GetArchiveTomeInterface) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_GetArchiveTomeInterface");
static_assert(sizeof(ArchiveMenuViewInterface_GetArchiveTomeInterface) == 0x000010, "Wrong size on ArchiveMenuViewInterface_GetArchiveTomeInterface");
static_assert(offsetof(ArchiveMenuViewInterface_GetArchiveTomeInterface, ReturnValue) == 0x000000, "Member 'ArchiveMenuViewInterface_GetArchiveTomeInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveMenuViewInterface.GetDisplayStandViewInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveMenuViewInterface_GetDisplayStandViewInterface final
{
public:
	TScriptInterface<class IDisplayStandViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveMenuViewInterface_GetDisplayStandViewInterface) == 0x000008, "Wrong alignment on ArchiveMenuViewInterface_GetDisplayStandViewInterface");
static_assert(sizeof(ArchiveMenuViewInterface_GetDisplayStandViewInterface) == 0x000010, "Wrong size on ArchiveMenuViewInterface_GetDisplayStandViewInterface");
static_assert(offsetof(ArchiveMenuViewInterface_GetDisplayStandViewInterface, ReturnValue) == 0x000000, "Member 'ArchiveMenuViewInterface_GetDisplayStandViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.SetLoadingSpinner
// 0x0001 (0x0001 - 0x0000)
struct ArchiveQuestMapViewInterface_SetLoadingSpinner final
{
public:
	bool                                          IsLoading;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapViewInterface_SetLoadingSpinner) == 0x000001, "Wrong alignment on ArchiveQuestMapViewInterface_SetLoadingSpinner");
static_assert(sizeof(ArchiveQuestMapViewInterface_SetLoadingSpinner) == 0x000001, "Wrong size on ArchiveQuestMapViewInterface_SetLoadingSpinner");
static_assert(offsetof(ArchiveQuestMapViewInterface_SetLoadingSpinner, IsLoading) == 0x000000, "Member 'ArchiveQuestMapViewInterface_SetLoadingSpinner::IsLoading' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.SetQuestMapData
// 0x0028 (0x0028 - 0x0000)
struct ArchiveQuestMapViewInterface_SetQuestMapData final
{
public:
	TArray<struct FArchiveNodeGraphViewData>      NodeDataList;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FArchiveMapPathViewData>        PathDataList;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          NeedsCascadeAppear;                                // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveQuestMapViewInterface_SetQuestMapData) == 0x000008, "Wrong alignment on ArchiveQuestMapViewInterface_SetQuestMapData");
static_assert(sizeof(ArchiveQuestMapViewInterface_SetQuestMapData) == 0x000028, "Wrong size on ArchiveQuestMapViewInterface_SetQuestMapData");
static_assert(offsetof(ArchiveQuestMapViewInterface_SetQuestMapData, NodeDataList) == 0x000000, "Member 'ArchiveQuestMapViewInterface_SetQuestMapData::NodeDataList' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapViewInterface_SetQuestMapData, PathDataList) == 0x000010, "Member 'ArchiveQuestMapViewInterface_SetQuestMapData::PathDataList' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapViewInterface_SetQuestMapData, NeedsCascadeAppear) == 0x000020, "Member 'ArchiveQuestMapViewInterface_SetQuestMapData::NeedsCascadeAppear' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveQuestMapViewInterface.UpdateQuestMapData
// 0x0020 (0x0020 - 0x0000)
struct ArchiveQuestMapViewInterface_UpdateQuestMapData final
{
public:
	TArray<struct FArchiveNodeGraphViewData>      NodeDataList;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FArchiveMapPathViewData>        PathDataList;                                      // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveQuestMapViewInterface_UpdateQuestMapData) == 0x000008, "Wrong alignment on ArchiveQuestMapViewInterface_UpdateQuestMapData");
static_assert(sizeof(ArchiveQuestMapViewInterface_UpdateQuestMapData) == 0x000020, "Wrong size on ArchiveQuestMapViewInterface_UpdateQuestMapData");
static_assert(offsetof(ArchiveQuestMapViewInterface_UpdateQuestMapData, NodeDataList) == 0x000000, "Member 'ArchiveQuestMapViewInterface_UpdateQuestMapData::NodeDataList' has a wrong offset!");
static_assert(offsetof(ArchiveQuestMapViewInterface_UpdateQuestMapData, PathDataList) == 0x000010, "Member 'ArchiveQuestMapViewInterface_UpdateQuestMapData::PathDataList' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.PlayUnlockingAnimation
// 0x000C (0x000C - 0x0000)
struct ArchiveRiftViewInterface_PlayUnlockingAnimation final
{
public:
	struct FArchivesRiftUnlockSequenceData        Data;                                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_PlayUnlockingAnimation) == 0x000004, "Wrong alignment on ArchiveRiftViewInterface_PlayUnlockingAnimation");
static_assert(sizeof(ArchiveRiftViewInterface_PlayUnlockingAnimation) == 0x00000C, "Wrong size on ArchiveRiftViewInterface_PlayUnlockingAnimation");
static_assert(offsetof(ArchiveRiftViewInterface_PlayUnlockingAnimation, Data) == 0x000000, "Member 'ArchiveRiftViewInterface_PlayUnlockingAnimation::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetData
// 0x0020 (0x0020 - 0x0000)
struct ArchiveRiftViewInterface_SetData final
{
public:
	struct FArchivesRiftGenericViewData           Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetData) == 0x000008, "Wrong alignment on ArchiveRiftViewInterface_SetData");
static_assert(sizeof(ArchiveRiftViewInterface_SetData) == 0x000020, "Wrong size on ArchiveRiftViewInterface_SetData");
static_assert(offsetof(ArchiveRiftViewInterface_SetData, Data) == 0x000000, "Member 'ArchiveRiftViewInterface_SetData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetImagePreviewAreaData
// 0x0020 (0x0020 - 0x0000)
struct ArchiveRiftViewInterface_SetImagePreviewAreaData final
{
public:
	struct FCustomizationItemPreviewAreaViewData  ViewData;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetImagePreviewAreaData) == 0x000008, "Wrong alignment on ArchiveRiftViewInterface_SetImagePreviewAreaData");
static_assert(sizeof(ArchiveRiftViewInterface_SetImagePreviewAreaData) == 0x000020, "Wrong size on ArchiveRiftViewInterface_SetImagePreviewAreaData");
static_assert(offsetof(ArchiveRiftViewInterface_SetImagePreviewAreaData, ViewData) == 0x000000, "Member 'ArchiveRiftViewInterface_SetImagePreviewAreaData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetMatchmakingSoftlockState
// 0x0001 (0x0001 - 0x0000)
struct ArchiveRiftViewInterface_SetMatchmakingSoftlockState final
{
public:
	bool                                          IsInMatchmakingSoftlock;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetMatchmakingSoftlockState) == 0x000001, "Wrong alignment on ArchiveRiftViewInterface_SetMatchmakingSoftlockState");
static_assert(sizeof(ArchiveRiftViewInterface_SetMatchmakingSoftlockState) == 0x000001, "Wrong size on ArchiveRiftViewInterface_SetMatchmakingSoftlockState");
static_assert(offsetof(ArchiveRiftViewInterface_SetMatchmakingSoftlockState, IsInMatchmakingSoftlock) == 0x000000, "Member 'ArchiveRiftViewInterface_SetMatchmakingSoftlockState::IsInMatchmakingSoftlock' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetOutfitPreviewButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct ArchiveRiftViewInterface_SetOutfitPreviewButtonVisible final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetOutfitPreviewButtonVisible) == 0x000001, "Wrong alignment on ArchiveRiftViewInterface_SetOutfitPreviewButtonVisible");
static_assert(sizeof(ArchiveRiftViewInterface_SetOutfitPreviewButtonVisible) == 0x000001, "Wrong size on ArchiveRiftViewInterface_SetOutfitPreviewButtonVisible");
static_assert(offsetof(ArchiveRiftViewInterface_SetOutfitPreviewButtonVisible, IsVisible) == 0x000000, "Member 'ArchiveRiftViewInterface_SetOutfitPreviewButtonVisible::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetRewardTiersData
// 0x0010 (0x0010 - 0x0000)
struct ArchiveRiftViewInterface_SetRewardTiersData final
{
public:
	TArray<struct FArchiveRiftTierRewardsViewData> RiftTiersData;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetRewardTiersData) == 0x000008, "Wrong alignment on ArchiveRiftViewInterface_SetRewardTiersData");
static_assert(sizeof(ArchiveRiftViewInterface_SetRewardTiersData) == 0x000010, "Wrong size on ArchiveRiftViewInterface_SetRewardTiersData");
static_assert(offsetof(ArchiveRiftViewInterface_SetRewardTiersData, RiftTiersData) == 0x000000, "Member 'ArchiveRiftViewInterface_SetRewardTiersData::RiftTiersData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveRiftViewInterface.SetRiftFragmentTooltipViewData
// 0x0100 (0x0100 - 0x0000)
struct ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData final
{
public:
	struct FCurrencyProgressionTooltipViewData    RiftFragmentTooltipViewData;                       // 0x0000(0x0100)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData) == 0x000008, "Wrong alignment on ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData");
static_assert(sizeof(ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData) == 0x000100, "Wrong size on ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData");
static_assert(offsetof(ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData, RiftFragmentTooltipViewData) == 0x000000, "Member 'ArchiveRiftViewInterface_SetRiftFragmentTooltipViewData::RiftFragmentTooltipViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.PowerBundleViewInterface.SetData
// 0x0228 (0x0228 - 0x0000)
struct PowerBundleViewInterface_SetData final
{
public:
	struct FPowerBundleViewData                   PowerBundleViewData;                               // 0x0000(0x0228)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerBundleViewInterface_SetData) == 0x000008, "Wrong alignment on PowerBundleViewInterface_SetData");
static_assert(sizeof(PowerBundleViewInterface_SetData) == 0x000228, "Wrong size on PowerBundleViewInterface_SetData");
static_assert(offsetof(PowerBundleViewInterface_SetData, PowerBundleViewData) == 0x000000, "Member 'PowerBundleViewInterface_SetData::PowerBundleViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct ArchiveTomeViewInterface_SetMenuState final
{
public:
	EArchiveTomeMenuState                         MenuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_SetMenuState) == 0x000001, "Wrong alignment on ArchiveTomeViewInterface_SetMenuState");
static_assert(sizeof(ArchiveTomeViewInterface_SetMenuState) == 0x000001, "Wrong size on ArchiveTomeViewInterface_SetMenuState");
static_assert(offsetof(ArchiveTomeViewInterface_SetMenuState, MenuState) == 0x000000, "Member 'ArchiveTomeViewInterface_SetMenuState::MenuState' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetNotificationVisibility
// 0x0008 (0x0008 - 0x0000)
struct ArchiveTomeViewInterface_SetNotificationVisibility final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasNotification;                                   // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveTomeViewInterface_SetNotificationVisibility) == 0x000004, "Wrong alignment on ArchiveTomeViewInterface_SetNotificationVisibility");
static_assert(sizeof(ArchiveTomeViewInterface_SetNotificationVisibility) == 0x000008, "Wrong size on ArchiveTomeViewInterface_SetNotificationVisibility");
static_assert(offsetof(ArchiveTomeViewInterface_SetNotificationVisibility, Key) == 0x000000, "Member 'ArchiveTomeViewInterface_SetNotificationVisibility::Key' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_SetNotificationVisibility, HasNotification) == 0x000004, "Member 'ArchiveTomeViewInterface_SetNotificationVisibility::HasNotification' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsData
// 0x0018 (0x0018 - 0x0000)
struct ArchiveTomeViewInterface_SetSideNavTabsData final
{
public:
	TArray<struct FTabWidgetData>                 TabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedKey;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveTomeViewInterface_SetSideNavTabsData) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_SetSideNavTabsData");
static_assert(sizeof(ArchiveTomeViewInterface_SetSideNavTabsData) == 0x000018, "Wrong size on ArchiveTomeViewInterface_SetSideNavTabsData");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsData, TabsData) == 0x000000, "Member 'ArchiveTomeViewInterface_SetSideNavTabsData::TabsData' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsData, SelectedKey) == 0x000010, "Member 'ArchiveTomeViewInterface_SetSideNavTabsData::SelectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsEnabled
// 0x0008 (0x0008 - 0x0000)
struct ArchiveTomeViewInterface_SetSideNavTabsEnabled final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveTomeViewInterface_SetSideNavTabsEnabled) == 0x000004, "Wrong alignment on ArchiveTomeViewInterface_SetSideNavTabsEnabled");
static_assert(sizeof(ArchiveTomeViewInterface_SetSideNavTabsEnabled) == 0x000008, "Wrong size on ArchiveTomeViewInterface_SetSideNavTabsEnabled");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsEnabled, Key) == 0x000000, "Member 'ArchiveTomeViewInterface_SetSideNavTabsEnabled::Key' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsEnabled, IsEnabled) == 0x000004, "Member 'ArchiveTomeViewInterface_SetSideNavTabsEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetSideNavTabsVisibility
// 0x0008 (0x0008 - 0x0000)
struct ArchiveTomeViewInterface_SetSideNavTabsVisibility final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ArchiveTomeViewInterface_SetSideNavTabsVisibility) == 0x000004, "Wrong alignment on ArchiveTomeViewInterface_SetSideNavTabsVisibility");
static_assert(sizeof(ArchiveTomeViewInterface_SetSideNavTabsVisibility) == 0x000008, "Wrong size on ArchiveTomeViewInterface_SetSideNavTabsVisibility");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsVisibility, Key) == 0x000000, "Member 'ArchiveTomeViewInterface_SetSideNavTabsVisibility::Key' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_SetSideNavTabsVisibility, IsVisible) == 0x000004, "Member 'ArchiveTomeViewInterface_SetSideNavTabsVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.SetUiTakeoverActive
// 0x0001 (0x0001 - 0x0000)
struct ArchiveTomeViewInterface_SetUiTakeoverActive final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_SetUiTakeoverActive) == 0x000001, "Wrong alignment on ArchiveTomeViewInterface_SetUiTakeoverActive");
static_assert(sizeof(ArchiveTomeViewInterface_SetUiTakeoverActive) == 0x000001, "Wrong size on ArchiveTomeViewInterface_SetUiTakeoverActive");
static_assert(offsetof(ArchiveTomeViewInterface_SetUiTakeoverActive, IsActive) == 0x000000, "Member 'ArchiveTomeViewInterface_SetUiTakeoverActive::IsActive' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.ToggleEditor
// 0x0001 (0x0001 - 0x0000)
struct ArchiveTomeViewInterface_ToggleEditor final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_ToggleEditor) == 0x000001, "Wrong alignment on ArchiveTomeViewInterface_ToggleEditor");
static_assert(sizeof(ArchiveTomeViewInterface_ToggleEditor) == 0x000001, "Wrong size on ArchiveTomeViewInterface_ToggleEditor");
static_assert(offsetof(ArchiveTomeViewInterface_ToggleEditor, IsEnabled) == 0x000000, "Member 'ArchiveTomeViewInterface_ToggleEditor::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.UpdateBackgroundSkin
// 0x0010 (0x0010 - 0x0000)
struct ArchiveTomeViewInterface_UpdateBackgroundSkin final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     SkinMaterail;                                      // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_UpdateBackgroundSkin) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_UpdateBackgroundSkin");
static_assert(sizeof(ArchiveTomeViewInterface_UpdateBackgroundSkin) == 0x000010, "Wrong size on ArchiveTomeViewInterface_UpdateBackgroundSkin");
static_assert(offsetof(ArchiveTomeViewInterface_UpdateBackgroundSkin, Key) == 0x000000, "Member 'ArchiveTomeViewInterface_UpdateBackgroundSkin::Key' has a wrong offset!");
static_assert(offsetof(ArchiveTomeViewInterface_UpdateBackgroundSkin, SkinMaterail) == 0x000008, "Member 'ArchiveTomeViewInterface_UpdateBackgroundSkin::SkinMaterail' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveEditorInterface
// 0x0030 (0x0030 - 0x0000)
struct ArchiveTomeViewInterface_GetArchiveEditorInterface final
{
public:
	struct FEditorInterfaces                      ReturnValue;                                       // 0x0000(0x0030)(Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetArchiveEditorInterface) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_GetArchiveEditorInterface");
static_assert(sizeof(ArchiveTomeViewInterface_GetArchiveEditorInterface) == 0x000030, "Wrong size on ArchiveTomeViewInterface_GetArchiveEditorInterface");
static_assert(offsetof(ArchiveTomeViewInterface_GetArchiveEditorInterface, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetArchiveEditorInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveJournalInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveTomeViewInterface_GetArchiveJournalInterface final
{
public:
	TScriptInterface<class IArchiveJournalViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetArchiveJournalInterface) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_GetArchiveJournalInterface");
static_assert(sizeof(ArchiveTomeViewInterface_GetArchiveJournalInterface) == 0x000010, "Wrong size on ArchiveTomeViewInterface_GetArchiveJournalInterface");
static_assert(offsetof(ArchiveTomeViewInterface_GetArchiveJournalInterface, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetArchiveJournalInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveLevelProgressionInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface final
{
public:
	TScriptInterface<class IArchiveLevelProgressionViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface");
static_assert(sizeof(ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface) == 0x000010, "Wrong size on ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface");
static_assert(offsetof(ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetArchiveLevelProgressionInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetArchiveQuestMapInterface
// 0x0010 (0x0010 - 0x0000)
struct ArchiveTomeViewInterface_GetArchiveQuestMapInterface final
{
public:
	TScriptInterface<class IArchiveQuestMapViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetArchiveQuestMapInterface) == 0x000008, "Wrong alignment on ArchiveTomeViewInterface_GetArchiveQuestMapInterface");
static_assert(sizeof(ArchiveTomeViewInterface_GetArchiveQuestMapInterface) == 0x000010, "Wrong size on ArchiveTomeViewInterface_GetArchiveQuestMapInterface");
static_assert(offsetof(ArchiveTomeViewInterface_GetArchiveQuestMapInterface, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetArchiveQuestMapInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ArchiveTomeViewInterface.GetMenuState
// 0x0001 (0x0001 - 0x0000)
struct ArchiveTomeViewInterface_GetMenuState final
{
public:
	EArchiveTomeMenuState                         ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ArchiveTomeViewInterface_GetMenuState) == 0x000001, "Wrong alignment on ArchiveTomeViewInterface_GetMenuState");
static_assert(sizeof(ArchiveTomeViewInterface_GetMenuState) == 0x000001, "Wrong size on ArchiveTomeViewInterface_GetMenuState");
static_assert(offsetof(ArchiveTomeViewInterface_GetMenuState, ReturnValue) == 0x000000, "Member 'ArchiveTomeViewInterface_GetMenuState::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.AuricCellsViewInterface.SetData
// 0x0088 (0x0088 - 0x0000)
struct AuricCellsViewInterface_SetData final
{
public:
	struct FAuricCellsViewData                    ViewData;                                          // 0x0000(0x0088)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(AuricCellsViewInterface_SetData) == 0x000008, "Wrong alignment on AuricCellsViewInterface_SetData");
static_assert(sizeof(AuricCellsViewInterface_SetData) == 0x000088, "Wrong size on AuricCellsViewInterface_SetData");
static_assert(offsetof(AuricCellsViewInterface_SetData, ViewData) == 0x000000, "Member 'AuricCellsViewInterface_SetData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.BasePopupViewInterface.Enter
// 0x0008 (0x0008 - 0x0000)
struct BasePopupViewInterface_Enter final
{
public:
	class UBasePopupViewData*                     Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BasePopupViewInterface_Enter) == 0x000008, "Wrong alignment on BasePopupViewInterface_Enter");
static_assert(sizeof(BasePopupViewInterface_Enter) == 0x000008, "Wrong size on BasePopupViewInterface_Enter");
static_assert(offsetof(BasePopupViewInterface_Enter, Data) == 0x000000, "Member 'BasePopupViewInterface_Enter::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.SetEventVisuals
// 0x0010 (0x0010 - 0x0000)
struct ChallengesMenuChallengeSetViewInterface_SetEventVisuals final
{
public:
	class FString                                 EventFrameLabel;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuChallengeSetViewInterface_SetEventVisuals) == 0x000008, "Wrong alignment on ChallengesMenuChallengeSetViewInterface_SetEventVisuals");
static_assert(sizeof(ChallengesMenuChallengeSetViewInterface_SetEventVisuals) == 0x000010, "Wrong size on ChallengesMenuChallengeSetViewInterface_SetEventVisuals");
static_assert(offsetof(ChallengesMenuChallengeSetViewInterface_SetEventVisuals, EventFrameLabel) == 0x000000, "Member 'ChallengesMenuChallengeSetViewInterface_SetEventVisuals::EventFrameLabel' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.SetTabEnabled
// 0x0008 (0x0008 - 0x0000)
struct ChallengesMenuChallengeSetViewInterface_SetTabEnabled final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChallengesMenuChallengeSetViewInterface_SetTabEnabled) == 0x000004, "Wrong alignment on ChallengesMenuChallengeSetViewInterface_SetTabEnabled");
static_assert(sizeof(ChallengesMenuChallengeSetViewInterface_SetTabEnabled) == 0x000008, "Wrong size on ChallengesMenuChallengeSetViewInterface_SetTabEnabled");
static_assert(offsetof(ChallengesMenuChallengeSetViewInterface_SetTabEnabled, Key) == 0x000000, "Member 'ChallengesMenuChallengeSetViewInterface_SetTabEnabled::Key' has a wrong offset!");
static_assert(offsetof(ChallengesMenuChallengeSetViewInterface_SetTabEnabled, Enabled) == 0x000004, "Member 'ChallengesMenuChallengeSetViewInterface_SetTabEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.SetTabsData
// 0x0018 (0x0018 - 0x0000)
struct ChallengesMenuChallengeSetViewInterface_SetTabsData final
{
public:
	TArray<struct FTabWidgetData>                 TabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedKey;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChallengesMenuChallengeSetViewInterface_SetTabsData) == 0x000008, "Wrong alignment on ChallengesMenuChallengeSetViewInterface_SetTabsData");
static_assert(sizeof(ChallengesMenuChallengeSetViewInterface_SetTabsData) == 0x000018, "Wrong size on ChallengesMenuChallengeSetViewInterface_SetTabsData");
static_assert(offsetof(ChallengesMenuChallengeSetViewInterface_SetTabsData, TabsData) == 0x000000, "Member 'ChallengesMenuChallengeSetViewInterface_SetTabsData::TabsData' has a wrong offset!");
static_assert(offsetof(ChallengesMenuChallengeSetViewInterface_SetTabsData, SelectedKey) == 0x000010, "Member 'ChallengesMenuChallengeSetViewInterface_SetTabsData::SelectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.SetTabSelected
// 0x0004 (0x0004 - 0x0000)
struct ChallengesMenuChallengeSetViewInterface_SetTabSelected final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuChallengeSetViewInterface_SetTabSelected) == 0x000004, "Wrong alignment on ChallengesMenuChallengeSetViewInterface_SetTabSelected");
static_assert(sizeof(ChallengesMenuChallengeSetViewInterface_SetTabSelected) == 0x000004, "Wrong size on ChallengesMenuChallengeSetViewInterface_SetTabSelected");
static_assert(offsetof(ChallengesMenuChallengeSetViewInterface_SetTabSelected, Key) == 0x000000, "Member 'ChallengesMenuChallengeSetViewInterface_SetTabSelected::Key' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.GetRewardTrackInterface
// 0x0010 (0x0010 - 0x0000)
struct ChallengesMenuChallengeSetViewInterface_GetRewardTrackInterface final
{
public:
	TScriptInterface<class IChallengesMenuRewardTrackViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuChallengeSetViewInterface_GetRewardTrackInterface) == 0x000008, "Wrong alignment on ChallengesMenuChallengeSetViewInterface_GetRewardTrackInterface");
static_assert(sizeof(ChallengesMenuChallengeSetViewInterface_GetRewardTrackInterface) == 0x000010, "Wrong size on ChallengesMenuChallengeSetViewInterface_GetRewardTrackInterface");
static_assert(offsetof(ChallengesMenuChallengeSetViewInterface_GetRewardTrackInterface, ReturnValue) == 0x000000, "Member 'ChallengesMenuChallengeSetViewInterface_GetRewardTrackInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.GetRitualsInterface
// 0x0010 (0x0010 - 0x0000)
struct ChallengesMenuChallengeSetViewInterface_GetRitualsInterface final
{
public:
	TScriptInterface<class IChallengesMenuRitualsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuChallengeSetViewInterface_GetRitualsInterface) == 0x000008, "Wrong alignment on ChallengesMenuChallengeSetViewInterface_GetRitualsInterface");
static_assert(sizeof(ChallengesMenuChallengeSetViewInterface_GetRitualsInterface) == 0x000010, "Wrong size on ChallengesMenuChallengeSetViewInterface_GetRitualsInterface");
static_assert(offsetof(ChallengesMenuChallengeSetViewInterface_GetRitualsInterface, ReturnValue) == 0x000000, "Member 'ChallengesMenuChallengeSetViewInterface_GetRitualsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuChallengeSetViewInterface.GetStoreInterface
// 0x0010 (0x0010 - 0x0000)
struct ChallengesMenuChallengeSetViewInterface_GetStoreInterface final
{
public:
	TScriptInterface<class IChallengesMenuStoreViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuChallengeSetViewInterface_GetStoreInterface) == 0x000008, "Wrong alignment on ChallengesMenuChallengeSetViewInterface_GetStoreInterface");
static_assert(sizeof(ChallengesMenuChallengeSetViewInterface_GetStoreInterface) == 0x000010, "Wrong size on ChallengesMenuChallengeSetViewInterface_GetStoreInterface");
static_assert(offsetof(ChallengesMenuChallengeSetViewInterface_GetStoreInterface, ReturnValue) == 0x000000, "Member 'ChallengesMenuChallengeSetViewInterface_GetStoreInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.EnableInputs
// 0x0001 (0x0001 - 0x0000)
struct ProfileMenuCustomizationViewInterface_EnableInputs final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuCustomizationViewInterface_EnableInputs) == 0x000001, "Wrong alignment on ProfileMenuCustomizationViewInterface_EnableInputs");
static_assert(sizeof(ProfileMenuCustomizationViewInterface_EnableInputs) == 0x000001, "Wrong size on ProfileMenuCustomizationViewInterface_EnableInputs");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_EnableInputs, Enable) == 0x000000, "Member 'ProfileMenuCustomizationViewInterface_EnableInputs::Enable' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.Init
// 0x0004 (0x0004 - 0x0000)
struct ProfileMenuCustomizationViewInterface_Init final
{
public:
	ECustomizationCategory                        CustomizationCategory;                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x1];                                        // 0x0001(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	ESortingOption                                SortingOption;                                     // 0x0002(0x0002)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuCustomizationViewInterface_Init) == 0x000002, "Wrong alignment on ProfileMenuCustomizationViewInterface_Init");
static_assert(sizeof(ProfileMenuCustomizationViewInterface_Init) == 0x000004, "Wrong size on ProfileMenuCustomizationViewInterface_Init");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_Init, CustomizationCategory) == 0x000000, "Member 'ProfileMenuCustomizationViewInterface_Init::CustomizationCategory' has a wrong offset!");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_Init, SortingOption) == 0x000002, "Member 'ProfileMenuCustomizationViewInterface_Init::SortingOption' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.SetEquipButtonText
// 0x0002 (0x0002 - 0x0000)
struct ProfileMenuCustomizationViewInterface_SetEquipButtonText final
{
public:
	bool                                          CanEquip;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEquipped;                                        // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuCustomizationViewInterface_SetEquipButtonText) == 0x000001, "Wrong alignment on ProfileMenuCustomizationViewInterface_SetEquipButtonText");
static_assert(sizeof(ProfileMenuCustomizationViewInterface_SetEquipButtonText) == 0x000002, "Wrong size on ProfileMenuCustomizationViewInterface_SetEquipButtonText");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_SetEquipButtonText, CanEquip) == 0x000000, "Member 'ProfileMenuCustomizationViewInterface_SetEquipButtonText::CanEquip' has a wrong offset!");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_SetEquipButtonText, IsEquipped) == 0x000001, "Member 'ProfileMenuCustomizationViewInterface_SetEquipButtonText::IsEquipped' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.SetItemsData
// 0x0018 (0x0018 - 0x0000)
struct ProfileMenuCustomizationViewInterface_SetItemsData final
{
public:
	TArray<class UStoreCustomizationItemViewData*> CustomizationRewardsData;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileMenuCustomizationViewInterface_SetItemsData) == 0x000008, "Wrong alignment on ProfileMenuCustomizationViewInterface_SetItemsData");
static_assert(sizeof(ProfileMenuCustomizationViewInterface_SetItemsData) == 0x000018, "Wrong size on ProfileMenuCustomizationViewInterface_SetItemsData");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_SetItemsData, CustomizationRewardsData) == 0x000000, "Member 'ProfileMenuCustomizationViewInterface_SetItemsData::CustomizationRewardsData' has a wrong offset!");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_SetItemsData, SelectedIndex) == 0x000010, "Member 'ProfileMenuCustomizationViewInterface_SetItemsData::SelectedIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.SetPreviewAreaData
// 0x0028 (0x0028 - 0x0000)
struct ProfileMenuCustomizationViewInterface_SetPreviewAreaData final
{
public:
	struct FCustomizationItemPreviewAreaViewData  ViewData;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          NoCustomizationEquipped;                           // 0x0020(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileMenuCustomizationViewInterface_SetPreviewAreaData) == 0x000008, "Wrong alignment on ProfileMenuCustomizationViewInterface_SetPreviewAreaData");
static_assert(sizeof(ProfileMenuCustomizationViewInterface_SetPreviewAreaData) == 0x000028, "Wrong size on ProfileMenuCustomizationViewInterface_SetPreviewAreaData");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_SetPreviewAreaData, ViewData) == 0x000000, "Member 'ProfileMenuCustomizationViewInterface_SetPreviewAreaData::ViewData' has a wrong offset!");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_SetPreviewAreaData, NoCustomizationEquipped) == 0x000020, "Member 'ProfileMenuCustomizationViewInterface_SetPreviewAreaData::NoCustomizationEquipped' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuCustomizationViewInterface.SetSelectedItem
// 0x0004 (0x0004 - 0x0000)
struct ProfileMenuCustomizationViewInterface_SetSelectedItem final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuCustomizationViewInterface_SetSelectedItem) == 0x000004, "Wrong alignment on ProfileMenuCustomizationViewInterface_SetSelectedItem");
static_assert(sizeof(ProfileMenuCustomizationViewInterface_SetSelectedItem) == 0x000004, "Wrong size on ProfileMenuCustomizationViewInterface_SetSelectedItem");
static_assert(offsetof(ProfileMenuCustomizationViewInterface_SetSelectedItem, SelectedIndex) == 0x000000, "Member 'ProfileMenuCustomizationViewInterface_SetSelectedItem::SelectedIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuRewardTrackViewInterface.SetEventVisuals
// 0x0010 (0x0010 - 0x0000)
struct ChallengesMenuRewardTrackViewInterface_SetEventVisuals final
{
public:
	class FString                                 EventFrameLabel;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuRewardTrackViewInterface_SetEventVisuals) == 0x000008, "Wrong alignment on ChallengesMenuRewardTrackViewInterface_SetEventVisuals");
static_assert(sizeof(ChallengesMenuRewardTrackViewInterface_SetEventVisuals) == 0x000010, "Wrong size on ChallengesMenuRewardTrackViewInterface_SetEventVisuals");
static_assert(offsetof(ChallengesMenuRewardTrackViewInterface_SetEventVisuals, EventFrameLabel) == 0x000000, "Member 'ChallengesMenuRewardTrackViewInterface_SetEventVisuals::EventFrameLabel' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.EnableStoreButton
// 0x0001 (0x0001 - 0x0000)
struct ChallengesMenuStoreViewInterface_EnableStoreButton final
{
public:
	bool                                          Enable;                                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuStoreViewInterface_EnableStoreButton) == 0x000001, "Wrong alignment on ChallengesMenuStoreViewInterface_EnableStoreButton");
static_assert(sizeof(ChallengesMenuStoreViewInterface_EnableStoreButton) == 0x000001, "Wrong size on ChallengesMenuStoreViewInterface_EnableStoreButton");
static_assert(offsetof(ChallengesMenuStoreViewInterface_EnableStoreButton, Enable) == 0x000000, "Member 'ChallengesMenuStoreViewInterface_EnableStoreButton::Enable' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.SetItemsData
// 0x0018 (0x0018 - 0x0000)
struct ChallengesMenuStoreViewInterface_SetItemsData final
{
public:
	TArray<class UStoreCustomizationItemViewData*> CustomizationRewardsData;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChallengesMenuStoreViewInterface_SetItemsData) == 0x000008, "Wrong alignment on ChallengesMenuStoreViewInterface_SetItemsData");
static_assert(sizeof(ChallengesMenuStoreViewInterface_SetItemsData) == 0x000018, "Wrong size on ChallengesMenuStoreViewInterface_SetItemsData");
static_assert(offsetof(ChallengesMenuStoreViewInterface_SetItemsData, CustomizationRewardsData) == 0x000000, "Member 'ChallengesMenuStoreViewInterface_SetItemsData::CustomizationRewardsData' has a wrong offset!");
static_assert(offsetof(ChallengesMenuStoreViewInterface_SetItemsData, SelectedIndex) == 0x000010, "Member 'ChallengesMenuStoreViewInterface_SetItemsData::SelectedIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.SetPreviewAreaData
// 0x0020 (0x0020 - 0x0000)
struct ChallengesMenuStoreViewInterface_SetPreviewAreaData final
{
public:
	struct FCustomizationItemPreviewAreaViewData  ViewData;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuStoreViewInterface_SetPreviewAreaData) == 0x000008, "Wrong alignment on ChallengesMenuStoreViewInterface_SetPreviewAreaData");
static_assert(sizeof(ChallengesMenuStoreViewInterface_SetPreviewAreaData) == 0x000020, "Wrong size on ChallengesMenuStoreViewInterface_SetPreviewAreaData");
static_assert(offsetof(ChallengesMenuStoreViewInterface_SetPreviewAreaData, ViewData) == 0x000000, "Member 'ChallengesMenuStoreViewInterface_SetPreviewAreaData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuStoreViewInterface.SetSelectedReward
// 0x0004 (0x0004 - 0x0000)
struct ChallengesMenuStoreViewInterface_SetSelectedReward final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuStoreViewInterface_SetSelectedReward) == 0x000004, "Wrong alignment on ChallengesMenuStoreViewInterface_SetSelectedReward");
static_assert(sizeof(ChallengesMenuStoreViewInterface_SetSelectedReward) == 0x000004, "Wrong size on ChallengesMenuStoreViewInterface_SetSelectedReward");
static_assert(offsetof(ChallengesMenuStoreViewInterface_SetSelectedReward, SelectedIndex) == 0x000000, "Member 'ChallengesMenuStoreViewInterface_SetSelectedReward::SelectedIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.AddChallengeSet
// 0x0050 (0x0050 - 0x0000)
struct ChallengesMenuViewInterface_AddChallengeSet final
{
public:
	struct FChallengeSetViewData                  ViewData;                                          // 0x0000(0x0040)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TScriptInterface<class IChallengesMenuChallengeSetViewInterface> ReturnValue;                                       // 0x0040(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuViewInterface_AddChallengeSet) == 0x000008, "Wrong alignment on ChallengesMenuViewInterface_AddChallengeSet");
static_assert(sizeof(ChallengesMenuViewInterface_AddChallengeSet) == 0x000050, "Wrong size on ChallengesMenuViewInterface_AddChallengeSet");
static_assert(offsetof(ChallengesMenuViewInterface_AddChallengeSet, ViewData) == 0x000000, "Member 'ChallengesMenuViewInterface_AddChallengeSet::ViewData' has a wrong offset!");
static_assert(offsetof(ChallengesMenuViewInterface_AddChallengeSet, ReturnValue) == 0x000040, "Member 'ChallengesMenuViewInterface_AddChallengeSet::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetEventVisuals
// 0x0010 (0x0010 - 0x0000)
struct ChallengesMenuViewInterface_SetEventVisuals final
{
public:
	class FString                                 EventFrameLabel;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuViewInterface_SetEventVisuals) == 0x000008, "Wrong alignment on ChallengesMenuViewInterface_SetEventVisuals");
static_assert(sizeof(ChallengesMenuViewInterface_SetEventVisuals) == 0x000010, "Wrong size on ChallengesMenuViewInterface_SetEventVisuals");
static_assert(offsetof(ChallengesMenuViewInterface_SetEventVisuals, EventFrameLabel) == 0x000000, "Member 'ChallengesMenuViewInterface_SetEventVisuals::EventFrameLabel' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetIsFocused
// 0x0001 (0x0001 - 0x0000)
struct ChallengesMenuViewInterface_SetIsFocused final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuViewInterface_SetIsFocused) == 0x000001, "Wrong alignment on ChallengesMenuViewInterface_SetIsFocused");
static_assert(sizeof(ChallengesMenuViewInterface_SetIsFocused) == 0x000001, "Wrong size on ChallengesMenuViewInterface_SetIsFocused");
static_assert(offsetof(ChallengesMenuViewInterface_SetIsFocused, IsFocused) == 0x000000, "Member 'ChallengesMenuViewInterface_SetIsFocused::IsFocused' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetSubtitle
// 0x0018 (0x0018 - 0x0000)
struct ChallengesMenuViewInterface_SetSubtitle final
{
public:
	class FText                                   Subtitle;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuViewInterface_SetSubtitle) == 0x000008, "Wrong alignment on ChallengesMenuViewInterface_SetSubtitle");
static_assert(sizeof(ChallengesMenuViewInterface_SetSubtitle) == 0x000018, "Wrong size on ChallengesMenuViewInterface_SetSubtitle");
static_assert(offsetof(ChallengesMenuViewInterface_SetSubtitle, Subtitle) == 0x000000, "Member 'ChallengesMenuViewInterface_SetSubtitle::Subtitle' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetTabEnabled
// 0x0008 (0x0008 - 0x0000)
struct ChallengesMenuViewInterface_SetTabEnabled final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChallengesMenuViewInterface_SetTabEnabled) == 0x000004, "Wrong alignment on ChallengesMenuViewInterface_SetTabEnabled");
static_assert(sizeof(ChallengesMenuViewInterface_SetTabEnabled) == 0x000008, "Wrong size on ChallengesMenuViewInterface_SetTabEnabled");
static_assert(offsetof(ChallengesMenuViewInterface_SetTabEnabled, Key) == 0x000000, "Member 'ChallengesMenuViewInterface_SetTabEnabled::Key' has a wrong offset!");
static_assert(offsetof(ChallengesMenuViewInterface_SetTabEnabled, Enabled) == 0x000004, "Member 'ChallengesMenuViewInterface_SetTabEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetTabsData
// 0x0018 (0x0018 - 0x0000)
struct ChallengesMenuViewInterface_SetTabsData final
{
public:
	TArray<struct FTabWidgetData>                 TabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedKey;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChallengesMenuViewInterface_SetTabsData) == 0x000008, "Wrong alignment on ChallengesMenuViewInterface_SetTabsData");
static_assert(sizeof(ChallengesMenuViewInterface_SetTabsData) == 0x000018, "Wrong size on ChallengesMenuViewInterface_SetTabsData");
static_assert(offsetof(ChallengesMenuViewInterface_SetTabsData, TabsData) == 0x000000, "Member 'ChallengesMenuViewInterface_SetTabsData::TabsData' has a wrong offset!");
static_assert(offsetof(ChallengesMenuViewInterface_SetTabsData, SelectedKey) == 0x000010, "Member 'ChallengesMenuViewInterface_SetTabsData::SelectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetTabSelected
// 0x0004 (0x0004 - 0x0000)
struct ChallengesMenuViewInterface_SetTabSelected final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuViewInterface_SetTabSelected) == 0x000004, "Wrong alignment on ChallengesMenuViewInterface_SetTabSelected");
static_assert(sizeof(ChallengesMenuViewInterface_SetTabSelected) == 0x000004, "Wrong size on ChallengesMenuViewInterface_SetTabSelected");
static_assert(offsetof(ChallengesMenuViewInterface_SetTabSelected, Key) == 0x000000, "Member 'ChallengesMenuViewInterface_SetTabSelected::Key' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengesMenuViewInterface.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct ChallengesMenuViewInterface_SetTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengesMenuViewInterface_SetTitle) == 0x000008, "Wrong alignment on ChallengesMenuViewInterface_SetTitle");
static_assert(sizeof(ChallengesMenuViewInterface_SetTitle) == 0x000018, "Wrong size on ChallengesMenuViewInterface_SetTitle");
static_assert(offsetof(ChallengesMenuViewInterface_SetTitle, Title) == 0x000000, "Member 'ChallengesMenuViewInterface_SetTitle::Title' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengeTrackerContainerViewInterface.InitWidgetData
// 0x0010 (0x0010 - 0x0000)
struct ChallengeTrackerContainerViewInterface_InitWidgetData final
{
public:
	TArray<struct FChallengeTrackerViewData>      ViewData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerContainerViewInterface_InitWidgetData) == 0x000008, "Wrong alignment on ChallengeTrackerContainerViewInterface_InitWidgetData");
static_assert(sizeof(ChallengeTrackerContainerViewInterface_InitWidgetData) == 0x000010, "Wrong size on ChallengeTrackerContainerViewInterface_InitWidgetData");
static_assert(offsetof(ChallengeTrackerContainerViewInterface_InitWidgetData, ViewData) == 0x000000, "Member 'ChallengeTrackerContainerViewInterface_InitWidgetData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengeTrackerContainerViewInterface.UpdateChallenges
// 0x0010 (0x0010 - 0x0000)
struct ChallengeTrackerContainerViewInterface_UpdateChallenges final
{
public:
	TArray<struct FChallengeTrackerViewData>      ViewData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerContainerViewInterface_UpdateChallenges) == 0x000008, "Wrong alignment on ChallengeTrackerContainerViewInterface_UpdateChallenges");
static_assert(sizeof(ChallengeTrackerContainerViewInterface_UpdateChallenges) == 0x000010, "Wrong size on ChallengeTrackerContainerViewInterface_UpdateChallenges");
static_assert(offsetof(ChallengeTrackerContainerViewInterface_UpdateChallenges, ViewData) == 0x000000, "Member 'ChallengeTrackerContainerViewInterface_UpdateChallenges::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.InitWidgetData
// 0x0050 (0x0050 - 0x0000)
struct ChallengeTrackerViewInterface_InitWidgetData final
{
public:
	struct FChallengeTrackerViewData              ViewData;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerViewInterface_InitWidgetData) == 0x000008, "Wrong alignment on ChallengeTrackerViewInterface_InitWidgetData");
static_assert(sizeof(ChallengeTrackerViewInterface_InitWidgetData) == 0x000050, "Wrong size on ChallengeTrackerViewInterface_InitWidgetData");
static_assert(offsetof(ChallengeTrackerViewInterface_InitWidgetData, ViewData) == 0x000000, "Member 'ChallengeTrackerViewInterface_InitWidgetData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.SetWidgetProgression
// 0x0028 (0x0028 - 0x0000)
struct ChallengeTrackerViewInterface_SetWidgetProgression final
{
public:
	struct FArchiveNodeObjectiveViewData          ProgressionData;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerViewInterface_SetWidgetProgression) == 0x000008, "Wrong alignment on ChallengeTrackerViewInterface_SetWidgetProgression");
static_assert(sizeof(ChallengeTrackerViewInterface_SetWidgetProgression) == 0x000028, "Wrong size on ChallengeTrackerViewInterface_SetWidgetProgression");
static_assert(offsetof(ChallengeTrackerViewInterface_SetWidgetProgression, ProgressionData) == 0x000000, "Member 'ChallengeTrackerViewInterface_SetWidgetProgression::ProgressionData' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.SetWidgetVisuals
// 0x0058 (0x0058 - 0x0000)
struct ChallengeTrackerViewInterface_SetWidgetVisuals final
{
public:
	struct FChallengeTrackerSkinData              SkinData;                                          // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerViewInterface_SetWidgetVisuals) == 0x000008, "Wrong alignment on ChallengeTrackerViewInterface_SetWidgetVisuals");
static_assert(sizeof(ChallengeTrackerViewInterface_SetWidgetVisuals) == 0x000058, "Wrong size on ChallengeTrackerViewInterface_SetWidgetVisuals");
static_assert(offsetof(ChallengeTrackerViewInterface_SetWidgetVisuals, SkinData) == 0x000000, "Member 'ChallengeTrackerViewInterface_SetWidgetVisuals::SkinData' has a wrong offset!");

// Function DBDUIViewInterfaces.ChallengeTrackerViewInterface.UpdateWidgetProgression
// 0x0028 (0x0028 - 0x0000)
struct ChallengeTrackerViewInterface_UpdateWidgetProgression final
{
public:
	struct FArchiveNodeObjectiveViewData          ProgressionData;                                   // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ChallengeTrackerViewInterface_UpdateWidgetProgression) == 0x000008, "Wrong alignment on ChallengeTrackerViewInterface_UpdateWidgetProgression");
static_assert(sizeof(ChallengeTrackerViewInterface_UpdateWidgetProgression) == 0x000028, "Wrong size on ChallengeTrackerViewInterface_UpdateWidgetProgression");
static_assert(offsetof(ChallengeTrackerViewInterface_UpdateWidgetProgression, ProgressionData) == 0x000000, "Member 'ChallengeTrackerViewInterface_UpdateWidgetProgression::ProgressionData' has a wrong offset!");

// Function DBDUIViewInterfaces.ScreenIndicatorsContainerViewInterface.RemoveDirectionIndicator
// 0x0010 (0x0010 - 0x0000)
struct ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator final
{
public:
	class FString                                 ID;                                                // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator) == 0x000008, "Wrong alignment on ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator");
static_assert(sizeof(ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator) == 0x000010, "Wrong size on ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator");
static_assert(offsetof(ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator, ID) == 0x000000, "Member 'ScreenIndicatorsContainerViewInterface_RemoveDirectionIndicator::ID' has a wrong offset!");

// Function DBDUIViewInterfaces.ScreenIndicatorsContainerViewInterface.ShowDirectionIndicator
// 0x0050 (0x0050 - 0x0000)
struct ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator final
{
public:
	struct FScreenIndicatorViewData               Data;                                              // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator) == 0x000008, "Wrong alignment on ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator");
static_assert(sizeof(ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator) == 0x000050, "Wrong size on ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator");
static_assert(offsetof(ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator, Data) == 0x000000, "Member 'ScreenIndicatorsContainerViewInterface_ShowDirectionIndicator::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.CinematicViewInterface.FadeInAnimation
// 0x0008 (0x0008 - 0x0000)
struct CinematicViewInterface_FadeInAnimation final
{
public:
	float                                         FadeInDuration;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicViewInterface_FadeInAnimation) == 0x000004, "Wrong alignment on CinematicViewInterface_FadeInAnimation");
static_assert(sizeof(CinematicViewInterface_FadeInAnimation) == 0x000008, "Wrong size on CinematicViewInterface_FadeInAnimation");
static_assert(offsetof(CinematicViewInterface_FadeInAnimation, FadeInDuration) == 0x000000, "Member 'CinematicViewInterface_FadeInAnimation::FadeInDuration' has a wrong offset!");
static_assert(offsetof(CinematicViewInterface_FadeInAnimation, Delay) == 0x000004, "Member 'CinematicViewInterface_FadeInAnimation::Delay' has a wrong offset!");

// Function DBDUIViewInterfaces.CinematicViewInterface.FadeOutAnimation
// 0x0008 (0x0008 - 0x0000)
struct CinematicViewInterface_FadeOutAnimation final
{
public:
	float                                         FadeOutDuration;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicViewInterface_FadeOutAnimation) == 0x000004, "Wrong alignment on CinematicViewInterface_FadeOutAnimation");
static_assert(sizeof(CinematicViewInterface_FadeOutAnimation) == 0x000008, "Wrong size on CinematicViewInterface_FadeOutAnimation");
static_assert(offsetof(CinematicViewInterface_FadeOutAnimation, FadeOutDuration) == 0x000000, "Member 'CinematicViewInterface_FadeOutAnimation::FadeOutDuration' has a wrong offset!");
static_assert(offsetof(CinematicViewInterface_FadeOutAnimation, Delay) == 0x000004, "Member 'CinematicViewInterface_FadeOutAnimation::Delay' has a wrong offset!");

// Function DBDUIViewInterfaces.CinematicViewInterface.GetBinkVideoPlayer
// 0x0008 (0x0008 - 0x0000)
struct CinematicViewInterface_GetBinkVideoPlayer final
{
public:
	class UBinkMediaPlayer*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicViewInterface_GetBinkVideoPlayer) == 0x000008, "Wrong alignment on CinematicViewInterface_GetBinkVideoPlayer");
static_assert(sizeof(CinematicViewInterface_GetBinkVideoPlayer) == 0x000008, "Wrong size on CinematicViewInterface_GetBinkVideoPlayer");
static_assert(offsetof(CinematicViewInterface_GetBinkVideoPlayer, ReturnValue) == 0x000000, "Member 'CinematicViewInterface_GetBinkVideoPlayer::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.CinematicViewInterface.SetSize
// 0x0010 (0x0010 - 0x0000)
struct CinematicViewInterface_SetSize final
{
public:
	struct FVector2D                              Size;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicViewInterface_SetSize) == 0x000008, "Wrong alignment on CinematicViewInterface_SetSize");
static_assert(sizeof(CinematicViewInterface_SetSize) == 0x000010, "Wrong size on CinematicViewInterface_SetSize");
static_assert(offsetof(CinematicViewInterface_SetSize, Size) == 0x000000, "Member 'CinematicViewInterface_SetSize::Size' has a wrong offset!");

// Function DBDUIViewInterfaces.CinematicViewInterface.SetSkipInputSwitcherEnabled
// 0x0001 (0x0001 - 0x0000)
struct CinematicViewInterface_SetSkipInputSwitcherEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicViewInterface_SetSkipInputSwitcherEnabled) == 0x000001, "Wrong alignment on CinematicViewInterface_SetSkipInputSwitcherEnabled");
static_assert(sizeof(CinematicViewInterface_SetSkipInputSwitcherEnabled) == 0x000001, "Wrong size on CinematicViewInterface_SetSkipInputSwitcherEnabled");
static_assert(offsetof(CinematicViewInterface_SetSkipInputSwitcherEnabled, IsEnabled) == 0x000000, "Member 'CinematicViewInterface_SetSkipInputSwitcherEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.CinematicViewInterface.SetSkipInputSwitcherVisibility
// 0x0001 (0x0001 - 0x0000)
struct CinematicViewInterface_SetSkipInputSwitcherVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CinematicViewInterface_SetSkipInputSwitcherVisibility) == 0x000001, "Wrong alignment on CinematicViewInterface_SetSkipInputSwitcherVisibility");
static_assert(sizeof(CinematicViewInterface_SetSkipInputSwitcherVisibility) == 0x000001, "Wrong size on CinematicViewInterface_SetSkipInputSwitcherVisibility");
static_assert(offsetof(CinematicViewInterface_SetSkipInputSwitcherVisibility, IsVisible) == 0x000000, "Member 'CinematicViewInterface_SetSkipInputSwitcherVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.LobbyViewInterface.SetButtonBetaFeatureVisibility
// 0x0001 (0x0001 - 0x0000)
struct LobbyViewInterface_SetButtonBetaFeatureVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyViewInterface_SetButtonBetaFeatureVisibility) == 0x000001, "Wrong alignment on LobbyViewInterface_SetButtonBetaFeatureVisibility");
static_assert(sizeof(LobbyViewInterface_SetButtonBetaFeatureVisibility) == 0x000001, "Wrong size on LobbyViewInterface_SetButtonBetaFeatureVisibility");
static_assert(offsetof(LobbyViewInterface_SetButtonBetaFeatureVisibility, IsVisible) == 0x000000, "Member 'LobbyViewInterface_SetButtonBetaFeatureVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.LobbyViewInterface.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct LobbyViewInterface_SetMenuState final
{
public:
	ELobbyMenuState                               State;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyViewInterface_SetMenuState) == 0x000001, "Wrong alignment on LobbyViewInterface_SetMenuState");
static_assert(sizeof(LobbyViewInterface_SetMenuState) == 0x000001, "Wrong size on LobbyViewInterface_SetMenuState");
static_assert(offsetof(LobbyViewInterface_SetMenuState, State) == 0x000000, "Member 'LobbyViewInterface_SetMenuState::State' has a wrong offset!");

// Function DBDUIViewInterfaces.LobbyViewInterface.UpdateBackButtonState
// 0x0020 (0x0020 - 0x0000)
struct LobbyViewInterface_UpdateBackButtonState final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Label;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyViewInterface_UpdateBackButtonState) == 0x000008, "Wrong alignment on LobbyViewInterface_UpdateBackButtonState");
static_assert(sizeof(LobbyViewInterface_UpdateBackButtonState) == 0x000020, "Wrong size on LobbyViewInterface_UpdateBackButtonState");
static_assert(offsetof(LobbyViewInterface_UpdateBackButtonState, IsEnabled) == 0x000000, "Member 'LobbyViewInterface_UpdateBackButtonState::IsEnabled' has a wrong offset!");
static_assert(offsetof(LobbyViewInterface_UpdateBackButtonState, Label) == 0x000008, "Member 'LobbyViewInterface_UpdateBackButtonState::Label' has a wrong offset!");

// Function DBDUIViewInterfaces.LobbyViewInterface.GetLobbyCharactersInterface
// 0x0010 (0x0010 - 0x0000)
struct LobbyViewInterface_GetLobbyCharactersInterface final
{
public:
	TScriptInterface<class ILobbyCharactersViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyViewInterface_GetLobbyCharactersInterface) == 0x000008, "Wrong alignment on LobbyViewInterface_GetLobbyCharactersInterface");
static_assert(sizeof(LobbyViewInterface_GetLobbyCharactersInterface) == 0x000010, "Wrong size on LobbyViewInterface_GetLobbyCharactersInterface");
static_assert(offsetof(LobbyViewInterface_GetLobbyCharactersInterface, ReturnValue) == 0x000000, "Member 'LobbyViewInterface_GetLobbyCharactersInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.LobbyViewInterface.GetPlayerListInterface
// 0x0010 (0x0010 - 0x0000)
struct LobbyViewInterface_GetPlayerListInterface final
{
public:
	TScriptInterface<class ILobbyPlayerListViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyViewInterface_GetPlayerListInterface) == 0x000008, "Wrong alignment on LobbyViewInterface_GetPlayerListInterface");
static_assert(sizeof(LobbyViewInterface_GetPlayerListInterface) == 0x000010, "Wrong size on LobbyViewInterface_GetPlayerListInterface");
static_assert(offsetof(LobbyViewInterface_GetPlayerListInterface, ReturnValue) == 0x000000, "Member 'LobbyViewInterface_GetPlayerListInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.CompetenceContainerViewInterface.GetPerkInterface
// 0x0018 (0x0018 - 0x0000)
struct CompetenceContainerViewInterface_GetPerkInterface final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPerkViewInterface>    ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetenceContainerViewInterface_GetPerkInterface) == 0x000008, "Wrong alignment on CompetenceContainerViewInterface_GetPerkInterface");
static_assert(sizeof(CompetenceContainerViewInterface_GetPerkInterface) == 0x000018, "Wrong size on CompetenceContainerViewInterface_GetPerkInterface");
static_assert(offsetof(CompetenceContainerViewInterface_GetPerkInterface, Param_Index) == 0x000000, "Member 'CompetenceContainerViewInterface_GetPerkInterface::Param_Index' has a wrong offset!");
static_assert(offsetof(CompetenceContainerViewInterface_GetPerkInterface, ReturnValue) == 0x000008, "Member 'CompetenceContainerViewInterface_GetPerkInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.CompetenceContainerViewInterface.GetSkillInterface
// 0x0018 (0x0018 - 0x0000)
struct CompetenceContainerViewInterface_GetSkillInterface final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class ISkillViewInterface>   ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(CompetenceContainerViewInterface_GetSkillInterface) == 0x000008, "Wrong alignment on CompetenceContainerViewInterface_GetSkillInterface");
static_assert(sizeof(CompetenceContainerViewInterface_GetSkillInterface) == 0x000018, "Wrong size on CompetenceContainerViewInterface_GetSkillInterface");
static_assert(offsetof(CompetenceContainerViewInterface_GetSkillInterface, Param_Index) == 0x000000, "Member 'CompetenceContainerViewInterface_GetSkillInterface::Param_Index' has a wrong offset!");
static_assert(offsetof(CompetenceContainerViewInterface_GetSkillInterface, ReturnValue) == 0x000008, "Member 'CompetenceContainerViewInterface_GetSkillInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.CoreBaseViewInterface.GetLockedFeatureElements
// 0x0010 (0x0010 - 0x0000)
struct CoreBaseViewInterface_GetLockedFeatureElements final
{
public:
	TArray<TScriptInterface<class ILockedFeatureElementViewInterface>> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(CoreBaseViewInterface_GetLockedFeatureElements) == 0x000008, "Wrong alignment on CoreBaseViewInterface_GetLockedFeatureElements");
static_assert(sizeof(CoreBaseViewInterface_GetLockedFeatureElements) == 0x000010, "Wrong size on CoreBaseViewInterface_GetLockedFeatureElements");
static_assert(offsetof(CoreBaseViewInterface_GetLockedFeatureElements, ReturnValue) == 0x000000, "Member 'CoreBaseViewInterface_GetLockedFeatureElements::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.CreditsViewInterface.ScrollToName
// 0x0018 (0x0018 - 0x0000)
struct CreditsViewInterface_ScrollToName final
{
public:
	class FString                                 Param_Name;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Delay;                                             // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(CreditsViewInterface_ScrollToName) == 0x000008, "Wrong alignment on CreditsViewInterface_ScrollToName");
static_assert(sizeof(CreditsViewInterface_ScrollToName) == 0x000018, "Wrong size on CreditsViewInterface_ScrollToName");
static_assert(offsetof(CreditsViewInterface_ScrollToName, Param_Name) == 0x000000, "Member 'CreditsViewInterface_ScrollToName::Param_Name' has a wrong offset!");
static_assert(offsetof(CreditsViewInterface_ScrollToName, Delay) == 0x000010, "Member 'CreditsViewInterface_ScrollToName::Delay' has a wrong offset!");

// Function DBDUIViewInterfaces.CreditsViewInterface.SetText
// 0x0018 (0x0018 - 0x0000)
struct CreditsViewInterface_SetText final
{
public:
	class FText                                   Text;                                              // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(CreditsViewInterface_SetText) == 0x000008, "Wrong alignment on CreditsViewInterface_SetText");
static_assert(sizeof(CreditsViewInterface_SetText) == 0x000018, "Wrong size on CreditsViewInterface_SetText");
static_assert(offsetof(CreditsViewInterface_SetText, Text) == 0x000000, "Member 'CreditsViewInterface_SetText::Text' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillUnlockedNotificationViewInterface.Show
// 0x0050 (0x0050 - 0x0000)
struct SkillUnlockedNotificationViewInterface_Show final
{
public:
	struct FSkillUnlockedNotificationViewData     SkillUnlockedNotificationData;                     // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillUnlockedNotificationViewInterface_Show) == 0x000008, "Wrong alignment on SkillUnlockedNotificationViewInterface_Show");
static_assert(sizeof(SkillUnlockedNotificationViewInterface_Show) == 0x000050, "Wrong size on SkillUnlockedNotificationViewInterface_Show");
static_assert(offsetof(SkillUnlockedNotificationViewInterface_Show, SkillUnlockedNotificationData) == 0x000000, "Member 'SkillUnlockedNotificationViewInterface_Show::SkillUnlockedNotificationData' has a wrong offset!");

// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetCanRemoveDailyRitual
// 0x0001 (0x0001 - 0x0000)
struct DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual final
{
public:
	bool                                          CanRemoveDailyRitual;                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual) == 0x000001, "Wrong alignment on DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual");
static_assert(sizeof(DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual) == 0x000001, "Wrong size on DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual");
static_assert(offsetof(DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual, CanRemoveDailyRitual) == 0x000000, "Member 'DailyRitualsPopupViewInterface_SetCanRemoveDailyRitual::CanRemoveDailyRitual' has a wrong offset!");

// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetDailyRitualsData
// 0x0018 (0x0018 - 0x0000)
struct DailyRitualsPopupViewInterface_SetDailyRitualsData final
{
public:
	TArray<struct FDailyRitualViewData>           DailyRitualsData;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsAfterTrial;                                      // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(DailyRitualsPopupViewInterface_SetDailyRitualsData) == 0x000008, "Wrong alignment on DailyRitualsPopupViewInterface_SetDailyRitualsData");
static_assert(sizeof(DailyRitualsPopupViewInterface_SetDailyRitualsData) == 0x000018, "Wrong size on DailyRitualsPopupViewInterface_SetDailyRitualsData");
static_assert(offsetof(DailyRitualsPopupViewInterface_SetDailyRitualsData, DailyRitualsData) == 0x000000, "Member 'DailyRitualsPopupViewInterface_SetDailyRitualsData::DailyRitualsData' has a wrong offset!");
static_assert(offsetof(DailyRitualsPopupViewInterface_SetDailyRitualsData, IsAfterTrial) == 0x000010, "Member 'DailyRitualsPopupViewInterface_SetDailyRitualsData::IsAfterTrial' has a wrong offset!");

// Function DBDUIViewInterfaces.DailyRitualsPopupViewInterface.SetIsOnboardingRitualsExperimentActive
// 0x0001 (0x0001 - 0x0000)
struct DailyRitualsPopupViewInterface_SetIsOnboardingRitualsExperimentActive final
{
public:
	bool                                          IsOnboardingRitualsExperimentActive;               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DailyRitualsPopupViewInterface_SetIsOnboardingRitualsExperimentActive) == 0x000001, "Wrong alignment on DailyRitualsPopupViewInterface_SetIsOnboardingRitualsExperimentActive");
static_assert(sizeof(DailyRitualsPopupViewInterface_SetIsOnboardingRitualsExperimentActive) == 0x000001, "Wrong size on DailyRitualsPopupViewInterface_SetIsOnboardingRitualsExperimentActive");
static_assert(offsetof(DailyRitualsPopupViewInterface_SetIsOnboardingRitualsExperimentActive, IsOnboardingRitualsExperimentActive) == 0x000000, "Member 'DailyRitualsPopupViewInterface_SetIsOnboardingRitualsExperimentActive::IsOnboardingRitualsExperimentActive' has a wrong offset!");

// Function DBDUIViewInterfaces.DisplayStandViewInterface.SetViewData
// 0x0008 (0x0008 - 0x0000)
struct DisplayStandViewInterface_SetViewData final
{
public:
	struct FDisplayStandViewData                  ViewData;                                          // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(DisplayStandViewInterface_SetViewData) == 0x000004, "Wrong alignment on DisplayStandViewInterface_SetViewData");
static_assert(sizeof(DisplayStandViewInterface_SetViewData) == 0x000008, "Wrong size on DisplayStandViewInterface_SetViewData");
static_assert(offsetof(DisplayStandViewInterface_SetViewData, ViewData) == 0x000000, "Member 'DisplayStandViewInterface_SetViewData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.EffectCardViewInterface.SetData
// 0x00D8 (0x00D8 - 0x0000)
struct EffectCardViewInterface_SetData final
{
public:
	struct FEffectCardViewData                    EffectCardData;                                    // 0x0000(0x00D8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EffectCardViewInterface_SetData) == 0x000008, "Wrong alignment on EffectCardViewInterface_SetData");
static_assert(sizeof(EffectCardViewInterface_SetData) == 0x0000D8, "Wrong size on EffectCardViewInterface_SetData");
static_assert(offsetof(EffectCardViewInterface_SetData, EffectCardData) == 0x000000, "Member 'EffectCardViewInterface_SetData::EffectCardData' has a wrong offset!");

// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.SetEndGameScenarioProgressionMode
// 0x0001 (0x0001 - 0x0000)
struct EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode final
{
public:
	bool                                          IsSlowMode;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode) == 0x000001, "Wrong alignment on EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode");
static_assert(sizeof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode) == 0x000001, "Wrong size on EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode");
static_assert(offsetof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode, IsSlowMode) == 0x000000, "Member 'EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionMode::IsSlowMode' has a wrong offset!");

// Function DBDUIViewInterfaces.EndGameCollapseBarViewInterface.SetEndGameScenarioProgressionValue
// 0x0008 (0x0008 - 0x0000)
struct EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue final
{
public:
	float                                         Amount;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceUpdate;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue) == 0x000004, "Wrong alignment on EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue");
static_assert(sizeof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue) == 0x000008, "Wrong size on EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue");
static_assert(offsetof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue, Amount) == 0x000000, "Member 'EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue::Amount' has a wrong offset!");
static_assert(offsetof(EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue, ForceUpdate) == 0x000004, "Member 'EndGameCollapseBarViewInterface_SetEndGameScenarioProgressionValue::ForceUpdate' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedItemViewInterface.ClearData
// 0x0001 (0x0001 - 0x0000)
struct EquippedItemViewInterface_ClearData final
{
public:
	bool                                          FullClear;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedItemViewInterface_ClearData) == 0x000001, "Wrong alignment on EquippedItemViewInterface_ClearData");
static_assert(sizeof(EquippedItemViewInterface_ClearData) == 0x000001, "Wrong size on EquippedItemViewInterface_ClearData");
static_assert(offsetof(EquippedItemViewInterface_ClearData, FullClear) == 0x000000, "Member 'EquippedItemViewInterface_ClearData::FullClear' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedItemViewInterface.GetIsEquippedItemVisible
// 0x0001 (0x0001 - 0x0000)
struct EquippedItemViewInterface_GetIsEquippedItemVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedItemViewInterface_GetIsEquippedItemVisible) == 0x000001, "Wrong alignment on EquippedItemViewInterface_GetIsEquippedItemVisible");
static_assert(sizeof(EquippedItemViewInterface_GetIsEquippedItemVisible) == 0x000001, "Wrong size on EquippedItemViewInterface_GetIsEquippedItemVisible");
static_assert(offsetof(EquippedItemViewInterface_GetIsEquippedItemVisible, ReturnValue) == 0x000000, "Member 'EquippedItemViewInterface_GetIsEquippedItemVisible::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct EquippedItemViewInterface_SetActiveState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedItemViewInterface_SetActiveState) == 0x000001, "Wrong alignment on EquippedItemViewInterface_SetActiveState");
static_assert(sizeof(EquippedItemViewInterface_SetActiveState) == 0x000001, "Wrong size on EquippedItemViewInterface_SetActiveState");
static_assert(offsetof(EquippedItemViewInterface_SetActiveState, IsActive) == 0x000000, "Member 'EquippedItemViewInterface_SetActiveState::IsActive' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetData
// 0x0180 (0x0180 - 0x0000)
struct EquippedItemViewInterface_SetData final
{
public:
	struct FItemBundleViewData                    ItemBundleData;                                    // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedItemViewInterface_SetData) == 0x000008, "Wrong alignment on EquippedItemViewInterface_SetData");
static_assert(sizeof(EquippedItemViewInterface_SetData) == 0x000180, "Wrong size on EquippedItemViewInterface_SetData");
static_assert(offsetof(EquippedItemViewInterface_SetData, ItemBundleData) == 0x000000, "Member 'EquippedItemViewInterface_SetData::ItemBundleData' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedItemViewInterface.SetFakeItem
// 0x0068 (0x0068 - 0x0000)
struct EquippedItemViewInterface_SetFakeItem final
{
public:
	bool                                          IsHoldingFakeItem;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              FakeItemIcon;                                      // 0x0008(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FKey                                   InputKey;                                          // 0x0040(0x0020)(Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Count;                                             // 0x0060(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EquippedItemViewInterface_SetFakeItem) == 0x000008, "Wrong alignment on EquippedItemViewInterface_SetFakeItem");
static_assert(sizeof(EquippedItemViewInterface_SetFakeItem) == 0x000068, "Wrong size on EquippedItemViewInterface_SetFakeItem");
static_assert(offsetof(EquippedItemViewInterface_SetFakeItem, IsHoldingFakeItem) == 0x000000, "Member 'EquippedItemViewInterface_SetFakeItem::IsHoldingFakeItem' has a wrong offset!");
static_assert(offsetof(EquippedItemViewInterface_SetFakeItem, FakeItemIcon) == 0x000008, "Member 'EquippedItemViewInterface_SetFakeItem::FakeItemIcon' has a wrong offset!");
static_assert(offsetof(EquippedItemViewInterface_SetFakeItem, InputKey) == 0x000040, "Member 'EquippedItemViewInterface_SetFakeItem::InputKey' has a wrong offset!");
static_assert(offsetof(EquippedItemViewInterface_SetFakeItem, Count) == 0x000060, "Member 'EquippedItemViewInterface_SetFakeItem::Count' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct EquippedPowerViewInterface_SetActiveState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedPowerViewInterface_SetActiveState) == 0x000001, "Wrong alignment on EquippedPowerViewInterface_SetActiveState");
static_assert(sizeof(EquippedPowerViewInterface_SetActiveState) == 0x000001, "Wrong size on EquippedPowerViewInterface_SetActiveState");
static_assert(offsetof(EquippedPowerViewInterface_SetActiveState, IsActive) == 0x000000, "Member 'EquippedPowerViewInterface_SetActiveState::IsActive' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetCarryingMode
// 0x0130 (0x0130 - 0x0000)
struct EquippedPowerViewInterface_SetCarryingMode final
{
public:
	bool                                          IsCarrying;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPowerViewData                         CarryingViewData;                                  // 0x0008(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedPowerViewInterface_SetCarryingMode) == 0x000008, "Wrong alignment on EquippedPowerViewInterface_SetCarryingMode");
static_assert(sizeof(EquippedPowerViewInterface_SetCarryingMode) == 0x000130, "Wrong size on EquippedPowerViewInterface_SetCarryingMode");
static_assert(offsetof(EquippedPowerViewInterface_SetCarryingMode, IsCarrying) == 0x000000, "Member 'EquippedPowerViewInterface_SetCarryingMode::IsCarrying' has a wrong offset!");
static_assert(offsetof(EquippedPowerViewInterface_SetCarryingMode, CarryingViewData) == 0x000008, "Member 'EquippedPowerViewInterface_SetCarryingMode::CarryingViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.EquippedPowerViewInterface.SetData
// 0x0228 (0x0228 - 0x0000)
struct EquippedPowerViewInterface_SetData final
{
public:
	struct FPowerBundleViewData                   PowerBundleData;                                   // 0x0000(0x0228)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EquippedPowerViewInterface_SetData) == 0x000008, "Wrong alignment on EquippedPowerViewInterface_SetData");
static_assert(sizeof(EquippedPowerViewInterface_SetData) == 0x000228, "Wrong size on EquippedPowerViewInterface_SetData");
static_assert(offsetof(EquippedPowerViewInterface_SetData, PowerBundleData) == 0x000000, "Member 'EquippedPowerViewInterface_SetData::PowerBundleData' has a wrong offset!");

// Function DBDUIViewInterfaces.ShrineOfSecretsViewInterface.SetData
// 0x0048 (0x0048 - 0x0000)
struct ShrineOfSecretsViewInterface_SetData final
{
public:
	struct FShrineOfSecretsViewData               ShrineOfSecretsViewData;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShrineOfSecretsViewInterface_SetData) == 0x000008, "Wrong alignment on ShrineOfSecretsViewInterface_SetData");
static_assert(sizeof(ShrineOfSecretsViewInterface_SetData) == 0x000048, "Wrong size on ShrineOfSecretsViewInterface_SetData");
static_assert(offsetof(ShrineOfSecretsViewInterface_SetData, ShrineOfSecretsViewData) == 0x000000, "Member 'ShrineOfSecretsViewInterface_SetData::ShrineOfSecretsViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ShrineOfSecretsViewInterface.UpdateItemsFromPurchase
// 0x0208 (0x0208 - 0x0000)
struct ShrineOfSecretsViewInterface_UpdateItemsFromPurchase final
{
public:
	struct FShrineOfSecretsViewData               ShrineOfSecretsViewData;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FShrineOfSecretsItemViewData           PurchasedItem;                                     // 0x0048(0x01C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ShrineOfSecretsViewInterface_UpdateItemsFromPurchase) == 0x000008, "Wrong alignment on ShrineOfSecretsViewInterface_UpdateItemsFromPurchase");
static_assert(sizeof(ShrineOfSecretsViewInterface_UpdateItemsFromPurchase) == 0x000208, "Wrong size on ShrineOfSecretsViewInterface_UpdateItemsFromPurchase");
static_assert(offsetof(ShrineOfSecretsViewInterface_UpdateItemsFromPurchase, ShrineOfSecretsViewData) == 0x000000, "Member 'ShrineOfSecretsViewInterface_UpdateItemsFromPurchase::ShrineOfSecretsViewData' has a wrong offset!");
static_assert(offsetof(ShrineOfSecretsViewInterface_UpdateItemsFromPurchase, PurchasedItem) == 0x000048, "Member 'ShrineOfSecretsViewInterface_UpdateItemsFromPurchase::PurchasedItem' has a wrong offset!");

// Function DBDUIViewInterfaces.EventCollectionViewInterface.Init
// 0x02A8 (0x02A8 - 0x0000)
struct EventCollectionViewInterface_Init final
{
public:
	struct FEventEntryPopupSkinUIData             SkinData;                                          // 0x0000(0x02A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCollectionViewInterface_Init) == 0x000008, "Wrong alignment on EventCollectionViewInterface_Init");
static_assert(sizeof(EventCollectionViewInterface_Init) == 0x0002A8, "Wrong size on EventCollectionViewInterface_Init");
static_assert(offsetof(EventCollectionViewInterface_Init, SkinData) == 0x000000, "Member 'EventCollectionViewInterface_Init::SkinData' has a wrong offset!");

// Function DBDUIViewInterfaces.EventCollectionViewInterface.SetInstructionWidgetData
// 0x0068 (0x0068 - 0x0000)
struct EventCollectionViewInterface_SetInstructionWidgetData final
{
public:
	struct FCustomizationItemOriginViewData       ViewData;                                          // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCollectionViewInterface_SetInstructionWidgetData) == 0x000008, "Wrong alignment on EventCollectionViewInterface_SetInstructionWidgetData");
static_assert(sizeof(EventCollectionViewInterface_SetInstructionWidgetData) == 0x000068, "Wrong size on EventCollectionViewInterface_SetInstructionWidgetData");
static_assert(offsetof(EventCollectionViewInterface_SetInstructionWidgetData, ViewData) == 0x000000, "Member 'EventCollectionViewInterface_SetInstructionWidgetData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.EventCollectionViewInterface.SetItemsData
// 0x0018 (0x0018 - 0x0000)
struct EventCollectionViewInterface_SetItemsData final
{
public:
	TArray<class UStoreCustomizationItemViewData*> CustomizationRewardsData;                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedIndex;                                     // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventCollectionViewInterface_SetItemsData) == 0x000008, "Wrong alignment on EventCollectionViewInterface_SetItemsData");
static_assert(sizeof(EventCollectionViewInterface_SetItemsData) == 0x000018, "Wrong size on EventCollectionViewInterface_SetItemsData");
static_assert(offsetof(EventCollectionViewInterface_SetItemsData, CustomizationRewardsData) == 0x000000, "Member 'EventCollectionViewInterface_SetItemsData::CustomizationRewardsData' has a wrong offset!");
static_assert(offsetof(EventCollectionViewInterface_SetItemsData, SelectedIndex) == 0x000010, "Member 'EventCollectionViewInterface_SetItemsData::SelectedIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.EventCollectionViewInterface.SetPreviewAreaData
// 0x0020 (0x0020 - 0x0000)
struct EventCollectionViewInterface_SetPreviewAreaData final
{
public:
	struct FCustomizationItemPreviewAreaViewData  ViewData;                                          // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCollectionViewInterface_SetPreviewAreaData) == 0x000008, "Wrong alignment on EventCollectionViewInterface_SetPreviewAreaData");
static_assert(sizeof(EventCollectionViewInterface_SetPreviewAreaData) == 0x000020, "Wrong size on EventCollectionViewInterface_SetPreviewAreaData");
static_assert(offsetof(EventCollectionViewInterface_SetPreviewAreaData, ViewData) == 0x000000, "Member 'EventCollectionViewInterface_SetPreviewAreaData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.EventCollectionViewInterface.SetSelectedReward
// 0x0004 (0x0004 - 0x0000)
struct EventCollectionViewInterface_SetSelectedReward final
{
public:
	int32                                         SelectedIndex;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventCollectionViewInterface_SetSelectedReward) == 0x000004, "Wrong alignment on EventCollectionViewInterface_SetSelectedReward");
static_assert(sizeof(EventCollectionViewInterface_SetSelectedReward) == 0x000004, "Wrong size on EventCollectionViewInterface_SetSelectedReward");
static_assert(offsetof(EventCollectionViewInterface_SetSelectedReward, SelectedIndex) == 0x000000, "Member 'EventCollectionViewInterface_SetSelectedReward::SelectedIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.EventDetailsViewInterface.Init
// 0x02F8 (0x02F8 - 0x0000)
struct EventDetailsViewInterface_Init final
{
public:
	struct FDetailsTabViewData                    ViewData;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FEventEntryPopupSkinUIData             SkinData;                                          // 0x0050(0x02A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventDetailsViewInterface_Init) == 0x000008, "Wrong alignment on EventDetailsViewInterface_Init");
static_assert(sizeof(EventDetailsViewInterface_Init) == 0x0002F8, "Wrong size on EventDetailsViewInterface_Init");
static_assert(offsetof(EventDetailsViewInterface_Init, ViewData) == 0x000000, "Member 'EventDetailsViewInterface_Init::ViewData' has a wrong offset!");
static_assert(offsetof(EventDetailsViewInterface_Init, SkinData) == 0x000050, "Member 'EventDetailsViewInterface_Init::SkinData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreItemViewData.GetHasNotification
// 0x0001 (0x0001 - 0x0000)
struct StoreItemViewData_GetHasNotification final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreItemViewData_GetHasNotification) == 0x000001, "Wrong alignment on StoreItemViewData_GetHasNotification");
static_assert(sizeof(StoreItemViewData_GetHasNotification) == 0x000001, "Wrong size on StoreItemViewData_GetHasNotification");
static_assert(offsetof(StoreItemViewData_GetHasNotification, ReturnValue) == 0x000000, "Member 'StoreItemViewData_GetHasNotification::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreItemViewData.GetIcon
// 0x0038 (0x0038 - 0x0000)
struct StoreItemViewData_GetIcon final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreItemViewData_GetIcon) == 0x000008, "Wrong alignment on StoreItemViewData_GetIcon");
static_assert(sizeof(StoreItemViewData_GetIcon) == 0x000038, "Wrong size on StoreItemViewData_GetIcon");
static_assert(offsetof(StoreItemViewData_GetIcon, ReturnValue) == 0x000000, "Member 'StoreItemViewData_GetIcon::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreItemViewData.GetIsAvailable
// 0x0001 (0x0001 - 0x0000)
struct StoreItemViewData_GetIsAvailable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreItemViewData_GetIsAvailable) == 0x000001, "Wrong alignment on StoreItemViewData_GetIsAvailable");
static_assert(sizeof(StoreItemViewData_GetIsAvailable) == 0x000001, "Wrong size on StoreItemViewData_GetIsAvailable");
static_assert(offsetof(StoreItemViewData_GetIsAvailable, ReturnValue) == 0x000000, "Member 'StoreItemViewData_GetIsAvailable::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreItemViewData.GetIsBuyable
// 0x0001 (0x0001 - 0x0000)
struct StoreItemViewData_GetIsBuyable final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreItemViewData_GetIsBuyable) == 0x000001, "Wrong alignment on StoreItemViewData_GetIsBuyable");
static_assert(sizeof(StoreItemViewData_GetIsBuyable) == 0x000001, "Wrong size on StoreItemViewData_GetIsBuyable");
static_assert(offsetof(StoreItemViewData_GetIsBuyable, ReturnValue) == 0x000000, "Member 'StoreItemViewData_GetIsBuyable::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreItemViewData.GetIsEnabled
// 0x0001 (0x0001 - 0x0000)
struct StoreItemViewData_GetIsEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreItemViewData_GetIsEnabled) == 0x000001, "Wrong alignment on StoreItemViewData_GetIsEnabled");
static_assert(sizeof(StoreItemViewData_GetIsEnabled) == 0x000001, "Wrong size on StoreItemViewData_GetIsEnabled");
static_assert(offsetof(StoreItemViewData_GetIsEnabled, ReturnValue) == 0x000000, "Member 'StoreItemViewData_GetIsEnabled::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreItemViewData.GetIsOwned
// 0x0001 (0x0001 - 0x0000)
struct StoreItemViewData_GetIsOwned final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreItemViewData_GetIsOwned) == 0x000001, "Wrong alignment on StoreItemViewData_GetIsOwned");
static_assert(sizeof(StoreItemViewData_GetIsOwned) == 0x000001, "Wrong size on StoreItemViewData_GetIsOwned");
static_assert(offsetof(StoreItemViewData_GetIsOwned, ReturnValue) == 0x000000, "Member 'StoreItemViewData_GetIsOwned::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.ChangeSelectedTab
// 0x0004 (0x0004 - 0x0000)
struct EventEntryViewInterface_ChangeSelectedTab final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_ChangeSelectedTab) == 0x000004, "Wrong alignment on EventEntryViewInterface_ChangeSelectedTab");
static_assert(sizeof(EventEntryViewInterface_ChangeSelectedTab) == 0x000004, "Wrong size on EventEntryViewInterface_ChangeSelectedTab");
static_assert(offsetof(EventEntryViewInterface_ChangeSelectedTab, Key) == 0x000000, "Member 'EventEntryViewInterface_ChangeSelectedTab::Key' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.GetRowDataFromEventSkinDataTable
// 0x02C8 (0x02C8 - 0x0000)
struct EventEntryViewInterface_GetRowDataFromEventSkinDataTable final
{
public:
	struct FEventEntryPopupSkinUIData             SkinData;                                          // 0x0000(0x02A8)(Parm, OutParm, NativeAccessSpecifierPublic)
	class FText                                   EventFrameLabel;                                   // 0x02A8(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x02C0(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C1[0x7];                                      // 0x02C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventEntryViewInterface_GetRowDataFromEventSkinDataTable) == 0x000008, "Wrong alignment on EventEntryViewInterface_GetRowDataFromEventSkinDataTable");
static_assert(sizeof(EventEntryViewInterface_GetRowDataFromEventSkinDataTable) == 0x0002C8, "Wrong size on EventEntryViewInterface_GetRowDataFromEventSkinDataTable");
static_assert(offsetof(EventEntryViewInterface_GetRowDataFromEventSkinDataTable, SkinData) == 0x000000, "Member 'EventEntryViewInterface_GetRowDataFromEventSkinDataTable::SkinData' has a wrong offset!");
static_assert(offsetof(EventEntryViewInterface_GetRowDataFromEventSkinDataTable, EventFrameLabel) == 0x0002A8, "Member 'EventEntryViewInterface_GetRowDataFromEventSkinDataTable::EventFrameLabel' has a wrong offset!");
static_assert(offsetof(EventEntryViewInterface_GetRowDataFromEventSkinDataTable, ReturnValue) == 0x0002C0, "Member 'EventEntryViewInterface_GetRowDataFromEventSkinDataTable::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.InitializeOverlay
// 0x0008 (0x0008 - 0x0000)
struct EventEntryViewInterface_InitializeOverlay final
{
public:
	class UEventEntryViewData*                    ViewData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_InitializeOverlay) == 0x000008, "Wrong alignment on EventEntryViewInterface_InitializeOverlay");
static_assert(sizeof(EventEntryViewInterface_InitializeOverlay) == 0x000008, "Wrong size on EventEntryViewInterface_InitializeOverlay");
static_assert(offsetof(EventEntryViewInterface_InitializeOverlay, ViewData) == 0x000000, "Member 'EventEntryViewInterface_InitializeOverlay::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.SelectMilestoneTrackerItem
// 0x000C (0x000C - 0x0000)
struct EventEntryViewInterface_SelectMilestoneTrackerItem final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_SelectMilestoneTrackerItem) == 0x000004, "Wrong alignment on EventEntryViewInterface_SelectMilestoneTrackerItem");
static_assert(sizeof(EventEntryViewInterface_SelectMilestoneTrackerItem) == 0x00000C, "Wrong size on EventEntryViewInterface_SelectMilestoneTrackerItem");
static_assert(offsetof(EventEntryViewInterface_SelectMilestoneTrackerItem, ItemId) == 0x000000, "Member 'EventEntryViewInterface_SelectMilestoneTrackerItem::ItemId' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.SetMilestoneTrackerData
// 0x0018 (0x0018 - 0x0000)
struct EventEntryViewInterface_SetMilestoneTrackerData final
{
public:
	struct FMilestoneTrackerViewData              ViewData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_SetMilestoneTrackerData) == 0x000008, "Wrong alignment on EventEntryViewInterface_SetMilestoneTrackerData");
static_assert(sizeof(EventEntryViewInterface_SetMilestoneTrackerData) == 0x000018, "Wrong size on EventEntryViewInterface_SetMilestoneTrackerData");
static_assert(offsetof(EventEntryViewInterface_SetMilestoneTrackerData, ViewData) == 0x000000, "Member 'EventEntryViewInterface_SetMilestoneTrackerData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.SetMilestoneTrackerVisibility
// 0x0001 (0x0001 - 0x0000)
struct EventEntryViewInterface_SetMilestoneTrackerVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_SetMilestoneTrackerVisibility) == 0x000001, "Wrong alignment on EventEntryViewInterface_SetMilestoneTrackerVisibility");
static_assert(sizeof(EventEntryViewInterface_SetMilestoneTrackerVisibility) == 0x000001, "Wrong size on EventEntryViewInterface_SetMilestoneTrackerVisibility");
static_assert(offsetof(EventEntryViewInterface_SetMilestoneTrackerVisibility, IsVisible) == 0x000000, "Member 'EventEntryViewInterface_SetMilestoneTrackerVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.SetOverlayState
// 0x0001 (0x0001 - 0x0000)
struct EventEntryViewInterface_SetOverlayState final
{
public:
	EEventEntryTabState                           TabState;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_SetOverlayState) == 0x000001, "Wrong alignment on EventEntryViewInterface_SetOverlayState");
static_assert(sizeof(EventEntryViewInterface_SetOverlayState) == 0x000001, "Wrong size on EventEntryViewInterface_SetOverlayState");
static_assert(offsetof(EventEntryViewInterface_SetOverlayState, TabState) == 0x000000, "Member 'EventEntryViewInterface_SetOverlayState::TabState' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.SetTabsData
// 0x0018 (0x0018 - 0x0000)
struct EventEntryViewInterface_SetTabsData final
{
public:
	TArray<struct FTabWidgetData>                 TabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedKey;                                       // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(EventEntryViewInterface_SetTabsData) == 0x000008, "Wrong alignment on EventEntryViewInterface_SetTabsData");
static_assert(sizeof(EventEntryViewInterface_SetTabsData) == 0x000018, "Wrong size on EventEntryViewInterface_SetTabsData");
static_assert(offsetof(EventEntryViewInterface_SetTabsData, TabsData) == 0x000000, "Member 'EventEntryViewInterface_SetTabsData::TabsData' has a wrong offset!");
static_assert(offsetof(EventEntryViewInterface_SetTabsData, SelectedKey) == 0x000010, "Member 'EventEntryViewInterface_SetTabsData::SelectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.GetCollectionSubPresenterInterface
// 0x0010 (0x0010 - 0x0000)
struct EventEntryViewInterface_GetCollectionSubPresenterInterface final
{
public:
	TScriptInterface<class IEventCollectionViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_GetCollectionSubPresenterInterface) == 0x000008, "Wrong alignment on EventEntryViewInterface_GetCollectionSubPresenterInterface");
static_assert(sizeof(EventEntryViewInterface_GetCollectionSubPresenterInterface) == 0x000010, "Wrong size on EventEntryViewInterface_GetCollectionSubPresenterInterface");
static_assert(offsetof(EventEntryViewInterface_GetCollectionSubPresenterInterface, ReturnValue) == 0x000000, "Member 'EventEntryViewInterface_GetCollectionSubPresenterInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.GetDetailsSubPresenterInterface
// 0x0010 (0x0010 - 0x0000)
struct EventEntryViewInterface_GetDetailsSubPresenterInterface final
{
public:
	TScriptInterface<class IEventDetailsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_GetDetailsSubPresenterInterface) == 0x000008, "Wrong alignment on EventEntryViewInterface_GetDetailsSubPresenterInterface");
static_assert(sizeof(EventEntryViewInterface_GetDetailsSubPresenterInterface) == 0x000010, "Wrong size on EventEntryViewInterface_GetDetailsSubPresenterInterface");
static_assert(offsetof(EventEntryViewInterface_GetDetailsSubPresenterInterface, ReturnValue) == 0x000000, "Member 'EventEntryViewInterface_GetDetailsSubPresenterInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.GetEventSkinDataTable
// 0x0008 (0x0008 - 0x0000)
struct EventEntryViewInterface_GetEventSkinDataTable final
{
public:
	class UDataTable*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_GetEventSkinDataTable) == 0x000008, "Wrong alignment on EventEntryViewInterface_GetEventSkinDataTable");
static_assert(sizeof(EventEntryViewInterface_GetEventSkinDataTable) == 0x000008, "Wrong size on EventEntryViewInterface_GetEventSkinDataTable");
static_assert(offsetof(EventEntryViewInterface_GetEventSkinDataTable, ReturnValue) == 0x000000, "Member 'EventEntryViewInterface_GetEventSkinDataTable::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.GetEventSubPresenterInterface
// 0x0010 (0x0010 - 0x0000)
struct EventEntryViewInterface_GetEventSubPresenterInterface final
{
public:
	TScriptInterface<class IEventInfoViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_GetEventSubPresenterInterface) == 0x000008, "Wrong alignment on EventEntryViewInterface_GetEventSubPresenterInterface");
static_assert(sizeof(EventEntryViewInterface_GetEventSubPresenterInterface) == 0x000010, "Wrong size on EventEntryViewInterface_GetEventSubPresenterInterface");
static_assert(offsetof(EventEntryViewInterface_GetEventSubPresenterInterface, ReturnValue) == 0x000000, "Member 'EventEntryViewInterface_GetEventSubPresenterInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.EventEntryViewInterface.GetStoreSubPresenterInterface
// 0x0010 (0x0010 - 0x0000)
struct EventEntryViewInterface_GetStoreSubPresenterInterface final
{
public:
	TScriptInterface<class IEventCollectionViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventEntryViewInterface_GetStoreSubPresenterInterface) == 0x000008, "Wrong alignment on EventEntryViewInterface_GetStoreSubPresenterInterface");
static_assert(sizeof(EventEntryViewInterface_GetStoreSubPresenterInterface) == 0x000010, "Wrong size on EventEntryViewInterface_GetStoreSubPresenterInterface");
static_assert(offsetof(EventEntryViewInterface_GetStoreSubPresenterInterface, ReturnValue) == 0x000000, "Member 'EventEntryViewInterface_GetStoreSubPresenterInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetArrowsVisibility
// 0x0001 (0x0001 - 0x0000)
struct SpectateBarViewInterface_SetArrowsVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectateBarViewInterface_SetArrowsVisibility) == 0x000001, "Wrong alignment on SpectateBarViewInterface_SetArrowsVisibility");
static_assert(sizeof(SpectateBarViewInterface_SetArrowsVisibility) == 0x000001, "Wrong size on SpectateBarViewInterface_SetArrowsVisibility");
static_assert(offsetof(SpectateBarViewInterface_SetArrowsVisibility, IsVisible) == 0x000000, "Member 'SpectateBarViewInterface_SetArrowsVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetBotTag
// 0x0001 (0x0001 - 0x0000)
struct SpectateBarViewInterface_SetBotTag final
{
public:
	bool                                          IsBot;                                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectateBarViewInterface_SetBotTag) == 0x000001, "Wrong alignment on SpectateBarViewInterface_SetBotTag");
static_assert(sizeof(SpectateBarViewInterface_SetBotTag) == 0x000001, "Wrong size on SpectateBarViewInterface_SetBotTag");
static_assert(offsetof(SpectateBarViewInterface_SetBotTag, IsBot) == 0x000000, "Member 'SpectateBarViewInterface_SetBotTag::IsBot' has a wrong offset!");

// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetSpectateBarVisibility
// 0x0001 (0x0001 - 0x0000)
struct SpectateBarViewInterface_SetSpectateBarVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectateBarViewInterface_SetSpectateBarVisibility) == 0x000001, "Wrong alignment on SpectateBarViewInterface_SetSpectateBarVisibility");
static_assert(sizeof(SpectateBarViewInterface_SetSpectateBarVisibility) == 0x000001, "Wrong size on SpectateBarViewInterface_SetSpectateBarVisibility");
static_assert(offsetof(SpectateBarViewInterface_SetSpectateBarVisibility, IsVisible) == 0x000000, "Member 'SpectateBarViewInterface_SetSpectateBarVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.SpectateBarViewInterface.SetSpectatedName
// 0x0010 (0x0010 - 0x0000)
struct SpectateBarViewInterface_SetSpectatedName final
{
public:
	class FString                                 PlayerName;                                        // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SpectateBarViewInterface_SetSpectatedName) == 0x000008, "Wrong alignment on SpectateBarViewInterface_SetSpectatedName");
static_assert(sizeof(SpectateBarViewInterface_SetSpectatedName) == 0x000010, "Wrong size on SpectateBarViewInterface_SetSpectatedName");
static_assert(offsetof(SpectateBarViewInterface_SetSpectatedName, PlayerName) == 0x000000, "Member 'SpectateBarViewInterface_SetSpectatedName::PlayerName' has a wrong offset!");

// Function DBDUIViewInterfaces.EventInfoViewInterface.Init
// 0x02B0 (0x02B0 - 0x0000)
struct EventInfoViewInterface_Init final
{
public:
	class UEventTabViewData*                      ViewData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEventEntryPopupSkinUIData             SkinData;                                          // 0x0008(0x02A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventInfoViewInterface_Init) == 0x000008, "Wrong alignment on EventInfoViewInterface_Init");
static_assert(sizeof(EventInfoViewInterface_Init) == 0x0002B0, "Wrong size on EventInfoViewInterface_Init");
static_assert(offsetof(EventInfoViewInterface_Init, ViewData) == 0x000000, "Member 'EventInfoViewInterface_Init::ViewData' has a wrong offset!");
static_assert(offsetof(EventInfoViewInterface_Init, SkinData) == 0x000008, "Member 'EventInfoViewInterface_Init::SkinData' has a wrong offset!");

// Function DBDUIViewInterfaces.EventInfoViewInterface.SetArchivesButtonVisibility
// 0x0001 (0x0001 - 0x0000)
struct EventInfoViewInterface_SetArchivesButtonVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventInfoViewInterface_SetArchivesButtonVisibility) == 0x000001, "Wrong alignment on EventInfoViewInterface_SetArchivesButtonVisibility");
static_assert(sizeof(EventInfoViewInterface_SetArchivesButtonVisibility) == 0x000001, "Wrong size on EventInfoViewInterface_SetArchivesButtonVisibility");
static_assert(offsetof(EventInfoViewInterface_SetArchivesButtonVisibility, IsVisible) == 0x000000, "Member 'EventInfoViewInterface_SetArchivesButtonVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.EventInfoViewInterface.SetEventObjectiveTrackerData
// 0x0108 (0x0108 - 0x0000)
struct EventInfoViewInterface_SetEventObjectiveTrackerData final
{
public:
	struct FEventObjectiveTrackerViewData         ViewData;                                          // 0x0000(0x0108)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventInfoViewInterface_SetEventObjectiveTrackerData) == 0x000008, "Wrong alignment on EventInfoViewInterface_SetEventObjectiveTrackerData");
static_assert(sizeof(EventInfoViewInterface_SetEventObjectiveTrackerData) == 0x000108, "Wrong size on EventInfoViewInterface_SetEventObjectiveTrackerData");
static_assert(offsetof(EventInfoViewInterface_SetEventObjectiveTrackerData, ViewData) == 0x000000, "Member 'EventInfoViewInterface_SetEventObjectiveTrackerData::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.EventInfoViewInterface.SetEventObjectiveTrackerVisibility
// 0x0001 (0x0001 - 0x0000)
struct EventInfoViewInterface_SetEventObjectiveTrackerVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(EventInfoViewInterface_SetEventObjectiveTrackerVisibility) == 0x000001, "Wrong alignment on EventInfoViewInterface_SetEventObjectiveTrackerVisibility");
static_assert(sizeof(EventInfoViewInterface_SetEventObjectiveTrackerVisibility) == 0x000001, "Wrong size on EventInfoViewInterface_SetEventObjectiveTrackerVisibility");
static_assert(offsetof(EventInfoViewInterface_SetEventObjectiveTrackerVisibility, IsVisible) == 0x000000, "Member 'EventInfoViewInterface_SetEventObjectiveTrackerVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetLayout
// 0x0001 (0x0001 - 0x0000)
struct SettingsMatchDetailsViewInterface_SetLayout final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsViewInterface_SetLayout) == 0x000001, "Wrong alignment on SettingsMatchDetailsViewInterface_SetLayout");
static_assert(sizeof(SettingsMatchDetailsViewInterface_SetLayout) == 0x000001, "Wrong size on SettingsMatchDetailsViewInterface_SetLayout");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetLayout, GameType) == 0x000000, "Member 'SettingsMatchDetailsViewInterface_SetLayout::GameType' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetMapData
// 0x0038 (0x0038 - 0x0000)
struct SettingsMatchDetailsViewInterface_SetMapData final
{
public:
	class FText                                   MapInfo;                                           // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 MapThemeName;                                      // 0x0018(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MapTileName;                                       // 0x0028(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsViewInterface_SetMapData) == 0x000008, "Wrong alignment on SettingsMatchDetailsViewInterface_SetMapData");
static_assert(sizeof(SettingsMatchDetailsViewInterface_SetMapData) == 0x000038, "Wrong size on SettingsMatchDetailsViewInterface_SetMapData");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetMapData, MapInfo) == 0x000000, "Member 'SettingsMatchDetailsViewInterface_SetMapData::MapInfo' has a wrong offset!");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetMapData, MapThemeName) == 0x000018, "Member 'SettingsMatchDetailsViewInterface_SetMapData::MapThemeName' has a wrong offset!");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetMapData, MapTileName) == 0x000028, "Member 'SettingsMatchDetailsViewInterface_SetMapData::MapTileName' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetOfferings
// 0x0020 (0x0020 - 0x0000)
struct SettingsMatchDetailsViewInterface_SetOfferings final
{
public:
	TArray<class UMenuOfferingViewData*>          SurvivorOfferingsData;                             // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<class UMenuOfferingViewData*>          KillerOfferingsData;                               // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsViewInterface_SetOfferings) == 0x000008, "Wrong alignment on SettingsMatchDetailsViewInterface_SetOfferings");
static_assert(sizeof(SettingsMatchDetailsViewInterface_SetOfferings) == 0x000020, "Wrong size on SettingsMatchDetailsViewInterface_SetOfferings");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetOfferings, SurvivorOfferingsData) == 0x000000, "Member 'SettingsMatchDetailsViewInterface_SetOfferings::SurvivorOfferingsData' has a wrong offset!");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetOfferings, KillerOfferingsData) == 0x000010, "Member 'SettingsMatchDetailsViewInterface_SetOfferings::KillerOfferingsData' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetPerks
// 0x0010 (0x0010 - 0x0000)
struct SettingsMatchDetailsViewInterface_SetPerks final
{
public:
	TArray<class UMenuPerkViewData*>              PerksData;                                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsViewInterface_SetPerks) == 0x000008, "Wrong alignment on SettingsMatchDetailsViewInterface_SetPerks");
static_assert(sizeof(SettingsMatchDetailsViewInterface_SetPerks) == 0x000010, "Wrong size on SettingsMatchDetailsViewInterface_SetPerks");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetPerks, PerksData) == 0x000000, "Member 'SettingsMatchDetailsViewInterface_SetPerks::PerksData' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetPlayersInfo
// 0x0028 (0x0028 - 0x0000)
struct SettingsMatchDetailsViewInterface_SetPlayersInfo final
{
public:
	TArray<struct FPlayerInfoData>                SurvivorInfoData;                                  // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FPlayerInfoData>                KillerInfoData;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsLocalPlayerSurvivor;                             // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SettingsMatchDetailsViewInterface_SetPlayersInfo) == 0x000008, "Wrong alignment on SettingsMatchDetailsViewInterface_SetPlayersInfo");
static_assert(sizeof(SettingsMatchDetailsViewInterface_SetPlayersInfo) == 0x000028, "Wrong size on SettingsMatchDetailsViewInterface_SetPlayersInfo");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetPlayersInfo, SurvivorInfoData) == 0x000000, "Member 'SettingsMatchDetailsViewInterface_SetPlayersInfo::SurvivorInfoData' has a wrong offset!");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetPlayersInfo, KillerInfoData) == 0x000010, "Member 'SettingsMatchDetailsViewInterface_SetPlayersInfo::KillerInfoData' has a wrong offset!");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetPlayersInfo, IsLocalPlayerSurvivor) == 0x000020, "Member 'SettingsMatchDetailsViewInterface_SetPlayersInfo::IsLocalPlayerSurvivor' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetPlayersInfoButtonsEnabled
// 0x0001 (0x0001 - 0x0000)
struct SettingsMatchDetailsViewInterface_SetPlayersInfoButtonsEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsViewInterface_SetPlayersInfoButtonsEnabled) == 0x000001, "Wrong alignment on SettingsMatchDetailsViewInterface_SetPlayersInfoButtonsEnabled");
static_assert(sizeof(SettingsMatchDetailsViewInterface_SetPlayersInfoButtonsEnabled) == 0x000001, "Wrong size on SettingsMatchDetailsViewInterface_SetPlayersInfoButtonsEnabled");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetPlayersInfoButtonsEnabled, IsEnabled) == 0x000000, "Member 'SettingsMatchDetailsViewInterface_SetPlayersInfoButtonsEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetPlayersPings
// 0x0050 (0x0050 - 0x0000)
struct SettingsMatchDetailsViewInterface_SetPlayersPings final
{
public:
	TMap<class FString, float>                    PingData;                                          // 0x0000(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsViewInterface_SetPlayersPings) == 0x000008, "Wrong alignment on SettingsMatchDetailsViewInterface_SetPlayersPings");
static_assert(sizeof(SettingsMatchDetailsViewInterface_SetPlayersPings) == 0x000050, "Wrong size on SettingsMatchDetailsViewInterface_SetPlayersPings");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetPlayersPings, PingData) == 0x000000, "Member 'SettingsMatchDetailsViewInterface_SetPlayersPings::PingData' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsMatchDetailsViewInterface.SetSkills
// 0x0010 (0x0010 - 0x0000)
struct SettingsMatchDetailsViewInterface_SetSkills final
{
public:
	TArray<class UMenuSkillViewData*>             SkillsData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsMatchDetailsViewInterface_SetSkills) == 0x000008, "Wrong alignment on SettingsMatchDetailsViewInterface_SetSkills");
static_assert(sizeof(SettingsMatchDetailsViewInterface_SetSkills) == 0x000010, "Wrong size on SettingsMatchDetailsViewInterface_SetSkills");
static_assert(offsetof(SettingsMatchDetailsViewInterface_SetSkills, SkillsData) == 0x000000, "Member 'SettingsMatchDetailsViewInterface_SetSkills::SkillsData' has a wrong offset!");

// Function DBDUIViewInterfaces.ExampleViewInterface.SetExampleProgressRatio
// 0x0004 (0x0004 - 0x0000)
struct ExampleViewInterface_SetExampleProgressRatio final
{
public:
	float                                         Ratio;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExampleViewInterface_SetExampleProgressRatio) == 0x000004, "Wrong alignment on ExampleViewInterface_SetExampleProgressRatio");
static_assert(sizeof(ExampleViewInterface_SetExampleProgressRatio) == 0x000004, "Wrong size on ExampleViewInterface_SetExampleProgressRatio");
static_assert(offsetof(ExampleViewInterface_SetExampleProgressRatio, Ratio) == 0x000000, "Member 'ExampleViewInterface_SetExampleProgressRatio::Ratio' has a wrong offset!");

// Function DBDUIViewInterfaces.ExampleViewInterface.SetExampleText
// 0x0010 (0x0010 - 0x0000)
struct ExampleViewInterface_SetExampleText final
{
public:
	class FString                                 Text;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExampleViewInterface_SetExampleText) == 0x000008, "Wrong alignment on ExampleViewInterface_SetExampleText");
static_assert(sizeof(ExampleViewInterface_SetExampleText) == 0x000010, "Wrong size on ExampleViewInterface_SetExampleText");
static_assert(offsetof(ExampleViewInterface_SetExampleText, Text) == 0x000000, "Member 'ExampleViewInterface_SetExampleText::Text' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalAddon
// 0x000C (0x000C - 0x0000)
struct ExternalEffectsViewInterface_HideExternalAddon final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_HideExternalAddon) == 0x000004, "Wrong alignment on ExternalEffectsViewInterface_HideExternalAddon");
static_assert(sizeof(ExternalEffectsViewInterface_HideExternalAddon) == 0x00000C, "Wrong size on ExternalEffectsViewInterface_HideExternalAddon");
static_assert(offsetof(ExternalEffectsViewInterface_HideExternalAddon, ItemId) == 0x000000, "Member 'ExternalEffectsViewInterface_HideExternalAddon::ItemId' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalPerk
// 0x000C (0x000C - 0x0000)
struct ExternalEffectsViewInterface_HideExternalPerk final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_HideExternalPerk) == 0x000004, "Wrong alignment on ExternalEffectsViewInterface_HideExternalPerk");
static_assert(sizeof(ExternalEffectsViewInterface_HideExternalPerk) == 0x00000C, "Wrong size on ExternalEffectsViewInterface_HideExternalPerk");
static_assert(offsetof(ExternalEffectsViewInterface_HideExternalPerk, ItemId) == 0x000000, "Member 'ExternalEffectsViewInterface_HideExternalPerk::ItemId' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.HideExternalSkill
// 0x000C (0x000C - 0x0000)
struct ExternalEffectsViewInterface_HideExternalSkill final
{
public:
	class FName                                   ItemId;                                            // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_HideExternalSkill) == 0x000004, "Wrong alignment on ExternalEffectsViewInterface_HideExternalSkill");
static_assert(sizeof(ExternalEffectsViewInterface_HideExternalSkill) == 0x00000C, "Wrong size on ExternalEffectsViewInterface_HideExternalSkill");
static_assert(offsetof(ExternalEffectsViewInterface_HideExternalSkill, ItemId) == 0x000000, "Member 'ExternalEffectsViewInterface_HideExternalSkill::ItemId' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalAddon
// 0x0070 (0x0070 - 0x0000)
struct ExternalEffectsViewInterface_ShowExternalAddon final
{
public:
	struct FAddonViewData                         AddonViewData;                                     // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_ShowExternalAddon) == 0x000008, "Wrong alignment on ExternalEffectsViewInterface_ShowExternalAddon");
static_assert(sizeof(ExternalEffectsViewInterface_ShowExternalAddon) == 0x000070, "Wrong size on ExternalEffectsViewInterface_ShowExternalAddon");
static_assert(offsetof(ExternalEffectsViewInterface_ShowExternalAddon, AddonViewData) == 0x000000, "Member 'ExternalEffectsViewInterface_ShowExternalAddon::AddonViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalPerk
// 0x0070 (0x0070 - 0x0000)
struct ExternalEffectsViewInterface_ShowExternalPerk final
{
public:
	struct FPerkViewData                          PerkViewData;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_ShowExternalPerk) == 0x000008, "Wrong alignment on ExternalEffectsViewInterface_ShowExternalPerk");
static_assert(sizeof(ExternalEffectsViewInterface_ShowExternalPerk) == 0x000070, "Wrong size on ExternalEffectsViewInterface_ShowExternalPerk");
static_assert(offsetof(ExternalEffectsViewInterface_ShowExternalPerk, PerkViewData) == 0x000000, "Member 'ExternalEffectsViewInterface_ShowExternalPerk::PerkViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ExternalEffectsViewInterface.ShowExternalSkill
// 0x0070 (0x0070 - 0x0000)
struct ExternalEffectsViewInterface_ShowExternalSkill final
{
public:
	struct FSkillViewData                         SkillViewData;                                     // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ExternalEffectsViewInterface_ShowExternalSkill) == 0x000008, "Wrong alignment on ExternalEffectsViewInterface_ShowExternalSkill");
static_assert(sizeof(ExternalEffectsViewInterface_ShowExternalSkill) == 0x000070, "Wrong size on ExternalEffectsViewInterface_ShowExternalSkill");
static_assert(offsetof(ExternalEffectsViewInterface_ShowExternalSkill, SkillViewData) == 0x000000, "Member 'ExternalEffectsViewInterface_ShowExternalSkill::SkillViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionsViewInterface_SetMenuState final
{
public:
	EStoreCollectionsMenuState                    MenuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsViewInterface_SetMenuState) == 0x000001, "Wrong alignment on StoreCollectionsViewInterface_SetMenuState");
static_assert(sizeof(StoreCollectionsViewInterface_SetMenuState) == 0x000001, "Wrong size on StoreCollectionsViewInterface_SetMenuState");
static_assert(offsetof(StoreCollectionsViewInterface_SetMenuState, MenuState) == 0x000000, "Member 'StoreCollectionsViewInterface_SetMenuState::MenuState' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.GetCollectionsCustomizationsInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCollectionsViewInterface_GetCollectionsCustomizationsInterface final
{
public:
	TScriptInterface<class IStoreCollectionsCustomizationsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsViewInterface_GetCollectionsCustomizationsInterface) == 0x000008, "Wrong alignment on StoreCollectionsViewInterface_GetCollectionsCustomizationsInterface");
static_assert(sizeof(StoreCollectionsViewInterface_GetCollectionsCustomizationsInterface) == 0x000010, "Wrong size on StoreCollectionsViewInterface_GetCollectionsCustomizationsInterface");
static_assert(offsetof(StoreCollectionsViewInterface_GetCollectionsCustomizationsInterface, ReturnValue) == 0x000000, "Member 'StoreCollectionsViewInterface_GetCollectionsCustomizationsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.GetCollectionsListViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCollectionsViewInterface_GetCollectionsListViewInterface final
{
public:
	TScriptInterface<class IStoreCollectionsListViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsViewInterface_GetCollectionsListViewInterface) == 0x000008, "Wrong alignment on StoreCollectionsViewInterface_GetCollectionsListViewInterface");
static_assert(sizeof(StoreCollectionsViewInterface_GetCollectionsListViewInterface) == 0x000010, "Wrong size on StoreCollectionsViewInterface_GetCollectionsListViewInterface");
static_assert(offsetof(StoreCollectionsViewInterface_GetCollectionsListViewInterface, ReturnValue) == 0x000000, "Member 'StoreCollectionsViewInterface_GetCollectionsListViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.GetMenuState
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionsViewInterface_GetMenuState final
{
public:
	EStoreCollectionsMenuState                    ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsViewInterface_GetMenuState) == 0x000001, "Wrong alignment on StoreCollectionsViewInterface_GetMenuState");
static_assert(sizeof(StoreCollectionsViewInterface_GetMenuState) == 0x000001, "Wrong size on StoreCollectionsViewInterface_GetMenuState");
static_assert(offsetof(StoreCollectionsViewInterface_GetMenuState, ReturnValue) == 0x000000, "Member 'StoreCollectionsViewInterface_GetMenuState::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionsViewInterface.GetStoreRightStickControllableViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCollectionsViewInterface_GetStoreRightStickControllableViewInterface final
{
public:
	TScriptInterface<class IStoreRightStickControllableViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsViewInterface_GetStoreRightStickControllableViewInterface) == 0x000008, "Wrong alignment on StoreCollectionsViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(sizeof(StoreCollectionsViewInterface_GetStoreRightStickControllableViewInterface) == 0x000010, "Wrong size on StoreCollectionsViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(offsetof(StoreCollectionsViewInterface_GetStoreRightStickControllableViewInterface, ReturnValue) == 0x000000, "Member 'StoreCollectionsViewInterface_GetStoreRightStickControllableViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.GameManualViewInterface.SetCategoryData
// 0x0060 (0x0060 - 0x0000)
struct GameManualViewInterface_SetCategoryData final
{
public:
	struct FHelpCategoryData                      CategoryData;                                      // 0x0000(0x0050)(ConstParm, Parm, NativeAccessSpecifierPublic)
	TArray<struct FHelpTopicData>                 TopicsData;                                        // 0x0050(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameManualViewInterface_SetCategoryData) == 0x000008, "Wrong alignment on GameManualViewInterface_SetCategoryData");
static_assert(sizeof(GameManualViewInterface_SetCategoryData) == 0x000060, "Wrong size on GameManualViewInterface_SetCategoryData");
static_assert(offsetof(GameManualViewInterface_SetCategoryData, CategoryData) == 0x000000, "Member 'GameManualViewInterface_SetCategoryData::CategoryData' has a wrong offset!");
static_assert(offsetof(GameManualViewInterface_SetCategoryData, TopicsData) == 0x000050, "Member 'GameManualViewInterface_SetCategoryData::TopicsData' has a wrong offset!");

// Function DBDUIViewInterfaces.GameManualViewInterface.SetCurrentManualMenuState
// 0x0001 (0x0001 - 0x0000)
struct GameManualViewInterface_SetCurrentManualMenuState final
{
public:
	EGameManualMenuState                          MenuState;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameManualViewInterface_SetCurrentManualMenuState) == 0x000001, "Wrong alignment on GameManualViewInterface_SetCurrentManualMenuState");
static_assert(sizeof(GameManualViewInterface_SetCurrentManualMenuState) == 0x000001, "Wrong size on GameManualViewInterface_SetCurrentManualMenuState");
static_assert(offsetof(GameManualViewInterface_SetCurrentManualMenuState, MenuState) == 0x000000, "Member 'GameManualViewInterface_SetCurrentManualMenuState::MenuState' has a wrong offset!");

// Function DBDUIViewInterfaces.GameManualViewInterface.GetCurrentManualMenuState
// 0x0001 (0x0001 - 0x0000)
struct GameManualViewInterface_GetCurrentManualMenuState final
{
public:
	EGameManualMenuState                          ReturnValue;                                       // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GameManualViewInterface_GetCurrentManualMenuState) == 0x000001, "Wrong alignment on GameManualViewInterface_GetCurrentManualMenuState");
static_assert(sizeof(GameManualViewInterface_GetCurrentManualMenuState) == 0x000001, "Wrong size on GameManualViewInterface_GetCurrentManualMenuState");
static_assert(offsetof(GameManualViewInterface_GetCurrentManualMenuState, ReturnValue) == 0x000000, "Member 'GameManualViewInterface_GetCurrentManualMenuState::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.SetData
// 0x0060 (0x0060 - 0x0000)
struct StoreCharactersCustomizationsViewInterface_SetData final
{
public:
	struct FStoreCharactersCustomizationsViewData Data;                                              // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	EScrollAction                                 ScrollAction;                                      // 0x0058(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreCharactersCustomizationsViewInterface_SetData) == 0x000008, "Wrong alignment on StoreCharactersCustomizationsViewInterface_SetData");
static_assert(sizeof(StoreCharactersCustomizationsViewInterface_SetData) == 0x000060, "Wrong size on StoreCharactersCustomizationsViewInterface_SetData");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_SetData, Data) == 0x000000, "Member 'StoreCharactersCustomizationsViewInterface_SetData::Data' has a wrong offset!");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_SetData, ScrollAction) == 0x000058, "Member 'StoreCharactersCustomizationsViewInterface_SetData::ScrollAction' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.UpdateCategories
// 0x0018 (0x0018 - 0x0000)
struct StoreCharactersCustomizationsViewInterface_UpdateCategories final
{
public:
	TArray<struct FStoreCategoryViewData>         Categories;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ECustomizationCategory                        SelectedCategory;                                  // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreCharactersCustomizationsViewInterface_UpdateCategories) == 0x000008, "Wrong alignment on StoreCharactersCustomizationsViewInterface_UpdateCategories");
static_assert(sizeof(StoreCharactersCustomizationsViewInterface_UpdateCategories) == 0x000018, "Wrong size on StoreCharactersCustomizationsViewInterface_UpdateCategories");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_UpdateCategories, Categories) == 0x000000, "Member 'StoreCharactersCustomizationsViewInterface_UpdateCategories::Categories' has a wrong offset!");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_UpdateCategories, SelectedCategory) == 0x000010, "Member 'StoreCharactersCustomizationsViewInterface_UpdateCategories::SelectedCategory' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.UpdateCurrentPresetButton
// 0x0001 (0x0001 - 0x0000)
struct StoreCharactersCustomizationsViewInterface_UpdateCurrentPresetButton final
{
public:
	bool                                          IsPreviewingAnyCustomization;                      // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersCustomizationsViewInterface_UpdateCurrentPresetButton) == 0x000001, "Wrong alignment on StoreCharactersCustomizationsViewInterface_UpdateCurrentPresetButton");
static_assert(sizeof(StoreCharactersCustomizationsViewInterface_UpdateCurrentPresetButton) == 0x000001, "Wrong size on StoreCharactersCustomizationsViewInterface_UpdateCurrentPresetButton");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_UpdateCurrentPresetButton, IsPreviewingAnyCustomization) == 0x000000, "Member 'StoreCharactersCustomizationsViewInterface_UpdateCurrentPresetButton::IsPreviewingAnyCustomization' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.UpdateSelectedCustomizations
// 0x0018 (0x0018 - 0x0000)
struct StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations final
{
public:
	TArray<class UStoreCustomizationItemViewData*> SelectedCustomizations;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedSlotIndex;                                 // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EScrollAction                                 ScrollAction;                                      // 0x0014(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations) == 0x000008, "Wrong alignment on StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations");
static_assert(sizeof(StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations) == 0x000018, "Wrong size on StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations, SelectedCustomizations) == 0x000000, "Member 'StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations::SelectedCustomizations' has a wrong offset!");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations, SelectedSlotIndex) == 0x000010, "Member 'StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations::SelectedSlotIndex' has a wrong offset!");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations, ScrollAction) == 0x000014, "Member 'StoreCharactersCustomizationsViewInterface_UpdateSelectedCustomizations::ScrollAction' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.GetSearchBarViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersCustomizationsViewInterface_GetSearchBarViewInterface final
{
public:
	TScriptInterface<class ISearchBarViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersCustomizationsViewInterface_GetSearchBarViewInterface) == 0x000008, "Wrong alignment on StoreCharactersCustomizationsViewInterface_GetSearchBarViewInterface");
static_assert(sizeof(StoreCharactersCustomizationsViewInterface_GetSearchBarViewInterface) == 0x000010, "Wrong size on StoreCharactersCustomizationsViewInterface_GetSearchBarViewInterface");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_GetSearchBarViewInterface, ReturnValue) == 0x000000, "Member 'StoreCharactersCustomizationsViewInterface_GetSearchBarViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersCustomizationsViewInterface.GetStoreCharactersFilterInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersCustomizationsViewInterface_GetStoreCharactersFilterInterface final
{
public:
	TScriptInterface<class IStoreCharactersFilterViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersCustomizationsViewInterface_GetStoreCharactersFilterInterface) == 0x000008, "Wrong alignment on StoreCharactersCustomizationsViewInterface_GetStoreCharactersFilterInterface");
static_assert(sizeof(StoreCharactersCustomizationsViewInterface_GetStoreCharactersFilterInterface) == 0x000010, "Wrong size on StoreCharactersCustomizationsViewInterface_GetStoreCharactersFilterInterface");
static_assert(offsetof(StoreCharactersCustomizationsViewInterface_GetStoreCharactersFilterInterface, ReturnValue) == 0x000000, "Member 'StoreCharactersCustomizationsViewInterface_GetStoreCharactersFilterInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAlertViewInterface.FadeOut
// 0x0004 (0x0004 - 0x0000)
struct HudAlertViewInterface_FadeOut final
{
public:
	float                                         Delay;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAlertViewInterface_FadeOut) == 0x000004, "Wrong alignment on HudAlertViewInterface_FadeOut");
static_assert(sizeof(HudAlertViewInterface_FadeOut) == 0x000004, "Wrong size on HudAlertViewInterface_FadeOut");
static_assert(offsetof(HudAlertViewInterface_FadeOut, Delay) == 0x000000, "Member 'HudAlertViewInterface_FadeOut::Delay' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAlertViewInterface.SetScoreEventsVisibility
// 0x0001 (0x0001 - 0x0000)
struct HudAlertViewInterface_SetScoreEventsVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAlertViewInterface_SetScoreEventsVisibility) == 0x000001, "Wrong alignment on HudAlertViewInterface_SetScoreEventsVisibility");
static_assert(sizeof(HudAlertViewInterface_SetScoreEventsVisibility) == 0x000001, "Wrong size on HudAlertViewInterface_SetScoreEventsVisibility");
static_assert(offsetof(HudAlertViewInterface_SetScoreEventsVisibility, Visible) == 0x000000, "Member 'HudAlertViewInterface_SetScoreEventsVisibility::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAlertViewInterface.ShowScoreAlert
// 0x0020 (0x0020 - 0x0000)
struct HudAlertViewInterface_ShowScoreAlert final
{
public:
	struct FScoreAlertViewData                    Data;                                              // 0x0000(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAlertViewInterface_ShowScoreAlert) == 0x000008, "Wrong alignment on HudAlertViewInterface_ShowScoreAlert");
static_assert(sizeof(HudAlertViewInterface_ShowScoreAlert) == 0x000020, "Wrong size on HudAlertViewInterface_ShowScoreAlert");
static_assert(offsetof(HudAlertViewInterface_ShowScoreAlert, Data) == 0x000000, "Member 'HudAlertViewInterface_ShowScoreAlert::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAlertViewInterface.ShowStatusEffectAlert
// 0x01D0 (0x01D0 - 0x0000)
struct HudAlertViewInterface_ShowStatusEffectAlert final
{
public:
	struct FStatusEffectAlertViewData             Data;                                              // 0x0000(0x01D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAlertViewInterface_ShowStatusEffectAlert) == 0x000008, "Wrong alignment on HudAlertViewInterface_ShowStatusEffectAlert");
static_assert(sizeof(HudAlertViewInterface_ShowStatusEffectAlert) == 0x0001D0, "Wrong size on HudAlertViewInterface_ShowStatusEffectAlert");
static_assert(offsetof(HudAlertViewInterface_ShowStatusEffectAlert, Data) == 0x000000, "Member 'HudAlertViewInterface_ShowStatusEffectAlert::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.StatusEffectViewInterface.RemoveExistingStatusEffect
// 0x000C (0x000C - 0x0000)
struct StatusEffectViewInterface_RemoveExistingStatusEffect final
{
public:
	class FName                                   StatusEffectId;                                    // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectViewInterface_RemoveExistingStatusEffect) == 0x000004, "Wrong alignment on StatusEffectViewInterface_RemoveExistingStatusEffect");
static_assert(sizeof(StatusEffectViewInterface_RemoveExistingStatusEffect) == 0x00000C, "Wrong size on StatusEffectViewInterface_RemoveExistingStatusEffect");
static_assert(offsetof(StatusEffectViewInterface_RemoveExistingStatusEffect, StatusEffectId) == 0x000000, "Member 'StatusEffectViewInterface_RemoveExistingStatusEffect::StatusEffectId' has a wrong offset!");

// Function DBDUIViewInterfaces.StatusEffectViewInterface.ShowActiveStatusEffect
// 0x0058 (0x0058 - 0x0000)
struct StatusEffectViewInterface_ShowActiveStatusEffect final
{
public:
	struct FStatusEffectViewData                  StatusEffectData;                                  // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StatusEffectViewInterface_ShowActiveStatusEffect) == 0x000008, "Wrong alignment on StatusEffectViewInterface_ShowActiveStatusEffect");
static_assert(sizeof(StatusEffectViewInterface_ShowActiveStatusEffect) == 0x000058, "Wrong size on StatusEffectViewInterface_ShowActiveStatusEffect");
static_assert(offsetof(StatusEffectViewInterface_ShowActiveStatusEffect, StatusEffectData) == 0x000000, "Member 'StatusEffectViewInterface_ShowActiveStatusEffect::StatusEffectData' has a wrong offset!");

// Function DBDUIViewInterfaces.GenericRefreshingPopupViewInterface.Refresh
// 0x0004 (0x0004 - 0x0000)
struct GenericRefreshingPopupViewInterface_Refresh final
{
public:
	float                                         RemainingTime;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(GenericRefreshingPopupViewInterface_Refresh) == 0x000004, "Wrong alignment on GenericRefreshingPopupViewInterface_Refresh");
static_assert(sizeof(GenericRefreshingPopupViewInterface_Refresh) == 0x000004, "Wrong size on GenericRefreshingPopupViewInterface_Refresh");
static_assert(offsetof(GenericRefreshingPopupViewInterface_Refresh, RemainingTime) == 0x000000, "Member 'GenericRefreshingPopupViewInterface_Refresh::RemainingTime' has a wrong offset!");

// Function DBDUIViewInterfaces.HookCountViewInterface.InitWidget
// 0x0008 (0x0008 - 0x0000)
struct HookCountViewInterface_InitWidget final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfSegments;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookCountViewInterface_InitWidget) == 0x000004, "Wrong alignment on HookCountViewInterface_InitWidget");
static_assert(sizeof(HookCountViewInterface_InitWidget) == 0x000008, "Wrong size on HookCountViewInterface_InitWidget");
static_assert(offsetof(HookCountViewInterface_InitWidget, GameType) == 0x000000, "Member 'HookCountViewInterface_InitWidget::GameType' has a wrong offset!");
static_assert(offsetof(HookCountViewInterface_InitWidget, NumberOfSegments) == 0x000004, "Member 'HookCountViewInterface_InitWidget::NumberOfSegments' has a wrong offset!");

// Function DBDUIViewInterfaces.HookCountViewInterface.SetData
// 0x0068 (0x0068 - 0x0000)
struct HookCountViewInterface_SetData final
{
public:
	int32                                         CurrentHookCount;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHookCount;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialMaxHookCount;                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   AssistedHookIndices;                               // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsFinisherMoriAvailable;                           // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HookCountViewInterface_SetData) == 0x000008, "Wrong alignment on HookCountViewInterface_SetData");
static_assert(sizeof(HookCountViewInterface_SetData) == 0x000068, "Wrong size on HookCountViewInterface_SetData");
static_assert(offsetof(HookCountViewInterface_SetData, CurrentHookCount) == 0x000000, "Member 'HookCountViewInterface_SetData::CurrentHookCount' has a wrong offset!");
static_assert(offsetof(HookCountViewInterface_SetData, MaxHookCount) == 0x000004, "Member 'HookCountViewInterface_SetData::MaxHookCount' has a wrong offset!");
static_assert(offsetof(HookCountViewInterface_SetData, InitialMaxHookCount) == 0x000008, "Member 'HookCountViewInterface_SetData::InitialMaxHookCount' has a wrong offset!");
static_assert(offsetof(HookCountViewInterface_SetData, AssistedHookIndices) == 0x000010, "Member 'HookCountViewInterface_SetData::AssistedHookIndices' has a wrong offset!");
static_assert(offsetof(HookCountViewInterface_SetData, IsFinisherMoriAvailable) == 0x000060, "Member 'HookCountViewInterface_SetData::IsFinisherMoriAvailable' has a wrong offset!");

// Function DBDUIViewInterfaces.HookCountViewInterface.SetHookCountVisibility
// 0x0001 (0x0001 - 0x0000)
struct HookCountViewInterface_SetHookCountVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HookCountViewInterface_SetHookCountVisibility) == 0x000001, "Wrong alignment on HookCountViewInterface_SetHookCountVisibility");
static_assert(sizeof(HookCountViewInterface_SetHookCountVisibility) == 0x000001, "Wrong size on HookCountViewInterface_SetHookCountVisibility");
static_assert(offsetof(HookCountViewInterface_SetHookCountVisibility, Visible) == 0x000000, "Member 'HookCountViewInterface_SetHookCountVisibility::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAimingCrosshairViewInterface.SetProgress
// 0x0004 (0x0004 - 0x0000)
struct HudAimingCrosshairViewInterface_SetProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAimingCrosshairViewInterface_SetProgress) == 0x000004, "Wrong alignment on HudAimingCrosshairViewInterface_SetProgress");
static_assert(sizeof(HudAimingCrosshairViewInterface_SetProgress) == 0x000004, "Wrong size on HudAimingCrosshairViewInterface_SetProgress");
static_assert(offsetof(HudAimingCrosshairViewInterface_SetProgress, Progress) == 0x000000, "Member 'HudAimingCrosshairViewInterface_SetProgress::Progress' has a wrong offset!");

// Function DBDUIViewInterfaces.HudAimingCrosshairViewInterface.SetState
// 0x0001 (0x0001 - 0x0000)
struct HudAimingCrosshairViewInterface_SetState final
{
public:
	EAimingCrosshairState                         NewState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudAimingCrosshairViewInterface_SetState) == 0x000001, "Wrong alignment on HudAimingCrosshairViewInterface_SetState");
static_assert(sizeof(HudAimingCrosshairViewInterface_SetState) == 0x000001, "Wrong size on HudAimingCrosshairViewInterface_SetState");
static_assert(offsetof(HudAimingCrosshairViewInterface_SetState, NewState) == 0x000000, "Member 'HudAimingCrosshairViewInterface_SetState::NewState' has a wrong offset!");

// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Init
// 0x0008 (0x0008 - 0x0000)
struct HudDirectionalMiniGameViewInterface_Init final
{
public:
	int32                                         MaxItems;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDirectionalMiniGameType                      Type;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudDirectionalMiniGameViewInterface_Init) == 0x000004, "Wrong alignment on HudDirectionalMiniGameViewInterface_Init");
static_assert(sizeof(HudDirectionalMiniGameViewInterface_Init) == 0x000008, "Wrong size on HudDirectionalMiniGameViewInterface_Init");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_Init, MaxItems) == 0x000000, "Member 'HudDirectionalMiniGameViewInterface_Init::MaxItems' has a wrong offset!");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_Init, Type) == 0x000004, "Member 'HudDirectionalMiniGameViewInterface_Init::Type' has a wrong offset!");

// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.Show
// 0x0010 (0x0010 - 0x0000)
struct HudDirectionalMiniGameViewInterface_Show final
{
public:
	TArray<EDirectionalInputKey>                  Directions;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudDirectionalMiniGameViewInterface_Show) == 0x000008, "Wrong alignment on HudDirectionalMiniGameViewInterface_Show");
static_assert(sizeof(HudDirectionalMiniGameViewInterface_Show) == 0x000010, "Wrong size on HudDirectionalMiniGameViewInterface_Show");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_Show, Directions) == 0x000000, "Member 'HudDirectionalMiniGameViewInterface_Show::Directions' has a wrong offset!");

// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.UpdateFinalResult
// 0x0001 (0x0001 - 0x0000)
struct HudDirectionalMiniGameViewInterface_UpdateFinalResult final
{
public:
	EDirectionalMinigameResult                    FinalResult;                                       // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudDirectionalMiniGameViewInterface_UpdateFinalResult) == 0x000001, "Wrong alignment on HudDirectionalMiniGameViewInterface_UpdateFinalResult");
static_assert(sizeof(HudDirectionalMiniGameViewInterface_UpdateFinalResult) == 0x000001, "Wrong size on HudDirectionalMiniGameViewInterface_UpdateFinalResult");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_UpdateFinalResult, FinalResult) == 0x000000, "Member 'HudDirectionalMiniGameViewInterface_UpdateFinalResult::FinalResult' has a wrong offset!");

// Function DBDUIViewInterfaces.HudDirectionalMiniGameViewInterface.UpdateResult
// 0x0008 (0x0008 - 0x0000)
struct HudDirectionalMiniGameViewInterface_UpdateResult final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsSuccessful;                                      // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudDirectionalMiniGameViewInterface_UpdateResult) == 0x000004, "Wrong alignment on HudDirectionalMiniGameViewInterface_UpdateResult");
static_assert(sizeof(HudDirectionalMiniGameViewInterface_UpdateResult) == 0x000008, "Wrong size on HudDirectionalMiniGameViewInterface_UpdateResult");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_UpdateResult, Param_Index) == 0x000000, "Member 'HudDirectionalMiniGameViewInterface_UpdateResult::Param_Index' has a wrong offset!");
static_assert(offsetof(HudDirectionalMiniGameViewInterface_UpdateResult, IsSuccessful) == 0x000004, "Member 'HudDirectionalMiniGameViewInterface_UpdateResult::IsSuccessful' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEffectCardViewInterface.SetData
// 0x0020 (0x0020 - 0x0000)
struct HudEffectCardViewInterface_SetData final
{
public:
	TArray<struct FEffectCardViewData>            EffectCardsViewData;                               // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ActiveCardIndex;                                   // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Points;                                            // 0x0014(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveCardTime;                                    // 0x0018(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudEffectCardViewInterface_SetData) == 0x000008, "Wrong alignment on HudEffectCardViewInterface_SetData");
static_assert(sizeof(HudEffectCardViewInterface_SetData) == 0x000020, "Wrong size on HudEffectCardViewInterface_SetData");
static_assert(offsetof(HudEffectCardViewInterface_SetData, EffectCardsViewData) == 0x000000, "Member 'HudEffectCardViewInterface_SetData::EffectCardsViewData' has a wrong offset!");
static_assert(offsetof(HudEffectCardViewInterface_SetData, ActiveCardIndex) == 0x000010, "Member 'HudEffectCardViewInterface_SetData::ActiveCardIndex' has a wrong offset!");
static_assert(offsetof(HudEffectCardViewInterface_SetData, Points) == 0x000014, "Member 'HudEffectCardViewInterface_SetData::Points' has a wrong offset!");
static_assert(offsetof(HudEffectCardViewInterface_SetData, ActiveCardTime) == 0x000018, "Member 'HudEffectCardViewInterface_SetData::ActiveCardTime' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEffectCardViewInterface.SetMatchPoints
// 0x0004 (0x0004 - 0x0000)
struct HudEffectCardViewInterface_SetMatchPoints final
{
public:
	int32                                         Points;                                            // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEffectCardViewInterface_SetMatchPoints) == 0x000004, "Wrong alignment on HudEffectCardViewInterface_SetMatchPoints");
static_assert(sizeof(HudEffectCardViewInterface_SetMatchPoints) == 0x000004, "Wrong size on HudEffectCardViewInterface_SetMatchPoints");
static_assert(offsetof(HudEffectCardViewInterface_SetMatchPoints, Points) == 0x000000, "Member 'HudEffectCardViewInterface_SetMatchPoints::Points' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEffectCardViewInterface.UpdateTimerFeedback
// 0x0004 (0x0004 - 0x0000)
struct HudEffectCardViewInterface_UpdateTimerFeedback final
{
public:
	float                                         ElapsedTime;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEffectCardViewInterface_UpdateTimerFeedback) == 0x000004, "Wrong alignment on HudEffectCardViewInterface_UpdateTimerFeedback");
static_assert(sizeof(HudEffectCardViewInterface_UpdateTimerFeedback) == 0x000004, "Wrong size on HudEffectCardViewInterface_UpdateTimerFeedback");
static_assert(offsetof(HudEffectCardViewInterface_UpdateTimerFeedback, ElapsedTime) == 0x000000, "Member 'HudEffectCardViewInterface_UpdateTimerFeedback::ElapsedTime' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.BP_OnStateAnimationFinished
// 0x0001 (0x0001 - 0x0000)
struct HudEventObjectiveItemViewInterface_BP_OnStateAnimationFinished final
{
public:
	EEventObjectiveItemState                      FinishedEventItemState;                            // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventObjectiveItemViewInterface_BP_OnStateAnimationFinished) == 0x000001, "Wrong alignment on HudEventObjectiveItemViewInterface_BP_OnStateAnimationFinished");
static_assert(sizeof(HudEventObjectiveItemViewInterface_BP_OnStateAnimationFinished) == 0x000001, "Wrong size on HudEventObjectiveItemViewInterface_BP_OnStateAnimationFinished");
static_assert(offsetof(HudEventObjectiveItemViewInterface_BP_OnStateAnimationFinished, FinishedEventItemState) == 0x000000, "Member 'HudEventObjectiveItemViewInterface_BP_OnStateAnimationFinished::FinishedEventItemState' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.InitWidget
// 0x0001 (0x0001 - 0x0000)
struct HudEventObjectiveItemViewInterface_InitWidget final
{
public:
	bool                                          IsLocalKiller;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventObjectiveItemViewInterface_InitWidget) == 0x000001, "Wrong alignment on HudEventObjectiveItemViewInterface_InitWidget");
static_assert(sizeof(HudEventObjectiveItemViewInterface_InitWidget) == 0x000001, "Wrong size on HudEventObjectiveItemViewInterface_InitWidget");
static_assert(offsetof(HudEventObjectiveItemViewInterface_InitWidget, IsLocalKiller) == 0x000000, "Member 'HudEventObjectiveItemViewInterface_InitWidget::IsLocalKiller' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetAvailableCharges
// 0x0008 (0x0008 - 0x0000)
struct HudEventObjectiveItemViewInterface_SetAvailableCharges final
{
public:
	int32                                         Charges;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCharges;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventObjectiveItemViewInterface_SetAvailableCharges) == 0x000004, "Wrong alignment on HudEventObjectiveItemViewInterface_SetAvailableCharges");
static_assert(sizeof(HudEventObjectiveItemViewInterface_SetAvailableCharges) == 0x000008, "Wrong size on HudEventObjectiveItemViewInterface_SetAvailableCharges");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetAvailableCharges, Charges) == 0x000000, "Member 'HudEventObjectiveItemViewInterface_SetAvailableCharges::Charges' has a wrong offset!");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetAvailableCharges, MaxCharges) == 0x000004, "Member 'HudEventObjectiveItemViewInterface_SetAvailableCharges::MaxCharges' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetChargePercentage
// 0x0004 (0x0004 - 0x0000)
struct HudEventObjectiveItemViewInterface_SetChargePercentage final
{
public:
	float                                         ChargePercent;                                     // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventObjectiveItemViewInterface_SetChargePercentage) == 0x000004, "Wrong alignment on HudEventObjectiveItemViewInterface_SetChargePercentage");
static_assert(sizeof(HudEventObjectiveItemViewInterface_SetChargePercentage) == 0x000004, "Wrong size on HudEventObjectiveItemViewInterface_SetChargePercentage");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetChargePercentage, ChargePercent) == 0x000000, "Member 'HudEventObjectiveItemViewInterface_SetChargePercentage::ChargePercent' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetCooldownPercentage
// 0x0004 (0x0004 - 0x0000)
struct HudEventObjectiveItemViewInterface_SetCooldownPercentage final
{
public:
	float                                         CooldownPercent;                                   // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventObjectiveItemViewInterface_SetCooldownPercentage) == 0x000004, "Wrong alignment on HudEventObjectiveItemViewInterface_SetCooldownPercentage");
static_assert(sizeof(HudEventObjectiveItemViewInterface_SetCooldownPercentage) == 0x000004, "Wrong size on HudEventObjectiveItemViewInterface_SetCooldownPercentage");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetCooldownPercentage, CooldownPercent) == 0x000000, "Member 'HudEventObjectiveItemViewInterface_SetCooldownPercentage::CooldownPercent' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetInputKey
// 0x0020 (0x0020 - 0x0000)
struct HudEventObjectiveItemViewInterface_SetInputKey final
{
public:
	struct FKey                                   InputKey;                                          // 0x0000(0x0020)(ConstParm, Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventObjectiveItemViewInterface_SetInputKey) == 0x000008, "Wrong alignment on HudEventObjectiveItemViewInterface_SetInputKey");
static_assert(sizeof(HudEventObjectiveItemViewInterface_SetInputKey) == 0x000020, "Wrong size on HudEventObjectiveItemViewInterface_SetInputKey");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetInputKey, InputKey) == 0x000000, "Member 'HudEventObjectiveItemViewInterface_SetInputKey::InputKey' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetWidgetData
// 0x0010 (0x0010 - 0x0000)
struct HudEventObjectiveItemViewInterface_SetWidgetData final
{
public:
	EEventObjectiveItemState                      EventItemState;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Charges;                                           // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxCharges;                                        // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargePercent;                                     // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventObjectiveItemViewInterface_SetWidgetData) == 0x000004, "Wrong alignment on HudEventObjectiveItemViewInterface_SetWidgetData");
static_assert(sizeof(HudEventObjectiveItemViewInterface_SetWidgetData) == 0x000010, "Wrong size on HudEventObjectiveItemViewInterface_SetWidgetData");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetWidgetData, EventItemState) == 0x000000, "Member 'HudEventObjectiveItemViewInterface_SetWidgetData::EventItemState' has a wrong offset!");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetWidgetData, Charges) == 0x000004, "Member 'HudEventObjectiveItemViewInterface_SetWidgetData::Charges' has a wrong offset!");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetWidgetData, MaxCharges) == 0x000008, "Member 'HudEventObjectiveItemViewInterface_SetWidgetData::MaxCharges' has a wrong offset!");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetWidgetData, ChargePercent) == 0x00000C, "Member 'HudEventObjectiveItemViewInterface_SetWidgetData::ChargePercent' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventObjectiveItemViewInterface.SetWidgetState
// 0x0001 (0x0001 - 0x0000)
struct HudEventObjectiveItemViewInterface_SetWidgetState final
{
public:
	EEventObjectiveItemState                      EventItemState;                                    // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventObjectiveItemViewInterface_SetWidgetState) == 0x000001, "Wrong alignment on HudEventObjectiveItemViewInterface_SetWidgetState");
static_assert(sizeof(HudEventObjectiveItemViewInterface_SetWidgetState) == 0x000001, "Wrong size on HudEventObjectiveItemViewInterface_SetWidgetState");
static_assert(offsetof(HudEventObjectiveItemViewInterface_SetWidgetState, EventItemState) == 0x000000, "Member 'HudEventObjectiveItemViewInterface_SetWidgetState::EventItemState' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.EnableEventProgression
// 0x0001 (0x0001 - 0x0000)
struct HudEventProgression2023ViewInterface_EnableEventProgression final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgression2023ViewInterface_EnableEventProgression) == 0x000001, "Wrong alignment on HudEventProgression2023ViewInterface_EnableEventProgression");
static_assert(sizeof(HudEventProgression2023ViewInterface_EnableEventProgression) == 0x000001, "Wrong size on HudEventProgression2023ViewInterface_EnableEventProgression");
static_assert(offsetof(HudEventProgression2023ViewInterface_EnableEventProgression, IsEnabled) == 0x000000, "Member 'HudEventProgression2023ViewInterface_EnableEventProgression::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.InitEventProgression
// 0x0014 (0x0014 - 0x0000)
struct HudEventProgression2023ViewInterface_InitEventProgression final
{
public:
	struct FHudEventProgression2023ViewData       HudEventProgressionViewData;                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgression2023ViewInterface_InitEventProgression) == 0x000004, "Wrong alignment on HudEventProgression2023ViewInterface_InitEventProgression");
static_assert(sizeof(HudEventProgression2023ViewInterface_InitEventProgression) == 0x000014, "Wrong size on HudEventProgression2023ViewInterface_InitEventProgression");
static_assert(offsetof(HudEventProgression2023ViewInterface_InitEventProgression, HudEventProgressionViewData) == 0x000000, "Member 'HudEventProgression2023ViewInterface_InitEventProgression::HudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.UpdateEnergyProgress
// 0x0014 (0x0014 - 0x0000)
struct HudEventProgression2023ViewInterface_UpdateEnergyProgress final
{
public:
	struct FHudEventProgression2023ViewData       HudEventProgressionViewData;                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgression2023ViewInterface_UpdateEnergyProgress) == 0x000004, "Wrong alignment on HudEventProgression2023ViewInterface_UpdateEnergyProgress");
static_assert(sizeof(HudEventProgression2023ViewInterface_UpdateEnergyProgress) == 0x000014, "Wrong size on HudEventProgression2023ViewInterface_UpdateEnergyProgress");
static_assert(offsetof(HudEventProgression2023ViewInterface_UpdateEnergyProgress, HudEventProgressionViewData) == 0x000000, "Member 'HudEventProgression2023ViewInterface_UpdateEnergyProgress::HudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.UpdateHauntTarget
// 0x0014 (0x0014 - 0x0000)
struct HudEventProgression2023ViewInterface_UpdateHauntTarget final
{
public:
	struct FHudEventProgression2023ViewData       HudEventProgressionViewData;                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgression2023ViewInterface_UpdateHauntTarget) == 0x000004, "Wrong alignment on HudEventProgression2023ViewInterface_UpdateHauntTarget");
static_assert(sizeof(HudEventProgression2023ViewInterface_UpdateHauntTarget) == 0x000014, "Wrong size on HudEventProgression2023ViewInterface_UpdateHauntTarget");
static_assert(offsetof(HudEventProgression2023ViewInterface_UpdateHauntTarget, HudEventProgressionViewData) == 0x000000, "Member 'HudEventProgression2023ViewInterface_UpdateHauntTarget::HudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventProgression2023ViewInterface.UpdateVoidZoneState
// 0x0014 (0x0014 - 0x0000)
struct HudEventProgression2023ViewInterface_UpdateVoidZoneState final
{
public:
	struct FHudEventProgression2023ViewData       HudEventProgressionViewData;                       // 0x0000(0x0014)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgression2023ViewInterface_UpdateVoidZoneState) == 0x000004, "Wrong alignment on HudEventProgression2023ViewInterface_UpdateVoidZoneState");
static_assert(sizeof(HudEventProgression2023ViewInterface_UpdateVoidZoneState) == 0x000014, "Wrong size on HudEventProgression2023ViewInterface_UpdateVoidZoneState");
static_assert(offsetof(HudEventProgression2023ViewInterface_UpdateVoidZoneState, HudEventProgressionViewData) == 0x000000, "Member 'HudEventProgression2023ViewInterface_UpdateVoidZoneState::HudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventProgressionViewInterface.EnableEventProgression
// 0x0001 (0x0001 - 0x0000)
struct HudEventProgressionViewInterface_EnableEventProgression final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgressionViewInterface_EnableEventProgression) == 0x000001, "Wrong alignment on HudEventProgressionViewInterface_EnableEventProgression");
static_assert(sizeof(HudEventProgressionViewInterface_EnableEventProgression) == 0x000001, "Wrong size on HudEventProgressionViewInterface_EnableEventProgression");
static_assert(offsetof(HudEventProgressionViewInterface_EnableEventProgression, IsEnabled) == 0x000000, "Member 'HudEventProgressionViewInterface_EnableEventProgression::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventProgressionViewInterface.InitEventProgression
// 0x0010 (0x0010 - 0x0000)
struct HudEventProgressionViewInterface_InitEventProgression final
{
public:
	struct FHudEventProgressionViewData           HudEventProgressionViewData;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgressionViewInterface_InitEventProgression) == 0x000004, "Wrong alignment on HudEventProgressionViewInterface_InitEventProgression");
static_assert(sizeof(HudEventProgressionViewInterface_InitEventProgression) == 0x000010, "Wrong size on HudEventProgressionViewInterface_InitEventProgression");
static_assert(offsetof(HudEventProgressionViewInterface_InitEventProgression, HudEventProgressionViewData) == 0x000000, "Member 'HudEventProgressionViewInterface_InitEventProgression::HudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventProgressionViewInterface.UpdateEventBankedProgress
// 0x0010 (0x0010 - 0x0000)
struct HudEventProgressionViewInterface_UpdateEventBankedProgress final
{
public:
	struct FHudEventProgressionViewData           HudEventProgressionViewData;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgressionViewInterface_UpdateEventBankedProgress) == 0x000004, "Wrong alignment on HudEventProgressionViewInterface_UpdateEventBankedProgress");
static_assert(sizeof(HudEventProgressionViewInterface_UpdateEventBankedProgress) == 0x000010, "Wrong size on HudEventProgressionViewInterface_UpdateEventBankedProgress");
static_assert(offsetof(HudEventProgressionViewInterface_UpdateEventBankedProgress, HudEventProgressionViewData) == 0x000000, "Member 'HudEventProgressionViewInterface_UpdateEventBankedProgress::HudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudEventProgressionViewInterface.UpdateEventPendingProgress
// 0x0010 (0x0010 - 0x0000)
struct HudEventProgressionViewInterface_UpdateEventPendingProgress final
{
public:
	struct FHudEventProgressionViewData           HudEventProgressionViewData;                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudEventProgressionViewInterface_UpdateEventPendingProgress) == 0x000004, "Wrong alignment on HudEventProgressionViewInterface_UpdateEventPendingProgress");
static_assert(sizeof(HudEventProgressionViewInterface_UpdateEventPendingProgress) == 0x000010, "Wrong size on HudEventProgressionViewInterface_UpdateEventPendingProgress");
static_assert(offsetof(HudEventProgressionViewInterface_UpdateEventPendingProgress, HudEventProgressionViewData) == 0x000000, "Member 'HudEventProgressionViewInterface_UpdateEventPendingProgress::HudEventProgressionViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.HudItemPickupViewInterface.SetData
// 0x03A0 (0x03A0 - 0x0000)
struct HudItemPickupViewInterface_SetData final
{
public:
	struct FItemPickupViewData                    ItemToPickUpData;                                  // 0x0000(0x01D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FItemPickupViewData                    CurrentItem;                                       // 0x01D0(0x01D0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudItemPickupViewInterface_SetData) == 0x000008, "Wrong alignment on HudItemPickupViewInterface_SetData");
static_assert(sizeof(HudItemPickupViewInterface_SetData) == 0x0003A0, "Wrong size on HudItemPickupViewInterface_SetData");
static_assert(offsetof(HudItemPickupViewInterface_SetData, ItemToPickUpData) == 0x000000, "Member 'HudItemPickupViewInterface_SetData::ItemToPickUpData' has a wrong offset!");
static_assert(offsetof(HudItemPickupViewInterface_SetData, CurrentItem) == 0x0001D0, "Member 'HudItemPickupViewInterface_SetData::CurrentItem' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.InitWidget
// 0x0008 (0x0008 - 0x0000)
struct HudObjectivesViewInterface_InitWidget final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumberOfSegments;                                  // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_InitWidget) == 0x000004, "Wrong alignment on HudObjectivesViewInterface_InitWidget");
static_assert(sizeof(HudObjectivesViewInterface_InitWidget) == 0x000008, "Wrong size on HudObjectivesViewInterface_InitWidget");
static_assert(offsetof(HudObjectivesViewInterface_InitWidget, GameType) == 0x000000, "Member 'HudObjectivesViewInterface_InitWidget::GameType' has a wrong offset!");
static_assert(offsetof(HudObjectivesViewInterface_InitWidget, NumberOfSegments) == 0x000004, "Member 'HudObjectivesViewInterface_InitWidget::NumberOfSegments' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHookCountData
// 0x0068 (0x0068 - 0x0000)
struct HudObjectivesViewInterface_SetHookCountData final
{
public:
	int32                                         CurrentHookCount;                                  // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHookCount;                                      // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InitialMaxHookCount;                               // 0x0008(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   AssistedHookIndices;                               // 0x0010(0x0050)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsFinisherMoriAvailable;                           // 0x0060(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(HudObjectivesViewInterface_SetHookCountData) == 0x000008, "Wrong alignment on HudObjectivesViewInterface_SetHookCountData");
static_assert(sizeof(HudObjectivesViewInterface_SetHookCountData) == 0x000068, "Wrong size on HudObjectivesViewInterface_SetHookCountData");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountData, CurrentHookCount) == 0x000000, "Member 'HudObjectivesViewInterface_SetHookCountData::CurrentHookCount' has a wrong offset!");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountData, MaxHookCount) == 0x000004, "Member 'HudObjectivesViewInterface_SetHookCountData::MaxHookCount' has a wrong offset!");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountData, InitialMaxHookCount) == 0x000008, "Member 'HudObjectivesViewInterface_SetHookCountData::InitialMaxHookCount' has a wrong offset!");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountData, AssistedHookIndices) == 0x000010, "Member 'HudObjectivesViewInterface_SetHookCountData::AssistedHookIndices' has a wrong offset!");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountData, IsFinisherMoriAvailable) == 0x000060, "Member 'HudObjectivesViewInterface_SetHookCountData::IsFinisherMoriAvailable' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHookCountVisibility
// 0x0001 (0x0001 - 0x0000)
struct HudObjectivesViewInterface_SetHookCountVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_SetHookCountVisibility) == 0x000001, "Wrong alignment on HudObjectivesViewInterface_SetHookCountVisibility");
static_assert(sizeof(HudObjectivesViewInterface_SetHookCountVisibility) == 0x000001, "Wrong size on HudObjectivesViewInterface_SetHookCountVisibility");
static_assert(offsetof(HudObjectivesViewInterface_SetHookCountVisibility, Visible) == 0x000000, "Member 'HudObjectivesViewInterface_SetHookCountVisibility::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.HudObjectivesViewInterface.SetHudObjectiveData
// 0x000C (0x000C - 0x0000)
struct HudObjectivesViewInterface_SetHudObjectiveData final
{
public:
	struct FHudObjectivesViewData                 HudObjectiveViewData;                              // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(HudObjectivesViewInterface_SetHudObjectiveData) == 0x000004, "Wrong alignment on HudObjectivesViewInterface_SetHudObjectiveData");
static_assert(sizeof(HudObjectivesViewInterface_SetHudObjectiveData) == 0x00000C, "Wrong size on HudObjectivesViewInterface_SetHudObjectiveData");
static_assert(offsetof(HudObjectivesViewInterface_SetHudObjectiveData, HudObjectiveViewData) == 0x000000, "Member 'HudObjectivesViewInterface_SetHudObjectiveData::HudObjectiveViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.InboxViewInterface.SetData
// 0x0018 (0x0018 - 0x0000)
struct InboxViewInterface_SetData final
{
public:
	EInboxTab                                     Tab;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UInboxItemViewData*>             Data;                                              // 0x0008(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InboxViewInterface_SetData) == 0x000008, "Wrong alignment on InboxViewInterface_SetData");
static_assert(sizeof(InboxViewInterface_SetData) == 0x000018, "Wrong size on InboxViewInterface_SetData");
static_assert(offsetof(InboxViewInterface_SetData, Tab) == 0x000000, "Member 'InboxViewInterface_SetData::Tab' has a wrong offset!");
static_assert(offsetof(InboxViewInterface_SetData, Data) == 0x000008, "Member 'InboxViewInterface_SetData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.InboxViewInterface.SetListError
// 0x0001 (0x0001 - 0x0000)
struct InboxViewInterface_SetListError final
{
public:
	EInboxTab                                     Tab;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InboxViewInterface_SetListError) == 0x000001, "Wrong alignment on InboxViewInterface_SetListError");
static_assert(sizeof(InboxViewInterface_SetListError) == 0x000001, "Wrong size on InboxViewInterface_SetListError");
static_assert(offsetof(InboxViewInterface_SetListError, Tab) == 0x000000, "Member 'InboxViewInterface_SetListError::Tab' has a wrong offset!");

// Function DBDUIViewInterfaces.InboxViewInterface.SetLoading
// 0x0001 (0x0001 - 0x0000)
struct InboxViewInterface_SetLoading final
{
public:
	EInboxTab                                     Tab;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InboxViewInterface_SetLoading) == 0x000001, "Wrong alignment on InboxViewInterface_SetLoading");
static_assert(sizeof(InboxViewInterface_SetLoading) == 0x000001, "Wrong size on InboxViewInterface_SetLoading");
static_assert(offsetof(InboxViewInterface_SetLoading, Tab) == 0x000000, "Member 'InboxViewInterface_SetLoading::Tab' has a wrong offset!");

// Function DBDUIViewInterfaces.InboxViewInterface.SetSelectedItem
// 0x0010 (0x0010 - 0x0000)
struct InboxViewInterface_SetSelectedItem final
{
public:
	const class UInboxItemViewData*               ViewData;                                          // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInboxTab                                     Tab;                                               // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InboxViewInterface_SetSelectedItem) == 0x000008, "Wrong alignment on InboxViewInterface_SetSelectedItem");
static_assert(sizeof(InboxViewInterface_SetSelectedItem) == 0x000010, "Wrong size on InboxViewInterface_SetSelectedItem");
static_assert(offsetof(InboxViewInterface_SetSelectedItem, ViewData) == 0x000000, "Member 'InboxViewInterface_SetSelectedItem::ViewData' has a wrong offset!");
static_assert(offsetof(InboxViewInterface_SetSelectedItem, Tab) == 0x000008, "Member 'InboxViewInterface_SetSelectedItem::Tab' has a wrong offset!");

// Function DBDUIViewInterfaces.InboxViewInterface.SetTabNotificationIcon
// 0x0002 (0x0002 - 0x0000)
struct InboxViewInterface_SetTabNotificationIcon final
{
public:
	EInboxTab                                     Tab;                                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowNotificationIcon;                              // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InboxViewInterface_SetTabNotificationIcon) == 0x000001, "Wrong alignment on InboxViewInterface_SetTabNotificationIcon");
static_assert(sizeof(InboxViewInterface_SetTabNotificationIcon) == 0x000002, "Wrong size on InboxViewInterface_SetTabNotificationIcon");
static_assert(offsetof(InboxViewInterface_SetTabNotificationIcon, Tab) == 0x000000, "Member 'InboxViewInterface_SetTabNotificationIcon::Tab' has a wrong offset!");
static_assert(offsetof(InboxViewInterface_SetTabNotificationIcon, ShowNotificationIcon) == 0x000001, "Member 'InboxViewInterface_SetTabNotificationIcon::ShowNotificationIcon' has a wrong offset!");

// Function DBDUIViewInterfaces.InboxViewInterface.SetTabsData
// 0x0018 (0x0018 - 0x0000)
struct InboxViewInterface_SetTabsData final
{
public:
	TArray<struct FTabWidgetData>                 TabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EInboxTab                                     SelectedTab;                                       // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InboxViewInterface_SetTabsData) == 0x000008, "Wrong alignment on InboxViewInterface_SetTabsData");
static_assert(sizeof(InboxViewInterface_SetTabsData) == 0x000018, "Wrong size on InboxViewInterface_SetTabsData");
static_assert(offsetof(InboxViewInterface_SetTabsData, TabsData) == 0x000000, "Member 'InboxViewInterface_SetTabsData::TabsData' has a wrong offset!");
static_assert(offsetof(InboxViewInterface_SetTabsData, SelectedTab) == 0x000010, "Member 'InboxViewInterface_SetTabsData::SelectedTab' has a wrong offset!");

// Function DBDUIViewInterfaces.InteractionProgressViewInterface.SetInputProgressPrompt
// 0x0078 (0x0078 - 0x0000)
struct InteractionProgressViewInterface_SetInputProgressPrompt final
{
public:
	struct FInteractionProgressViewData           Data;                                              // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionProgressViewInterface_SetInputProgressPrompt) == 0x000008, "Wrong alignment on InteractionProgressViewInterface_SetInputProgressPrompt");
static_assert(sizeof(InteractionProgressViewInterface_SetInputProgressPrompt) == 0x000078, "Wrong size on InteractionProgressViewInterface_SetInputProgressPrompt");
static_assert(offsetof(InteractionProgressViewInterface_SetInputProgressPrompt, Data) == 0x000000, "Member 'InteractionProgressViewInterface_SetInputProgressPrompt::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.InteractionProgressViewInterface.UpdateInputProgress
// 0x0010 (0x0010 - 0x0000)
struct InteractionProgressViewInterface_UpdateInputProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ItemCharge;                                        // 0x0004(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsBlocked;                                         // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PercentageStopDischarge;                           // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionProgressViewInterface_UpdateInputProgress) == 0x000004, "Wrong alignment on InteractionProgressViewInterface_UpdateInputProgress");
static_assert(sizeof(InteractionProgressViewInterface_UpdateInputProgress) == 0x000010, "Wrong size on InteractionProgressViewInterface_UpdateInputProgress");
static_assert(offsetof(InteractionProgressViewInterface_UpdateInputProgress, Progress) == 0x000000, "Member 'InteractionProgressViewInterface_UpdateInputProgress::Progress' has a wrong offset!");
static_assert(offsetof(InteractionProgressViewInterface_UpdateInputProgress, ItemCharge) == 0x000004, "Member 'InteractionProgressViewInterface_UpdateInputProgress::ItemCharge' has a wrong offset!");
static_assert(offsetof(InteractionProgressViewInterface_UpdateInputProgress, IsBlocked) == 0x000008, "Member 'InteractionProgressViewInterface_UpdateInputProgress::IsBlocked' has a wrong offset!");
static_assert(offsetof(InteractionProgressViewInterface_UpdateInputProgress, PercentageStopDischarge) == 0x00000C, "Member 'InteractionProgressViewInterface_UpdateInputProgress::PercentageStopDischarge' has a wrong offset!");

// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.AddPrompt
// 0x00B0 (0x00B0 - 0x0000)
struct InteractionPromptsContainerViewInterface_AddPrompt final
{
public:
	struct FInteractionPromptViewData             Data;                                              // 0x0000(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionPromptsContainerViewInterface_AddPrompt) == 0x000008, "Wrong alignment on InteractionPromptsContainerViewInterface_AddPrompt");
static_assert(sizeof(InteractionPromptsContainerViewInterface_AddPrompt) == 0x0000B0, "Wrong size on InteractionPromptsContainerViewInterface_AddPrompt");
static_assert(offsetof(InteractionPromptsContainerViewInterface_AddPrompt, Data) == 0x000000, "Member 'InteractionPromptsContainerViewInterface_AddPrompt::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.InteractionPromptsContainerViewInterface.RemovePrompt
// 0x000C (0x000C - 0x0000)
struct InteractionPromptsContainerViewInterface_RemovePrompt final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionPromptsContainerViewInterface_RemovePrompt) == 0x000004, "Wrong alignment on InteractionPromptsContainerViewInterface_RemovePrompt");
static_assert(sizeof(InteractionPromptsContainerViewInterface_RemovePrompt) == 0x00000C, "Wrong size on InteractionPromptsContainerViewInterface_RemovePrompt");
static_assert(offsetof(InteractionPromptsContainerViewInterface_RemovePrompt, ID) == 0x000000, "Member 'InteractionPromptsContainerViewInterface_RemovePrompt::ID' has a wrong offset!");

// Function DBDUIViewInterfaces.ItemBundleViewInterface.SetData
// 0x0180 (0x0180 - 0x0000)
struct ItemBundleViewInterface_SetData final
{
public:
	struct FItemBundleViewData                    ItemBundleViewData;                                // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemBundleViewInterface_SetData) == 0x000008, "Wrong alignment on ItemBundleViewInterface_SetData");
static_assert(sizeof(ItemBundleViewInterface_SetData) == 0x000180, "Wrong size on ItemBundleViewInterface_SetData");
static_assert(offsetof(ItemBundleViewInterface_SetData, ItemBundleViewData) == 0x000000, "Member 'ItemBundleViewInterface_SetData::ItemBundleViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ItemInteractionViewInterface.SetData
// 0x0180 (0x0180 - 0x0000)
struct ItemInteractionViewInterface_SetData final
{
public:
	struct FItemBundleViewData                    ItemBundleData;                                    // 0x0000(0x0180)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemInteractionViewInterface_SetData) == 0x000008, "Wrong alignment on ItemInteractionViewInterface_SetData");
static_assert(sizeof(ItemInteractionViewInterface_SetData) == 0x000180, "Wrong size on ItemInteractionViewInterface_SetData");
static_assert(offsetof(ItemInteractionViewInterface_SetData, ItemBundleData) == 0x000000, "Member 'ItemInteractionViewInterface_SetData::ItemBundleData' has a wrong offset!");

// Function DBDUIViewInterfaces.ItemViewInterface.SetData
// 0x00A0 (0x00A0 - 0x0000)
struct ItemViewInterface_SetData final
{
public:
	struct FItemViewData                          ItemViewData;                                      // 0x0000(0x00A0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ItemViewInterface_SetData) == 0x000008, "Wrong alignment on ItemViewInterface_SetData");
static_assert(sizeof(ItemViewInterface_SetData) == 0x0000A0, "Wrong size on ItemViewInterface_SetData");
static_assert(offsetof(ItemViewInterface_SetData, ItemViewData) == 0x000000, "Member 'ItemViewInterface_SetData::ItemViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.KillerStatusViewInterface.SetData
// 0x0098 (0x0098 - 0x0000)
struct KillerStatusViewInterface_SetData final
{
public:
	struct FPlayerStatusViewData                  Data;                                              // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerStatusViewInterface_SetData) == 0x000008, "Wrong alignment on KillerStatusViewInterface_SetData");
static_assert(sizeof(KillerStatusViewInterface_SetData) == 0x000098, "Wrong size on KillerStatusViewInterface_SetData");
static_assert(offsetof(KillerStatusViewInterface_SetData, Data) == 0x000000, "Member 'KillerStatusViewInterface_SetData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.KillerStatusViewInterface.SetPlayerNameVisibility
// 0x0001 (0x0001 - 0x0000)
struct KillerStatusViewInterface_SetPlayerNameVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerStatusViewInterface_SetPlayerNameVisibility) == 0x000001, "Wrong alignment on KillerStatusViewInterface_SetPlayerNameVisibility");
static_assert(sizeof(KillerStatusViewInterface_SetPlayerNameVisibility) == 0x000001, "Wrong size on KillerStatusViewInterface_SetPlayerNameVisibility");
static_assert(offsetof(KillerStatusViewInterface_SetPlayerNameVisibility, Visible) == 0x000000, "Member 'KillerStatusViewInterface_SetPlayerNameVisibility::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.LeaningArrowsViewInterface.SetData
// 0x0001 (0x0001 - 0x0000)
struct LeaningArrowsViewInterface_SetData final
{
public:
	ELeanState                                    LeanState;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LeaningArrowsViewInterface_SetData) == 0x000001, "Wrong alignment on LeaningArrowsViewInterface_SetData");
static_assert(sizeof(LeaningArrowsViewInterface_SetData) == 0x000001, "Wrong size on LeaningArrowsViewInterface_SetData");
static_assert(offsetof(LeaningArrowsViewInterface_SetData, LeanState) == 0x000000, "Member 'LeaningArrowsViewInterface_SetData::LeanState' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadingScreenViewInterface.HasCustomWidgetForEvent
// 0x0010 (0x0010 - 0x0000)
struct LoadingScreenViewInterface_HasCustomWidgetForEvent final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadingScreenViewInterface_HasCustomWidgetForEvent) == 0x000004, "Wrong alignment on LoadingScreenViewInterface_HasCustomWidgetForEvent");
static_assert(sizeof(LoadingScreenViewInterface_HasCustomWidgetForEvent) == 0x000010, "Wrong size on LoadingScreenViewInterface_HasCustomWidgetForEvent");
static_assert(offsetof(LoadingScreenViewInterface_HasCustomWidgetForEvent, EventID) == 0x000000, "Member 'LoadingScreenViewInterface_HasCustomWidgetForEvent::EventID' has a wrong offset!");
static_assert(offsetof(LoadingScreenViewInterface_HasCustomWidgetForEvent, ReturnValue) == 0x00000C, "Member 'LoadingScreenViewInterface_HasCustomWidgetForEvent::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadingScreenViewInterface.SetLoadingHint
// 0x0078 (0x0078 - 0x0000)
struct LoadingScreenViewInterface_SetLoadingHint final
{
public:
	struct FLoadingHintViewData                   LoadingHintData;                                   // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingScreenViewInterface_SetLoadingHint) == 0x000008, "Wrong alignment on LoadingScreenViewInterface_SetLoadingHint");
static_assert(sizeof(LoadingScreenViewInterface_SetLoadingHint) == 0x000078, "Wrong size on LoadingScreenViewInterface_SetLoadingHint");
static_assert(offsetof(LoadingScreenViewInterface_SetLoadingHint, LoadingHintData) == 0x000000, "Member 'LoadingScreenViewInterface_SetLoadingHint::LoadingHintData' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadingScreenViewInterface.SetLoadingScreenType
// 0x0001 (0x0001 - 0x0000)
struct LoadingScreenViewInterface_SetLoadingScreenType final
{
public:
	ELoadingScreenType                            LoadingScreenType;                                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingScreenViewInterface_SetLoadingScreenType) == 0x000001, "Wrong alignment on LoadingScreenViewInterface_SetLoadingScreenType");
static_assert(sizeof(LoadingScreenViewInterface_SetLoadingScreenType) == 0x000001, "Wrong size on LoadingScreenViewInterface_SetLoadingScreenType");
static_assert(offsetof(LoadingScreenViewInterface_SetLoadingScreenType, LoadingScreenType) == 0x000000, "Member 'LoadingScreenViewInterface_SetLoadingScreenType::LoadingScreenType' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadingScreenViewInterface.SetSpecialEventLoadingScreen
// 0x000C (0x000C - 0x0000)
struct LoadingScreenViewInterface_SetSpecialEventLoadingScreen final
{
public:
	class FName                                   EventID;                                           // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingScreenViewInterface_SetSpecialEventLoadingScreen) == 0x000004, "Wrong alignment on LoadingScreenViewInterface_SetSpecialEventLoadingScreen");
static_assert(sizeof(LoadingScreenViewInterface_SetSpecialEventLoadingScreen) == 0x00000C, "Wrong size on LoadingScreenViewInterface_SetSpecialEventLoadingScreen");
static_assert(offsetof(LoadingScreenViewInterface_SetSpecialEventLoadingScreen, EventID) == 0x000000, "Member 'LoadingScreenViewInterface_SetSpecialEventLoadingScreen::EventID' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadingScreenViewInterface.ShowLoadingBannerImage
// 0x0001 (0x0001 - 0x0000)
struct LoadingScreenViewInterface_ShowLoadingBannerImage final
{
public:
	bool                                          IsKiller;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingScreenViewInterface_ShowLoadingBannerImage) == 0x000001, "Wrong alignment on LoadingScreenViewInterface_ShowLoadingBannerImage");
static_assert(sizeof(LoadingScreenViewInterface_ShowLoadingBannerImage) == 0x000001, "Wrong size on LoadingScreenViewInterface_ShowLoadingBannerImage");
static_assert(offsetof(LoadingScreenViewInterface_ShowLoadingBannerImage, IsKiller) == 0x000000, "Member 'LoadingScreenViewInterface_ShowLoadingBannerImage::IsKiller' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadingScreenViewInterface.UpdateProgress
// 0x0004 (0x0004 - 0x0000)
struct LoadingScreenViewInterface_UpdateProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadingScreenViewInterface_UpdateProgress) == 0x000004, "Wrong alignment on LoadingScreenViewInterface_UpdateProgress");
static_assert(sizeof(LoadingScreenViewInterface_UpdateProgress) == 0x000004, "Wrong size on LoadingScreenViewInterface_UpdateProgress");
static_assert(offsetof(LoadingScreenViewInterface_UpdateProgress, Progress) == 0x000000, "Member 'LoadingScreenViewInterface_UpdateProgress::Progress' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetIsPerkSurfacingExperimentActive
// 0x0001 (0x0001 - 0x0000)
struct LoadoutMenuViewInterface_SetIsPerkSurfacingExperimentActive final
{
public:
	bool                                          IsPerkSurfacingExperimentActive;                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuViewInterface_SetIsPerkSurfacingExperimentActive) == 0x000001, "Wrong alignment on LoadoutMenuViewInterface_SetIsPerkSurfacingExperimentActive");
static_assert(sizeof(LoadoutMenuViewInterface_SetIsPerkSurfacingExperimentActive) == 0x000001, "Wrong size on LoadoutMenuViewInterface_SetIsPerkSurfacingExperimentActive");
static_assert(offsetof(LoadoutMenuViewInterface_SetIsPerkSurfacingExperimentActive, IsPerkSurfacingExperimentActive) == 0x000000, "Member 'LoadoutMenuViewInterface_SetIsPerkSurfacingExperimentActive::IsPerkSurfacingExperimentActive' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetLoadoutMenuInventoryData
// 0x0018 (0x0018 - 0x0000)
struct LoadoutMenuViewInterface_SetLoadoutMenuInventoryData final
{
public:
	TArray<class ULoadoutMenuViewData*>           LoadoutMenuSlotButtonData;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	ELoadoutSlot                                  SlotSelected;                                      // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsNextSlot;                                        // 0x0011(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuViewInterface_SetLoadoutMenuInventoryData) == 0x000008, "Wrong alignment on LoadoutMenuViewInterface_SetLoadoutMenuInventoryData");
static_assert(sizeof(LoadoutMenuViewInterface_SetLoadoutMenuInventoryData) == 0x000018, "Wrong size on LoadoutMenuViewInterface_SetLoadoutMenuInventoryData");
static_assert(offsetof(LoadoutMenuViewInterface_SetLoadoutMenuInventoryData, LoadoutMenuSlotButtonData) == 0x000000, "Member 'LoadoutMenuViewInterface_SetLoadoutMenuInventoryData::LoadoutMenuSlotButtonData' has a wrong offset!");
static_assert(offsetof(LoadoutMenuViewInterface_SetLoadoutMenuInventoryData, SlotSelected) == 0x000010, "Member 'LoadoutMenuViewInterface_SetLoadoutMenuInventoryData::SlotSelected' has a wrong offset!");
static_assert(offsetof(LoadoutMenuViewInterface_SetLoadoutMenuInventoryData, IsNextSlot) == 0x000011, "Member 'LoadoutMenuViewInterface_SetLoadoutMenuInventoryData::IsNextSlot' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetLoadoutMenuSlotData
// 0x0010 (0x0010 - 0x0000)
struct LoadoutMenuViewInterface_SetLoadoutMenuSlotData final
{
public:
	TArray<class ULoadoutMenuViewData*>           LoadoutMenuSlotButtonData;                         // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(LoadoutMenuViewInterface_SetLoadoutMenuSlotData) == 0x000008, "Wrong alignment on LoadoutMenuViewInterface_SetLoadoutMenuSlotData");
static_assert(sizeof(LoadoutMenuViewInterface_SetLoadoutMenuSlotData) == 0x000010, "Wrong size on LoadoutMenuViewInterface_SetLoadoutMenuSlotData");
static_assert(offsetof(LoadoutMenuViewInterface_SetLoadoutMenuSlotData, LoadoutMenuSlotButtonData) == 0x000000, "Member 'LoadoutMenuViewInterface_SetLoadoutMenuSlotData::LoadoutMenuSlotButtonData' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetSelectableCharacters
// 0x00A8 (0x00A8 - 0x0000)
struct LoadoutMenuViewInterface_SetSelectableCharacters final
{
public:
	TArray<struct FTabWidgetData>                 SelectableCharacters;                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTabWidgetData                         SelectedCharacterData;                             // 0x0010(0x0090)(ConstParm, Parm, NativeAccessSpecifierPublic)
	int32                                         botIndex;                                          // 0x00A0(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuViewInterface_SetSelectableCharacters) == 0x000008, "Wrong alignment on LoadoutMenuViewInterface_SetSelectableCharacters");
static_assert(sizeof(LoadoutMenuViewInterface_SetSelectableCharacters) == 0x0000A8, "Wrong size on LoadoutMenuViewInterface_SetSelectableCharacters");
static_assert(offsetof(LoadoutMenuViewInterface_SetSelectableCharacters, SelectableCharacters) == 0x000000, "Member 'LoadoutMenuViewInterface_SetSelectableCharacters::SelectableCharacters' has a wrong offset!");
static_assert(offsetof(LoadoutMenuViewInterface_SetSelectableCharacters, SelectedCharacterData) == 0x000010, "Member 'LoadoutMenuViewInterface_SetSelectableCharacters::SelectedCharacterData' has a wrong offset!");
static_assert(offsetof(LoadoutMenuViewInterface_SetSelectableCharacters, botIndex) == 0x0000A0, "Member 'LoadoutMenuViewInterface_SetSelectableCharacters::botIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.SetSelectedInventoryItem
// 0x0018 (0x0018 - 0x0000)
struct LoadoutMenuViewInterface_SetSelectedInventoryItem final
{
public:
	TArray<int32>                                 SelectedIndex;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          IsUnequip;                                         // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuViewInterface_SetSelectedInventoryItem) == 0x000008, "Wrong alignment on LoadoutMenuViewInterface_SetSelectedInventoryItem");
static_assert(sizeof(LoadoutMenuViewInterface_SetSelectedInventoryItem) == 0x000018, "Wrong size on LoadoutMenuViewInterface_SetSelectedInventoryItem");
static_assert(offsetof(LoadoutMenuViewInterface_SetSelectedInventoryItem, SelectedIndex) == 0x000000, "Member 'LoadoutMenuViewInterface_SetSelectedInventoryItem::SelectedIndex' has a wrong offset!");
static_assert(offsetof(LoadoutMenuViewInterface_SetSelectedInventoryItem, IsUnequip) == 0x000010, "Member 'LoadoutMenuViewInterface_SetSelectedInventoryItem::IsUnequip' has a wrong offset!");

// Function DBDUIViewInterfaces.LoadoutMenuViewInterface.UpdatePresetData
// 0x0018 (0x0018 - 0x0000)
struct LoadoutMenuViewInterface_UpdatePresetData final
{
public:
	TArray<int32>                                 PresetData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedPreset;                                    // 0x0010(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LoadoutMenuViewInterface_UpdatePresetData) == 0x000008, "Wrong alignment on LoadoutMenuViewInterface_UpdatePresetData");
static_assert(sizeof(LoadoutMenuViewInterface_UpdatePresetData) == 0x000018, "Wrong size on LoadoutMenuViewInterface_UpdatePresetData");
static_assert(offsetof(LoadoutMenuViewInterface_UpdatePresetData, PresetData) == 0x000000, "Member 'LoadoutMenuViewInterface_UpdatePresetData::PresetData' has a wrong offset!");
static_assert(offsetof(LoadoutMenuViewInterface_UpdatePresetData, SelectedPreset) == 0x000010, "Member 'LoadoutMenuViewInterface_UpdatePresetData::SelectedPreset' has a wrong offset!");

// Function DBDUIViewInterfaces.LobbyCharactersViewInterface.GetStoreCharactersBioInterface
// 0x0010 (0x0010 - 0x0000)
struct LobbyCharactersViewInterface_GetStoreCharactersBioInterface final
{
public:
	TScriptInterface<class IStoreCharactersBioViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersViewInterface_GetStoreCharactersBioInterface) == 0x000008, "Wrong alignment on LobbyCharactersViewInterface_GetStoreCharactersBioInterface");
static_assert(sizeof(LobbyCharactersViewInterface_GetStoreCharactersBioInterface) == 0x000010, "Wrong size on LobbyCharactersViewInterface_GetStoreCharactersBioInterface");
static_assert(offsetof(LobbyCharactersViewInterface_GetStoreCharactersBioInterface, ReturnValue) == 0x000000, "Member 'LobbyCharactersViewInterface_GetStoreCharactersBioInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.LobbyCharactersViewInterface.GetStoreCharactersCustomizationsInterface
// 0x0010 (0x0010 - 0x0000)
struct LobbyCharactersViewInterface_GetStoreCharactersCustomizationsInterface final
{
public:
	TScriptInterface<class IStoreCharactersCustomizationsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersViewInterface_GetStoreCharactersCustomizationsInterface) == 0x000008, "Wrong alignment on LobbyCharactersViewInterface_GetStoreCharactersCustomizationsInterface");
static_assert(sizeof(LobbyCharactersViewInterface_GetStoreCharactersCustomizationsInterface) == 0x000010, "Wrong size on LobbyCharactersViewInterface_GetStoreCharactersCustomizationsInterface");
static_assert(offsetof(LobbyCharactersViewInterface_GetStoreCharactersCustomizationsInterface, ReturnValue) == 0x000000, "Member 'LobbyCharactersViewInterface_GetStoreCharactersCustomizationsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.LobbyCharactersViewInterface.GetStoreCharactersSelectionInterface
// 0x0010 (0x0010 - 0x0000)
struct LobbyCharactersViewInterface_GetStoreCharactersSelectionInterface final
{
public:
	TScriptInterface<class IStoreCharactersSelectionViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersViewInterface_GetStoreCharactersSelectionInterface) == 0x000008, "Wrong alignment on LobbyCharactersViewInterface_GetStoreCharactersSelectionInterface");
static_assert(sizeof(LobbyCharactersViewInterface_GetStoreCharactersSelectionInterface) == 0x000010, "Wrong size on LobbyCharactersViewInterface_GetStoreCharactersSelectionInterface");
static_assert(offsetof(LobbyCharactersViewInterface_GetStoreCharactersSelectionInterface, ReturnValue) == 0x000000, "Member 'LobbyCharactersViewInterface_GetStoreCharactersSelectionInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.LobbyCharactersViewInterface.GetWardrobeActionButtonsInterface
// 0x0010 (0x0010 - 0x0000)
struct LobbyCharactersViewInterface_GetWardrobeActionButtonsInterface final
{
public:
	TScriptInterface<class IWardrobeActionButtonsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LobbyCharactersViewInterface_GetWardrobeActionButtonsInterface) == 0x000008, "Wrong alignment on LobbyCharactersViewInterface_GetWardrobeActionButtonsInterface");
static_assert(sizeof(LobbyCharactersViewInterface_GetWardrobeActionButtonsInterface) == 0x000010, "Wrong size on LobbyCharactersViewInterface_GetWardrobeActionButtonsInterface");
static_assert(offsetof(LobbyCharactersViewInterface_GetWardrobeActionButtonsInterface, ReturnValue) == 0x000000, "Member 'LobbyCharactersViewInterface_GetWardrobeActionButtonsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.LockedFeatureElementViewInterface.IsLockedFeature
// 0x0001 (0x0001 - 0x0000)
struct LockedFeatureElementViewInterface_IsLockedFeature final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LockedFeatureElementViewInterface_IsLockedFeature) == 0x000001, "Wrong alignment on LockedFeatureElementViewInterface_IsLockedFeature");
static_assert(sizeof(LockedFeatureElementViewInterface_IsLockedFeature) == 0x000001, "Wrong size on LockedFeatureElementViewInterface_IsLockedFeature");
static_assert(offsetof(LockedFeatureElementViewInterface_IsLockedFeature, ReturnValue) == 0x000000, "Member 'LockedFeatureElementViewInterface_IsLockedFeature::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.GetMainMenuButtonIndex
// 0x0004 (0x0004 - 0x0000)
struct MainMenuButtonViewInterface_GetMainMenuButtonIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuButtonViewInterface_GetMainMenuButtonIndex) == 0x000004, "Wrong alignment on MainMenuButtonViewInterface_GetMainMenuButtonIndex");
static_assert(sizeof(MainMenuButtonViewInterface_GetMainMenuButtonIndex) == 0x000004, "Wrong size on MainMenuButtonViewInterface_GetMainMenuButtonIndex");
static_assert(offsetof(MainMenuButtonViewInterface_GetMainMenuButtonIndex, ReturnValue) == 0x000000, "Member 'MainMenuButtonViewInterface_GetMainMenuButtonIndex::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.GetMainMenuButtonType
// 0x0001 (0x0001 - 0x0000)
struct MainMenuButtonViewInterface_GetMainMenuButtonType final
{
public:
	EMainMenuButtonType                           ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuButtonViewInterface_GetMainMenuButtonType) == 0x000001, "Wrong alignment on MainMenuButtonViewInterface_GetMainMenuButtonType");
static_assert(sizeof(MainMenuButtonViewInterface_GetMainMenuButtonType) == 0x000001, "Wrong size on MainMenuButtonViewInterface_GetMainMenuButtonType");
static_assert(offsetof(MainMenuButtonViewInterface_GetMainMenuButtonType, ReturnValue) == 0x000000, "Member 'MainMenuButtonViewInterface_GetMainMenuButtonType::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.SetMainMenuButtonIndex
// 0x0004 (0x0004 - 0x0000)
struct MainMenuButtonViewInterface_SetMainMenuButtonIndex final
{
public:
	int32                                         ButtonIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuButtonViewInterface_SetMainMenuButtonIndex) == 0x000004, "Wrong alignment on MainMenuButtonViewInterface_SetMainMenuButtonIndex");
static_assert(sizeof(MainMenuButtonViewInterface_SetMainMenuButtonIndex) == 0x000004, "Wrong size on MainMenuButtonViewInterface_SetMainMenuButtonIndex");
static_assert(offsetof(MainMenuButtonViewInterface_SetMainMenuButtonIndex, ButtonIndex) == 0x000000, "Member 'MainMenuButtonViewInterface_SetMainMenuButtonIndex::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.SetMainMenuButtonType
// 0x0001 (0x0001 - 0x0000)
struct MainMenuButtonViewInterface_SetMainMenuButtonType final
{
public:
	EMainMenuButtonType                           MainMenuButtonType;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuButtonViewInterface_SetMainMenuButtonType) == 0x000001, "Wrong alignment on MainMenuButtonViewInterface_SetMainMenuButtonType");
static_assert(sizeof(MainMenuButtonViewInterface_SetMainMenuButtonType) == 0x000001, "Wrong size on MainMenuButtonViewInterface_SetMainMenuButtonType");
static_assert(offsetof(MainMenuButtonViewInterface_SetMainMenuButtonType, MainMenuButtonType) == 0x000000, "Member 'MainMenuButtonViewInterface_SetMainMenuButtonType::MainMenuButtonType' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuButtonViewInterface.SetNotificationVisibility
// 0x0001 (0x0001 - 0x0000)
struct MainMenuButtonViewInterface_SetNotificationVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuButtonViewInterface_SetNotificationVisibility) == 0x000001, "Wrong alignment on MainMenuButtonViewInterface_SetNotificationVisibility");
static_assert(sizeof(MainMenuButtonViewInterface_SetNotificationVisibility) == 0x000001, "Wrong size on MainMenuButtonViewInterface_SetNotificationVisibility");
static_assert(offsetof(MainMenuButtonViewInterface_SetNotificationVisibility, IsVisible) == 0x000000, "Member 'MainMenuButtonViewInterface_SetNotificationVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.AddButtonTimerFlag
// 0x0038 (0x0038 - 0x0000)
struct MainMenuViewInterface_AddButtonTimerFlag final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerFlagViewData                     TimerFlagViewData;                                 // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_AddButtonTimerFlag) == 0x000008, "Wrong alignment on MainMenuViewInterface_AddButtonTimerFlag");
static_assert(sizeof(MainMenuViewInterface_AddButtonTimerFlag) == 0x000038, "Wrong size on MainMenuViewInterface_AddButtonTimerFlag");
static_assert(offsetof(MainMenuViewInterface_AddButtonTimerFlag, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_AddButtonTimerFlag::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_AddButtonTimerFlag, TimerFlagViewData) == 0x000008, "Member 'MainMenuViewInterface_AddButtonTimerFlag::TimerFlagViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.ClearButtonTimerFlags
// 0x0008 (0x0008 - 0x0000)
struct MainMenuViewInterface_ClearButtonTimerFlags final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_ClearButtonTimerFlags) == 0x000004, "Wrong alignment on MainMenuViewInterface_ClearButtonTimerFlags");
static_assert(sizeof(MainMenuViewInterface_ClearButtonTimerFlags) == 0x000008, "Wrong size on MainMenuViewInterface_ClearButtonTimerFlags");
static_assert(offsetof(MainMenuViewInterface_ClearButtonTimerFlags, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_ClearButtonTimerFlags::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_ClearButtonTimerFlags, ButtonIndex) == 0x000004, "Member 'MainMenuViewInterface_ClearButtonTimerFlags::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.DisplayMainMenu
// 0x0001 (0x0001 - 0x0000)
struct MainMenuViewInterface_DisplayMainMenu final
{
public:
	bool                                          IsDisplayed;                                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_DisplayMainMenu) == 0x000001, "Wrong alignment on MainMenuViewInterface_DisplayMainMenu");
static_assert(sizeof(MainMenuViewInterface_DisplayMainMenu) == 0x000001, "Wrong size on MainMenuViewInterface_DisplayMainMenu");
static_assert(offsetof(MainMenuViewInterface_DisplayMainMenu, IsDisplayed) == 0x000000, "Member 'MainMenuViewInterface_DisplayMainMenu::IsDisplayed' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.ResetButton
// 0x0008 (0x0008 - 0x0000)
struct MainMenuViewInterface_ResetButton final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_ResetButton) == 0x000004, "Wrong alignment on MainMenuViewInterface_ResetButton");
static_assert(sizeof(MainMenuViewInterface_ResetButton) == 0x000008, "Wrong size on MainMenuViewInterface_ResetButton");
static_assert(offsetof(MainMenuViewInterface_ResetButton, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_ResetButton::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_ResetButton, ButtonIndex) == 0x000004, "Member 'MainMenuViewInterface_ResetButton::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonBetaFeatureVisibility
// 0x0008 (0x0008 - 0x0000)
struct MainMenuViewInterface_SetButtonBetaFeatureVisibility final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetButtonBetaFeatureVisibility) == 0x000004, "Wrong alignment on MainMenuViewInterface_SetButtonBetaFeatureVisibility");
static_assert(sizeof(MainMenuViewInterface_SetButtonBetaFeatureVisibility) == 0x000008, "Wrong size on MainMenuViewInterface_SetButtonBetaFeatureVisibility");
static_assert(offsetof(MainMenuViewInterface_SetButtonBetaFeatureVisibility, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetButtonBetaFeatureVisibility::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonBetaFeatureVisibility, IsVisible) == 0x000001, "Member 'MainMenuViewInterface_SetButtonBetaFeatureVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonBetaFeatureVisibility, ButtonIndex) == 0x000004, "Member 'MainMenuViewInterface_SetButtonBetaFeatureVisibility::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonDecoration
// 0x0018 (0x0018 - 0x0000)
struct MainMenuViewInterface_SetButtonDecoration final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DecorationId;                                      // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetButtonDecoration) == 0x000008, "Wrong alignment on MainMenuViewInterface_SetButtonDecoration");
static_assert(sizeof(MainMenuViewInterface_SetButtonDecoration) == 0x000018, "Wrong size on MainMenuViewInterface_SetButtonDecoration");
static_assert(offsetof(MainMenuViewInterface_SetButtonDecoration, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetButtonDecoration::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonDecoration, DecorationId) == 0x000008, "Member 'MainMenuViewInterface_SetButtonDecoration::DecorationId' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonDecorationVisible
// 0x0008 (0x0008 - 0x0000)
struct MainMenuViewInterface_SetButtonDecorationVisible final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetButtonDecorationVisible) == 0x000004, "Wrong alignment on MainMenuViewInterface_SetButtonDecorationVisible");
static_assert(sizeof(MainMenuViewInterface_SetButtonDecorationVisible) == 0x000008, "Wrong size on MainMenuViewInterface_SetButtonDecorationVisible");
static_assert(offsetof(MainMenuViewInterface_SetButtonDecorationVisible, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetButtonDecorationVisible::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonDecorationVisible, IsVisible) == 0x000001, "Member 'MainMenuViewInterface_SetButtonDecorationVisible::IsVisible' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonDecorationVisible, ButtonIndex) == 0x000004, "Member 'MainMenuViewInterface_SetButtonDecorationVisible::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonDisableState
// 0x0008 (0x0008 - 0x0000)
struct MainMenuViewInterface_SetButtonDisableState final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EButtonDisableState                           buttonDisableState;                                // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetButtonDisableState) == 0x000004, "Wrong alignment on MainMenuViewInterface_SetButtonDisableState");
static_assert(sizeof(MainMenuViewInterface_SetButtonDisableState) == 0x000008, "Wrong size on MainMenuViewInterface_SetButtonDisableState");
static_assert(offsetof(MainMenuViewInterface_SetButtonDisableState, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetButtonDisableState::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonDisableState, buttonDisableState) == 0x000001, "Member 'MainMenuViewInterface_SetButtonDisableState::buttonDisableState' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonDisableState, ButtonIndex) == 0x000004, "Member 'MainMenuViewInterface_SetButtonDisableState::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonEnabled
// 0x0008 (0x0008 - 0x0000)
struct MainMenuViewInterface_SetButtonEnabled final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnabled;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetButtonEnabled) == 0x000004, "Wrong alignment on MainMenuViewInterface_SetButtonEnabled");
static_assert(sizeof(MainMenuViewInterface_SetButtonEnabled) == 0x000008, "Wrong size on MainMenuViewInterface_SetButtonEnabled");
static_assert(offsetof(MainMenuViewInterface_SetButtonEnabled, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetButtonEnabled::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonEnabled, IsEnabled) == 0x000001, "Member 'MainMenuViewInterface_SetButtonEnabled::IsEnabled' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonEnabled, ButtonIndex) == 0x000004, "Member 'MainMenuViewInterface_SetButtonEnabled::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonIcon
// 0x0020 (0x0020 - 0x0000)
struct MainMenuViewInterface_SetButtonIcon final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 IconId;                                            // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuViewInterface_SetButtonIcon) == 0x000008, "Wrong alignment on MainMenuViewInterface_SetButtonIcon");
static_assert(sizeof(MainMenuViewInterface_SetButtonIcon) == 0x000020, "Wrong size on MainMenuViewInterface_SetButtonIcon");
static_assert(offsetof(MainMenuViewInterface_SetButtonIcon, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetButtonIcon::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonIcon, IconId) == 0x000008, "Member 'MainMenuViewInterface_SetButtonIcon::IconId' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonIcon, ButtonIndex) == 0x000018, "Member 'MainMenuViewInterface_SetButtonIcon::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonNotificationVisibility
// 0x0008 (0x0008 - 0x0000)
struct MainMenuViewInterface_SetButtonNotificationVisibility final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetButtonNotificationVisibility) == 0x000004, "Wrong alignment on MainMenuViewInterface_SetButtonNotificationVisibility");
static_assert(sizeof(MainMenuViewInterface_SetButtonNotificationVisibility) == 0x000008, "Wrong size on MainMenuViewInterface_SetButtonNotificationVisibility");
static_assert(offsetof(MainMenuViewInterface_SetButtonNotificationVisibility, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetButtonNotificationVisibility::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonNotificationVisibility, IsVisible) == 0x000001, "Member 'MainMenuViewInterface_SetButtonNotificationVisibility::IsVisible' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonNotificationVisibility, ButtonIndex) == 0x000004, "Member 'MainMenuViewInterface_SetButtonNotificationVisibility::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetButtonVisibility
// 0x0002 (0x0002 - 0x0000)
struct MainMenuViewInterface_SetButtonVisibility final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetButtonVisibility) == 0x000001, "Wrong alignment on MainMenuViewInterface_SetButtonVisibility");
static_assert(sizeof(MainMenuViewInterface_SetButtonVisibility) == 0x000002, "Wrong size on MainMenuViewInterface_SetButtonVisibility");
static_assert(offsetof(MainMenuViewInterface_SetButtonVisibility, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetButtonVisibility::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetButtonVisibility, IsVisible) == 0x000001, "Member 'MainMenuViewInterface_SetButtonVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetChallengesButtonVisibility
// 0x0001 (0x0001 - 0x0000)
struct MainMenuViewInterface_SetChallengesButtonVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetChallengesButtonVisibility) == 0x000001, "Wrong alignment on MainMenuViewInterface_SetChallengesButtonVisibility");
static_assert(sizeof(MainMenuViewInterface_SetChallengesButtonVisibility) == 0x000001, "Wrong size on MainMenuViewInterface_SetChallengesButtonVisibility");
static_assert(offsetof(MainMenuViewInterface_SetChallengesButtonVisibility, IsVisible) == 0x000000, "Member 'MainMenuViewInterface_SetChallengesButtonVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetChangeAccountInputSwitcherPlayerNickname
// 0x0010 (0x0010 - 0x0000)
struct MainMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname final
{
public:
	class FString                                 PlayerNickname;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname) == 0x000008, "Wrong alignment on MainMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname");
static_assert(sizeof(MainMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname) == 0x000010, "Wrong size on MainMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname");
static_assert(offsetof(MainMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname, PlayerNickname) == 0x000000, "Member 'MainMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname::PlayerNickname' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetChangeAccountInputSwitcherVisible
// 0x0001 (0x0001 - 0x0000)
struct MainMenuViewInterface_SetChangeAccountInputSwitcherVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetChangeAccountInputSwitcherVisible) == 0x000001, "Wrong alignment on MainMenuViewInterface_SetChangeAccountInputSwitcherVisible");
static_assert(sizeof(MainMenuViewInterface_SetChangeAccountInputSwitcherVisible) == 0x000001, "Wrong size on MainMenuViewInterface_SetChangeAccountInputSwitcherVisible");
static_assert(offsetof(MainMenuViewInterface_SetChangeAccountInputSwitcherVisible, Visible) == 0x000000, "Member 'MainMenuViewInterface_SetChangeAccountInputSwitcherVisible::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetLabelButton
// 0x0028 (0x0028 - 0x0000)
struct MainMenuViewInterface_SetLabelButton final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Label;                                             // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuViewInterface_SetLabelButton) == 0x000008, "Wrong alignment on MainMenuViewInterface_SetLabelButton");
static_assert(sizeof(MainMenuViewInterface_SetLabelButton) == 0x000028, "Wrong size on MainMenuViewInterface_SetLabelButton");
static_assert(offsetof(MainMenuViewInterface_SetLabelButton, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetLabelButton::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetLabelButton, Label) == 0x000008, "Member 'MainMenuViewInterface_SetLabelButton::Label' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetLabelButton, ButtonIndex) == 0x000020, "Member 'MainMenuViewInterface_SetLabelButton::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetLTEButtons
// 0x0020 (0x0020 - 0x0000)
struct MainMenuViewInterface_SetLTEButtons final
{
public:
	TArray<class FName>                           EventNames;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<EGameType>                             EventGameTypes;                                    // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetLTEButtons) == 0x000008, "Wrong alignment on MainMenuViewInterface_SetLTEButtons");
static_assert(sizeof(MainMenuViewInterface_SetLTEButtons) == 0x000020, "Wrong size on MainMenuViewInterface_SetLTEButtons");
static_assert(offsetof(MainMenuViewInterface_SetLTEButtons, EventNames) == 0x000000, "Member 'MainMenuViewInterface_SetLTEButtons::EventNames' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetLTEButtons, EventGameTypes) == 0x000010, "Member 'MainMenuViewInterface_SetLTEButtons::EventGameTypes' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetMatchmakingIncentive
// 0x0014 (0x0014 - 0x0000)
struct MainMenuViewInterface_SetMatchmakingIncentive final
{
public:
	class FName                                   GameMode;                                          // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerRole                                   Role;                                              // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PercentAmount;                                     // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetMatchmakingIncentive) == 0x000004, "Wrong alignment on MainMenuViewInterface_SetMatchmakingIncentive");
static_assert(sizeof(MainMenuViewInterface_SetMatchmakingIncentive) == 0x000014, "Wrong size on MainMenuViewInterface_SetMatchmakingIncentive");
static_assert(offsetof(MainMenuViewInterface_SetMatchmakingIncentive, GameMode) == 0x000000, "Member 'MainMenuViewInterface_SetMatchmakingIncentive::GameMode' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetMatchmakingIncentive, Role) == 0x00000C, "Member 'MainMenuViewInterface_SetMatchmakingIncentive::Role' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetMatchmakingIncentive, PercentAmount) == 0x000010, "Member 'MainMenuViewInterface_SetMatchmakingIncentive::PercentAmount' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetStoreButtonFlags
// 0x0068 (0x0068 - 0x0000)
struct MainMenuViewInterface_SetStoreButtonFlags final
{
public:
	bool                                          HasNewItem;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerFlagViewData                     RemainingLimitedItemTimeData;                      // 0x0008(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FTimerFlagViewData                     RemainingSaleTimeData;                             // 0x0038(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetStoreButtonFlags) == 0x000008, "Wrong alignment on MainMenuViewInterface_SetStoreButtonFlags");
static_assert(sizeof(MainMenuViewInterface_SetStoreButtonFlags) == 0x000068, "Wrong size on MainMenuViewInterface_SetStoreButtonFlags");
static_assert(offsetof(MainMenuViewInterface_SetStoreButtonFlags, HasNewItem) == 0x000000, "Member 'MainMenuViewInterface_SetStoreButtonFlags::HasNewItem' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetStoreButtonFlags, RemainingLimitedItemTimeData) == 0x000008, "Member 'MainMenuViewInterface_SetStoreButtonFlags::RemainingLimitedItemTimeData' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetStoreButtonFlags, RemainingSaleTimeData) == 0x000038, "Member 'MainMenuViewInterface_SetStoreButtonFlags::RemainingSaleTimeData' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetSubtitle
// 0x0028 (0x0028 - 0x0000)
struct MainMenuViewInterface_SetSubtitle final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   Subtitle;                                          // 0x0008(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ButtonIndex;                                       // 0x0020(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MainMenuViewInterface_SetSubtitle) == 0x000008, "Wrong alignment on MainMenuViewInterface_SetSubtitle");
static_assert(sizeof(MainMenuViewInterface_SetSubtitle) == 0x000028, "Wrong size on MainMenuViewInterface_SetSubtitle");
static_assert(offsetof(MainMenuViewInterface_SetSubtitle, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetSubtitle::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetSubtitle, Subtitle) == 0x000008, "Member 'MainMenuViewInterface_SetSubtitle::Subtitle' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetSubtitle, ButtonIndex) == 0x000020, "Member 'MainMenuViewInterface_SetSubtitle::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetSubtitleVisible
// 0x0008 (0x0008 - 0x0000)
struct MainMenuViewInterface_SetSubtitleVisible final
{
public:
	EMainMenuButtonType                           ButtonType;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsVisible;                                         // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ButtonIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetSubtitleVisible) == 0x000004, "Wrong alignment on MainMenuViewInterface_SetSubtitleVisible");
static_assert(sizeof(MainMenuViewInterface_SetSubtitleVisible) == 0x000008, "Wrong size on MainMenuViewInterface_SetSubtitleVisible");
static_assert(offsetof(MainMenuViewInterface_SetSubtitleVisible, ButtonType) == 0x000000, "Member 'MainMenuViewInterface_SetSubtitleVisible::ButtonType' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetSubtitleVisible, IsVisible) == 0x000001, "Member 'MainMenuViewInterface_SetSubtitleVisible::IsVisible' has a wrong offset!");
static_assert(offsetof(MainMenuViewInterface_SetSubtitleVisible, ButtonIndex) == 0x000004, "Member 'MainMenuViewInterface_SetSubtitleVisible::ButtonIndex' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetUiTakeoverActive
// 0x0001 (0x0001 - 0x0000)
struct MainMenuViewInterface_SetUiTakeoverActive final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetUiTakeoverActive) == 0x000001, "Wrong alignment on MainMenuViewInterface_SetUiTakeoverActive");
static_assert(sizeof(MainMenuViewInterface_SetUiTakeoverActive) == 0x000001, "Wrong size on MainMenuViewInterface_SetUiTakeoverActive");
static_assert(offsetof(MainMenuViewInterface_SetUiTakeoverActive, IsActive) == 0x000000, "Member 'MainMenuViewInterface_SetUiTakeoverActive::IsActive' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetExitButtonEnabled
// 0x0001 (0x0001 - 0x0000)
struct MainMenuViewInterface_SetExitButtonEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetExitButtonEnabled) == 0x000001, "Wrong alignment on MainMenuViewInterface_SetExitButtonEnabled");
static_assert(sizeof(MainMenuViewInterface_SetExitButtonEnabled) == 0x000001, "Wrong size on MainMenuViewInterface_SetExitButtonEnabled");
static_assert(offsetof(MainMenuViewInterface_SetExitButtonEnabled, IsEnabled) == 0x000000, "Member 'MainMenuViewInterface_SetExitButtonEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.MainMenuViewInterface.SetMarketingInvitationPopupButtonIcon
// 0x0001 (0x0001 - 0x0000)
struct MainMenuViewInterface_SetMarketingInvitationPopupButtonIcon final
{
public:
	ECurrencyType                                 CurrencyType;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MainMenuViewInterface_SetMarketingInvitationPopupButtonIcon) == 0x000001, "Wrong alignment on MainMenuViewInterface_SetMarketingInvitationPopupButtonIcon");
static_assert(sizeof(MainMenuViewInterface_SetMarketingInvitationPopupButtonIcon) == 0x000001, "Wrong size on MainMenuViewInterface_SetMarketingInvitationPopupButtonIcon");
static_assert(offsetof(MainMenuViewInterface_SetMarketingInvitationPopupButtonIcon, CurrencyType) == 0x000000, "Member 'MainMenuViewInterface_SetMarketingInvitationPopupButtonIcon::CurrencyType' has a wrong offset!");

// Function DBDUIViewInterfaces.MatchResultViewInterface.SetMatchResultVisibility
// 0x0001 (0x0001 - 0x0000)
struct MatchResultViewInterface_SetMatchResultVisibility final
{
public:
	ESlateVisibility                              Visibility;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchResultViewInterface_SetMatchResultVisibility) == 0x000001, "Wrong alignment on MatchResultViewInterface_SetMatchResultVisibility");
static_assert(sizeof(MatchResultViewInterface_SetMatchResultVisibility) == 0x000001, "Wrong size on MatchResultViewInterface_SetMatchResultVisibility");
static_assert(offsetof(MatchResultViewInterface_SetMatchResultVisibility, Visibility) == 0x000000, "Member 'MatchResultViewInterface_SetMatchResultVisibility::Visibility' has a wrong offset!");

// Function DBDUIViewInterfaces.MatchResultViewInterface.UpdateWidget
// 0x0008 (0x0008 - 0x0000)
struct MatchResultViewInterface_UpdateWidget final
{
public:
	struct FMatchResultViewData                   Data;                                              // 0x0000(0x0008)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(MatchResultViewInterface_UpdateWidget) == 0x000004, "Wrong alignment on MatchResultViewInterface_UpdateWidget");
static_assert(sizeof(MatchResultViewInterface_UpdateWidget) == 0x000008, "Wrong size on MatchResultViewInterface_UpdateWidget");
static_assert(offsetof(MatchResultViewInterface_UpdateWidget, Data) == 0x000000, "Member 'MatchResultViewInterface_UpdateWidget::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.MultipleDisableStateButtonViewInterface.SetButtonDisableState
// 0x0001 (0x0001 - 0x0000)
struct MultipleDisableStateButtonViewInterface_SetButtonDisableState final
{
public:
	EButtonDisableState                           buttonDisableState;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MultipleDisableStateButtonViewInterface_SetButtonDisableState) == 0x000001, "Wrong alignment on MultipleDisableStateButtonViewInterface_SetButtonDisableState");
static_assert(sizeof(MultipleDisableStateButtonViewInterface_SetButtonDisableState) == 0x000001, "Wrong size on MultipleDisableStateButtonViewInterface_SetButtonDisableState");
static_assert(offsetof(MultipleDisableStateButtonViewInterface_SetButtonDisableState, buttonDisableState) == 0x000000, "Member 'MultipleDisableStateButtonViewInterface_SetButtonDisableState::buttonDisableState' has a wrong offset!");

// Function DBDUIViewInterfaces.NewActiveTomePopupViewInterface.SetRemainingTime
// 0x0010 (0x0010 - 0x0000)
struct NewActiveTomePopupViewInterface_SetRemainingTime final
{
public:
	class FString                                 RemainingTime;                                     // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewActiveTomePopupViewInterface_SetRemainingTime) == 0x000008, "Wrong alignment on NewActiveTomePopupViewInterface_SetRemainingTime");
static_assert(sizeof(NewActiveTomePopupViewInterface_SetRemainingTime) == 0x000010, "Wrong size on NewActiveTomePopupViewInterface_SetRemainingTime");
static_assert(offsetof(NewActiveTomePopupViewInterface_SetRemainingTime, RemainingTime) == 0x000000, "Member 'NewActiveTomePopupViewInterface_SetRemainingTime::RemainingTime' has a wrong offset!");

// Function DBDUIViewInterfaces.NewActiveTomePopupViewInterface.SetRiftEnabled
// 0x0001 (0x0001 - 0x0000)
struct NewActiveTomePopupViewInterface_SetRiftEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(NewActiveTomePopupViewInterface_SetRiftEnabled) == 0x000001, "Wrong alignment on NewActiveTomePopupViewInterface_SetRiftEnabled");
static_assert(sizeof(NewActiveTomePopupViewInterface_SetRiftEnabled) == 0x000001, "Wrong size on NewActiveTomePopupViewInterface_SetRiftEnabled");
static_assert(offsetof(NewActiveTomePopupViewInterface_SetRiftEnabled, IsEnabled) == 0x000000, "Member 'NewActiveTomePopupViewInterface_SetRiftEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.OfferingInteractionViewInterface.SetData
// 0x0070 (0x0070 - 0x0000)
struct OfferingInteractionViewInterface_SetData final
{
public:
	struct FOfferingViewData                      OfferingData;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingInteractionViewInterface_SetData) == 0x000008, "Wrong alignment on OfferingInteractionViewInterface_SetData");
static_assert(sizeof(OfferingInteractionViewInterface_SetData) == 0x000070, "Wrong size on OfferingInteractionViewInterface_SetData");
static_assert(offsetof(OfferingInteractionViewInterface_SetData, OfferingData) == 0x000000, "Member 'OfferingInteractionViewInterface_SetData::OfferingData' has a wrong offset!");

// Function DBDUIViewInterfaces.OfferingViewInterface.SetData
// 0x0070 (0x0070 - 0x0000)
struct OfferingViewInterface_SetData final
{
public:
	struct FOfferingViewData                      OfferingViewData;                                  // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OfferingViewInterface_SetData) == 0x000008, "Wrong alignment on OfferingViewInterface_SetData");
static_assert(sizeof(OfferingViewInterface_SetData) == 0x000070, "Wrong size on OfferingViewInterface_SetData");
static_assert(offsetof(OfferingViewInterface_SetData, OfferingViewData) == 0x000000, "Member 'OfferingViewInterface_SetData::OfferingViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetBackButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetBackButtonVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetBackButtonVisible) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetBackButtonVisible");
static_assert(sizeof(OnboardingMenuViewInterface_SetBackButtonVisible) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetBackButtonVisible");
static_assert(offsetof(OnboardingMenuViewInterface_SetBackButtonVisible, Visible) == 0x000000, "Member 'OnboardingMenuViewInterface_SetBackButtonVisible::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetChangeAccountInputSwitcherPlayerNickname
// 0x0010 (0x0010 - 0x0000)
struct OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname final
{
public:
	class FString                                 PlayerNickname;                                    // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname) == 0x000008, "Wrong alignment on OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname");
static_assert(sizeof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname) == 0x000010, "Wrong size on OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname");
static_assert(offsetof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname, PlayerNickname) == 0x000000, "Member 'OnboardingMenuViewInterface_SetChangeAccountInputSwitcherPlayerNickname::PlayerNickname' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetChangeAccountInputSwitcherVisible
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible");
static_assert(sizeof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible");
static_assert(offsetof(OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible, Visible) == 0x000000, "Member 'OnboardingMenuViewInterface_SetChangeAccountInputSwitcherVisible::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetFirstTimeUserExperience
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetFirstTimeUserExperience final
{
public:
	bool                                          Ftue;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetFirstTimeUserExperience) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetFirstTimeUserExperience");
static_assert(sizeof(OnboardingMenuViewInterface_SetFirstTimeUserExperience) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetFirstTimeUserExperience");
static_assert(offsetof(OnboardingMenuViewInterface_SetFirstTimeUserExperience, Ftue) == 0x000000, "Member 'OnboardingMenuViewInterface_SetFirstTimeUserExperience::Ftue' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetOnboardingMenuState
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetOnboardingMenuState final
{
public:
	EOnboardingMenuState                          MenuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetOnboardingMenuState) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetOnboardingMenuState");
static_assert(sizeof(OnboardingMenuViewInterface_SetOnboardingMenuState) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetOnboardingMenuState");
static_assert(offsetof(OnboardingMenuViewInterface_SetOnboardingMenuState, MenuState) == 0x000000, "Member 'OnboardingMenuViewInterface_SetOnboardingMenuState::MenuState' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetQuitGameButtonVisible
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetQuitGameButtonVisible final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetQuitGameButtonVisible) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetQuitGameButtonVisible");
static_assert(sizeof(OnboardingMenuViewInterface_SetQuitGameButtonVisible) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetQuitGameButtonVisible");
static_assert(offsetof(OnboardingMenuViewInterface_SetQuitGameButtonVisible, Visible) == 0x000000, "Member 'OnboardingMenuViewInterface_SetQuitGameButtonVisible::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.SetUIEnabled
// 0x0001 (0x0001 - 0x0000)
struct OnboardingMenuViewInterface_SetUIEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_SetUIEnabled) == 0x000001, "Wrong alignment on OnboardingMenuViewInterface_SetUIEnabled");
static_assert(sizeof(OnboardingMenuViewInterface_SetUIEnabled) == 0x000001, "Wrong size on OnboardingMenuViewInterface_SetUIEnabled");
static_assert(offsetof(OnboardingMenuViewInterface_SetUIEnabled, Enabled) == 0x000000, "Member 'OnboardingMenuViewInterface_SetUIEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.GetGameManualInterface
// 0x0010 (0x0010 - 0x0000)
struct OnboardingMenuViewInterface_GetGameManualInterface final
{
public:
	TScriptInterface<class IGameManualViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_GetGameManualInterface) == 0x000008, "Wrong alignment on OnboardingMenuViewInterface_GetGameManualInterface");
static_assert(sizeof(OnboardingMenuViewInterface_GetGameManualInterface) == 0x000010, "Wrong size on OnboardingMenuViewInterface_GetGameManualInterface");
static_assert(offsetof(OnboardingMenuViewInterface_GetGameManualInterface, ReturnValue) == 0x000000, "Member 'OnboardingMenuViewInterface_GetGameManualInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingMenuViewInterface.GetOnboardingTutorialInterface
// 0x0010 (0x0010 - 0x0000)
struct OnboardingMenuViewInterface_GetOnboardingTutorialInterface final
{
public:
	TScriptInterface<class IOnboardingTutorialViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingMenuViewInterface_GetOnboardingTutorialInterface) == 0x000008, "Wrong alignment on OnboardingMenuViewInterface_GetOnboardingTutorialInterface");
static_assert(sizeof(OnboardingMenuViewInterface_GetOnboardingTutorialInterface) == 0x000010, "Wrong size on OnboardingMenuViewInterface_GetOnboardingTutorialInterface");
static_assert(offsetof(OnboardingMenuViewInterface_GetOnboardingTutorialInterface, ReturnValue) == 0x000000, "Member 'OnboardingMenuViewInterface_GetOnboardingTutorialInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetCanShowGoToMainMenuTutorialButton
// 0x0001 (0x0001 - 0x0000)
struct OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton final
{
public:
	bool                                          CanShowGoToMainMenuTutorialButton;                 // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton) == 0x000001, "Wrong alignment on OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton");
static_assert(sizeof(OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton) == 0x000001, "Wrong size on OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton");
static_assert(offsetof(OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton, CanShowGoToMainMenuTutorialButton) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetCanShowGoToMainMenuTutorialButton::CanShowGoToMainMenuTutorialButton' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetIsKillSwitch
// 0x0001 (0x0001 - 0x0000)
struct OnboardingTutorialViewInterface_SetIsKillSwitch final
{
public:
	bool                                          IsKillSwitch;                                      // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_SetIsKillSwitch) == 0x000001, "Wrong alignment on OnboardingTutorialViewInterface_SetIsKillSwitch");
static_assert(sizeof(OnboardingTutorialViewInterface_SetIsKillSwitch) == 0x000001, "Wrong size on OnboardingTutorialViewInterface_SetIsKillSwitch");
static_assert(offsetof(OnboardingTutorialViewInterface_SetIsKillSwitch, IsKillSwitch) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetIsKillSwitch::IsKillSwitch' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetProgress
// 0x0010 (0x0010 - 0x0000)
struct OnboardingTutorialViewInterface_SetProgress final
{
public:
	TArray<struct FOnboardingStepViewData>        Progress;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_SetProgress) == 0x000008, "Wrong alignment on OnboardingTutorialViewInterface_SetProgress");
static_assert(sizeof(OnboardingTutorialViewInterface_SetProgress) == 0x000010, "Wrong size on OnboardingTutorialViewInterface_SetProgress");
static_assert(offsetof(OnboardingTutorialViewInterface_SetProgress, Progress) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetProgress::Progress' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetTutorialProgressionFeedbacks
// 0x0018 (0x0018 - 0x0000)
struct OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks final
{
public:
	class FString                                 CompletedStepId;                                   // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOnboardingEnabled;                               // 0x0010(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks) == 0x000008, "Wrong alignment on OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks");
static_assert(sizeof(OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks) == 0x000018, "Wrong size on OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks");
static_assert(offsetof(OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks, CompletedStepId) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks::CompletedStepId' has a wrong offset!");
static_assert(offsetof(OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks, IsOnboardingEnabled) == 0x000010, "Member 'OnboardingTutorialViewInterface_SetTutorialProgressionFeedbacks::IsOnboardingEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.SetUIEnabled
// 0x0001 (0x0001 - 0x0000)
struct OnboardingTutorialViewInterface_SetUIEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_SetUIEnabled) == 0x000001, "Wrong alignment on OnboardingTutorialViewInterface_SetUIEnabled");
static_assert(sizeof(OnboardingTutorialViewInterface_SetUIEnabled) == 0x000001, "Wrong size on OnboardingTutorialViewInterface_SetUIEnabled");
static_assert(offsetof(OnboardingTutorialViewInterface_SetUIEnabled, Enabled) == 0x000000, "Member 'OnboardingTutorialViewInterface_SetUIEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.OnboardingTutorialViewInterface.UpdateProgress
// 0x0030 (0x0030 - 0x0000)
struct OnboardingTutorialViewInterface_UpdateProgress final
{
public:
	TArray<struct FOnboardingStepViewData>        before;                                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FOnboardingStepViewData>        After;                                             // 0x0010(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	TArray<struct FRewardWrapperViewData>         Rewards;                                           // 0x0020(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(OnboardingTutorialViewInterface_UpdateProgress) == 0x000008, "Wrong alignment on OnboardingTutorialViewInterface_UpdateProgress");
static_assert(sizeof(OnboardingTutorialViewInterface_UpdateProgress) == 0x000030, "Wrong size on OnboardingTutorialViewInterface_UpdateProgress");
static_assert(offsetof(OnboardingTutorialViewInterface_UpdateProgress, before) == 0x000000, "Member 'OnboardingTutorialViewInterface_UpdateProgress::before' has a wrong offset!");
static_assert(offsetof(OnboardingTutorialViewInterface_UpdateProgress, After) == 0x000010, "Member 'OnboardingTutorialViewInterface_UpdateProgress::After' has a wrong offset!");
static_assert(offsetof(OnboardingTutorialViewInterface_UpdateProgress, Rewards) == 0x000020, "Member 'OnboardingTutorialViewInterface_UpdateProgress::Rewards' has a wrong offset!");

// Function DBDUIViewInterfaces.PerkViewInterface.SetData
// 0x0070 (0x0070 - 0x0000)
struct PerkViewInterface_SetData final
{
public:
	struct FPerkViewData                          PerkViewData;                                      // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkViewInterface_SetData) == 0x000008, "Wrong alignment on PerkViewInterface_SetData");
static_assert(sizeof(PerkViewInterface_SetData) == 0x000070, "Wrong size on PerkViewInterface_SetData");
static_assert(offsetof(PerkViewInterface_SetData, PerkViewData) == 0x000000, "Member 'PerkViewInterface_SetData::PerkViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.PerkViewInterface.TriggerRandomSuccess
// 0x000C (0x000C - 0x0000)
struct PerkViewInterface_TriggerRandomSuccess final
{
public:
	struct FPerkRandomSuccessViewData             RandomSuccessViewData;                             // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(PerkViewInterface_TriggerRandomSuccess) == 0x000004, "Wrong alignment on PerkViewInterface_TriggerRandomSuccess");
static_assert(sizeof(PerkViewInterface_TriggerRandomSuccess) == 0x00000C, "Wrong size on PerkViewInterface_TriggerRandomSuccess");
static_assert(offsetof(PerkViewInterface_TriggerRandomSuccess, RandomSuccessViewData) == 0x000000, "Member 'PerkViewInterface_TriggerRandomSuccess::RandomSuccessViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.PerkViewInterface.UpdatePerkCooldown
// 0x0008 (0x0008 - 0x0000)
struct PerkViewInterface_UpdatePerkCooldown final
{
public:
	float                                         CooldownValue;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeable;                                    // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsRechargeableActive;                              // 0x0005(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PerkViewInterface_UpdatePerkCooldown) == 0x000004, "Wrong alignment on PerkViewInterface_UpdatePerkCooldown");
static_assert(sizeof(PerkViewInterface_UpdatePerkCooldown) == 0x000008, "Wrong size on PerkViewInterface_UpdatePerkCooldown");
static_assert(offsetof(PerkViewInterface_UpdatePerkCooldown, CooldownValue) == 0x000000, "Member 'PerkViewInterface_UpdatePerkCooldown::CooldownValue' has a wrong offset!");
static_assert(offsetof(PerkViewInterface_UpdatePerkCooldown, IsRechargeable) == 0x000004, "Member 'PerkViewInterface_UpdatePerkCooldown::IsRechargeable' has a wrong offset!");
static_assert(offsetof(PerkViewInterface_UpdatePerkCooldown, IsRechargeableActive) == 0x000005, "Member 'PerkViewInterface_UpdatePerkCooldown::IsRechargeableActive' has a wrong offset!");

// Function DBDUIViewInterfaces.PingStatusViewInterface.InitPingStatus
// 0x0004 (0x0004 - 0x0000)
struct PingStatusViewInterface_InitPingStatus final
{
public:
	int32                                         NumberOfSurvivors;                                 // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingStatusViewInterface_InitPingStatus) == 0x000004, "Wrong alignment on PingStatusViewInterface_InitPingStatus");
static_assert(sizeof(PingStatusViewInterface_InitPingStatus) == 0x000004, "Wrong size on PingStatusViewInterface_InitPingStatus");
static_assert(offsetof(PingStatusViewInterface_InitPingStatus, NumberOfSurvivors) == 0x000000, "Member 'PingStatusViewInterface_InitPingStatus::NumberOfSurvivors' has a wrong offset!");

// Function DBDUIViewInterfaces.PingStatusViewInterface.SetKillerConnectionQualityStatus
// 0x0001 (0x0001 - 0x0000)
struct PingStatusViewInterface_SetKillerConnectionQualityStatus final
{
public:
	EConnectionQuality                            KillerConnectionQuality;                           // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingStatusViewInterface_SetKillerConnectionQualityStatus) == 0x000001, "Wrong alignment on PingStatusViewInterface_SetKillerConnectionQualityStatus");
static_assert(sizeof(PingStatusViewInterface_SetKillerConnectionQualityStatus) == 0x000001, "Wrong size on PingStatusViewInterface_SetKillerConnectionQualityStatus");
static_assert(offsetof(PingStatusViewInterface_SetKillerConnectionQualityStatus, KillerConnectionQuality) == 0x000000, "Member 'PingStatusViewInterface_SetKillerConnectionQualityStatus::KillerConnectionQuality' has a wrong offset!");

// Function DBDUIViewInterfaces.PingStatusViewInterface.SetLocalPacketLossStatus
// 0x0001 (0x0001 - 0x0000)
struct PingStatusViewInterface_SetLocalPacketLossStatus final
{
public:
	EConnectionQuality                            LocalPacketLoss;                                   // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingStatusViewInterface_SetLocalPacketLossStatus) == 0x000001, "Wrong alignment on PingStatusViewInterface_SetLocalPacketLossStatus");
static_assert(sizeof(PingStatusViewInterface_SetLocalPacketLossStatus) == 0x000001, "Wrong size on PingStatusViewInterface_SetLocalPacketLossStatus");
static_assert(offsetof(PingStatusViewInterface_SetLocalPacketLossStatus, LocalPacketLoss) == 0x000000, "Member 'PingStatusViewInterface_SetLocalPacketLossStatus::LocalPacketLoss' has a wrong offset!");

// Function DBDUIViewInterfaces.PingStatusViewInterface.SetLocalPingStatus
// 0x0001 (0x0001 - 0x0000)
struct PingStatusViewInterface_SetLocalPingStatus final
{
public:
	EConnectionQuality                            LocalPing;                                         // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PingStatusViewInterface_SetLocalPingStatus) == 0x000001, "Wrong alignment on PingStatusViewInterface_SetLocalPingStatus");
static_assert(sizeof(PingStatusViewInterface_SetLocalPingStatus) == 0x000001, "Wrong size on PingStatusViewInterface_SetLocalPingStatus");
static_assert(offsetof(PingStatusViewInterface_SetLocalPingStatus, LocalPing) == 0x000000, "Member 'PingStatusViewInterface_SetLocalPingStatus::LocalPing' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerCardAnimationViewInterface.SetRetainerBoxMaterial
// 0x0038 (0x0038 - 0x0000)
struct PlayerCardAnimationViewInterface_SetRetainerBoxMaterial final
{
public:
	TSoftObjectPtr<class UTexture2D>              bannerTexture;                                     // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCardAnimationViewInterface_SetRetainerBoxMaterial) == 0x000008, "Wrong alignment on PlayerCardAnimationViewInterface_SetRetainerBoxMaterial");
static_assert(sizeof(PlayerCardAnimationViewInterface_SetRetainerBoxMaterial) == 0x000038, "Wrong size on PlayerCardAnimationViewInterface_SetRetainerBoxMaterial");
static_assert(offsetof(PlayerCardAnimationViewInterface_SetRetainerBoxMaterial, bannerTexture) == 0x000000, "Member 'PlayerCardAnimationViewInterface_SetRetainerBoxMaterial::bannerTexture' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerCardAnimationViewInterface.SetRetainerBoxOpacity
// 0x0004 (0x0004 - 0x0000)
struct PlayerCardAnimationViewInterface_SetRetainerBoxOpacity final
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCardAnimationViewInterface_SetRetainerBoxOpacity) == 0x000004, "Wrong alignment on PlayerCardAnimationViewInterface_SetRetainerBoxOpacity");
static_assert(sizeof(PlayerCardAnimationViewInterface_SetRetainerBoxOpacity) == 0x000004, "Wrong size on PlayerCardAnimationViewInterface_SetRetainerBoxOpacity");
static_assert(offsetof(PlayerCardAnimationViewInterface_SetRetainerBoxOpacity, Opacity) == 0x000000, "Member 'PlayerCardAnimationViewInterface_SetRetainerBoxOpacity::Opacity' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerCardViewInterface.SetData
// 0x00A8 (0x00A8 - 0x0000)
struct PlayerCardViewInterface_SetData final
{
public:
	struct FPlayerCardViewData                    PlayerCardData;                                    // 0x0000(0x00A8)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerCardViewInterface_SetData) == 0x000008, "Wrong alignment on PlayerCardViewInterface_SetData");
static_assert(sizeof(PlayerCardViewInterface_SetData) == 0x0000A8, "Wrong size on PlayerCardViewInterface_SetData");
static_assert(offsetof(PlayerCardViewInterface_SetData, PlayerCardData) == 0x000000, "Member 'PlayerCardViewInterface_SetData::PlayerCardData' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.FullUpdateCurrency
// 0x0148 (0x0148 - 0x0000)
struct PlayerProfileViewInterface_FullUpdateCurrency final
{
public:
	struct FCurrencyLabelViewData                 ViewData;                                          // 0x0000(0x0148)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_FullUpdateCurrency) == 0x000008, "Wrong alignment on PlayerProfileViewInterface_FullUpdateCurrency");
static_assert(sizeof(PlayerProfileViewInterface_FullUpdateCurrency) == 0x000148, "Wrong size on PlayerProfileViewInterface_FullUpdateCurrency");
static_assert(offsetof(PlayerProfileViewInterface_FullUpdateCurrency, ViewData) == 0x000000, "Member 'PlayerProfileViewInterface_FullUpdateCurrency::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerCard
// 0x0150 (0x0150 - 0x0000)
struct PlayerProfileViewInterface_SetPlayerCard final
{
public:
	struct FPlayerCardViewData                    Badge;                                             // 0x0000(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPlayerCardViewData                    Banner;                                            // 0x00A8(0x00A8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_SetPlayerCard) == 0x000008, "Wrong alignment on PlayerProfileViewInterface_SetPlayerCard");
static_assert(sizeof(PlayerProfileViewInterface_SetPlayerCard) == 0x000150, "Wrong size on PlayerProfileViewInterface_SetPlayerCard");
static_assert(offsetof(PlayerProfileViewInterface_SetPlayerCard, Badge) == 0x000000, "Member 'PlayerProfileViewInterface_SetPlayerCard::Badge' has a wrong offset!");
static_assert(offsetof(PlayerProfileViewInterface_SetPlayerCard, Banner) == 0x0000A8, "Member 'PlayerProfileViewInterface_SetPlayerCard::Banner' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerCardAnimationMode
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfileViewInterface_SetPlayerCardAnimationMode final
{
public:
	EPlayerCardAnimationMode                      PlayerCardAnimationMode;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_SetPlayerCardAnimationMode) == 0x000001, "Wrong alignment on PlayerProfileViewInterface_SetPlayerCardAnimationMode");
static_assert(sizeof(PlayerProfileViewInterface_SetPlayerCardAnimationMode) == 0x000001, "Wrong size on PlayerProfileViewInterface_SetPlayerCardAnimationMode");
static_assert(offsetof(PlayerProfileViewInterface_SetPlayerCardAnimationMode, PlayerCardAnimationMode) == 0x000000, "Member 'PlayerProfileViewInterface_SetPlayerCardAnimationMode::PlayerCardAnimationMode' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerCardBannerOpacity
// 0x0004 (0x0004 - 0x0000)
struct PlayerProfileViewInterface_SetPlayerCardBannerOpacity final
{
public:
	float                                         Opacity;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_SetPlayerCardBannerOpacity) == 0x000004, "Wrong alignment on PlayerProfileViewInterface_SetPlayerCardBannerOpacity");
static_assert(sizeof(PlayerProfileViewInterface_SetPlayerCardBannerOpacity) == 0x000004, "Wrong size on PlayerProfileViewInterface_SetPlayerCardBannerOpacity");
static_assert(offsetof(PlayerProfileViewInterface_SetPlayerCardBannerOpacity, Opacity) == 0x000000, "Member 'PlayerProfileViewInterface_SetPlayerCardBannerOpacity::Opacity' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerName
// 0x0018 (0x0018 - 0x0000)
struct PlayerProfileViewInterface_SetPlayerName final
{
public:
	class FText                                   PlayerNameText;                                    // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_SetPlayerName) == 0x000008, "Wrong alignment on PlayerProfileViewInterface_SetPlayerName");
static_assert(sizeof(PlayerProfileViewInterface_SetPlayerName) == 0x000018, "Wrong size on PlayerProfileViewInterface_SetPlayerName");
static_assert(offsetof(PlayerProfileViewInterface_SetPlayerName, PlayerNameText) == 0x000000, "Member 'PlayerProfileViewInterface_SetPlayerName::PlayerNameText' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetPlayerProfileEnabled
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfileViewInterface_SetPlayerProfileEnabled final
{
public:
	bool                                          IsEnabled;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_SetPlayerProfileEnabled) == 0x000001, "Wrong alignment on PlayerProfileViewInterface_SetPlayerProfileEnabled");
static_assert(sizeof(PlayerProfileViewInterface_SetPlayerProfileEnabled) == 0x000001, "Wrong size on PlayerProfileViewInterface_SetPlayerProfileEnabled");
static_assert(offsetof(PlayerProfileViewInterface_SetPlayerProfileEnabled, IsEnabled) == 0x000000, "Member 'PlayerProfileViewInterface_SetPlayerProfileEnabled::IsEnabled' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetWalletData
// 0x0010 (0x0010 - 0x0000)
struct PlayerProfileViewInterface_SetWalletData final
{
public:
	TArray<struct FCurrencyLabelViewData>         WalletData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_SetWalletData) == 0x000008, "Wrong alignment on PlayerProfileViewInterface_SetWalletData");
static_assert(sizeof(PlayerProfileViewInterface_SetWalletData) == 0x000010, "Wrong size on PlayerProfileViewInterface_SetWalletData");
static_assert(offsetof(PlayerProfileViewInterface_SetWalletData, WalletData) == 0x000000, "Member 'PlayerProfileViewInterface_SetWalletData::WalletData' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.SetWalletVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfileViewInterface_SetWalletVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_SetWalletVisibility) == 0x000001, "Wrong alignment on PlayerProfileViewInterface_SetWalletVisibility");
static_assert(sizeof(PlayerProfileViewInterface_SetWalletVisibility) == 0x000001, "Wrong size on PlayerProfileViewInterface_SetWalletVisibility");
static_assert(offsetof(PlayerProfileViewInterface_SetWalletVisibility, IsVisible) == 0x000000, "Member 'PlayerProfileViewInterface_SetWalletVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.UpdatePlayerCardButton
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfileViewInterface_UpdatePlayerCardButton final
{
public:
	bool                                          IsProfileMenuContextEntered;                       // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_UpdatePlayerCardButton) == 0x000001, "Wrong alignment on PlayerProfileViewInterface_UpdatePlayerCardButton");
static_assert(sizeof(PlayerProfileViewInterface_UpdatePlayerCardButton) == 0x000001, "Wrong size on PlayerProfileViewInterface_UpdatePlayerCardButton");
static_assert(offsetof(PlayerProfileViewInterface_UpdatePlayerCardButton, IsProfileMenuContextEntered) == 0x000000, "Member 'PlayerProfileViewInterface_UpdatePlayerCardButton::IsProfileMenuContextEntered' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.UpdatePlayerProfileOpacity
// 0x0001 (0x0001 - 0x0000)
struct PlayerProfileViewInterface_UpdatePlayerProfileOpacity final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_UpdatePlayerProfileOpacity) == 0x000001, "Wrong alignment on PlayerProfileViewInterface_UpdatePlayerProfileOpacity");
static_assert(sizeof(PlayerProfileViewInterface_UpdatePlayerProfileOpacity) == 0x000001, "Wrong size on PlayerProfileViewInterface_UpdatePlayerProfileOpacity");
static_assert(offsetof(PlayerProfileViewInterface_UpdatePlayerProfileOpacity, IsFocused) == 0x000000, "Member 'PlayerProfileViewInterface_UpdatePlayerProfileOpacity::IsFocused' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerProfileViewInterface.UpdateWallet
// 0x000C (0x000C - 0x0000)
struct PlayerProfileViewInterface_UpdateWallet final
{
public:
	ECurrencyType                                 Type;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NewBalance;                                        // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PreviousBalance;                                   // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerProfileViewInterface_UpdateWallet) == 0x000004, "Wrong alignment on PlayerProfileViewInterface_UpdateWallet");
static_assert(sizeof(PlayerProfileViewInterface_UpdateWallet) == 0x00000C, "Wrong size on PlayerProfileViewInterface_UpdateWallet");
static_assert(offsetof(PlayerProfileViewInterface_UpdateWallet, Type) == 0x000000, "Member 'PlayerProfileViewInterface_UpdateWallet::Type' has a wrong offset!");
static_assert(offsetof(PlayerProfileViewInterface_UpdateWallet, NewBalance) == 0x000004, "Member 'PlayerProfileViewInterface_UpdateWallet::NewBalance' has a wrong offset!");
static_assert(offsetof(PlayerProfileViewInterface_UpdateWallet, PreviousBalance) == 0x000008, "Member 'PlayerProfileViewInterface_UpdateWallet::PreviousBalance' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusesContainerViewInterface.GetPlayerStatusInterface
// 0x0018 (0x0018 - 0x0000)
struct PlayerStatusesContainerViewInterface_GetPlayerStatusInterface final
{
public:
	int32                                         Param_Index;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IPlayerStatusViewInterface> ReturnValue;                                       // 0x0008(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusesContainerViewInterface_GetPlayerStatusInterface) == 0x000008, "Wrong alignment on PlayerStatusesContainerViewInterface_GetPlayerStatusInterface");
static_assert(sizeof(PlayerStatusesContainerViewInterface_GetPlayerStatusInterface) == 0x000018, "Wrong size on PlayerStatusesContainerViewInterface_GetPlayerStatusInterface");
static_assert(offsetof(PlayerStatusesContainerViewInterface_GetPlayerStatusInterface, Param_Index) == 0x000000, "Member 'PlayerStatusesContainerViewInterface_GetPlayerStatusInterface::Param_Index' has a wrong offset!");
static_assert(offsetof(PlayerStatusesContainerViewInterface_GetPlayerStatusInterface, ReturnValue) == 0x000008, "Member 'PlayerStatusesContainerViewInterface_GetPlayerStatusInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusesContainerViewInterface.SetPlayerStatusesCount
// 0x0004 (0x0004 - 0x0000)
struct PlayerStatusesContainerViewInterface_SetPlayerStatusesCount final
{
public:
	int32                                         TotalCount;                                        // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusesContainerViewInterface_SetPlayerStatusesCount) == 0x000004, "Wrong alignment on PlayerStatusesContainerViewInterface_SetPlayerStatusesCount");
static_assert(sizeof(PlayerStatusesContainerViewInterface_SetPlayerStatusesCount) == 0x000004, "Wrong size on PlayerStatusesContainerViewInterface_SetPlayerStatusesCount");
static_assert(offsetof(PlayerStatusesContainerViewInterface_SetPlayerStatusesCount, TotalCount) == 0x000000, "Member 'PlayerStatusesContainerViewInterface_SetPlayerStatusesCount::TotalCount' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.DimObsessionAndChaseClaws
// 0x0002 (0x0002 - 0x0000)
struct PlayerStatusViewInterface_DimObsessionAndChaseClaws final
{
public:
	bool                                          DisableLeftClaw;                                   // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DisableRightClaw;                                  // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_DimObsessionAndChaseClaws) == 0x000001, "Wrong alignment on PlayerStatusViewInterface_DimObsessionAndChaseClaws");
static_assert(sizeof(PlayerStatusViewInterface_DimObsessionAndChaseClaws) == 0x000002, "Wrong size on PlayerStatusViewInterface_DimObsessionAndChaseClaws");
static_assert(offsetof(PlayerStatusViewInterface_DimObsessionAndChaseClaws, DisableLeftClaw) == 0x000000, "Member 'PlayerStatusViewInterface_DimObsessionAndChaseClaws::DisableLeftClaw' has a wrong offset!");
static_assert(offsetof(PlayerStatusViewInterface_DimObsessionAndChaseClaws, DisableRightClaw) == 0x000001, "Member 'PlayerStatusViewInterface_DimObsessionAndChaseClaws::DisableRightClaw' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.EnableChasesMode
// 0x0001 (0x0001 - 0x0000)
struct PlayerStatusViewInterface_EnableChasesMode final
{
public:
	bool                                          IsChased;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_EnableChasesMode) == 0x000001, "Wrong alignment on PlayerStatusViewInterface_EnableChasesMode");
static_assert(sizeof(PlayerStatusViewInterface_EnableChasesMode) == 0x000001, "Wrong size on PlayerStatusViewInterface_EnableChasesMode");
static_assert(offsetof(PlayerStatusViewInterface_EnableChasesMode, IsChased) == 0x000000, "Member 'PlayerStatusViewInterface_EnableChasesMode::IsChased' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetCampProgress
// 0x0008 (0x0008 - 0x0000)
struct PlayerStatusViewInterface_SetCampProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLocalPlayerAKiller;                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStatusViewInterface_SetCampProgress) == 0x000004, "Wrong alignment on PlayerStatusViewInterface_SetCampProgress");
static_assert(sizeof(PlayerStatusViewInterface_SetCampProgress) == 0x000008, "Wrong size on PlayerStatusViewInterface_SetCampProgress");
static_assert(offsetof(PlayerStatusViewInterface_SetCampProgress, Value) == 0x000000, "Member 'PlayerStatusViewInterface_SetCampProgress::Value' has a wrong offset!");
static_assert(offsetof(PlayerStatusViewInterface_SetCampProgress, IsLocalPlayerAKiller) == 0x000004, "Member 'PlayerStatusViewInterface_SetCampProgress::IsLocalPlayerAKiller' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetData
// 0x0098 (0x0098 - 0x0000)
struct PlayerStatusViewInterface_SetData final
{
public:
	struct FPlayerStatusViewData                  Data;                                              // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_SetData) == 0x000008, "Wrong alignment on PlayerStatusViewInterface_SetData");
static_assert(sizeof(PlayerStatusViewInterface_SetData) == 0x000098, "Wrong size on PlayerStatusViewInterface_SetData");
static_assert(offsetof(PlayerStatusViewInterface_SetData, Data) == 0x000000, "Member 'PlayerStatusViewInterface_SetData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetKiller
// 0x000C (0x000C - 0x0000)
struct PlayerStatusViewInterface_SetKiller final
{
public:
	struct FGameplayTag                           KillerTag;                                         // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_SetKiller) == 0x000004, "Wrong alignment on PlayerStatusViewInterface_SetKiller");
static_assert(sizeof(PlayerStatusViewInterface_SetKiller) == 0x00000C, "Wrong size on PlayerStatusViewInterface_SetKiller");
static_assert(offsetof(PlayerStatusViewInterface_SetKiller, KillerTag) == 0x000000, "Member 'PlayerStatusViewInterface_SetKiller::KillerTag' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetPlayerNameVisibility
// 0x0001 (0x0001 - 0x0000)
struct PlayerStatusViewInterface_SetPlayerNameVisibility final
{
public:
	bool                                          Visible;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_SetPlayerNameVisibility) == 0x000001, "Wrong alignment on PlayerStatusViewInterface_SetPlayerNameVisibility");
static_assert(sizeof(PlayerStatusViewInterface_SetPlayerNameVisibility) == 0x000001, "Wrong size on PlayerStatusViewInterface_SetPlayerNameVisibility");
static_assert(offsetof(PlayerStatusViewInterface_SetPlayerNameVisibility, Visible) == 0x000000, "Member 'PlayerStatusViewInterface_SetPlayerNameVisibility::Visible' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.SetTimerProgress
// 0x0008 (0x0008 - 0x0000)
struct PlayerStatusViewInterface_SetTimerProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsDeepWound;                                       // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStatusViewInterface_SetTimerProgress) == 0x000004, "Wrong alignment on PlayerStatusViewInterface_SetTimerProgress");
static_assert(sizeof(PlayerStatusViewInterface_SetTimerProgress) == 0x000008, "Wrong size on PlayerStatusViewInterface_SetTimerProgress");
static_assert(offsetof(PlayerStatusViewInterface_SetTimerProgress, Value) == 0x000000, "Member 'PlayerStatusViewInterface_SetTimerProgress::Value' has a wrong offset!");
static_assert(offsetof(PlayerStatusViewInterface_SetTimerProgress, IsDeepWound) == 0x000004, "Member 'PlayerStatusViewInterface_SetTimerProgress::IsDeepWound' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.ShowSurvivorActivity
// 0x0040 (0x0040 - 0x0000)
struct PlayerStatusViewInterface_ShowSurvivorActivity final
{
public:
	TSoftObjectPtr<class UTexture2D>              ActivityIcon;                                      // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldDisplayProgress;                             // 0x0038(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PlayerStatusViewInterface_ShowSurvivorActivity) == 0x000008, "Wrong alignment on PlayerStatusViewInterface_ShowSurvivorActivity");
static_assert(sizeof(PlayerStatusViewInterface_ShowSurvivorActivity) == 0x000040, "Wrong size on PlayerStatusViewInterface_ShowSurvivorActivity");
static_assert(offsetof(PlayerStatusViewInterface_ShowSurvivorActivity, ActivityIcon) == 0x000000, "Member 'PlayerStatusViewInterface_ShowSurvivorActivity::ActivityIcon' has a wrong offset!");
static_assert(offsetof(PlayerStatusViewInterface_ShowSurvivorActivity, ShouldDisplayProgress) == 0x000038, "Member 'PlayerStatusViewInterface_ShowSurvivorActivity::ShouldDisplayProgress' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.UpdateSurvivorActivityProgress
// 0x0004 (0x0004 - 0x0000)
struct PlayerStatusViewInterface_UpdateSurvivorActivityProgress final
{
public:
	float                                         Progress;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_UpdateSurvivorActivityProgress) == 0x000004, "Wrong alignment on PlayerStatusViewInterface_UpdateSurvivorActivityProgress");
static_assert(sizeof(PlayerStatusViewInterface_UpdateSurvivorActivityProgress) == 0x000004, "Wrong size on PlayerStatusViewInterface_UpdateSurvivorActivityProgress");
static_assert(offsetof(PlayerStatusViewInterface_UpdateSurvivorActivityProgress, Progress) == 0x000000, "Member 'PlayerStatusViewInterface_UpdateSurvivorActivityProgress::Progress' has a wrong offset!");

// Function DBDUIViewInterfaces.PlayerStatusViewInterface.UpdateSurvivorSpecificPingIcon
// 0x0001 (0x0001 - 0x0000)
struct PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon final
{
public:
	EConnectionQuality                            ConnectionQuality;                                 // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon) == 0x000001, "Wrong alignment on PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon");
static_assert(sizeof(PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon) == 0x000001, "Wrong size on PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon");
static_assert(offsetof(PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon, ConnectionQuality) == 0x000000, "Member 'PlayerStatusViewInterface_UpdateSurvivorSpecificPingIcon::ConnectionQuality' has a wrong offset!");

// Function DBDUIViewInterfaces.PowerViewInterface.SetData
// 0x0128 (0x0128 - 0x0000)
struct PowerViewInterface_SetData final
{
public:
	struct FPowerViewData                         PowerViewData;                                     // 0x0000(0x0128)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(PowerViewInterface_SetData) == 0x000008, "Wrong alignment on PowerViewInterface_SetData");
static_assert(sizeof(PowerViewInterface_SetData) == 0x000128, "Wrong size on PowerViewInterface_SetData");
static_assert(offsetof(PowerViewInterface_SetData, PowerViewData) == 0x000000, "Member 'PowerViewInterface_SetData::PowerViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuStatsViewInterface.SetPlayerLevel
// 0x0018 (0x0018 - 0x0000)
struct ProfileMenuStatsViewInterface_SetPlayerLevel final
{
public:
	struct FPlayerLevelViewData                   ViewData;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuStatsViewInterface_SetPlayerLevel) == 0x000004, "Wrong alignment on ProfileMenuStatsViewInterface_SetPlayerLevel");
static_assert(sizeof(ProfileMenuStatsViewInterface_SetPlayerLevel) == 0x000018, "Wrong size on ProfileMenuStatsViewInterface_SetPlayerLevel");
static_assert(offsetof(ProfileMenuStatsViewInterface_SetPlayerLevel, ViewData) == 0x000000, "Member 'ProfileMenuStatsViewInterface_SetPlayerLevel::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuStatsViewInterface.SetPlayerRanks
// 0x0050 (0x0050 - 0x0000)
struct ProfileMenuStatsViewInterface_SetPlayerRanks final
{
public:
	struct FRankViewData                          SurvivorViewData;                                  // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRankViewData                          KillerViewData;                                    // 0x0028(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuStatsViewInterface_SetPlayerRanks) == 0x000008, "Wrong alignment on ProfileMenuStatsViewInterface_SetPlayerRanks");
static_assert(sizeof(ProfileMenuStatsViewInterface_SetPlayerRanks) == 0x000050, "Wrong size on ProfileMenuStatsViewInterface_SetPlayerRanks");
static_assert(offsetof(ProfileMenuStatsViewInterface_SetPlayerRanks, SurvivorViewData) == 0x000000, "Member 'ProfileMenuStatsViewInterface_SetPlayerRanks::SurvivorViewData' has a wrong offset!");
static_assert(offsetof(ProfileMenuStatsViewInterface_SetPlayerRanks, KillerViewData) == 0x000028, "Member 'ProfileMenuStatsViewInterface_SetPlayerRanks::KillerViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetIsFocused
// 0x0001 (0x0001 - 0x0000)
struct ProfileMenuViewInterface_SetIsFocused final
{
public:
	bool                                          IsFocused;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuViewInterface_SetIsFocused) == 0x000001, "Wrong alignment on ProfileMenuViewInterface_SetIsFocused");
static_assert(sizeof(ProfileMenuViewInterface_SetIsFocused) == 0x000001, "Wrong size on ProfileMenuViewInterface_SetIsFocused");
static_assert(offsetof(ProfileMenuViewInterface_SetIsFocused, IsFocused) == 0x000000, "Member 'ProfileMenuViewInterface_SetIsFocused::IsFocused' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct ProfileMenuViewInterface_SetMenuState final
{
public:
	EProfileMenuState                             MenuState;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuViewInterface_SetMenuState) == 0x000001, "Wrong alignment on ProfileMenuViewInterface_SetMenuState");
static_assert(sizeof(ProfileMenuViewInterface_SetMenuState) == 0x000001, "Wrong size on ProfileMenuViewInterface_SetMenuState");
static_assert(offsetof(ProfileMenuViewInterface_SetMenuState, MenuState) == 0x000000, "Member 'ProfileMenuViewInterface_SetMenuState::MenuState' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetSubtitle
// 0x0018 (0x0018 - 0x0000)
struct ProfileMenuViewInterface_SetSubtitle final
{
public:
	class FText                                   Subtitle;                                          // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuViewInterface_SetSubtitle) == 0x000008, "Wrong alignment on ProfileMenuViewInterface_SetSubtitle");
static_assert(sizeof(ProfileMenuViewInterface_SetSubtitle) == 0x000018, "Wrong size on ProfileMenuViewInterface_SetSubtitle");
static_assert(offsetof(ProfileMenuViewInterface_SetSubtitle, Subtitle) == 0x000000, "Member 'ProfileMenuViewInterface_SetSubtitle::Subtitle' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetTabEnabled
// 0x0008 (0x0008 - 0x0000)
struct ProfileMenuViewInterface_SetTabEnabled final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileMenuViewInterface_SetTabEnabled) == 0x000004, "Wrong alignment on ProfileMenuViewInterface_SetTabEnabled");
static_assert(sizeof(ProfileMenuViewInterface_SetTabEnabled) == 0x000008, "Wrong size on ProfileMenuViewInterface_SetTabEnabled");
static_assert(offsetof(ProfileMenuViewInterface_SetTabEnabled, Key) == 0x000000, "Member 'ProfileMenuViewInterface_SetTabEnabled::Key' has a wrong offset!");
static_assert(offsetof(ProfileMenuViewInterface_SetTabEnabled, Enabled) == 0x000004, "Member 'ProfileMenuViewInterface_SetTabEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetTabsData
// 0x0018 (0x0018 - 0x0000)
struct ProfileMenuViewInterface_SetTabsData final
{
public:
	TArray<struct FTabWidgetData>                 TabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedKey;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ProfileMenuViewInterface_SetTabsData) == 0x000008, "Wrong alignment on ProfileMenuViewInterface_SetTabsData");
static_assert(sizeof(ProfileMenuViewInterface_SetTabsData) == 0x000018, "Wrong size on ProfileMenuViewInterface_SetTabsData");
static_assert(offsetof(ProfileMenuViewInterface_SetTabsData, TabsData) == 0x000000, "Member 'ProfileMenuViewInterface_SetTabsData::TabsData' has a wrong offset!");
static_assert(offsetof(ProfileMenuViewInterface_SetTabsData, SelectedKey) == 0x000010, "Member 'ProfileMenuViewInterface_SetTabsData::SelectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetTabSelected
// 0x0004 (0x0004 - 0x0000)
struct ProfileMenuViewInterface_SetTabSelected final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuViewInterface_SetTabSelected) == 0x000004, "Wrong alignment on ProfileMenuViewInterface_SetTabSelected");
static_assert(sizeof(ProfileMenuViewInterface_SetTabSelected) == 0x000004, "Wrong size on ProfileMenuViewInterface_SetTabSelected");
static_assert(offsetof(ProfileMenuViewInterface_SetTabSelected, Key) == 0x000000, "Member 'ProfileMenuViewInterface_SetTabSelected::Key' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.SetTitle
// 0x0018 (0x0018 - 0x0000)
struct ProfileMenuViewInterface_SetTitle final
{
public:
	class FText                                   Title;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuViewInterface_SetTitle) == 0x000008, "Wrong alignment on ProfileMenuViewInterface_SetTitle");
static_assert(sizeof(ProfileMenuViewInterface_SetTitle) == 0x000018, "Wrong size on ProfileMenuViewInterface_SetTitle");
static_assert(offsetof(ProfileMenuViewInterface_SetTitle, Title) == 0x000000, "Member 'ProfileMenuViewInterface_SetTitle::Title' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.GetProfileMenuBadgeInterface
// 0x0010 (0x0010 - 0x0000)
struct ProfileMenuViewInterface_GetProfileMenuBadgeInterface final
{
public:
	TScriptInterface<class IProfileMenuCustomizationViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuViewInterface_GetProfileMenuBadgeInterface) == 0x000008, "Wrong alignment on ProfileMenuViewInterface_GetProfileMenuBadgeInterface");
static_assert(sizeof(ProfileMenuViewInterface_GetProfileMenuBadgeInterface) == 0x000010, "Wrong size on ProfileMenuViewInterface_GetProfileMenuBadgeInterface");
static_assert(offsetof(ProfileMenuViewInterface_GetProfileMenuBadgeInterface, ReturnValue) == 0x000000, "Member 'ProfileMenuViewInterface_GetProfileMenuBadgeInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.GetProfileMenuBannerInterface
// 0x0010 (0x0010 - 0x0000)
struct ProfileMenuViewInterface_GetProfileMenuBannerInterface final
{
public:
	TScriptInterface<class IProfileMenuCustomizationViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuViewInterface_GetProfileMenuBannerInterface) == 0x000008, "Wrong alignment on ProfileMenuViewInterface_GetProfileMenuBannerInterface");
static_assert(sizeof(ProfileMenuViewInterface_GetProfileMenuBannerInterface) == 0x000010, "Wrong size on ProfileMenuViewInterface_GetProfileMenuBannerInterface");
static_assert(offsetof(ProfileMenuViewInterface_GetProfileMenuBannerInterface, ReturnValue) == 0x000000, "Member 'ProfileMenuViewInterface_GetProfileMenuBannerInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ProfileMenuViewInterface.GetProfileMenuStatsInterface
// 0x0010 (0x0010 - 0x0000)
struct ProfileMenuViewInterface_GetProfileMenuStatsInterface final
{
public:
	TScriptInterface<class IProfileMenuStatsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ProfileMenuViewInterface_GetProfileMenuStatsInterface) == 0x000008, "Wrong alignment on ProfileMenuViewInterface_GetProfileMenuStatsInterface");
static_assert(sizeof(ProfileMenuViewInterface_GetProfileMenuStatsInterface) == 0x000010, "Wrong size on ProfileMenuViewInterface_GetProfileMenuStatsInterface");
static_assert(offsetof(ProfileMenuViewInterface_GetProfileMenuStatsInterface, ReturnValue) == 0x000000, "Member 'ProfileMenuViewInterface_GetProfileMenuStatsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.ScaleformTooltipViewInterface.OnLoadoutTooltipHovered
// 0x0110 (0x0110 - 0x0000)
struct ScaleformTooltipViewInterface_OnLoadoutTooltipHovered final
{
public:
	struct FTooltipTriggerGeometry                TriggeredGeometry;                                 // 0x0000(0x0060)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FLoadoutTooltipData                    TooltipData;                                       // 0x0060(0x00B0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ScaleformTooltipViewInterface_OnLoadoutTooltipHovered) == 0x000008, "Wrong alignment on ScaleformTooltipViewInterface_OnLoadoutTooltipHovered");
static_assert(sizeof(ScaleformTooltipViewInterface_OnLoadoutTooltipHovered) == 0x000110, "Wrong size on ScaleformTooltipViewInterface_OnLoadoutTooltipHovered");
static_assert(offsetof(ScaleformTooltipViewInterface_OnLoadoutTooltipHovered, TriggeredGeometry) == 0x000000, "Member 'ScaleformTooltipViewInterface_OnLoadoutTooltipHovered::TriggeredGeometry' has a wrong offset!");
static_assert(offsetof(ScaleformTooltipViewInterface_OnLoadoutTooltipHovered, TooltipData) == 0x000060, "Member 'ScaleformTooltipViewInterface_OnLoadoutTooltipHovered::TooltipData' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsViewInterface.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct SettingsViewInterface_SetMenuState final
{
public:
	EOverlayTabs                                  State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsViewInterface_SetMenuState) == 0x000001, "Wrong alignment on SettingsViewInterface_SetMenuState");
static_assert(sizeof(SettingsViewInterface_SetMenuState) == 0x000001, "Wrong size on SettingsViewInterface_SetMenuState");
static_assert(offsetof(SettingsViewInterface_SetMenuState, State) == 0x000000, "Member 'SettingsViewInterface_SetMenuState::State' has a wrong offset!");

// Function DBDUIViewInterfaces.SettingsViewInterface.GetSettingsMatchDetailsInterface
// 0x0010 (0x0010 - 0x0000)
struct SettingsViewInterface_GetSettingsMatchDetailsInterface final
{
public:
	TScriptInterface<class ISettingsMatchDetailsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SettingsViewInterface_GetSettingsMatchDetailsInterface) == 0x000008, "Wrong alignment on SettingsViewInterface_GetSettingsMatchDetailsInterface");
static_assert(sizeof(SettingsViewInterface_GetSettingsMatchDetailsInterface) == 0x000010, "Wrong size on SettingsViewInterface_GetSettingsMatchDetailsInterface");
static_assert(offsetof(SettingsViewInterface_GetSettingsMatchDetailsInterface, ReturnValue) == 0x000000, "Member 'SettingsViewInterface_GetSettingsMatchDetailsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.ApplyScaleFactor
// 0x0004 (0x0004 - 0x0000)
struct SkillCheckViewInterface_ApplyScaleFactor final
{
public:
	float                                         Scale;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_ApplyScaleFactor) == 0x000004, "Wrong alignment on SkillCheckViewInterface_ApplyScaleFactor");
static_assert(sizeof(SkillCheckViewInterface_ApplyScaleFactor) == 0x000004, "Wrong size on SkillCheckViewInterface_ApplyScaleFactor");
static_assert(offsetof(SkillCheckViewInterface_ApplyScaleFactor, Scale) == 0x000000, "Member 'SkillCheckViewInterface_ApplyScaleFactor::Scale' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheck
// 0x0058 (0x0058 - 0x0000)
struct SkillCheckViewInterface_ShowSkillCheck final
{
public:
	struct FSkillCheckViewData                    SkillCheckData;                                    // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_ShowSkillCheck) == 0x000008, "Wrong alignment on SkillCheckViewInterface_ShowSkillCheck");
static_assert(sizeof(SkillCheckViewInterface_ShowSkillCheck) == 0x000058, "Wrong size on SkillCheckViewInterface_ShowSkillCheck");
static_assert(offsetof(SkillCheckViewInterface_ShowSkillCheck, SkillCheckData) == 0x000000, "Member 'SkillCheckViewInterface_ShowSkillCheck::SkillCheckData' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.ShowSkillCheckSuccess
// 0x0001 (0x0001 - 0x0000)
struct SkillCheckViewInterface_ShowSkillCheckSuccess final
{
public:
	bool                                          IsBonus;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_ShowSkillCheckSuccess) == 0x000001, "Wrong alignment on SkillCheckViewInterface_ShowSkillCheckSuccess");
static_assert(sizeof(SkillCheckViewInterface_ShowSkillCheckSuccess) == 0x000001, "Wrong size on SkillCheckViewInterface_ShowSkillCheckSuccess");
static_assert(offsetof(SkillCheckViewInterface_ShowSkillCheckSuccess, IsBonus) == 0x000000, "Member 'SkillCheckViewInterface_ShowSkillCheckSuccess::IsBonus' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.UpdatePositionOffset
// 0x0008 (0x0008 - 0x0000)
struct SkillCheckViewInterface_UpdatePositionOffset final
{
public:
	int32                                         X;                                                 // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Y;                                                 // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_UpdatePositionOffset) == 0x000004, "Wrong alignment on SkillCheckViewInterface_UpdatePositionOffset");
static_assert(sizeof(SkillCheckViewInterface_UpdatePositionOffset) == 0x000008, "Wrong size on SkillCheckViewInterface_UpdatePositionOffset");
static_assert(offsetof(SkillCheckViewInterface_UpdatePositionOffset, X) == 0x000000, "Member 'SkillCheckViewInterface_UpdatePositionOffset::X' has a wrong offset!");
static_assert(offsetof(SkillCheckViewInterface_UpdatePositionOffset, Y) == 0x000004, "Member 'SkillCheckViewInterface_UpdatePositionOffset::Y' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillCheckViewInterface.UpdateProgress
// 0x0004 (0x0004 - 0x0000)
struct SkillCheckViewInterface_UpdateProgress final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillCheckViewInterface_UpdateProgress) == 0x000004, "Wrong alignment on SkillCheckViewInterface_UpdateProgress");
static_assert(sizeof(SkillCheckViewInterface_UpdateProgress) == 0x000004, "Wrong size on SkillCheckViewInterface_UpdateProgress");
static_assert(offsetof(SkillCheckViewInterface_UpdateProgress, Value) == 0x000000, "Member 'SkillCheckViewInterface_UpdateProgress::Value' has a wrong offset!");

// Function DBDUIViewInterfaces.SkillViewInterface.SetData
// 0x0070 (0x0070 - 0x0000)
struct SkillViewInterface_SetData final
{
public:
	struct FSkillViewData                         SkillViewData;                                     // 0x0000(0x0070)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SkillViewInterface_SetData) == 0x000008, "Wrong alignment on SkillViewInterface_SetData");
static_assert(sizeof(SkillViewInterface_SetData) == 0x000070, "Wrong size on SkillViewInterface_SetData");
static_assert(offsetof(SkillViewInterface_SetData, SkillViewData) == 0x000000, "Member 'SkillViewInterface_SetData::SkillViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StartSequenceViewInterface.ShowStartSequence
// 0x0028 (0x0028 - 0x0000)
struct StartSequenceViewInterface_ShowStartSequence final
{
public:
	struct FStartSequenceViewData                 Data;                                              // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartSequenceViewInterface_ShowStartSequence) == 0x000008, "Wrong alignment on StartSequenceViewInterface_ShowStartSequence");
static_assert(sizeof(StartSequenceViewInterface_ShowStartSequence) == 0x000028, "Wrong size on StartSequenceViewInterface_ShowStartSequence");
static_assert(offsetof(StartSequenceViewInterface_ShowStartSequence, Data) == 0x000000, "Member 'StartSequenceViewInterface_ShowStartSequence::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.StartSequenceViewInterface.GetIsStartSequenceVisible
// 0x0001 (0x0001 - 0x0000)
struct StartSequenceViewInterface_GetIsStartSequenceVisible final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StartSequenceViewInterface_GetIsStartSequenceVisible) == 0x000001, "Wrong alignment on StartSequenceViewInterface_GetIsStartSequenceVisible");
static_assert(sizeof(StartSequenceViewInterface_GetIsStartSequenceVisible) == 0x000001, "Wrong size on StartSequenceViewInterface_GetIsStartSequenceVisible");
static_assert(offsetof(StartSequenceViewInterface_GetIsStartSequenceVisible, ReturnValue) == 0x000000, "Member 'StartSequenceViewInterface_GetIsStartSequenceVisible::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.ActivateSubTabContent
// 0x0004 (0x0004 - 0x0000)
struct StoreBaseSubTabsViewInterface_ActivateSubTabContent final
{
public:
	int32                                         State;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreBaseSubTabsViewInterface_ActivateSubTabContent) == 0x000004, "Wrong alignment on StoreBaseSubTabsViewInterface_ActivateSubTabContent");
static_assert(sizeof(StoreBaseSubTabsViewInterface_ActivateSubTabContent) == 0x000004, "Wrong size on StoreBaseSubTabsViewInterface_ActivateSubTabContent");
static_assert(offsetof(StoreBaseSubTabsViewInterface_ActivateSubTabContent, State) == 0x000000, "Member 'StoreBaseSubTabsViewInterface_ActivateSubTabContent::State' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.HideSubTab
// 0x0004 (0x0004 - 0x0000)
struct StoreBaseSubTabsViewInterface_HideSubTab final
{
public:
	int32                                         SubTabId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreBaseSubTabsViewInterface_HideSubTab) == 0x000004, "Wrong alignment on StoreBaseSubTabsViewInterface_HideSubTab");
static_assert(sizeof(StoreBaseSubTabsViewInterface_HideSubTab) == 0x000004, "Wrong size on StoreBaseSubTabsViewInterface_HideSubTab");
static_assert(offsetof(StoreBaseSubTabsViewInterface_HideSubTab, SubTabId) == 0x000000, "Member 'StoreBaseSubTabsViewInterface_HideSubTab::SubTabId' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.IsSubTabVisible
// 0x0008 (0x0008 - 0x0000)
struct StoreBaseSubTabsViewInterface_IsSubTabVisible final
{
public:
	int32                                         SubTabId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreBaseSubTabsViewInterface_IsSubTabVisible) == 0x000004, "Wrong alignment on StoreBaseSubTabsViewInterface_IsSubTabVisible");
static_assert(sizeof(StoreBaseSubTabsViewInterface_IsSubTabVisible) == 0x000008, "Wrong size on StoreBaseSubTabsViewInterface_IsSubTabVisible");
static_assert(offsetof(StoreBaseSubTabsViewInterface_IsSubTabVisible, SubTabId) == 0x000000, "Member 'StoreBaseSubTabsViewInterface_IsSubTabVisible::SubTabId' has a wrong offset!");
static_assert(offsetof(StoreBaseSubTabsViewInterface_IsSubTabVisible, ReturnValue) == 0x000004, "Member 'StoreBaseSubTabsViewInterface_IsSubTabVisible::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.SelectSubTab
// 0x0004 (0x0004 - 0x0000)
struct StoreBaseSubTabsViewInterface_SelectSubTab final
{
public:
	int32                                         SelectedKey;                                       // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreBaseSubTabsViewInterface_SelectSubTab) == 0x000004, "Wrong alignment on StoreBaseSubTabsViewInterface_SelectSubTab");
static_assert(sizeof(StoreBaseSubTabsViewInterface_SelectSubTab) == 0x000004, "Wrong size on StoreBaseSubTabsViewInterface_SelectSubTab");
static_assert(offsetof(StoreBaseSubTabsViewInterface_SelectSubTab, SelectedKey) == 0x000000, "Member 'StoreBaseSubTabsViewInterface_SelectSubTab::SelectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.SetSubTabsData
// 0x0010 (0x0010 - 0x0000)
struct StoreBaseSubTabsViewInterface_SetSubTabsData final
{
public:
	TArray<struct FTabWidgetData>                 TabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreBaseSubTabsViewInterface_SetSubTabsData) == 0x000008, "Wrong alignment on StoreBaseSubTabsViewInterface_SetSubTabsData");
static_assert(sizeof(StoreBaseSubTabsViewInterface_SetSubTabsData) == 0x000010, "Wrong size on StoreBaseSubTabsViewInterface_SetSubTabsData");
static_assert(offsetof(StoreBaseSubTabsViewInterface_SetSubTabsData, TabsData) == 0x000000, "Member 'StoreBaseSubTabsViewInterface_SetSubTabsData::TabsData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.ShowSubTab
// 0x0004 (0x0004 - 0x0000)
struct StoreBaseSubTabsViewInterface_ShowSubTab final
{
public:
	int32                                         SubTabId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreBaseSubTabsViewInterface_ShowSubTab) == 0x000004, "Wrong alignment on StoreBaseSubTabsViewInterface_ShowSubTab");
static_assert(sizeof(StoreBaseSubTabsViewInterface_ShowSubTab) == 0x000004, "Wrong size on StoreBaseSubTabsViewInterface_ShowSubTab");
static_assert(offsetof(StoreBaseSubTabsViewInterface_ShowSubTab, SubTabId) == 0x000000, "Member 'StoreBaseSubTabsViewInterface_ShowSubTab::SubTabId' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreBaseSubTabsViewInterface.UpdateTabData
// 0x0098 (0x0098 - 0x0000)
struct StoreBaseSubTabsViewInterface_UpdateTabData final
{
public:
	int32                                         SubTabId;                                          // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTabWidgetData                         TabWidgetData;                                     // 0x0008(0x0090)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreBaseSubTabsViewInterface_UpdateTabData) == 0x000008, "Wrong alignment on StoreBaseSubTabsViewInterface_UpdateTabData");
static_assert(sizeof(StoreBaseSubTabsViewInterface_UpdateTabData) == 0x000098, "Wrong size on StoreBaseSubTabsViewInterface_UpdateTabData");
static_assert(offsetof(StoreBaseSubTabsViewInterface_UpdateTabData, SubTabId) == 0x000000, "Member 'StoreBaseSubTabsViewInterface_UpdateTabData::SubTabId' has a wrong offset!");
static_assert(offsetof(StoreBaseSubTabsViewInterface_UpdateTabData, TabWidgetData) == 0x000008, "Member 'StoreBaseSubTabsViewInterface_UpdateTabData::TabWidgetData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersBioViewInterface.SetData
// 0x0078 (0x0078 - 0x0000)
struct StoreCharactersBioViewInterface_SetData final
{
public:
	struct FCharacterBioViewData                  CharacterBioViewData;                              // 0x0000(0x0078)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersBioViewInterface_SetData) == 0x000008, "Wrong alignment on StoreCharactersBioViewInterface_SetData");
static_assert(sizeof(StoreCharactersBioViewInterface_SetData) == 0x000078, "Wrong size on StoreCharactersBioViewInterface_SetData");
static_assert(offsetof(StoreCharactersBioViewInterface_SetData, CharacterBioViewData) == 0x000000, "Member 'StoreCharactersBioViewInterface_SetData::CharacterBioViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersFilterViewInterface.SetFiltersState
// 0x0058 (0x0058 - 0x0000)
struct StoreCharactersFilterViewInterface_SetFiltersState final
{
public:
	struct FStoreCharactersFiltersData            NewFiltersData;                                    // 0x0000(0x0058)(Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersFilterViewInterface_SetFiltersState) == 0x000008, "Wrong alignment on StoreCharactersFilterViewInterface_SetFiltersState");
static_assert(sizeof(StoreCharactersFilterViewInterface_SetFiltersState) == 0x000058, "Wrong size on StoreCharactersFilterViewInterface_SetFiltersState");
static_assert(offsetof(StoreCharactersFilterViewInterface_SetFiltersState, NewFiltersData) == 0x000000, "Member 'StoreCharactersFilterViewInterface_SetFiltersState::NewFiltersData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersFilterViewInterface.SetFiltersVisibility
// 0x0003 (0x0003 - 0x0000)
struct StoreCharactersFilterViewInterface_SetFiltersVisibility final
{
public:
	bool                                          ShowAvailabilityFilter;                            // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowRarityFilters;                                 // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowClearFiltersButton;                            // 0x0002(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersFilterViewInterface_SetFiltersVisibility) == 0x000001, "Wrong alignment on StoreCharactersFilterViewInterface_SetFiltersVisibility");
static_assert(sizeof(StoreCharactersFilterViewInterface_SetFiltersVisibility) == 0x000003, "Wrong size on StoreCharactersFilterViewInterface_SetFiltersVisibility");
static_assert(offsetof(StoreCharactersFilterViewInterface_SetFiltersVisibility, ShowAvailabilityFilter) == 0x000000, "Member 'StoreCharactersFilterViewInterface_SetFiltersVisibility::ShowAvailabilityFilter' has a wrong offset!");
static_assert(offsetof(StoreCharactersFilterViewInterface_SetFiltersVisibility, ShowRarityFilters) == 0x000001, "Member 'StoreCharactersFilterViewInterface_SetFiltersVisibility::ShowRarityFilters' has a wrong offset!");
static_assert(offsetof(StoreCharactersFilterViewInterface_SetFiltersVisibility, ShowClearFiltersButton) == 0x000002, "Member 'StoreCharactersFilterViewInterface_SetFiltersVisibility::ShowClearFiltersButton' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersViewInterface.SetCharacterData
// 0x0018 (0x0018 - 0x0000)
struct StoreCharactersViewInterface_SetCharacterData final
{
public:
	class FText                                   CharacterName;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersViewInterface_SetCharacterData) == 0x000008, "Wrong alignment on StoreCharactersViewInterface_SetCharacterData");
static_assert(sizeof(StoreCharactersViewInterface_SetCharacterData) == 0x000018, "Wrong size on StoreCharactersViewInterface_SetCharacterData");
static_assert(offsetof(StoreCharactersViewInterface_SetCharacterData, CharacterName) == 0x000000, "Member 'StoreCharactersViewInterface_SetCharacterData::CharacterName' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersViewInterface.SetCharacterNameVisibility
// 0x0001 (0x0001 - 0x0000)
struct StoreCharactersViewInterface_SetCharacterNameVisibility final
{
public:
	bool                                          ShowCharacterName;                                 // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersViewInterface_SetCharacterNameVisibility) == 0x000001, "Wrong alignment on StoreCharactersViewInterface_SetCharacterNameVisibility");
static_assert(sizeof(StoreCharactersViewInterface_SetCharacterNameVisibility) == 0x000001, "Wrong size on StoreCharactersViewInterface_SetCharacterNameVisibility");
static_assert(offsetof(StoreCharactersViewInterface_SetCharacterNameVisibility, ShowCharacterName) == 0x000000, "Member 'StoreCharactersViewInterface_SetCharacterNameVisibility::ShowCharacterName' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetStoreCharactersBioInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersViewInterface_GetStoreCharactersBioInterface final
{
public:
	TScriptInterface<class IStoreCharactersBioViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersViewInterface_GetStoreCharactersBioInterface) == 0x000008, "Wrong alignment on StoreCharactersViewInterface_GetStoreCharactersBioInterface");
static_assert(sizeof(StoreCharactersViewInterface_GetStoreCharactersBioInterface) == 0x000010, "Wrong size on StoreCharactersViewInterface_GetStoreCharactersBioInterface");
static_assert(offsetof(StoreCharactersViewInterface_GetStoreCharactersBioInterface, ReturnValue) == 0x000000, "Member 'StoreCharactersViewInterface_GetStoreCharactersBioInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetStoreCharactersCustomizationsInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersViewInterface_GetStoreCharactersCustomizationsInterface final
{
public:
	TScriptInterface<class IStoreCharactersCustomizationsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersViewInterface_GetStoreCharactersCustomizationsInterface) == 0x000008, "Wrong alignment on StoreCharactersViewInterface_GetStoreCharactersCustomizationsInterface");
static_assert(sizeof(StoreCharactersViewInterface_GetStoreCharactersCustomizationsInterface) == 0x000010, "Wrong size on StoreCharactersViewInterface_GetStoreCharactersCustomizationsInterface");
static_assert(offsetof(StoreCharactersViewInterface_GetStoreCharactersCustomizationsInterface, ReturnValue) == 0x000000, "Member 'StoreCharactersViewInterface_GetStoreCharactersCustomizationsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetStoreCharactersSelectionInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersViewInterface_GetStoreCharactersSelectionInterface final
{
public:
	TScriptInterface<class IStoreCharactersSelectionViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersViewInterface_GetStoreCharactersSelectionInterface) == 0x000008, "Wrong alignment on StoreCharactersViewInterface_GetStoreCharactersSelectionInterface");
static_assert(sizeof(StoreCharactersViewInterface_GetStoreCharactersSelectionInterface) == 0x000010, "Wrong size on StoreCharactersViewInterface_GetStoreCharactersSelectionInterface");
static_assert(offsetof(StoreCharactersViewInterface_GetStoreCharactersSelectionInterface, ReturnValue) == 0x000000, "Member 'StoreCharactersViewInterface_GetStoreCharactersSelectionInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetStoreRightStickControllableViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersViewInterface_GetStoreRightStickControllableViewInterface final
{
public:
	TScriptInterface<class IStoreRightStickControllableViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersViewInterface_GetStoreRightStickControllableViewInterface) == 0x000008, "Wrong alignment on StoreCharactersViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(sizeof(StoreCharactersViewInterface_GetStoreRightStickControllableViewInterface) == 0x000010, "Wrong size on StoreCharactersViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(offsetof(StoreCharactersViewInterface_GetStoreRightStickControllableViewInterface, ReturnValue) == 0x000000, "Member 'StoreCharactersViewInterface_GetStoreRightStickControllableViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCharactersViewInterface.GetWardrobeActionButtonsViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCharactersViewInterface_GetWardrobeActionButtonsViewInterface final
{
public:
	TScriptInterface<class IWardrobeActionButtonsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCharactersViewInterface_GetWardrobeActionButtonsViewInterface) == 0x000008, "Wrong alignment on StoreCharactersViewInterface_GetWardrobeActionButtonsViewInterface");
static_assert(sizeof(StoreCharactersViewInterface_GetWardrobeActionButtonsViewInterface) == 0x000010, "Wrong size on StoreCharactersViewInterface_GetWardrobeActionButtonsViewInterface");
static_assert(offsetof(StoreCharactersViewInterface_GetWardrobeActionButtonsViewInterface, ReturnValue) == 0x000000, "Member 'StoreCharactersViewInterface_GetWardrobeActionButtonsViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionsCustomizationsViewInterface.GetStoreCharactersSelectionInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCollectionsCustomizationsViewInterface_GetStoreCharactersSelectionInterface final
{
public:
	TScriptInterface<class IStoreCharactersCustomizationsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsCustomizationsViewInterface_GetStoreCharactersSelectionInterface) == 0x000008, "Wrong alignment on StoreCollectionsCustomizationsViewInterface_GetStoreCharactersSelectionInterface");
static_assert(sizeof(StoreCollectionsCustomizationsViewInterface_GetStoreCharactersSelectionInterface) == 0x000010, "Wrong size on StoreCollectionsCustomizationsViewInterface_GetStoreCharactersSelectionInterface");
static_assert(offsetof(StoreCollectionsCustomizationsViewInterface_GetStoreCharactersSelectionInterface, ReturnValue) == 0x000000, "Member 'StoreCollectionsCustomizationsViewInterface_GetStoreCharactersSelectionInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionsCustomizationsViewInterface.GetStoreRightStickControllableViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCollectionsCustomizationsViewInterface_GetStoreRightStickControllableViewInterface final
{
public:
	TScriptInterface<class IStoreRightStickControllableViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsCustomizationsViewInterface_GetStoreRightStickControllableViewInterface) == 0x000008, "Wrong alignment on StoreCollectionsCustomizationsViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(sizeof(StoreCollectionsCustomizationsViewInterface_GetStoreRightStickControllableViewInterface) == 0x000010, "Wrong size on StoreCollectionsCustomizationsViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(offsetof(StoreCollectionsCustomizationsViewInterface_GetStoreRightStickControllableViewInterface, ReturnValue) == 0x000000, "Member 'StoreCollectionsCustomizationsViewInterface_GetStoreRightStickControllableViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionsCustomizationsViewInterface.GetWardrobeActionButtonsViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCollectionsCustomizationsViewInterface_GetWardrobeActionButtonsViewInterface final
{
public:
	TScriptInterface<class IWardrobeActionButtonsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsCustomizationsViewInterface_GetWardrobeActionButtonsViewInterface) == 0x000008, "Wrong alignment on StoreCollectionsCustomizationsViewInterface_GetWardrobeActionButtonsViewInterface");
static_assert(sizeof(StoreCollectionsCustomizationsViewInterface_GetWardrobeActionButtonsViewInterface) == 0x000010, "Wrong size on StoreCollectionsCustomizationsViewInterface_GetWardrobeActionButtonsViewInterface");
static_assert(offsetof(StoreCollectionsCustomizationsViewInterface_GetWardrobeActionButtonsViewInterface, ReturnValue) == 0x000000, "Member 'StoreCollectionsCustomizationsViewInterface_GetWardrobeActionButtonsViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionsListViewInterface.GetSearchBarViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreCollectionsListViewInterface_GetSearchBarViewInterface final
{
public:
	TScriptInterface<class ISearchBarViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionsListViewInterface_GetSearchBarViewInterface) == 0x000008, "Wrong alignment on StoreCollectionsListViewInterface_GetSearchBarViewInterface");
static_assert(sizeof(StoreCollectionsListViewInterface_GetSearchBarViewInterface) == 0x000010, "Wrong size on StoreCollectionsListViewInterface_GetSearchBarViewInterface");
static_assert(offsetof(StoreCollectionsListViewInterface_GetSearchBarViewInterface, ReturnValue) == 0x000000, "Member 'StoreCollectionsListViewInterface_GetSearchBarViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionViewData.HasHeroImage
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionViewData_HasHeroImage final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionViewData_HasHeroImage) == 0x000001, "Wrong alignment on StoreCollectionViewData_HasHeroImage");
static_assert(sizeof(StoreCollectionViewData_HasHeroImage) == 0x000001, "Wrong size on StoreCollectionViewData_HasHeroImage");
static_assert(offsetof(StoreCollectionViewData_HasHeroImage, ReturnValue) == 0x000000, "Member 'StoreCollectionViewData_HasHeroImage::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionViewData.HasHeroVideo
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionViewData_HasHeroVideo final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionViewData_HasHeroVideo) == 0x000001, "Wrong alignment on StoreCollectionViewData_HasHeroVideo");
static_assert(sizeof(StoreCollectionViewData_HasHeroVideo) == 0x000001, "Wrong size on StoreCollectionViewData_HasHeroVideo");
static_assert(offsetof(StoreCollectionViewData_HasHeroVideo, ReturnValue) == 0x000000, "Member 'StoreCollectionViewData_HasHeroVideo::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionViewData.IsCollectionActive
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionViewData_IsCollectionActive final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionViewData_IsCollectionActive) == 0x000001, "Wrong alignment on StoreCollectionViewData_IsCollectionActive");
static_assert(sizeof(StoreCollectionViewData_IsCollectionActive) == 0x000001, "Wrong size on StoreCollectionViewData_IsCollectionActive");
static_assert(offsetof(StoreCollectionViewData_IsCollectionActive, ReturnValue) == 0x000000, "Member 'StoreCollectionViewData_IsCollectionActive::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionViewData.IsCollectionHidden
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionViewData_IsCollectionHidden final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionViewData_IsCollectionHidden) == 0x000001, "Wrong alignment on StoreCollectionViewData_IsCollectionHidden");
static_assert(sizeof(StoreCollectionViewData_IsCollectionHidden) == 0x000001, "Wrong size on StoreCollectionViewData_IsCollectionHidden");
static_assert(offsetof(StoreCollectionViewData_IsCollectionHidden, ReturnValue) == 0x000000, "Member 'StoreCollectionViewData_IsCollectionHidden::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreCollectionViewData.IsSpecial
// 0x0001 (0x0001 - 0x0000)
struct StoreCollectionViewData_IsSpecial final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreCollectionViewData_IsSpecial) == 0x000001, "Wrong alignment on StoreCollectionViewData_IsSpecial");
static_assert(sizeof(StoreCollectionViewData_IsSpecial) == 0x000001, "Wrong size on StoreCollectionViewData_IsSpecial");
static_assert(offsetof(StoreCollectionViewData_IsSpecial, ReturnValue) == 0x000000, "Member 'StoreCollectionViewData_IsSpecial::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedChapterPack
// 0x0008 (0x0008 - 0x0000)
struct StoreFeaturedViewInterface_InitFeaturedChapterPack final
{
public:
	class UStoreChapterPackViewData*              ViewData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedViewInterface_InitFeaturedChapterPack) == 0x000008, "Wrong alignment on StoreFeaturedViewInterface_InitFeaturedChapterPack");
static_assert(sizeof(StoreFeaturedViewInterface_InitFeaturedChapterPack) == 0x000008, "Wrong size on StoreFeaturedViewInterface_InitFeaturedChapterPack");
static_assert(offsetof(StoreFeaturedViewInterface_InitFeaturedChapterPack, ViewData) == 0x000000, "Member 'StoreFeaturedViewInterface_InitFeaturedChapterPack::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedCharacters
// 0x0010 (0x0010 - 0x0000)
struct StoreFeaturedViewInterface_InitFeaturedCharacters final
{
public:
	TArray<class UStoreCharacterItemViewData*>    CharacterViewDataArray;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedViewInterface_InitFeaturedCharacters) == 0x000008, "Wrong alignment on StoreFeaturedViewInterface_InitFeaturedCharacters");
static_assert(sizeof(StoreFeaturedViewInterface_InitFeaturedCharacters) == 0x000010, "Wrong size on StoreFeaturedViewInterface_InitFeaturedCharacters");
static_assert(offsetof(StoreFeaturedViewInterface_InitFeaturedCharacters, CharacterViewDataArray) == 0x000000, "Member 'StoreFeaturedViewInterface_InitFeaturedCharacters::CharacterViewDataArray' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedCrossPromotion
// 0x00E8 (0x00E8 - 0x0000)
struct StoreFeaturedViewInterface_InitFeaturedCrossPromotion final
{
public:
	struct FCrossPromoCampaignViewData            ViewData;                                          // 0x0000(0x00E8)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedViewInterface_InitFeaturedCrossPromotion) == 0x000008, "Wrong alignment on StoreFeaturedViewInterface_InitFeaturedCrossPromotion");
static_assert(sizeof(StoreFeaturedViewInterface_InitFeaturedCrossPromotion) == 0x0000E8, "Wrong size on StoreFeaturedViewInterface_InitFeaturedCrossPromotion");
static_assert(offsetof(StoreFeaturedViewInterface_InitFeaturedCrossPromotion, ViewData) == 0x000000, "Member 'StoreFeaturedViewInterface_InitFeaturedCrossPromotion::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedCustomizationItems
// 0x0010 (0x0010 - 0x0000)
struct StoreFeaturedViewInterface_InitFeaturedCustomizationItems final
{
public:
	TArray<class UStoreCustomizationItemViewData*> ViewDataArray;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedViewInterface_InitFeaturedCustomizationItems) == 0x000008, "Wrong alignment on StoreFeaturedViewInterface_InitFeaturedCustomizationItems");
static_assert(sizeof(StoreFeaturedViewInterface_InitFeaturedCustomizationItems) == 0x000010, "Wrong size on StoreFeaturedViewInterface_InitFeaturedCustomizationItems");
static_assert(offsetof(StoreFeaturedViewInterface_InitFeaturedCustomizationItems, ViewDataArray) == 0x000000, "Member 'StoreFeaturedViewInterface_InitFeaturedCustomizationItems::ViewDataArray' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitFeaturedSpecialPack
// 0x0008 (0x0008 - 0x0000)
struct StoreFeaturedViewInterface_InitFeaturedSpecialPack final
{
public:
	class UStoreSpecialPackViewData*              ViewData;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedViewInterface_InitFeaturedSpecialPack) == 0x000008, "Wrong alignment on StoreFeaturedViewInterface_InitFeaturedSpecialPack");
static_assert(sizeof(StoreFeaturedViewInterface_InitFeaturedSpecialPack) == 0x000008, "Wrong size on StoreFeaturedViewInterface_InitFeaturedSpecialPack");
static_assert(offsetof(StoreFeaturedViewInterface_InitFeaturedSpecialPack, ViewData) == 0x000000, "Member 'StoreFeaturedViewInterface_InitFeaturedSpecialPack::ViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreFeaturedViewInterface.InitMysteryBox
// 0x0028 (0x0028 - 0x0000)
struct StoreFeaturedViewInterface_InitMysteryBox final
{
public:
	struct FStoreMysteryBoxViewData               MysteryBoxViewData;                                // 0x0000(0x0028)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreFeaturedViewInterface_InitMysteryBox) == 0x000008, "Wrong alignment on StoreFeaturedViewInterface_InitMysteryBox");
static_assert(sizeof(StoreFeaturedViewInterface_InitMysteryBox) == 0x000028, "Wrong size on StoreFeaturedViewInterface_InitMysteryBox");
static_assert(offsetof(StoreFeaturedViewInterface_InitMysteryBox, MysteryBoxViewData) == 0x000000, "Member 'StoreFeaturedViewInterface_InitMysteryBox::MysteryBoxViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetBackButtonLabel
// 0x0018 (0x0018 - 0x0000)
struct StoreMenuViewInterface_SetBackButtonLabel final
{
public:
	class FText                                   Label;                                             // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_SetBackButtonLabel) == 0x000008, "Wrong alignment on StoreMenuViewInterface_SetBackButtonLabel");
static_assert(sizeof(StoreMenuViewInterface_SetBackButtonLabel) == 0x000018, "Wrong size on StoreMenuViewInterface_SetBackButtonLabel");
static_assert(offsetof(StoreMenuViewInterface_SetBackButtonLabel, Label) == 0x000000, "Member 'StoreMenuViewInterface_SetBackButtonLabel::Label' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetMenuState
// 0x0001 (0x0001 - 0x0000)
struct StoreMenuViewInterface_SetMenuState final
{
public:
	EStoreMenuState                               State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_SetMenuState) == 0x000001, "Wrong alignment on StoreMenuViewInterface_SetMenuState");
static_assert(sizeof(StoreMenuViewInterface_SetMenuState) == 0x000001, "Wrong size on StoreMenuViewInterface_SetMenuState");
static_assert(offsetof(StoreMenuViewInterface_SetMenuState, State) == 0x000000, "Member 'StoreMenuViewInterface_SetMenuState::State' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetTabEnabled
// 0x0008 (0x0008 - 0x0000)
struct StoreMenuViewInterface_SetTabEnabled final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Enabled;                                           // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreMenuViewInterface_SetTabEnabled) == 0x000004, "Wrong alignment on StoreMenuViewInterface_SetTabEnabled");
static_assert(sizeof(StoreMenuViewInterface_SetTabEnabled) == 0x000008, "Wrong size on StoreMenuViewInterface_SetTabEnabled");
static_assert(offsetof(StoreMenuViewInterface_SetTabEnabled, Key) == 0x000000, "Member 'StoreMenuViewInterface_SetTabEnabled::Key' has a wrong offset!");
static_assert(offsetof(StoreMenuViewInterface_SetTabEnabled, Enabled) == 0x000004, "Member 'StoreMenuViewInterface_SetTabEnabled::Enabled' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetTabsData
// 0x0018 (0x0018 - 0x0000)
struct StoreMenuViewInterface_SetTabsData final
{
public:
	TArray<struct FTabWidgetData>                 TabsData;                                          // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         SelectedKey;                                       // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(StoreMenuViewInterface_SetTabsData) == 0x000008, "Wrong alignment on StoreMenuViewInterface_SetTabsData");
static_assert(sizeof(StoreMenuViewInterface_SetTabsData) == 0x000018, "Wrong size on StoreMenuViewInterface_SetTabsData");
static_assert(offsetof(StoreMenuViewInterface_SetTabsData, TabsData) == 0x000000, "Member 'StoreMenuViewInterface_SetTabsData::TabsData' has a wrong offset!");
static_assert(offsetof(StoreMenuViewInterface_SetTabsData, SelectedKey) == 0x000010, "Member 'StoreMenuViewInterface_SetTabsData::SelectedKey' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.SetTabSelected
// 0x0004 (0x0004 - 0x0000)
struct StoreMenuViewInterface_SetTabSelected final
{
public:
	int32                                         Key;                                               // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_SetTabSelected) == 0x000004, "Wrong alignment on StoreMenuViewInterface_SetTabSelected");
static_assert(sizeof(StoreMenuViewInterface_SetTabSelected) == 0x000004, "Wrong size on StoreMenuViewInterface_SetTabSelected");
static_assert(offsetof(StoreMenuViewInterface_SetTabSelected, Key) == 0x000000, "Member 'StoreMenuViewInterface_SetTabSelected::Key' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetDisplayStandViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreMenuViewInterface_GetDisplayStandViewInterface final
{
public:
	TScriptInterface<class IDisplayStandViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_GetDisplayStandViewInterface) == 0x000008, "Wrong alignment on StoreMenuViewInterface_GetDisplayStandViewInterface");
static_assert(sizeof(StoreMenuViewInterface_GetDisplayStandViewInterface) == 0x000010, "Wrong size on StoreMenuViewInterface_GetDisplayStandViewInterface");
static_assert(offsetof(StoreMenuViewInterface_GetDisplayStandViewInterface, ReturnValue) == 0x000000, "Member 'StoreMenuViewInterface_GetDisplayStandViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreCollectionsInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreMenuViewInterface_GetStoreCollectionsInterface final
{
public:
	TScriptInterface<class IStoreCollectionsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_GetStoreCollectionsInterface) == 0x000008, "Wrong alignment on StoreMenuViewInterface_GetStoreCollectionsInterface");
static_assert(sizeof(StoreMenuViewInterface_GetStoreCollectionsInterface) == 0x000010, "Wrong size on StoreMenuViewInterface_GetStoreCollectionsInterface");
static_assert(offsetof(StoreMenuViewInterface_GetStoreCollectionsInterface, ReturnValue) == 0x000000, "Member 'StoreMenuViewInterface_GetStoreCollectionsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreFeaturedInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreMenuViewInterface_GetStoreFeaturedInterface final
{
public:
	TScriptInterface<class IStoreFeaturedViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_GetStoreFeaturedInterface) == 0x000008, "Wrong alignment on StoreMenuViewInterface_GetStoreFeaturedInterface");
static_assert(sizeof(StoreMenuViewInterface_GetStoreFeaturedInterface) == 0x000010, "Wrong size on StoreMenuViewInterface_GetStoreFeaturedInterface");
static_assert(offsetof(StoreMenuViewInterface_GetStoreFeaturedInterface, ReturnValue) == 0x000000, "Member 'StoreMenuViewInterface_GetStoreFeaturedInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreKillersInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreMenuViewInterface_GetStoreKillersInterface final
{
public:
	TScriptInterface<class IStoreCharactersViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_GetStoreKillersInterface) == 0x000008, "Wrong alignment on StoreMenuViewInterface_GetStoreKillersInterface");
static_assert(sizeof(StoreMenuViewInterface_GetStoreKillersInterface) == 0x000010, "Wrong size on StoreMenuViewInterface_GetStoreKillersInterface");
static_assert(offsetof(StoreMenuViewInterface_GetStoreKillersInterface, ReturnValue) == 0x000000, "Member 'StoreMenuViewInterface_GetStoreKillersInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreSpecialPacksInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreMenuViewInterface_GetStoreSpecialPacksInterface final
{
public:
	TScriptInterface<class IStoreSpecialPacksViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_GetStoreSpecialPacksInterface) == 0x000008, "Wrong alignment on StoreMenuViewInterface_GetStoreSpecialPacksInterface");
static_assert(sizeof(StoreMenuViewInterface_GetStoreSpecialPacksInterface) == 0x000010, "Wrong size on StoreMenuViewInterface_GetStoreSpecialPacksInterface");
static_assert(offsetof(StoreMenuViewInterface_GetStoreSpecialPacksInterface, ReturnValue) == 0x000000, "Member 'StoreMenuViewInterface_GetStoreSpecialPacksInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreSpecialsInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreMenuViewInterface_GetStoreSpecialsInterface final
{
public:
	TScriptInterface<class IStoreSpecialsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_GetStoreSpecialsInterface) == 0x000008, "Wrong alignment on StoreMenuViewInterface_GetStoreSpecialsInterface");
static_assert(sizeof(StoreMenuViewInterface_GetStoreSpecialsInterface) == 0x000010, "Wrong size on StoreMenuViewInterface_GetStoreSpecialsInterface");
static_assert(offsetof(StoreMenuViewInterface_GetStoreSpecialsInterface, ReturnValue) == 0x000000, "Member 'StoreMenuViewInterface_GetStoreSpecialsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreMenuViewInterface.GetStoreSurvivorsInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreMenuViewInterface_GetStoreSurvivorsInterface final
{
public:
	TScriptInterface<class IStoreCharactersViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreMenuViewInterface_GetStoreSurvivorsInterface) == 0x000008, "Wrong alignment on StoreMenuViewInterface_GetStoreSurvivorsInterface");
static_assert(sizeof(StoreMenuViewInterface_GetStoreSurvivorsInterface) == 0x000010, "Wrong size on StoreMenuViewInterface_GetStoreSurvivorsInterface");
static_assert(offsetof(StoreMenuViewInterface_GetStoreSurvivorsInterface, ReturnValue) == 0x000000, "Member 'StoreMenuViewInterface_GetStoreSurvivorsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StorePackContentData.GetIconTexturePtr
// 0x0038 (0x0038 - 0x0000)
struct StorePackContentData_GetIconTexturePtr final
{
public:
	TSoftObjectPtr<class UTexture2D>              ReturnValue;                                       // 0x0000(0x0038)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StorePackContentData_GetIconTexturePtr) == 0x000008, "Wrong alignment on StorePackContentData_GetIconTexturePtr");
static_assert(sizeof(StorePackContentData_GetIconTexturePtr) == 0x000038, "Wrong size on StorePackContentData_GetIconTexturePtr");
static_assert(offsetof(StorePackContentData_GetIconTexturePtr, ReturnValue) == 0x000000, "Member 'StorePackContentData_GetIconTexturePtr::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StorePackContentData.GetId
// 0x000C (0x000C - 0x0000)
struct StorePackContentData_GetId final
{
public:
	class FName                                   ReturnValue;                                       // 0x0000(0x000C)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StorePackContentData_GetId) == 0x000004, "Wrong alignment on StorePackContentData_GetId");
static_assert(sizeof(StorePackContentData_GetId) == 0x00000C, "Wrong size on StorePackContentData_GetId");
static_assert(offsetof(StorePackContentData_GetId, ReturnValue) == 0x000000, "Member 'StorePackContentData_GetId::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StorePackContentData.GetPlayerRole
// 0x0001 (0x0001 - 0x0000)
struct StorePackContentData_GetPlayerRole final
{
public:
	EPlayerRole                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StorePackContentData_GetPlayerRole) == 0x000001, "Wrong alignment on StorePackContentData_GetPlayerRole");
static_assert(sizeof(StorePackContentData_GetPlayerRole) == 0x000001, "Wrong size on StorePackContentData_GetPlayerRole");
static_assert(offsetof(StorePackContentData_GetPlayerRole, ReturnValue) == 0x000000, "Member 'StorePackContentData_GetPlayerRole::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StorePackContentData.GetRewardType
// 0x0001 (0x0001 - 0x0000)
struct StorePackContentData_GetRewardType final
{
public:
	ERewardType                                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StorePackContentData_GetRewardType) == 0x000001, "Wrong alignment on StorePackContentData_GetRewardType");
static_assert(sizeof(StorePackContentData_GetRewardType) == 0x000001, "Wrong size on StorePackContentData_GetRewardType");
static_assert(offsetof(StorePackContentData_GetRewardType, ReturnValue) == 0x000000, "Member 'StorePackContentData_GetRewardType::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreRightStickControllableViewInterface.ToggleRightStickMode
// 0x0001 (0x0001 - 0x0000)
struct StoreRightStickControllableViewInterface_ToggleRightStickMode final
{
public:
	ERightStickMode                               ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreRightStickControllableViewInterface_ToggleRightStickMode) == 0x000001, "Wrong alignment on StoreRightStickControllableViewInterface_ToggleRightStickMode");
static_assert(sizeof(StoreRightStickControllableViewInterface_ToggleRightStickMode) == 0x000001, "Wrong size on StoreRightStickControllableViewInterface_ToggleRightStickMode");
static_assert(offsetof(StoreRightStickControllableViewInterface_ToggleRightStickMode, ReturnValue) == 0x000000, "Member 'StoreRightStickControllableViewInterface_ToggleRightStickMode::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksDetailsViewInterface.SetChapterPackData
// 0x0008 (0x0008 - 0x0000)
struct StoreSpecialPacksDetailsViewInterface_SetChapterPackData final
{
public:
	class UStoreChapterPackViewData*              Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksDetailsViewInterface_SetChapterPackData) == 0x000008, "Wrong alignment on StoreSpecialPacksDetailsViewInterface_SetChapterPackData");
static_assert(sizeof(StoreSpecialPacksDetailsViewInterface_SetChapterPackData) == 0x000008, "Wrong size on StoreSpecialPacksDetailsViewInterface_SetChapterPackData");
static_assert(offsetof(StoreSpecialPacksDetailsViewInterface_SetChapterPackData, Data) == 0x000000, "Member 'StoreSpecialPacksDetailsViewInterface_SetChapterPackData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksDetailsViewInterface.SetSpecialPackData
// 0x0008 (0x0008 - 0x0000)
struct StoreSpecialPacksDetailsViewInterface_SetSpecialPackData final
{
public:
	class UStoreSpecialPackViewData*              Data;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksDetailsViewInterface_SetSpecialPackData) == 0x000008, "Wrong alignment on StoreSpecialPacksDetailsViewInterface_SetSpecialPackData");
static_assert(sizeof(StoreSpecialPacksDetailsViewInterface_SetSpecialPackData) == 0x000008, "Wrong size on StoreSpecialPacksDetailsViewInterface_SetSpecialPackData");
static_assert(offsetof(StoreSpecialPacksDetailsViewInterface_SetSpecialPackData, Data) == 0x000000, "Member 'StoreSpecialPacksDetailsViewInterface_SetSpecialPackData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksListViewInterface.SetChapterPacksData
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksListViewInterface_SetChapterPacksData final
{
public:
	TArray<class UStoreChapterPackViewData*>      Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksListViewInterface_SetChapterPacksData) == 0x000008, "Wrong alignment on StoreSpecialPacksListViewInterface_SetChapterPacksData");
static_assert(sizeof(StoreSpecialPacksListViewInterface_SetChapterPacksData) == 0x000010, "Wrong size on StoreSpecialPacksListViewInterface_SetChapterPacksData");
static_assert(offsetof(StoreSpecialPacksListViewInterface_SetChapterPacksData, Data) == 0x000000, "Member 'StoreSpecialPacksListViewInterface_SetChapterPacksData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksListViewInterface.SetHeritagePacksData
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksListViewInterface_SetHeritagePacksData final
{
public:
	TArray<struct FStoreHeritagePackViewData>     Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksListViewInterface_SetHeritagePacksData) == 0x000008, "Wrong alignment on StoreSpecialPacksListViewInterface_SetHeritagePacksData");
static_assert(sizeof(StoreSpecialPacksListViewInterface_SetHeritagePacksData) == 0x000010, "Wrong size on StoreSpecialPacksListViewInterface_SetHeritagePacksData");
static_assert(offsetof(StoreSpecialPacksListViewInterface_SetHeritagePacksData, Data) == 0x000000, "Member 'StoreSpecialPacksListViewInterface_SetHeritagePacksData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksListViewInterface.SetSpecialPacksData
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksListViewInterface_SetSpecialPacksData final
{
public:
	TArray<class UStoreSpecialPackViewData*>      Data;                                              // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksListViewInterface_SetSpecialPacksData) == 0x000008, "Wrong alignment on StoreSpecialPacksListViewInterface_SetSpecialPacksData");
static_assert(sizeof(StoreSpecialPacksListViewInterface_SetSpecialPacksData) == 0x000010, "Wrong size on StoreSpecialPacksListViewInterface_SetSpecialPacksData");
static_assert(offsetof(StoreSpecialPacksListViewInterface_SetSpecialPacksData, Data) == 0x000000, "Member 'StoreSpecialPacksListViewInterface_SetSpecialPacksData::Data' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.IsAnimating
// 0x0001 (0x0001 - 0x0000)
struct StoreSpecialPacksViewInterface_IsAnimating final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksViewInterface_IsAnimating) == 0x000001, "Wrong alignment on StoreSpecialPacksViewInterface_IsAnimating");
static_assert(sizeof(StoreSpecialPacksViewInterface_IsAnimating) == 0x000001, "Wrong size on StoreSpecialPacksViewInterface_IsAnimating");
static_assert(offsetof(StoreSpecialPacksViewInterface_IsAnimating, ReturnValue) == 0x000000, "Member 'StoreSpecialPacksViewInterface_IsAnimating::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.SetScreenState
// 0x0002 (0x0002 - 0x0000)
struct StoreSpecialPacksViewInterface_SetScreenState final
{
public:
	EStoreSpecialPacksScreenState                 State;                                             // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldAnimate;                                     // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksViewInterface_SetScreenState) == 0x000001, "Wrong alignment on StoreSpecialPacksViewInterface_SetScreenState");
static_assert(sizeof(StoreSpecialPacksViewInterface_SetScreenState) == 0x000002, "Wrong size on StoreSpecialPacksViewInterface_SetScreenState");
static_assert(offsetof(StoreSpecialPacksViewInterface_SetScreenState, State) == 0x000000, "Member 'StoreSpecialPacksViewInterface_SetScreenState::State' has a wrong offset!");
static_assert(offsetof(StoreSpecialPacksViewInterface_SetScreenState, ShouldAnimate) == 0x000001, "Member 'StoreSpecialPacksViewInterface_SetScreenState::ShouldAnimate' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetDetailsInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksViewInterface_GetDetailsInterface final
{
public:
	TScriptInterface<class IStoreSpecialPacksDetailsViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksViewInterface_GetDetailsInterface) == 0x000008, "Wrong alignment on StoreSpecialPacksViewInterface_GetDetailsInterface");
static_assert(sizeof(StoreSpecialPacksViewInterface_GetDetailsInterface) == 0x000010, "Wrong size on StoreSpecialPacksViewInterface_GetDetailsInterface");
static_assert(offsetof(StoreSpecialPacksViewInterface_GetDetailsInterface, ReturnValue) == 0x000000, "Member 'StoreSpecialPacksViewInterface_GetDetailsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetStoreRightStickControllableViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksViewInterface_GetStoreRightStickControllableViewInterface final
{
public:
	TScriptInterface<class IStoreRightStickControllableViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksViewInterface_GetStoreRightStickControllableViewInterface) == 0x000008, "Wrong alignment on StoreSpecialPacksViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(sizeof(StoreSpecialPacksViewInterface_GetStoreRightStickControllableViewInterface) == 0x000010, "Wrong size on StoreSpecialPacksViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(offsetof(StoreSpecialPacksViewInterface_GetStoreRightStickControllableViewInterface, ReturnValue) == 0x000000, "Member 'StoreSpecialPacksViewInterface_GetStoreRightStickControllableViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetTabChaptersInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksViewInterface_GetTabChaptersInterface final
{
public:
	TScriptInterface<class IStoreSpecialPacksListViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksViewInterface_GetTabChaptersInterface) == 0x000008, "Wrong alignment on StoreSpecialPacksViewInterface_GetTabChaptersInterface");
static_assert(sizeof(StoreSpecialPacksViewInterface_GetTabChaptersInterface) == 0x000010, "Wrong size on StoreSpecialPacksViewInterface_GetTabChaptersInterface");
static_assert(offsetof(StoreSpecialPacksViewInterface_GetTabChaptersInterface, ReturnValue) == 0x000000, "Member 'StoreSpecialPacksViewInterface_GetTabChaptersInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetTabHeritageInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksViewInterface_GetTabHeritageInterface final
{
public:
	TScriptInterface<class IStoreSpecialPacksListViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksViewInterface_GetTabHeritageInterface) == 0x000008, "Wrong alignment on StoreSpecialPacksViewInterface_GetTabHeritageInterface");
static_assert(sizeof(StoreSpecialPacksViewInterface_GetTabHeritageInterface) == 0x000010, "Wrong size on StoreSpecialPacksViewInterface_GetTabHeritageInterface");
static_assert(offsetof(StoreSpecialPacksViewInterface_GetTabHeritageInterface, ReturnValue) == 0x000000, "Member 'StoreSpecialPacksViewInterface_GetTabHeritageInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPacksViewInterface.GetTabSpecialsInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialPacksViewInterface_GetTabSpecialsInterface final
{
public:
	TScriptInterface<class IStoreSpecialPacksListViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPacksViewInterface_GetTabSpecialsInterface) == 0x000008, "Wrong alignment on StoreSpecialPacksViewInterface_GetTabSpecialsInterface");
static_assert(sizeof(StoreSpecialPacksViewInterface_GetTabSpecialsInterface) == 0x000010, "Wrong size on StoreSpecialPacksViewInterface_GetTabSpecialsInterface");
static_assert(offsetof(StoreSpecialPacksViewInterface_GetTabSpecialsInterface, ReturnValue) == 0x000000, "Member 'StoreSpecialPacksViewInterface_GetTabSpecialsInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPackViewData.ContainsArchivePass
// 0x0001 (0x0001 - 0x0000)
struct StoreSpecialPackViewData_ContainsArchivePass final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPackViewData_ContainsArchivePass) == 0x000001, "Wrong alignment on StoreSpecialPackViewData_ContainsArchivePass");
static_assert(sizeof(StoreSpecialPackViewData_ContainsArchivePass) == 0x000001, "Wrong size on StoreSpecialPackViewData_ContainsArchivePass");
static_assert(offsetof(StoreSpecialPackViewData_ContainsArchivePass, ReturnValue) == 0x000000, "Member 'StoreSpecialPackViewData_ContainsArchivePass::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialPackViewData.ContainsArchivePassFragments
// 0x0001 (0x0001 - 0x0000)
struct StoreSpecialPackViewData_ContainsArchivePassFragments final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialPackViewData_ContainsArchivePassFragments) == 0x000001, "Wrong alignment on StoreSpecialPackViewData_ContainsArchivePassFragments");
static_assert(sizeof(StoreSpecialPackViewData_ContainsArchivePassFragments) == 0x000001, "Wrong size on StoreSpecialPackViewData_ContainsArchivePassFragments");
static_assert(offsetof(StoreSpecialPackViewData_ContainsArchivePassFragments, ReturnValue) == 0x000000, "Member 'StoreSpecialPackViewData_ContainsArchivePassFragments::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialsViewInterface.SetAuricCellsSpecialOfferData
// 0x0100 (0x0100 - 0x0000)
struct StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData final
{
public:
	struct FAuricCellsBundleViewData              AuricCellsSpecialOfferData;                        // 0x0000(0x0098)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FAuricCellsFirstPurchaseViewData       AuricCellsFirstPurchaseViewData;                   // 0x0098(0x0068)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData) == 0x000008, "Wrong alignment on StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData");
static_assert(sizeof(StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData) == 0x000100, "Wrong size on StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData");
static_assert(offsetof(StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData, AuricCellsSpecialOfferData) == 0x000000, "Member 'StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData::AuricCellsSpecialOfferData' has a wrong offset!");
static_assert(offsetof(StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData, AuricCellsFirstPurchaseViewData) == 0x000098, "Member 'StoreSpecialsViewInterface_SetAuricCellsSpecialOfferData::AuricCellsFirstPurchaseViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialsViewInterface.SetSpecialsData
// 0x0168 (0x0168 - 0x0000)
struct StoreSpecialsViewInterface_SetSpecialsData final
{
public:
	TArray<class UStoreCustomizationItemViewData*> SpecialsData;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	struct FStoreArchivePassViewData              ArchivePassViewData;                               // 0x0010(0x0158)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialsViewInterface_SetSpecialsData) == 0x000008, "Wrong alignment on StoreSpecialsViewInterface_SetSpecialsData");
static_assert(sizeof(StoreSpecialsViewInterface_SetSpecialsData) == 0x000168, "Wrong size on StoreSpecialsViewInterface_SetSpecialsData");
static_assert(offsetof(StoreSpecialsViewInterface_SetSpecialsData, SpecialsData) == 0x000000, "Member 'StoreSpecialsViewInterface_SetSpecialsData::SpecialsData' has a wrong offset!");
static_assert(offsetof(StoreSpecialsViewInterface_SetSpecialsData, ArchivePassViewData) == 0x000010, "Member 'StoreSpecialsViewInterface_SetSpecialsData::ArchivePassViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.StoreSpecialsViewInterface.GetStoreRightStickControllableViewInterface
// 0x0010 (0x0010 - 0x0000)
struct StoreSpecialsViewInterface_GetStoreRightStickControllableViewInterface final
{
public:
	TScriptInterface<class IStoreRightStickControllableViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StoreSpecialsViewInterface_GetStoreRightStickControllableViewInterface) == 0x000008, "Wrong alignment on StoreSpecialsViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(sizeof(StoreSpecialsViewInterface_GetStoreRightStickControllableViewInterface) == 0x000010, "Wrong size on StoreSpecialsViewInterface_GetStoreRightStickControllableViewInterface");
static_assert(offsetof(StoreSpecialsViewInterface_GetStoreRightStickControllableViewInterface, ReturnValue) == 0x000000, "Member 'StoreSpecialsViewInterface_GetStoreRightStickControllableViewInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetConstrainAspectRatioChanged
// 0x0008 (0x0008 - 0x0000)
struct SubtitlesViewInterface_SetConstrainAspectRatioChanged final
{
public:
	bool                                          IsConstrained;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AspectRatio;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_SetConstrainAspectRatioChanged) == 0x000004, "Wrong alignment on SubtitlesViewInterface_SetConstrainAspectRatioChanged");
static_assert(sizeof(SubtitlesViewInterface_SetConstrainAspectRatioChanged) == 0x000008, "Wrong size on SubtitlesViewInterface_SetConstrainAspectRatioChanged");
static_assert(offsetof(SubtitlesViewInterface_SetConstrainAspectRatioChanged, IsConstrained) == 0x000000, "Member 'SubtitlesViewInterface_SetConstrainAspectRatioChanged::IsConstrained' has a wrong offset!");
static_assert(offsetof(SubtitlesViewInterface_SetConstrainAspectRatioChanged, AspectRatio) == 0x000004, "Member 'SubtitlesViewInterface_SetConstrainAspectRatioChanged::AspectRatio' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesBackgroundOpacity
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesViewInterface_SetSubtitlesBackgroundOpacity final
{
public:
	ESubtitlesBackgroundOpacity                   Opacity;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_SetSubtitlesBackgroundOpacity) == 0x000001, "Wrong alignment on SubtitlesViewInterface_SetSubtitlesBackgroundOpacity");
static_assert(sizeof(SubtitlesViewInterface_SetSubtitlesBackgroundOpacity) == 0x000001, "Wrong size on SubtitlesViewInterface_SetSubtitlesBackgroundOpacity");
static_assert(offsetof(SubtitlesViewInterface_SetSubtitlesBackgroundOpacity, Opacity) == 0x000000, "Member 'SubtitlesViewInterface_SetSubtitlesBackgroundOpacity::Opacity' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesPosition
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesViewInterface_SetSubtitlesPosition final
{
public:
	ESubtitlesPosition                            Position;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_SetSubtitlesPosition) == 0x000001, "Wrong alignment on SubtitlesViewInterface_SetSubtitlesPosition");
static_assert(sizeof(SubtitlesViewInterface_SetSubtitlesPosition) == 0x000001, "Wrong size on SubtitlesViewInterface_SetSubtitlesPosition");
static_assert(offsetof(SubtitlesViewInterface_SetSubtitlesPosition, Position) == 0x000000, "Member 'SubtitlesViewInterface_SetSubtitlesPosition::Position' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.SetSubtitlesSize
// 0x0001 (0x0001 - 0x0000)
struct SubtitlesViewInterface_SetSubtitlesSize final
{
public:
	ESubtitlesSize                                Size;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_SetSubtitlesSize) == 0x000001, "Wrong alignment on SubtitlesViewInterface_SetSubtitlesSize");
static_assert(sizeof(SubtitlesViewInterface_SetSubtitlesSize) == 0x000001, "Wrong size on SubtitlesViewInterface_SetSubtitlesSize");
static_assert(offsetof(SubtitlesViewInterface_SetSubtitlesSize, Size) == 0x000000, "Member 'SubtitlesViewInterface_SetSubtitlesSize::Size' has a wrong offset!");

// Function DBDUIViewInterfaces.SubtitlesViewInterface.ShowSubtitle
// 0x0018 (0x0018 - 0x0000)
struct SubtitlesViewInterface_ShowSubtitle final
{
public:
	class FText                                   SubtitleText;                                      // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SubtitlesViewInterface_ShowSubtitle) == 0x000008, "Wrong alignment on SubtitlesViewInterface_ShowSubtitle");
static_assert(sizeof(SubtitlesViewInterface_ShowSubtitle) == 0x000018, "Wrong size on SubtitlesViewInterface_ShowSubtitle");
static_assert(offsetof(SubtitlesViewInterface_ShowSubtitle, SubtitleText) == 0x000000, "Member 'SubtitlesViewInterface_ShowSubtitle::SubtitleText' has a wrong offset!");

// Function DBDUIViewInterfaces.TallyMenuViewInterface.SetBackgroundVisibility
// 0x0001 (0x0001 - 0x0000)
struct TallyMenuViewInterface_SetBackgroundVisibility final
{
public:
	bool                                          IsVisible;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyMenuViewInterface_SetBackgroundVisibility) == 0x000001, "Wrong alignment on TallyMenuViewInterface_SetBackgroundVisibility");
static_assert(sizeof(TallyMenuViewInterface_SetBackgroundVisibility) == 0x000001, "Wrong size on TallyMenuViewInterface_SetBackgroundVisibility");
static_assert(offsetof(TallyMenuViewInterface_SetBackgroundVisibility, IsVisible) == 0x000000, "Member 'TallyMenuViewInterface_SetBackgroundVisibility::IsVisible' has a wrong offset!");

// Function DBDUIViewInterfaces.TallyMenuViewInterface.SetTabSelected
// 0x0001 (0x0001 - 0x0000)
struct TallyMenuViewInterface_SetTabSelected final
{
public:
	ETallyTabState                                TabState;                                          // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyMenuViewInterface_SetTabSelected) == 0x000001, "Wrong alignment on TallyMenuViewInterface_SetTabSelected");
static_assert(sizeof(TallyMenuViewInterface_SetTabSelected) == 0x000001, "Wrong size on TallyMenuViewInterface_SetTabSelected");
static_assert(offsetof(TallyMenuViewInterface_SetTabSelected, TabState) == 0x000000, "Member 'TallyMenuViewInterface_SetTabSelected::TabState' has a wrong offset!");

// Function DBDUIViewInterfaces.TallyMenuViewInterface.GetTallyScoreboardInterface
// 0x0010 (0x0010 - 0x0000)
struct TallyMenuViewInterface_GetTallyScoreboardInterface final
{
public:
	TScriptInterface<class ITallyScoreboardViewInterface> ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyMenuViewInterface_GetTallyScoreboardInterface) == 0x000008, "Wrong alignment on TallyMenuViewInterface_GetTallyScoreboardInterface");
static_assert(sizeof(TallyMenuViewInterface_GetTallyScoreboardInterface) == 0x000010, "Wrong size on TallyMenuViewInterface_GetTallyScoreboardInterface");
static_assert(offsetof(TallyMenuViewInterface_GetTallyScoreboardInterface, ReturnValue) == 0x000000, "Member 'TallyMenuViewInterface_GetTallyScoreboardInterface::ReturnValue' has a wrong offset!");

// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.SetKillerLoadoutBlocked
// 0x0001 (0x0001 - 0x0000)
struct TallyScoreboardViewInterface_SetKillerLoadoutBlocked final
{
public:
	bool                                          IsBlocked;                                         // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScoreboardViewInterface_SetKillerLoadoutBlocked) == 0x000001, "Wrong alignment on TallyScoreboardViewInterface_SetKillerLoadoutBlocked");
static_assert(sizeof(TallyScoreboardViewInterface_SetKillerLoadoutBlocked) == 0x000001, "Wrong size on TallyScoreboardViewInterface_SetKillerLoadoutBlocked");
static_assert(offsetof(TallyScoreboardViewInterface_SetKillerLoadoutBlocked, IsBlocked) == 0x000000, "Member 'TallyScoreboardViewInterface_SetKillerLoadoutBlocked::IsBlocked' has a wrong offset!");

// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.SetPlayerCardAnimationMode
// 0x0001 (0x0001 - 0x0000)
struct TallyScoreboardViewInterface_SetPlayerCardAnimationMode final
{
public:
	EPlayerCardAnimationMode                      PlayerCardAnimationMode;                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScoreboardViewInterface_SetPlayerCardAnimationMode) == 0x000001, "Wrong alignment on TallyScoreboardViewInterface_SetPlayerCardAnimationMode");
static_assert(sizeof(TallyScoreboardViewInterface_SetPlayerCardAnimationMode) == 0x000001, "Wrong size on TallyScoreboardViewInterface_SetPlayerCardAnimationMode");
static_assert(offsetof(TallyScoreboardViewInterface_SetPlayerCardAnimationMode, PlayerCardAnimationMode) == 0x000000, "Member 'TallyScoreboardViewInterface_SetPlayerCardAnimationMode::PlayerCardAnimationMode' has a wrong offset!");

// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.SetTallyPlayerStatusWidgets
// 0x0001 (0x0001 - 0x0000)
struct TallyScoreboardViewInterface_SetTallyPlayerStatusWidgets final
{
public:
	EGameType                                     GameType;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScoreboardViewInterface_SetTallyPlayerStatusWidgets) == 0x000001, "Wrong alignment on TallyScoreboardViewInterface_SetTallyPlayerStatusWidgets");
static_assert(sizeof(TallyScoreboardViewInterface_SetTallyPlayerStatusWidgets) == 0x000001, "Wrong size on TallyScoreboardViewInterface_SetTallyPlayerStatusWidgets");
static_assert(offsetof(TallyScoreboardViewInterface_SetTallyPlayerStatusWidgets, GameType) == 0x000000, "Member 'TallyScoreboardViewInterface_SetTallyPlayerStatusWidgets::GameType' has a wrong offset!");

// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.SetTallyScoreboardData
// 0x0018 (0x0018 - 0x0000)
struct TallyScoreboardViewInterface_SetTallyScoreboardData final
{
public:
	TArray<struct FTallyPlayerStatusViewData>     TallyPlayerStatus;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
	EGameType                                     GameType;                                          // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsUsingCharacterClass;                             // 0x0011(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12[0x6];                                       // 0x0012(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TallyScoreboardViewInterface_SetTallyScoreboardData) == 0x000008, "Wrong alignment on TallyScoreboardViewInterface_SetTallyScoreboardData");
static_assert(sizeof(TallyScoreboardViewInterface_SetTallyScoreboardData) == 0x000018, "Wrong size on TallyScoreboardViewInterface_SetTallyScoreboardData");
static_assert(offsetof(TallyScoreboardViewInterface_SetTallyScoreboardData, TallyPlayerStatus) == 0x000000, "Member 'TallyScoreboardViewInterface_SetTallyScoreboardData::TallyPlayerStatus' has a wrong offset!");
static_assert(offsetof(TallyScoreboardViewInterface_SetTallyScoreboardData, GameType) == 0x000010, "Member 'TallyScoreboardViewInterface_SetTallyScoreboardData::GameType' has a wrong offset!");
static_assert(offsetof(TallyScoreboardViewInterface_SetTallyScoreboardData, IsUsingCharacterClass) == 0x000011, "Member 'TallyScoreboardViewInterface_SetTallyScoreboardData::IsUsingCharacterClass' has a wrong offset!");

// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.ShowOptionsMenu
// 0x0010 (0x0010 - 0x0000)
struct TallyScoreboardViewInterface_ShowOptionsMenu final
{
public:
	TArray<struct FPlayerSocialOptionViewData>    PlayerOptionsData;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScoreboardViewInterface_ShowOptionsMenu) == 0x000008, "Wrong alignment on TallyScoreboardViewInterface_ShowOptionsMenu");
static_assert(sizeof(TallyScoreboardViewInterface_ShowOptionsMenu) == 0x000010, "Wrong size on TallyScoreboardViewInterface_ShowOptionsMenu");
static_assert(offsetof(TallyScoreboardViewInterface_ShowOptionsMenu, PlayerOptionsData) == 0x000000, "Member 'TallyScoreboardViewInterface_ShowOptionsMenu::PlayerOptionsData' has a wrong offset!");

// Function DBDUIViewInterfaces.TallyScoreboardViewInterface.UpdateReportedPlayer
// 0x0010 (0x0010 - 0x0000)
struct TallyScoreboardViewInterface_UpdateReportedPlayer final
{
public:
	class FString                                 MirrorsId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TallyScoreboardViewInterface_UpdateReportedPlayer) == 0x000008, "Wrong alignment on TallyScoreboardViewInterface_UpdateReportedPlayer");
static_assert(sizeof(TallyScoreboardViewInterface_UpdateReportedPlayer) == 0x000010, "Wrong size on TallyScoreboardViewInterface_UpdateReportedPlayer");
static_assert(offsetof(TallyScoreboardViewInterface_UpdateReportedPlayer, MirrorsId) == 0x000000, "Member 'TallyScoreboardViewInterface_UpdateReportedPlayer::MirrorsId' has a wrong offset!");

// Function DBDUIViewInterfaces.TemplateViewInterface.TemplateExampleFunction
// 0x0001 (0x0001 - 0x0000)
struct TemplateViewInterface_TemplateExampleFunction final
{
public:
	struct FTemplateViewData                      TemplateData;                                      // 0x0000(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(TemplateViewInterface_TemplateExampleFunction) == 0x000001, "Wrong alignment on TemplateViewInterface_TemplateExampleFunction");
static_assert(sizeof(TemplateViewInterface_TemplateExampleFunction) == 0x000001, "Wrong size on TemplateViewInterface_TemplateExampleFunction");
static_assert(offsetof(TemplateViewInterface_TemplateExampleFunction, TemplateData) == 0x000000, "Member 'TemplateViewInterface_TemplateExampleFunction::TemplateData' has a wrong offset!");

// Function DBDUIViewInterfaces.TestBuildFlagViewInterface.UpdateWidget
// 0x0002 (0x0002 - 0x0000)
struct TestBuildFlagViewInterface_UpdateWidget final
{
public:
	ETestBuildType                                TestBuildType;                                     // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETestBuildFlagPosition                        TestBuildFlagPosition;                             // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TestBuildFlagViewInterface_UpdateWidget) == 0x000001, "Wrong alignment on TestBuildFlagViewInterface_UpdateWidget");
static_assert(sizeof(TestBuildFlagViewInterface_UpdateWidget) == 0x000002, "Wrong size on TestBuildFlagViewInterface_UpdateWidget");
static_assert(offsetof(TestBuildFlagViewInterface_UpdateWidget, TestBuildType) == 0x000000, "Member 'TestBuildFlagViewInterface_UpdateWidget::TestBuildType' has a wrong offset!");
static_assert(offsetof(TestBuildFlagViewInterface_UpdateWidget, TestBuildFlagPosition) == 0x000001, "Member 'TestBuildFlagViewInterface_UpdateWidget::TestBuildFlagPosition' has a wrong offset!");

// Function DBDUIViewInterfaces.ToastNotificationContainerViewInterface.AddToastNotification
// 0x00C0 (0x00C0 - 0x0000)
struct ToastNotificationContainerViewInterface_AddToastNotification final
{
public:
	struct FToastNotificationViewData             ToastData;                                         // 0x0000(0x00C0)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastNotificationContainerViewInterface_AddToastNotification) == 0x000008, "Wrong alignment on ToastNotificationContainerViewInterface_AddToastNotification");
static_assert(sizeof(ToastNotificationContainerViewInterface_AddToastNotification) == 0x0000C0, "Wrong size on ToastNotificationContainerViewInterface_AddToastNotification");
static_assert(offsetof(ToastNotificationContainerViewInterface_AddToastNotification, ToastData) == 0x000000, "Member 'ToastNotificationContainerViewInterface_AddToastNotification::ToastData' has a wrong offset!");

// Function DBDUIViewInterfaces.ToastNotificationContainerViewInterface.RemoveToastNotification
// 0x0004 (0x0004 - 0x0000)
struct ToastNotificationContainerViewInterface_RemoveToastNotification final
{
public:
	int32                                         NotificationId;                                    // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ToastNotificationContainerViewInterface_RemoveToastNotification) == 0x000004, "Wrong alignment on ToastNotificationContainerViewInterface_RemoveToastNotification");
static_assert(sizeof(ToastNotificationContainerViewInterface_RemoveToastNotification) == 0x000004, "Wrong size on ToastNotificationContainerViewInterface_RemoveToastNotification");
static_assert(offsetof(ToastNotificationContainerViewInterface_RemoveToastNotification, NotificationId) == 0x000000, "Member 'ToastNotificationContainerViewInterface_RemoveToastNotification::NotificationId' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialHighlightViewInterface.SetTutorialHighlight
// 0x0002 (0x0002 - 0x0000)
struct TutorialHighlightViewInterface_SetTutorialHighlight final
{
public:
	bool                                          Show;                                              // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHudComponent                                 ComponentId;                                       // 0x0001(0x0001)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialHighlightViewInterface_SetTutorialHighlight) == 0x000001, "Wrong alignment on TutorialHighlightViewInterface_SetTutorialHighlight");
static_assert(sizeof(TutorialHighlightViewInterface_SetTutorialHighlight) == 0x000002, "Wrong size on TutorialHighlightViewInterface_SetTutorialHighlight");
static_assert(offsetof(TutorialHighlightViewInterface_SetTutorialHighlight, Show) == 0x000000, "Member 'TutorialHighlightViewInterface_SetTutorialHighlight::Show' has a wrong offset!");
static_assert(offsetof(TutorialHighlightViewInterface_SetTutorialHighlight, ComponentId) == 0x000001, "Member 'TutorialHighlightViewInterface_SetTutorialHighlight::ComponentId' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialMysteryNoteViewInterface.ShowMysteryNote
// 0x0090 (0x0090 - 0x0000)
struct TutorialMysteryNoteViewInterface_ShowMysteryNote final
{
public:
	struct FNotifTutorialPopupViewData            NotifData;                                         // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialMysteryNoteViewInterface_ShowMysteryNote) == 0x000008, "Wrong alignment on TutorialMysteryNoteViewInterface_ShowMysteryNote");
static_assert(sizeof(TutorialMysteryNoteViewInterface_ShowMysteryNote) == 0x000090, "Wrong size on TutorialMysteryNoteViewInterface_ShowMysteryNote");
static_assert(offsetof(TutorialMysteryNoteViewInterface_ShowMysteryNote, NotifData) == 0x000000, "Member 'TutorialMysteryNoteViewInterface_ShowMysteryNote::NotifData' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.AddTutorialObjective
// 0x0180 (0x0180 - 0x0000)
struct TutorialObjectivesViewInterface_AddTutorialObjective final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTutorialObjectivesViewData            InteractionPromptViewData;                         // 0x0010(0x0170)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialObjectivesViewInterface_AddTutorialObjective) == 0x000008, "Wrong alignment on TutorialObjectivesViewInterface_AddTutorialObjective");
static_assert(sizeof(TutorialObjectivesViewInterface_AddTutorialObjective) == 0x000180, "Wrong size on TutorialObjectivesViewInterface_AddTutorialObjective");
static_assert(offsetof(TutorialObjectivesViewInterface_AddTutorialObjective, ID) == 0x000000, "Member 'TutorialObjectivesViewInterface_AddTutorialObjective::ID' has a wrong offset!");
static_assert(offsetof(TutorialObjectivesViewInterface_AddTutorialObjective, InteractionPromptViewData) == 0x000010, "Member 'TutorialObjectivesViewInterface_AddTutorialObjective::InteractionPromptViewData' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.CompleteTutorialObjective
// 0x0010 (0x0010 - 0x0000)
struct TutorialObjectivesViewInterface_CompleteTutorialObjective final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoveAfterCompletion;                             // 0x000C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TutorialObjectivesViewInterface_CompleteTutorialObjective) == 0x000004, "Wrong alignment on TutorialObjectivesViewInterface_CompleteTutorialObjective");
static_assert(sizeof(TutorialObjectivesViewInterface_CompleteTutorialObjective) == 0x000010, "Wrong size on TutorialObjectivesViewInterface_CompleteTutorialObjective");
static_assert(offsetof(TutorialObjectivesViewInterface_CompleteTutorialObjective, ID) == 0x000000, "Member 'TutorialObjectivesViewInterface_CompleteTutorialObjective::ID' has a wrong offset!");
static_assert(offsetof(TutorialObjectivesViewInterface_CompleteTutorialObjective, RemoveAfterCompletion) == 0x00000C, "Member 'TutorialObjectivesViewInterface_CompleteTutorialObjective::RemoveAfterCompletion' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialObjectivesViewInterface.RemoveTutorialObjective
// 0x000C (0x000C - 0x0000)
struct TutorialObjectivesViewInterface_RemoveTutorialObjective final
{
public:
	class FName                                   ID;                                                // 0x0000(0x000C)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialObjectivesViewInterface_RemoveTutorialObjective) == 0x000004, "Wrong alignment on TutorialObjectivesViewInterface_RemoveTutorialObjective");
static_assert(sizeof(TutorialObjectivesViewInterface_RemoveTutorialObjective) == 0x00000C, "Wrong size on TutorialObjectivesViewInterface_RemoveTutorialObjective");
static_assert(offsetof(TutorialObjectivesViewInterface_RemoveTutorialObjective, ID) == 0x000000, "Member 'TutorialObjectivesViewInterface_RemoveTutorialObjective::ID' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialPopupViewInterface.HideTutorialPopup
// 0x0001 (0x0001 - 0x0000)
struct TutorialPopupViewInterface_HideTutorialPopup final
{
public:
	bool                                          PlaySoundEffect;                                   // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialPopupViewInterface_HideTutorialPopup) == 0x000001, "Wrong alignment on TutorialPopupViewInterface_HideTutorialPopup");
static_assert(sizeof(TutorialPopupViewInterface_HideTutorialPopup) == 0x000001, "Wrong size on TutorialPopupViewInterface_HideTutorialPopup");
static_assert(offsetof(TutorialPopupViewInterface_HideTutorialPopup, PlaySoundEffect) == 0x000000, "Member 'TutorialPopupViewInterface_HideTutorialPopup::PlaySoundEffect' has a wrong offset!");

// Function DBDUIViewInterfaces.TutorialPopupViewInterface.ShowNotifTutorialPopup
// 0x0090 (0x0090 - 0x0000)
struct TutorialPopupViewInterface_ShowNotifTutorialPopup final
{
public:
	struct FNotifTutorialPopupViewData            NotifTutoData;                                     // 0x0000(0x0090)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TutorialPopupViewInterface_ShowNotifTutorialPopup) == 0x000008, "Wrong alignment on TutorialPopupViewInterface_ShowNotifTutorialPopup");
static_assert(sizeof(TutorialPopupViewInterface_ShowNotifTutorialPopup) == 0x000090, "Wrong size on TutorialPopupViewInterface_ShowNotifTutorialPopup");
static_assert(offsetof(TutorialPopupViewInterface_ShowNotifTutorialPopup, NotifTutoData) == 0x000000, "Member 'TutorialPopupViewInterface_ShowNotifTutorialPopup::NotifTutoData' has a wrong offset!");

// Function DBDUIViewInterfaces.UIUtilities.ConvertArchiveCurrentAndMaxProgressionInPercentage
// 0x0008 (0x0008 - 0x0000)
struct UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage final
{
public:
	int32                                         OutCurrentProgression;                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OutMaxProgression;                                 // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage) == 0x000004, "Wrong alignment on UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage");
static_assert(sizeof(UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage) == 0x000008, "Wrong size on UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage");
static_assert(offsetof(UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage, OutCurrentProgression) == 0x000000, "Member 'UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage::OutCurrentProgression' has a wrong offset!");
static_assert(offsetof(UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage, OutMaxProgression) == 0x000004, "Member 'UIUtilities_ConvertArchiveCurrentAndMaxProgressionInPercentage::OutMaxProgression' has a wrong offset!");

// Function DBDUIViewInterfaces.WatermarkViewInterface.SetSteamValuesText
// 0x0020 (0x0020 - 0x0000)
struct WatermarkViewInterface_SetSteamValuesText final
{
public:
	class FString                                 SteamName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SteamId;                                           // 0x0010(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(WatermarkViewInterface_SetSteamValuesText) == 0x000008, "Wrong alignment on WatermarkViewInterface_SetSteamValuesText");
static_assert(sizeof(WatermarkViewInterface_SetSteamValuesText) == 0x000020, "Wrong size on WatermarkViewInterface_SetSteamValuesText");
static_assert(offsetof(WatermarkViewInterface_SetSteamValuesText, SteamName) == 0x000000, "Member 'WatermarkViewInterface_SetSteamValuesText::SteamName' has a wrong offset!");
static_assert(offsetof(WatermarkViewInterface_SetSteamValuesText, SteamId) == 0x000010, "Member 'WatermarkViewInterface_SetSteamValuesText::SteamId' has a wrong offset!");

}

