#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ReadMap

#include "Basic.hpp"

#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function ReadMap.ReadMap_C.PostAkEventOnPlayer
// 0x0038 (0x0038 - 0x0000)
struct ReadMap_C_PostAkEventOnPlayer final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkAudioEvent*                          AkEvent;                                           // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0010(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_GetAudioComponent_ReturnValue;            // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ReadMap_C_PostAkEventOnPlayer) == 0x000008, "Wrong alignment on ReadMap_C_PostAkEventOnPlayer");
static_assert(sizeof(ReadMap_C_PostAkEventOnPlayer) == 0x000038, "Wrong size on ReadMap_C_PostAkEventOnPlayer");
static_assert(offsetof(ReadMap_C_PostAkEventOnPlayer, Player) == 0x000000, "Member 'ReadMap_C_PostAkEventOnPlayer::Player' has a wrong offset!");
static_assert(offsetof(ReadMap_C_PostAkEventOnPlayer, AkEvent) == 0x000008, "Member 'ReadMap_C_PostAkEventOnPlayer::AkEvent' has a wrong offset!");
static_assert(offsetof(ReadMap_C_PostAkEventOnPlayer, Temp_delegate_Variable) == 0x000010, "Member 'ReadMap_C_PostAkEventOnPlayer::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(ReadMap_C_PostAkEventOnPlayer, CallFunc_GetAudioComponent_ReturnValue) == 0x000028, "Member 'ReadMap_C_PostAkEventOnPlayer::CallFunc_GetAudioComponent_ReturnValue' has a wrong offset!");
static_assert(offsetof(ReadMap_C_PostAkEventOnPlayer, CallFunc_PostAkEvent_ReturnValue) == 0x000030, "Member 'ReadMap_C_PostAkEventOnPlayer::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");

// Function ReadMap.ReadMap_C.PlayOnFinishedAudio
// 0x0008 (0x0008 - 0x0000)
struct ReadMap_C_PlayOnFinishedAudio final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ReadMap_C_PlayOnFinishedAudio) == 0x000008, "Wrong alignment on ReadMap_C_PlayOnFinishedAudio");
static_assert(sizeof(ReadMap_C_PlayOnFinishedAudio) == 0x000008, "Wrong size on ReadMap_C_PlayOnFinishedAudio");
static_assert(offsetof(ReadMap_C_PlayOnFinishedAudio, Player) == 0x000000, "Member 'ReadMap_C_PlayOnFinishedAudio::Player' has a wrong offset!");

// Function ReadMap.ReadMap_C.OnInteractionFinished
// 0x0010 (0x0010 - 0x0000)
struct ReadMap_C_OnInteractionFinished final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          HasInteractionStarted;                             // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ReadMap_C_OnInteractionFinished) == 0x000008, "Wrong alignment on ReadMap_C_OnInteractionFinished");
static_assert(sizeof(ReadMap_C_OnInteractionFinished) == 0x000010, "Wrong size on ReadMap_C_OnInteractionFinished");
static_assert(offsetof(ReadMap_C_OnInteractionFinished, Player) == 0x000000, "Member 'ReadMap_C_OnInteractionFinished::Player' has a wrong offset!");
static_assert(offsetof(ReadMap_C_OnInteractionFinished, HasInteractionStarted) == 0x000008, "Member 'ReadMap_C_OnInteractionFinished::HasInteractionStarted' has a wrong offset!");

// Function ReadMap.ReadMap_C.OnInteractionEnterStart
// 0x0010 (0x0010 - 0x0000)
struct ReadMap_C_OnInteractionEnterStart final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         ActualSnapTime;                                    // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ReadMap_C_OnInteractionEnterStart) == 0x000008, "Wrong alignment on ReadMap_C_OnInteractionEnterStart");
static_assert(sizeof(ReadMap_C_OnInteractionEnterStart) == 0x000010, "Wrong size on ReadMap_C_OnInteractionEnterStart");
static_assert(offsetof(ReadMap_C_OnInteractionEnterStart, Player) == 0x000000, "Member 'ReadMap_C_OnInteractionEnterStart::Player' has a wrong offset!");
static_assert(offsetof(ReadMap_C_OnInteractionEnterStart, ActualSnapTime) == 0x000008, "Member 'ReadMap_C_OnInteractionEnterStart::ActualSnapTime' has a wrong offset!");

// Function ReadMap.ReadMap_C.OnInteractionCompletionStateChanged
// 0x0010 (0x0010 - 0x0000)
struct ReadMap_C_OnInteractionCompletionStateChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Complete;                                          // 0x0008(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ReadMap_C_OnInteractionCompletionStateChanged) == 0x000008, "Wrong alignment on ReadMap_C_OnInteractionCompletionStateChanged");
static_assert(sizeof(ReadMap_C_OnInteractionCompletionStateChanged) == 0x000010, "Wrong size on ReadMap_C_OnInteractionCompletionStateChanged");
static_assert(offsetof(ReadMap_C_OnInteractionCompletionStateChanged, Player) == 0x000000, "Member 'ReadMap_C_OnInteractionCompletionStateChanged::Player' has a wrong offset!");
static_assert(offsetof(ReadMap_C_OnInteractionCompletionStateChanged, Complete) == 0x000008, "Member 'ReadMap_C_OnInteractionCompletionStateChanged::Complete' has a wrong offset!");

// Function ReadMap.ReadMap_C.ExecuteUbergraph_ReadMap
// 0x0038 (0x0038 - 0x0000)
struct ReadMap_C_ExecuteUbergraph_ReadMap final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             K2Node_Event_player_1;                             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_complete;                             // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             K2Node_Event_player;                               // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_hasInteractionStarted;                // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyObserved_ReturnValue;            // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_23[0x5];                                       // 0x0023(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             K2Node_Event_player_2;                             // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_actualSnapTime;                       // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallyObserved_ReturnValue_1;          // 0x0034(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ReadMap_C_ExecuteUbergraph_ReadMap) == 0x000008, "Wrong alignment on ReadMap_C_ExecuteUbergraph_ReadMap");
static_assert(sizeof(ReadMap_C_ExecuteUbergraph_ReadMap) == 0x000038, "Wrong size on ReadMap_C_ExecuteUbergraph_ReadMap");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, EntryPoint) == 0x000000, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::EntryPoint' has a wrong offset!");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, K2Node_Event_player_1) == 0x000008, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::K2Node_Event_player_1' has a wrong offset!");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, K2Node_Event_complete) == 0x000010, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::K2Node_Event_complete' has a wrong offset!");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, K2Node_Event_player) == 0x000018, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::K2Node_Event_player' has a wrong offset!");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, K2Node_Event_hasInteractionStarted) == 0x000020, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::K2Node_Event_hasInteractionStarted' has a wrong offset!");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, CallFunc_IsLocallyObserved_ReturnValue) == 0x000021, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::CallFunc_IsLocallyObserved_ReturnValue' has a wrong offset!");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, CallFunc_BooleanAND_ReturnValue) == 0x000022, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, K2Node_Event_player_2) == 0x000028, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::K2Node_Event_player_2' has a wrong offset!");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, K2Node_Event_actualSnapTime) == 0x000030, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::K2Node_Event_actualSnapTime' has a wrong offset!");
static_assert(offsetof(ReadMap_C_ExecuteUbergraph_ReadMap, CallFunc_IsLocallyObserved_ReturnValue_1) == 0x000034, "Member 'ReadMap_C_ExecuteUbergraph_ReadMap::CallFunc_IsLocallyObserved_ReturnValue_1' has a wrong offset!");

// Function ReadMap.ReadMap_C.CleanUpOnDestroyed
// 0x0008 (0x0008 - 0x0000)
struct ReadMap_C_CleanUpOnDestroyed final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(ReadMap_C_CleanUpOnDestroyed) == 0x000008, "Wrong alignment on ReadMap_C_CleanUpOnDestroyed");
static_assert(sizeof(ReadMap_C_CleanUpOnDestroyed) == 0x000008, "Wrong size on ReadMap_C_CleanUpOnDestroyed");
static_assert(offsetof(ReadMap_C_CleanUpOnDestroyed, Player) == 0x000000, "Member 'ReadMap_C_CleanUpOnDestroyed::Player' has a wrong offset!");

}

