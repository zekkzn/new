#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_IndNeonLight

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function BP_IndNeonLight.BP_IndNeonLight_C.ExecuteUbergraph_BP_IndNeonLight
// 0x004C (0x004C - 0x0000)
struct BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0004(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkResult Result)>             K2Node_CreateDelegate_OutputDelegate;              // 0x0018(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkResult Result)>             K2Node_CreateDelegate_OutputDelegate_1;            // 0x002C(0x0014)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EAkResult                                     K2Node_CustomEvent_Result_1;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EAkResult                                     K2Node_CustomEvent_Result;                         // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight) == 0x000004, "Wrong alignment on BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight");
static_assert(sizeof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight) == 0x00004C, "Wrong size on BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight");
static_assert(offsetof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight, EntryPoint) == 0x000000, "Member 'BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight, Temp_delegate_Variable) == 0x000004, "Member 'BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight, K2Node_CreateDelegate_OutputDelegate) == 0x000018, "Member 'BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight, K2Node_CreateDelegate_OutputDelegate_1) == 0x00002C, "Member 'BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight, K2Node_CustomEvent_Result_1) == 0x000040, "Member 'BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight::K2Node_CustomEvent_Result_1' has a wrong offset!");
static_assert(offsetof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight, CallFunc_PostAkEvent_ReturnValue) == 0x000044, "Member 'BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight, K2Node_Event_EndPlayReason) == 0x000048, "Member 'BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight::K2Node_Event_EndPlayReason' has a wrong offset!");
static_assert(offsetof(BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight, K2Node_CustomEvent_Result) == 0x000049, "Member 'BP_IndNeonLight_C_ExecuteUbergraph_BP_IndNeonLight::K2Node_CustomEvent_Result' has a wrong offset!");

// Function BP_IndNeonLight.BP_IndNeonLight_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_IndNeonLight_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IndNeonLight_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_IndNeonLight_C_ReceiveEndPlay");
static_assert(sizeof(BP_IndNeonLight_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_IndNeonLight_C_ReceiveEndPlay");
static_assert(offsetof(BP_IndNeonLight_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_IndNeonLight_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_IndNeonLight.BP_IndNeonLight_C.CustomEvent_1
// 0x0001 (0x0001 - 0x0000)
struct BP_IndNeonLight_C_CustomEvent_1 final
{
public:
	EAkResult                                     Result;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IndNeonLight_C_CustomEvent_1) == 0x000001, "Wrong alignment on BP_IndNeonLight_C_CustomEvent_1");
static_assert(sizeof(BP_IndNeonLight_C_CustomEvent_1) == 0x000001, "Wrong size on BP_IndNeonLight_C_CustomEvent_1");
static_assert(offsetof(BP_IndNeonLight_C_CustomEvent_1, Result) == 0x000000, "Member 'BP_IndNeonLight_C_CustomEvent_1::Result' has a wrong offset!");

// Function BP_IndNeonLight.BP_IndNeonLight_C.Bank Unloaded
// 0x0001 (0x0001 - 0x0000)
struct BP_IndNeonLight_C_Bank_Unloaded final
{
public:
	EAkResult                                     Result;                                            // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_IndNeonLight_C_Bank_Unloaded) == 0x000001, "Wrong alignment on BP_IndNeonLight_C_Bank_Unloaded");
static_assert(sizeof(BP_IndNeonLight_C_Bank_Unloaded) == 0x000001, "Wrong size on BP_IndNeonLight_C_Bank_Unloaded");
static_assert(offsetof(BP_IndNeonLight_C_Bank_Unloaded, Result) == 0x000000, "Member 'BP_IndNeonLight_C_Bank_Unloaded::Result' has a wrong offset!");

}

