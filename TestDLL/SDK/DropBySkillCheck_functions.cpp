#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DropBySkillCheck

#include "Basic.hpp"

#include "DropBySkillCheck_classes.hpp"
#include "DropBySkillCheck_parameters.hpp"


namespace SDK
{

// Function DropBySkillCheck.DropBySkillCheck_C.ExecuteUbergraph_DropBySkillCheck
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDropBySkillCheck_C::ExecuteUbergraph_DropBySkillCheck(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DropBySkillCheck_C", "ExecuteUbergraph_DropBySkillCheck");

	Params::DropBySkillCheck_C_ExecuteUbergraph_DropBySkillCheck Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DropBySkillCheck.DropBySkillCheck_C.OnInteractionEnterStart
// (Event, Protected, BlueprintEvent)
// Parameters:
// class ADBDPlayer*                       Player                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// float                                   ActualSnapTime                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UDropBySkillCheck_C::OnInteractionEnterStart(class ADBDPlayer* Player, float ActualSnapTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DropBySkillCheck_C", "OnInteractionEnterStart");

	Params::DropBySkillCheck_C_OnInteractionEnterStart Parms{};

	Parms.Player = Player;
	Parms.ActualSnapTime = ActualSnapTime;

	UObject::ProcessEvent(Func, &Parms);
}


// Function DropBySkillCheck.DropBySkillCheck_C.CanOverrideInteraction
// (Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class UInteractionDefinition*           Interaction                                            (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UDropBySkillCheck_C::CanOverrideInteraction(const class UInteractionDefinition* Interaction) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DropBySkillCheck_C", "CanOverrideInteraction");

	Params::DropBySkillCheck_C_CanOverrideInteraction Parms{};

	Parms.Interaction = Interaction;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}


// Function DropBySkillCheck.DropBySkillCheck_C.IsInteractionPossibleBP
// (Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class ADBDPlayer*                       Player                                                 (ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EInputInteractionType                   InteractionType                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UDropBySkillCheck_C::IsInteractionPossibleBP(const class ADBDPlayer* Player, EInputInteractionType InteractionType) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("DropBySkillCheck_C", "IsInteractionPossibleBP");

	Params::DropBySkillCheck_C_IsInteractionPossibleBP Parms{};

	Parms.Player = Player;
	Parms.InteractionType = InteractionType;

	UObject::ProcessEvent(Func, &Parms);

	return Parms.ReturnValue;
}

}

