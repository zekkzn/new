#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreTimerFlag

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "DBDUIViewsCore_classes.hpp"
#include "DBDUIViewInterfaces_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_CoreTimerFlag.WBP_CoreTimerFlag_C
// 0x0160 (0x04E8 - 0x0388)
class UWBP_CoreTimerFlag_C final : public UCoreTimerFlagWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0388(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UGridPanel*                             Content;                                           // 0x0390(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              FlagBG;                                            // 0x0398(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UDBDImage*                              TimerIMG;                                          // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FSlateColor                            LimitedColor;                                      // 0x03A8(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            LimitedTextColor;                                  // 0x03BC(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            SaleColor;                                         // 0x03D0(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            SaleTextColor;                                     // 0x03E4(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            RiftColor;                                         // 0x03F8(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            RiftTextColor;                                     // 0x040C(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DefaultColor;                                      // 0x0420(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FSlateColor                            DefaultTextColor;                                  // 0x0434(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	TArray<class UWidget*>                        ContentChildren;                                   // 0x0448(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	struct FSlateFontInfo                         TimerTBFontStyle;                                  // 0x0458(0x0060)(Edit, BlueprintVisible, HasGetValueTypeHash)
	struct FTimerFlagViewData                     PreviewFlag;                                       // 0x04B8(0x0030)(Edit, BlueprintVisible)

public:
	void ExecuteUbergraph_WBP_CoreTimerFlag(int32 EntryPoint);
	void PreConstruct(bool IsDesignTime);
	void SetData(const struct FTimerFlagViewData& Data);
	void UpdateLayout(const struct FTimerFlagViewData& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_CoreTimerFlag_C">();
	}
	static class UWBP_CoreTimerFlag_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_CoreTimerFlag_C>();
	}
};
static_assert(alignof(UWBP_CoreTimerFlag_C) == 0x000008, "Wrong alignment on UWBP_CoreTimerFlag_C");
static_assert(sizeof(UWBP_CoreTimerFlag_C) == 0x0004E8, "Wrong size on UWBP_CoreTimerFlag_C");
static_assert(offsetof(UWBP_CoreTimerFlag_C, UberGraphFrame) == 0x000388, "Member 'UWBP_CoreTimerFlag_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, Content) == 0x000390, "Member 'UWBP_CoreTimerFlag_C::Content' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, FlagBG) == 0x000398, "Member 'UWBP_CoreTimerFlag_C::FlagBG' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, TimerIMG) == 0x0003A0, "Member 'UWBP_CoreTimerFlag_C::TimerIMG' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, LimitedColor) == 0x0003A8, "Member 'UWBP_CoreTimerFlag_C::LimitedColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, LimitedTextColor) == 0x0003BC, "Member 'UWBP_CoreTimerFlag_C::LimitedTextColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, SaleColor) == 0x0003D0, "Member 'UWBP_CoreTimerFlag_C::SaleColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, SaleTextColor) == 0x0003E4, "Member 'UWBP_CoreTimerFlag_C::SaleTextColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, RiftColor) == 0x0003F8, "Member 'UWBP_CoreTimerFlag_C::RiftColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, RiftTextColor) == 0x00040C, "Member 'UWBP_CoreTimerFlag_C::RiftTextColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, DefaultColor) == 0x000420, "Member 'UWBP_CoreTimerFlag_C::DefaultColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, DefaultTextColor) == 0x000434, "Member 'UWBP_CoreTimerFlag_C::DefaultTextColor' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, ContentChildren) == 0x000448, "Member 'UWBP_CoreTimerFlag_C::ContentChildren' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, TimerTBFontStyle) == 0x000458, "Member 'UWBP_CoreTimerFlag_C::TimerTBFontStyle' has a wrong offset!");
static_assert(offsetof(UWBP_CoreTimerFlag_C, PreviewFlag) == 0x0004B8, "Member 'UWBP_CoreTimerFlag_C::PreviewFlag' has a wrong offset!");

}

