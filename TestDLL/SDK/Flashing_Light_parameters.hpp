#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Flashing_Light

#include "Basic.hpp"


namespace SDK::Params
{

// Function Flashing_Light.Flashing_Light_C.ExecuteUbergraph_Flashing_Light
// 0x0028 (0x0028 - 0x0000)
struct Flashing_Light_C_ExecuteUbergraph_Flashing_Light final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Multiply_FloatFloat_ReturnValue;          // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Lerp_ReturnValue;                         // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Lerp_Alpha_ImplicitCast;                  // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetIntensity_NewIntensity_ImplicitCast;   // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Flashing_Light_C_ExecuteUbergraph_Flashing_Light) == 0x000008, "Wrong alignment on Flashing_Light_C_ExecuteUbergraph_Flashing_Light");
static_assert(sizeof(Flashing_Light_C_ExecuteUbergraph_Flashing_Light) == 0x000028, "Wrong size on Flashing_Light_C_ExecuteUbergraph_Flashing_Light");
static_assert(offsetof(Flashing_Light_C_ExecuteUbergraph_Flashing_Light, EntryPoint) == 0x000000, "Member 'Flashing_Light_C_ExecuteUbergraph_Flashing_Light::EntryPoint' has a wrong offset!");
static_assert(offsetof(Flashing_Light_C_ExecuteUbergraph_Flashing_Light, CallFunc_Multiply_FloatFloat_ReturnValue) == 0x000004, "Member 'Flashing_Light_C_ExecuteUbergraph_Flashing_Light::CallFunc_Multiply_FloatFloat_ReturnValue' has a wrong offset!");
static_assert(offsetof(Flashing_Light_C_ExecuteUbergraph_Flashing_Light, CallFunc_Lerp_ReturnValue) == 0x000008, "Member 'Flashing_Light_C_ExecuteUbergraph_Flashing_Light::CallFunc_Lerp_ReturnValue' has a wrong offset!");
static_assert(offsetof(Flashing_Light_C_ExecuteUbergraph_Flashing_Light, CallFunc_IsValid_ReturnValue) == 0x000010, "Member 'Flashing_Light_C_ExecuteUbergraph_Flashing_Light::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Flashing_Light_C_ExecuteUbergraph_Flashing_Light, CallFunc_Lerp_Alpha_ImplicitCast) == 0x000018, "Member 'Flashing_Light_C_ExecuteUbergraph_Flashing_Light::CallFunc_Lerp_Alpha_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Flashing_Light_C_ExecuteUbergraph_Flashing_Light, CallFunc_SetIntensity_NewIntensity_ImplicitCast) == 0x000020, "Member 'Flashing_Light_C_ExecuteUbergraph_Flashing_Light::CallFunc_SetIntensity_NewIntensity_ImplicitCast' has a wrong offset!");

}

