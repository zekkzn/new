#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindowStandard

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "DeadByDaylight_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass WindowStandard.WindowStandard_C
// 0x01A8 (0x05F8 - 0x0450)
class AWindowStandard_C final : public AWindow
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0450(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          RunVaultZone1a;                                    // 0x0458(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          RunVaultZone2a;                                    // 0x0460(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_K34QuickVaultWindowInteraction_C*   K34QuickVaultWindowInteraction2;                   // 0x0468(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBP_K34QuickVaultWindowInteraction_C*   K34QuickVaultWindowInteraction1;                   // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBlockFeedbackComponent*                BlockFeedback;                                     // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HitableCollisionBox2;                              // 0x0480(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          HitableCollisionBox1;                              // 0x0488(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UK29KillerVault_C*                      K29KillerVault1;                                   // 0x0490(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UK29KillerVault_C*                      K29KillerVault2;                                   // 0x0498(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UChildActorComponent*                   NavLinkVault;                                      // 0x04A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Outline;                                           // 0x04A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InfectableZone;                                    // 0x04B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Window_Infected_Component;                         // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        LoudNoiseLocation;                                 // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDBDOutlineComponent*                   DBDOutline;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DebugPlacementCube;                                // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   MeshForOutline;                                    // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           AK_Audio_Window;                                   // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UInteractor*                            Interactor1;                                       // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          Collision;                                         // 0x04F0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractorZone2;                                   // 0x04F8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          InteractorZone1;                                   // 0x0500(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        DCL_MK_InfectedObject_Window_Top;                  // 0x0508(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        DCL_MK_InfectedObject_Window_Back;                 // 0x0510(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UDecalComponent*                        DCL_MK_InfectedObject_Window_Front;                // 0x0518(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UParticleSystemComponent*               P_MK_InfectedObject_Window;                        // 0x0520(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFrenzySlasherVault_C*                  FrenzySlasherVault2;                               // 0x0528(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UFrenzySlasherVault_C*                  FrenzySlasherVault1;                               // 0x0530(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator02;                                       // 0x0538(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Validator01;                                       // 0x0540(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultableComponent*                    Vaultable;                                         // 0x0548(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultableOutlineUpdateStrategy*        VaultableOutlineUpdateStrategy;                    // 0x0550(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   Shape_Plane;                                       // 0x0558(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x0560(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultInterruptionBack_C*               VaultInterruptionBack2Mid;                         // 0x0568(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultInterruptionBack_C*               VaultInterruptionBack2;                            // 0x0570(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultInterruptionFront_C*              VaultInterruptionFront2;                           // 0x0578(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultInterruptionFront_C*              VaultInterruptionFront2Mid;                        // 0x0580(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultInterruptionFront_C*              VaultInterruptionFrontMid;                         // 0x0588(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultInterruptionBack_C*               VaultInterruptionBackMid;                          // 0x0590(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultInterruptionBack_C*               VaultInterruptionBack;                             // 0x0598(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultInterruptionFront_C*              VaultInterruptionFront;                            // 0x05A0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URunVaultDefinition_C*                  RunVaultDefinition1;                               // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class URunVaultDefinition_C*                  RunVaultDefinition2;                               // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultFastDefinition_C*                 VaultMid2;                                         // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USlasherVaultDefinition_C*              SlasherVault2;                                     // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultDefinition_C*                     Vault2;                                            // 0x05C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultFastDefinition_C*                 VaultMid1;                                         // 0x05D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USlasherVaultDefinition_C*              SlasherVault1;                                     // 0x05D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UVaultDefinition_C*                     Vault1;                                            // 0x05E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	double                                        AllowedHeightDelta;                                // 0x05E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CanBlockVault;                                     // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void UserConstructionScript();
	void UpdateWindowNavlinks();
	void ReceiveBeginPlay();
	void OnFastVault(class ADBDPlayer* Player, class UInteractionDefinition* Interaction);
	void ExecuteUbergraph_WindowStandard(int32 EntryPoint);
	void Authority_OnVault(class ADBDPlayer* Vaulter);

	bool IsInterruptionPossible(const class ADBDPlayer* Interruptor, const class ADBDPlayer* Interruptee, const class UInteractor* Interactor, const class UInteractionDefinition* Definition, const class UInterruptionDefinition* Interruption) const;
	void GetInfectedParticles(TArray<class UParticleSystemComponent*>* InfectedParticleArray) const;
	void GetInfectedDecals(TArray<class UDecalComponent*>* InfectedDecals) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WindowStandard_C">();
	}
	static class AWindowStandard_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWindowStandard_C>();
	}
};
static_assert(alignof(AWindowStandard_C) == 0x000008, "Wrong alignment on AWindowStandard_C");
static_assert(sizeof(AWindowStandard_C) == 0x0005F8, "Wrong size on AWindowStandard_C");
static_assert(offsetof(AWindowStandard_C, UberGraphFrame) == 0x000450, "Member 'AWindowStandard_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, RunVaultZone1a) == 0x000458, "Member 'AWindowStandard_C::RunVaultZone1a' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, RunVaultZone2a) == 0x000460, "Member 'AWindowStandard_C::RunVaultZone2a' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, K34QuickVaultWindowInteraction2) == 0x000468, "Member 'AWindowStandard_C::K34QuickVaultWindowInteraction2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, K34QuickVaultWindowInteraction1) == 0x000470, "Member 'AWindowStandard_C::K34QuickVaultWindowInteraction1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, BlockFeedback) == 0x000478, "Member 'AWindowStandard_C::BlockFeedback' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, HitableCollisionBox2) == 0x000480, "Member 'AWindowStandard_C::HitableCollisionBox2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, HitableCollisionBox1) == 0x000488, "Member 'AWindowStandard_C::HitableCollisionBox1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, K29KillerVault1) == 0x000490, "Member 'AWindowStandard_C::K29KillerVault1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, K29KillerVault2) == 0x000498, "Member 'AWindowStandard_C::K29KillerVault2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, NavLinkVault) == 0x0004A0, "Member 'AWindowStandard_C::NavLinkVault' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Outline) == 0x0004A8, "Member 'AWindowStandard_C::Outline' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, InfectableZone) == 0x0004B0, "Member 'AWindowStandard_C::InfectableZone' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Window_Infected_Component) == 0x0004B8, "Member 'AWindowStandard_C::Window_Infected_Component' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, LoudNoiseLocation) == 0x0004C0, "Member 'AWindowStandard_C::LoudNoiseLocation' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, DBDOutline) == 0x0004C8, "Member 'AWindowStandard_C::DBDOutline' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, DebugPlacementCube) == 0x0004D0, "Member 'AWindowStandard_C::DebugPlacementCube' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, MeshForOutline) == 0x0004D8, "Member 'AWindowStandard_C::MeshForOutline' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, AK_Audio_Window) == 0x0004E0, "Member 'AWindowStandard_C::AK_Audio_Window' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Interactor1) == 0x0004E8, "Member 'AWindowStandard_C::Interactor1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Collision) == 0x0004F0, "Member 'AWindowStandard_C::Collision' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, InteractorZone2) == 0x0004F8, "Member 'AWindowStandard_C::InteractorZone2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, InteractorZone1) == 0x000500, "Member 'AWindowStandard_C::InteractorZone1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, DCL_MK_InfectedObject_Window_Top) == 0x000508, "Member 'AWindowStandard_C::DCL_MK_InfectedObject_Window_Top' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, DCL_MK_InfectedObject_Window_Back) == 0x000510, "Member 'AWindowStandard_C::DCL_MK_InfectedObject_Window_Back' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, DCL_MK_InfectedObject_Window_Front) == 0x000518, "Member 'AWindowStandard_C::DCL_MK_InfectedObject_Window_Front' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, P_MK_InfectedObject_Window) == 0x000520, "Member 'AWindowStandard_C::P_MK_InfectedObject_Window' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, FrenzySlasherVault2) == 0x000528, "Member 'AWindowStandard_C::FrenzySlasherVault2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, FrenzySlasherVault1) == 0x000530, "Member 'AWindowStandard_C::FrenzySlasherVault1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Validator02) == 0x000538, "Member 'AWindowStandard_C::Validator02' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Validator01) == 0x000540, "Member 'AWindowStandard_C::Validator01' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Vaultable) == 0x000548, "Member 'AWindowStandard_C::Vaultable' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultableOutlineUpdateStrategy) == 0x000550, "Member 'AWindowStandard_C::VaultableOutlineUpdateStrategy' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Shape_Plane) == 0x000558, "Member 'AWindowStandard_C::Shape_Plane' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, StaticMesh) == 0x000560, "Member 'AWindowStandard_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultInterruptionBack2Mid) == 0x000568, "Member 'AWindowStandard_C::VaultInterruptionBack2Mid' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultInterruptionBack2) == 0x000570, "Member 'AWindowStandard_C::VaultInterruptionBack2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultInterruptionFront2) == 0x000578, "Member 'AWindowStandard_C::VaultInterruptionFront2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultInterruptionFront2Mid) == 0x000580, "Member 'AWindowStandard_C::VaultInterruptionFront2Mid' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultInterruptionFrontMid) == 0x000588, "Member 'AWindowStandard_C::VaultInterruptionFrontMid' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultInterruptionBackMid) == 0x000590, "Member 'AWindowStandard_C::VaultInterruptionBackMid' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultInterruptionBack) == 0x000598, "Member 'AWindowStandard_C::VaultInterruptionBack' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultInterruptionFront) == 0x0005A0, "Member 'AWindowStandard_C::VaultInterruptionFront' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, RunVaultDefinition1) == 0x0005A8, "Member 'AWindowStandard_C::RunVaultDefinition1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, RunVaultDefinition2) == 0x0005B0, "Member 'AWindowStandard_C::RunVaultDefinition2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultMid2) == 0x0005B8, "Member 'AWindowStandard_C::VaultMid2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, SlasherVault2) == 0x0005C0, "Member 'AWindowStandard_C::SlasherVault2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Vault2) == 0x0005C8, "Member 'AWindowStandard_C::Vault2' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, VaultMid1) == 0x0005D0, "Member 'AWindowStandard_C::VaultMid1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, SlasherVault1) == 0x0005D8, "Member 'AWindowStandard_C::SlasherVault1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, Vault1) == 0x0005E0, "Member 'AWindowStandard_C::Vault1' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, AllowedHeightDelta) == 0x0005E8, "Member 'AWindowStandard_C::AllowedHeightDelta' has a wrong offset!");
static_assert(offsetof(AWindowStandard_C, CanBlockVault) == 0x0005F0, "Member 'AWindowStandard_C::CanBlockVault' has a wrong offset!");

}

