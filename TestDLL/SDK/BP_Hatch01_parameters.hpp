#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BP_Hatch01

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "AkAudio_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function BP_Hatch01.BP_Hatch01_C.SetTimer
// 0x0010 (0x0010 - 0x0000)
struct BP_Hatch01_C_SetTimer final
{
public:
	double                                        Delay;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_Authority_ResetTimer_duration_ImplicitCast; // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_SetTimer) == 0x000008, "Wrong alignment on BP_Hatch01_C_SetTimer");
static_assert(sizeof(BP_Hatch01_C_SetTimer) == 0x000010, "Wrong size on BP_Hatch01_C_SetTimer");
static_assert(offsetof(BP_Hatch01_C_SetTimer, Delay) == 0x000000, "Member 'BP_Hatch01_C_SetTimer::Delay' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_SetTimer, CallFunc_Authority_ResetTimer_duration_ImplicitCast) == 0x000008, "Member 'BP_Hatch01_C_SetTimer::CallFunc_Authority_ResetTimer_duration_ImplicitCast' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.ReceiveEndPlay
// 0x0001 (0x0001 - 0x0000)
struct BP_Hatch01_C_ReceiveEndPlay final
{
public:
	EEndPlayReason                                EndPlayReason;                                     // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_ReceiveEndPlay) == 0x000001, "Wrong alignment on BP_Hatch01_C_ReceiveEndPlay");
static_assert(sizeof(BP_Hatch01_C_ReceiveEndPlay) == 0x000001, "Wrong size on BP_Hatch01_C_ReceiveEndPlay");
static_assert(offsetof(BP_Hatch01_C_ReceiveEndPlay, EndPlayReason) == 0x000000, "Member 'BP_Hatch01_C_ReceiveEndPlay::EndPlayReason' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.OnHatchStateModified
// 0x0002 (0x0002 - 0x0000)
struct BP_Hatch01_C_OnHatchStateModified final
{
public:
	EHatchState                                   OldState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHatchState                                   NewState;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_OnHatchStateModified) == 0x000001, "Wrong alignment on BP_Hatch01_C_OnHatchStateModified");
static_assert(sizeof(BP_Hatch01_C_OnHatchStateModified) == 0x000002, "Wrong size on BP_Hatch01_C_OnHatchStateModified");
static_assert(offsetof(BP_Hatch01_C_OnHatchStateModified, OldState) == 0x000000, "Member 'BP_Hatch01_C_OnHatchStateModified::OldState' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_OnHatchStateModified, NewState) == 0x000001, "Member 'BP_Hatch01_C_OnHatchStateModified::NewState' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.ExecuteUbergraph_BP_Hatch01
// 0x0068 (0x0068 - 0x0000)
struct BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01 final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHatchState                                   K2Node_Event_oldState;                             // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EHatchState                                   K2Node_Event_newState;                             // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6[0x2];                                        // 0x0006(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDGameState*                          CallFunc_GetGameState_AsDBDGame_State;             // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0012(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_2;        // 0x0013(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_3;        // 0x0015(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_2;                // 0x0016(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_4;        // 0x0017(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanOR_ReturnValue;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x1];                                       // 0x001B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x001C(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_1;                          // 0x0030(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_1;                // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable_2;                          // 0x004C(0x0014)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue_2;                // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EEndPlayReason                                K2Node_Event_EndPlayReason;                        // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01) == 0x000008, "Wrong alignment on BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01");
static_assert(sizeof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01) == 0x000068, "Wrong size on BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, EntryPoint) == 0x000000, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::EntryPoint' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, K2Node_Event_oldState) == 0x000004, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::K2Node_Event_oldState' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, K2Node_Event_newState) == 0x000005, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::K2Node_Event_newState' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_GetGameState_AsDBDGame_State) == 0x000008, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_GetGameState_AsDBDGame_State' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000010, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_Not_PreBool_ReturnValue) == 0x000011, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000012, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_EqualEqual_ByteByte_ReturnValue_2) == 0x000013, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_EqualEqual_ByteByte_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_Not_PreBool_ReturnValue_1) == 0x000014, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_EqualEqual_ByteByte_ReturnValue_3) == 0x000015, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_EqualEqual_ByteByte_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_Not_PreBool_ReturnValue_2) == 0x000016, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_Not_PreBool_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_EqualEqual_ByteByte_ReturnValue_4) == 0x000017, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_EqualEqual_ByteByte_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_BooleanAND_ReturnValue) == 0x000018, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_BooleanAND_ReturnValue_1) == 0x000019, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_BooleanOR_ReturnValue) == 0x00001A, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_BooleanOR_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, Temp_delegate_Variable) == 0x00001C, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, Temp_delegate_Variable_1) == 0x000030, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::Temp_delegate_Variable_1' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_PostAkEvent_ReturnValue) == 0x000044, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_PostAkEvent_ReturnValue_1) == 0x000048, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_PostAkEvent_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, Temp_delegate_Variable_2) == 0x00004C, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::Temp_delegate_Variable_2' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, CallFunc_PostAkEvent_ReturnValue_2) == 0x000060, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::CallFunc_PostAkEvent_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01, K2Node_Event_EndPlayReason) == 0x000064, "Member 'BP_Hatch01_C_ExecuteUbergraph_BP_Hatch01::K2Node_Event_EndPlayReason' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.ChangeVisibility
// 0x0005 (0x0005 - 0x0000)
struct BP_Hatch01_C_ChangeVisibility final
{
public:
	EHatchState                                   NewState;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue_1;        // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x0003(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_ChangeVisibility) == 0x000001, "Wrong alignment on BP_Hatch01_C_ChangeVisibility");
static_assert(sizeof(BP_Hatch01_C_ChangeVisibility) == 0x000005, "Wrong size on BP_Hatch01_C_ChangeVisibility");
static_assert(offsetof(BP_Hatch01_C_ChangeVisibility, NewState) == 0x000000, "Member 'BP_Hatch01_C_ChangeVisibility::NewState' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ChangeVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000001, "Member 'BP_Hatch01_C_ChangeVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ChangeVisibility, CallFunc_EqualEqual_ByteByte_ReturnValue_1) == 0x000002, "Member 'BP_Hatch01_C_ChangeVisibility::CallFunc_EqualEqual_ByteByte_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ChangeVisibility, CallFunc_Not_PreBool_ReturnValue) == 0x000003, "Member 'BP_Hatch01_C_ChangeVisibility::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_ChangeVisibility, CallFunc_Not_PreBool_ReturnValue_1) == 0x000004, "Member 'BP_Hatch01_C_ChangeVisibility::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.Authority_DestroyOverlappingItems
// 0x0058 (0x0058 - 0x0000)
struct BP_Hatch01_C_Authority_DestroyOverlappingItems final
{
public:
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_HasAuthority_ReturnValue;                 // 0x000C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CallFunc_GetOverlappingActors_OverlappingActors;   // 0x0010(0x0010)(ReferenceParm)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_Array_Get_Item;                           // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACollectable*                           K2Node_DynamicCast_AsCollectable;                  // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsCollected_ReturnValue;                  // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ABearTrap*                              K2Node_DynamicCast_AsBear_Trap;                    // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_Authority_DestroyOverlappingItems) == 0x000008, "Wrong alignment on BP_Hatch01_C_Authority_DestroyOverlappingItems");
static_assert(sizeof(BP_Hatch01_C_Authority_DestroyOverlappingItems) == 0x000058, "Wrong size on BP_Hatch01_C_Authority_DestroyOverlappingItems");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, Temp_int_Array_Index_Variable) == 0x000000, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, Temp_int_Loop_Counter_Variable) == 0x000004, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, CallFunc_Add_IntInt_ReturnValue) == 0x000008, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, CallFunc_HasAuthority_ReturnValue) == 0x00000C, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::CallFunc_HasAuthority_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, CallFunc_GetOverlappingActors_OverlappingActors) == 0x000010, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::CallFunc_GetOverlappingActors_OverlappingActors' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, CallFunc_Array_Length_ReturnValue) == 0x000020, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, CallFunc_Array_Get_Item) == 0x000028, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, CallFunc_Less_IntInt_ReturnValue) == 0x000030, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, K2Node_DynamicCast_AsCollectable) == 0x000038, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::K2Node_DynamicCast_AsCollectable' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, K2Node_DynamicCast_bSuccess) == 0x000040, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, CallFunc_IsCollected_ReturnValue) == 0x000041, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::CallFunc_IsCollected_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, K2Node_DynamicCast_AsBear_Trap) == 0x000048, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::K2Node_DynamicCast_AsBear_Trap' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_Authority_DestroyOverlappingItems, K2Node_DynamicCast_bSuccess_1) == 0x000050, "Member 'BP_Hatch01_C_Authority_DestroyOverlappingItems::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.IsInterruptionPossible
// 0x0030 (0x0030 - 0x0000)
struct BP_Hatch01_C_IsInterruptionPossible final
{
public:
	const class ADBDPlayer*                       Interruptor;                                       // 0x0000(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class ADBDPlayer*                       Interruptee;                                       // 0x0008(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	const class UInteractor*                      Interactor;                                        // 0x0010(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	const class UInteractionDefinition*           Definition;                                        // 0x0018(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	const class UInterruptionDefinition*          Interruption;                                      // 0x0020(0x0008)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          ReturnValue;                                       // 0x0028(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_IsInterruptionPossible) == 0x000008, "Wrong alignment on BP_Hatch01_C_IsInterruptionPossible");
static_assert(sizeof(BP_Hatch01_C_IsInterruptionPossible) == 0x000030, "Wrong size on BP_Hatch01_C_IsInterruptionPossible");
static_assert(offsetof(BP_Hatch01_C_IsInterruptionPossible, Interruptor) == 0x000000, "Member 'BP_Hatch01_C_IsInterruptionPossible::Interruptor' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_IsInterruptionPossible, Interruptee) == 0x000008, "Member 'BP_Hatch01_C_IsInterruptionPossible::Interruptee' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_IsInterruptionPossible, Interactor) == 0x000010, "Member 'BP_Hatch01_C_IsInterruptionPossible::Interactor' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_IsInterruptionPossible, Definition) == 0x000018, "Member 'BP_Hatch01_C_IsInterruptionPossible::Definition' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_IsInterruptionPossible, Interruption) == 0x000020, "Member 'BP_Hatch01_C_IsInterruptionPossible::Interruption' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_IsInterruptionPossible, ReturnValue) == 0x000028, "Member 'BP_Hatch01_C_IsInterruptionPossible::ReturnValue' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.GetHatchCenter
// 0x0008 (0x0008 - 0x0000)
struct BP_Hatch01_C_GetHatchCenter final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_GetHatchCenter) == 0x000008, "Wrong alignment on BP_Hatch01_C_GetHatchCenter");
static_assert(sizeof(BP_Hatch01_C_GetHatchCenter) == 0x000008, "Wrong size on BP_Hatch01_C_GetHatchCenter");
static_assert(offsetof(BP_Hatch01_C_GetHatchCenter, ReturnValue) == 0x000000, "Member 'BP_Hatch01_C_GetHatchCenter::ReturnValue' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.GetGameState
// 0x0020 (0x0020 - 0x0000)
struct BP_Hatch01_C_GetGameState final
{
public:
	class ADBDGameState*                          AsDBDGame_State;                                   // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AGameStateBase*                         CallFunc_GetGameState_ReturnValue;                 // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class ADBDGameState*                          K2Node_DynamicCast_AsDBDGame_State;                // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_GetGameState) == 0x000008, "Wrong alignment on BP_Hatch01_C_GetGameState");
static_assert(sizeof(BP_Hatch01_C_GetGameState) == 0x000020, "Wrong size on BP_Hatch01_C_GetGameState");
static_assert(offsetof(BP_Hatch01_C_GetGameState, AsDBDGame_State) == 0x000000, "Member 'BP_Hatch01_C_GetGameState::AsDBDGame_State' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_GetGameState, CallFunc_GetGameState_ReturnValue) == 0x000008, "Member 'BP_Hatch01_C_GetGameState::CallFunc_GetGameState_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_GetGameState, K2Node_DynamicCast_AsDBDGame_State) == 0x000010, "Member 'BP_Hatch01_C_GetGameState::K2Node_DynamicCast_AsDBDGame_State' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_GetGameState, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Hatch01_C_GetGameState::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.GetGameInstance
// 0x0020 (0x0020 - 0x0000)
struct BP_Hatch01_C_GetGameInstance final
{
public:
	class UDBDGameInstance*                       AsDBDGame_Instance;                                // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UGameInstance*                          CallFunc_GetGameInstance_ReturnValue;              // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UDBDGameInstance*                       K2Node_DynamicCast_AsDBDGame_Instance;             // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_GetGameInstance) == 0x000008, "Wrong alignment on BP_Hatch01_C_GetGameInstance");
static_assert(sizeof(BP_Hatch01_C_GetGameInstance) == 0x000020, "Wrong size on BP_Hatch01_C_GetGameInstance");
static_assert(offsetof(BP_Hatch01_C_GetGameInstance, AsDBDGame_Instance) == 0x000000, "Member 'BP_Hatch01_C_GetGameInstance::AsDBDGame_Instance' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_GetGameInstance, CallFunc_GetGameInstance_ReturnValue) == 0x000008, "Member 'BP_Hatch01_C_GetGameInstance::CallFunc_GetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_GetGameInstance, K2Node_DynamicCast_AsDBDGame_Instance) == 0x000010, "Member 'BP_Hatch01_C_GetGameInstance::K2Node_DynamicCast_AsDBDGame_Instance' has a wrong offset!");
static_assert(offsetof(BP_Hatch01_C_GetGameInstance, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'BP_Hatch01_C_GetGameInstance::K2Node_DynamicCast_bSuccess' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.GetEscapeFocalPoint
// 0x0008 (0x0008 - 0x0000)
struct BP_Hatch01_C_GetEscapeFocalPoint final
{
public:
	class USceneComponent*                        ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_GetEscapeFocalPoint) == 0x000008, "Wrong alignment on BP_Hatch01_C_GetEscapeFocalPoint");
static_assert(sizeof(BP_Hatch01_C_GetEscapeFocalPoint) == 0x000008, "Wrong size on BP_Hatch01_C_GetEscapeFocalPoint");
static_assert(offsetof(BP_Hatch01_C_GetEscapeFocalPoint, ReturnValue) == 0x000000, "Member 'BP_Hatch01_C_GetEscapeFocalPoint::ReturnValue' has a wrong offset!");

// Function BP_Hatch01.BP_Hatch01_C.GetAnimationMontageSlave
// 0x0008 (0x0008 - 0x0000)
struct BP_Hatch01_C_GetAnimationMontageSlave final
{
public:
	class UAnimationMontageSlave*                 ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BP_Hatch01_C_GetAnimationMontageSlave) == 0x000008, "Wrong alignment on BP_Hatch01_C_GetAnimationMontageSlave");
static_assert(sizeof(BP_Hatch01_C_GetAnimationMontageSlave) == 0x000008, "Wrong size on BP_Hatch01_C_GetAnimationMontageSlave");
static_assert(offsetof(BP_Hatch01_C_GetAnimationMontageSlave, ReturnValue) == 0x000000, "Member 'BP_Hatch01_C_GetAnimationMontageSlave::ReturnValue' has a wrong offset!");

}

