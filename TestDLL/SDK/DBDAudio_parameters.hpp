#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: DBDAudio

#include "Basic.hpp"

#include "AkAudio_structs.hpp"


namespace SDK::Params
{

// Function DBDAudio.AudioUtilities.DBD_LoadAudioBank
// 0x0008 (0x0008 - 0x0000)
struct AudioUtilities_DBD_LoadAudioBank final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioUtilities_DBD_LoadAudioBank) == 0x000008, "Wrong alignment on AudioUtilities_DBD_LoadAudioBank");
static_assert(sizeof(AudioUtilities_DBD_LoadAudioBank) == 0x000008, "Wrong size on AudioUtilities_DBD_LoadAudioBank");
static_assert(offsetof(AudioUtilities_DBD_LoadAudioBank, Bank) == 0x000000, "Member 'AudioUtilities_DBD_LoadAudioBank::Bank' has a wrong offset!");

// Function DBDAudio.AudioUtilities.DBD_LoadAudioBankPersistent
// 0x0008 (0x0008 - 0x0000)
struct AudioUtilities_DBD_LoadAudioBankPersistent final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioUtilities_DBD_LoadAudioBankPersistent) == 0x000008, "Wrong alignment on AudioUtilities_DBD_LoadAudioBankPersistent");
static_assert(sizeof(AudioUtilities_DBD_LoadAudioBankPersistent) == 0x000008, "Wrong size on AudioUtilities_DBD_LoadAudioBankPersistent");
static_assert(offsetof(AudioUtilities_DBD_LoadAudioBankPersistent, Bank) == 0x000000, "Member 'AudioUtilities_DBD_LoadAudioBankPersistent::Bank' has a wrong offset!");

// Function DBDAudio.AudioUtilities.DBD_LoadAudioBankPersistentWithCallback
// 0x0020 (0x0020 - 0x0000)
struct AudioUtilities_DBD_LoadAudioBankPersistentWithCallback final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkResult Result)>             bankLoadedCallback;                                // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioUtilities_DBD_LoadAudioBankPersistentWithCallback) == 0x000008, "Wrong alignment on AudioUtilities_DBD_LoadAudioBankPersistentWithCallback");
static_assert(sizeof(AudioUtilities_DBD_LoadAudioBankPersistentWithCallback) == 0x000020, "Wrong size on AudioUtilities_DBD_LoadAudioBankPersistentWithCallback");
static_assert(offsetof(AudioUtilities_DBD_LoadAudioBankPersistentWithCallback, Bank) == 0x000000, "Member 'AudioUtilities_DBD_LoadAudioBankPersistentWithCallback::Bank' has a wrong offset!");
static_assert(offsetof(AudioUtilities_DBD_LoadAudioBankPersistentWithCallback, bankLoadedCallback) == 0x000008, "Member 'AudioUtilities_DBD_LoadAudioBankPersistentWithCallback::bankLoadedCallback' has a wrong offset!");

// Function DBDAudio.AudioUtilities.DBD_LoadAudioBankSynchronous
// 0x0010 (0x0010 - 0x0000)
struct AudioUtilities_DBD_LoadAudioBankSynchronous final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkResult                                     ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioUtilities_DBD_LoadAudioBankSynchronous) == 0x000008, "Wrong alignment on AudioUtilities_DBD_LoadAudioBankSynchronous");
static_assert(sizeof(AudioUtilities_DBD_LoadAudioBankSynchronous) == 0x000010, "Wrong size on AudioUtilities_DBD_LoadAudioBankSynchronous");
static_assert(offsetof(AudioUtilities_DBD_LoadAudioBankSynchronous, Bank) == 0x000000, "Member 'AudioUtilities_DBD_LoadAudioBankSynchronous::Bank' has a wrong offset!");
static_assert(offsetof(AudioUtilities_DBD_LoadAudioBankSynchronous, ReturnValue) == 0x000008, "Member 'AudioUtilities_DBD_LoadAudioBankSynchronous::ReturnValue' has a wrong offset!");

// Function DBDAudio.AudioUtilities.DBD_LoadAudioBankWithCallback
// 0x0020 (0x0020 - 0x0000)
struct AudioUtilities_DBD_LoadAudioBankWithCallback final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkResult Result)>             bankLoadedCallback;                                // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioUtilities_DBD_LoadAudioBankWithCallback) == 0x000008, "Wrong alignment on AudioUtilities_DBD_LoadAudioBankWithCallback");
static_assert(sizeof(AudioUtilities_DBD_LoadAudioBankWithCallback) == 0x000020, "Wrong size on AudioUtilities_DBD_LoadAudioBankWithCallback");
static_assert(offsetof(AudioUtilities_DBD_LoadAudioBankWithCallback, Bank) == 0x000000, "Member 'AudioUtilities_DBD_LoadAudioBankWithCallback::Bank' has a wrong offset!");
static_assert(offsetof(AudioUtilities_DBD_LoadAudioBankWithCallback, bankLoadedCallback) == 0x000008, "Member 'AudioUtilities_DBD_LoadAudioBankWithCallback::bankLoadedCallback' has a wrong offset!");

// Function DBDAudio.AudioUtilities.DBD_UnloadAudioBank
// 0x0008 (0x0008 - 0x0000)
struct AudioUtilities_DBD_UnloadAudioBank final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioUtilities_DBD_UnloadAudioBank) == 0x000008, "Wrong alignment on AudioUtilities_DBD_UnloadAudioBank");
static_assert(sizeof(AudioUtilities_DBD_UnloadAudioBank) == 0x000008, "Wrong size on AudioUtilities_DBD_UnloadAudioBank");
static_assert(offsetof(AudioUtilities_DBD_UnloadAudioBank, Bank) == 0x000000, "Member 'AudioUtilities_DBD_UnloadAudioBank::Bank' has a wrong offset!");

// Function DBDAudio.AudioUtilities.DBD_UnloadAudioBankWithCallback
// 0x0020 (0x0020 - 0x0000)
struct AudioUtilities_DBD_UnloadAudioBankWithCallback final
{
public:
	class UAkAudioBank*                           Bank;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(EAkResult Result)>             bankUnloadedCallback;                              // 0x0008(0x0014)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(AudioUtilities_DBD_UnloadAudioBankWithCallback) == 0x000008, "Wrong alignment on AudioUtilities_DBD_UnloadAudioBankWithCallback");
static_assert(sizeof(AudioUtilities_DBD_UnloadAudioBankWithCallback) == 0x000020, "Wrong size on AudioUtilities_DBD_UnloadAudioBankWithCallback");
static_assert(offsetof(AudioUtilities_DBD_UnloadAudioBankWithCallback, Bank) == 0x000000, "Member 'AudioUtilities_DBD_UnloadAudioBankWithCallback::Bank' has a wrong offset!");
static_assert(offsetof(AudioUtilities_DBD_UnloadAudioBankWithCallback, bankUnloadedCallback) == 0x000008, "Member 'AudioUtilities_DBD_UnloadAudioBankWithCallback::bankUnloadedCallback' has a wrong offset!");

// Function DBDAudio.AudioUtilities.PostAkAudioEvent
// 0x0008 (0x0008 - 0x0000)
struct AudioUtilities_PostAkAudioEvent final
{
public:
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioUtilities_PostAkAudioEvent) == 0x000008, "Wrong alignment on AudioUtilities_PostAkAudioEvent");
static_assert(sizeof(AudioUtilities_PostAkAudioEvent) == 0x000008, "Wrong size on AudioUtilities_PostAkAudioEvent");
static_assert(offsetof(AudioUtilities_PostAkAudioEvent, AudioEvent) == 0x000000, "Member 'AudioUtilities_PostAkAudioEvent::AudioEvent' has a wrong offset!");

// Function DBDAudio.AudioUtilities.PostEventByNameOnComponent
// 0x0018 (0x0018 - 0x0000)
struct AudioUtilities_PostEventByNameOnComponent final
{
public:
	class UAkComponent*                           Component;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 AudioEventName;                                    // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AudioUtilities_PostEventByNameOnComponent) == 0x000008, "Wrong alignment on AudioUtilities_PostEventByNameOnComponent");
static_assert(sizeof(AudioUtilities_PostEventByNameOnComponent) == 0x000018, "Wrong size on AudioUtilities_PostEventByNameOnComponent");
static_assert(offsetof(AudioUtilities_PostEventByNameOnComponent, Component) == 0x000000, "Member 'AudioUtilities_PostEventByNameOnComponent::Component' has a wrong offset!");
static_assert(offsetof(AudioUtilities_PostEventByNameOnComponent, AudioEventName) == 0x000008, "Member 'AudioUtilities_PostEventByNameOnComponent::AudioEventName' has a wrong offset!");

// Function DBDAudio.InteractionAudioComponent.PostAkEvent
// 0x0010 (0x0010 - 0x0000)
struct InteractionAudioComponent_PostAkEvent final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(InteractionAudioComponent_PostAkEvent) == 0x000008, "Wrong alignment on InteractionAudioComponent_PostAkEvent");
static_assert(sizeof(InteractionAudioComponent_PostAkEvent) == 0x000010, "Wrong size on InteractionAudioComponent_PostAkEvent");
static_assert(offsetof(InteractionAudioComponent_PostAkEvent, AkEvent) == 0x000000, "Member 'InteractionAudioComponent_PostAkEvent::AkEvent' has a wrong offset!");
static_assert(offsetof(InteractionAudioComponent_PostAkEvent, ReturnValue) == 0x000008, "Member 'InteractionAudioComponent_PostAkEvent::ReturnValue' has a wrong offset!");

// Function DBDAudio.InteractionAudioComponent.GetCalculatedAudioRadius
// 0x0004 (0x0004 - 0x0000)
struct InteractionAudioComponent_GetCalculatedAudioRadius final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(InteractionAudioComponent_GetCalculatedAudioRadius) == 0x000004, "Wrong alignment on InteractionAudioComponent_GetCalculatedAudioRadius");
static_assert(sizeof(InteractionAudioComponent_GetCalculatedAudioRadius) == 0x000004, "Wrong size on InteractionAudioComponent_GetCalculatedAudioRadius");
static_assert(offsetof(InteractionAudioComponent_GetCalculatedAudioRadius, ReturnValue) == 0x000000, "Member 'InteractionAudioComponent_GetCalculatedAudioRadius::ReturnValue' has a wrong offset!");

}

