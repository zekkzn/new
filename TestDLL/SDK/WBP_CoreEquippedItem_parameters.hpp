#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_CoreEquippedItem

#include "Basic.hpp"

#include "InputCore_structs.hpp"
#include "DBDSharedTypes_structs.hpp"
#include "DBDUIViewInterfaces_structs.hpp"


namespace SDK::Params
{

// Function WBP_CoreEquippedItem.WBP_CoreEquippedItem_C.UpdateFakeItemVisuals
// 0x0080 (0x0080 - 0x0000)
struct WBP_CoreEquippedItem_C_UpdateFakeItemVisuals final
{
public:
	TSoftObjectPtr<class UTexture2D>              Param_FakeItemIcon;                                // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, UObjectWrapper, HasGetValueTypeHash)
	struct FKey                                   InputKey;                                          // 0x0038(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0058(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x0060(0x0018)()
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Key_IsValid_ReturnValue;                  // 0x0079(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x007A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreEquippedItem_C_UpdateFakeItemVisuals) == 0x000008, "Wrong alignment on WBP_CoreEquippedItem_C_UpdateFakeItemVisuals");
static_assert(sizeof(WBP_CoreEquippedItem_C_UpdateFakeItemVisuals) == 0x000080, "Wrong size on WBP_CoreEquippedItem_C_UpdateFakeItemVisuals");
static_assert(offsetof(WBP_CoreEquippedItem_C_UpdateFakeItemVisuals, Param_FakeItemIcon) == 0x000000, "Member 'WBP_CoreEquippedItem_C_UpdateFakeItemVisuals::Param_FakeItemIcon' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_UpdateFakeItemVisuals, InputKey) == 0x000038, "Member 'WBP_CoreEquippedItem_C_UpdateFakeItemVisuals::InputKey' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_UpdateFakeItemVisuals, Count) == 0x000058, "Member 'WBP_CoreEquippedItem_C_UpdateFakeItemVisuals::Count' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_UpdateFakeItemVisuals, CallFunc_Conv_IntToText_ReturnValue) == 0x000060, "Member 'WBP_CoreEquippedItem_C_UpdateFakeItemVisuals::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_UpdateFakeItemVisuals, CallFunc_Greater_IntInt_ReturnValue) == 0x000078, "Member 'WBP_CoreEquippedItem_C_UpdateFakeItemVisuals::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_UpdateFakeItemVisuals, CallFunc_Key_IsValid_ReturnValue) == 0x000079, "Member 'WBP_CoreEquippedItem_C_UpdateFakeItemVisuals::CallFunc_Key_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_UpdateFakeItemVisuals, CallFunc_Not_PreBool_ReturnValue) == 0x00007A, "Member 'WBP_CoreEquippedItem_C_UpdateFakeItemVisuals::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");

// Function WBP_CoreEquippedItem.WBP_CoreEquippedItem_C.OnControlModeChangedBP
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreEquippedItem_C_OnControlModeChangedBP final
{
public:
	EControlMode                                  ControlMode;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreEquippedItem_C_OnControlModeChangedBP) == 0x000001, "Wrong alignment on WBP_CoreEquippedItem_C_OnControlModeChangedBP");
static_assert(sizeof(WBP_CoreEquippedItem_C_OnControlModeChangedBP) == 0x000001, "Wrong size on WBP_CoreEquippedItem_C_OnControlModeChangedBP");
static_assert(offsetof(WBP_CoreEquippedItem_C_OnControlModeChangedBP, ControlMode) == 0x000000, "Member 'WBP_CoreEquippedItem_C_OnControlModeChangedBP::ControlMode' has a wrong offset!");

// Function WBP_CoreEquippedItem.WBP_CoreEquippedItem_C.UpdateControlMode
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreEquippedItem_C_UpdateControlMode final
{
public:
	EControlMode                                  NewControlMode;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreEquippedItem_C_UpdateControlMode) == 0x000001, "Wrong alignment on WBP_CoreEquippedItem_C_UpdateControlMode");
static_assert(sizeof(WBP_CoreEquippedItem_C_UpdateControlMode) == 0x000001, "Wrong size on WBP_CoreEquippedItem_C_UpdateControlMode");
static_assert(offsetof(WBP_CoreEquippedItem_C_UpdateControlMode, NewControlMode) == 0x000000, "Member 'WBP_CoreEquippedItem_C_UpdateControlMode::NewControlMode' has a wrong offset!");

// Function WBP_CoreEquippedItem.WBP_CoreEquippedItem_C.ExecuteUbergraph_WBP_CoreEquippedItem
// 0x0238 (0x0238 - 0x0000)
struct WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IItemBundleViewInterface> K2Node_DynamicCast_AsItem_Bundle_View_Interface;   // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EControlMode                                  K2Node_Event_controlMode;                          // 0x0019(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_isHoldingFakeItem;                    // 0x001A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1B[0x5];                                       // 0x001B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              K2Node_Event_fakeItemIcon;                         // 0x0020(0x0038)(ConstParm, UObjectWrapper, HasGetValueTypeHash)
	struct FKey                                   K2Node_Event_inputKey;                             // 0x0058(0x0020)(HasGetValueTypeHash)
	int32                                         K2Node_Event_count;                                // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue;                  // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Not_PreBool_ReturnValue_1;                // 0x007D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_IsHoldingFakeItem;              // 0x007E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_IsActive;                             // 0x007F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue_1;              // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_BoolBool_ReturnValue;            // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IItemBundleViewInterface> K2Node_DynamicCast_AsItem_Bundle_View_Interface_1; // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_fullClear;                            // 0x00B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B2[0x6];                                       // 0x00B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FItemBundleViewData                    K2Node_Event_itemBundleData;                       // 0x00B8(0x0180)(ConstParm)
};
static_assert(alignof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem) == 0x000008, "Wrong alignment on WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem");
static_assert(sizeof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem) == 0x000238, "Wrong size on WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, EntryPoint) == 0x000000, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_DynamicCast_AsItem_Bundle_View_Interface) == 0x000008, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_DynamicCast_AsItem_Bundle_View_Interface' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_DynamicCast_bSuccess) == 0x000018, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_Event_controlMode) == 0x000019, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_Event_controlMode' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_Event_isHoldingFakeItem) == 0x00001A, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_Event_isHoldingFakeItem' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_Event_fakeItemIcon) == 0x000020, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_Event_fakeItemIcon' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_Event_inputKey) == 0x000058, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_Event_inputKey' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_Event_count) == 0x000078, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_Event_count' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, CallFunc_Not_PreBool_ReturnValue) == 0x00007C, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::CallFunc_Not_PreBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, CallFunc_Not_PreBool_ReturnValue_1) == 0x00007D, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::CallFunc_Not_PreBool_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_CustomEvent_IsHoldingFakeItem) == 0x00007E, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_CustomEvent_IsHoldingFakeItem' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_Event_IsActive) == 0x00007F, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_Event_IsActive' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, CallFunc_BooleanAND_ReturnValue) == 0x000080, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, CallFunc_PlayAnimation_ReturnValue) == 0x000088, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, CallFunc_PlayAnimation_ReturnValue_1) == 0x000090, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::CallFunc_PlayAnimation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, CallFunc_NotEqual_BoolBool_ReturnValue) == 0x000098, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::CallFunc_NotEqual_BoolBool_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_DynamicCast_AsItem_Bundle_View_Interface_1) == 0x0000A0, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_DynamicCast_AsItem_Bundle_View_Interface_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_DynamicCast_bSuccess_1) == 0x0000B0, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_Event_fullClear) == 0x0000B1, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_Event_fullClear' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem, K2Node_Event_itemBundleData) == 0x0000B8, "Member 'WBP_CoreEquippedItem_C_ExecuteUbergraph_WBP_CoreEquippedItem::K2Node_Event_itemBundleData' has a wrong offset!");

// Function WBP_CoreEquippedItem.WBP_CoreEquippedItem_C.SetFakeItem
// 0x0068 (0x0068 - 0x0000)
struct WBP_CoreEquippedItem_C_SetFakeItem final
{
public:
	bool                                          IsHoldingFakeItem;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UTexture2D>              Param_FakeItemIcon;                                // 0x0008(0x0038)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm, UObjectWrapper, HasGetValueTypeHash)
	struct FKey                                   InputKey;                                          // 0x0040(0x0020)(BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
	int32                                         Count;                                             // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreEquippedItem_C_SetFakeItem) == 0x000008, "Wrong alignment on WBP_CoreEquippedItem_C_SetFakeItem");
static_assert(sizeof(WBP_CoreEquippedItem_C_SetFakeItem) == 0x000068, "Wrong size on WBP_CoreEquippedItem_C_SetFakeItem");
static_assert(offsetof(WBP_CoreEquippedItem_C_SetFakeItem, IsHoldingFakeItem) == 0x000000, "Member 'WBP_CoreEquippedItem_C_SetFakeItem::IsHoldingFakeItem' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_SetFakeItem, Param_FakeItemIcon) == 0x000008, "Member 'WBP_CoreEquippedItem_C_SetFakeItem::Param_FakeItemIcon' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_SetFakeItem, InputKey) == 0x000040, "Member 'WBP_CoreEquippedItem_C_SetFakeItem::InputKey' has a wrong offset!");
static_assert(offsetof(WBP_CoreEquippedItem_C_SetFakeItem, Count) == 0x000060, "Member 'WBP_CoreEquippedItem_C_SetFakeItem::Count' has a wrong offset!");

// Function WBP_CoreEquippedItem.WBP_CoreEquippedItem_C.SetData
// 0x0180 (0x0180 - 0x0000)
struct WBP_CoreEquippedItem_C_SetData final
{
public:
	struct FItemBundleViewData                    ItemBundleData;                                    // 0x0000(0x0180)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
};
static_assert(alignof(WBP_CoreEquippedItem_C_SetData) == 0x000008, "Wrong alignment on WBP_CoreEquippedItem_C_SetData");
static_assert(sizeof(WBP_CoreEquippedItem_C_SetData) == 0x000180, "Wrong size on WBP_CoreEquippedItem_C_SetData");
static_assert(offsetof(WBP_CoreEquippedItem_C_SetData, ItemBundleData) == 0x000000, "Member 'WBP_CoreEquippedItem_C_SetData::ItemBundleData' has a wrong offset!");

// Function WBP_CoreEquippedItem.WBP_CoreEquippedItem_C.SetActiveState
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreEquippedItem_C_SetActiveState final
{
public:
	bool                                          IsActive;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreEquippedItem_C_SetActiveState) == 0x000001, "Wrong alignment on WBP_CoreEquippedItem_C_SetActiveState");
static_assert(sizeof(WBP_CoreEquippedItem_C_SetActiveState) == 0x000001, "Wrong size on WBP_CoreEquippedItem_C_SetActiveState");
static_assert(offsetof(WBP_CoreEquippedItem_C_SetActiveState, IsActive) == 0x000000, "Member 'WBP_CoreEquippedItem_C_SetActiveState::IsActive' has a wrong offset!");

// Function WBP_CoreEquippedItem.WBP_CoreEquippedItem_C.PlayFakeItemAnimation
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreEquippedItem_C_PlayFakeItemAnimation final
{
public:
	bool                                          IsHoldingFakeItem;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreEquippedItem_C_PlayFakeItemAnimation) == 0x000001, "Wrong alignment on WBP_CoreEquippedItem_C_PlayFakeItemAnimation");
static_assert(sizeof(WBP_CoreEquippedItem_C_PlayFakeItemAnimation) == 0x000001, "Wrong size on WBP_CoreEquippedItem_C_PlayFakeItemAnimation");
static_assert(offsetof(WBP_CoreEquippedItem_C_PlayFakeItemAnimation, IsHoldingFakeItem) == 0x000000, "Member 'WBP_CoreEquippedItem_C_PlayFakeItemAnimation::IsHoldingFakeItem' has a wrong offset!");

// Function WBP_CoreEquippedItem.WBP_CoreEquippedItem_C.ClearData
// 0x0001 (0x0001 - 0x0000)
struct WBP_CoreEquippedItem_C_ClearData final
{
public:
	bool                                          FullClear;                                         // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_CoreEquippedItem_C_ClearData) == 0x000001, "Wrong alignment on WBP_CoreEquippedItem_C_ClearData");
static_assert(sizeof(WBP_CoreEquippedItem_C_ClearData) == 0x000001, "Wrong size on WBP_CoreEquippedItem_C_ClearData");
static_assert(offsetof(WBP_CoreEquippedItem_C_ClearData, FullClear) == 0x000000, "Member 'WBP_CoreEquippedItem_C_ClearData::FullClear' has a wrong offset!");

}

