#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GFXUtilities

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"
#include "GFXUtilities_structs.hpp"
#include "GameplayTags_structs.hpp"


namespace SDK::Params
{

// Function GFXUtilities.BatchMeshCommands.AddGroup
// 0x0020 (0x0020 - 0x0000)
struct BatchMeshCommands_AddGroup final
{
public:
	struct FMaterialNamedGroup                    Group;                                             // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_AddGroup) == 0x000008, "Wrong alignment on BatchMeshCommands_AddGroup");
static_assert(sizeof(BatchMeshCommands_AddGroup) == 0x000020, "Wrong size on BatchMeshCommands_AddGroup");
static_assert(offsetof(BatchMeshCommands_AddGroup, Group) == 0x000000, "Member 'BatchMeshCommands_AddGroup::Group' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.BatchSetComponentTickEnabled
// 0x0001 (0x0001 - 0x0000)
struct BatchMeshCommands_BatchSetComponentTickEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_BatchSetComponentTickEnabled) == 0x000001, "Wrong alignment on BatchMeshCommands_BatchSetComponentTickEnabled");
static_assert(sizeof(BatchMeshCommands_BatchSetComponentTickEnabled) == 0x000001, "Wrong size on BatchMeshCommands_BatchSetComponentTickEnabled");
static_assert(offsetof(BatchMeshCommands_BatchSetComponentTickEnabled, Enabled) == 0x000000, "Member 'BatchMeshCommands_BatchSetComponentTickEnabled::Enabled' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.BatchSetSkipComponentAndChildrenTransformUpdate
// 0x0001 (0x0001 - 0x0000)
struct BatchMeshCommands_BatchSetSkipComponentAndChildrenTransformUpdate final
{
public:
	bool                                          Skip;                                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_BatchSetSkipComponentAndChildrenTransformUpdate) == 0x000001, "Wrong alignment on BatchMeshCommands_BatchSetSkipComponentAndChildrenTransformUpdate");
static_assert(sizeof(BatchMeshCommands_BatchSetSkipComponentAndChildrenTransformUpdate) == 0x000001, "Wrong size on BatchMeshCommands_BatchSetSkipComponentAndChildrenTransformUpdate");
static_assert(offsetof(BatchMeshCommands_BatchSetSkipComponentAndChildrenTransformUpdate, Skip) == 0x000000, "Member 'BatchMeshCommands_BatchSetSkipComponentAndChildrenTransformUpdate::Skip' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.BatchSetVisibility
// 0x0002 (0x0002 - 0x0000)
struct BatchMeshCommands_BatchSetVisibility final
{
public:
	bool                                          bNewVisibility;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPropagateToChildren;                              // 0x0001(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_BatchSetVisibility) == 0x000001, "Wrong alignment on BatchMeshCommands_BatchSetVisibility");
static_assert(sizeof(BatchMeshCommands_BatchSetVisibility) == 0x000002, "Wrong size on BatchMeshCommands_BatchSetVisibility");
static_assert(offsetof(BatchMeshCommands_BatchSetVisibility, bNewVisibility) == 0x000000, "Member 'BatchMeshCommands_BatchSetVisibility::bNewVisibility' has a wrong offset!");
static_assert(offsetof(BatchMeshCommands_BatchSetVisibility, bPropagateToChildren) == 0x000001, "Member 'BatchMeshCommands_BatchSetVisibility::bPropagateToChildren' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.CopyFirstScalarParameter
// 0x0014 (0x0014 - 0x0000)
struct BatchMeshCommands_CopyFirstScalarParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutValue;                                          // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0010(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(BatchMeshCommands_CopyFirstScalarParameter) == 0x000004, "Wrong alignment on BatchMeshCommands_CopyFirstScalarParameter");
static_assert(sizeof(BatchMeshCommands_CopyFirstScalarParameter) == 0x000014, "Wrong size on BatchMeshCommands_CopyFirstScalarParameter");
static_assert(offsetof(BatchMeshCommands_CopyFirstScalarParameter, ParameterName) == 0x000000, "Member 'BatchMeshCommands_CopyFirstScalarParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(BatchMeshCommands_CopyFirstScalarParameter, OutValue) == 0x00000C, "Member 'BatchMeshCommands_CopyFirstScalarParameter::OutValue' has a wrong offset!");
static_assert(offsetof(BatchMeshCommands_CopyFirstScalarParameter, ReturnValue) == 0x000010, "Member 'BatchMeshCommands_CopyFirstScalarParameter::ReturnValue' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetAllToSameMaterial
// 0x0008 (0x0008 - 0x0000)
struct BatchMeshCommands_SetAllToSameMaterial final
{
public:
	class UMaterialInterface*                     MaterialInterface;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetAllToSameMaterial) == 0x000008, "Wrong alignment on BatchMeshCommands_SetAllToSameMaterial");
static_assert(sizeof(BatchMeshCommands_SetAllToSameMaterial) == 0x000008, "Wrong size on BatchMeshCommands_SetAllToSameMaterial");
static_assert(offsetof(BatchMeshCommands_SetAllToSameMaterial, MaterialInterface) == 0x000000, "Member 'BatchMeshCommands_SetAllToSameMaterial::MaterialInterface' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetCastCinematicShadows
// 0x0001 (0x0001 - 0x0000)
struct BatchMeshCommands_SetCastCinematicShadows final
{
public:
	bool                                          CastCinematicShadows;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetCastCinematicShadows) == 0x000001, "Wrong alignment on BatchMeshCommands_SetCastCinematicShadows");
static_assert(sizeof(BatchMeshCommands_SetCastCinematicShadows) == 0x000001, "Wrong size on BatchMeshCommands_SetCastCinematicShadows");
static_assert(offsetof(BatchMeshCommands_SetCastCinematicShadows, CastCinematicShadows) == 0x000000, "Member 'BatchMeshCommands_SetCastCinematicShadows::CastCinematicShadows' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetColourParameter
// 0x001C (0x001C - 0x0000)
struct BatchMeshCommands_SetColourParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           NewValue;                                          // 0x000C(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetColourParameter) == 0x000004, "Wrong alignment on BatchMeshCommands_SetColourParameter");
static_assert(sizeof(BatchMeshCommands_SetColourParameter) == 0x00001C, "Wrong size on BatchMeshCommands_SetColourParameter");
static_assert(offsetof(BatchMeshCommands_SetColourParameter, ParameterName) == 0x000000, "Member 'BatchMeshCommands_SetColourParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(BatchMeshCommands_SetColourParameter, NewValue) == 0x00000C, "Member 'BatchMeshCommands_SetColourParameter::NewValue' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetCustomDepthStencilValue
// 0x0004 (0x0004 - 0x0000)
struct BatchMeshCommands_SetCustomDepthStencilValue final
{
public:
	int32                                         StencilValue;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetCustomDepthStencilValue) == 0x000004, "Wrong alignment on BatchMeshCommands_SetCustomDepthStencilValue");
static_assert(sizeof(BatchMeshCommands_SetCustomDepthStencilValue) == 0x000004, "Wrong size on BatchMeshCommands_SetCustomDepthStencilValue");
static_assert(offsetof(BatchMeshCommands_SetCustomDepthStencilValue, StencilValue) == 0x000000, "Member 'BatchMeshCommands_SetCustomDepthStencilValue::StencilValue' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetLightingChannelForAllMeshes
// 0x0001 (0x0001 - 0x0000)
struct BatchMeshCommands_SetLightingChannelForAllMeshes final
{
public:
	struct FLightingChannels                      LightingChannels;                                  // 0x0000(0x0001)(Parm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetLightingChannelForAllMeshes) == 0x000001, "Wrong alignment on BatchMeshCommands_SetLightingChannelForAllMeshes");
static_assert(sizeof(BatchMeshCommands_SetLightingChannelForAllMeshes) == 0x000001, "Wrong size on BatchMeshCommands_SetLightingChannelForAllMeshes");
static_assert(offsetof(BatchMeshCommands_SetLightingChannelForAllMeshes, LightingChannels) == 0x000000, "Member 'BatchMeshCommands_SetLightingChannelForAllMeshes::LightingChannels' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetMaterial
// 0x0010 (0x0010 - 0x0000)
struct BatchMeshCommands_SetMaterial final
{
public:
	class FString                                 GroupName;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetMaterial) == 0x000008, "Wrong alignment on BatchMeshCommands_SetMaterial");
static_assert(sizeof(BatchMeshCommands_SetMaterial) == 0x000010, "Wrong size on BatchMeshCommands_SetMaterial");
static_assert(offsetof(BatchMeshCommands_SetMaterial, GroupName) == 0x000000, "Member 'BatchMeshCommands_SetMaterial::GroupName' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetReceivesDecals
// 0x0001 (0x0001 - 0x0000)
struct BatchMeshCommands_SetReceivesDecals final
{
public:
	bool                                          ReceivesDecals;                                    // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetReceivesDecals) == 0x000001, "Wrong alignment on BatchMeshCommands_SetReceivesDecals");
static_assert(sizeof(BatchMeshCommands_SetReceivesDecals) == 0x000001, "Wrong size on BatchMeshCommands_SetReceivesDecals");
static_assert(offsetof(BatchMeshCommands_SetReceivesDecals, ReceivesDecals) == 0x000000, "Member 'BatchMeshCommands_SetReceivesDecals::ReceivesDecals' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetRenderInCustomColourNoDepth
// 0x0001 (0x0001 - 0x0000)
struct BatchMeshCommands_SetRenderInCustomColourNoDepth final
{
public:
	bool                                          RenderInCustomColour;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetRenderInCustomColourNoDepth) == 0x000001, "Wrong alignment on BatchMeshCommands_SetRenderInCustomColourNoDepth");
static_assert(sizeof(BatchMeshCommands_SetRenderInCustomColourNoDepth) == 0x000001, "Wrong size on BatchMeshCommands_SetRenderInCustomColourNoDepth");
static_assert(offsetof(BatchMeshCommands_SetRenderInCustomColourNoDepth, RenderInCustomColour) == 0x000000, "Member 'BatchMeshCommands_SetRenderInCustomColourNoDepth::RenderInCustomColour' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetRenderInCustomDepth
// 0x0001 (0x0001 - 0x0000)
struct BatchMeshCommands_SetRenderInCustomDepth final
{
public:
	bool                                          RenderInCustomDepth;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetRenderInCustomDepth) == 0x000001, "Wrong alignment on BatchMeshCommands_SetRenderInCustomDepth");
static_assert(sizeof(BatchMeshCommands_SetRenderInCustomDepth) == 0x000001, "Wrong size on BatchMeshCommands_SetRenderInCustomDepth");
static_assert(offsetof(BatchMeshCommands_SetRenderInCustomDepth, RenderInCustomDepth) == 0x000000, "Member 'BatchMeshCommands_SetRenderInCustomDepth::RenderInCustomDepth' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetRenderInMainPass
// 0x0001 (0x0001 - 0x0000)
struct BatchMeshCommands_SetRenderInMainPass final
{
public:
	bool                                          InRenderInMainPass;                                // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetRenderInMainPass) == 0x000001, "Wrong alignment on BatchMeshCommands_SetRenderInMainPass");
static_assert(sizeof(BatchMeshCommands_SetRenderInMainPass) == 0x000001, "Wrong size on BatchMeshCommands_SetRenderInMainPass");
static_assert(offsetof(BatchMeshCommands_SetRenderInMainPass, InRenderInMainPass) == 0x000000, "Member 'BatchMeshCommands_SetRenderInMainPass::InRenderInMainPass' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetScalarParameter
// 0x0010 (0x0010 - 0x0000)
struct BatchMeshCommands_SetScalarParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NewValue;                                          // 0x000C(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetScalarParameter) == 0x000004, "Wrong alignment on BatchMeshCommands_SetScalarParameter");
static_assert(sizeof(BatchMeshCommands_SetScalarParameter) == 0x000010, "Wrong size on BatchMeshCommands_SetScalarParameter");
static_assert(offsetof(BatchMeshCommands_SetScalarParameter, ParameterName) == 0x000000, "Member 'BatchMeshCommands_SetScalarParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(BatchMeshCommands_SetScalarParameter, NewValue) == 0x00000C, "Member 'BatchMeshCommands_SetScalarParameter::NewValue' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetStencilIntegerScalarParameter
// 0x0010 (0x0010 - 0x0000)
struct BatchMeshCommands_SetStencilIntegerScalarParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NewValue;                                          // 0x000C(0x0004)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetStencilIntegerScalarParameter) == 0x000004, "Wrong alignment on BatchMeshCommands_SetStencilIntegerScalarParameter");
static_assert(sizeof(BatchMeshCommands_SetStencilIntegerScalarParameter) == 0x000010, "Wrong size on BatchMeshCommands_SetStencilIntegerScalarParameter");
static_assert(offsetof(BatchMeshCommands_SetStencilIntegerScalarParameter, ParameterName) == 0x000000, "Member 'BatchMeshCommands_SetStencilIntegerScalarParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(BatchMeshCommands_SetStencilIntegerScalarParameter, NewValue) == 0x00000C, "Member 'BatchMeshCommands_SetStencilIntegerScalarParameter::NewValue' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetTextureParameter
// 0x0018 (0x0018 - 0x0000)
struct BatchMeshCommands_SetTextureParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               NewTexture;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetTextureParameter) == 0x000008, "Wrong alignment on BatchMeshCommands_SetTextureParameter");
static_assert(sizeof(BatchMeshCommands_SetTextureParameter) == 0x000018, "Wrong size on BatchMeshCommands_SetTextureParameter");
static_assert(offsetof(BatchMeshCommands_SetTextureParameter, ParameterName) == 0x000000, "Member 'BatchMeshCommands_SetTextureParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(BatchMeshCommands_SetTextureParameter, NewTexture) == 0x000010, "Member 'BatchMeshCommands_SetTextureParameter::NewTexture' has a wrong offset!");

// Function GFXUtilities.BatchMeshCommands.SetVectorParameter
// 0x0028 (0x0028 - 0x0000)
struct BatchMeshCommands_SetVectorParameter final
{
public:
	class FName                                   ParameterName;                                     // 0x0000(0x000C)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                NewValue;                                          // 0x0010(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(BatchMeshCommands_SetVectorParameter) == 0x000008, "Wrong alignment on BatchMeshCommands_SetVectorParameter");
static_assert(sizeof(BatchMeshCommands_SetVectorParameter) == 0x000028, "Wrong size on BatchMeshCommands_SetVectorParameter");
static_assert(offsetof(BatchMeshCommands_SetVectorParameter, ParameterName) == 0x000000, "Member 'BatchMeshCommands_SetVectorParameter::ParameterName' has a wrong offset!");
static_assert(offsetof(BatchMeshCommands_SetVectorParameter, NewValue) == 0x000010, "Member 'BatchMeshCommands_SetVectorParameter::NewValue' has a wrong offset!");

// Function GFXUtilities.ClippableProviderComponent.AddIgnoredPrimitives
// 0x0010 (0x0010 - 0x0000)
struct ClippableProviderComponent_AddIgnoredPrimitives final
{
public:
	TArray<class UPrimitiveComponent*>            IgnoredPrimitives;                                 // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClippableProviderComponent_AddIgnoredPrimitives) == 0x000008, "Wrong alignment on ClippableProviderComponent_AddIgnoredPrimitives");
static_assert(sizeof(ClippableProviderComponent_AddIgnoredPrimitives) == 0x000010, "Wrong size on ClippableProviderComponent_AddIgnoredPrimitives");
static_assert(offsetof(ClippableProviderComponent_AddIgnoredPrimitives, IgnoredPrimitives) == 0x000000, "Member 'ClippableProviderComponent_AddIgnoredPrimitives::IgnoredPrimitives' has a wrong offset!");

// Function GFXUtilities.ClippableProviderComponent.SetIgnoredPrimitives
// 0x0010 (0x0010 - 0x0000)
struct ClippableProviderComponent_SetIgnoredPrimitives final
{
public:
	TArray<class UPrimitiveComponent*>            IgnoredPrimitives;                                 // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(ClippableProviderComponent_SetIgnoredPrimitives) == 0x000008, "Wrong alignment on ClippableProviderComponent_SetIgnoredPrimitives");
static_assert(sizeof(ClippableProviderComponent_SetIgnoredPrimitives) == 0x000010, "Wrong size on ClippableProviderComponent_SetIgnoredPrimitives");
static_assert(offsetof(ClippableProviderComponent_SetIgnoredPrimitives, IgnoredPrimitives) == 0x000000, "Member 'ClippableProviderComponent_SetIgnoredPrimitives::IgnoredPrimitives' has a wrong offset!");

// Function GFXUtilities.DBDReflectionCaptureSpawnerComponent.SetBrightness
// 0x0004 (0x0004 - 0x0000)
struct DBDReflectionCaptureSpawnerComponent_SetBrightness final
{
public:
	float                                         Param_Brightness;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDReflectionCaptureSpawnerComponent_SetBrightness) == 0x000004, "Wrong alignment on DBDReflectionCaptureSpawnerComponent_SetBrightness");
static_assert(sizeof(DBDReflectionCaptureSpawnerComponent_SetBrightness) == 0x000004, "Wrong size on DBDReflectionCaptureSpawnerComponent_SetBrightness");
static_assert(offsetof(DBDReflectionCaptureSpawnerComponent_SetBrightness, Param_Brightness) == 0x000000, "Member 'DBDReflectionCaptureSpawnerComponent_SetBrightness::Param_Brightness' has a wrong offset!");

// Function GFXUtilities.DBDReflectionCaptureSpawnerComponent.SetContributionFactor
// 0x0004 (0x0004 - 0x0000)
struct DBDReflectionCaptureSpawnerComponent_SetContributionFactor final
{
public:
	float                                         Param_ContributionFactor;                          // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDReflectionCaptureSpawnerComponent_SetContributionFactor) == 0x000004, "Wrong alignment on DBDReflectionCaptureSpawnerComponent_SetContributionFactor");
static_assert(sizeof(DBDReflectionCaptureSpawnerComponent_SetContributionFactor) == 0x000004, "Wrong size on DBDReflectionCaptureSpawnerComponent_SetContributionFactor");
static_assert(offsetof(DBDReflectionCaptureSpawnerComponent_SetContributionFactor, Param_ContributionFactor) == 0x000000, "Member 'DBDReflectionCaptureSpawnerComponent_SetContributionFactor::Param_ContributionFactor' has a wrong offset!");

// Function GFXUtilities.DBDReflectionCaptureSpawnerComponent.SetIBLMultiplicator
// 0x0004 (0x0004 - 0x0000)
struct DBDReflectionCaptureSpawnerComponent_SetIBLMultiplicator final
{
public:
	float                                         Param_IBLMultiplicator;                            // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(DBDReflectionCaptureSpawnerComponent_SetIBLMultiplicator) == 0x000004, "Wrong alignment on DBDReflectionCaptureSpawnerComponent_SetIBLMultiplicator");
static_assert(sizeof(DBDReflectionCaptureSpawnerComponent_SetIBLMultiplicator) == 0x000004, "Wrong size on DBDReflectionCaptureSpawnerComponent_SetIBLMultiplicator");
static_assert(offsetof(DBDReflectionCaptureSpawnerComponent_SetIBLMultiplicator, Param_IBLMultiplicator) == 0x000000, "Member 'DBDReflectionCaptureSpawnerComponent_SetIBLMultiplicator::Param_IBLMultiplicator' has a wrong offset!");

// Function GFXUtilities.GFXUtilities.ActivateVFX
// 0x0010 (0x0010 - 0x0000)
struct GFXUtilities_ActivateVFX final
{
public:
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Active;                                            // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(GFXUtilities_ActivateVFX) == 0x000008, "Wrong alignment on GFXUtilities_ActivateVFX");
static_assert(sizeof(GFXUtilities_ActivateVFX) == 0x000010, "Wrong size on GFXUtilities_ActivateVFX");
static_assert(offsetof(GFXUtilities_ActivateVFX, SkeletalMeshComponent) == 0x000000, "Member 'GFXUtilities_ActivateVFX::SkeletalMeshComponent' has a wrong offset!");
static_assert(offsetof(GFXUtilities_ActivateVFX, Active) == 0x000008, "Member 'GFXUtilities_ActivateVFX::Active' has a wrong offset!");

// Function GFXUtilities.LightIntensityTimelineComponent.AddLight
// 0x0010 (0x0010 - 0x0000)
struct LightIntensityTimelineComponent_AddLight final
{
public:
	class ULightComponent*                        Light;                                             // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(LightIntensityTimelineComponent_AddLight) == 0x000008, "Wrong alignment on LightIntensityTimelineComponent_AddLight");
static_assert(sizeof(LightIntensityTimelineComponent_AddLight) == 0x000010, "Wrong size on LightIntensityTimelineComponent_AddLight");
static_assert(offsetof(LightIntensityTimelineComponent_AddLight, Light) == 0x000000, "Member 'LightIntensityTimelineComponent_AddLight::Light' has a wrong offset!");
static_assert(offsetof(LightIntensityTimelineComponent_AddLight, Multiplier) == 0x000008, "Member 'LightIntensityTimelineComponent_AddLight::Multiplier' has a wrong offset!");

// Function GFXUtilities.LightIntensityTimelineComponent.AddMaterialHelper
// 0x0018 (0x0018 - 0x0000)
struct LightIntensityTimelineComponent_AddMaterialHelper final
{
public:
	class UMaterialHelper*                        MatHelper;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropName;                                          // 0x0008(0x000C)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Multiplier;                                        // 0x0014(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightIntensityTimelineComponent_AddMaterialHelper) == 0x000008, "Wrong alignment on LightIntensityTimelineComponent_AddMaterialHelper");
static_assert(sizeof(LightIntensityTimelineComponent_AddMaterialHelper) == 0x000018, "Wrong size on LightIntensityTimelineComponent_AddMaterialHelper");
static_assert(offsetof(LightIntensityTimelineComponent_AddMaterialHelper, MatHelper) == 0x000000, "Member 'LightIntensityTimelineComponent_AddMaterialHelper::MatHelper' has a wrong offset!");
static_assert(offsetof(LightIntensityTimelineComponent_AddMaterialHelper, PropName) == 0x000008, "Member 'LightIntensityTimelineComponent_AddMaterialHelper::PropName' has a wrong offset!");
static_assert(offsetof(LightIntensityTimelineComponent_AddMaterialHelper, Multiplier) == 0x000014, "Member 'LightIntensityTimelineComponent_AddMaterialHelper::Multiplier' has a wrong offset!");

// Function GFXUtilities.LightIntensityTimelineComponent.SetLightCurve
// 0x0008 (0x0008 - 0x0000)
struct LightIntensityTimelineComponent_SetLightCurve final
{
public:
	class UCurveFloat*                            Lightcurve;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightIntensityTimelineComponent_SetLightCurve) == 0x000008, "Wrong alignment on LightIntensityTimelineComponent_SetLightCurve");
static_assert(sizeof(LightIntensityTimelineComponent_SetLightCurve) == 0x000008, "Wrong size on LightIntensityTimelineComponent_SetLightCurve");
static_assert(offsetof(LightIntensityTimelineComponent_SetLightCurve, Lightcurve) == 0x000000, "Member 'LightIntensityTimelineComponent_SetLightCurve::Lightcurve' has a wrong offset!");

// Function GFXUtilities.LightIntensityTimelineComponent.SetMaxLength
// 0x0004 (0x0004 - 0x0000)
struct LightIntensityTimelineComponent_SetMaxLength final
{
public:
	float                                         NewMaxValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightIntensityTimelineComponent_SetMaxLength) == 0x000004, "Wrong alignment on LightIntensityTimelineComponent_SetMaxLength");
static_assert(sizeof(LightIntensityTimelineComponent_SetMaxLength) == 0x000004, "Wrong size on LightIntensityTimelineComponent_SetMaxLength");
static_assert(offsetof(LightIntensityTimelineComponent_SetMaxLength, NewMaxValue) == 0x000000, "Member 'LightIntensityTimelineComponent_SetMaxLength::NewMaxValue' has a wrong offset!");

// Function GFXUtilities.LightIntensityTimelineComponent.SetMinLength
// 0x0004 (0x0004 - 0x0000)
struct LightIntensityTimelineComponent_SetMinLength final
{
public:
	float                                         NewMinValue;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightIntensityTimelineComponent_SetMinLength) == 0x000004, "Wrong alignment on LightIntensityTimelineComponent_SetMinLength");
static_assert(sizeof(LightIntensityTimelineComponent_SetMinLength) == 0x000004, "Wrong size on LightIntensityTimelineComponent_SetMinLength");
static_assert(offsetof(LightIntensityTimelineComponent_SetMinLength, NewMinValue) == 0x000000, "Member 'LightIntensityTimelineComponent_SetMinLength::NewMinValue' has a wrong offset!");

// Function GFXUtilities.LightIntensityTimelineComponent.SetRandomizeLength
// 0x0001 (0x0001 - 0x0000)
struct LightIntensityTimelineComponent_SetRandomizeLength final
{
public:
	bool                                          IsRandom;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(LightIntensityTimelineComponent_SetRandomizeLength) == 0x000001, "Wrong alignment on LightIntensityTimelineComponent_SetRandomizeLength");
static_assert(sizeof(LightIntensityTimelineComponent_SetRandomizeLength) == 0x000001, "Wrong size on LightIntensityTimelineComponent_SetRandomizeLength");
static_assert(offsetof(LightIntensityTimelineComponent_SetRandomizeLength, IsRandom) == 0x000000, "Member 'LightIntensityTimelineComponent_SetRandomizeLength::IsRandom' has a wrong offset!");

// Function GFXUtilities.MaterialHelper.SetSceneComponentVisibility
// 0x0010 (0x0010 - 0x0000)
struct MaterialHelper_SetSceneComponentVisibility final
{
public:
	class USceneComponent*                        InSceneComponent;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NewVisibility;                                     // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PropagateToChildren;                               // 0x0009(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialHelper_SetSceneComponentVisibility) == 0x000008, "Wrong alignment on MaterialHelper_SetSceneComponentVisibility");
static_assert(sizeof(MaterialHelper_SetSceneComponentVisibility) == 0x000010, "Wrong size on MaterialHelper_SetSceneComponentVisibility");
static_assert(offsetof(MaterialHelper_SetSceneComponentVisibility, InSceneComponent) == 0x000000, "Member 'MaterialHelper_SetSceneComponentVisibility::InSceneComponent' has a wrong offset!");
static_assert(offsetof(MaterialHelper_SetSceneComponentVisibility, NewVisibility) == 0x000008, "Member 'MaterialHelper_SetSceneComponentVisibility::NewVisibility' has a wrong offset!");
static_assert(offsetof(MaterialHelper_SetSceneComponentVisibility, PropagateToChildren) == 0x000009, "Member 'MaterialHelper_SetSceneComponentVisibility::PropagateToChildren' has a wrong offset!");

// Function GFXUtilities.MaterialHelper.RefreshMesh
// 0x0008 (0x0008 - 0x0000)
struct MaterialHelper_RefreshMesh final
{
public:
	class UMeshComponent*                         Mc;                                                // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialHelper_RefreshMesh) == 0x000008, "Wrong alignment on MaterialHelper_RefreshMesh");
static_assert(sizeof(MaterialHelper_RefreshMesh) == 0x000008, "Wrong size on MaterialHelper_RefreshMesh");
static_assert(offsetof(MaterialHelper_RefreshMesh, Mc) == 0x000000, "Member 'MaterialHelper_RefreshMesh::Mc' has a wrong offset!");

// Function GFXUtilities.AsyncAction_OverrideMaterial.AsyncOverrideMaterial
// 0x0028 (0x0028 - 0x0000)
struct AsyncAction_OverrideMaterial_AsyncOverrideMaterial final
{
public:
	class UObject*                                WorldContextObject;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         Mesh;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Group;                                             // 0x0010(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialOverridePriority                     Priority;                                          // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CopyPhysicalMaterial;                              // 0x001D(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E[0x2];                                       // 0x001E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAsyncAction_OverrideMaterial*          ReturnValue;                                       // 0x0020(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(AsyncAction_OverrideMaterial_AsyncOverrideMaterial) == 0x000008, "Wrong alignment on AsyncAction_OverrideMaterial_AsyncOverrideMaterial");
static_assert(sizeof(AsyncAction_OverrideMaterial_AsyncOverrideMaterial) == 0x000028, "Wrong size on AsyncAction_OverrideMaterial_AsyncOverrideMaterial");
static_assert(offsetof(AsyncAction_OverrideMaterial_AsyncOverrideMaterial, WorldContextObject) == 0x000000, "Member 'AsyncAction_OverrideMaterial_AsyncOverrideMaterial::WorldContextObject' has a wrong offset!");
static_assert(offsetof(AsyncAction_OverrideMaterial_AsyncOverrideMaterial, Mesh) == 0x000008, "Member 'AsyncAction_OverrideMaterial_AsyncOverrideMaterial::Mesh' has a wrong offset!");
static_assert(offsetof(AsyncAction_OverrideMaterial_AsyncOverrideMaterial, Group) == 0x000010, "Member 'AsyncAction_OverrideMaterial_AsyncOverrideMaterial::Group' has a wrong offset!");
static_assert(offsetof(AsyncAction_OverrideMaterial_AsyncOverrideMaterial, Priority) == 0x00001C, "Member 'AsyncAction_OverrideMaterial_AsyncOverrideMaterial::Priority' has a wrong offset!");
static_assert(offsetof(AsyncAction_OverrideMaterial_AsyncOverrideMaterial, CopyPhysicalMaterial) == 0x00001D, "Member 'AsyncAction_OverrideMaterial_AsyncOverrideMaterial::CopyPhysicalMaterial' has a wrong offset!");
static_assert(offsetof(AsyncAction_OverrideMaterial_AsyncOverrideMaterial, ReturnValue) == 0x000020, "Member 'AsyncAction_OverrideMaterial_AsyncOverrideMaterial::ReturnValue' has a wrong offset!");

// Function GFXUtilities.MaterialOverrideSubsystem.AddNewVariantPairToLibrary
// 0x0080 (0x0080 - 0x0000)
struct MaterialOverrideSubsystem_AddNewVariantPairToLibrary final
{
public:
	struct FGameplayTag                           VariantName;                                       // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UMaterialInterface>      Src;                                               // 0x0010(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMaterialInterface>      Dst;                                               // 0x0048(0x0038)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialOverrideSubsystem_AddNewVariantPairToLibrary) == 0x000008, "Wrong alignment on MaterialOverrideSubsystem_AddNewVariantPairToLibrary");
static_assert(sizeof(MaterialOverrideSubsystem_AddNewVariantPairToLibrary) == 0x000080, "Wrong size on MaterialOverrideSubsystem_AddNewVariantPairToLibrary");
static_assert(offsetof(MaterialOverrideSubsystem_AddNewVariantPairToLibrary, VariantName) == 0x000000, "Member 'MaterialOverrideSubsystem_AddNewVariantPairToLibrary::VariantName' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_AddNewVariantPairToLibrary, Src) == 0x000010, "Member 'MaterialOverrideSubsystem_AddNewVariantPairToLibrary::Src' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_AddNewVariantPairToLibrary, Dst) == 0x000048, "Member 'MaterialOverrideSubsystem_AddNewVariantPairToLibrary::Dst' has a wrong offset!");

// Function GFXUtilities.MaterialOverrideSubsystem.RemoveMaterialVariantOverride
// 0x0018 (0x0018 - 0x0000)
struct MaterialOverrideSubsystem_RemoveMaterialVariantOverride final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantName;                                       // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialOverrideSubsystem_RemoveMaterialVariantOverride) == 0x000008, "Wrong alignment on MaterialOverrideSubsystem_RemoveMaterialVariantOverride");
static_assert(sizeof(MaterialOverrideSubsystem_RemoveMaterialVariantOverride) == 0x000018, "Wrong size on MaterialOverrideSubsystem_RemoveMaterialVariantOverride");
static_assert(offsetof(MaterialOverrideSubsystem_RemoveMaterialVariantOverride, Mesh) == 0x000000, "Member 'MaterialOverrideSubsystem_RemoveMaterialVariantOverride::Mesh' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_RemoveMaterialVariantOverride, VariantName) == 0x000008, "Member 'MaterialOverrideSubsystem_RemoveMaterialVariantOverride::VariantName' has a wrong offset!");

// Function GFXUtilities.MaterialOverrideSubsystem.RemoveVariantsWithNameFromLibrary
// 0x000C (0x000C - 0x0000)
struct MaterialOverrideSubsystem_RemoveVariantsWithNameFromLibrary final
{
public:
	struct FGameplayTag                           VariantName;                                       // 0x0000(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(MaterialOverrideSubsystem_RemoveVariantsWithNameFromLibrary) == 0x000004, "Wrong alignment on MaterialOverrideSubsystem_RemoveVariantsWithNameFromLibrary");
static_assert(sizeof(MaterialOverrideSubsystem_RemoveVariantsWithNameFromLibrary) == 0x00000C, "Wrong size on MaterialOverrideSubsystem_RemoveVariantsWithNameFromLibrary");
static_assert(offsetof(MaterialOverrideSubsystem_RemoveVariantsWithNameFromLibrary, VariantName) == 0x000000, "Member 'MaterialOverrideSubsystem_RemoveVariantsWithNameFromLibrary::VariantName' has a wrong offset!");

// Function GFXUtilities.MaterialOverrideSubsystem.SetOverrideMaterials
// 0x0018 (0x0018 - 0x0000)
struct MaterialOverrideSubsystem_SetOverrideMaterials final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantName;                                       // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialOverridePriority                     Priority;                                          // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0015(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16[0x2];                                       // 0x0016(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialOverrideSubsystem_SetOverrideMaterials) == 0x000008, "Wrong alignment on MaterialOverrideSubsystem_SetOverrideMaterials");
static_assert(sizeof(MaterialOverrideSubsystem_SetOverrideMaterials) == 0x000018, "Wrong size on MaterialOverrideSubsystem_SetOverrideMaterials");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterials, Mesh) == 0x000000, "Member 'MaterialOverrideSubsystem_SetOverrideMaterials::Mesh' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterials, VariantName) == 0x000008, "Member 'MaterialOverrideSubsystem_SetOverrideMaterials::VariantName' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterials, Priority) == 0x000014, "Member 'MaterialOverrideSubsystem_SetOverrideMaterials::Priority' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterials, ReturnValue) == 0x000015, "Member 'MaterialOverrideSubsystem_SetOverrideMaterials::ReturnValue' has a wrong offset!");

// Function GFXUtilities.MaterialOverrideSubsystem.SetOverrideMaterialsAdvanced
// 0x0020 (0x0020 - 0x0000)
struct MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced final
{
public:
	class UMeshComponent*                         Mesh;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VariantName;                                       // 0x0008(0x000C)(Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCopyPhysicalMaterial;                             // 0x0014(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialOverridePriority                     Priority;                                          // 0x0015(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMaterialOverrideParameterCopyType            ParameterCopyType;                                 // 0x0016(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17[0x1];                                       // 0x0017(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RecursionLimit;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x001C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced) == 0x000008, "Wrong alignment on MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced");
static_assert(sizeof(MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced) == 0x000020, "Wrong size on MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced, Mesh) == 0x000000, "Member 'MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced::Mesh' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced, VariantName) == 0x000008, "Member 'MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced::VariantName' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced, bCopyPhysicalMaterial) == 0x000014, "Member 'MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced::bCopyPhysicalMaterial' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced, Priority) == 0x000015, "Member 'MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced::Priority' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced, ParameterCopyType) == 0x000016, "Member 'MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced::ParameterCopyType' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced, RecursionLimit) == 0x000018, "Member 'MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced::RecursionLimit' has a wrong offset!");
static_assert(offsetof(MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced, ReturnValue) == 0x00001C, "Member 'MaterialOverrideSubsystem_SetOverrideMaterialsAdvanced::ReturnValue' has a wrong offset!");

// Function GFXUtilities.OuterlineComponent.SetIntensity
// 0x0004 (0x0004 - 0x0000)
struct OuterlineComponent_SetIntensity final
{
public:
	float                                         Intensity;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OuterlineComponent_SetIntensity) == 0x000004, "Wrong alignment on OuterlineComponent_SetIntensity");
static_assert(sizeof(OuterlineComponent_SetIntensity) == 0x000004, "Wrong size on OuterlineComponent_SetIntensity");
static_assert(offsetof(OuterlineComponent_SetIntensity, Intensity) == 0x000000, "Member 'OuterlineComponent_SetIntensity::Intensity' has a wrong offset!");

// Function GFXUtilities.StencilOutlineRenderStrategy.EnableCopyStencilToCustomStencil
// 0x0001 (0x0001 - 0x0000)
struct StencilOutlineRenderStrategy_EnableCopyStencilToCustomStencil final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(StencilOutlineRenderStrategy_EnableCopyStencilToCustomStencil) == 0x000001, "Wrong alignment on StencilOutlineRenderStrategy_EnableCopyStencilToCustomStencil");
static_assert(sizeof(StencilOutlineRenderStrategy_EnableCopyStencilToCustomStencil) == 0x000001, "Wrong size on StencilOutlineRenderStrategy_EnableCopyStencilToCustomStencil");
static_assert(offsetof(StencilOutlineRenderStrategy_EnableCopyStencilToCustomStencil, Enabled) == 0x000000, "Member 'StencilOutlineRenderStrategy_EnableCopyStencilToCustomStencil::Enabled' has a wrong offset!");

}

