#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: TheTwins

#include "Basic.hpp"

#include "DeadByDaylight_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "AnimationUtilities_structs.hpp"
#include "DBDGameplay_structs.hpp"
#include "Engine_structs.hpp"
#include "TheTwins_structs.hpp"


namespace SDK::Params
{

// Function TheTwins.TwinHuskStateComponent.IsDeadFromSurvivorBack
// 0x0001 (0x0001 - 0x0000)
struct TwinHuskStateComponent_IsDeadFromSurvivorBack final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinHuskStateComponent_IsDeadFromSurvivorBack) == 0x000001, "Wrong alignment on TwinHuskStateComponent_IsDeadFromSurvivorBack");
static_assert(sizeof(TwinHuskStateComponent_IsDeadFromSurvivorBack) == 0x000001, "Wrong size on TwinHuskStateComponent_IsDeadFromSurvivorBack");
static_assert(offsetof(TwinHuskStateComponent_IsDeadFromSurvivorBack, ReturnValue) == 0x000000, "Member 'TwinHuskStateComponent_IsDeadFromSurvivorBack::ReturnValue' has a wrong offset!");

// Function TheTwins.Addon_K22Power_17.Authority_OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct Addon_K22Power_17_Authority_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Addon_K22Power_17_Authority_OnTwinSet) == 0x000008, "Wrong alignment on Addon_K22Power_17_Authority_OnTwinSet");
static_assert(sizeof(Addon_K22Power_17_Authority_OnTwinSet) == 0x000008, "Wrong size on Addon_K22Power_17_Authority_OnTwinSet");
static_assert(offsetof(Addon_K22Power_17_Authority_OnTwinSet, Twin) == 0x000000, "Member 'Addon_K22Power_17_Authority_OnTwinSet::Twin' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Client_Debug_PrintLandingLocationDebug
// 0x0002 (0x0002 - 0x0000)
struct TwinJumpAttack_Client_Debug_PrintLandingLocationDebug final
{
public:
	bool                                          FoundProjectedPoint;                               // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          FoundPath;                                         // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Client_Debug_PrintLandingLocationDebug) == 0x000001, "Wrong alignment on TwinJumpAttack_Client_Debug_PrintLandingLocationDebug");
static_assert(sizeof(TwinJumpAttack_Client_Debug_PrintLandingLocationDebug) == 0x000002, "Wrong size on TwinJumpAttack_Client_Debug_PrintLandingLocationDebug");
static_assert(offsetof(TwinJumpAttack_Client_Debug_PrintLandingLocationDebug, FoundProjectedPoint) == 0x000000, "Member 'TwinJumpAttack_Client_Debug_PrintLandingLocationDebug::FoundProjectedPoint' has a wrong offset!");
static_assert(offsetof(TwinJumpAttack_Client_Debug_PrintLandingLocationDebug, FoundPath) == 0x000001, "Member 'TwinJumpAttack_Client_Debug_PrintLandingLocationDebug::FoundPath' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Cosmetic_OnIsForbiddenLandingLocationChanged
// 0x0010 (0x0010 - 0x0000)
struct TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged final
{
public:
	bool                                          IsForbiddenLocation;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AConjoinedTwin*                         Twin;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged) == 0x000008, "Wrong alignment on TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged");
static_assert(sizeof(TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged) == 0x000010, "Wrong size on TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged");
static_assert(offsetof(TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged, IsForbiddenLocation) == 0x000000, "Member 'TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged::IsForbiddenLocation' has a wrong offset!");
static_assert(offsetof(TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged, Twin) == 0x000008, "Member 'TwinJumpAttack_Cosmetic_OnIsForbiddenLandingLocationChanged::Twin' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Cosmetic_OnJumpCooldownChanged
// 0x0010 (0x0010 - 0x0000)
struct TwinJumpAttack_Cosmetic_OnJumpCooldownChanged final
{
public:
	bool                                          IsInJumpCooldown;                                  // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AConjoinedTwin*                         OwningTwin;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Cosmetic_OnJumpCooldownChanged) == 0x000008, "Wrong alignment on TwinJumpAttack_Cosmetic_OnJumpCooldownChanged");
static_assert(sizeof(TwinJumpAttack_Cosmetic_OnJumpCooldownChanged) == 0x000010, "Wrong size on TwinJumpAttack_Cosmetic_OnJumpCooldownChanged");
static_assert(offsetof(TwinJumpAttack_Cosmetic_OnJumpCooldownChanged, IsInJumpCooldown) == 0x000000, "Member 'TwinJumpAttack_Cosmetic_OnJumpCooldownChanged::IsInJumpCooldown' has a wrong offset!");
static_assert(offsetof(TwinJumpAttack_Cosmetic_OnJumpCooldownChanged, OwningTwin) == 0x000008, "Member 'TwinJumpAttack_Cosmetic_OnJumpCooldownChanged::OwningTwin' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Cosmetic_OnJumpLanded
// 0x0008 (0x0008 - 0x0000)
struct TwinJumpAttack_Cosmetic_OnJumpLanded final
{
public:
	class AConjoinedTwin*                         OwningTwin;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Cosmetic_OnJumpLanded) == 0x000008, "Wrong alignment on TwinJumpAttack_Cosmetic_OnJumpLanded");
static_assert(sizeof(TwinJumpAttack_Cosmetic_OnJumpLanded) == 0x000008, "Wrong size on TwinJumpAttack_Cosmetic_OnJumpLanded");
static_assert(offsetof(TwinJumpAttack_Cosmetic_OnJumpLanded, OwningTwin) == 0x000000, "Member 'TwinJumpAttack_Cosmetic_OnJumpLanded::OwningTwin' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Cosmetic_OnJumpObstructed
// 0x0008 (0x0008 - 0x0000)
struct TwinJumpAttack_Cosmetic_OnJumpObstructed final
{
public:
	class AConjoinedTwin*                         OwningTwin;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Cosmetic_OnJumpObstructed) == 0x000008, "Wrong alignment on TwinJumpAttack_Cosmetic_OnJumpObstructed");
static_assert(sizeof(TwinJumpAttack_Cosmetic_OnJumpObstructed) == 0x000008, "Wrong size on TwinJumpAttack_Cosmetic_OnJumpObstructed");
static_assert(offsetof(TwinJumpAttack_Cosmetic_OnJumpObstructed, OwningTwin) == 0x000000, "Member 'TwinJumpAttack_Cosmetic_OnJumpObstructed::OwningTwin' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Cosmetic_OnJumpStarted
// 0x0008 (0x0008 - 0x0000)
struct TwinJumpAttack_Cosmetic_OnJumpStarted final
{
public:
	class AConjoinedTwin*                         OwningTwin;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Cosmetic_OnJumpStarted) == 0x000008, "Wrong alignment on TwinJumpAttack_Cosmetic_OnJumpStarted");
static_assert(sizeof(TwinJumpAttack_Cosmetic_OnJumpStarted) == 0x000008, "Wrong size on TwinJumpAttack_Cosmetic_OnJumpStarted");
static_assert(offsetof(TwinJumpAttack_Cosmetic_OnJumpStarted, OwningTwin) == 0x000000, "Member 'TwinJumpAttack_Cosmetic_OnJumpStarted::OwningTwin' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Cosmetic_OnSuccessfulJumpAttack
// 0x0008 (0x0008 - 0x0000)
struct TwinJumpAttack_Cosmetic_OnSuccessfulJumpAttack final
{
public:
	class AConjoinedTwin*                         OwningTwin;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Cosmetic_OnSuccessfulJumpAttack) == 0x000008, "Wrong alignment on TwinJumpAttack_Cosmetic_OnSuccessfulJumpAttack");
static_assert(sizeof(TwinJumpAttack_Cosmetic_OnSuccessfulJumpAttack) == 0x000008, "Wrong size on TwinJumpAttack_Cosmetic_OnSuccessfulJumpAttack");
static_assert(offsetof(TwinJumpAttack_Cosmetic_OnSuccessfulJumpAttack, OwningTwin) == 0x000000, "Member 'TwinJumpAttack_Cosmetic_OnSuccessfulJumpAttack::OwningTwin' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Cosmetic_OnUnSuccessfulJumpAttack
// 0x0008 (0x0008 - 0x0000)
struct TwinJumpAttack_Cosmetic_OnUnSuccessfulJumpAttack final
{
public:
	class AConjoinedTwin*                         OwningTwin;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Cosmetic_OnUnSuccessfulJumpAttack) == 0x000008, "Wrong alignment on TwinJumpAttack_Cosmetic_OnUnSuccessfulJumpAttack");
static_assert(sizeof(TwinJumpAttack_Cosmetic_OnUnSuccessfulJumpAttack) == 0x000008, "Wrong size on TwinJumpAttack_Cosmetic_OnUnSuccessfulJumpAttack");
static_assert(offsetof(TwinJumpAttack_Cosmetic_OnUnSuccessfulJumpAttack, OwningTwin) == 0x000000, "Member 'TwinJumpAttack_Cosmetic_OnUnSuccessfulJumpAttack::OwningTwin' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Multicast_AttachToSurvivor
// 0x0008 (0x0008 - 0x0000)
struct TwinJumpAttack_Multicast_AttachToSurvivor final
{
public:
	class ADBDPlayer*                             SurvivorToAttachTo;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Multicast_AttachToSurvivor) == 0x000008, "Wrong alignment on TwinJumpAttack_Multicast_AttachToSurvivor");
static_assert(sizeof(TwinJumpAttack_Multicast_AttachToSurvivor) == 0x000008, "Wrong size on TwinJumpAttack_Multicast_AttachToSurvivor");
static_assert(offsetof(TwinJumpAttack_Multicast_AttachToSurvivor, SurvivorToAttachTo) == 0x000000, "Member 'TwinJumpAttack_Multicast_AttachToSurvivor::SurvivorToAttachTo' has a wrong offset!");

// Function TheTwins.TwinJumpAttack.Multicast_SetIsForbiddenLandingLocation
// 0x0001 (0x0001 - 0x0000)
struct TwinJumpAttack_Multicast_SetIsForbiddenLandingLocation final
{
public:
	bool                                          IsForbiddenLocation;                               // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttack_Multicast_SetIsForbiddenLandingLocation) == 0x000001, "Wrong alignment on TwinJumpAttack_Multicast_SetIsForbiddenLandingLocation");
static_assert(sizeof(TwinJumpAttack_Multicast_SetIsForbiddenLandingLocation) == 0x000001, "Wrong size on TwinJumpAttack_Multicast_SetIsForbiddenLandingLocation");
static_assert(offsetof(TwinJumpAttack_Multicast_SetIsForbiddenLandingLocation, IsForbiddenLocation) == 0x000000, "Member 'TwinJumpAttack_Multicast_SetIsForbiddenLandingLocation::IsForbiddenLocation' has a wrong offset!");

// Function TheTwins.TwinJumpAttackOpenSubstate.Local_OnTwinCapsuleHit
// 0x0120 (0x0120 - 0x0000)
struct TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                NormalImpulse;                                     // 0x0018(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitResult                             Hit;                                               // 0x0030(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit) == 0x000008, "Wrong alignment on TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit");
static_assert(sizeof(TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit) == 0x000120, "Wrong size on TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit, HitComponent) == 0x000000, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit::HitComponent' has a wrong offset!");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit, OtherActor) == 0x000008, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit::OtherActor' has a wrong offset!");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit, OtherComp) == 0x000010, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit::OtherComp' has a wrong offset!");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit, NormalImpulse) == 0x000018, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit::NormalImpulse' has a wrong offset!");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit, Hit) == 0x000030, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinCapsuleHit::Hit' has a wrong offset!");

// Function TheTwins.TwinJumpAttackOpenSubstate.Local_OnTwinOverlapEnter
// 0x0110 (0x0110 - 0x0000)
struct TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter final
{
public:
	class UPrimitiveComponent*                    HitComponent;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OtherActor;                                        // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    OtherComp;                                         // 0x0010(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OtherBodyIndex;                                    // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFromSweep;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             Hit;                                               // 0x0020(0x00F0)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter) == 0x000008, "Wrong alignment on TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter");
static_assert(sizeof(TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter) == 0x000110, "Wrong size on TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter, HitComponent) == 0x000000, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter::HitComponent' has a wrong offset!");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter, OtherActor) == 0x000008, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter::OtherActor' has a wrong offset!");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter, OtherComp) == 0x000010, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter::OtherComp' has a wrong offset!");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter, OtherBodyIndex) == 0x000018, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter::OtherBodyIndex' has a wrong offset!");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter, bFromSweep) == 0x00001C, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter::bFromSweep' has a wrong offset!");
static_assert(offsetof(TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter, Hit) == 0x000020, "Member 'TwinJumpAttackOpenSubstate_Local_OnTwinOverlapEnter::Hit' has a wrong offset!");

// Function TheTwins.TwinJumpTargetVisibleEffect.OnJumpTargetTick
// 0x0018 (0x0018 - 0x0000)
struct TwinJumpTargetVisibleEffect_OnJumpTargetTick final
{
public:
	struct FVector                                Location;                                          // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinJumpTargetVisibleEffect_OnJumpTargetTick) == 0x000008, "Wrong alignment on TwinJumpTargetVisibleEffect_OnJumpTargetTick");
static_assert(sizeof(TwinJumpTargetVisibleEffect_OnJumpTargetTick) == 0x000018, "Wrong size on TwinJumpTargetVisibleEffect_OnJumpTargetTick");
static_assert(offsetof(TwinJumpTargetVisibleEffect_OnJumpTargetTick, Location) == 0x000000, "Member 'TwinJumpTargetVisibleEffect_OnJumpTargetTick::Location' has a wrong offset!");

// Function TheTwins.PossessPlayer.Cosmetic_OnPossessCancelled
// 0x0008 (0x0008 - 0x0000)
struct PossessPlayer_Cosmetic_OnPossessCancelled final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessPlayer_Cosmetic_OnPossessCancelled) == 0x000008, "Wrong alignment on PossessPlayer_Cosmetic_OnPossessCancelled");
static_assert(sizeof(PossessPlayer_Cosmetic_OnPossessCancelled) == 0x000008, "Wrong size on PossessPlayer_Cosmetic_OnPossessCancelled");
static_assert(offsetof(PossessPlayer_Cosmetic_OnPossessCancelled, Player) == 0x000000, "Member 'PossessPlayer_Cosmetic_OnPossessCancelled::Player' has a wrong offset!");

// Function TheTwins.PossessPlayer.Cosmetic_OnPossessStart
// 0x0008 (0x0008 - 0x0000)
struct PossessPlayer_Cosmetic_OnPossessStart final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessPlayer_Cosmetic_OnPossessStart) == 0x000008, "Wrong alignment on PossessPlayer_Cosmetic_OnPossessStart");
static_assert(sizeof(PossessPlayer_Cosmetic_OnPossessStart) == 0x000008, "Wrong size on PossessPlayer_Cosmetic_OnPossessStart");
static_assert(offsetof(PossessPlayer_Cosmetic_OnPossessStart, Player) == 0x000000, "Member 'PossessPlayer_Cosmetic_OnPossessStart::Player' has a wrong offset!");

// Function TheTwins.PossessTheConjoinedTwin.OnPowerCollected
// 0x0008 (0x0008 - 0x0000)
struct PossessTheConjoinedTwin_OnPowerCollected final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessTheConjoinedTwin_OnPowerCollected) == 0x000008, "Wrong alignment on PossessTheConjoinedTwin_OnPowerCollected");
static_assert(sizeof(PossessTheConjoinedTwin_OnPowerCollected) == 0x000008, "Wrong size on PossessTheConjoinedTwin_OnPowerCollected");
static_assert(offsetof(PossessTheConjoinedTwin_OnPowerCollected, Collector) == 0x000000, "Member 'PossessTheConjoinedTwin_OnPowerCollected::Collector' has a wrong offset!");

// Function TheTwins.PossessTheConjoinedTwin.OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct PossessTheConjoinedTwin_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessTheConjoinedTwin_OnTwinSet) == 0x000008, "Wrong alignment on PossessTheConjoinedTwin_OnTwinSet");
static_assert(sizeof(PossessTheConjoinedTwin_OnTwinSet) == 0x000008, "Wrong size on PossessTheConjoinedTwin_OnTwinSet");
static_assert(offsetof(PossessTheConjoinedTwin_OnTwinSet, Twin) == 0x000000, "Member 'PossessTheConjoinedTwin_OnTwinSet::Twin' has a wrong offset!");

// Function TheTwins.ChargeTwinJumpInteraction.Cosmetic_OnJumpReadyChanged
// 0x0010 (0x0010 - 0x0000)
struct ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged final
{
public:
	class ADBDPlayer*                             Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Ready;                                             // 0x0008(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged) == 0x000008, "Wrong alignment on ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged");
static_assert(sizeof(ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged) == 0x000010, "Wrong size on ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged");
static_assert(offsetof(ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged, Twin) == 0x000000, "Member 'ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged::Twin' has a wrong offset!");
static_assert(offsetof(ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged, Ready) == 0x000008, "Member 'ChargeTwinJumpInteraction_Cosmetic_OnJumpReadyChanged::Ready' has a wrong offset!");

// Function TheTwins.ConjoinedTwin.Authority_OnFirecrackerInRangeBegin
// 0x0010 (0x0010 - 0x0000)
struct ConjoinedTwin_Authority_OnFirecrackerInRangeBegin final
{
public:
	struct FRangedExplosiveEffectData             EffectData;                                        // 0x0000(0x0010)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConjoinedTwin_Authority_OnFirecrackerInRangeBegin) == 0x000008, "Wrong alignment on ConjoinedTwin_Authority_OnFirecrackerInRangeBegin");
static_assert(sizeof(ConjoinedTwin_Authority_OnFirecrackerInRangeBegin) == 0x000010, "Wrong size on ConjoinedTwin_Authority_OnFirecrackerInRangeBegin");
static_assert(offsetof(ConjoinedTwin_Authority_OnFirecrackerInRangeBegin, EffectData) == 0x000000, "Member 'ConjoinedTwin_Authority_OnFirecrackerInRangeBegin::EffectData' has a wrong offset!");

// Function TheTwins.ConjoinedTwin.Cosmetic_OnOnGroundUncontrolledChanged
// 0x0001 (0x0001 - 0x0000)
struct ConjoinedTwin_Cosmetic_OnOnGroundUncontrolledChanged final
{
public:
	bool                                          OnGroundAndUncontrolled;                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConjoinedTwin_Cosmetic_OnOnGroundUncontrolledChanged) == 0x000001, "Wrong alignment on ConjoinedTwin_Cosmetic_OnOnGroundUncontrolledChanged");
static_assert(sizeof(ConjoinedTwin_Cosmetic_OnOnGroundUncontrolledChanged) == 0x000001, "Wrong size on ConjoinedTwin_Cosmetic_OnOnGroundUncontrolledChanged");
static_assert(offsetof(ConjoinedTwin_Cosmetic_OnOnGroundUncontrolledChanged, OnGroundAndUncontrolled) == 0x000000, "Member 'ConjoinedTwin_Cosmetic_OnOnGroundUncontrolledChanged::OnGroundAndUncontrolled' has a wrong offset!");

// Function TheTwins.ConjoinedTwin.OnFinishedPlayingEvent
// 0x0040 (0x0040 - 0x0000)
struct ConjoinedTwin_OnFinishedPlayingEvent final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConjoinedTwin_OnFinishedPlayingEvent) == 0x000008, "Wrong alignment on ConjoinedTwin_OnFinishedPlayingEvent");
static_assert(sizeof(ConjoinedTwin_OnFinishedPlayingEvent) == 0x000040, "Wrong size on ConjoinedTwin_OnFinishedPlayingEvent");
static_assert(offsetof(ConjoinedTwin_OnFinishedPlayingEvent, GameEventType) == 0x000000, "Member 'ConjoinedTwin_OnFinishedPlayingEvent::GameEventType' has a wrong offset!");
static_assert(offsetof(ConjoinedTwin_OnFinishedPlayingEvent, GameEventData) == 0x000010, "Member 'ConjoinedTwin_OnFinishedPlayingEvent::GameEventData' has a wrong offset!");

// Function TheTwins.ConjoinedTwin.Server_SendAttackInput
// 0x0001 (0x0001 - 0x0000)
struct ConjoinedTwin_Server_SendAttackInput final
{
public:
	bool                                          Pressed;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConjoinedTwin_Server_SendAttackInput) == 0x000001, "Wrong alignment on ConjoinedTwin_Server_SendAttackInput");
static_assert(sizeof(ConjoinedTwin_Server_SendAttackInput) == 0x000001, "Wrong size on ConjoinedTwin_Server_SendAttackInput");
static_assert(offsetof(ConjoinedTwin_Server_SendAttackInput, Pressed) == 0x000000, "Member 'ConjoinedTwin_Server_SendAttackInput::Pressed' has a wrong offset!");

// Function TheTwins.ConjoinedTwinAnimInstance.GetOwningConjoinedTwin
// 0x0008 (0x0008 - 0x0000)
struct ConjoinedTwinAnimInstance_GetOwningConjoinedTwin final
{
public:
	const class AConjoinedTwin*                   ReturnValue;                                       // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ConjoinedTwinAnimInstance_GetOwningConjoinedTwin) == 0x000008, "Wrong alignment on ConjoinedTwinAnimInstance_GetOwningConjoinedTwin");
static_assert(sizeof(ConjoinedTwinAnimInstance_GetOwningConjoinedTwin) == 0x000008, "Wrong size on ConjoinedTwinAnimInstance_GetOwningConjoinedTwin");
static_assert(offsetof(ConjoinedTwinAnimInstance_GetOwningConjoinedTwin, ReturnValue) == 0x000000, "Member 'ConjoinedTwinAnimInstance_GetOwningConjoinedTwin::ReturnValue' has a wrong offset!");

// Function TheTwins.Hoarder.Local_ThrowBubbleIndicator
// 0x0018 (0x0018 - 0x0000)
struct Hoarder_Local_ThrowBubbleIndicator final
{
public:
	EPerkInteractionObjectType                    CamperInteractionType;                             // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	const class AActor*                           ObjectActor;                                       // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class ACamperPlayer*                    InteractingCamperPlayer;                           // 0x0010(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hoarder_Local_ThrowBubbleIndicator) == 0x000008, "Wrong alignment on Hoarder_Local_ThrowBubbleIndicator");
static_assert(sizeof(Hoarder_Local_ThrowBubbleIndicator) == 0x000018, "Wrong size on Hoarder_Local_ThrowBubbleIndicator");
static_assert(offsetof(Hoarder_Local_ThrowBubbleIndicator, CamperInteractionType) == 0x000000, "Member 'Hoarder_Local_ThrowBubbleIndicator::CamperInteractionType' has a wrong offset!");
static_assert(offsetof(Hoarder_Local_ThrowBubbleIndicator, ObjectActor) == 0x000008, "Member 'Hoarder_Local_ThrowBubbleIndicator::ObjectActor' has a wrong offset!");
static_assert(offsetof(Hoarder_Local_ThrowBubbleIndicator, InteractingCamperPlayer) == 0x000010, "Member 'Hoarder_Local_ThrowBubbleIndicator::InteractingCamperPlayer' has a wrong offset!");

// Function TheTwins.Hoarder.OnItemAddedToPlayer
// 0x0018 (0x0018 - 0x0000)
struct Hoarder_OnItemAddedToPlayer final
{
public:
	class ACollectable*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ACamperPlayer*                          Player;                                            // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hoarder_OnItemAddedToPlayer) == 0x000008, "Wrong alignment on Hoarder_OnItemAddedToPlayer");
static_assert(sizeof(Hoarder_OnItemAddedToPlayer) == 0x000018, "Wrong size on Hoarder_OnItemAddedToPlayer");
static_assert(offsetof(Hoarder_OnItemAddedToPlayer, Item) == 0x000000, "Member 'Hoarder_OnItemAddedToPlayer::Item' has a wrong offset!");
static_assert(offsetof(Hoarder_OnItemAddedToPlayer, InventoryType) == 0x000008, "Member 'Hoarder_OnItemAddedToPlayer::InventoryType' has a wrong offset!");
static_assert(offsetof(Hoarder_OnItemAddedToPlayer, Player) == 0x000010, "Member 'Hoarder_OnItemAddedToPlayer::Player' has a wrong offset!");

// Function TheTwins.Hoarder.OnItemRemovedFromPlayer
// 0x0010 (0x0010 - 0x0000)
struct Hoarder_OnItemRemovedFromPlayer final
{
public:
	class ACollectable*                           Item;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInventoryType                                InventoryType;                                     // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(Hoarder_OnItemRemovedFromPlayer) == 0x000008, "Wrong alignment on Hoarder_OnItemRemovedFromPlayer");
static_assert(sizeof(Hoarder_OnItemRemovedFromPlayer) == 0x000010, "Wrong size on Hoarder_OnItemRemovedFromPlayer");
static_assert(offsetof(Hoarder_OnItemRemovedFromPlayer, Item) == 0x000000, "Member 'Hoarder_OnItemRemovedFromPlayer::Item' has a wrong offset!");
static_assert(offsetof(Hoarder_OnItemRemovedFromPlayer, InventoryType) == 0x000008, "Member 'Hoarder_OnItemRemovedFromPlayer::InventoryType' has a wrong offset!");

// Function TheTwins.Hoarder.GetBubbleIndicatorLifetime
// 0x0004 (0x0004 - 0x0000)
struct Hoarder_GetBubbleIndicatorLifetime final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Hoarder_GetBubbleIndicatorLifetime) == 0x000004, "Wrong alignment on Hoarder_GetBubbleIndicatorLifetime");
static_assert(sizeof(Hoarder_GetBubbleIndicatorLifetime) == 0x000004, "Wrong size on Hoarder_GetBubbleIndicatorLifetime");
static_assert(offsetof(Hoarder_GetBubbleIndicatorLifetime, ReturnValue) == 0x000000, "Member 'Hoarder_GetBubbleIndicatorLifetime::ReturnValue' has a wrong offset!");

// Function TheTwins.K22Power.Authority_OnDestroyTwinChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct K22Power_Authority_OnDestroyTwinChargePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K22Power_Authority_OnDestroyTwinChargePercentChanged) == 0x000008, "Wrong alignment on K22Power_Authority_OnDestroyTwinChargePercentChanged");
static_assert(sizeof(K22Power_Authority_OnDestroyTwinChargePercentChanged) == 0x000010, "Wrong size on K22Power_Authority_OnDestroyTwinChargePercentChanged");
static_assert(offsetof(K22Power_Authority_OnDestroyTwinChargePercentChanged, ChargeableComponent) == 0x000000, "Member 'K22Power_Authority_OnDestroyTwinChargePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(K22Power_Authority_OnDestroyTwinChargePercentChanged, PercentCompletionChange) == 0x000008, "Member 'K22Power_Authority_OnDestroyTwinChargePercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(K22Power_Authority_OnDestroyTwinChargePercentChanged, TotalPercentComplete) == 0x00000C, "Member 'K22Power_Authority_OnDestroyTwinChargePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function TheTwins.K22Power.Authority_OnPossessTwinChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct K22Power_Authority_OnPossessTwinChargePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K22Power_Authority_OnPossessTwinChargePercentChanged) == 0x000008, "Wrong alignment on K22Power_Authority_OnPossessTwinChargePercentChanged");
static_assert(sizeof(K22Power_Authority_OnPossessTwinChargePercentChanged) == 0x000010, "Wrong size on K22Power_Authority_OnPossessTwinChargePercentChanged");
static_assert(offsetof(K22Power_Authority_OnPossessTwinChargePercentChanged, ChargeableComponent) == 0x000000, "Member 'K22Power_Authority_OnPossessTwinChargePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(K22Power_Authority_OnPossessTwinChargePercentChanged, PercentCompletionChange) == 0x000008, "Member 'K22Power_Authority_OnPossessTwinChargePercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(K22Power_Authority_OnPossessTwinChargePercentChanged, TotalPercentComplete) == 0x00000C, "Member 'K22Power_Authority_OnPossessTwinChargePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function TheTwins.K22Power.Authority_TwinDestroyedBySurvivor
// 0x0040 (0x0040 - 0x0000)
struct K22Power_Authority_TwinDestroyedBySurvivor final
{
public:
	struct FGameplayTag                           GameplayTag;                                       // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(K22Power_Authority_TwinDestroyedBySurvivor) == 0x000008, "Wrong alignment on K22Power_Authority_TwinDestroyedBySurvivor");
static_assert(sizeof(K22Power_Authority_TwinDestroyedBySurvivor) == 0x000040, "Wrong size on K22Power_Authority_TwinDestroyedBySurvivor");
static_assert(offsetof(K22Power_Authority_TwinDestroyedBySurvivor, GameplayTag) == 0x000000, "Member 'K22Power_Authority_TwinDestroyedBySurvivor::GameplayTag' has a wrong offset!");
static_assert(offsetof(K22Power_Authority_TwinDestroyedBySurvivor, GameEventData) == 0x000010, "Member 'K22Power_Authority_TwinDestroyedBySurvivor::GameEventData' has a wrong offset!");

// Function TheTwins.K22Power.GetConjoinedTwin
// 0x0008 (0x0008 - 0x0000)
struct K22Power_GetConjoinedTwin final
{
public:
	class AConjoinedTwin*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K22Power_GetConjoinedTwin) == 0x000008, "Wrong alignment on K22Power_GetConjoinedTwin");
static_assert(sizeof(K22Power_GetConjoinedTwin) == 0x000008, "Wrong size on K22Power_GetConjoinedTwin");
static_assert(offsetof(K22Power_GetConjoinedTwin, ReturnValue) == 0x000000, "Member 'K22Power_GetConjoinedTwin::ReturnValue' has a wrong offset!");

// Function TheTwins.K22PowerChargePresentationItemProgressComponent.OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct K22PowerChargePresentationItemProgressComponent_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(K22PowerChargePresentationItemProgressComponent_OnTwinSet) == 0x000008, "Wrong alignment on K22PowerChargePresentationItemProgressComponent_OnTwinSet");
static_assert(sizeof(K22PowerChargePresentationItemProgressComponent_OnTwinSet) == 0x000008, "Wrong size on K22PowerChargePresentationItemProgressComponent_OnTwinSet");
static_assert(offsetof(K22PowerChargePresentationItemProgressComponent_OnTwinSet, Twin) == 0x000000, "Member 'K22PowerChargePresentationItemProgressComponent_OnTwinSet::Twin' has a wrong offset!");

// Function TheTwins.PossessionComponent.Cosmetic_OnControlledChanged
// 0x0010 (0x0010 - 0x0000)
struct PossessionComponent_Cosmetic_OnControlledChanged final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsControlled;                                      // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PossessionComponent_Cosmetic_OnControlledChanged) == 0x000008, "Wrong alignment on PossessionComponent_Cosmetic_OnControlledChanged");
static_assert(sizeof(PossessionComponent_Cosmetic_OnControlledChanged) == 0x000010, "Wrong size on PossessionComponent_Cosmetic_OnControlledChanged");
static_assert(offsetof(PossessionComponent_Cosmetic_OnControlledChanged, Player) == 0x000000, "Member 'PossessionComponent_Cosmetic_OnControlledChanged::Player' has a wrong offset!");
static_assert(offsetof(PossessionComponent_Cosmetic_OnControlledChanged, IsControlled) == 0x000008, "Member 'PossessionComponent_Cosmetic_OnControlledChanged::IsControlled' has a wrong offset!");

// Function TheTwins.PossessionComponent.CosmeticLocal_OnControlled
// 0x0008 (0x0008 - 0x0000)
struct PossessionComponent_CosmeticLocal_OnControlled final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessionComponent_CosmeticLocal_OnControlled) == 0x000008, "Wrong alignment on PossessionComponent_CosmeticLocal_OnControlled");
static_assert(sizeof(PossessionComponent_CosmeticLocal_OnControlled) == 0x000008, "Wrong size on PossessionComponent_CosmeticLocal_OnControlled");
static_assert(offsetof(PossessionComponent_CosmeticLocal_OnControlled, Player) == 0x000000, "Member 'PossessionComponent_CosmeticLocal_OnControlled::Player' has a wrong offset!");

// Function TheTwins.PossessionComponent.CosmeticLocal_OnUncontrolled
// 0x0008 (0x0008 - 0x0000)
struct PossessionComponent_CosmeticLocal_OnUncontrolled final
{
public:
	class ADBDPlayer*                             Player;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessionComponent_CosmeticLocal_OnUncontrolled) == 0x000008, "Wrong alignment on PossessionComponent_CosmeticLocal_OnUncontrolled");
static_assert(sizeof(PossessionComponent_CosmeticLocal_OnUncontrolled) == 0x000008, "Wrong size on PossessionComponent_CosmeticLocal_OnUncontrolled");
static_assert(offsetof(PossessionComponent_CosmeticLocal_OnUncontrolled, Player) == 0x000000, "Member 'PossessionComponent_CosmeticLocal_OnUncontrolled::Player' has a wrong offset!");

// Function TheTwins.PossessionComponent.Multicast_StartPossessionOf
// 0x0008 (0x0008 - 0x0000)
struct PossessionComponent_Multicast_StartPossessionOf final
{
public:
	class ADBDPlayer*                             PlayerToPossess;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessionComponent_Multicast_StartPossessionOf) == 0x000008, "Wrong alignment on PossessionComponent_Multicast_StartPossessionOf");
static_assert(sizeof(PossessionComponent_Multicast_StartPossessionOf) == 0x000008, "Wrong size on PossessionComponent_Multicast_StartPossessionOf");
static_assert(offsetof(PossessionComponent_Multicast_StartPossessionOf, PlayerToPossess) == 0x000000, "Member 'PossessionComponent_Multicast_StartPossessionOf::PlayerToPossess' has a wrong offset!");

// Function TheTwins.PossessionComponent.Server_StartPossessionOf
// 0x0010 (0x0010 - 0x0000)
struct PossessionComponent_Server_StartPossessionOf final
{
public:
	class ADBDPlayer*                             PlayerToPossess;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldStartBeingPossessedInteraction;              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(PossessionComponent_Server_StartPossessionOf) == 0x000008, "Wrong alignment on PossessionComponent_Server_StartPossessionOf");
static_assert(sizeof(PossessionComponent_Server_StartPossessionOf) == 0x000010, "Wrong size on PossessionComponent_Server_StartPossessionOf");
static_assert(offsetof(PossessionComponent_Server_StartPossessionOf, PlayerToPossess) == 0x000000, "Member 'PossessionComponent_Server_StartPossessionOf::PlayerToPossess' has a wrong offset!");
static_assert(offsetof(PossessionComponent_Server_StartPossessionOf, ShouldStartBeingPossessedInteraction) == 0x000008, "Member 'PossessionComponent_Server_StartPossessionOf::ShouldStartBeingPossessedInteraction' has a wrong offset!");

// Function TheTwins.PossessionComponent.IsDormant
// 0x0001 (0x0001 - 0x0000)
struct PossessionComponent_IsDormant final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessionComponent_IsDormant) == 0x000001, "Wrong alignment on PossessionComponent_IsDormant");
static_assert(sizeof(PossessionComponent_IsDormant) == 0x000001, "Wrong size on PossessionComponent_IsDormant");
static_assert(offsetof(PossessionComponent_IsDormant, ReturnValue) == 0x000000, "Member 'PossessionComponent_IsDormant::ReturnValue' has a wrong offset!");

// Function TheTwins.PossessionComponent.IsPossessed
// 0x0001 (0x0001 - 0x0000)
struct PossessionComponent_IsPossessed final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PossessionComponent_IsPossessed) == 0x000001, "Wrong alignment on PossessionComponent_IsPossessed");
static_assert(sizeof(PossessionComponent_IsPossessed) == 0x000001, "Wrong size on PossessionComponent_IsPossessed");
static_assert(offsetof(PossessionComponent_IsPossessed, ReturnValue) == 0x000000, "Member 'PossessionComponent_IsPossessed::ReturnValue' has a wrong offset!");

// Function TheTwins.KillerPossessNegationEffectComponent.OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct KillerPossessNegationEffectComponent_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(KillerPossessNegationEffectComponent_OnTwinSet) == 0x000008, "Wrong alignment on KillerPossessNegationEffectComponent_OnTwinSet");
static_assert(sizeof(KillerPossessNegationEffectComponent_OnTwinSet) == 0x000008, "Wrong size on KillerPossessNegationEffectComponent_OnTwinSet");
static_assert(offsetof(KillerPossessNegationEffectComponent_OnTwinSet, Twin) == 0x000000, "Member 'KillerPossessNegationEffectComponent_OnTwinSet::Twin' has a wrong offset!");

// Function TheTwins.Oppression.GetNumberGensAffectedByPerkAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Oppression_GetNumberGensAffectedByPerkAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Oppression_GetNumberGensAffectedByPerkAtLevel) == 0x000004, "Wrong alignment on Oppression_GetNumberGensAffectedByPerkAtLevel");
static_assert(sizeof(Oppression_GetNumberGensAffectedByPerkAtLevel) == 0x000004, "Wrong size on Oppression_GetNumberGensAffectedByPerkAtLevel");
static_assert(offsetof(Oppression_GetNumberGensAffectedByPerkAtLevel, ReturnValue) == 0x000000, "Member 'Oppression_GetNumberGensAffectedByPerkAtLevel::ReturnValue' has a wrong offset!");

// Function TheTwins.Oppression.GetPerkCooldownAtLevel
// 0x0004 (0x0004 - 0x0000)
struct Oppression_GetPerkCooldownAtLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(Oppression_GetPerkCooldownAtLevel) == 0x000004, "Wrong alignment on Oppression_GetPerkCooldownAtLevel");
static_assert(sizeof(Oppression_GetPerkCooldownAtLevel) == 0x000004, "Wrong size on Oppression_GetPerkCooldownAtLevel");
static_assert(offsetof(Oppression_GetPerkCooldownAtLevel, ReturnValue) == 0x000000, "Member 'Oppression_GetPerkCooldownAtLevel::ReturnValue' has a wrong offset!");

// Function TheTwins.PushTwinOnLockerInteraction.Authority_OnPlayerInLockerChanged
// 0x0010 (0x0010 - 0x0000)
struct PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged final
{
public:
	class ADBDPlayer*                             PreviousPlayerInLocker;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             NewPlayerInLocker;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged) == 0x000008, "Wrong alignment on PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged");
static_assert(sizeof(PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged) == 0x000010, "Wrong size on PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged");
static_assert(offsetof(PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged, PreviousPlayerInLocker) == 0x000000, "Member 'PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged::PreviousPlayerInLocker' has a wrong offset!");
static_assert(offsetof(PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged, NewPlayerInLocker) == 0x000008, "Member 'PushTwinOnLockerInteraction_Authority_OnPlayerInLockerChanged::NewPlayerInLocker' has a wrong offset!");

// Function TheTwins.PushTwinOnLockerInteraction.OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct PushTwinOnLockerInteraction_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(PushTwinOnLockerInteraction_OnTwinSet) == 0x000008, "Wrong alignment on PushTwinOnLockerInteraction_OnTwinSet");
static_assert(sizeof(PushTwinOnLockerInteraction_OnTwinSet) == 0x000008, "Wrong size on PushTwinOnLockerInteraction_OnTwinSet");
static_assert(offsetof(PushTwinOnLockerInteraction_OnTwinSet, Twin) == 0x000000, "Member 'PushTwinOnLockerInteraction_OnTwinSet::Twin' has a wrong offset!");

// Function TheTwins.RecallTwin.OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct RecallTwin_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RecallTwin_OnTwinSet) == 0x000008, "Wrong alignment on RecallTwin_OnTwinSet");
static_assert(sizeof(RecallTwin_OnTwinSet) == 0x000008, "Wrong size on RecallTwin_OnTwinSet");
static_assert(offsetof(RecallTwin_OnTwinSet, Twin) == 0x000000, "Member 'RecallTwin_OnTwinSet::Twin' has a wrong offset!");

// Function TheTwins.ReleaseConjoinedTwin.Cosmetic_OnReleaseCancelled
// 0x0010 (0x0010 - 0x0000)
struct ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled final
{
public:
	class ADBDPlayer*                             Sister;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AConjoinedTwin*                         brother;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled) == 0x000008, "Wrong alignment on ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled");
static_assert(sizeof(ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled) == 0x000010, "Wrong size on ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled");
static_assert(offsetof(ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled, Sister) == 0x000000, "Member 'ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled::Sister' has a wrong offset!");
static_assert(offsetof(ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled, brother) == 0x000008, "Member 'ReleaseConjoinedTwin_Cosmetic_OnReleaseCancelled::brother' has a wrong offset!");

// Function TheTwins.ReleaseConjoinedTwin.Cosmetic_OnReleaseChargeComplete
// 0x0010 (0x0010 - 0x0000)
struct ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete final
{
public:
	class ADBDPlayer*                             Sister;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AConjoinedTwin*                         brother;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete) == 0x000008, "Wrong alignment on ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete");
static_assert(sizeof(ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete) == 0x000010, "Wrong size on ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete");
static_assert(offsetof(ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete, Sister) == 0x000000, "Member 'ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete::Sister' has a wrong offset!");
static_assert(offsetof(ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete, brother) == 0x000008, "Member 'ReleaseConjoinedTwin_Cosmetic_OnReleaseChargeComplete::brother' has a wrong offset!");

// Function TheTwins.ReleaseConjoinedTwin.Cosmetic_OnReleaseTwinInteractionUpdate
// 0x0018 (0x0018 - 0x0000)
struct ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate final
{
public:
	class ADBDPlayer*                             Sister;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AConjoinedTwin*                         brother;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeltaTime;                                         // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate) == 0x000008, "Wrong alignment on ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate");
static_assert(sizeof(ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate) == 0x000018, "Wrong size on ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate");
static_assert(offsetof(ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate, Sister) == 0x000000, "Member 'ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate::Sister' has a wrong offset!");
static_assert(offsetof(ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate, brother) == 0x000008, "Member 'ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate::brother' has a wrong offset!");
static_assert(offsetof(ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate, DeltaTime) == 0x000010, "Member 'ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdate::DeltaTime' has a wrong offset!");

// Function TheTwins.ReleaseConjoinedTwin.Cosmetic_OnReleaseTwinInteractionUpdateStart
// 0x0010 (0x0010 - 0x0000)
struct ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart final
{
public:
	class ADBDPlayer*                             Sister;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AConjoinedTwin*                         brother;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart) == 0x000008, "Wrong alignment on ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart");
static_assert(sizeof(ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart) == 0x000010, "Wrong size on ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart");
static_assert(offsetof(ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart, Sister) == 0x000000, "Member 'ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart::Sister' has a wrong offset!");
static_assert(offsetof(ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart, brother) == 0x000008, "Member 'ReleaseConjoinedTwin_Cosmetic_OnReleaseTwinInteractionUpdateStart::brother' has a wrong offset!");

// Function TheTwins.ReleaseConjoinedTwin.OnKillerStunned
// 0x0040 (0x0040 - 0x0000)
struct ReleaseConjoinedTwin_OnKillerStunned final
{
public:
	struct FGameplayTag                           GameEventType;                                     // 0x0000(0x000C)(ConstParm, Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameEventData                         GameEventData;                                     // 0x0010(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReleaseConjoinedTwin_OnKillerStunned) == 0x000008, "Wrong alignment on ReleaseConjoinedTwin_OnKillerStunned");
static_assert(sizeof(ReleaseConjoinedTwin_OnKillerStunned) == 0x000040, "Wrong size on ReleaseConjoinedTwin_OnKillerStunned");
static_assert(offsetof(ReleaseConjoinedTwin_OnKillerStunned, GameEventType) == 0x000000, "Member 'ReleaseConjoinedTwin_OnKillerStunned::GameEventType' has a wrong offset!");
static_assert(offsetof(ReleaseConjoinedTwin_OnKillerStunned, GameEventData) == 0x000010, "Member 'ReleaseConjoinedTwin_OnKillerStunned::GameEventData' has a wrong offset!");

// Function TheTwins.ReleaseConjoinedTwin.OnPowerCollected
// 0x0008 (0x0008 - 0x0000)
struct ReleaseConjoinedTwin_OnPowerCollected final
{
public:
	class ADBDPlayer*                             Collector;                                         // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReleaseConjoinedTwin_OnPowerCollected) == 0x000008, "Wrong alignment on ReleaseConjoinedTwin_OnPowerCollected");
static_assert(sizeof(ReleaseConjoinedTwin_OnPowerCollected) == 0x000008, "Wrong size on ReleaseConjoinedTwin_OnPowerCollected");
static_assert(offsetof(ReleaseConjoinedTwin_OnPowerCollected, Collector) == 0x000000, "Member 'ReleaseConjoinedTwin_OnPowerCollected::Collector' has a wrong offset!");

// Function TheTwins.ReleaseConjoinedTwin.OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct ReleaseConjoinedTwin_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(ReleaseConjoinedTwin_OnTwinSet) == 0x000008, "Wrong alignment on ReleaseConjoinedTwin_OnTwinSet");
static_assert(sizeof(ReleaseConjoinedTwin_OnTwinSet) == 0x000008, "Wrong size on ReleaseConjoinedTwin_OnTwinSet");
static_assert(offsetof(ReleaseConjoinedTwin_OnTwinSet, Twin) == 0x000000, "Member 'ReleaseConjoinedTwin_OnTwinSet::Twin' has a wrong offset!");

// Function TheTwins.RemoveTwin.OnRemoveMontageEnd
// 0x0030 (0x0030 - 0x0000)
struct RemoveTwin_OnRemoveMontageEnd final
{
public:
	struct FAnimationMontageDescriptor            Montage;                                           // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ADBDPlayer*                             DestroyingPlayer;                                  // 0x0028(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(RemoveTwin_OnRemoveMontageEnd) == 0x000008, "Wrong alignment on RemoveTwin_OnRemoveMontageEnd");
static_assert(sizeof(RemoveTwin_OnRemoveMontageEnd) == 0x000030, "Wrong size on RemoveTwin_OnRemoveMontageEnd");
static_assert(offsetof(RemoveTwin_OnRemoveMontageEnd, Montage) == 0x000000, "Member 'RemoveTwin_OnRemoveMontageEnd::Montage' has a wrong offset!");
static_assert(offsetof(RemoveTwin_OnRemoveMontageEnd, Interrupted) == 0x000020, "Member 'RemoveTwin_OnRemoveMontageEnd::Interrupted' has a wrong offset!");
static_assert(offsetof(RemoveTwin_OnRemoveMontageEnd, DestroyingPlayer) == 0x000028, "Member 'RemoveTwin_OnRemoveMontageEnd::DestroyingPlayer' has a wrong offset!");

// Function TheTwins.SisterBlindFlashlightableLightingStrategy.OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct SisterBlindFlashlightableLightingStrategy_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SisterBlindFlashlightableLightingStrategy_OnTwinSet) == 0x000008, "Wrong alignment on SisterBlindFlashlightableLightingStrategy_OnTwinSet");
static_assert(sizeof(SisterBlindFlashlightableLightingStrategy_OnTwinSet) == 0x000008, "Wrong size on SisterBlindFlashlightableLightingStrategy_OnTwinSet");
static_assert(offsetof(SisterBlindFlashlightableLightingStrategy_OnTwinSet, Twin) == 0x000000, "Member 'SisterBlindFlashlightableLightingStrategy_OnTwinSet::Twin' has a wrong offset!");

// Function TheTwins.TheTwinsCheatComponent.Multicast_TrySendThePlayerBackInKiller
// 0x0008 (0x0008 - 0x0000)
struct TheTwinsCheatComponent_Multicast_TrySendThePlayerBackInKiller final
{
public:
	class UTwinPossessionComponent*               TwinPossessionComponent;                           // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TheTwinsCheatComponent_Multicast_TrySendThePlayerBackInKiller) == 0x000008, "Wrong alignment on TheTwinsCheatComponent_Multicast_TrySendThePlayerBackInKiller");
static_assert(sizeof(TheTwinsCheatComponent_Multicast_TrySendThePlayerBackInKiller) == 0x000008, "Wrong size on TheTwinsCheatComponent_Multicast_TrySendThePlayerBackInKiller");
static_assert(offsetof(TheTwinsCheatComponent_Multicast_TrySendThePlayerBackInKiller, TwinPossessionComponent) == 0x000000, "Member 'TheTwinsCheatComponent_Multicast_TrySendThePlayerBackInKiller::TwinPossessionComponent' has a wrong offset!");

// Function TheTwins.TwinAOELingeringStatusEffect.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct TwinAOELingeringStatusEffect_Authority_OnInRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinAOELingeringStatusEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on TwinAOELingeringStatusEffect_Authority_OnInRangeChanged");
static_assert(sizeof(TwinAOELingeringStatusEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong size on TwinAOELingeringStatusEffect_Authority_OnInRangeChanged");
static_assert(offsetof(TwinAOELingeringStatusEffect_Authority_OnInRangeChanged, InRange) == 0x000000, "Member 'TwinAOELingeringStatusEffect_Authority_OnInRangeChanged::InRange' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.Authority_OnRemoveTwinChargePercentChanged
// 0x0010 (0x0010 - 0x0000)
struct TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged final
{
public:
	class UChargeableComponent*                   ChargeableComponent;                               // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentCompletionChange;                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalPercentComplete;                              // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged) == 0x000008, "Wrong alignment on TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged");
static_assert(sizeof(TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged) == 0x000010, "Wrong size on TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged");
static_assert(offsetof(TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged, ChargeableComponent) == 0x000000, "Member 'TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged::ChargeableComponent' has a wrong offset!");
static_assert(offsetof(TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged, PercentCompletionChange) == 0x000008, "Member 'TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged::PercentCompletionChange' has a wrong offset!");
static_assert(offsetof(TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged, TotalPercentComplete) == 0x00000C, "Member 'TwinAttachmentComponent_Authority_OnRemoveTwinChargePercentChanged::TotalPercentComplete' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.Cosmetic_OnTwinAttachedToSister
// 0x0018 (0x0018 - 0x0000)
struct TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister final
{
public:
	class ADBDPlayer*                             Sister;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             brother;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFirstAttachment;                                 // 0x0010(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister) == 0x000008, "Wrong alignment on TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister");
static_assert(sizeof(TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister) == 0x000018, "Wrong size on TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister");
static_assert(offsetof(TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister, Sister) == 0x000000, "Member 'TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister::Sister' has a wrong offset!");
static_assert(offsetof(TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister, brother) == 0x000008, "Member 'TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister::brother' has a wrong offset!");
static_assert(offsetof(TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister, IsFirstAttachment) == 0x000010, "Member 'TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSister::IsFirstAttachment' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.Cosmetic_OnTwinAttachedToSurvivor
// 0x0010 (0x0010 - 0x0000)
struct TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor final
{
public:
	class ADBDPlayer*                             Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             brother;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor) == 0x000008, "Wrong alignment on TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor");
static_assert(sizeof(TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor) == 0x000010, "Wrong size on TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor");
static_assert(offsetof(TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor, Survivor) == 0x000000, "Member 'TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor::Survivor' has a wrong offset!");
static_assert(offsetof(TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor, brother) == 0x000008, "Member 'TwinAttachmentComponent_Cosmetic_OnTwinAttachedToSurvivor::brother' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.Cosmetic_OnTwinDetachedFromSister
// 0x0010 (0x0010 - 0x0000)
struct TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister final
{
public:
	class ADBDPlayer*                             Sister;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             brother;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister) == 0x000008, "Wrong alignment on TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister");
static_assert(sizeof(TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister) == 0x000010, "Wrong size on TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister");
static_assert(offsetof(TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister, Sister) == 0x000000, "Member 'TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister::Sister' has a wrong offset!");
static_assert(offsetof(TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister, brother) == 0x000008, "Member 'TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSister::brother' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.Cosmetic_OnTwinDetachedFromSurvivor
// 0x0010 (0x0010 - 0x0000)
struct TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor final
{
public:
	class ADBDPlayer*                             Survivor;                                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             brother;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor) == 0x000008, "Wrong alignment on TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor");
static_assert(sizeof(TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor) == 0x000010, "Wrong size on TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor");
static_assert(offsetof(TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor, Survivor) == 0x000000, "Member 'TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor::Survivor' has a wrong offset!");
static_assert(offsetof(TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor, brother) == 0x000008, "Member 'TwinAttachmentComponent_Cosmetic_OnTwinDetachedFromSurvivor::brother' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.OnAttachedSurvivorDamageStateChanged
// 0x0002 (0x0002 - 0x0000)
struct TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged final
{
public:
	ECamperDamageState                            OldState;                                          // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECamperDamageState                            NewState;                                          // 0x0001(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged) == 0x000001, "Wrong alignment on TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged");
static_assert(sizeof(TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged) == 0x000002, "Wrong size on TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged");
static_assert(offsetof(TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged, OldState) == 0x000000, "Member 'TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged::OldState' has a wrong offset!");
static_assert(offsetof(TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged, NewState) == 0x000001, "Member 'TwinAttachmentComponent_OnAttachedSurvivorDamageStateChanged::NewState' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.OnMoriMontageEnd
// 0x0028 (0x0028 - 0x0000)
struct TwinAttachmentComponent_OnMoriMontageEnd final
{
public:
	struct FAnimationMontageDescriptor            Montage;                                           // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TwinAttachmentComponent_OnMoriMontageEnd) == 0x000008, "Wrong alignment on TwinAttachmentComponent_OnMoriMontageEnd");
static_assert(sizeof(TwinAttachmentComponent_OnMoriMontageEnd) == 0x000028, "Wrong size on TwinAttachmentComponent_OnMoriMontageEnd");
static_assert(offsetof(TwinAttachmentComponent_OnMoriMontageEnd, Montage) == 0x000000, "Member 'TwinAttachmentComponent_OnMoriMontageEnd::Montage' has a wrong offset!");
static_assert(offsetof(TwinAttachmentComponent_OnMoriMontageEnd, Interrupted) == 0x000020, "Member 'TwinAttachmentComponent_OnMoriMontageEnd::Interrupted' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.OnRep_AttachedPlayer
// 0x0008 (0x0008 - 0x0000)
struct TwinAttachmentComponent_OnRep_AttachedPlayer final
{
public:
	class ADBDPlayer*                             OldAttachedPlayer;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinAttachmentComponent_OnRep_AttachedPlayer) == 0x000008, "Wrong alignment on TwinAttachmentComponent_OnRep_AttachedPlayer");
static_assert(sizeof(TwinAttachmentComponent_OnRep_AttachedPlayer) == 0x000008, "Wrong size on TwinAttachmentComponent_OnRep_AttachedPlayer");
static_assert(offsetof(TwinAttachmentComponent_OnRep_AttachedPlayer, OldAttachedPlayer) == 0x000000, "Member 'TwinAttachmentComponent_OnRep_AttachedPlayer::OldAttachedPlayer' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.IsAttachedToSister
// 0x0001 (0x0001 - 0x0000)
struct TwinAttachmentComponent_IsAttachedToSister final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinAttachmentComponent_IsAttachedToSister) == 0x000001, "Wrong alignment on TwinAttachmentComponent_IsAttachedToSister");
static_assert(sizeof(TwinAttachmentComponent_IsAttachedToSister) == 0x000001, "Wrong size on TwinAttachmentComponent_IsAttachedToSister");
static_assert(offsetof(TwinAttachmentComponent_IsAttachedToSister, ReturnValue) == 0x000000, "Member 'TwinAttachmentComponent_IsAttachedToSister::ReturnValue' has a wrong offset!");

// Function TheTwins.TwinAttachmentComponent.IsAttachedToSurvivor
// 0x0001 (0x0001 - 0x0000)
struct TwinAttachmentComponent_IsAttachedToSurvivor final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinAttachmentComponent_IsAttachedToSurvivor) == 0x000001, "Wrong alignment on TwinAttachmentComponent_IsAttachedToSurvivor");
static_assert(sizeof(TwinAttachmentComponent_IsAttachedToSurvivor) == 0x000001, "Wrong size on TwinAttachmentComponent_IsAttachedToSurvivor");
static_assert(offsetof(TwinAttachmentComponent_IsAttachedToSurvivor, ReturnValue) == 0x000000, "Member 'TwinAttachmentComponent_IsAttachedToSurvivor::ReturnValue' has a wrong offset!");

// Function TheTwins.TwinBaseAddon.Authority_OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct TwinBaseAddon_Authority_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinBaseAddon_Authority_OnTwinSet) == 0x000008, "Wrong alignment on TwinBaseAddon_Authority_OnTwinSet");
static_assert(sizeof(TwinBaseAddon_Authority_OnTwinSet) == 0x000008, "Wrong size on TwinBaseAddon_Authority_OnTwinSet");
static_assert(offsetof(TwinBaseAddon_Authority_OnTwinSet, Twin) == 0x000000, "Member 'TwinBaseAddon_Authority_OnTwinSet::Twin' has a wrong offset!");

// Function TheTwins.TwinBaseKillerInstinctEffect.Authority_OnInRangeChanged
// 0x0001 (0x0001 - 0x0000)
struct TwinBaseKillerInstinctEffect_Authority_OnInRangeChanged final
{
public:
	bool                                          InRange;                                           // 0x0000(0x0001)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinBaseKillerInstinctEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong alignment on TwinBaseKillerInstinctEffect_Authority_OnInRangeChanged");
static_assert(sizeof(TwinBaseKillerInstinctEffect_Authority_OnInRangeChanged) == 0x000001, "Wrong size on TwinBaseKillerInstinctEffect_Authority_OnInRangeChanged");
static_assert(offsetof(TwinBaseKillerInstinctEffect_Authority_OnInRangeChanged, InRange) == 0x000000, "Member 'TwinBaseKillerInstinctEffect_Authority_OnInRangeChanged::InRange' has a wrong offset!");

// Function TheTwins.TwinDestructionComponent.Cosmetic_OnTwinDestroyedFromKick
// 0x0008 (0x0008 - 0x0000)
struct TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromKick final
{
public:
	class AConjoinedTwin*                         OwningTwin;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromKick) == 0x000008, "Wrong alignment on TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromKick");
static_assert(sizeof(TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromKick) == 0x000008, "Wrong size on TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromKick");
static_assert(offsetof(TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromKick, OwningTwin) == 0x000000, "Member 'TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromKick::OwningTwin' has a wrong offset!");

// Function TheTwins.TwinDestructionComponent.Cosmetic_OnTwinDestroyedFromSurvivorRemove
// 0x0008 (0x0008 - 0x0000)
struct TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromSurvivorRemove final
{
public:
	class AConjoinedTwin*                         OwningTwin;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromSurvivorRemove) == 0x000008, "Wrong alignment on TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromSurvivorRemove");
static_assert(sizeof(TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromSurvivorRemove) == 0x000008, "Wrong size on TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromSurvivorRemove");
static_assert(offsetof(TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromSurvivorRemove, OwningTwin) == 0x000000, "Member 'TwinDestructionComponent_Cosmetic_OnTwinDestroyedFromSurvivorRemove::OwningTwin' has a wrong offset!");

// Function TheTwins.TwinDestructionComponent.OnDyingMontageEnd
// 0x0028 (0x0028 - 0x0000)
struct TwinDestructionComponent_OnDyingMontageEnd final
{
public:
	struct FAnimationMontageDescriptor            Montage;                                           // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TwinDestructionComponent_OnDyingMontageEnd) == 0x000008, "Wrong alignment on TwinDestructionComponent_OnDyingMontageEnd");
static_assert(sizeof(TwinDestructionComponent_OnDyingMontageEnd) == 0x000028, "Wrong size on TwinDestructionComponent_OnDyingMontageEnd");
static_assert(offsetof(TwinDestructionComponent_OnDyingMontageEnd, Montage) == 0x000000, "Member 'TwinDestructionComponent_OnDyingMontageEnd::Montage' has a wrong offset!");
static_assert(offsetof(TwinDestructionComponent_OnDyingMontageEnd, Interrupted) == 0x000020, "Member 'TwinDestructionComponent_OnDyingMontageEnd::Interrupted' has a wrong offset!");

// Function TheTwins.TwinDestructionComponent.OnTwinQuickDestroy
// 0x0008 (0x0008 - 0x0000)
struct TwinDestructionComponent_OnTwinQuickDestroy final
{
public:
	class AConjoinedTwin*                         OwningTwin;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinDestructionComponent_OnTwinQuickDestroy) == 0x000008, "Wrong alignment on TwinDestructionComponent_OnTwinQuickDestroy");
static_assert(sizeof(TwinDestructionComponent_OnTwinQuickDestroy) == 0x000008, "Wrong size on TwinDestructionComponent_OnTwinQuickDestroy");
static_assert(offsetof(TwinDestructionComponent_OnTwinQuickDestroy, OwningTwin) == 0x000000, "Member 'TwinDestructionComponent_OnTwinQuickDestroy::OwningTwin' has a wrong offset!");

// Function TheTwins.TwinLockerBlockerComponent.Cosmetic_OnTwinOnLockerChanged
// 0x0001 (0x0001 - 0x0000)
struct TwinLockerBlockerComponent_Cosmetic_OnTwinOnLockerChanged final
{
public:
	bool                                          IsOnLocker;                                        // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinLockerBlockerComponent_Cosmetic_OnTwinOnLockerChanged) == 0x000001, "Wrong alignment on TwinLockerBlockerComponent_Cosmetic_OnTwinOnLockerChanged");
static_assert(sizeof(TwinLockerBlockerComponent_Cosmetic_OnTwinOnLockerChanged) == 0x000001, "Wrong size on TwinLockerBlockerComponent_Cosmetic_OnTwinOnLockerChanged");
static_assert(offsetof(TwinLockerBlockerComponent_Cosmetic_OnTwinOnLockerChanged, IsOnLocker) == 0x000000, "Member 'TwinLockerBlockerComponent_Cosmetic_OnTwinOnLockerChanged::IsOnLocker' has a wrong offset!");

// Function TheTwins.TwinLockerBlockerComponent.OnPlayerInLockerChanged
// 0x0010 (0x0010 - 0x0000)
struct TwinLockerBlockerComponent_OnPlayerInLockerChanged final
{
public:
	class ADBDPlayer*                             PreviousPlayerInLocker;                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADBDPlayer*                             NewPlayerInLocker;                                 // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinLockerBlockerComponent_OnPlayerInLockerChanged) == 0x000008, "Wrong alignment on TwinLockerBlockerComponent_OnPlayerInLockerChanged");
static_assert(sizeof(TwinLockerBlockerComponent_OnPlayerInLockerChanged) == 0x000010, "Wrong size on TwinLockerBlockerComponent_OnPlayerInLockerChanged");
static_assert(offsetof(TwinLockerBlockerComponent_OnPlayerInLockerChanged, PreviousPlayerInLocker) == 0x000000, "Member 'TwinLockerBlockerComponent_OnPlayerInLockerChanged::PreviousPlayerInLocker' has a wrong offset!");
static_assert(offsetof(TwinLockerBlockerComponent_OnPlayerInLockerChanged, NewPlayerInLocker) == 0x000008, "Member 'TwinLockerBlockerComponent_OnPlayerInLockerChanged::NewPlayerInLocker' has a wrong offset!");

// Function TheTwins.TwinLockerBlockerComponent.OnPushedMontageEnded
// 0x0028 (0x0028 - 0x0000)
struct TwinLockerBlockerComponent_OnPushedMontageEnded final
{
public:
	struct FAnimationMontageDescriptor            MontageDescriptor;                                 // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	bool                                          Interrupted;                                       // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TwinLockerBlockerComponent_OnPushedMontageEnded) == 0x000008, "Wrong alignment on TwinLockerBlockerComponent_OnPushedMontageEnded");
static_assert(sizeof(TwinLockerBlockerComponent_OnPushedMontageEnded) == 0x000028, "Wrong size on TwinLockerBlockerComponent_OnPushedMontageEnded");
static_assert(offsetof(TwinLockerBlockerComponent_OnPushedMontageEnded, MontageDescriptor) == 0x000000, "Member 'TwinLockerBlockerComponent_OnPushedMontageEnded::MontageDescriptor' has a wrong offset!");
static_assert(offsetof(TwinLockerBlockerComponent_OnPushedMontageEnded, Interrupted) == 0x000020, "Member 'TwinLockerBlockerComponent_OnPushedMontageEnded::Interrupted' has a wrong offset!");

// Function TheTwins.TwinLockerBlockerComponent.OnPushedMontageStarted
// 0x0028 (0x0028 - 0x0000)
struct TwinLockerBlockerComponent_OnPushedMontageStarted final
{
public:
	struct FAnimationMontageDescriptor            MontageDescriptor;                                 // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
	float                                         Rate;                                              // 0x0020(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(TwinLockerBlockerComponent_OnPushedMontageStarted) == 0x000008, "Wrong alignment on TwinLockerBlockerComponent_OnPushedMontageStarted");
static_assert(sizeof(TwinLockerBlockerComponent_OnPushedMontageStarted) == 0x000028, "Wrong size on TwinLockerBlockerComponent_OnPushedMontageStarted");
static_assert(offsetof(TwinLockerBlockerComponent_OnPushedMontageStarted, MontageDescriptor) == 0x000000, "Member 'TwinLockerBlockerComponent_OnPushedMontageStarted::MontageDescriptor' has a wrong offset!");
static_assert(offsetof(TwinLockerBlockerComponent_OnPushedMontageStarted, Rate) == 0x000020, "Member 'TwinLockerBlockerComponent_OnPushedMontageStarted::Rate' has a wrong offset!");

// Function TheTwins.TwinLockerBlockerComponent.OnPushedMontageStopped
// 0x0020 (0x0020 - 0x0000)
struct TwinLockerBlockerComponent_OnPushedMontageStopped final
{
public:
	struct FAnimationMontageDescriptor            MontageDescriptor;                                 // 0x0000(0x0020)(ConstParm, Parm, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinLockerBlockerComponent_OnPushedMontageStopped) == 0x000008, "Wrong alignment on TwinLockerBlockerComponent_OnPushedMontageStopped");
static_assert(sizeof(TwinLockerBlockerComponent_OnPushedMontageStopped) == 0x000020, "Wrong size on TwinLockerBlockerComponent_OnPushedMontageStopped");
static_assert(offsetof(TwinLockerBlockerComponent_OnPushedMontageStopped, MontageDescriptor) == 0x000000, "Member 'TwinLockerBlockerComponent_OnPushedMontageStopped::MontageDescriptor' has a wrong offset!");

// Function TheTwins.TwinLockerBlockerComponent.IsTwinAttachedToLocker
// 0x0001 (0x0001 - 0x0000)
struct TwinLockerBlockerComponent_IsTwinAttachedToLocker final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinLockerBlockerComponent_IsTwinAttachedToLocker) == 0x000001, "Wrong alignment on TwinLockerBlockerComponent_IsTwinAttachedToLocker");
static_assert(sizeof(TwinLockerBlockerComponent_IsTwinAttachedToLocker) == 0x000001, "Wrong size on TwinLockerBlockerComponent_IsTwinAttachedToLocker");
static_assert(offsetof(TwinLockerBlockerComponent_IsTwinAttachedToLocker, ReturnValue) == 0x000000, "Member 'TwinLockerBlockerComponent_IsTwinAttachedToLocker::ReturnValue' has a wrong offset!");

// Function TheTwins.TwinSubjectProvider.ListenToTwinSet
// 0x0008 (0x0008 - 0x0000)
struct TwinSubjectProvider_ListenToTwinSet final
{
public:
	class ASlasherPlayer*                         Killer;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinSubjectProvider_ListenToTwinSet) == 0x000008, "Wrong alignment on TwinSubjectProvider_ListenToTwinSet");
static_assert(sizeof(TwinSubjectProvider_ListenToTwinSet) == 0x000008, "Wrong size on TwinSubjectProvider_ListenToTwinSet");
static_assert(offsetof(TwinSubjectProvider_ListenToTwinSet, Killer) == 0x000000, "Member 'TwinSubjectProvider_ListenToTwinSet::Killer' has a wrong offset!");

// Function TheTwins.TwinSubjectProvider.OnTwinSet
// 0x0008 (0x0008 - 0x0000)
struct TwinSubjectProvider_OnTwinSet final
{
public:
	class AConjoinedTwin*                         Twin;                                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(TwinSubjectProvider_OnTwinSet) == 0x000008, "Wrong alignment on TwinSubjectProvider_OnTwinSet");
static_assert(sizeof(TwinSubjectProvider_OnTwinSet) == 0x000008, "Wrong size on TwinSubjectProvider_OnTwinSet");
static_assert(offsetof(TwinSubjectProvider_OnTwinSet, Twin) == 0x000000, "Member 'TwinSubjectProvider_OnTwinSet::Twin' has a wrong offset!");

}

