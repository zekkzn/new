#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ThePlague

#include "Basic.hpp"

#include "DBDAnalytics_structs.hpp"


namespace SDK
{

// ScriptStruct ThePlague.PlagueSurvivorAnalytics
// 0x0030 (0x00E8 - 0x00B8)
struct FPlagueSurvivorAnalytics final : public FUniquelyIdentifiedAnalytic
{
public:
	class FString                                 MatchID;                                           // 0x00B8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BecomeInfectCount;                                 // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RegularVomitHits;                                  // 0x00CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SuperVomitHits;                                    // 0x00D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CleanSicknessCount;                                // 0x00D4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeWithSickness;                                  // 0x00D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeWithMaximumSickness;                           // 0x00DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeInSuperMode;                                   // 0x00E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FPlagueSurvivorAnalytics) == 0x000008, "Wrong alignment on FPlagueSurvivorAnalytics");
static_assert(sizeof(FPlagueSurvivorAnalytics) == 0x0000E8, "Wrong size on FPlagueSurvivorAnalytics");
static_assert(offsetof(FPlagueSurvivorAnalytics, MatchID) == 0x0000B8, "Member 'FPlagueSurvivorAnalytics::MatchID' has a wrong offset!");
static_assert(offsetof(FPlagueSurvivorAnalytics, BecomeInfectCount) == 0x0000C8, "Member 'FPlagueSurvivorAnalytics::BecomeInfectCount' has a wrong offset!");
static_assert(offsetof(FPlagueSurvivorAnalytics, RegularVomitHits) == 0x0000CC, "Member 'FPlagueSurvivorAnalytics::RegularVomitHits' has a wrong offset!");
static_assert(offsetof(FPlagueSurvivorAnalytics, SuperVomitHits) == 0x0000D0, "Member 'FPlagueSurvivorAnalytics::SuperVomitHits' has a wrong offset!");
static_assert(offsetof(FPlagueSurvivorAnalytics, CleanSicknessCount) == 0x0000D4, "Member 'FPlagueSurvivorAnalytics::CleanSicknessCount' has a wrong offset!");
static_assert(offsetof(FPlagueSurvivorAnalytics, TimeWithSickness) == 0x0000D8, "Member 'FPlagueSurvivorAnalytics::TimeWithSickness' has a wrong offset!");
static_assert(offsetof(FPlagueSurvivorAnalytics, TimeWithMaximumSickness) == 0x0000DC, "Member 'FPlagueSurvivorAnalytics::TimeWithMaximumSickness' has a wrong offset!");
static_assert(offsetof(FPlagueSurvivorAnalytics, TimeInSuperMode) == 0x0000E0, "Member 'FPlagueSurvivorAnalytics::TimeInSuperMode' has a wrong offset!");

}

